[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"anthonyhoth"},"content":"[![CI Status](https://github.com/AY2223S1-CS2103T-T14-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2223S1-CS2103T-T14-3/tp/actions)","lastModifiedDate":"2022-09-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"anthonyhoth"},"content":"# OmniHealth","lastModifiedDate":"2022-09-27"},{"lineNumber":6,"author":{"gitId":"anthonyhoth"},"content":"OmniHealth is a **desktop app for private clinic practitioners to quickly store, edit and search for patients and their records**. It is optimised for use via a **Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI).","lastModifiedDate":"2022-09-27"},{"lineNumber":7,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":8,"author":{"gitId":"anthonyhoth"},"content":"If you can type fast, OmniHealth can get your patient management tasks done faster than traditional GUI apps! ðŸ’Šâœ¨","lastModifiedDate":"2022-09-27"},{"lineNumber":9,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":10,"author":{"gitId":"anthonyhoth"},"content":"* For the detailed documentation of this project, see the **[OmniHealth Website](https://ay2223s1-cs2103t-t14-3.github.io/tp/)**.","lastModifiedDate":"2022-09-27"},{"lineNumber":11,"author":{"gitId":"anthonyhoth"},"content":"* This project is built on the AddressBook-Level3 project, find out more on [se-education.org](https://se-education.org#https://se-education.org/#contributing) for more info.","lastModifiedDate":"2022-09-27"}],"authorContributionMap":{"anthonyhoth":8,"-":3}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"mainClassName \u003d \u0027seedu.address.Main\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-04-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        html.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        xml.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":69,"author":{"gitId":"EiffelLKF"},"content":"    archiveFileName \u003d \u0027OmniHealth.jar\u0027","lastModifiedDate":"2022-10-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":74,"author":{"gitId":"anthonyhoth"},"content":"run {","lastModifiedDate":"2022-10-18"},{"lineNumber":75,"author":{"gitId":"anthonyhoth"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2022-10-18"},{"lineNumber":76,"author":{"gitId":"anthonyhoth"},"content":"}","lastModifiedDate":"2022-10-18"}],"authorContributionMap":{"anthonyhoth":4,"EiffelLKF":1,"-":71}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"anthonyhoth"},"content":"### Anthony Ho","lastModifiedDate":"2022-09-20"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"anthonyhoth"},"content":"\u003cimg src\u003d\"images/anthonyhoth.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-09-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"anthonyhoth"},"content":"[[github](https://github.com/anthonyhoth)]","lastModifiedDate":"2022-09-20"},{"lineNumber":16,"author":{"gitId":"LJXSean"},"content":"[[portfolio](team/anthonyhoth.md)]","lastModifiedDate":"2022-09-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"anthonyhoth"},"content":"* Role: TBD","lastModifiedDate":"2022-09-20"},{"lineNumber":19,"author":{"gitId":"anthonyhoth"},"content":"* Responsiblities: In charge of `delete`, `rdelete`, `edit`, `redit` commands","lastModifiedDate":"2022-10-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"hanwenlai"},"content":"### Lai Han Wen","lastModifiedDate":"2022-09-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"hanwenlai"},"content":"\u003cimg src\u003d\"images/hanwenlai.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-09-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"hanwenlai"},"content":"[[github](https://github.com/hanwenlai)]","lastModifiedDate":"2022-09-20"},{"lineNumber":27,"author":{"gitId":"hanwenlai"},"content":"[[portfolio](team/hanwenlai.md)]","lastModifiedDate":"2022-09-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"hanwenlai"},"content":"* Role: TBD","lastModifiedDate":"2022-09-20"},{"lineNumber":30,"author":{"gitId":"anthonyhoth"},"content":"* Responsiblities: In charge of `list` and `rlist` commands","lastModifiedDate":"2022-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"marclzh"},"content":"### Marcus Lee","lastModifiedDate":"2022-09-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"marclzh"},"content":"\u003cimg src\u003d\"images/marclzh.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-09-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"marclzh"},"content":"[[github](https://github.com/marclzh)]","lastModifiedDate":"2022-09-20"},{"lineNumber":37,"author":{"gitId":"marclzh"},"content":"[[portfolio](team/marclzh.md)]","lastModifiedDate":"2022-09-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"marclzh"},"content":"* Role: TBD","lastModifiedDate":"2022-09-20"},{"lineNumber":40,"author":{"gitId":"anthonyhoth"},"content":"* Responsibilities: In charge of `find` and `rfind` commands","lastModifiedDate":"2022-10-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"EiffelLKF"},"content":"### Eiffel Leo","lastModifiedDate":"2022-09-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"EiffelLKF"},"content":"\u003cimg src\u003d\"images/eiffellkf.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-09-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"EiffelLKF"},"content":"[[github](http://github.com/eiffellkf)]","lastModifiedDate":"2022-09-20"},{"lineNumber":47,"author":{"gitId":"EiffelLKF"},"content":"[[portfolio](team/eiffellkf.md)]","lastModifiedDate":"2022-09-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"EiffelLKF"},"content":"* Role: TBD","lastModifiedDate":"2022-09-20"},{"lineNumber":50,"author":{"gitId":"anthonyhoth"},"content":"* Responsibilities: In charge of `add` and `radd` command","lastModifiedDate":"2022-10-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"LJXSean"},"content":"### Sean Lam","lastModifiedDate":"2022-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"LJXSean"},"content":"\u003cimg src\u003d\"images/ljxsean.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-09-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"marclzh"},"content":"[[github](https://github.com/ljxsean)]","lastModifiedDate":"2022-09-27"},{"lineNumber":57,"author":{"gitId":"LJXSean"},"content":"[[portfolio](team/ljxsean.md)]","lastModifiedDate":"2022-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"LJXSean"},"content":"* Role: TBD","lastModifiedDate":"2022-09-21"},{"lineNumber":60,"author":{"gitId":"anthonyhoth"},"content":"* Responsiblities: In charge of `clear` and `rclear` commands","lastModifiedDate":"2022-10-19"}],"authorContributionMap":{"anthonyhoth":9,"marclzh":6,"hanwenlai":5,"LJXSean":5,"EiffelLKF":5,"-":30}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"* Adapted from AB3 https://github.com/nus-cs2103-AY2223S1/tp","lastModifiedDate":"2022-09-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2021-07-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-07-31"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":83,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":84,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":85,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"**API** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2021-07-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `AddCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to add a person).","lastModifiedDate":"2021-07-31"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2021-07-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2021-07-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-07-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the userâ€™s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique tag, instead of each `Person` needing their own `Tag` objects.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/BetterModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"* can save both address book data and user preference data in json format, and read them back into corresponding objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"EiffelLKF"},"content":"### \\[Implemented\\] Add record feature","lastModifiedDate":"2022-10-21"},{"lineNumber":158,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":159,"author":{"gitId":"EiffelLKF"},"content":"#### Patient Records","lastModifiedDate":"2022-10-21"},{"lineNumber":160,"author":{"gitId":"EiffelLKF"},"content":"OmniHealth manages patient records generated during patient consultations.  Each `Patient` holds a list of ","lastModifiedDate":"2022-10-21"},{"lineNumber":161,"author":{"gitId":"EiffelLKF"},"content":"medical records that the user is able to modify and edit. The `Record` class encapsulates a medical","lastModifiedDate":"2022-10-21"},{"lineNumber":162,"author":{"gitId":"EiffelLKF"},"content":"record that comprises a date, medical information and medicine prescribed (if any).","lastModifiedDate":"2022-10-21"},{"lineNumber":163,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":164,"author":{"gitId":"EiffelLKF"},"content":"#### Implementation","lastModifiedDate":"2022-10-21"},{"lineNumber":165,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":166,"author":{"gitId":"EiffelLKF"},"content":"Following the command execution pathway, the implementation of adding records uses the exposed `Model#addRecord(Record)`","lastModifiedDate":"2022-10-21"},{"lineNumber":167,"author":{"gitId":"EiffelLKF"},"content":"operation in the `Model` API which operates through a `DisplayedPerson` which encapsulates the current patient whose list of records is being ","lastModifiedDate":"2022-10-21"},{"lineNumber":168,"author":{"gitId":"EiffelLKF"},"content":"displayed to the user. Record operations are performed through the displayed person, for example,`DisplayedPerson#addRecord(Record)`.","lastModifiedDate":"2022-10-21"},{"lineNumber":169,"author":{"gitId":"EiffelLKF"},"content":"The current patient can be set by `DisplayedPerson#setPerson(Person, AddressBook)`.","lastModifiedDate":"2022-10-21"},{"lineNumber":170,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":171,"author":{"gitId":"EiffelLKF"},"content":"The parsing of user input is facilitated by `AddRecordCommandParser`. `AddRecordCommandParser#parse()` parses user ","lastModifiedDate":"2022-10-21"},{"lineNumber":172,"author":{"gitId":"EiffelLKF"},"content":"input string to return a `AddRecordCommand` object with a `Record` derived from the given inputs.","lastModifiedDate":"2022-10-21"},{"lineNumber":173,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":174,"author":{"gitId":"EiffelLKF"},"content":"Given below is an example usage scenario.","lastModifiedDate":"2022-10-21"},{"lineNumber":175,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":176,"author":{"gitId":"EiffelLKF"},"content":"Precondition. User should be current viewing a specific patient\u0027s record list using the `rlist` command. The current","lastModifiedDate":"2022-10-21"},{"lineNumber":177,"author":{"gitId":"EiffelLKF"},"content":"patient is set using `DisplayedPerson#setPerson(Person, AddressBook)`.","lastModifiedDate":"2022-10-21"},{"lineNumber":178,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":179,"author":{"gitId":"EiffelLKF"},"content":"Execution. User executes `radd d/01-02-2013 1230 r/Patient developed fever. m/Paracetamol` to add a new record containing ","lastModifiedDate":"2022-10-21"},{"lineNumber":180,"author":{"gitId":"EiffelLKF"},"content":"the date/time of `01-02-2013 1230`, medication remark of `Patient developed fever.` and medication prescription of","lastModifiedDate":"2022-10-21"},{"lineNumber":181,"author":{"gitId":"EiffelLKF"},"content":"`Paracetamol` into the current displayed person\u0027s record list. The `radd` command calls `Model#addRecord(Record)` ","lastModifiedDate":"2022-10-21"},{"lineNumber":182,"author":{"gitId":"EiffelLKF"},"content":"which performs the adding of records to the `DisplayedPerson` held by the `Model`.","lastModifiedDate":"2022-10-21"},{"lineNumber":183,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":184,"author":{"gitId":"EiffelLKF"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The medication field is an optional input","lastModifiedDate":"2022-10-21"},{"lineNumber":185,"author":{"gitId":"EiffelLKF"},"content":"\u003c/div\u003e","lastModifiedDate":"2022-10-21"},{"lineNumber":186,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":187,"author":{"gitId":"EiffelLKF"},"content":"The following sequence diagram shows how the add record operation works:","lastModifiedDate":"2022-10-21"},{"lineNumber":188,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":189,"author":{"gitId":"EiffelLKF"},"content":"![AddRecordCommand](images/AddRecordCommandSequenceDiagram.png)","lastModifiedDate":"2022-10-21"},{"lineNumber":190,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":191,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":192,"author":{"gitId":"EiffelLKF"},"content":"#### Design considerations:","lastModifiedDate":"2022-10-21"},{"lineNumber":193,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":194,"author":{"gitId":"EiffelLKF"},"content":"**Aspect: Model-Person Interaction:**","lastModifiedDate":"2022-10-21"},{"lineNumber":195,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":196,"author":{"gitId":"EiffelLKF"},"content":"* **Alternative 1 (current choice):** Use DisplayedPerson as a wrapper class.","lastModifiedDate":"2022-10-21"},{"lineNumber":197,"author":{"gitId":"EiffelLKF"},"content":"    * Pros: Maintain immutability within Person and Model classes, Easy to set current person whose record list is being","lastModifiedDate":"2022-10-21"},{"lineNumber":198,"author":{"gitId":"EiffelLKF"},"content":"displayed","lastModifiedDate":"2022-10-21"},{"lineNumber":199,"author":{"gitId":"EiffelLKF"},"content":"    * Cons: Longer command execution pathway as DisplayedPerson acts as an intermediary class between Model and Person.","lastModifiedDate":"2022-10-21"},{"lineNumber":200,"author":{"gitId":"EiffelLKF"},"content":"  ","lastModifiedDate":"2022-10-21"},{"lineNumber":201,"author":{"gitId":"EiffelLKF"},"content":"* **Alternative 2:** Allow model to directly interact with Person\u0027s record list.","lastModifiedDate":"2022-10-21"},{"lineNumber":202,"author":{"gitId":"EiffelLKF"},"content":"  * Pros: Easy to implement, simpler command execution pathway.","lastModifiedDate":"2022-10-21"},{"lineNumber":203,"author":{"gitId":"EiffelLKF"},"content":"  * Cons: Potentially violates OOP.","lastModifiedDate":"2022-10-21"},{"lineNumber":204,"author":{"gitId":"EiffelLKF"},"content":"  ","lastModifiedDate":"2022-10-21"},{"lineNumber":205,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":206,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()`â€‰â€”â€‰Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()`â€‰â€”â€‰Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()`â€‰â€”â€‰Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David â€¦â€‹` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"The `redo` command does the oppositeâ€‰â€”â€‰it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David â€¦â€‹` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/CommitActivityDiagram.png\" width\u003d\"250\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":280,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"LJXSean"},"content":"### \\[Implemented\\] Find Records","lastModifiedDate":"2022-10-20"},{"lineNumber":291,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":292,"author":{"gitId":"LJXSean"},"content":"#### Implementation: ","lastModifiedDate":"2022-10-20"},{"lineNumber":293,"author":{"gitId":"LJXSean"},"content":"The find record command mechanism is facilitated by `RecordContainsKeywordPredicate` and `FindRecordCommandParser`","lastModifiedDate":"2022-10-20"},{"lineNumber":294,"author":{"gitId":"EiffelLKF"},"content":"which extends `Predicate` and `AddressbookParser` respectively. ","lastModifiedDate":"2022-10-21"},{"lineNumber":295,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":296,"author":{"gitId":"LJXSean"},"content":"`FindRecordCommandParser` implements the following operations:","lastModifiedDate":"2022-10-20"},{"lineNumber":297,"author":{"gitId":"LJXSean"},"content":"* `FindRecordCommandParser#parse()` - Parses the input arguments by storing each prefix and its respective","lastModifiedDate":"2022-10-20"},{"lineNumber":298,"author":{"gitId":"LJXSean"},"content":"values as an `ArgumentMultimap`.","lastModifiedDate":"2022-10-20"},{"lineNumber":299,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":300,"author":{"gitId":"LJXSean"},"content":"`RecordContainsKeywordPredicate` implements the following operations:","lastModifiedDate":"2022-10-20"},{"lineNumber":301,"author":{"gitId":"LJXSean"},"content":"* `RecordContainsKeywordPredicate#test()` - Tests whether the record under testing contains any of the keywords","lastModifiedDate":"2022-10-20"},{"lineNumber":302,"author":{"gitId":"LJXSean"},"content":"in the correct fields.","lastModifiedDate":"2022-10-20"},{"lineNumber":303,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":304,"author":{"gitId":"LJXSean"},"content":"Only `FindRecordCommandParser#parse` is exposed in the Parser interface as Parser#parse().","lastModifiedDate":"2022-10-20"},{"lineNumber":305,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":306,"author":{"gitId":"LJXSean"},"content":"Given below is an example usage and how the find record mechanism works at each step.","lastModifiedDate":"2022-10-20"},{"lineNumber":307,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":308,"author":{"gitId":"hanwenlai"},"content":"### \\[Implemented\\] List Records feature","lastModifiedDate":"2022-10-21"},{"lineNumber":309,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":310,"author":{"gitId":"hanwenlai"},"content":"#### Implementation:","lastModifiedDate":"2022-10-21"},{"lineNumber":311,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":312,"author":{"gitId":"hanwenlai"},"content":"The implemented list record mechanism is facilitated by `ListRecordCommandParser`, which extends `AddressBookParser`. `ListRecordCommandParser` implements the following operations:","lastModifiedDate":"2022-10-21"},{"lineNumber":313,"author":{"gitId":"hanwenlai"},"content":"- `ListRecordCommandParser#parse()` - Parses the input argument into an `Index` and creates a new `ListRecordCommand` object with the parsed `Index`.","lastModifiedDate":"2022-10-21"},{"lineNumber":314,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":315,"author":{"gitId":"hanwenlai"},"content":"The `ListRecordCommand` object then communicates with the `Model` API when it is executed, more specifically, by calling the following methods that are implemented in `ModelManager`:","lastModifiedDate":"2022-10-21"},{"lineNumber":316,"author":{"gitId":"hanwenlai"},"content":"- `Model#setPersonWithRecords(Person)` - Sets the person whose record list is being displayed (`ModelManager#personWithRecords`) to the given `Person`, so that the displayed record list can be manipulated by calling methods such as `Model#addRecord()` and `Model#deleteRecord()`.","lastModifiedDate":"2022-10-21"},{"lineNumber":317,"author":{"gitId":"hanwenlai"},"content":"- `Model#setRecordListDisplayed(boolean)` - Setter for a flag to determine if a record list is being displayed; set to `true`.","lastModifiedDate":"2022-10-21"},{"lineNumber":318,"author":{"gitId":"hanwenlai"},"content":"- `Model#setFilteredRecordList(Person)` - Sets the *filtered list* of records (`ModelManager#filteredRecords`) to the record list of the given Person.","lastModifiedDate":"2022-10-21"},{"lineNumber":319,"author":{"gitId":"hanwenlai"},"content":"- `Model#updateFilteredRecordList(Predicate)` - Updates the filter of the *filtered list* of records to the filter given by the predicate; an `always true` predicate is given so that all records will be included in the *filtered list*.","lastModifiedDate":"2022-10-21"},{"lineNumber":320,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":321,"author":{"gitId":"hanwenlai"},"content":"At the final step of the execution of the `ListRecordCommand` object, a `CommandResult` object is returned.","lastModifiedDate":"2022-10-21"},{"lineNumber":322,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":323,"author":{"gitId":"hanwenlai"},"content":"The Sequence Diagram below shows how the list record operation works:","lastModifiedDate":"2022-10-21"},{"lineNumber":324,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":325,"author":{"gitId":"hanwenlai"},"content":"![ListRecordCommand](images/ListRecordSequenceDiagram.png)","lastModifiedDate":"2022-10-21"},{"lineNumber":326,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":327,"author":{"gitId":"hanwenlai"},"content":"Example usage scenario:","lastModifiedDate":"2022-10-21"},{"lineNumber":328,"author":{"gitId":"hanwenlai"},"content":"- Precondition: The user should be viewing the patient list by using the `list` command.","lastModifiedDate":"2022-10-21"},{"lineNumber":329,"author":{"gitId":"hanwenlai"},"content":"- Execution: The user executes `rlist 1` to list the records of the 1st patient in the displayed patient list.","lastModifiedDate":"2022-10-21"},{"lineNumber":330,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":331,"author":{"gitId":"marclzh"},"content":"### \\[Implemented\\] Clear Records","lastModifiedDate":"2022-10-21"},{"lineNumber":332,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":333,"author":{"gitId":"marclzh"},"content":"The clear record command `rclear` allows the application to clear all the existing records in the current active record","lastModifiedDate":"2022-10-21"},{"lineNumber":334,"author":{"gitId":"marclzh"},"content":"list.","lastModifiedDate":"2022-10-21"},{"lineNumber":335,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":336,"author":{"gitId":"marclzh"},"content":"#### Implementation:","lastModifiedDate":"2022-10-21"},{"lineNumber":337,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":338,"author":{"gitId":"marclzh"},"content":"Given below is an example usage scenario for the command.","lastModifiedDate":"2022-10-21"},{"lineNumber":339,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":340,"author":{"gitId":"marclzh"},"content":"**Step 1:** The user launches the application.","lastModifiedDate":"2022-10-21"},{"lineNumber":341,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":342,"author":{"gitId":"marclzh"},"content":"**Step 2:** The user executes the `rlist INDEX` command to show the record list of a specified patient. ","lastModifiedDate":"2022-10-21"},{"lineNumber":343,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":344,"author":{"gitId":"marclzh"},"content":"**Step 3:** The user executes the `rclear` command to clear all existing records in the record list.","lastModifiedDate":"2022-10-21"},{"lineNumber":345,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":346,"author":{"gitId":"marclzh"},"content":"### \\[Implemented\\] Add appointment","lastModifiedDate":"2022-10-21"},{"lineNumber":347,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":348,"author":{"gitId":"marclzh"},"content":"The add appointment feature allows Omnihealth to manage future appointments for patients. Each `Patient` holds an appointment","lastModifiedDate":"2022-10-21"},{"lineNumber":349,"author":{"gitId":"marclzh"},"content":"reference for record keeping that the user is able to edit and clear.","lastModifiedDate":"2022-10-21"},{"lineNumber":350,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":351,"author":{"gitId":"marclzh"},"content":"The feature currently does not support automatic removal of appointments which dates have passed, and require a new appointment","lastModifiedDate":"2022-11-01"},{"lineNumber":352,"author":{"gitId":"marclzh"},"content":"to override the old appointment or for the existing appointment to be cleared with the `apptcl` command.","lastModifiedDate":"2022-11-01"},{"lineNumber":353,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":354,"author":{"gitId":"marclzh"},"content":"#### Implementation:","lastModifiedDate":"2022-10-21"},{"lineNumber":355,"author":{"gitId":"marclzh"},"content":"The add appointment command mechanism is facilitated by the `AddAppointmentCommandParser` class which extends the `AddressbookParser`.","lastModifiedDate":"2022-10-21"},{"lineNumber":356,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":357,"author":{"gitId":"marclzh"},"content":"`AddAppointmentParser` implements the following operations:","lastModifiedDate":"2022-10-21"},{"lineNumber":358,"author":{"gitId":"marclzh"},"content":"* `AddAppointmentParser#parse()` - Parses the input arguments by storing the index and the prefix of its respective values as ","lastModifiedDate":"2022-10-21"},{"lineNumber":359,"author":{"gitId":"marclzh"},"content":"an `ArgumentMultimap.`","lastModifiedDate":"2022-10-21"},{"lineNumber":360,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":361,"author":{"gitId":"marclzh"},"content":"`AddAppointmentParser#parse()` is exposed in the Parser interface as Parser#parse().","lastModifiedDate":"2022-10-21"},{"lineNumber":362,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":363,"author":{"gitId":"marclzh"},"content":"Given below is an example usage scenario for the command.","lastModifiedDate":"2022-10-21"},{"lineNumber":364,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":365,"author":{"gitId":"marclzh"},"content":"**Step 1:** The user launches the application.","lastModifiedDate":"2022-10-21"},{"lineNumber":366,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":367,"author":{"gitId":"marclzh"},"content":"**Step 2:** The user executes the `appt INDEX d/ dd-MM-yyyy` command in the CLI.","lastModifiedDate":"2022-10-21"},{"lineNumber":368,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":369,"author":{"gitId":"marclzh"},"content":"**Step 3:** An appointment will be assigned to the patient specified with the index input.","lastModifiedDate":"2022-10-21"},{"lineNumber":370,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":371,"author":{"gitId":"marclzh"},"content":"### \\[Implemented\\] Clear appointment","lastModifiedDate":"2022-10-21"},{"lineNumber":372,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":373,"author":{"gitId":"marclzh"},"content":"#### Implementation:","lastModifiedDate":"2022-10-21"},{"lineNumber":374,"author":{"gitId":"marclzh"},"content":"The add appointment mechanism is facilitated by `ClearAppointmentCommandParser`  which extends `AddressbookParser`.","lastModifiedDate":"2022-10-21"},{"lineNumber":375,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":376,"author":{"gitId":"marclzh"},"content":"`ClearAppointmentParser` implements the following operations:","lastModifiedDate":"2022-10-21"},{"lineNumber":377,"author":{"gitId":"marclzh"},"content":"* `ClearAppointmentParser#parse()` - Parses the input arguments by storing the index and the prefix of its respective values as","lastModifiedDate":"2022-10-21"},{"lineNumber":378,"author":{"gitId":"marclzh"},"content":"  an `ArgumentMultimap.`","lastModifiedDate":"2022-10-21"},{"lineNumber":379,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":380,"author":{"gitId":"marclzh"},"content":"`ClearAppointmentParser#parse()` is exposed in the Parser interface as Parser#parse().","lastModifiedDate":"2022-10-21"},{"lineNumber":381,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":382,"author":{"gitId":"marclzh"},"content":"Given below is an example usage scenario for the command.","lastModifiedDate":"2022-10-21"},{"lineNumber":383,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":384,"author":{"gitId":"marclzh"},"content":"**Step 1:** The user launches the application.","lastModifiedDate":"2022-10-21"},{"lineNumber":385,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":386,"author":{"gitId":"marclzh"},"content":"**Step 2:** The user executes the `apptcl INDEX ` command in the CLI.","lastModifiedDate":"2022-10-21"},{"lineNumber":387,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":388,"author":{"gitId":"marclzh"},"content":"**Step 3:** The patient\u0027s appointment(if any) will be cleared. ","lastModifiedDate":"2022-10-21"},{"lineNumber":389,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":390,"author":{"gitId":"marclzh"},"content":"### \\[Proposed\\] Upcoming appointment tracker","lastModifiedDate":"2022-10-21"},{"lineNumber":391,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":392,"author":{"gitId":"marclzh"},"content":"The proposed upcoming appointment feature will be a display to show upcoming appointments for the user upon application start.","lastModifiedDate":"2022-10-21"},{"lineNumber":393,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":394,"author":{"gitId":"marclzh"},"content":"#### Proposed Implementation","lastModifiedDate":"2022-10-21"},{"lineNumber":395,"author":{"gitId":"marclzh"},"content":"The proposed implementation is facilitated by `AppointmentWindow`. It extends `UiPart\u003cStage\u003e` with a new window.","lastModifiedDate":"2022-10-21"},{"lineNumber":396,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":397,"author":{"gitId":"marclzh"},"content":"Given below is an example usage scenario for the command.","lastModifiedDate":"2022-10-21"},{"lineNumber":398,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":399,"author":{"gitId":"marclzh"},"content":"**Step 1:** The user launches the application.","lastModifiedDate":"2022-10-21"},{"lineNumber":400,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":401,"author":{"gitId":"marclzh"},"content":"**Step 2:** A additional window appears, showing the current upcoming appointments.","lastModifiedDate":"2022-10-21"},{"lineNumber":402,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":403,"author":{"gitId":"anthonyhoth"},"content":"### \\[Implemented\\] Delete Records feature","lastModifiedDate":"2022-10-26"},{"lineNumber":404,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":405,"author":{"gitId":"anthonyhoth"},"content":"#### Implementation:","lastModifiedDate":"2022-10-26"},{"lineNumber":406,"author":{"gitId":"anthonyhoth"},"content":"The delete record mechanism is facilitated by `DeleteRecordCommandParser`  which extends `AddressbookParser`.","lastModifiedDate":"2022-10-26"},{"lineNumber":407,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":408,"author":{"gitId":"anthonyhoth"},"content":"`DeleteRecordCommandParser` implements the following operations:","lastModifiedDate":"2022-10-26"},{"lineNumber":409,"author":{"gitId":"anthonyhoth"},"content":"* `DeleteRecordCommandParser#parse()` - Parses the input argument into an `Index` and ","lastModifiedDate":"2022-10-26"},{"lineNumber":410,"author":{"gitId":"anthonyhoth"},"content":"creates a new `DeleteRecordCommand` object with the parsed `Index`.","lastModifiedDate":"2022-10-26"},{"lineNumber":411,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":412,"author":{"gitId":"anthonyhoth"},"content":"The `DeleteRecordCommand` object then communicates with the `Model` API when it is executed, more specifically, by calling the following methods that are implemented in `ModelManager`:","lastModifiedDate":"2022-10-26"},{"lineNumber":413,"author":{"gitId":"anthonyhoth"},"content":"* `Model#getFilteredRecordList()` - Returns the record list which is displayed.","lastModifiedDate":"2022-10-26"},{"lineNumber":414,"author":{"gitId":"anthonyhoth"},"content":"* `Model#isRecordListDisplayed()` - Returns a boolean result if a record list is being displayed.","lastModifiedDate":"2022-10-26"},{"lineNumber":415,"author":{"gitId":"anthonyhoth"},"content":"* `Model#deleteRecord(Record)` - Deletes the input record from the DisplayedPerson (`Model#personWithRecords`).","lastModifiedDate":"2022-10-26"},{"lineNumber":416,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":417,"author":{"gitId":"anthonyhoth"},"content":"Given below is an example usage scenario for the command.","lastModifiedDate":"2022-10-26"},{"lineNumber":418,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":419,"author":{"gitId":"anthonyhoth"},"content":"* Precondition: ","lastModifiedDate":"2022-10-26"},{"lineNumber":420,"author":{"gitId":"anthonyhoth"},"content":"  * User should be current viewing a specific patient\u0027s record list using the `rlist` command. ","lastModifiedDate":"2022-10-26"},{"lineNumber":421,"author":{"gitId":"anthonyhoth"},"content":"  * The current patient is set using `DisplayedPerson#setPerson(Person, AddressBook)`.","lastModifiedDate":"2022-10-26"},{"lineNumber":422,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":423,"author":{"gitId":"anthonyhoth"},"content":"* Execution: ","lastModifiedDate":"2022-10-26"},{"lineNumber":424,"author":{"gitId":"anthonyhoth"},"content":"  * User executes `rdelete 1` to delete the 1st record in the displayed record list. The `rdelete` command calls `Model#deleteRecord(Record)` which performs the deletion of records from the `DisplayedPerson` held by the `Model`.","lastModifiedDate":"2022-10-26"},{"lineNumber":425,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":426,"author":{"gitId":"anthonyhoth"},"content":"### \\[Implemented\\] Edit Records feature","lastModifiedDate":"2022-10-26"},{"lineNumber":427,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":428,"author":{"gitId":"anthonyhoth"},"content":"#### Implementation:","lastModifiedDate":"2022-10-26"},{"lineNumber":429,"author":{"gitId":"anthonyhoth"},"content":"The edit record mechanism is facilitated by `EditRecordCommandParser`  which extends `AddressbookParser`.","lastModifiedDate":"2022-10-26"},{"lineNumber":430,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":431,"author":{"gitId":"anthonyhoth"},"content":"`EditRecordCommandParser` implements the following operations:","lastModifiedDate":"2022-10-26"},{"lineNumber":432,"author":{"gitId":"anthonyhoth"},"content":"* `EditRecordCommandParser#parse()` - Parses the input argument by storing the index and respective prefix as in `ArgumentMultimap`","lastModifiedDate":"2022-10-26"},{"lineNumber":433,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":434,"author":{"gitId":"anthonyhoth"},"content":"The `EditRecordCommand` object then calls `createEditedRecord` and communicates with the `EditRecordDescriptor` to create ","lastModifiedDate":"2022-10-26"},{"lineNumber":435,"author":{"gitId":"anthonyhoth"},"content":"a new `editedRecord` to replace the `Record` that is to be edited.","lastModifiedDate":"2022-10-26"},{"lineNumber":436,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":437,"author":{"gitId":"anthonyhoth"},"content":"The `EditRecordCommand` object then communicates with the `Model` API when it is executed, more specifically,","lastModifiedDate":"2022-10-26"},{"lineNumber":438,"author":{"gitId":"anthonyhoth"},"content":"by calling the following methods that are implemented in `ModelManager`:","lastModifiedDate":"2022-10-26"},{"lineNumber":439,"author":{"gitId":"anthonyhoth"},"content":"* `Model#setRecord(Record, Record)` - Sets the target record of `Model#personWithRecords` to the new edited record.","lastModifiedDate":"2022-10-26"},{"lineNumber":440,"author":{"gitId":"anthonyhoth"},"content":"* `Model#updateFilteredRecordList(Predicate\u003cRecord\u003e)` - Updates the filter of the filtered record list to filter by the given predicate;","lastModifiedDate":"2022-10-26"},{"lineNumber":441,"author":{"gitId":"anthonyhoth"},"content":"in this case, show all the records.","lastModifiedDate":"2022-10-26"},{"lineNumber":442,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":443,"author":{"gitId":"anthonyhoth"},"content":"Given below is an example usage scenario for the command.","lastModifiedDate":"2022-10-26"},{"lineNumber":444,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":445,"author":{"gitId":"anthonyhoth"},"content":"* Precondition:","lastModifiedDate":"2022-10-26"},{"lineNumber":446,"author":{"gitId":"anthonyhoth"},"content":"    * User should be current viewing a specific patient\u0027s record list using the `rlist` command.","lastModifiedDate":"2022-10-26"},{"lineNumber":447,"author":{"gitId":"anthonyhoth"},"content":"    * The current patient is set using `DisplayedPerson#setPerson(Person, AddressBook)`.","lastModifiedDate":"2022-10-26"},{"lineNumber":448,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":449,"author":{"gitId":"anthonyhoth"},"content":"* Execution:","lastModifiedDate":"2022-10-26"},{"lineNumber":450,"author":{"gitId":"anthonyhoth"},"content":"    * User executes `redit 1 r/Fever d/12-12-2012 1200 m/` to set the 1st record in the displayed record list to a new","lastModifiedDate":"2022-10-26"},{"lineNumber":451,"author":{"gitId":"anthonyhoth"},"content":"  record containing the date/time of `12-12-2012 1200`, record data of `Fever` and sets the medications to empty.","lastModifiedDate":"2022-10-26"},{"lineNumber":452,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":453,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":454,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":455,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":456,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":457,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":458,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":459,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":460,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":461,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":462,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":463,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":464,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":465,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":466,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":467,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":468,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":469,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":470,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":471,"author":{"gitId":"-"},"content":"* has a need to manage a significant number of contacts","lastModifiedDate":"2020-05-23"},{"lineNumber":472,"author":{"gitId":"LJXSean"},"content":"* private clinic practitioners who do not have access to general health service management applications like Healthhub","lastModifiedDate":"2022-09-27"},{"lineNumber":473,"author":{"gitId":"LJXSean"},"content":"* private clinic practitioners of clinics who still utilise physical paper records to store patient information","lastModifiedDate":"2022-09-27"},{"lineNumber":474,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":475,"author":{"gitId":"LJXSean"},"content":"**Value proposition**:","lastModifiedDate":"2022-09-27"},{"lineNumber":476,"author":{"gitId":"LJXSean"},"content":"* provide doctors with a place to **store and centrally manage their patientsâ€™ information**","lastModifiedDate":"2022-09-27"},{"lineNumber":477,"author":{"gitId":"anthonyhoth"},"content":"* allow doctors to schedule appointments, send appointment reminders and other notifications (eg. medication, payment","lastModifiedDate":"2022-10-19"},{"lineNumber":478,"author":{"gitId":"LJXSean"},"content":"  information) to patients using their stored contact information.","lastModifiedDate":"2022-09-27"},{"lineNumber":479,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":480,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":481,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":482,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":483,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":484,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":485,"author":{"gitId":"-"},"content":"| Priority | As a â€¦â€‹                | I want to â€¦â€‹                             | So that I canâ€¦â€‹                                                                           |","lastModifiedDate":"2020-05-23"},{"lineNumber":486,"author":{"gitId":"anthonyhoth"},"content":"|----------|------------------------|------------------------------------------|-------------------------------------------------------------------------------------------|","lastModifiedDate":"2022-10-19"},{"lineNumber":487,"author":{"gitId":"LJXSean"},"content":"| `* * *`  | new user               | view the user guide easily               | learn more about the product usage                                                        |","lastModifiedDate":"2022-09-27"},{"lineNumber":488,"author":{"gitId":"LJXSean"},"content":"| `* * *`  | user                   | add a new patient and their details      | save them for later viewing                                                               |","lastModifiedDate":"2022-09-27"},{"lineNumber":489,"author":{"gitId":"LJXSean"},"content":"| `* * *`  | user                   | view an existing patient\u0027s full details  | know more about the patient                                                               |","lastModifiedDate":"2022-09-27"},{"lineNumber":490,"author":{"gitId":"anthonyhoth"},"content":"| `* * *`  | user                   | delete a patient\u0027s records               | remove a particular patient\u0027s medical records upon request. (E.g. due to privacy reasons) |","lastModifiedDate":"2022-10-19"},{"lineNumber":491,"author":{"gitId":"anthonyhoth"},"content":"| `* * *`  | user                   | clear all of a patient\u0027s records         | save time by not deleting one by one                                                      |","lastModifiedDate":"2022-10-19"},{"lineNumber":492,"author":{"gitId":"anthonyhoth"},"content":"| `* * *`  | user                   | view the entire list of patients         | see all my patients I have added.                                                         |","lastModifiedDate":"2022-10-19"},{"lineNumber":493,"author":{"gitId":"anthonyhoth"},"content":"| `* * *`  | user                   | view a specific patientâ€™s records        | remember past visits recorded                                                             |","lastModifiedDate":"2022-10-19"},{"lineNumber":494,"author":{"gitId":"LJXSean"},"content":"| `* * *`  | user                   | exit the program                         |                                                                                           |","lastModifiedDate":"2022-09-27"},{"lineNumber":495,"author":{"gitId":"anthonyhoth"},"content":"| `* *`    | schedule-oriented user | add appointments scheduled for a patient | keep track of my appointments                                                             |","lastModifiedDate":"2022-10-19"},{"lineNumber":496,"author":{"gitId":"anthonyhoth"},"content":"| `* *`    | user                   | edit a patient\u0027s record                  | change details of a record in the future                                                  |","lastModifiedDate":"2022-10-19"},{"lineNumber":497,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":498,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":499,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":500,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":501,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":502,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":503,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":504,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":505,"author":{"gitId":"LJXSean"},"content":"(For all use cases below, the **System** is the `OmniHealth` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2022-09-21"},{"lineNumber":506,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":507,"author":{"gitId":"EiffelLKF"},"content":"**Use case: UC01 - Add a patient**","lastModifiedDate":"2022-10-11"},{"lineNumber":508,"author":{"gitId":"EiffelLKF"},"content":"**Precondition: Addressbook is displayed**","lastModifiedDate":"2022-10-11"},{"lineNumber":509,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":510,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":511,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":512,"author":{"gitId":"LJXSean"},"content":"1. User requests to add a patient with given input fields.","lastModifiedDate":"2022-09-21"},{"lineNumber":513,"author":{"gitId":"LJXSean"},"content":"2. OmniHealth adds patients with given fields into the list of patients.","lastModifiedDate":"2022-09-21"},{"lineNumber":514,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":515,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2022-09-21"},{"lineNumber":516,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":517,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2022-09-21"},{"lineNumber":518,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":519,"author":{"gitId":"EiffelLKF"},"content":"* 1a. The given input fields are invalid.","lastModifiedDate":"2022-09-27"},{"lineNumber":520,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":521,"author":{"gitId":"EiffelLKF"},"content":"    * 1a1. OmniHealth shows an error message.","lastModifiedDate":"2022-09-27"},{"lineNumber":522,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":523,"author":{"gitId":"LJXSean"},"content":"      Use case ends.","lastModifiedDate":"2022-09-21"},{"lineNumber":524,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":525,"author":{"gitId":"EiffelLKF"},"content":"**Use case: UC02 - Add a record**","lastModifiedDate":"2022-10-11"},{"lineNumber":526,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":527,"author":{"gitId":"LJXSean"},"content":"**MSS**","lastModifiedDate":"2022-09-21"},{"lineNumber":528,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":529,"author":{"gitId":"EiffelLKF"},"content":"1. User !!requests to list patients (UC05)!!","lastModifiedDate":"2022-10-11"},{"lineNumber":530,"author":{"gitId":"EiffelLKF"},"content":"2. User !!requests to display record list of specific patient (UC06)!!","lastModifiedDate":"2022-10-11"},{"lineNumber":531,"author":{"gitId":"EiffelLKF"},"content":"3. User requests to add record with given fields into to the patient.","lastModifiedDate":"2022-10-11"},{"lineNumber":532,"author":{"gitId":"EiffelLKF"},"content":"4. OmniHealth adds a record with given fields to the record list of the patient.","lastModifiedDate":"2022-10-11"},{"lineNumber":533,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":534,"author":{"gitId":"LJXSean"},"content":"    Use case ends.","lastModifiedDate":"2022-09-21"},{"lineNumber":535,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":536,"author":{"gitId":"LJXSean"},"content":"**Extensions**","lastModifiedDate":"2022-09-21"},{"lineNumber":537,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":538,"author":{"gitId":"EiffelLKF"},"content":"* 3a. The given input fields are invalid.","lastModifiedDate":"2022-09-27"},{"lineNumber":539,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":540,"author":{"gitId":"EiffelLKF"},"content":"    * 3a1. OmniHealth shows an error message.","lastModifiedDate":"2022-09-27"},{"lineNumber":541,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":542,"author":{"gitId":"-"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2022-09-21"},{"lineNumber":543,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":544,"author":{"gitId":"EiffelLKF"},"content":"**Use case: UC03 - Delete a patient**","lastModifiedDate":"2022-10-11"},{"lineNumber":545,"author":{"gitId":"EiffelLKF"},"content":"**Precondition: Addressbook is displayed**","lastModifiedDate":"2022-10-11"},{"lineNumber":546,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":547,"author":{"gitId":"LJXSean"},"content":"**MSS**","lastModifiedDate":"2022-09-21"},{"lineNumber":548,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":549,"author":{"gitId":"anthonyhoth"},"content":"1. User requests to delete a specific patient in the list","lastModifiedDate":"2022-10-19"},{"lineNumber":550,"author":{"gitId":"anthonyhoth"},"content":"2. OmniHealth deletes the person","lastModifiedDate":"2022-10-19"},{"lineNumber":551,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":552,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":553,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":554,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":555,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":556,"author":{"gitId":"EiffelLKF"},"content":"* 3a. The list is empty.","lastModifiedDate":"2022-09-27"},{"lineNumber":557,"author":{"gitId":"EiffelLKF"},"content":"    * 3a1. OmniHealth shows an error message.","lastModifiedDate":"2022-09-27"},{"lineNumber":558,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":559,"author":{"gitId":"-"},"content":"        Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":560,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":561,"author":{"gitId":"EiffelLKF"},"content":"* 3b. The given index is invalid.","lastModifiedDate":"2022-09-27"},{"lineNumber":562,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":563,"author":{"gitId":"EiffelLKF"},"content":"    * 3b1. OmniHealth shows an error message.","lastModifiedDate":"2022-09-27"},{"lineNumber":564,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":565,"author":{"gitId":"LJXSean"},"content":"      Use case ends.","lastModifiedDate":"2022-09-21"},{"lineNumber":566,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":567,"author":{"gitId":"EiffelLKF"},"content":"* 2a. The user searches for a specific patient before deleting.","lastModifiedDate":"2022-09-27"},{"lineNumber":568,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":569,"author":{"gitId":"EiffelLKF"},"content":"    * 2a1. User requests to find a patient","lastModifiedDate":"2022-09-27"},{"lineNumber":570,"author":{"gitId":"EiffelLKF"},"content":"    * 2a2. OmniHealth shows a list of patient with given keyword","lastModifiedDate":"2022-09-27"},{"lineNumber":571,"author":{"gitId":"EiffelLKF"},"content":"    * 2a3. User requests to delete a specific patient in the list","lastModifiedDate":"2022-09-27"},{"lineNumber":572,"author":{"gitId":"EiffelLKF"},"content":"    * 2a4. OmniHealth deletes the patient","lastModifiedDate":"2022-09-27"},{"lineNumber":573,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":574,"author":{"gitId":"LJXSean"},"content":"      Use case ends.","lastModifiedDate":"2022-09-21"},{"lineNumber":575,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":576,"author":{"gitId":"EiffelLKF"},"content":"**Use case: UC04 - Delete a record**","lastModifiedDate":"2022-10-11"},{"lineNumber":577,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":578,"author":{"gitId":"LJXSean"},"content":"**MSS**","lastModifiedDate":"2022-09-21"},{"lineNumber":579,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":580,"author":{"gitId":"EiffelLKF"},"content":"1.  User !!requests to list patients (UC05).!!","lastModifiedDate":"2022-10-11"},{"lineNumber":581,"author":{"gitId":"EiffelLKF"},"content":"2.  User !!requests to display record list of specific patient (UC06).!!","lastModifiedDate":"2022-10-11"},{"lineNumber":582,"author":{"gitId":"EiffelLKF"},"content":"3.  User requests to delete a specific record in the list.","lastModifiedDate":"2022-10-11"},{"lineNumber":583,"author":{"gitId":"EiffelLKF"},"content":"4.  OmniHealth deletes the record.","lastModifiedDate":"2022-10-11"},{"lineNumber":584,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":585,"author":{"gitId":"LJXSean"},"content":"    Use case ends.","lastModifiedDate":"2022-09-21"},{"lineNumber":586,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":587,"author":{"gitId":"LJXSean"},"content":"**Extensions**","lastModifiedDate":"2022-09-21"},{"lineNumber":588,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":589,"author":{"gitId":"anthonyhoth"},"content":"* 3a. The record list is empty.","lastModifiedDate":"2022-10-19"},{"lineNumber":590,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":591,"author":{"gitId":"EiffelLKF"},"content":"    * 3a1. OmniHealth shows an error message.","lastModifiedDate":"2022-09-27"},{"lineNumber":592,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":593,"author":{"gitId":"LJXSean"},"content":"        Use case ends.","lastModifiedDate":"2022-09-21"},{"lineNumber":594,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":595,"author":{"gitId":"EiffelLKF"},"content":"* 3b. The given index is invalid.","lastModifiedDate":"2022-09-27"},{"lineNumber":596,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":597,"author":{"gitId":"EiffelLKF"},"content":"    * 3b1. OmniHealth shows an error message.","lastModifiedDate":"2022-09-27"},{"lineNumber":598,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":599,"author":{"gitId":"LJXSean"},"content":"      Use case ends.","lastModifiedDate":"2022-09-21"},{"lineNumber":600,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":601,"author":{"gitId":"anthonyhoth"},"content":"* *a. User attempts to delete a record before listing records.","lastModifiedDate":"2022-10-19"},{"lineNumber":602,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":603,"author":{"gitId":"EiffelLKF"},"content":"    * *a1. OmniHealth shows an error message.","lastModifiedDate":"2022-09-27"},{"lineNumber":604,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":605,"author":{"gitId":"LJXSean"},"content":"      Use case ends.","lastModifiedDate":"2022-09-21"},{"lineNumber":606,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":607,"author":{"gitId":"EiffelLKF"},"content":"**Use case: UC05 - List all patients**","lastModifiedDate":"2022-10-11"},{"lineNumber":608,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":609,"author":{"gitId":"LJXSean"},"content":"**MSS**","lastModifiedDate":"2022-09-21"},{"lineNumber":610,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":611,"author":{"gitId":"LJXSean"},"content":"1. User requests to list all patients.","lastModifiedDate":"2022-09-21"},{"lineNumber":612,"author":{"gitId":"LJXSean"},"content":"2. OmniHealth shows a list of all patients.","lastModifiedDate":"2022-09-21"},{"lineNumber":613,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":614,"author":{"gitId":"LJXSean"},"content":"    Use case ends.","lastModifiedDate":"2022-09-21"},{"lineNumber":615,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":616,"author":{"gitId":"LJXSean"},"content":"**Extensions**","lastModifiedDate":"2022-09-21"},{"lineNumber":617,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":618,"author":{"gitId":"LJXSean"},"content":"* 1a. The patient list is empty.","lastModifiedDate":"2022-09-21"},{"lineNumber":619,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":620,"author":{"gitId":"LJXSean"},"content":"    * 1a1. OmniHealth shows an error message.","lastModifiedDate":"2022-09-21"},{"lineNumber":621,"author":{"gitId":"LJXSean"},"content":"    ","lastModifiedDate":"2022-09-21"},{"lineNumber":622,"author":{"gitId":"LJXSean"},"content":"        Use case ends.","lastModifiedDate":"2022-09-21"},{"lineNumber":623,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":624,"author":{"gitId":"EiffelLKF"},"content":"**Use case: UC06 - List all records for a specified patient**","lastModifiedDate":"2022-10-11"},{"lineNumber":625,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":626,"author":{"gitId":"LJXSean"},"content":"**MSS**","lastModifiedDate":"2022-09-21"},{"lineNumber":627,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":628,"author":{"gitId":"EiffelLKF"},"content":"1. User requests to display all records for the specified patient.","lastModifiedDate":"2022-10-11"},{"lineNumber":629,"author":{"gitId":"LJXSean"},"content":"2. OmniHealth shows a list of all records for the specified patient.","lastModifiedDate":"2022-09-21"},{"lineNumber":630,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":631,"author":{"gitId":"LJXSean"},"content":"   Use case ends.","lastModifiedDate":"2022-09-21"},{"lineNumber":632,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":633,"author":{"gitId":"LJXSean"},"content":"**Extensions**","lastModifiedDate":"2022-09-21"},{"lineNumber":634,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":635,"author":{"gitId":"LJXSean"},"content":"* 1a. The record list is empty.","lastModifiedDate":"2022-09-21"},{"lineNumber":636,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":637,"author":{"gitId":"LJXSean"},"content":"    * 1a1. OmniHealth shows an error message.","lastModifiedDate":"2022-09-21"},{"lineNumber":638,"author":{"gitId":"LJXSean"},"content":"    ","lastModifiedDate":"2022-09-21"},{"lineNumber":639,"author":{"gitId":"LJXSean"},"content":"        Use case ends.","lastModifiedDate":"2022-09-21"},{"lineNumber":640,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":641,"author":{"gitId":"LJXSean"},"content":"* 1b. The given index is invalid.","lastModifiedDate":"2022-09-21"},{"lineNumber":642,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":643,"author":{"gitId":"LJXSean"},"content":"    * 1b1. OmniHealth shows an error message.","lastModifiedDate":"2022-09-21"},{"lineNumber":644,"author":{"gitId":"LJXSean"},"content":"    ","lastModifiedDate":"2022-09-21"},{"lineNumber":645,"author":{"gitId":"LJXSean"},"content":"        Use case ends.","lastModifiedDate":"2022-09-21"},{"lineNumber":646,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":647,"author":{"gitId":"EiffelLKF"},"content":"**Use case: UC07 - Clear patient list**","lastModifiedDate":"2022-10-11"},{"lineNumber":648,"author":{"gitId":"EiffelLKF"},"content":"**Precondition: Addressbook is displayed**","lastModifiedDate":"2022-10-11"},{"lineNumber":649,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":650,"author":{"gitId":"LJXSean"},"content":"**MSS**","lastModifiedDate":"2022-09-21"},{"lineNumber":651,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":652,"author":{"gitId":"LJXSean"},"content":"1. User requests to clear all patients from list","lastModifiedDate":"2022-09-21"},{"lineNumber":653,"author":{"gitId":"marclzh"},"content":"2. OmniHealth deletes patient list","lastModifiedDate":"2022-10-16"},{"lineNumber":654,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":655,"author":{"gitId":"LJXSean"},"content":"   Use case ends","lastModifiedDate":"2022-09-21"},{"lineNumber":656,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":657,"author":{"gitId":"LJXSean"},"content":"**Extensions**","lastModifiedDate":"2022-09-21"},{"lineNumber":658,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":659,"author":{"gitId":"LJXSean"},"content":"* 1a. Patient list is empty","lastModifiedDate":"2022-09-21"},{"lineNumber":660,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":661,"author":{"gitId":"LJXSean"},"content":"    Use case ends","lastModifiedDate":"2022-09-21"},{"lineNumber":662,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":663,"author":{"gitId":"EiffelLKF"},"content":"**Use case: UC08 - Clear patient records**","lastModifiedDate":"2022-10-11"},{"lineNumber":664,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":665,"author":{"gitId":"LJXSean"},"content":"**MSS**","lastModifiedDate":"2022-09-21"},{"lineNumber":666,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":667,"author":{"gitId":"EiffelLKF"},"content":"1. User !!requests to list patients (UC05)!!","lastModifiedDate":"2022-10-11"},{"lineNumber":668,"author":{"gitId":"EiffelLKF"},"content":"2. User !!requests to display record list of specific patient (UC06)!!","lastModifiedDate":"2022-10-11"},{"lineNumber":669,"author":{"gitId":"EiffelLKF"},"content":"3. User requests to clear all records from a patient","lastModifiedDate":"2022-10-11"},{"lineNumber":670,"author":{"gitId":"marclzh"},"content":"4. OmniHealth deletes all patient records","lastModifiedDate":"2022-10-16"},{"lineNumber":671,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":672,"author":{"gitId":"LJXSean"},"content":"   Use case ends","lastModifiedDate":"2022-09-21"},{"lineNumber":673,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":674,"author":{"gitId":"LJXSean"},"content":"**Extensions**","lastModifiedDate":"2022-09-21"},{"lineNumber":675,"author":{"gitId":"LJXSean"},"content":"* 1a. Patient record list is empty","lastModifiedDate":"2022-09-21"},{"lineNumber":676,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":677,"author":{"gitId":"LJXSean"},"content":"  Use case ends","lastModifiedDate":"2022-09-21"},{"lineNumber":678,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":679,"author":{"gitId":"LJXSean"},"content":"* 1b. Patient does not exist","lastModifiedDate":"2022-09-21"},{"lineNumber":680,"author":{"gitId":"marclzh"},"content":"  * 1b1. OmniHealth displays error message","lastModifiedDate":"2022-10-16"},{"lineNumber":681,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":682,"author":{"gitId":"EiffelLKF"},"content":"  Use case ends","lastModifiedDate":"2022-09-27"},{"lineNumber":683,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":684,"author":{"gitId":"EiffelLKF"},"content":"**Use case: UC09 - Get Help**","lastModifiedDate":"2022-10-11"},{"lineNumber":685,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":686,"author":{"gitId":"LJXSean"},"content":"**MSS**","lastModifiedDate":"2022-09-21"},{"lineNumber":687,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":688,"author":{"gitId":"LJXSean"},"content":"1. User requests to view help","lastModifiedDate":"2022-09-21"},{"lineNumber":689,"author":{"gitId":"marclzh"},"content":"2. OmniHealth shows list of commands","lastModifiedDate":"2022-10-16"},{"lineNumber":690,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":691,"author":{"gitId":"LJXSean"},"content":"    Use case ends","lastModifiedDate":"2022-09-21"},{"lineNumber":692,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":693,"author":{"gitId":"EiffelLKF"},"content":"**Use case: UC10 - Find patient**","lastModifiedDate":"2022-10-11"},{"lineNumber":694,"author":{"gitId":"EiffelLKF"},"content":"**Precondition: Addressbook is displayed**","lastModifiedDate":"2022-10-11"},{"lineNumber":695,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":696,"author":{"gitId":"LJXSean"},"content":"**MSS**","lastModifiedDate":"2022-09-21"},{"lineNumber":697,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":698,"author":{"gitId":"EiffelLKF"},"content":"1. User requests to find a patient by name.","lastModifiedDate":"2022-10-11"},{"lineNumber":699,"author":{"gitId":"LJXSean"},"content":"2. OmniHealth shows a list of all patients matching the input by the user.","lastModifiedDate":"2022-09-21"},{"lineNumber":700,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":701,"author":{"gitId":"marclzh"},"content":"**Extensions**","lastModifiedDate":"2022-09-27"},{"lineNumber":702,"author":{"gitId":"marclzh"},"content":"* 1a. Patient record list is empty","lastModifiedDate":"2022-09-27"},{"lineNumber":703,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":704,"author":{"gitId":"marclzh"},"content":"  Use case ends","lastModifiedDate":"2022-09-27"},{"lineNumber":705,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":706,"author":{"gitId":"marclzh"},"content":"* 1b. Patient does not exist","lastModifiedDate":"2022-09-27"},{"lineNumber":707,"author":{"gitId":"marclzh"},"content":"    * 1b1. OmniHealth displays error message","lastModifiedDate":"2022-10-16"},{"lineNumber":708,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":709,"author":{"gitId":"marclzh"},"content":"  Use case ends","lastModifiedDate":"2022-09-27"},{"lineNumber":710,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":711,"author":{"gitId":"EiffelLKF"},"content":"**Use case: UC11 - Find patient records**","lastModifiedDate":"2022-10-11"},{"lineNumber":712,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":713,"author":{"gitId":"LJXSean"},"content":"**MSS**","lastModifiedDate":"2022-09-21"},{"lineNumber":714,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":715,"author":{"gitId":"EiffelLKF"},"content":"1. User !!requests to list patients (UC05)!!","lastModifiedDate":"2022-10-11"},{"lineNumber":716,"author":{"gitId":"EiffelLKF"},"content":"2. User !!requests to display record list of specific patient (UC06)!!","lastModifiedDate":"2022-10-11"},{"lineNumber":717,"author":{"gitId":"EiffelLKF"},"content":"3. User inputs a keyword to search the record list.","lastModifiedDate":"2022-10-11"},{"lineNumber":718,"author":{"gitId":"LJXSean"},"content":"4. OmniHealth shows all the relevant records of the specified patient.","lastModifiedDate":"2022-09-21"},{"lineNumber":719,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":720,"author":{"gitId":"marclzh"},"content":"**Extensions**","lastModifiedDate":"2022-09-27"},{"lineNumber":721,"author":{"gitId":"marclzh"},"content":"* 1a. Patient record list is empty","lastModifiedDate":"2022-09-27"},{"lineNumber":722,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":723,"author":{"gitId":"marclzh"},"content":"  Use case ends","lastModifiedDate":"2022-09-27"},{"lineNumber":724,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":725,"author":{"gitId":"marclzh"},"content":"* 1b. Patient does not exist","lastModifiedDate":"2022-09-27"},{"lineNumber":726,"author":{"gitId":"marclzh"},"content":"    * 1b1. OmniHealth displays error message","lastModifiedDate":"2022-10-16"},{"lineNumber":727,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":728,"author":{"gitId":"marclzh"},"content":"  Use case ends","lastModifiedDate":"2022-09-27"},{"lineNumber":729,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":730,"author":{"gitId":"marclzh"},"content":"* 3a. No keywords matching can be found","lastModifiedDate":"2022-09-27"},{"lineNumber":731,"author":{"gitId":"marclzh"},"content":"    * 3a1. OmniHealth displays error message","lastModifiedDate":"2022-10-16"},{"lineNumber":732,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":733,"author":{"gitId":"marclzh"},"content":"  Use case ends","lastModifiedDate":"2022-09-27"},{"lineNumber":734,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":735,"author":{"gitId":"marclzh"},"content":"**Use case: UC12 - Add patient appointment**","lastModifiedDate":"2022-10-15"},{"lineNumber":736,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":737,"author":{"gitId":"marclzh"},"content":"**MSS**","lastModifiedDate":"2022-10-15"},{"lineNumber":738,"author":{"gitId":"marclzh"},"content":"1. User requests to add an appointment with a specified date.","lastModifiedDate":"2022-10-15"},{"lineNumber":739,"author":{"gitId":"marclzh"},"content":"2. An appointment is created for the patient.","lastModifiedDate":"2022-10-15"},{"lineNumber":740,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":741,"author":{"gitId":"marclzh"},"content":"**Extensions**","lastModifiedDate":"2022-10-15"},{"lineNumber":742,"author":{"gitId":"marclzh"},"content":"* 1a. Patient list is empty","lastModifiedDate":"2022-10-15"},{"lineNumber":743,"author":{"gitId":"marclzh"},"content":"    * 1a1. OmniHealth displays an error message","lastModifiedDate":"2022-10-16"},{"lineNumber":744,"author":{"gitId":"marclzh"},"content":"  ","lastModifiedDate":"2022-10-15"},{"lineNumber":745,"author":{"gitId":"marclzh"},"content":"    Use case ends","lastModifiedDate":"2022-10-15"},{"lineNumber":746,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":747,"author":{"gitId":"marclzh"},"content":"* 1b. Patient index does not exist","lastModifiedDate":"2022-10-15"},{"lineNumber":748,"author":{"gitId":"marclzh"},"content":"    * 1b1. OmniHealth displays an error message","lastModifiedDate":"2022-10-16"},{"lineNumber":749,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":750,"author":{"gitId":"marclzh"},"content":"    Use case ends","lastModifiedDate":"2022-10-15"},{"lineNumber":751,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":752,"author":{"gitId":"marclzh"},"content":"* 1c. Date is specified in wrong formatting","lastModifiedDate":"2022-10-15"},{"lineNumber":753,"author":{"gitId":"marclzh"},"content":"    * 1c1. OmniHealth displays an error message","lastModifiedDate":"2022-10-16"},{"lineNumber":754,"author":{"gitId":"marclzh"},"content":"    ","lastModifiedDate":"2022-10-15"},{"lineNumber":755,"author":{"gitId":"marclzh"},"content":"    Use case ends","lastModifiedDate":"2022-10-15"},{"lineNumber":756,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":757,"author":{"gitId":"marclzh"},"content":"* 1d. Appointment already exists for the patient","lastModifiedDate":"2022-10-15"},{"lineNumber":758,"author":{"gitId":"marclzh"},"content":"    * 1d1. Old appointment is overriden by the new appointment","lastModifiedDate":"2022-10-15"},{"lineNumber":759,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":760,"author":{"gitId":"marclzh"},"content":"    Use case ends","lastModifiedDate":"2022-10-15"},{"lineNumber":761,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":762,"author":{"gitId":"marclzh"},"content":"**Use Case: UC13 - Clear patient appointment**","lastModifiedDate":"2022-10-16"},{"lineNumber":763,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":764,"author":{"gitId":"marclzh"},"content":"**MSS**","lastModifiedDate":"2022-10-16"},{"lineNumber":765,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":766,"author":{"gitId":"marclzh"},"content":"1. User requests to remove the existing appointment of the patient.","lastModifiedDate":"2022-10-16"},{"lineNumber":767,"author":{"gitId":"marclzh"},"content":"2. The specified appointment is removed.","lastModifiedDate":"2022-10-16"},{"lineNumber":768,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":769,"author":{"gitId":"marclzh"},"content":"**Extensions**","lastModifiedDate":"2022-10-16"},{"lineNumber":770,"author":{"gitId":"marclzh"},"content":"* 1a. Patient list is empty","lastModifiedDate":"2022-10-16"},{"lineNumber":771,"author":{"gitId":"marclzh"},"content":"    * 1a1. OmniHealth displays an error message","lastModifiedDate":"2022-10-16"},{"lineNumber":772,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":773,"author":{"gitId":"marclzh"},"content":"    Use case ends","lastModifiedDate":"2022-10-16"},{"lineNumber":774,"author":{"gitId":"marclzh"},"content":"* 1b. Patient index does not exist","lastModifiedDate":"2022-10-16"},{"lineNumber":775,"author":{"gitId":"marclzh"},"content":"    * 1b1. OmniHealth displays an error message.","lastModifiedDate":"2022-10-16"},{"lineNumber":776,"author":{"gitId":"marclzh"},"content":"    ","lastModifiedDate":"2022-10-16"},{"lineNumber":777,"author":{"gitId":"marclzh"},"content":"    Use Case ends","lastModifiedDate":"2022-10-16"},{"lineNumber":778,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":779,"author":{"gitId":"anthonyhoth"},"content":"**Use Case: UC14 - Edit a patient\u0027s record**","lastModifiedDate":"2022-10-19"},{"lineNumber":780,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":781,"author":{"gitId":"anthonyhoth"},"content":"**MSS**","lastModifiedDate":"2022-10-19"},{"lineNumber":782,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":783,"author":{"gitId":"anthonyhoth"},"content":"1. User !!requests to list patients (UC05).!!","lastModifiedDate":"2022-10-19"},{"lineNumber":784,"author":{"gitId":"anthonyhoth"},"content":"2. User !!requests to display record list of specific patient (UC06).!!","lastModifiedDate":"2022-10-19"},{"lineNumber":785,"author":{"gitId":"anthonyhoth"},"content":"3. User requests to edit a record","lastModifiedDate":"2022-10-19"},{"lineNumber":786,"author":{"gitId":"anthonyhoth"},"content":"4. OmniHealth replaces the record in the record list with a new edited one","lastModifiedDate":"2022-10-19"},{"lineNumber":787,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":788,"author":{"gitId":"anthonyhoth"},"content":"**Extensions**","lastModifiedDate":"2022-10-19"},{"lineNumber":789,"author":{"gitId":"anthonyhoth"},"content":"* 3a. The record list is empty.","lastModifiedDate":"2022-10-19"},{"lineNumber":790,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":791,"author":{"gitId":"anthonyhoth"},"content":"    * 3a1. OmniHealth shows an error message.","lastModifiedDate":"2022-10-19"},{"lineNumber":792,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":793,"author":{"gitId":"anthonyhoth"},"content":"      Use case ends.","lastModifiedDate":"2022-10-19"},{"lineNumber":794,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":795,"author":{"gitId":"anthonyhoth"},"content":"* 3b. The given index is invalid.","lastModifiedDate":"2022-10-19"},{"lineNumber":796,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":797,"author":{"gitId":"anthonyhoth"},"content":"    * 3b1. OmniHealth shows an error message.","lastModifiedDate":"2022-10-19"},{"lineNumber":798,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":799,"author":{"gitId":"anthonyhoth"},"content":"      Use case ends.","lastModifiedDate":"2022-10-19"},{"lineNumber":800,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":801,"author":{"gitId":"anthonyhoth"},"content":"* *a. User attempts to edit a record before listing records.","lastModifiedDate":"2022-10-19"},{"lineNumber":802,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":803,"author":{"gitId":"anthonyhoth"},"content":"    * *a1. OmniHealth shows an error message.","lastModifiedDate":"2022-10-19"},{"lineNumber":804,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":805,"author":{"gitId":"anthonyhoth"},"content":"      Use case ends.","lastModifiedDate":"2022-10-19"},{"lineNumber":806,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":807,"author":{"gitId":"anthonyhoth"},"content":"**Use Case: UC15 - Edit a patient\u0027s details**","lastModifiedDate":"2022-10-19"},{"lineNumber":808,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":809,"author":{"gitId":"anthonyhoth"},"content":"**MSS**","lastModifiedDate":"2022-10-19"},{"lineNumber":810,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":811,"author":{"gitId":"anthonyhoth"},"content":"1. User !!requests to list patients (UC05).!!","lastModifiedDate":"2022-10-19"},{"lineNumber":812,"author":{"gitId":"anthonyhoth"},"content":"2. User requests to edit a patient\u0027s details","lastModifiedDate":"2022-10-19"},{"lineNumber":813,"author":{"gitId":"anthonyhoth"},"content":"3. OmniHealth replaces the patient in the patient database with a new edited one","lastModifiedDate":"2022-10-19"},{"lineNumber":814,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":815,"author":{"gitId":"anthonyhoth"},"content":"**Extensions**","lastModifiedDate":"2022-10-19"},{"lineNumber":816,"author":{"gitId":"anthonyhoth"},"content":"* 2a. The patient list is empty.","lastModifiedDate":"2022-10-19"},{"lineNumber":817,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":818,"author":{"gitId":"anthonyhoth"},"content":"    * 3a1. OmniHealth shows an error message.","lastModifiedDate":"2022-10-19"},{"lineNumber":819,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":820,"author":{"gitId":"anthonyhoth"},"content":"      Use case ends.","lastModifiedDate":"2022-10-19"},{"lineNumber":821,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":822,"author":{"gitId":"anthonyhoth"},"content":"* 2b. The given index is invalid.","lastModifiedDate":"2022-10-19"},{"lineNumber":823,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":824,"author":{"gitId":"anthonyhoth"},"content":"    * 3b1. OmniHealth shows an error message.","lastModifiedDate":"2022-10-19"},{"lineNumber":825,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":826,"author":{"gitId":"anthonyhoth"},"content":"      Use case ends.","lastModifiedDate":"2022-10-19"},{"lineNumber":827,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":828,"author":{"gitId":"anthonyhoth"},"content":"* *a. User attempts to edit a patient before listing patients.","lastModifiedDate":"2022-10-19"},{"lineNumber":829,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":830,"author":{"gitId":"anthonyhoth"},"content":"    * *a1. OmniHealth shows an error message.","lastModifiedDate":"2022-10-19"},{"lineNumber":831,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":832,"author":{"gitId":"anthonyhoth"},"content":"      Use case ends.","lastModifiedDate":"2022-10-19"},{"lineNumber":833,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":834,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":835,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":836,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":837,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":838,"author":{"gitId":"LJXSean"},"content":"1. Should work as long as Java `11` or above is installed.","lastModifiedDate":"2022-09-27"},{"lineNumber":839,"author":{"gitId":"LJXSean"},"content":"2. Should be secure to use so that patient records are not easily leaked.","lastModifiedDate":"2022-09-27"},{"lineNumber":840,"author":{"gitId":"LJXSean"},"content":"3. Should be able to handle large amounts of data eg. Patient record list, Patient list","lastModifiedDate":"2022-09-27"},{"lineNumber":841,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":842,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":843,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":844,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":845,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":846,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":847,"author":{"gitId":"-"},"content":"* **Private contact detail**: A contact detail that is not meant to be shared with others","lastModifiedDate":"2020-05-23"},{"lineNumber":848,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":849,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":850,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":851,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":852,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":853,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":854,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":855,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":856,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":857,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":858,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":859,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":860,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":861,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":862,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":863,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":864,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":865,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":866,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":867,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":868,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":869,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":870,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":871,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":872,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":873,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":874,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":875,"author":{"gitId":"-"},"content":"1. _{ more test cases â€¦â€‹ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":876,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":877,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":878,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":879,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":880,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":881,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":882,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":883,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":884,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":885,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":886,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":887,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":888,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":889,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":890,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":891,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":892,"author":{"gitId":"-"},"content":"1. _{ more test cases â€¦â€‹ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":893,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":894,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":895,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":896,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":897,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":898,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":899,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":900,"author":{"gitId":"-"},"content":"1. _{ more test cases â€¦â€‹ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"anthonyhoth":120,"marclzh":142,"hanwenlai":23,"LJXSean":153,"EiffelLKF":100,"-":362}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"anthonyhoth"},"content":"## About OmniHealth","lastModifiedDate":"2022-11-02"},{"lineNumber":6,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":7,"author":{"gitId":"anthonyhoth"},"content":"OmniHealth is a **Patient Management System** tailored to private clinicians to manage patients\u0027 details, records and upcoming appointments.","lastModifiedDate":"2022-11-02"},{"lineNumber":8,"author":{"gitId":"anthonyhoth"},"content":"As a private clinician, you can manage and monitor your patient database all in one location. ","lastModifiedDate":"2022-11-02"},{"lineNumber":9,"author":{"gitId":"anthonyhoth"},"content":"Utilise OmniHealth\u0027s **sorting and filtering system** to help you easily manage and find your patients\u0027 details and records of past visits.","lastModifiedDate":"2022-11-02"},{"lineNumber":10,"author":{"gitId":"anthonyhoth"},"content":"Also, OmniHealth\u0027s **appointment tracker** allows you to tag upcoming appointments for each patient.","lastModifiedDate":"2022-11-02"},{"lineNumber":11,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":12,"author":{"gitId":"anthonyhoth"},"content":"Get rid of your cabinets of patient files today, and leverage upon OmniHealth\u0027s **Patient Management System** ","lastModifiedDate":"2022-11-02"},{"lineNumber":13,"author":{"gitId":"anthonyhoth"},"content":"to help you organise your patient database more efficiently! Just a few strokes on your keyboard,","lastModifiedDate":"2022-11-02"},{"lineNumber":14,"author":{"gitId":"anthonyhoth"},"content":"you\u0027ll be able to interact with OmniHealth and enter a world of effective patient management! ðŸ’Šâœ¨","lastModifiedDate":"2022-11-02"},{"lineNumber":15,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":16,"author":{"gitId":"anthonyhoth"},"content":"This User Guide aims to help your business integrate smoothly with OmniHealth, guiding you along with in-depth documentation.","lastModifiedDate":"2022-11-02"},{"lineNumber":17,"author":{"gitId":"anthonyhoth"},"content":"It shows you how to start using OmniHealth, essential OmniHealth features, Frequently Asked Questions (FAQ) and a neat command summary","lastModifiedDate":"2022-11-02"},{"lineNumber":18,"author":{"gitId":"anthonyhoth"},"content":"for easy reference. So, let\u0027s [get started](#installation)!","lastModifiedDate":"2022-11-02"},{"lineNumber":19,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":20,"author":{"gitId":"anthonyhoth"},"content":"## Table of Contents","lastModifiedDate":"2022-11-02"},{"lineNumber":21,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":22,"author":{"gitId":"anthonyhoth"},"content":"- [Installation](#installation)","lastModifiedDate":"2022-11-02"},{"lineNumber":23,"author":{"gitId":"anthonyhoth"},"content":"- [How to Use OmniHealth](#how-to-use-omnihealth)","lastModifiedDate":"2022-11-02"},{"lineNumber":24,"author":{"gitId":"anthonyhoth"},"content":"  - [Layout](#layout)","lastModifiedDate":"2022-11-02"},{"lineNumber":25,"author":{"gitId":"anthonyhoth"},"content":"  - [Navigation](#navigation)","lastModifiedDate":"2022-11-02"},{"lineNumber":26,"author":{"gitId":"anthonyhoth"},"content":"    - [Patient/Record List](#patient-list)","lastModifiedDate":"2022-11-02"},{"lineNumber":27,"author":{"gitId":"anthonyhoth"},"content":"    - [Filtered/Unfiltered List](#filteredunfiltered-list)","lastModifiedDate":"2022-11-02"},{"lineNumber":28,"author":{"gitId":"anthonyhoth"},"content":"  - [Command Format](#command-format)","lastModifiedDate":"2022-11-02"},{"lineNumber":29,"author":{"gitId":"anthonyhoth"},"content":"  - [Key Definitions](#key-definitions)","lastModifiedDate":"2022-11-02"},{"lineNumber":30,"author":{"gitId":"anthonyhoth"},"content":"    - [Patient](#patient)","lastModifiedDate":"2022-11-02"},{"lineNumber":31,"author":{"gitId":"anthonyhoth"},"content":"    - [Record](#record)","lastModifiedDate":"2022-11-02"},{"lineNumber":32,"author":{"gitId":"anthonyhoth"},"content":"- [Features](#features)","lastModifiedDate":"2022-11-02"},{"lineNumber":33,"author":{"gitId":"anthonyhoth"},"content":"  - [Patient Commands](#patient-commands)","lastModifiedDate":"2022-11-02"},{"lineNumber":34,"author":{"gitId":"anthonyhoth"},"content":"    - [Listing all patients](#listing-all-patients-list): `list`","lastModifiedDate":"2022-11-02"},{"lineNumber":35,"author":{"gitId":"anthonyhoth"},"content":"    - [Adding a patient](#adding-a-patient-add): `add`","lastModifiedDate":"2022-11-02"},{"lineNumber":36,"author":{"gitId":"anthonyhoth"},"content":"    - [Deleting a patient](#deleting-a-patient-delete): `delete`","lastModifiedDate":"2022-11-02"},{"lineNumber":37,"author":{"gitId":"anthonyhoth"},"content":"    - [Editing a patient](#editing-a-patient-edit): `edit`","lastModifiedDate":"2022-11-02"},{"lineNumber":38,"author":{"gitId":"anthonyhoth"},"content":"    - [Finding patients by name](#finding-patients-by-name-find): `find`","lastModifiedDate":"2022-11-02"},{"lineNumber":39,"author":{"gitId":"anthonyhoth"},"content":"    - [Clearing all patient entries](#clearing-all-patient-entries--clear): `clear`","lastModifiedDate":"2022-11-02"},{"lineNumber":40,"author":{"gitId":"anthonyhoth"},"content":"  - [Appointment Commands](#appointment-commands)","lastModifiedDate":"2022-11-02"},{"lineNumber":41,"author":{"gitId":"anthonyhoth"},"content":"    - [Adding an appointment](#adding-an-appointment--appt): `appt`","lastModifiedDate":"2022-11-02"},{"lineNumber":42,"author":{"gitId":"anthonyhoth"},"content":"    - [Clearing an appointment](#clearing-an-appointment-apptcl): `apptcl`","lastModifiedDate":"2022-11-02"},{"lineNumber":43,"author":{"gitId":"anthonyhoth"},"content":"  - [Record Commands](#record-commands)","lastModifiedDate":"2022-11-02"},{"lineNumber":44,"author":{"gitId":"anthonyhoth"},"content":"    - [Listing all records of a patient](#listing-all-records-of-a-patient-rlist): `rlist`","lastModifiedDate":"2022-11-02"},{"lineNumber":45,"author":{"gitId":"anthonyhoth"},"content":"    - [Adding a record](#adding-a-record-radd): `radd`","lastModifiedDate":"2022-11-02"},{"lineNumber":46,"author":{"gitId":"anthonyhoth"},"content":"    - [Deleting a record](#deleting-a-record-rdelete): `rdelete`","lastModifiedDate":"2022-11-02"},{"lineNumber":47,"author":{"gitId":"anthonyhoth"},"content":"    - [Editing a record](#editing-a-record-redit): `redit`","lastModifiedDate":"2022-11-02"},{"lineNumber":48,"author":{"gitId":"anthonyhoth"},"content":"    - [Finding records by keyword](#finding-records-by-keyword-rfind): `rfind`","lastModifiedDate":"2022-11-02"},{"lineNumber":49,"author":{"gitId":"anthonyhoth"},"content":"    - [Clearing all patient records](#clearing-all-patient-records--rclear): `rclear`","lastModifiedDate":"2022-11-02"},{"lineNumber":50,"author":{"gitId":"anthonyhoth"},"content":"  - [General Commands](#general-commands)","lastModifiedDate":"2022-11-02"},{"lineNumber":51,"author":{"gitId":"anthonyhoth"},"content":"    - [Viewing help](#viewing-help-help): `help`","lastModifiedDate":"2022-11-02"},{"lineNumber":52,"author":{"gitId":"anthonyhoth"},"content":"    - [Displaying the full list](#displaying-the-full-list-showall): `showall`","lastModifiedDate":"2022-11-02"},{"lineNumber":53,"author":{"gitId":"anthonyhoth"},"content":"    - [Exiting the program](#exiting-the-program-exit): `exit`","lastModifiedDate":"2022-11-02"},{"lineNumber":54,"author":{"gitId":"anthonyhoth"},"content":"- [FAQ](#faq)","lastModifiedDate":"2022-11-02"},{"lineNumber":55,"author":{"gitId":"anthonyhoth"},"content":"- [Command Summary](#command-summary)","lastModifiedDate":"2022-11-02"},{"lineNumber":56,"author":{"gitId":"marclzh"},"content":"\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e","lastModifiedDate":"2022-11-01"},{"lineNumber":57,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"anthonyhoth"},"content":"## Installation","lastModifiedDate":"2022-11-02"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"anthonyhoth"},"content":"2. Download the latest `OmniHealth.jar` from [our GitHub page](https://github.com/AY2223S1-CS2103T-T14-3/tp/releases).","lastModifiedDate":"2022-11-02"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"anthonyhoth"},"content":"3. Copy the file to an empty folder you want to use as the _home folder_ for OmniHealth.","lastModifiedDate":"2022-11-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"anthonyhoth"},"content":"4. Double-click the file to start the app.","lastModifiedDate":"2022-11-02"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"anthonyhoth"},"content":"5. Congratulations, you now have OmniHealth installed!","lastModifiedDate":"2022-11-02"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"anthonyhoth"},"content":"6. Head over to the next section to learn [how to use OmniHealth](#how-to-use-omnihealth).","lastModifiedDate":"2022-11-02"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2022-11-02"},{"lineNumber":73,"author":{"gitId":"anthonyhoth"},"content":"## How to Use OmniHealth","lastModifiedDate":"2022-11-02"},{"lineNumber":74,"author":{"gitId":"anthonyhoth"},"content":"This section covers all you need to know to start using OmniHealth. ","lastModifiedDate":"2022-11-02"},{"lineNumber":75,"author":{"gitId":"anthonyhoth"},"content":"We will go through the essentials to better understand OmniHealth\u0027s [layout](#layout), [navigation](#navigation) and [command format](#command-format).","lastModifiedDate":"2022-11-02"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"anthonyhoth"},"content":"### Layout","lastModifiedDate":"2022-11-02"},{"lineNumber":78,"author":{"gitId":"anthonyhoth"},"content":"When you launch OmniHealth, you will see OmniHealth\u0027s Graphical User Interface (GUI) on your screen. ","lastModifiedDate":"2022-11-02"},{"lineNumber":79,"author":{"gitId":"anthonyhoth"},"content":"Don\u0027t be overwhelmed, here\u0027s a rundown of the different sections of OmniHealth:","lastModifiedDate":"2022-11-02"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"anthonyhoth"},"content":"**OmniHealth\u0027s GUI:**","lastModifiedDate":"2022-11-02"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"anthonyhoth"},"content":"![ui-annotated](images/UiAnnotated.png){: .shadow}","lastModifiedDate":"2022-11-02"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":85,"author":{"gitId":"anthonyhoth"},"content":"### Navigation","lastModifiedDate":"2022-11-02"},{"lineNumber":86,"author":{"gitId":"anthonyhoth"},"content":"Managing your patient database is made easy with OmniHealth and navigating it is easier!","lastModifiedDate":"2022-11-02"},{"lineNumber":87,"author":{"gitId":"anthonyhoth"},"content":"This section covers the 2 viewing modes: **Patient list view** and **record list view** as well as how to **exit a search**.","lastModifiedDate":"2022-11-02"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"anthonyhoth"},"content":"#### Patient/Record List","lastModifiedDate":"2022-11-02"},{"lineNumber":90,"author":{"gitId":"anthonyhoth"},"content":"Navigating in between patients and their records is done easily with 2 commands:","lastModifiedDate":"2022-11-02"},{"lineNumber":91,"author":{"gitId":"anthonyhoth"},"content":"[`rlist`](#listing-all-records-of-a-patient-rlist) and [`list`](#listing-all-patients-list)","lastModifiedDate":"2022-11-02"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"anthonyhoth"},"content":"**Patient List View (Default):**","lastModifiedDate":"2022-11-02"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"anthonyhoth"},"content":"![ui-patient-list](images/UiPatients.png){: .shadow}","lastModifiedDate":"2022-11-02"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"anthonyhoth"},"content":"Navigating into each patient\u0027s records is done through the [`rlist`](#listing-all-records-of-a-patient-rlist) command.","lastModifiedDate":"2022-11-02"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"anthonyhoth"},"content":"Example: `rlist 1` will enter the **record list view** of `Alex Yeoh`","lastModifiedDate":"2022-11-02"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"anthonyhoth"},"content":"**Record List View:**","lastModifiedDate":"2022-11-02"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":103,"author":{"gitId":"anthonyhoth"},"content":"![ui-record-list](images/UiRecords.png){: .shadow}","lastModifiedDate":"2022-11-02"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":105,"author":{"gitId":"anthonyhoth"},"content":"To return to the patient list view, simply type [`list`](#listing-all-patients-list).","lastModifiedDate":"2022-11-02"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":108,"author":{"gitId":"anthonyhoth"},"content":"#### Filtered/Unfiltered List","lastModifiedDate":"2022-11-02"},{"lineNumber":109,"author":{"gitId":"anthonyhoth"},"content":"OmniHealth\u0027s sorting and filtering system allows you to search for specific patients and records in each respective list views.","lastModifiedDate":"2022-11-02"},{"lineNumber":110,"author":{"gitId":"anthonyhoth"},"content":"Navigating in between the filtered and unfiltered view is done easily with 1 command: [`showall`](#displaying-the-full-list-showall)","lastModifiedDate":"2022-11-02"},{"lineNumber":111,"author":{"gitId":"anthonyhoth"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2022-11-02"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"anthonyhoth"},"content":"**:information_source: [`showall`](#displaying-the-full-list-showall) command is applicable to both patient list view and record list view**\u003cbr\u003e","lastModifiedDate":"2022-11-02"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"anthonyhoth"},"content":"\u003c/div\u003e","lastModifiedDate":"2022-11-02"},{"lineNumber":116,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2022-11-02"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"anthonyhoth"},"content":"**:information_source: More information:**\u003cbr\u003e","lastModifiedDate":"2022-11-02"},{"lineNumber":119,"author":{"gitId":"anthonyhoth"},"content":"* To find patients by name: [`find`](#finding-patients-by-name-find)","lastModifiedDate":"2022-11-02"},{"lineNumber":120,"author":{"gitId":"anthonyhoth"},"content":"* To find records by keyword: [`keyword`](#finding-records-by-keyword-rfind)","lastModifiedDate":"2022-11-02"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":122,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"anthonyhoth"},"content":"### Command Format","lastModifiedDate":"2022-11-02"},{"lineNumber":125,"author":{"gitId":"anthonyhoth"},"content":"Before we introduce more of OmniHealth\u0027s commands throughout this User Guide, let\u0027s first","lastModifiedDate":"2022-11-02"},{"lineNumber":126,"author":{"gitId":"anthonyhoth"},"content":"go through the general command format.","lastModifiedDate":"2022-11-02"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":128,"author":{"gitId":"anthonyhoth"},"content":"Here is an example command [`radd`](#adding-a-record-radd):","lastModifiedDate":"2022-11-02"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":130,"author":{"gitId":"anthonyhoth"},"content":"![command-format](images/CommandFormat.png){: .shadow}","lastModifiedDate":"2022-11-02"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":132,"author":{"gitId":"anthonyhoth"},"content":"1. **Command Word**: Determines what action you want OmniHealth to execute.","lastModifiedDate":"2022-11-02"},{"lineNumber":133,"author":{"gitId":"anthonyhoth"},"content":"2. **User Input Fields**: Parameters which you input **valid data** with.","lastModifiedDate":"2022-11-02"},{"lineNumber":134,"author":{"gitId":"anthonyhoth"},"content":"3. **Flags**: Allows OmniHealth to know which user field you wish to input.","lastModifiedDate":"2022-11-02"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":136,"author":{"gitId":"anthonyhoth"},"content":"Here are some general guidelines for you to better understand the command format for all our [features](#features).","lastModifiedDate":"2022-11-02"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":138,"author":{"gitId":"anthonyhoth"},"content":"| User Input Rules    | Description                                                                                   | Example                                                                     |","lastModifiedDate":"2022-11-02"},{"lineNumber":139,"author":{"gitId":"anthonyhoth"},"content":"|---------------------|-----------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------|","lastModifiedDate":"2022-11-02"},{"lineNumber":140,"author":{"gitId":"anthonyhoth"},"content":"| `UPPER_CASE`        | Input fields to be supplied by you.                                                           | `n/NAME` requires an input.                                                 |","lastModifiedDate":"2022-11-02"},{"lineNumber":141,"author":{"gitId":"anthonyhoth"},"content":"| `[SQUARE_BRACKETS]` | Optional input fields that can be omitted.                                                    | `[t/TAG]` can be left blank.                                                |","lastModifiedDate":"2022-11-02"},{"lineNumber":142,"author":{"gitId":"anthonyhoth"},"content":"| `...`               | Input fields that can be used multiple times including zero times.                            | `[t/TAG]...` can be `t/GlutenAllergy`, `t/DustAllergy t/PollenAllergy` etc. |","lastModifiedDate":"2022-11-02"},{"lineNumber":143,"author":{"gitId":"anthonyhoth"},"content":"| Any Order           | Input fields can be in any order.                                                             | `n/NAME p/PHONE_NUMBER` and `p/PHONE_NUMBER n/NAME` are acceptable.         |","lastModifiedDate":"2022-11-02"},{"lineNumber":144,"author":{"gitId":"anthonyhoth"},"content":"| Last Input          | If an input field is only expected once, only the last of multiple inputs will be considered. | `p/12341234 p/56785678` will be interpreted as `p/56785678`.                |                  ","lastModifiedDate":"2022-11-02"},{"lineNumber":145,"author":{"gitId":"anthonyhoth"},"content":"| Extraneous Fields   | For commands that do not take in input fields, unnecessary input will be ignored.             | `help 123` will be interpreted as `help`.                                   |","lastModifiedDate":"2022-11-02"},{"lineNumber":146,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":147,"author":{"gitId":"anthonyhoth"},"content":"### Key Definitions","lastModifiedDate":"2022-11-02"},{"lineNumber":148,"author":{"gitId":"anthonyhoth"},"content":"#### Patient","lastModifiedDate":"2022-11-02"},{"lineNumber":149,"author":{"gitId":"anthonyhoth"},"content":"| Input Fields | Flag | Description |","lastModifiedDate":"2022-11-02"},{"lineNumber":150,"author":{"gitId":"anthonyhoth"},"content":"|--------------|------|-------------|","lastModifiedDate":"2022-11-02"},{"lineNumber":151,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":152,"author":{"gitId":"anthonyhoth"},"content":"#### Record","lastModifiedDate":"2022-11-02"},{"lineNumber":153,"author":{"gitId":"anthonyhoth"},"content":"| Input Fields | Flag | Description |","lastModifiedDate":"2022-11-02"},{"lineNumber":154,"author":{"gitId":"anthonyhoth"},"content":"|--------------|------|-------------|","lastModifiedDate":"2022-11-02"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":156,"author":{"gitId":"anthonyhoth"},"content":"## Features","lastModifiedDate":"2022-11-02"},{"lineNumber":157,"author":{"gitId":"anthonyhoth"},"content":"### General Commands","lastModifiedDate":"2022-11-02"},{"lineNumber":158,"author":{"gitId":"anthonyhoth"},"content":"#### Viewing help: `help`","lastModifiedDate":"2022-11-02"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"marclzh"},"content":"Shows a message explaining how to access the help page.","lastModifiedDate":"2022-10-26"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"Format: `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"anthonyhoth"},"content":"#### Displaying the full list: `showall`","lastModifiedDate":"2022-11-02"},{"lineNumber":167,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":168,"author":{"gitId":"LJXSean"},"content":"Clears search parameters of a find or rfind command to undo the search.","lastModifiedDate":"2022-10-29"},{"lineNumber":169,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":170,"author":{"gitId":"LJXSean"},"content":"* If the patient list is displayed, the unfiltered patient list will be shown instead.","lastModifiedDate":"2022-10-29"},{"lineNumber":171,"author":{"gitId":"LJXSean"},"content":"* If the record list is displayed, the unfiltered record list will be shown instead.","lastModifiedDate":"2022-10-29"},{"lineNumber":172,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":173,"author":{"gitId":"marclzh"},"content":"Format: `showall`","lastModifiedDate":"2022-10-26"},{"lineNumber":174,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":175,"author":{"gitId":"anthonyhoth"},"content":"#### Exiting the program: `exit`","lastModifiedDate":"2022-11-02"},{"lineNumber":176,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":177,"author":{"gitId":"marclzh"},"content":"Exits the program.","lastModifiedDate":"2022-10-26"},{"lineNumber":178,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":179,"author":{"gitId":"marclzh"},"content":"Format: `exit`","lastModifiedDate":"2022-10-26"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":181,"author":{"gitId":"anthonyhoth"},"content":"### Patient Commands","lastModifiedDate":"2022-11-02"},{"lineNumber":182,"author":{"gitId":"marclzh"},"content":"\u003e Commands relating to the patient list, such as adding and deleting patients","lastModifiedDate":"2022-11-01"},{"lineNumber":183,"author":{"gitId":"anthonyhoth"},"content":"#### Listing all patients: `list`","lastModifiedDate":"2022-11-02"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":185,"author":{"gitId":"marclzh"},"content":"Returns to the patient list from the record list screen.","lastModifiedDate":"2022-11-01"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":187,"author":{"gitId":"marclzh"},"content":"* The record list screen must be shown for this command to be valid.","lastModifiedDate":"2022-11-01"},{"lineNumber":188,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":189,"author":{"gitId":"marclzh"},"content":"Format: `list`","lastModifiedDate":"2022-11-01"},{"lineNumber":190,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":191,"author":{"gitId":"anthonyhoth"},"content":"#### Adding a patient: `add`","lastModifiedDate":"2022-11-02"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"EiffelLKF"},"content":"Adds a patient to the patient record database.","lastModifiedDate":"2022-09-20"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"hanwenlai"},"content":"Format: `add n/NAME b/BIRTHDATE p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]â€¦â€‹`","lastModifiedDate":"2022-10-19"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"EiffelLKF"},"content":"* The command can only be called when the patient addressbook is displayed (after using `list`).","lastModifiedDate":"2022-10-26"},{"lineNumber":198,"author":{"gitId":"anthonyhoth"},"content":"* Patient\u0027s name entered in is case-insensitive.","lastModifiedDate":"2022-10-24"},{"lineNumber":199,"author":{"gitId":"LJXSean"},"content":"* Name should only contain alphanumeric characters (eg. s/o is not a valid input).","lastModifiedDate":"2022-11-01"},{"lineNumber":200,"author":{"gitId":"EiffelLKF"},"content":"* Birthdate **cannot be after the current date**.","lastModifiedDate":"2022-10-27"},{"lineNumber":201,"author":{"gitId":"anthonyhoth"},"content":"* Duplicate patients are not allowed.","lastModifiedDate":"2022-10-24"},{"lineNumber":202,"author":{"gitId":"anthonyhoth"},"content":"    * Patients are considered duplicate when they have the same `NAME` and `ADDRESS`.","lastModifiedDate":"2022-10-24"},{"lineNumber":203,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":204,"author":{"gitId":"anthonyhoth"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:**","lastModifiedDate":"2022-11-01"},{"lineNumber":205,"author":{"gitId":"anthonyhoth"},"content":"Birthdate must be given in DD-MM-YYYY format!","lastModifiedDate":"2022-11-01"},{"lineNumber":206,"author":{"gitId":"EiffelLKF"},"content":"\u003c/div\u003e","lastModifiedDate":"2022-10-27"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-27"},{"lineNumber":208,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"anthonyhoth"},"content":"A patient can have any number of tags (including 0)","lastModifiedDate":"2022-10-24"},{"lineNumber":210,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"hanwenlai"},"content":"* `add n/John Doe b/08-08-1988 p/98765432 e/johnd@example.com a/John street, block 123, #01-01`","lastModifiedDate":"2022-10-19"},{"lineNumber":214,"author":{"gitId":"EiffelLKF"},"content":"* `add n/Betsy Crowe b/16-06-1996 e/betsycrowe@example.com a/Ang Mo Kio Ave 5, block 13, #02-033 p/1234567 t/PollenAllergy`","lastModifiedDate":"2022-10-26"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"anthonyhoth"},"content":"#### Deleting a patient: `delete`","lastModifiedDate":"2022-11-02"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":218,"author":{"gitId":"anthonyhoth"},"content":"Deletes the specified patient from the patient database.","lastModifiedDate":"2022-09-20"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":220,"author":{"gitId":"anthonyhoth"},"content":"Format: `delete INDEX`","lastModifiedDate":"2022-09-20"},{"lineNumber":221,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":222,"author":{"gitId":"EiffelLKF"},"content":"* The command can only be called when the patient addressbook is displayed (after using `list`).","lastModifiedDate":"2022-10-26"},{"lineNumber":223,"author":{"gitId":"anthonyhoth"},"content":"* Deletes the patient at the specified `INDEX`.","lastModifiedDate":"2022-09-20"},{"lineNumber":224,"author":{"gitId":"anthonyhoth"},"content":"* The index refers to the index number shown in the displayed patient records list.","lastModifiedDate":"2022-09-20"},{"lineNumber":225,"author":{"gitId":"anthonyhoth"},"content":"* The index must be a positive integer 1, 2, 3, â€¦â€‹","lastModifiedDate":"2022-09-20"},{"lineNumber":226,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":227,"author":{"gitId":"anthonyhoth"},"content":"Examples:","lastModifiedDate":"2022-09-20"},{"lineNumber":228,"author":{"gitId":"anthonyhoth"},"content":"* `list` followed by `delete 2` deletes the 2nd patient in the address book.","lastModifiedDate":"2022-09-20"},{"lineNumber":229,"author":{"gitId":"anthonyhoth"},"content":"* `find Betsy` followed by `delete 1` deletes the 1st patient in the results of the find command.","lastModifiedDate":"2022-09-20"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":231,"author":{"gitId":"anthonyhoth"},"content":"#### Editing a patient: `edit`","lastModifiedDate":"2022-11-02"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"anthonyhoth"},"content":"Edits an existing patient in the address book.","lastModifiedDate":"2022-10-24"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"hanwenlai"},"content":"Format: `edit INDEX [n/NAME] [b/BIRTHDATE] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]â€¦â€‹`","lastModifiedDate":"2022-10-19"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"EiffelLKF"},"content":"* The command can only be called when the patient addressbook is displayed (after using `list`).","lastModifiedDate":"2022-10-27"},{"lineNumber":238,"author":{"gitId":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, â€¦â€‹","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"LJXSean"},"content":"* At least one of the optional fields must be provided","lastModifiedDate":"2022-10-26"},{"lineNumber":240,"author":{"gitId":"LJXSean"},"content":"    * if the same field is specified more than once, only the latest instance of the field is used.","lastModifiedDate":"2022-10-26"},{"lineNumber":241,"author":{"gitId":"LJXSean"},"content":"    * eg. edit 1 n/Johnny n/Becky -\u003e Person\u0027s name is edited to Becky.","lastModifiedDate":"2022-10-26"},{"lineNumber":242,"author":{"gitId":"EiffelLKF"},"content":"* Existing values will be overridden by the input values.","lastModifiedDate":"2022-10-27"},{"lineNumber":243,"author":{"gitId":"EiffelLKF"},"content":"  * eg. when editing tags, the existing tags of the patient will be removed i.e adding of tags is not cumulative.","lastModifiedDate":"2022-10-27"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"marclzh"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2022-10-26"},{"lineNumber":246,"author":{"gitId":"EiffelLKF"},"content":"You can remove all the patientâ€™s tags by typing `t/` without","lastModifiedDate":"2022-10-27"},{"lineNumber":247,"author":{"gitId":"EiffelLKF"},"content":"  specifying any tags after it.","lastModifiedDate":"2022-10-27"},{"lineNumber":248,"author":{"gitId":"marclzh"},"content":"\u003c/div\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":250,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"anthonyhoth"},"content":"*  `edit 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st patient to be `91234567` and `johndoe@example.com` respectively.","lastModifiedDate":"2022-10-24"},{"lineNumber":252,"author":{"gitId":"anthonyhoth"},"content":"*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd patient to be `Betsy Crower` and clears all existing tags.","lastModifiedDate":"2022-10-24"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"anthonyhoth"},"content":"#### Finding patients by name: `find`","lastModifiedDate":"2022-11-02"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"anthonyhoth"},"content":"Finds patients whose names contain any of the given keywords.","lastModifiedDate":"2022-10-24"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"EiffelLKF"},"content":"* The command can only be called when the patient addressbook is displayed (after using `list`).","lastModifiedDate":"2022-10-26"},{"lineNumber":261,"author":{"gitId":"-"},"content":"* The search is case-insensitive. e.g `hans` will match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"* Only the name is searched.","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search).","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"* `find John` returns `john` and `John Doe`","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"* `find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":272,"author":{"gitId":"anthonyhoth"},"content":"#### Clearing all patient entries: `clear`","lastModifiedDate":"2022-11-02"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"LJXSean"},"content":"Clears all patients from Omnihealth.","lastModifiedDate":"2022-09-21"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"EiffelLKF"},"content":"* The command can only be called when the patient addressbook is displayed (after using `list`).","lastModifiedDate":"2022-10-26"},{"lineNumber":277,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":278,"author":{"gitId":"-"},"content":"Format: `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":280,"author":{"gitId":"anthonyhoth"},"content":"### Appointment Commands","lastModifiedDate":"2022-11-02"},{"lineNumber":281,"author":{"gitId":"marclzh"},"content":"\u003e Commands for adding and clearing appointments","lastModifiedDate":"2022-11-01"},{"lineNumber":282,"author":{"gitId":"anthonyhoth"},"content":"#### Adding an appointment: `appt`","lastModifiedDate":"2022-11-02"},{"lineNumber":283,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":284,"author":{"gitId":"marclzh"},"content":"Adds an appointment for a specified patient. This command is only valid in the patient list view.","lastModifiedDate":"2022-10-15"},{"lineNumber":285,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":286,"author":{"gitId":"anthonyhoth"},"content":"Format: `appt INDEX d/APPOINTMENT_DATE_TIME`","lastModifiedDate":"2022-11-01"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":288,"author":{"gitId":"EiffelLKF"},"content":"* The command can only be called when the patient addressbook is displayed (after using `list`).","lastModifiedDate":"2022-10-26"},{"lineNumber":289,"author":{"gitId":"EiffelLKF"},"content":"* Adds a new appointment for the patient under the specified `INDEX`, with the given date.","lastModifiedDate":"2022-10-27"},{"lineNumber":290,"author":{"gitId":"EiffelLKF"},"content":"* The index refers to the index number shown in the displayed patient list.","lastModifiedDate":"2022-10-26"},{"lineNumber":291,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, â€¦â€‹","lastModifiedDate":"2022-10-26"},{"lineNumber":292,"author":{"gitId":"EiffelLKF"},"content":"* The appointment date **cannot be before the current date**.","lastModifiedDate":"2022-10-27"},{"lineNumber":293,"author":{"gitId":"EiffelLKF"},"content":"* If a pre-existing appointment is present, it will be overridden by the new appointment.","lastModifiedDate":"2022-10-26"},{"lineNumber":294,"author":{"gitId":"marclzh"},"content":"* Appointments that have passed will not be removed automatically, and require either a new appointment to override ","lastModifiedDate":"2022-11-01"},{"lineNumber":295,"author":{"gitId":"marclzh"},"content":"or the `apptcl` command in the next section below to be used. Further development of the appointment feature will be released in ","lastModifiedDate":"2022-11-01"},{"lineNumber":296,"author":{"gitId":"marclzh"},"content":"future iterations!","lastModifiedDate":"2022-11-01"},{"lineNumber":297,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":298,"author":{"gitId":"anthonyhoth"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:**","lastModifiedDate":"2022-11-01"},{"lineNumber":299,"author":{"gitId":"anthonyhoth"},"content":"Appointment date \u0026 time must be given in DD-MM-YYYY HHmm format!","lastModifiedDate":"2022-11-01"},{"lineNumber":300,"author":{"gitId":"marclzh"},"content":"\u003c/div\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":302,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2022-11-01"},{"lineNumber":303,"author":{"gitId":"marclzh"},"content":"* `appt 1 d/11-09-2024 1200` adds an appointment for the patient with index 1, with a date and time of 11/09/2024, 1200.","lastModifiedDate":"2022-11-01"},{"lineNumber":304,"author":{"gitId":"marclzh"},"content":"* `appt 2 d/15-11-2025 1400` adds an appointment for the patient with index 2, with a date and time of 15/11/2024, 1400.","lastModifiedDate":"2022-11-01"},{"lineNumber":305,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":306,"author":{"gitId":"anthonyhoth"},"content":"#### Clearing an appointment: `apptcl`","lastModifiedDate":"2022-11-02"},{"lineNumber":307,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":308,"author":{"gitId":"marclzh"},"content":"Clears the appointment for a specified patient. This command is only valid in the patient list view.","lastModifiedDate":"2022-10-16"},{"lineNumber":309,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":310,"author":{"gitId":"marclzh"},"content":"Format: `apptcl INDEX`","lastModifiedDate":"2022-10-16"},{"lineNumber":311,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":312,"author":{"gitId":"marclzh"},"content":"* The command can only be called when the patient list is displayed (after using `list`).","lastModifiedDate":"2022-11-01"},{"lineNumber":313,"author":{"gitId":"marclzh"},"content":"* Clears any appointment under the patient with the specified `INDEX`.","lastModifiedDate":"2022-10-16"},{"lineNumber":314,"author":{"gitId":"EiffelLKF"},"content":"* The index refers to the index number shown in the displayed patient list.","lastModifiedDate":"2022-10-26"},{"lineNumber":315,"author":{"gitId":"EiffelLKF"},"content":"* The index **must be a positive integer** 1, 2, 3, â€¦â€‹","lastModifiedDate":"2022-10-26"},{"lineNumber":316,"author":{"gitId":"marclzh"},"content":"* The command will return the patient list to its original state, before any filters were applied to the list.","lastModifiedDate":"2022-11-01"},{"lineNumber":317,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":318,"author":{"gitId":"marclzh"},"content":"Examples:","lastModifiedDate":"2022-11-01"},{"lineNumber":319,"author":{"gitId":"marclzh"},"content":"* `apptcl 1` clears the appointment (if any) of the patient with index 1.","lastModifiedDate":"2022-11-01"},{"lineNumber":320,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":321,"author":{"gitId":"anthonyhoth"},"content":"### Record Commands","lastModifiedDate":"2022-11-02"},{"lineNumber":322,"author":{"gitId":"marclzh"},"content":"\u003e Commands relating to the record list of a patient, such as adding or deleting a record","lastModifiedDate":"2022-11-01"},{"lineNumber":323,"author":{"gitId":"anthonyhoth"},"content":"#### Adding a record: `radd`","lastModifiedDate":"2022-11-02"},{"lineNumber":324,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":325,"author":{"gitId":"marclzh"},"content":"Adds a new record to a given patient.","lastModifiedDate":"2022-10-26"},{"lineNumber":326,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":327,"author":{"gitId":"anthonyhoth"},"content":"Format: `radd d/RECORD_DATE_TIME r/RECORD_DETAILS [m/MEDICATION]â€¦` ","lastModifiedDate":"2022-11-01"},{"lineNumber":328,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":329,"author":{"gitId":"marclzh"},"content":"* The command can only be called when a patient\u0027s record list is displayed (after using `rlist PATIENT_INDEX`).","lastModifiedDate":"2022-10-26"},{"lineNumber":330,"author":{"gitId":"anthonyhoth"},"content":"* Adds a new record to the patient with given `RECORD_DATE_TIME`, `RECORD_DETAILS` and `MEDICATION` information.","lastModifiedDate":"2022-11-01"},{"lineNumber":331,"author":{"gitId":"anthonyhoth"},"content":"  * `RECORD_DETAILS` field cannot be empty.","lastModifiedDate":"2022-11-01"},{"lineNumber":332,"author":{"gitId":"anthonyhoth"},"content":"* The record date \u0026 time **cannot be in the future**.","lastModifiedDate":"2022-11-01"},{"lineNumber":333,"author":{"gitId":"marclzh"},"content":"  ","lastModifiedDate":"2022-10-26"},{"lineNumber":334,"author":{"gitId":"anthonyhoth"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:**","lastModifiedDate":"2022-11-01"},{"lineNumber":335,"author":{"gitId":"anthonyhoth"},"content":"Date \u0026 time must be given in DD-MM-YYYY HHmm format!","lastModifiedDate":"2022-11-01"},{"lineNumber":336,"author":{"gitId":"marclzh"},"content":"\u003c/div\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":337,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":338,"author":{"gitId":"marclzh"},"content":"Examples:","lastModifiedDate":"2022-10-26"},{"lineNumber":339,"author":{"gitId":"EiffelLKF"},"content":"* `radd d/11-09-2001 1200 r/Patient tested negative for COVID-19 m/Paracetamol 500mg m/Dextromethorphan`","lastModifiedDate":"2022-11-01"},{"lineNumber":340,"author":{"gitId":"anthonyhoth"},"content":"* `radd d/28-02-2020 2030 r/Patient experienced vomiting`","lastModifiedDate":"2022-11-01"},{"lineNumber":341,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":342,"author":{"gitId":"anthonyhoth"},"content":"#### Deleting a record: `rdelete`","lastModifiedDate":"2022-11-02"},{"lineNumber":343,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":344,"author":{"gitId":"marclzh"},"content":"Deletes the specified record from the currently viewed patientâ€™s records.","lastModifiedDate":"2022-10-26"},{"lineNumber":345,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":346,"author":{"gitId":"marclzh"},"content":"Format: `rdelete RECORD_INDEX`","lastModifiedDate":"2022-10-26"},{"lineNumber":347,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":348,"author":{"gitId":"marclzh"},"content":"* The command can only be called when a patient\u0027s record list is displayed (after using `rlist PATIENT_INDEX`).","lastModifiedDate":"2022-10-26"},{"lineNumber":349,"author":{"gitId":"marclzh"},"content":"* Deletes the record of the currently viewed patient at the specified `RECORD_INDEX`.","lastModifiedDate":"2022-10-26"},{"lineNumber":350,"author":{"gitId":"marclzh"},"content":"* The record index must be a positive integer 1, 2, 3, â€¦â€‹","lastModifiedDate":"2022-10-26"},{"lineNumber":351,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":352,"author":{"gitId":"marclzh"},"content":"Examples:","lastModifiedDate":"2022-10-26"},{"lineNumber":353,"author":{"gitId":"marclzh"},"content":"* `rlist 1` then `rdelete 2` deletes the 2nd record from the 1st patientâ€™s listed records.","lastModifiedDate":"2022-10-26"},{"lineNumber":354,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":355,"author":{"gitId":"anthonyhoth"},"content":"#### Listing all records of a patient: `rlist`","lastModifiedDate":"2022-11-02"},{"lineNumber":356,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":357,"author":{"gitId":"marclzh"},"content":"Shows a list of all records for the specified patient.","lastModifiedDate":"2022-10-26"},{"lineNumber":358,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":359,"author":{"gitId":"marclzh"},"content":"Format: `rlist PATIENT_INDEX`","lastModifiedDate":"2022-10-26"},{"lineNumber":360,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":361,"author":{"gitId":"anthonyhoth"},"content":"* The command can only be called when the patient list is displayed (after using `list`).","lastModifiedDate":"2022-11-01"},{"lineNumber":362,"author":{"gitId":"marclzh"},"content":"* Lists all records of the patient at the specified `PATIENT_INDEX`.","lastModifiedDate":"2022-10-26"},{"lineNumber":363,"author":{"gitId":"marclzh"},"content":"* The index refers to the index number shown in the displayed patient list.","lastModifiedDate":"2022-10-26"},{"lineNumber":364,"author":{"gitId":"marclzh"},"content":"* The index **must be a positive integer** 1, 2, 3, â€¦â€‹","lastModifiedDate":"2022-10-26"},{"lineNumber":365,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":366,"author":{"gitId":"marclzh"},"content":"Examples:","lastModifiedDate":"2022-10-26"},{"lineNumber":367,"author":{"gitId":"marclzh"},"content":"* `rlist 1` displays all records of the 1st patient in the displayed patient list.","lastModifiedDate":"2022-10-26"},{"lineNumber":368,"author":{"gitId":"marclzh"},"content":"* `find Betsy` followed by `rlist 1` displays all records of the 1st patient in the results of the find command.","lastModifiedDate":"2022-10-26"},{"lineNumber":369,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":370,"author":{"gitId":"anthonyhoth"},"content":"#### Editing a record: `redit`","lastModifiedDate":"2022-11-02"},{"lineNumber":371,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":372,"author":{"gitId":"marclzh"},"content":"Edits an existing record in the record list.","lastModifiedDate":"2022-10-26"},{"lineNumber":373,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":374,"author":{"gitId":"anthonyhoth"},"content":"Format: `redit INDEX [d/RECORD_DATE_TIME] [r/RECORD_DETAILS] [m/MEDICATION]â€¦â€‹`","lastModifiedDate":"2022-11-01"},{"lineNumber":375,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":376,"author":{"gitId":"marclzh"},"content":"* The command can only be called when a patient\u0027s record list is displayed (after using `rlist PATIENT_INDEX`).","lastModifiedDate":"2022-10-26"},{"lineNumber":377,"author":{"gitId":"marclzh"},"content":"* Edits the record at the specified `INDEX`. The index refers to the index number shown in the displayed record list. The index **must be a positive integer** 1, 2, 3, â€¦â€‹","lastModifiedDate":"2022-10-26"},{"lineNumber":378,"author":{"gitId":"marclzh"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2022-10-26"},{"lineNumber":379,"author":{"gitId":"marclzh"},"content":"  * if the same field is specified more than once, only the latest instance of the field is used.","lastModifiedDate":"2022-10-26"},{"lineNumber":380,"author":{"gitId":"marclzh"},"content":"  * eg. redit 1 r/Cold r/Flu -\u003e Record\u0027s data is edited to Flu.","lastModifiedDate":"2022-10-26"},{"lineNumber":381,"author":{"gitId":"marclzh"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2022-10-26"},{"lineNumber":382,"author":{"gitId":"marclzh"},"content":"* When editing medication, the existing medication in the record will be removed i.e adding of tags is not cumulative.","lastModifiedDate":"2022-10-26"},{"lineNumber":383,"author":{"gitId":"marclzh"},"content":"* You can remove all the specific recordâ€™s medications by typing `t/` without","lastModifiedDate":"2022-10-26"},{"lineNumber":384,"author":{"gitId":"marclzh"},"content":"  specifying any tags after it.","lastModifiedDate":"2022-10-26"},{"lineNumber":385,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":386,"author":{"gitId":"marclzh"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2022-10-26"},{"lineNumber":387,"author":{"gitId":"marclzh"},"content":"Record date must be given in DD-MM-YYYY HHmm format!","lastModifiedDate":"2022-10-26"},{"lineNumber":388,"author":{"gitId":"marclzh"},"content":"\u003c/div\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":389,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":390,"author":{"gitId":"marclzh"},"content":"Examples:","lastModifiedDate":"2022-10-26"},{"lineNumber":391,"author":{"gitId":"marclzh"},"content":"*  `redit 1 d/12-12-2012 1200` Edits the date of the 1st record to be `12-12-2012 1200`.","lastModifiedDate":"2022-10-26"},{"lineNumber":392,"author":{"gitId":"marclzh"},"content":"*  `redit 2 r/Fever m/` Edits the data of the 2nd record to be `Fever` and clears all existing medication.","lastModifiedDate":"2022-10-26"},{"lineNumber":393,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":394,"author":{"gitId":"anthonyhoth"},"content":"#### Finding records by keyword: `rfind`","lastModifiedDate":"2022-11-02"},{"lineNumber":395,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":396,"author":{"gitId":"LJXSean"},"content":"\u003e Finds all records that match the search constraint provided","lastModifiedDate":"2022-10-29"},{"lineNumber":397,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":398,"author":{"gitId":"LJXSean"},"content":"Format: `rfind [d/DATE] [r/DATA] [m/MEDICATION]`","lastModifiedDate":"2022-10-29"},{"lineNumber":399,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":400,"author":{"gitId":"LJXSean"},"content":"* The command can only be called when a patient\u0027s record list is displayed (after using `rlist PATIENT_INDEX`).","lastModifiedDate":"2022-10-29"},{"lineNumber":401,"author":{"gitId":"marclzh"},"content":"* The search is case-insensitive. e.g `h1n1` will match `H1N1`","lastModifiedDate":"2022-10-26"},{"lineNumber":402,"author":{"gitId":"marclzh"},"content":"* The order of the keywords does not matter. e.g. `r/Has SARS` will match `SARS Has` stored in record data","lastModifiedDate":"2022-10-26"},{"lineNumber":403,"author":{"gitId":"marclzh"},"content":"* Only full words will be matched e.g. `Covid` will not match `Covid-19`.","lastModifiedDate":"2022-10-26"},{"lineNumber":404,"author":{"gitId":"marclzh"},"content":"* The order that the fields are specified does not matter. eg. `r/SARS m/Panadol` is equivalent to `m/Panadol r/SARS`","lastModifiedDate":"2022-10-26"},{"lineNumber":405,"author":{"gitId":"LJXSean"},"content":"* PREFIXES specify the field of a record that the keywords will be matched to.","lastModifiedDate":"2022-10-29"},{"lineNumber":406,"author":{"gitId":"LJXSean"},"content":"  * If the specified field of a record contains at least one matching keyword, the record is returned.","lastModifiedDate":"2022-10-29"},{"lineNumber":407,"author":{"gitId":"LJXSean"},"content":"  * e.g. `m/Paracetamol Benzonatate` will return records with medications of `Benzonatate Benzonatate`, `Paracetamol Paracetamol`.","lastModifiedDate":"2022-10-29"},{"lineNumber":408,"author":{"gitId":"LJXSean"},"content":"* Specifying more PREFIXES increases the constraint of the search.","lastModifiedDate":"2022-10-29"},{"lineNumber":409,"author":{"gitId":"LJXSean"},"content":"  * If all fields of a record that is specified by the PREFIX contains at least one matching keyword each, the record is returned.","lastModifiedDate":"2022-10-29"},{"lineNumber":410,"author":{"gitId":"LJXSean"},"content":"  * e.g. `r/Covid-19 m/cold` will only return records that contains both `Covid-19` in record data and `cold` in record medication.","lastModifiedDate":"2022-10-29"},{"lineNumber":411,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":412,"author":{"gitId":"marclzh"},"content":"Examples:","lastModifiedDate":"2022-10-26"},{"lineNumber":413,"author":{"gitId":"LJXSean"},"content":"* `rfind r/Covid-19` returns a record with `Covid-19` and `Contracted covid-19` stored in its record data field.","lastModifiedDate":"2022-10-29"},{"lineNumber":414,"author":{"gitId":"LJXSean"},"content":"* `rfind r/cold d/10-2022` returns a record that matches both `cold` in the record data field, and has a date within Oct 2022.","lastModifiedDate":"2022-10-29"},{"lineNumber":415,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":416,"author":{"gitId":"anthonyhoth"},"content":"#### Clearing all patient records : `rclear`","lastModifiedDate":"2022-11-02"},{"lineNumber":417,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":418,"author":{"gitId":"marclzh"},"content":"Clears all records of a specific patient from Omnihealth.","lastModifiedDate":"2022-10-26"},{"lineNumber":419,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":420,"author":{"gitId":"marclzh"},"content":"* The command can only be called when a patient\u0027s record list is displayed (after using `rlist PATIENT_INDEX`).","lastModifiedDate":"2022-10-26"},{"lineNumber":421,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":422,"author":{"gitId":"marclzh"},"content":"Format: `rclear`","lastModifiedDate":"2022-10-26"},{"lineNumber":423,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":424,"author":{"gitId":"anthonyhoth"},"content":"### Saving \u0026 Loading","lastModifiedDate":"2022-11-02"},{"lineNumber":425,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":426,"author":{"gitId":"anthonyhoth"},"content":"#### Saving the data","lastModifiedDate":"2022-11-02"},{"lineNumber":427,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":428,"author":{"gitId":"marclzh"},"content":"Patient\u0027s data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2022-09-27"},{"lineNumber":429,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":430,"author":{"gitId":"anthonyhoth"},"content":"#### Editing the data file","lastModifiedDate":"2022-11-02"},{"lineNumber":431,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":432,"author":{"gitId":"marclzh"},"content":"OmniHealth\u0027s data are saved as a JSON file `[JAR file location]/data/patientlist.json`. Advanced users are welcome to update data directly by editing that data file.","lastModifiedDate":"2022-09-27"},{"lineNumber":433,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":434,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2021-02-04"},{"lineNumber":435,"author":{"gitId":"marclzh"},"content":"If your changes to the data file makes its format invalid, OmniHealth will discard all data and start with an empty data file at the next run.","lastModifiedDate":"2022-09-27"},{"lineNumber":436,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":437,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":438,"author":{"gitId":"anthonyhoth"},"content":"#### Archiving data files `[coming in v2.0]`","lastModifiedDate":"2022-11-02"},{"lineNumber":439,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":440,"author":{"gitId":"-"},"content":"_Details coming soon ..._","lastModifiedDate":"2021-02-04"},{"lineNumber":441,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":442,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":443,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":444,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":445,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":446,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":447,"author":{"gitId":"marclzh"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous OmniHealth home folder.","lastModifiedDate":"2022-09-27"},{"lineNumber":448,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":449,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":450,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":451,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":452,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":453,"author":{"gitId":"marclzh"},"content":"| Action                   | Format, Examples                                                                                                                                                                        |","lastModifiedDate":"2022-09-20"},{"lineNumber":454,"author":{"gitId":"EiffelLKF"},"content":"|--------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2022-10-27"},{"lineNumber":455,"author":{"gitId":"EiffelLKF"},"content":"| **Help**                 | `help`                                                                                                                                                                                  |","lastModifiedDate":"2022-10-27"},{"lineNumber":456,"author":{"gitId":"EiffelLKF"},"content":"| **Show Unfiltered List** | `showall`                                                                                                                                                                               |","lastModifiedDate":"2022-10-27"},{"lineNumber":457,"author":{"gitId":"EiffelLKF"},"content":"| **Exit Program**         | `exit`                                                                                                                                                                                  |","lastModifiedDate":"2022-10-27"},{"lineNumber":458,"author":{"gitId":"EiffelLKF"},"content":"| **Add Patient**          | `add n/NAME b/BIRTHDATE p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]â€¦â€‹` \u003cbr\u003e e.g., `add n/James Ho b/12-12-2000 p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/DustAllergy` |","lastModifiedDate":"2022-10-27"},{"lineNumber":459,"author":{"gitId":"EiffelLKF"},"content":"| **Delete Patient**       | `delete INDEX`\u003cbr\u003e e.g., `delete 3`                                                                                                                                                     |","lastModifiedDate":"2022-10-27"},{"lineNumber":460,"author":{"gitId":"EiffelLKF"},"content":"| **List Patients**        | `list`                                                                                                                                                                                  |","lastModifiedDate":"2022-10-27"},{"lineNumber":461,"author":{"gitId":"EiffelLKF"},"content":"| **Edit Patient**         | `edit INDEX [n/NAME] [b/BIRTHDATE] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]â€¦â€‹`\u003cbr\u003e e.g.,`edit 2 n/James Lee e/jameslee@example.com`                                               |","lastModifiedDate":"2022-10-27"},{"lineNumber":462,"author":{"gitId":"EiffelLKF"},"content":"| **Find Patients**        | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`                                                                                                                              |","lastModifiedDate":"2022-10-27"},{"lineNumber":463,"author":{"gitId":"EiffelLKF"},"content":"| **Clear Patients**       | `clear`                                                                                                                                                                                 |","lastModifiedDate":"2022-10-27"},{"lineNumber":464,"author":{"gitId":"anthonyhoth"},"content":"| **Add Appointment**      | `appt INDEX d/APPOINTMENT_DATE_TIME` \u003cbr\u003e e.g., `appt 1 d/01-01-2023 1230`                                                                                                              |","lastModifiedDate":"2022-11-01"},{"lineNumber":465,"author":{"gitId":"EiffelLKF"},"content":"| **Clear Appointment**    | `apptcl INDEX`                                                                                                                                                                          |","lastModifiedDate":"2022-10-27"},{"lineNumber":466,"author":{"gitId":"anthonyhoth"},"content":"| **Add Record**           | `radd d/RECORD_DATE_TIME r/RECORD_DETAILS [m/MEDICATION]` \u003cbr\u003e e.g., `e.g., radd 1 d/2022-09-11 r/Patient tested negative for COVID-19`                                                 |","lastModifiedDate":"2022-11-01"},{"lineNumber":467,"author":{"gitId":"anthonyhoth"},"content":"| **Delete Record**        | `rdelete INDEX`                                                                                                                                                                         |","lastModifiedDate":"2022-10-19"},{"lineNumber":468,"author":{"gitId":"EiffelLKF"},"content":"| **List Records**         | `rlist INDEX`                                                                                                                                                                           |","lastModifiedDate":"2022-10-27"},{"lineNumber":469,"author":{"gitId":"anthonyhoth"},"content":"| **Edit Record**          | `redit INDEX [d/RECORD_DATE_TIME] [r/RECORD_DETAILS] [m/MEDICATION]â€¦â€‹`\u003cbr\u003e e.g.,`redit 2 d/12-12-2012 1200 r/Fever m/Paracetamol`                                                       |","lastModifiedDate":"2022-11-01"},{"lineNumber":470,"author":{"gitId":"anthonyhoth"},"content":"| **Find Record**          | `rfind [d/RECORD_DATE] [r/RECORD_DETAILS] [m/MEDICATION] `\u003cbr\u003e e.g., `rfind d/10-2022 r/Covid-19 m/Panadol`                                                                             |","lastModifiedDate":"2022-11-01"},{"lineNumber":471,"author":{"gitId":"EiffelLKF"},"content":"| **Clear Records**        | `rclear`                                                                                                                                                                                |","lastModifiedDate":"2022-10-27"},{"lineNumber":472,"author":{"gitId":"EiffelLKF"},"content":"                                                                                                                                                    |","lastModifiedDate":"2022-10-27"},{"lineNumber":473,"author":{"gitId":"EiffelLKF"},"content":"                                                                 ","lastModifiedDate":"2022-10-27"},{"lineNumber":474,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-26"}],"authorContributionMap":{"anthonyhoth":177,"marclzh":111,"hanwenlai":3,"LJXSean":20,"EiffelLKF":38,"-":125}},{"path":"docs/_sass/minima/_base.scss","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"html {","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  font-size: $base-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Reset some basic elements","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"body, h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"p, blockquote, pre, hr,","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"dl, dd, ol, ul, figure {","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  margin: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  padding: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Basic styling","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"body {","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  font: $base-font-weight #{$base-font-size}/#{$base-line-height} $base-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  background-color: $background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  -webkit-text-size-adjust: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  -webkit-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     -moz-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"       -o-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  font-kerning: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  display: flex;","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  min-height: 100vh;","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  flex-direction: column;","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  overflow-wrap: break-word;","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * Set `margin-bottom` to maintain vertical rhythm","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"p, blockquote, pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"ul, ol, dl, figure,","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"%vertical-rhythm {","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"hr {","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  margin-top: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":" * `main` element","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"main {","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  display: block; /* Default value of `display` of `main` element is \u0027inline\u0027 in IE 11. */","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":" * Images","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"img {","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  max-width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  vertical-align: middle;","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":" * Figures","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"figure \u003e img {","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"figcaption {","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  font-size: $small-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":" * Lists","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"ul, ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  margin-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"li {","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  \u003e ul,","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  \u003e ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":" * Headings","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6 {","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  font-weight: $base-font-weight;","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":" * Links","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"a {","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  color: $link-base-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"  \u0026:visited {","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    color: $link-visited-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  .social-media-list \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    .username {","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":" * Blockquotes","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"blockquote {","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  color: $brand-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  border-left: 4px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"  @include relative-font-size(1.125);","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  font-style: italic;","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  \u003e :last-child {","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"  i, em {","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    font-style: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * Code formatting","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"  font-family: $code-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  font-size: 0.9375em;","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"  border: 1px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"  background-color: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"  padding: 1px 5px;","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"pre {","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"  padding: 8px 12px;","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"  overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"  \u003e code {","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    border: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    padding-right: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    padding-left: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":".highlight {","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"  background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"  @extend %vertical-rhythm;","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"  .highlighter-rouge \u0026 {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":" * Wrapper","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":".wrapper {","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"  max-width: calc(#{$content-width} - (#{$spacing-unit}));","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"  margin-right: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"  margin-left: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"  padding-right: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"  @extend %clearfix;","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"  @media screen and (min-width: $on-large) {","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    max-width: calc(#{$content-width} - (#{$spacing-unit} * 2));","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    padding-right: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    padding-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":" * Clearfix","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"%clearfix:after {","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"  content: \"\";","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"  display: table;","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"  clear: both;","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":" * Icons","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":".orange {","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  color: #f66a0a;","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":".grey {","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"  color: #828282;","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":" * Tables","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"table {","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"  text-align: $table-text-align;","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"  color: $table-text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  border-collapse: collapse;","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"  border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  tr {","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    \u0026:nth-child(even) {","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"      background-color: $table-zebra-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"  th, td {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    padding: ($spacing-unit / 3) ($spacing-unit / 2);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"  th {","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    background-color: $table-header-bg-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    border: 1px solid $table-header-border;","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"  td {","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"  @include media-query($on-laptop) {","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -webkit-overflow-scrolling: touch;","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"            -ms-overflow-style: -ms-autohiding-scrollbar;","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-11"},{"lineNumber":274,"author":{"gitId":"-"},"content":"@media print {","lastModifiedDate":"2021-01-12"},{"lineNumber":275,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-11"},{"lineNumber":276,"author":{"gitId":"-"},"content":"  * Prevents page break from cutting through content when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":277,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-11"},{"lineNumber":278,"author":{"gitId":"-"},"content":"  body {","lastModifiedDate":"2021-01-11"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2021-01-11"},{"lineNumber":280,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":281,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-12"},{"lineNumber":282,"author":{"gitId":"-"},"content":"  * Replaces the top navigation menu with the project name when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":283,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-12"},{"lineNumber":284,"author":{"gitId":"-"},"content":"  .site-header .wrapper {","lastModifiedDate":"2021-01-12"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    display: none;","lastModifiedDate":"2021-01-12"},{"lineNumber":286,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":287,"author":{"gitId":"-"},"content":"  .site-header {","lastModifiedDate":"2021-01-12"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    text-align: center;","lastModifiedDate":"2021-01-12"},{"lineNumber":289,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":290,"author":{"gitId":"-"},"content":"  .site-header:before {","lastModifiedDate":"2021-01-12"},{"lineNumber":291,"author":{"gitId":"marclzh"},"content":"    content: \"OmniHealth\";","lastModifiedDate":"2022-11-01"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    font-size: 32px;","lastModifiedDate":"2021-01-12"},{"lineNumber":293,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":294,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-01-12"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-12"}],"authorContributionMap":{"marclzh":1,"-":294}},{"path":"docs/diagrams/AddRecordCommandSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"EiffelLKF"},"content":"@startuml","lastModifiedDate":"2022-10-21"},{"lineNumber":2,"author":{"gitId":"EiffelLKF"},"content":"!include style.puml","lastModifiedDate":"2022-10-21"},{"lineNumber":3,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":4,"author":{"gitId":"EiffelLKF"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2022-10-21"},{"lineNumber":5,"author":{"gitId":"EiffelLKF"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2022-10-21"},{"lineNumber":6,"author":{"gitId":"EiffelLKF"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2022-10-21"},{"lineNumber":7,"author":{"gitId":"EiffelLKF"},"content":"participant \":AddRecordCommand\" as AddRecordCommand LOGIC_COLOR","lastModifiedDate":"2022-10-21"},{"lineNumber":8,"author":{"gitId":"EiffelLKF"},"content":"end box","lastModifiedDate":"2022-10-21"},{"lineNumber":9,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":10,"author":{"gitId":"EiffelLKF"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2022-10-21"},{"lineNumber":11,"author":{"gitId":"EiffelLKF"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2022-10-21"},{"lineNumber":12,"author":{"gitId":"EiffelLKF"},"content":"participant \":DisplayedPerson\" as DisplayedPerson MODEL_COLOR","lastModifiedDate":"2022-10-21"},{"lineNumber":13,"author":{"gitId":"EiffelLKF"},"content":"participant \":Person\" as Person MODEL_COLOR","lastModifiedDate":"2022-10-21"},{"lineNumber":14,"author":{"gitId":"EiffelLKF"},"content":"end box","lastModifiedDate":"2022-10-21"},{"lineNumber":15,"author":{"gitId":"EiffelLKF"},"content":"[-\u003e LogicManager : execute(\"radd d/...\")","lastModifiedDate":"2022-10-21"},{"lineNumber":16,"author":{"gitId":"EiffelLKF"},"content":"activate LogicManager","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"EiffelLKF"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(\"radd d/...\")","lastModifiedDate":"2022-10-21"},{"lineNumber":19,"author":{"gitId":"EiffelLKF"},"content":"activate AddressBookParser","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":21,"author":{"gitId":"EiffelLKF"},"content":"create AddRecordCommand","lastModifiedDate":"2022-10-21"},{"lineNumber":22,"author":{"gitId":"EiffelLKF"},"content":"AddressBookParser -\u003e AddRecordCommand","lastModifiedDate":"2022-10-21"},{"lineNumber":23,"author":{"gitId":"EiffelLKF"},"content":"activate AddRecordCommand","lastModifiedDate":"2022-10-21"},{"lineNumber":24,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":25,"author":{"gitId":"EiffelLKF"},"content":"AddRecordCommand --\u003e AddressBookParser","lastModifiedDate":"2022-10-21"},{"lineNumber":26,"author":{"gitId":"EiffelLKF"},"content":"deactivate AddRecordCommand","lastModifiedDate":"2022-10-21"},{"lineNumber":27,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":28,"author":{"gitId":"EiffelLKF"},"content":"AddressBookParser --\u003e LogicManager : u","lastModifiedDate":"2022-10-21"},{"lineNumber":29,"author":{"gitId":"EiffelLKF"},"content":"deactivate AddressBookParser","lastModifiedDate":"2022-10-21"},{"lineNumber":30,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":31,"author":{"gitId":"EiffelLKF"},"content":"LogicManager -\u003e AddRecordCommand : execute()","lastModifiedDate":"2022-10-21"},{"lineNumber":32,"author":{"gitId":"EiffelLKF"},"content":"activate AddRecordCommand","lastModifiedDate":"2022-10-21"},{"lineNumber":33,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":34,"author":{"gitId":"EiffelLKF"},"content":"AddRecordCommand -\u003e Model : addRecord(Record)","lastModifiedDate":"2022-10-21"},{"lineNumber":35,"author":{"gitId":"EiffelLKF"},"content":"activate Model","lastModifiedDate":"2022-10-21"},{"lineNumber":36,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":37,"author":{"gitId":"EiffelLKF"},"content":"Model -\u003e DisplayedPerson : addRecord(Record)","lastModifiedDate":"2022-10-21"},{"lineNumber":38,"author":{"gitId":"EiffelLKF"},"content":"activate DisplayedPerson","lastModifiedDate":"2022-10-21"},{"lineNumber":39,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":40,"author":{"gitId":"EiffelLKF"},"content":"DisplayedPerson -\u003e Person : addRecord(Record)","lastModifiedDate":"2022-10-21"},{"lineNumber":41,"author":{"gitId":"EiffelLKF"},"content":"activate Person","lastModifiedDate":"2022-10-21"},{"lineNumber":42,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":43,"author":{"gitId":"EiffelLKF"},"content":"DisplayedPerson --\u003e Model :","lastModifiedDate":"2022-10-21"},{"lineNumber":44,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":45,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":46,"author":{"gitId":"EiffelLKF"},"content":"Person -\u003e","lastModifiedDate":"2022-10-21"},{"lineNumber":47,"author":{"gitId":"EiffelLKF"},"content":"Person --\u003e DisplayedPerson","lastModifiedDate":"2022-10-21"},{"lineNumber":48,"author":{"gitId":"EiffelLKF"},"content":"deactivate Person","lastModifiedDate":"2022-10-21"},{"lineNumber":49,"author":{"gitId":"EiffelLKF"},"content":"deactivate DisplayedPerson","lastModifiedDate":"2022-10-21"},{"lineNumber":50,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":51,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":52,"author":{"gitId":"EiffelLKF"},"content":"Model --\u003e AddRecordCommand","lastModifiedDate":"2022-10-21"},{"lineNumber":53,"author":{"gitId":"EiffelLKF"},"content":"deactivate Model","lastModifiedDate":"2022-10-21"},{"lineNumber":54,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":55,"author":{"gitId":"EiffelLKF"},"content":"AddRecordCommand --\u003e LogicManager : result","lastModifiedDate":"2022-10-21"},{"lineNumber":56,"author":{"gitId":"EiffelLKF"},"content":"deactivate AddRecordCommand","lastModifiedDate":"2022-10-21"},{"lineNumber":57,"author":{"gitId":"EiffelLKF"},"content":"AddRecordCommand -[hidden]-\u003e LogicManager : result","lastModifiedDate":"2022-10-21"},{"lineNumber":58,"author":{"gitId":"EiffelLKF"},"content":"destroy AddRecordCommand","lastModifiedDate":"2022-10-21"},{"lineNumber":59,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":60,"author":{"gitId":"EiffelLKF"},"content":"[\u003c--LogicManager","lastModifiedDate":"2022-10-21"},{"lineNumber":61,"author":{"gitId":"EiffelLKF"},"content":"deactivate LogicManager","lastModifiedDate":"2022-10-21"},{"lineNumber":62,"author":{"gitId":"EiffelLKF"},"content":"@enduml","lastModifiedDate":"2022-10-21"}],"authorContributionMap":{"EiffelLKF":62}},{"path":"docs/diagrams/ListRecordSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"hanwenlai"},"content":"@startuml","lastModifiedDate":"2022-10-26"},{"lineNumber":2,"author":{"gitId":"hanwenlai"},"content":"!include style.puml","lastModifiedDate":"2022-10-26"},{"lineNumber":3,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":4,"author":{"gitId":"hanwenlai"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2022-10-26"},{"lineNumber":5,"author":{"gitId":"hanwenlai"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2022-10-26"},{"lineNumber":6,"author":{"gitId":"hanwenlai"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2022-10-26"},{"lineNumber":7,"author":{"gitId":"hanwenlai"},"content":"participant \":ListRecordCommandParser\" as ListRecordCommandParser LOGIC_COLOR","lastModifiedDate":"2022-10-26"},{"lineNumber":8,"author":{"gitId":"hanwenlai"},"content":"participant \"r:ListRecordCommand\" as ListRecordCommand LOGIC_COLOR","lastModifiedDate":"2022-10-26"},{"lineNumber":9,"author":{"gitId":"hanwenlai"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2022-10-26"},{"lineNumber":10,"author":{"gitId":"hanwenlai"},"content":"end box","lastModifiedDate":"2022-10-26"},{"lineNumber":11,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":12,"author":{"gitId":"hanwenlai"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2022-10-26"},{"lineNumber":13,"author":{"gitId":"hanwenlai"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2022-10-26"},{"lineNumber":14,"author":{"gitId":"hanwenlai"},"content":"end box","lastModifiedDate":"2022-10-26"},{"lineNumber":15,"author":{"gitId":"hanwenlai"},"content":"[-\u003e LogicManager : execute(\"rlist 1\")","lastModifiedDate":"2022-10-26"},{"lineNumber":16,"author":{"gitId":"hanwenlai"},"content":"activate LogicManager","lastModifiedDate":"2022-10-26"},{"lineNumber":17,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":18,"author":{"gitId":"hanwenlai"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(\"rlist 1\")","lastModifiedDate":"2022-10-26"},{"lineNumber":19,"author":{"gitId":"hanwenlai"},"content":"activate AddressBookParser","lastModifiedDate":"2022-10-26"},{"lineNumber":20,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":21,"author":{"gitId":"hanwenlai"},"content":"create ListRecordCommandParser","lastModifiedDate":"2022-10-26"},{"lineNumber":22,"author":{"gitId":"hanwenlai"},"content":"AddressBookParser -\u003e ListRecordCommandParser","lastModifiedDate":"2022-10-26"},{"lineNumber":23,"author":{"gitId":"hanwenlai"},"content":"activate ListRecordCommandParser","lastModifiedDate":"2022-10-26"},{"lineNumber":24,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":25,"author":{"gitId":"hanwenlai"},"content":"ListRecordCommandParser --\u003e AddressBookParser","lastModifiedDate":"2022-10-26"},{"lineNumber":26,"author":{"gitId":"hanwenlai"},"content":"deactivate ListRecordCommandParser","lastModifiedDate":"2022-10-26"},{"lineNumber":27,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":28,"author":{"gitId":"hanwenlai"},"content":"AddressBookParser -\u003e ListRecordCommandParser : parse(\"1\")","lastModifiedDate":"2022-10-26"},{"lineNumber":29,"author":{"gitId":"hanwenlai"},"content":"activate ListRecordCommandParser","lastModifiedDate":"2022-10-26"},{"lineNumber":30,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":31,"author":{"gitId":"hanwenlai"},"content":"create ListRecordCommand","lastModifiedDate":"2022-10-26"},{"lineNumber":32,"author":{"gitId":"hanwenlai"},"content":"ListRecordCommandParser -\u003e ListRecordCommand","lastModifiedDate":"2022-10-26"},{"lineNumber":33,"author":{"gitId":"hanwenlai"},"content":"activate ListRecordCommand","lastModifiedDate":"2022-10-26"},{"lineNumber":34,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":35,"author":{"gitId":"hanwenlai"},"content":"ListRecordCommand --\u003e ListRecordCommandParser : r","lastModifiedDate":"2022-10-26"},{"lineNumber":36,"author":{"gitId":"hanwenlai"},"content":"deactivate ListRecordCommand","lastModifiedDate":"2022-10-26"},{"lineNumber":37,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":38,"author":{"gitId":"hanwenlai"},"content":"ListRecordCommandParser --\u003e AddressBookParser : r","lastModifiedDate":"2022-10-26"},{"lineNumber":39,"author":{"gitId":"hanwenlai"},"content":"deactivate ListRecordCommandParser","lastModifiedDate":"2022-10-26"},{"lineNumber":40,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":41,"author":{"gitId":"hanwenlai"},"content":"ListRecordCommandParser -[hidden]-\u003e AddressBookParser","lastModifiedDate":"2022-10-26"},{"lineNumber":42,"author":{"gitId":"hanwenlai"},"content":"destroy ListRecordCommandParser","lastModifiedDate":"2022-10-26"},{"lineNumber":43,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":44,"author":{"gitId":"hanwenlai"},"content":"AddressBookParser --\u003e LogicManager : r","lastModifiedDate":"2022-10-26"},{"lineNumber":45,"author":{"gitId":"hanwenlai"},"content":"deactivate AddressBookParser","lastModifiedDate":"2022-10-26"},{"lineNumber":46,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":47,"author":{"gitId":"hanwenlai"},"content":"LogicManager -\u003e ListRecordCommand : execute()","lastModifiedDate":"2022-10-26"},{"lineNumber":48,"author":{"gitId":"hanwenlai"},"content":"activate ListRecordCommand","lastModifiedDate":"2022-10-26"},{"lineNumber":49,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":50,"author":{"gitId":"hanwenlai"},"content":"ListRecordCommand -\u003e Model : setPersonWithRecords()","lastModifiedDate":"2022-10-26"},{"lineNumber":51,"author":{"gitId":"hanwenlai"},"content":"ListRecordCommand -\u003e Model : setRecordListDisplayed()","lastModifiedDate":"2022-10-26"},{"lineNumber":52,"author":{"gitId":"hanwenlai"},"content":"ListRecordCommand -\u003e Model : setFilteredRecordList()","lastModifiedDate":"2022-10-26"},{"lineNumber":53,"author":{"gitId":"hanwenlai"},"content":"ListRecordCommand -\u003e Model : updateFilteredRecordList()","lastModifiedDate":"2022-10-26"},{"lineNumber":54,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":55,"author":{"gitId":"hanwenlai"},"content":"create CommandResult","lastModifiedDate":"2022-10-26"},{"lineNumber":56,"author":{"gitId":"hanwenlai"},"content":"ListRecordCommand -\u003e CommandResult","lastModifiedDate":"2022-10-26"},{"lineNumber":57,"author":{"gitId":"hanwenlai"},"content":"activate CommandResult","lastModifiedDate":"2022-10-26"},{"lineNumber":58,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":59,"author":{"gitId":"hanwenlai"},"content":"CommandResult --\u003e ListRecordCommand","lastModifiedDate":"2022-10-26"},{"lineNumber":60,"author":{"gitId":"hanwenlai"},"content":"deactivate CommandResult","lastModifiedDate":"2022-10-26"},{"lineNumber":61,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":62,"author":{"gitId":"hanwenlai"},"content":"ListRecordCommand --\u003e LogicManager : result","lastModifiedDate":"2022-10-26"},{"lineNumber":63,"author":{"gitId":"hanwenlai"},"content":"deactivate ListRecordCommand","lastModifiedDate":"2022-10-26"},{"lineNumber":64,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":65,"author":{"gitId":"hanwenlai"},"content":"[\u003c--LogicManager","lastModifiedDate":"2022-10-26"},{"lineNumber":66,"author":{"gitId":"hanwenlai"},"content":"deactivate LogicManager","lastModifiedDate":"2022-10-26"},{"lineNumber":67,"author":{"gitId":"hanwenlai"},"content":"@enduml","lastModifiedDate":"2022-10-26"}],"authorContributionMap":{"hanwenlai":67}},{"path":"docs/diagrams/ModelClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Package Model \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nReadOnlyAddressBook\" as ReadOnlyAddressBook","lastModifiedDate":"2022-01-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nReadOnlyUserPrefs\" as ReadOnlyUserPrefs","lastModifiedDate":"2022-01-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nModel\" as Model","lastModifiedDate":"2022-01-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class AddressBook","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class ModelManager","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class UserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class UniquePersonList","lastModifiedDate":"2021-07-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Class Person","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Class Address","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"LJXSean"},"content":"Class Appointment","lastModifiedDate":"2022-11-01"},{"lineNumber":19,"author":{"gitId":"LJXSean"},"content":"Class Birthdate","lastModifiedDate":"2022-11-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Class Email","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Class Name","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Class Phone","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"Class Tag","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"LJXSean"},"content":"Class RecordList","lastModifiedDate":"2022-11-01"},{"lineNumber":26,"author":{"gitId":"LJXSean"},"content":"Class Record","lastModifiedDate":"2022-11-01"},{"lineNumber":27,"author":{"gitId":"LJXSean"},"content":"Class Medication","lastModifiedDate":"2022-11-01"},{"lineNumber":28,"author":{"gitId":"LJXSean"},"content":"Class RecordData","lastModifiedDate":"2022-11-01"},{"lineNumber":29,"author":{"gitId":"LJXSean"},"content":"Class RecordDate","lastModifiedDate":"2022-11-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"AddressBook .up.|\u003e ReadOnlyAddressBook","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"ModelManager .up.|\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"Model .right.\u003e ReadOnlyUserPrefs","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"Model .left.\u003e ReadOnlyAddressBook","lastModifiedDate":"2021-07-31"},{"lineNumber":40,"author":{"gitId":"-"},"content":"ModelManager -left-\u003e \"1\" AddressBook","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"ModelManager -right-\u003e \"1\" UserPrefs","lastModifiedDate":"2021-07-31"},{"lineNumber":42,"author":{"gitId":"-"},"content":"UserPrefs .up.|\u003e ReadOnlyUserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"AddressBook *--\u003e \"1\" UniquePersonList","lastModifiedDate":"2019-07-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"UniquePersonList --\u003e \"~* all\" Person","lastModifiedDate":"2021-07-31"},{"lineNumber":46,"author":{"gitId":"LJXSean"},"content":"Person *--\u003e Birthdate","lastModifiedDate":"2022-11-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"Person *--\u003e Name","lastModifiedDate":"2019-07-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"Person *--\u003e Phone","lastModifiedDate":"2019-07-03"},{"lineNumber":49,"author":{"gitId":"-"},"content":"Person *--\u003e Email","lastModifiedDate":"2019-07-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"Person *--\u003e Address","lastModifiedDate":"2019-07-03"},{"lineNumber":51,"author":{"gitId":"LJXSean"},"content":"Person *--\u003e Appointment","lastModifiedDate":"2022-11-01"},{"lineNumber":52,"author":{"gitId":"LJXSean"},"content":"Person *--\u003e RecordList","lastModifiedDate":"2022-11-01"},{"lineNumber":53,"author":{"gitId":"-"},"content":"Person *--\u003e \"*\" Tag","lastModifiedDate":"2019-07-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":55,"author":{"gitId":"LJXSean"},"content":"Name -[hidden]right-\u003e Birthdate","lastModifiedDate":"2022-11-01"},{"lineNumber":56,"author":{"gitId":"-"},"content":"Phone -[hidden]right-\u003e Address","lastModifiedDate":"2019-07-03"},{"lineNumber":57,"author":{"gitId":"LJXSean"},"content":"Address -[hidden]right-\u003e RecordList","lastModifiedDate":"2022-11-01"},{"lineNumber":58,"author":{"gitId":"LJXSean"},"content":"RecordList -[hidden]right-\u003e Email","lastModifiedDate":"2022-11-01"},{"lineNumber":59,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":60,"author":{"gitId":"LJXSean"},"content":"RecordList --\u003e \"~* all\" Record","lastModifiedDate":"2022-11-01"},{"lineNumber":61,"author":{"gitId":"LJXSean"},"content":"Record *--\u003e Medication","lastModifiedDate":"2022-11-01"},{"lineNumber":62,"author":{"gitId":"LJXSean"},"content":"Record *--\u003e RecordDate","lastModifiedDate":"2022-11-01"},{"lineNumber":63,"author":{"gitId":"LJXSean"},"content":"Record *--\u003e RecordData","lastModifiedDate":"2022-11-01"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"ModelManager --\u003e\"~* filtered\" Person","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"LJXSean"},"content":"ModelManager --\u003e\"~* filtered\" Record","lastModifiedDate":"2022-11-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"LJXSean":19,"-":48}},{"path":"docs/diagrams/StorageClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"package Storage{","lastModifiedDate":"2021-07-31"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":9,"author":{"gitId":"-"},"content":"package \"UserPrefs Storage\" #F4F6F6{","lastModifiedDate":"2021-07-31"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nUserPrefsStorage\" as UserPrefsStorage","lastModifiedDate":"2022-01-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class JsonUserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nStorage\" as Storage","lastModifiedDate":"2022-01-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class StorageManager","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"package \"AddressBook Storage\" #F4F6F6{","lastModifiedDate":"2021-07-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nAddressBookStorage\" as AddressBookStorage","lastModifiedDate":"2022-01-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Class JsonAddressBookStorage","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Class JsonSerializableAddressBook","lastModifiedDate":"2021-07-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Class JsonAdaptedPerson","lastModifiedDate":"2021-07-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Class JsonAdaptedTag","lastModifiedDate":"2021-07-31"},{"lineNumber":23,"author":{"gitId":"LJXSean"},"content":"Class JsonAdaptedRecord","lastModifiedDate":"2022-11-01"},{"lineNumber":24,"author":{"gitId":"LJXSean"},"content":"Class JsonAdaptedMedication","lastModifiedDate":"2022-11-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Storage","lastModifiedDate":"2021-07-31"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"StorageManager .up.|\u003e Storage","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"StorageManager -up-\u003e \"1\" UserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"StorageManager -up-\u003e \"1\" AddressBookStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"Storage -left-|\u003e UserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"Storage -right-|\u003e AddressBookStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"JsonUserPrefsStorage .up.|\u003e UserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":40,"author":{"gitId":"-"},"content":"JsonAddressBookStorage .up.|\u003e AddressBookStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"JsonAddressBookStorage ..\u003e JsonSerializableAddressBook","lastModifiedDate":"2021-07-31"},{"lineNumber":42,"author":{"gitId":"-"},"content":"JsonSerializableAddressBook --\u003e \"*\" JsonAdaptedPerson","lastModifiedDate":"2021-07-31"},{"lineNumber":43,"author":{"gitId":"-"},"content":"JsonAdaptedPerson --\u003e \"*\" JsonAdaptedTag","lastModifiedDate":"2021-07-31"},{"lineNumber":44,"author":{"gitId":"LJXSean"},"content":"JsonAdaptedPerson --\u003e \"*\" JsonAdaptedRecord","lastModifiedDate":"2022-11-01"},{"lineNumber":45,"author":{"gitId":"LJXSean"},"content":"JsonAdaptedRecord --\u003e \"*\" JsonAdaptedMedication","lastModifiedDate":"2022-11-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":47,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"LJXSean":4,"-":43}},{"path":"docs/diagrams/UiClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor UI_COLOR_T4","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor UI_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"package UI \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nUi\" as Ui","lastModifiedDate":"2022-01-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Class \"{abstract}\\nUiPart\" as UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Class UiManager","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class MainWindow","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class HelpWindow","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class ResultDisplay","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class PersonListPanel","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class PersonCard","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"LJXSean"},"content":"Class RecordListPanel","lastModifiedDate":"2022-11-01"},{"lineNumber":17,"author":{"gitId":"LJXSean"},"content":"Class RecordCard","lastModifiedDate":"2022-11-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Class StatusBarFooter","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Class CommandBox","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"package Model \u003c\u003cRectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"Class HiddenModel #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"package Logic \u003c\u003cRectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Class HiddenLogic #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Ui","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"UiManager .left.|\u003e Ui","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"UiManager -down-\u003e \"1\" MainWindow","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e  \"1\" CommandBox","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e \"1\" ResultDisplay","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e \"1\" PersonListPanel","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"LJXSean"},"content":"MainWindow *-down-\u003e \"1\" RecordListPanel","lastModifiedDate":"2022-11-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e \"1\" StatusBarFooter","lastModifiedDate":"2021-07-31"},{"lineNumber":40,"author":{"gitId":"-"},"content":"MainWindow --\u003e \"0..1\" HelpWindow","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":42,"author":{"gitId":"-"},"content":"PersonListPanel -down-\u003e \"*\" PersonCard","lastModifiedDate":"2021-07-31"},{"lineNumber":43,"author":{"gitId":"LJXSean"},"content":"RecordListPanel -down-\u003e \"*\" RecordCard","lastModifiedDate":"2022-11-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"MainWindow -left-|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"ResultDisplay --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"CommandBox --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":49,"author":{"gitId":"-"},"content":"PersonListPanel --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"PersonCard --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":51,"author":{"gitId":"LJXSean"},"content":"RecordListPanel --|\u003e UiPart","lastModifiedDate":"2022-11-01"},{"lineNumber":52,"author":{"gitId":"LJXSean"},"content":"RecordCard --|\u003e UiPart","lastModifiedDate":"2022-11-01"},{"lineNumber":53,"author":{"gitId":"-"},"content":"StatusBarFooter --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"HelpWindow --|\u003e UiPart","lastModifiedDate":"2021-07-31"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":56,"author":{"gitId":"-"},"content":"PersonCard ..\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":57,"author":{"gitId":"LJXSean"},"content":"RecordCard ..\u003e Model","lastModifiedDate":"2022-11-01"},{"lineNumber":58,"author":{"gitId":"-"},"content":"UiManager -right-\u003e Logic","lastModifiedDate":"2019-07-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"MainWindow -left-\u003e Logic","lastModifiedDate":"2019-07-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"PersonListPanel -[hidden]left- HelpWindow","lastModifiedDate":"2019-07-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"HelpWindow -[hidden]left- CommandBox","lastModifiedDate":"2019-07-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"CommandBox -[hidden]left- ResultDisplay","lastModifiedDate":"2019-07-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"ResultDisplay -[hidden]left- StatusBarFooter","lastModifiedDate":"2019-07-30"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"MainWindow -[hidden]-|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"LJXSean":7,"-":60}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"anthonyhoth"},"content":"title: OmniHealth","lastModifiedDate":"2022-09-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"[![CI Status](https://github.com/AY2223S1-CS2103T-T14-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2223S1-CS2103T-T14-3/tp/actions)","lastModifiedDate":"2022-09-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"[![codecov](https://codecov.io/gh/AY2223S1-CS2103T-T14-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2223S1-CS2103T-T14-3/tp)","lastModifiedDate":"2022-09-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"anthonyhoth"},"content":"OmniHealth is a **desktop app for private clinic practitioners to quickly store, edit and search for patients and their records**. It is optimised for use via a **Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI).","lastModifiedDate":"2022-09-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"anthonyhoth"},"content":"If you can type fast, OmniHealth can get your patient management tasks done faster than traditional GUI apps! ðŸ’Šâœ¨","lastModifiedDate":"2022-09-27"},{"lineNumber":14,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":15,"author":{"gitId":"anthonyhoth"},"content":"* For the detailed documentation of this project, see the **[OmniHealth Website](https://ay2223s1-cs2103t-t14-3.github.io/tp/)**.","lastModifiedDate":"2022-09-27"},{"lineNumber":16,"author":{"gitId":"anthonyhoth"},"content":"* This project is built on the AddressBook-Level3 project, find out more on [se-education.org](https://se-education.org#https://se-education.org/#contributing) for more info.","lastModifiedDate":"2022-09-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"**Acknowledgements**","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"anthonyhoth":6,"-":15}},{"path":"docs/team/anthonyhoth.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"anthonyhoth"},"content":"---","lastModifiedDate":"2022-09-27"},{"lineNumber":2,"author":{"gitId":"anthonyhoth"},"content":"layout: page","lastModifiedDate":"2022-09-27"},{"lineNumber":3,"author":{"gitId":"anthonyhoth"},"content":"title: Anthony\u0027s Project Portfolio Page","lastModifiedDate":"2022-09-27"},{"lineNumber":4,"author":{"gitId":"anthonyhoth"},"content":"---","lastModifiedDate":"2022-09-27"},{"lineNumber":5,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":6,"author":{"gitId":"anthonyhoth"},"content":"### Project: OmniHealth","lastModifiedDate":"2022-09-27"},{"lineNumber":7,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":8,"author":{"gitId":"anthonyhoth"},"content":"## Overview","lastModifiedDate":"2022-09-27"},{"lineNumber":9,"author":{"gitId":"anthonyhoth"},"content":"OmniHealth aims to provide doctors with a place to store and centrally manage their patientsâ€™ information (eg. medical records, contact information), as well as allowing doctors to schedule appointments, send appointment reminders and other notifications to patients using their stored contact information.","lastModifiedDate":"2022-09-27"},{"lineNumber":10,"author":{"gitId":"anthonyhoth"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-09-27"},{"lineNumber":11,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":12,"author":{"gitId":"anthonyhoth"},"content":"## Summary of Contributions","lastModifiedDate":"2022-09-27"},{"lineNumber":13,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":14,"author":{"gitId":"anthonyhoth"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-09-27"},{"lineNumber":15,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":16,"author":{"gitId":"anthonyhoth"},"content":"* **Code contributed**: [anthonyhoth\u0027s tP Dashboard](https://nus-cs2103-ay2223s1.github.io/tp-dashboard/?search\u003danthonyhoth\u0026breakdown\u003dtrue\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2022-09-16\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)","lastModifiedDate":"2022-11-01"},{"lineNumber":17,"author":{"gitId":"anthonyhoth"},"content":"* **Enhancements implemented**:","lastModifiedDate":"2022-11-01"},{"lineNumber":18,"author":{"gitId":"anthonyhoth"},"content":"  * Added delete record functionality.","lastModifiedDate":"2022-11-01"},{"lineNumber":19,"author":{"gitId":"anthonyhoth"},"content":"  * Added edit record functionality.","lastModifiedDate":"2022-11-01"},{"lineNumber":20,"author":{"gitId":"anthonyhoth"},"content":"  * Changed the UI theme of the app.","lastModifiedDate":"2022-11-01"},{"lineNumber":21,"author":{"gitId":"anthonyhoth"},"content":"  * Modified the warning message and duplicate detection of patients.","lastModifiedDate":"2022-11-01"},{"lineNumber":22,"author":{"gitId":"anthonyhoth"},"content":"* **Project management**: to be added soon","lastModifiedDate":"2022-09-27"},{"lineNumber":23,"author":{"gitId":"anthonyhoth"},"content":"* **Documentation**:","lastModifiedDate":"2022-11-01"},{"lineNumber":24,"author":{"gitId":"anthonyhoth"},"content":"  * User Guide: to be added soon","lastModifiedDate":"2022-09-27"},{"lineNumber":25,"author":{"gitId":"anthonyhoth"},"content":"  * Developer Guide: to be added soon","lastModifiedDate":"2022-09-27"},{"lineNumber":26,"author":{"gitId":"anthonyhoth"},"content":"* **Community**:","lastModifiedDate":"2022-09-27"},{"lineNumber":27,"author":{"gitId":"anthonyhoth"},"content":"* **Contribution to team-based tasks**:","lastModifiedDate":"2022-11-01"},{"lineNumber":28,"author":{"gitId":"anthonyhoth"},"content":"  * Maintaining issue and PR tags","lastModifiedDate":"2022-11-01"},{"lineNumber":29,"author":{"gitId":"anthonyhoth"},"content":"* **Review/mentoring contributions**:","lastModifiedDate":"2022-11-01"},{"lineNumber":30,"author":{"gitId":"anthonyhoth"},"content":"  * Reviewed teammates\u0027 PRs for errors/improvements.","lastModifiedDate":"2022-11-01"}],"authorContributionMap":{"anthonyhoth":30}},{"path":"docs/team/eiffellkf.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"EiffelLKF"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":2,"author":{"gitId":"EiffelLKF"},"content":"layout: page","lastModifiedDate":"2022-09-20"},{"lineNumber":3,"author":{"gitId":"EiffelLKF"},"content":"title: Eiffel Leo\u0027s Project Portfolio Page","lastModifiedDate":"2022-09-20"},{"lineNumber":4,"author":{"gitId":"EiffelLKF"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":5,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":6,"author":{"gitId":"EiffelLKF"},"content":"### Project: OmniHealth","lastModifiedDate":"2022-09-20"},{"lineNumber":7,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":8,"author":{"gitId":"EiffelLKF"},"content":"## Overview","lastModifiedDate":"2022-09-20"},{"lineNumber":9,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":10,"author":{"gitId":"EiffelLKF"},"content":"to be added soon","lastModifiedDate":"2022-09-20"},{"lineNumber":11,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":12,"author":{"gitId":"EiffelLKF"},"content":"## Summary of Contributions","lastModifiedDate":"2022-09-20"},{"lineNumber":13,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":14,"author":{"gitId":"EiffelLKF"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-09-20"},{"lineNumber":15,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":16,"author":{"gitId":"EiffelLKF"},"content":"* **Code contributed**: to be added soon","lastModifiedDate":"2022-09-20"},{"lineNumber":17,"author":{"gitId":"EiffelLKF"},"content":"* **Enhancements implemented**: to be added soon","lastModifiedDate":"2022-09-20"},{"lineNumber":18,"author":{"gitId":"EiffelLKF"},"content":"* **Project management**: to be added soon","lastModifiedDate":"2022-09-20"},{"lineNumber":19,"author":{"gitId":"EiffelLKF"},"content":"* **Documentation**: to be added soon","lastModifiedDate":"2022-09-20"},{"lineNumber":20,"author":{"gitId":"EiffelLKF"},"content":"  * User Guide: to be added soon","lastModifiedDate":"2022-09-20"},{"lineNumber":21,"author":{"gitId":"EiffelLKF"},"content":"  * Developer Guide: to be added soon","lastModifiedDate":"2022-09-20"},{"lineNumber":22,"author":{"gitId":"EiffelLKF"},"content":"* **Community**:","lastModifiedDate":"2022-09-20"},{"lineNumber":23,"author":{"gitId":"EiffelLKF"},"content":"  * Contribution to team-based tasks: to be added soon","lastModifiedDate":"2022-09-20"},{"lineNumber":24,"author":{"gitId":"EiffelLKF"},"content":"  * Review/mentoring contributions: to be added soon","lastModifiedDate":"2022-09-20"},{"lineNumber":25,"author":{"gitId":"EiffelLKF"},"content":"* **Tools**: to be added soon","lastModifiedDate":"2022-09-20"},{"lineNumber":26,"author":{"gitId":"EiffelLKF"},"content":"* **Contributions beyond the project team** :to be added soon","lastModifiedDate":"2022-09-20"}],"authorContributionMap":{"EiffelLKF":26}},{"path":"docs/team/hanwenlai.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"hanwenlai"},"content":"---","lastModifiedDate":"2022-09-27"},{"lineNumber":2,"author":{"gitId":"hanwenlai"},"content":"layout: page","lastModifiedDate":"2022-09-27"},{"lineNumber":3,"author":{"gitId":"hanwenlai"},"content":"title: Lai Han Wen\u0027s Project Portfolio Page","lastModifiedDate":"2022-09-27"},{"lineNumber":4,"author":{"gitId":"hanwenlai"},"content":"---","lastModifiedDate":"2022-09-27"},{"lineNumber":5,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":6,"author":{"gitId":"hanwenlai"},"content":"### Project: OmniHealth","lastModifiedDate":"2022-09-27"},{"lineNumber":7,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":8,"author":{"gitId":"hanwenlai"},"content":"## Overview","lastModifiedDate":"2022-09-27"},{"lineNumber":9,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":10,"author":{"gitId":"hanwenlai"},"content":"OmniHealth aims to provide doctors with a place to store and centrally manage their patientsâ€™ information (eg. medical records, contact information), as well as allowing doctors to schedule appointments, send appointment reminders and other notifications to patients using their stored contact information.","lastModifiedDate":"2022-09-27"},{"lineNumber":11,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":12,"author":{"gitId":"hanwenlai"},"content":"## Summary of Contributions","lastModifiedDate":"2022-09-27"},{"lineNumber":13,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":14,"author":{"gitId":"hanwenlai"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-09-27"},{"lineNumber":15,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":16,"author":{"gitId":"hanwenlai"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2223s1.github.io/tp-dashboard/?search\u003dhanwenlai\u0026breakdown\u003dtrue)","lastModifiedDate":"2022-09-27"},{"lineNumber":17,"author":{"gitId":"hanwenlai"},"content":"* **Enhancements implemented**: to be added soon","lastModifiedDate":"2022-09-27"},{"lineNumber":18,"author":{"gitId":"hanwenlai"},"content":"* **Project management**: to be added soon","lastModifiedDate":"2022-09-27"},{"lineNumber":19,"author":{"gitId":"hanwenlai"},"content":"* **Documentation**","lastModifiedDate":"2022-09-27"},{"lineNumber":20,"author":{"gitId":"hanwenlai"},"content":"  * User Guide:","lastModifiedDate":"2022-09-27"},{"lineNumber":21,"author":{"gitId":"hanwenlai"},"content":"    * Added documentation for the features `list patients` and `list records`.","lastModifiedDate":"2022-09-27"},{"lineNumber":22,"author":{"gitId":"hanwenlai"},"content":"  * Developer Guide:","lastModifiedDate":"2022-09-27"},{"lineNumber":23,"author":{"gitId":"hanwenlai"},"content":"    * Added implementation details of the `list patients` and `list records` features.","lastModifiedDate":"2022-09-27"},{"lineNumber":24,"author":{"gitId":"hanwenlai"},"content":"* **Community**:","lastModifiedDate":"2022-09-27"},{"lineNumber":25,"author":{"gitId":"hanwenlai"},"content":"  * Contribution to team-based tasks: to be added soon","lastModifiedDate":"2022-09-27"},{"lineNumber":26,"author":{"gitId":"hanwenlai"},"content":"  * Review/mentoring contributions: to be added soon","lastModifiedDate":"2022-09-27"},{"lineNumber":27,"author":{"gitId":"hanwenlai"},"content":"* **Tools**: to be added soon","lastModifiedDate":"2022-09-27"},{"lineNumber":28,"author":{"gitId":"hanwenlai"},"content":"* **Contributions beyond the project team** :to be added soon","lastModifiedDate":"2022-09-27"}],"authorContributionMap":{"hanwenlai":28}},{"path":"docs/team/ljxsean.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"LJXSean"},"content":"---","lastModifiedDate":"2022-09-21"},{"lineNumber":2,"author":{"gitId":"LJXSean"},"content":"layout: page","lastModifiedDate":"2022-09-21"},{"lineNumber":3,"author":{"gitId":"LJXSean"},"content":"title: Sean Lam\u0027s Project Portfolio Page","lastModifiedDate":"2022-09-21"},{"lineNumber":4,"author":{"gitId":"LJXSean"},"content":"---","lastModifiedDate":"2022-09-21"},{"lineNumber":5,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":6,"author":{"gitId":"LJXSean"},"content":"### Project: Omnihealth","lastModifiedDate":"2022-09-21"},{"lineNumber":7,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":8,"author":{"gitId":"LJXSean"},"content":"OmniHealth aims to provide doctors with a place to store and centrally manage their patientsâ€™ information (eg. medical records, contact information), as well as allowing doctors to schedule appointments, send appointment reminders and other notifications to patients using their stored contact information.","lastModifiedDate":"2022-09-21"},{"lineNumber":9,"author":{"gitId":"LJXSean"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-09-21"},{"lineNumber":10,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":11,"author":{"gitId":"LJXSean"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2223s1.github.io/tp-dashboard/?search\u003dljxsean\u0026breakdown\u003dtrue)","lastModifiedDate":"2022-09-21"},{"lineNumber":12,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":13,"author":{"gitId":"LJXSean"},"content":"* **Project management**:","lastModifiedDate":"2022-09-21"},{"lineNumber":14,"author":{"gitId":"LJXSean"},"content":"    * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2022-09-21"},{"lineNumber":15,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":16,"author":{"gitId":"LJXSean"},"content":"* **Enhancements to existing features**: To be added","lastModifiedDate":"2022-09-21"},{"lineNumber":17,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":18,"author":{"gitId":"LJXSean"},"content":"* **Documentation**:","lastModifiedDate":"2022-09-21"},{"lineNumber":19,"author":{"gitId":"LJXSean"},"content":"    * User Guide:","lastModifiedDate":"2022-09-21"},{"lineNumber":20,"author":{"gitId":"LJXSean"},"content":"        * Added documentation for the features `clear` and `help`","lastModifiedDate":"2022-09-21"},{"lineNumber":21,"author":{"gitId":"LJXSean"},"content":"    * Developer Guide:","lastModifiedDate":"2022-09-21"},{"lineNumber":22,"author":{"gitId":"LJXSean"},"content":"        * Added implementation details of the `clear` and `help` feature.","lastModifiedDate":"2022-09-21"},{"lineNumber":23,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":24,"author":{"gitId":"LJXSean"},"content":"* **Community**:","lastModifiedDate":"2022-09-21"},{"lineNumber":25,"author":{"gitId":"LJXSean"},"content":"    * PRs reviewed (with non-trivial review comments): to be added","lastModifiedDate":"2022-09-21"},{"lineNumber":26,"author":{"gitId":"LJXSean"},"content":"    * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2022-09-21"},{"lineNumber":27,"author":{"gitId":"LJXSean"},"content":"    * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2022-09-21"},{"lineNumber":28,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":29,"author":{"gitId":"LJXSean"},"content":"* **Tools**: To be added soon","lastModifiedDate":"2022-09-21"},{"lineNumber":30,"author":{"gitId":"LJXSean"},"content":"* **Contributions beyond project team**: To be added soon","lastModifiedDate":"2022-09-21"}],"authorContributionMap":{"LJXSean":30}},{"path":"docs/team/marclzh.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"layout: page","lastModifiedDate":"2022-09-20"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"title: Marcus Lee\u0027s Project Portfolio Page","lastModifiedDate":"2022-09-20"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"## Project: OmniHealth","lastModifiedDate":"2022-09-20"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"### Overview","lastModifiedDate":"2022-09-20"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"OmniHealth aims to provide doctors with a place to store and centrally manage their patientsâ€™ information (eg. medical records, contact information), as well as allowing doctors to schedule appointments, send appointment reminders and other notifications to patients using their stored contact information.","lastModifiedDate":"2022-09-20"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-09-20"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"* **New Feature**: Added the ability to search for relevant keywords in records.","lastModifiedDate":"2022-09-20"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"    * What it does:","lastModifiedDate":"2022-09-20"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"    * Justification:","lastModifiedDate":"2022-09-20"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"    * Highlights:","lastModifiedDate":"2022-09-20"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"    * Credits: *{}*","lastModifiedDate":"2022-09-20"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2022-09-20"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"* **Project management**:","lastModifiedDate":"2022-09-20"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"    * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2022-09-20"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2022-09-20"},{"lineNumber":24,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":25,"author":{"gitId":"marclzh"},"content":"* **Documentation**:","lastModifiedDate":"2022-09-20"},{"lineNumber":26,"author":{"gitId":"marclzh"},"content":"    * User Guide:","lastModifiedDate":"2022-09-20"},{"lineNumber":27,"author":{"gitId":"marclzh"},"content":"        * Added documentation for the features `find record` [\\#72]()","lastModifiedDate":"2022-09-20"},{"lineNumber":28,"author":{"gitId":"marclzh"},"content":"    * Developer Guide:","lastModifiedDate":"2022-09-20"},{"lineNumber":29,"author":{"gitId":"marclzh"},"content":"        * Added implementation details of the `find record` feature.","lastModifiedDate":"2022-09-20"},{"lineNumber":30,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":31,"author":{"gitId":"marclzh"},"content":"* **Community**:","lastModifiedDate":"2022-09-20"},{"lineNumber":32,"author":{"gitId":"marclzh"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2022-09-20"},{"lineNumber":33,"author":{"gitId":"marclzh"},"content":"    * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2022-09-20"},{"lineNumber":34,"author":{"gitId":"marclzh"},"content":"    * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2022-09-20"},{"lineNumber":35,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":36,"author":{"gitId":"marclzh"},"content":"* **Tools**:","lastModifiedDate":"2022-09-20"},{"lineNumber":37,"author":{"gitId":"marclzh"},"content":"    * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2022-09-20"},{"lineNumber":38,"author":{"gitId":"marclzh"},"content":"    * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2022-09-20"},{"lineNumber":39,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-20"}],"authorContributionMap":{"marclzh":39}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;","lastModifiedDate":"2016-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-01-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-01-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-01-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-01-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-01-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2016-12-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.storage.AddressBookStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"EiffelLKF"},"content":"    public static final Version VERSION \u003d new Version(1, 3, 0, true);","lastModifiedDate":"2022-10-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2017-02-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book.","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook initialData;","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");","lastModifiedDate":"2016-12-20"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);","lastModifiedDate":"2016-12-20"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-01"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-10-12"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");","lastModifiedDate":"2017-05-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");","lastModifiedDate":"2017-05-22"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-10-12"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);","lastModifiedDate":"2016-09-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"EiffelLKF":1,"-":182}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"anthonyhoth"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The patient index provided is invalid\";","lastModifiedDate":"2022-10-25"},{"lineNumber":11,"author":{"gitId":"anthonyhoth"},"content":"    public static final String MESSAGE_INVALID_RECORD_DISPLAYED_INDEX \u003d \"The record index provided is invalid\";","lastModifiedDate":"2022-10-12"},{"lineNumber":12,"author":{"gitId":"anthonyhoth"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d patients listed!\";","lastModifiedDate":"2022-10-25"},{"lineNumber":13,"author":{"gitId":"LJXSean"},"content":"    public static final String MESSAGE_RECORDS_LISTED_OVERVIEW \u003d \"%1$d records listed!\";","lastModifiedDate":"2022-10-08"},{"lineNumber":14,"author":{"gitId":"EiffelLKF"},"content":"    public static final String MESSAGE_INVALID_RECORD_DATA_FORMAT \u003d \"Record data cannot be empty!\";","lastModifiedDate":"2022-10-12"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"    public static final String MESSAGE_INVALID_DATE_FORMAT \u003d","lastModifiedDate":"2022-10-04"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"            \"Invalid date format! \\nPlease use the format dd-MM-yyyy HHmm!\";","lastModifiedDate":"2022-10-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"anthonyhoth":3,"marclzh":2,"LJXSean":1,"EiffelLKF":1,"-":10}},{"path":"src/main/java/seedu/address/commons/util/StringUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.StringWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Helper functions for handling strings.","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StringUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}.","lastModifiedDate":"2016-10-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     *   Ignores case, but a full word match is required.","lastModifiedDate":"2016-10-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match","lastModifiedDate":"2016-10-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *       \u003c/pre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param sentence cannot be null","lastModifiedDate":"2016-10-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word","lastModifiedDate":"2016-10-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {","lastModifiedDate":"2016-10-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        requireNonNull(sentence);","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(word);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String preppedWord \u003d word.trim();","lastModifiedDate":"2016-10-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String preppedSentence \u003d sentence;","lastModifiedDate":"2016-10-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");","lastModifiedDate":"2016-10-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return Arrays.stream(wordsInPreppedSentence)","lastModifiedDate":"2018-01-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                .anyMatch(preppedWord::equalsIgnoreCase);","lastModifiedDate":"2018-01-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns a detailed message of the t, including the stack trace.","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static String getDetails(Throwable t) {","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(t);","lastModifiedDate":"2017-05-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        StringWriter sw \u003d new StringWriter();","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer","lastModifiedDate":"2017-06-02"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e","lastModifiedDate":"2017-06-02"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Will return false for any other non-null string input","lastModifiedDate":"2017-06-02"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)","lastModifiedDate":"2017-06-02"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code s} is null.","lastModifiedDate":"2017-06-02"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {","lastModifiedDate":"2017-06-02"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        requireNonNull(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-06-02"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            int value \u003d Integer.parseInt(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)","lastModifiedDate":"2017-06-02"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2017-06-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-06-02"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-02"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":68,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":69,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-11-02"},{"lineNumber":70,"author":{"gitId":"EiffelLKF"},"content":"     * Returns a given name String in proper case format.","lastModifiedDate":"2022-11-02"},{"lineNumber":71,"author":{"gitId":"EiffelLKF"},"content":"     * @param s Input address String to be converted to proper case.","lastModifiedDate":"2022-11-02"},{"lineNumber":72,"author":{"gitId":"EiffelLKF"},"content":"     * @return String in proper case format.","lastModifiedDate":"2022-11-02"},{"lineNumber":73,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-11-02"},{"lineNumber":74,"author":{"gitId":"EiffelLKF"},"content":"    public static String toProperCase(String s) {","lastModifiedDate":"2022-11-02"},{"lineNumber":75,"author":{"gitId":"EiffelLKF"},"content":"        String[] strArr \u003d s.split(\" \");","lastModifiedDate":"2022-11-02"},{"lineNumber":76,"author":{"gitId":"EiffelLKF"},"content":"        StringBuilder properCaseString \u003d new StringBuilder();","lastModifiedDate":"2022-11-02"},{"lineNumber":77,"author":{"gitId":"EiffelLKF"},"content":"        int count \u003d 0;","lastModifiedDate":"2022-11-02"},{"lineNumber":78,"author":{"gitId":"EiffelLKF"},"content":"        for (String str : strArr) {","lastModifiedDate":"2022-11-02"},{"lineNumber":79,"author":{"gitId":"EiffelLKF"},"content":"            String word \u003d str;","lastModifiedDate":"2022-11-02"},{"lineNumber":80,"author":{"gitId":"EiffelLKF"},"content":"            word \u003d word.substring(0, 1).toUpperCase() + word.substring(1);","lastModifiedDate":"2022-11-02"},{"lineNumber":81,"author":{"gitId":"EiffelLKF"},"content":"            if (count \u003d\u003d strArr.length - 1) {","lastModifiedDate":"2022-11-02"},{"lineNumber":82,"author":{"gitId":"EiffelLKF"},"content":"                properCaseString.append(word);","lastModifiedDate":"2022-11-02"},{"lineNumber":83,"author":{"gitId":"EiffelLKF"},"content":"            } else {","lastModifiedDate":"2022-11-02"},{"lineNumber":84,"author":{"gitId":"EiffelLKF"},"content":"                properCaseString.append(word).append(\" \");","lastModifiedDate":"2022-11-02"},{"lineNumber":85,"author":{"gitId":"EiffelLKF"},"content":"            }","lastModifiedDate":"2022-11-02"},{"lineNumber":86,"author":{"gitId":"EiffelLKF"},"content":"            count++;","lastModifiedDate":"2022-11-02"},{"lineNumber":87,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-11-02"},{"lineNumber":88,"author":{"gitId":"EiffelLKF"},"content":"        return properCaseString.toString();","lastModifiedDate":"2022-11-02"},{"lineNumber":89,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-11-02"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"EiffelLKF":22,"-":68}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2022-10-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Returns the AddressBook.","lastModifiedDate":"2018-12-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @see seedu.address.model.Model#getAddressBook()","lastModifiedDate":"2018-12-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */","lastModifiedDate":"2017-09-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":37,"author":{"gitId":"LJXSean"},"content":"    /** Returns an unmodifiable view of the filtered list of records */","lastModifiedDate":"2022-10-08"},{"lineNumber":38,"author":{"gitId":"LJXSean"},"content":"    ObservableList\u003cRecord\u003e getFilteredRecordList();","lastModifiedDate":"2022-10-08"},{"lineNumber":39,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"LJXSean":3,"EiffelLKF":1,"-":50}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":18,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2022-10-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();","lastModifiedDate":"2018-01-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2017-07-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2018-12-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return model.getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":68,"author":{"gitId":"LJXSean"},"content":"    @Override","lastModifiedDate":"2022-10-08"},{"lineNumber":69,"author":{"gitId":"LJXSean"},"content":"    public ObservableList\u003cRecord\u003e getFilteredRecordList() {","lastModifiedDate":"2022-10-08"},{"lineNumber":70,"author":{"gitId":"LJXSean"},"content":"        return model.getFilteredRecordList();","lastModifiedDate":"2022-10-08"},{"lineNumber":71,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":72,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"LJXSean":5,"EiffelLKF":1,"-":81}},{"path":"src/main/java/seedu/address/logic/commands/AddAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-15"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-10-15"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-10-15"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"import java.util.List;","lastModifiedDate":"2022-10-15"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-15"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-15"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-15"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-15"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-15"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"/**","lastModifiedDate":"2022-10-15"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":" * Adds an appointment to a person in the patient list.","lastModifiedDate":"2022-10-15"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":" */","lastModifiedDate":"2022-10-15"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"public class AddAppointmentCommand extends Command {","lastModifiedDate":"2022-10-15"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"    public static final String COMMAND_WORD \u003d \"appt\";","lastModifiedDate":"2022-10-15"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an appointment to the patient specified.\\n\"","lastModifiedDate":"2022-10-15"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"            + \"Parameters: \"","lastModifiedDate":"2022-10-15"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"            + \"INDEX \"","lastModifiedDate":"2022-10-15"},{"lineNumber":24,"author":{"gitId":"anthonyhoth"},"content":"            + PREFIX_DATE + \"APPOINTMENT_DATE_TIME \"","lastModifiedDate":"2022-11-01"},{"lineNumber":25,"author":{"gitId":"marclzh"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2022-10-15"},{"lineNumber":26,"author":{"gitId":"marclzh"},"content":"            + \"INDEX \"","lastModifiedDate":"2022-10-15"},{"lineNumber":27,"author":{"gitId":"anthonyhoth"},"content":"            + PREFIX_DATE + \"01-01-2023 1200 (must be formatted in dd-MM-yyyy HHmm)\";","lastModifiedDate":"2022-11-01"},{"lineNumber":28,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":29,"author":{"gitId":"marclzh"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New appointment added for %1$s\";","lastModifiedDate":"2022-10-26"},{"lineNumber":30,"author":{"gitId":"anthonyhoth"},"content":"    public static final String DATE_MISSING \u003d \"No date \u0026 time given! \"","lastModifiedDate":"2022-11-01"},{"lineNumber":31,"author":{"gitId":"anthonyhoth"},"content":"            + \"Appointments must have date \u0026 time, formatted in d/dd-MM-yyyy HHmm.\";","lastModifiedDate":"2022-11-01"},{"lineNumber":32,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":33,"author":{"gitId":"marclzh"},"content":"    private final Index index;","lastModifiedDate":"2022-10-15"},{"lineNumber":34,"author":{"gitId":"marclzh"},"content":"    private final String appointmentDate;","lastModifiedDate":"2022-10-15"},{"lineNumber":35,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":36,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-15"},{"lineNumber":37,"author":{"gitId":"marclzh"},"content":"     * Constructs an AddAppointmentCommand to add an appointment for a patient.","lastModifiedDate":"2022-10-15"},{"lineNumber":38,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-10-15"},{"lineNumber":39,"author":{"gitId":"marclzh"},"content":"     * @param index           Index of the patient.","lastModifiedDate":"2022-10-15"},{"lineNumber":40,"author":{"gitId":"marclzh"},"content":"     * @param appointmentDate Date of the appointment.","lastModifiedDate":"2022-10-15"},{"lineNumber":41,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-15"},{"lineNumber":42,"author":{"gitId":"marclzh"},"content":"    public AddAppointmentCommand(Index index, String appointmentDate) {","lastModifiedDate":"2022-10-15"},{"lineNumber":43,"author":{"gitId":"marclzh"},"content":"        requireAllNonNull(index, appointmentDate);","lastModifiedDate":"2022-10-15"},{"lineNumber":44,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":45,"author":{"gitId":"marclzh"},"content":"        this.index \u003d index;","lastModifiedDate":"2022-10-15"},{"lineNumber":46,"author":{"gitId":"marclzh"},"content":"        this.appointmentDate \u003d appointmentDate;","lastModifiedDate":"2022-10-15"},{"lineNumber":47,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":48,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":49,"author":{"gitId":"marclzh"},"content":"    @Override","lastModifiedDate":"2022-10-15"},{"lineNumber":50,"author":{"gitId":"marclzh"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-15"},{"lineNumber":51,"author":{"gitId":"marclzh"},"content":"        List\u003cPerson\u003e lastShownList \u003d CommandUtil.prepareFilteredList(model, index);","lastModifiedDate":"2022-10-16"},{"lineNumber":52,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":53,"author":{"gitId":"marclzh"},"content":"        if (!Appointment.isFutureDate(appointmentDate)) {","lastModifiedDate":"2022-10-26"},{"lineNumber":54,"author":{"gitId":"marclzh"},"content":"            throw new CommandException(Appointment.MESSAGE_DATE_PAST);","lastModifiedDate":"2022-10-26"},{"lineNumber":55,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-10-26"},{"lineNumber":56,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":57,"author":{"gitId":"marclzh"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2022-10-15"},{"lineNumber":58,"author":{"gitId":"hanwenlai"},"content":"        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getBirthdate(),","lastModifiedDate":"2022-10-19"},{"lineNumber":59,"author":{"gitId":"hanwenlai"},"content":"                personToEdit.getPhone(), personToEdit.getEmail(),","lastModifiedDate":"2022-10-18"},{"lineNumber":60,"author":{"gitId":"marclzh"},"content":"                personToEdit.getAddress(), personToEdit.getTags(),","lastModifiedDate":"2022-10-15"},{"lineNumber":61,"author":{"gitId":"marclzh"},"content":"                personToEdit.getRecordList(), Appointment.of(appointmentDate));","lastModifiedDate":"2022-10-16"},{"lineNumber":62,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":63,"author":{"gitId":"marclzh"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2022-10-15"},{"lineNumber":64,"author":{"gitId":"marclzh"},"content":"        model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2022-10-15"},{"lineNumber":65,"author":{"gitId":"marclzh"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS,","lastModifiedDate":"2022-10-26"},{"lineNumber":66,"author":{"gitId":"marclzh"},"content":"                personToEdit.getName().toString()) + \": \" + appointmentDate);","lastModifiedDate":"2022-10-26"},{"lineNumber":67,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":68,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":69,"author":{"gitId":"marclzh"},"content":"    @Override","lastModifiedDate":"2022-10-15"},{"lineNumber":70,"author":{"gitId":"marclzh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-15"},{"lineNumber":71,"author":{"gitId":"marclzh"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-15"},{"lineNumber":72,"author":{"gitId":"marclzh"},"content":"                || (other instanceof AddAppointmentCommand // instanceof handles nulls","lastModifiedDate":"2022-10-15"},{"lineNumber":73,"author":{"gitId":"marclzh"},"content":"                \u0026\u0026 index.equals(((AddAppointmentCommand) other).index)","lastModifiedDate":"2022-10-15"},{"lineNumber":74,"author":{"gitId":"marclzh"},"content":"                \u0026\u0026 appointmentDate.equals(((AddAppointmentCommand) other).appointmentDate));","lastModifiedDate":"2022-10-15"},{"lineNumber":75,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":76,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-10-15"}],"authorContributionMap":{"anthonyhoth":4,"marclzh":70,"hanwenlai":2}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDATE;","lastModifiedDate":"2022-10-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-01-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Adds a person to the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"anthonyhoth"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a patient to the patient list. \"","lastModifiedDate":"2022-10-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2017-06-06"},{"lineNumber":25,"author":{"gitId":"hanwenlai"},"content":"            + PREFIX_BIRTHDATE + \"BIRTHDATE \"","lastModifiedDate":"2022-10-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2017-05-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2017-05-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \"","lastModifiedDate":"2017-05-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2017-06-06"},{"lineNumber":32,"author":{"gitId":"hanwenlai"},"content":"            + PREFIX_BIRTHDATE + \"08-08-1988 \"","lastModifiedDate":"2022-10-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2017-05-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":36,"author":{"gitId":"anthonyhoth"},"content":"            + PREFIX_TAG + \"DustAllergy\";","lastModifiedDate":"2022-10-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"anthonyhoth"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New patient added: %1$s\";","lastModifiedDate":"2022-10-25"},{"lineNumber":39,"author":{"gitId":"anthonyhoth"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This patient already exists in the patient list.\";","lastModifiedDate":"2022-10-25"},{"lineNumber":40,"author":{"gitId":"anthonyhoth"},"content":"    public static final String MESSAGE_SIMILAR_NAME \u003d \"Warning: Another patient with a similar name exists.\";","lastModifiedDate":"2022-10-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private final Person toAdd;","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}","lastModifiedDate":"2018-01-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        toAdd \u003d person;","lastModifiedDate":"2018-01-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":60,"author":{"gitId":"EiffelLKF"},"content":"        if (model.isRecordListDisplayed()) {","lastModifiedDate":"2022-10-11"},{"lineNumber":61,"author":{"gitId":"EiffelLKF"},"content":"            throw new CommandException(MESSAGE_ADDRESS_BOOK_COMMAND_PREREQUISITE);","lastModifiedDate":"2022-10-11"},{"lineNumber":62,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-11"},{"lineNumber":63,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":64,"author":{"gitId":"anthonyhoth"},"content":"        String feedbackToUser;","lastModifiedDate":"2022-10-26"},{"lineNumber":65,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":66,"author":{"gitId":"anthonyhoth"},"content":"        if (model.hasSimilarName(toAdd)) {","lastModifiedDate":"2022-10-25"},{"lineNumber":67,"author":{"gitId":"anthonyhoth"},"content":"            feedbackToUser \u003d MESSAGE_SIMILAR_NAME + \"\\n\" + String.format(MESSAGE_SUCCESS, toAdd);","lastModifiedDate":"2022-10-26"},{"lineNumber":68,"author":{"gitId":"anthonyhoth"},"content":"        } else {","lastModifiedDate":"2022-10-25"},{"lineNumber":69,"author":{"gitId":"anthonyhoth"},"content":"            feedbackToUser \u003d String.format(MESSAGE_SUCCESS, toAdd);","lastModifiedDate":"2022-10-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);","lastModifiedDate":"2022-10-26"},{"lineNumber":73,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":74,"author":{"gitId":"anthonyhoth"},"content":"        return new CommandResult(feedbackToUser);","lastModifiedDate":"2022-10-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-10-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls","lastModifiedDate":"2017-06-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));","lastModifiedDate":"2017-06-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"anthonyhoth":14,"hanwenlai":3,"EiffelLKF":4,"-":62}},{"path":"src/main/java/seedu/address/logic/commands/AddRecordCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"EiffelLKF"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-10"},{"lineNumber":2,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":3,"author":{"gitId":"EiffelLKF"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-10"},{"lineNumber":4,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-10-10"},{"lineNumber":5,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICATION;","lastModifiedDate":"2022-10-17"},{"lineNumber":6,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RECORD;","lastModifiedDate":"2022-10-10"},{"lineNumber":7,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":8,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-10"},{"lineNumber":9,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-10"},{"lineNumber":10,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2022-10-17"},{"lineNumber":11,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":12,"author":{"gitId":"EiffelLKF"},"content":"/**","lastModifiedDate":"2022-10-10"},{"lineNumber":13,"author":{"gitId":"EiffelLKF"},"content":" * Adds a new record into the record list of the current person whose record list is being displayed.","lastModifiedDate":"2022-10-10"},{"lineNumber":14,"author":{"gitId":"EiffelLKF"},"content":" * Record Date provided must be formatted in dd-MM-yyyy HHmm.","lastModifiedDate":"2022-10-10"},{"lineNumber":15,"author":{"gitId":"EiffelLKF"},"content":" */","lastModifiedDate":"2022-10-10"},{"lineNumber":16,"author":{"gitId":"EiffelLKF"},"content":"public class AddRecordCommand extends Command {","lastModifiedDate":"2022-10-10"},{"lineNumber":17,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":18,"author":{"gitId":"anthonyhoth"},"content":"    public static final String COMMAND_WORD \u003d \"radd\";","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":20,"author":{"gitId":"EiffelLKF"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a new record to the list of records.\\n\"","lastModifiedDate":"2022-10-10"},{"lineNumber":21,"author":{"gitId":"EiffelLKF"},"content":"            + \"Parameters: \"","lastModifiedDate":"2022-10-10"},{"lineNumber":22,"author":{"gitId":"anthonyhoth"},"content":"            + PREFIX_DATE + \"RECORD_DATE_TIME \"","lastModifiedDate":"2022-11-01"},{"lineNumber":23,"author":{"gitId":"anthonyhoth"},"content":"            + PREFIX_RECORD + \"RECORD_DETAILS \"","lastModifiedDate":"2022-11-01"},{"lineNumber":24,"author":{"gitId":"anthonyhoth"},"content":"            + \"[\" + PREFIX_MEDICATION + \"MEDICATION]...\\n\"","lastModifiedDate":"2022-11-01"},{"lineNumber":25,"author":{"gitId":"EiffelLKF"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2022-10-10"},{"lineNumber":26,"author":{"gitId":"EiffelLKF"},"content":"            + PREFIX_DATE + \"31-10-2022 1430 (must be formatted in dd-MM-yyyy HHmm) \"","lastModifiedDate":"2022-10-10"},{"lineNumber":27,"author":{"gitId":"EiffelLKF"},"content":"            + PREFIX_RECORD + \"suffers from common cold \"","lastModifiedDate":"2022-10-17"},{"lineNumber":28,"author":{"gitId":"EiffelLKF"},"content":"            + PREFIX_MEDICATION + \"Paracetamol 500mg \"","lastModifiedDate":"2022-10-17"},{"lineNumber":29,"author":{"gitId":"EiffelLKF"},"content":"            + PREFIX_MEDICATION + \"Phenylephrine oral 10mg\";","lastModifiedDate":"2022-10-17"},{"lineNumber":30,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":31,"author":{"gitId":"EiffelLKF"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New record added: %1$s\";","lastModifiedDate":"2022-10-10"},{"lineNumber":32,"author":{"gitId":"anthonyhoth"},"content":"    public static final String MESSAGE_DUPLICATE_RECORD \u003d \"A record with this date \u0026 time\"","lastModifiedDate":"2022-11-01"},{"lineNumber":33,"author":{"gitId":"anthonyhoth"},"content":"            + \" already exists in the record list.\";","lastModifiedDate":"2022-11-01"},{"lineNumber":34,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":35,"author":{"gitId":"EiffelLKF"},"content":"    private final Record toAdd;","lastModifiedDate":"2022-10-10"},{"lineNumber":36,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":37,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":38,"author":{"gitId":"EiffelLKF"},"content":"     * Creates an AddRecordCommand to add the specified {@code Record}","lastModifiedDate":"2022-10-10"},{"lineNumber":39,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":40,"author":{"gitId":"EiffelLKF"},"content":"    public AddRecordCommand(Record record) {","lastModifiedDate":"2022-10-10"},{"lineNumber":41,"author":{"gitId":"EiffelLKF"},"content":"        requireNonNull(record);","lastModifiedDate":"2022-10-10"},{"lineNumber":42,"author":{"gitId":"EiffelLKF"},"content":"        toAdd \u003d record;","lastModifiedDate":"2022-10-10"},{"lineNumber":43,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":44,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":45,"author":{"gitId":"EiffelLKF"},"content":"    @Override","lastModifiedDate":"2022-10-10"},{"lineNumber":46,"author":{"gitId":"EiffelLKF"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-10"},{"lineNumber":47,"author":{"gitId":"EiffelLKF"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-10"},{"lineNumber":48,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":49,"author":{"gitId":"EiffelLKF"},"content":"        if (!model.isRecordListDisplayed()) {","lastModifiedDate":"2022-10-11"},{"lineNumber":50,"author":{"gitId":"EiffelLKF"},"content":"            throw new CommandException(MESSAGE_RECORD_COMMAND_PREREQUISITE);","lastModifiedDate":"2022-10-11"},{"lineNumber":51,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-11"},{"lineNumber":52,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":53,"author":{"gitId":"EiffelLKF"},"content":"        if (model.hasRecord(toAdd)) {","lastModifiedDate":"2022-10-10"},{"lineNumber":54,"author":{"gitId":"EiffelLKF"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_RECORD);","lastModifiedDate":"2022-10-10"},{"lineNumber":55,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-10"},{"lineNumber":56,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":57,"author":{"gitId":"EiffelLKF"},"content":"        model.addRecord(toAdd);","lastModifiedDate":"2022-10-10"},{"lineNumber":58,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":59,"author":{"gitId":"EiffelLKF"},"content":"        return new CommandResult(","lastModifiedDate":"2022-10-10"},{"lineNumber":60,"author":{"gitId":"EiffelLKF"},"content":"                String.format(MESSAGE_SUCCESS, toAdd),","lastModifiedDate":"2022-10-10"},{"lineNumber":61,"author":{"gitId":"EiffelLKF"},"content":"                false, false, true);","lastModifiedDate":"2022-10-10"},{"lineNumber":62,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":63,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":64,"author":{"gitId":"EiffelLKF"},"content":"    @Override","lastModifiedDate":"2022-10-10"},{"lineNumber":65,"author":{"gitId":"EiffelLKF"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-10"},{"lineNumber":66,"author":{"gitId":"EiffelLKF"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-10"},{"lineNumber":67,"author":{"gitId":"EiffelLKF"},"content":"                || (other instanceof AddRecordCommand // instanceof handles nulls","lastModifiedDate":"2022-10-10"},{"lineNumber":68,"author":{"gitId":"EiffelLKF"},"content":"                \u0026\u0026 toAdd.equals(((AddRecordCommand) other).toAdd));","lastModifiedDate":"2022-10-10"},{"lineNumber":69,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":70,"author":{"gitId":"EiffelLKF"},"content":"}","lastModifiedDate":"2022-10-10"}],"authorContributionMap":{"anthonyhoth":6,"EiffelLKF":64}},{"path":"src/main/java/seedu/address/logic/commands/ClearAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-16"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"import java.util.List;","lastModifiedDate":"2022-10-16"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-16"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-16"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-16"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-16"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-16"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"/**","lastModifiedDate":"2022-10-16"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":" * Clears the appointment field for a specified user.","lastModifiedDate":"2022-10-16"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":" */","lastModifiedDate":"2022-10-16"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"public class ClearAppointmentCommand extends Command {","lastModifiedDate":"2022-10-16"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"    public static final String COMMAND_WORD \u003d \"apptcl\";","lastModifiedDate":"2022-10-16"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Clears the appointment of the patient specified.\\n\"","lastModifiedDate":"2022-10-16"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"            + \"Parameters: INDEX \"","lastModifiedDate":"2022-10-16"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"            + \"Example: apptcl 1\";","lastModifiedDate":"2022-10-16"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Appointment cleared!\";","lastModifiedDate":"2022-10-16"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":24,"author":{"gitId":"marclzh"},"content":"    private final Index index;","lastModifiedDate":"2022-10-16"},{"lineNumber":25,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":26,"author":{"gitId":"marclzh"},"content":"    public ClearAppointmentCommand(Index index) {","lastModifiedDate":"2022-10-16"},{"lineNumber":27,"author":{"gitId":"marclzh"},"content":"        this.index \u003d index;","lastModifiedDate":"2022-10-16"},{"lineNumber":28,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":29,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":30,"author":{"gitId":"marclzh"},"content":"    @Override","lastModifiedDate":"2022-10-16"},{"lineNumber":31,"author":{"gitId":"marclzh"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-16"},{"lineNumber":32,"author":{"gitId":"marclzh"},"content":"        List\u003cPerson\u003e lastShownList \u003d CommandUtil.prepareFilteredList(model, index);","lastModifiedDate":"2022-10-16"},{"lineNumber":33,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":34,"author":{"gitId":"marclzh"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2022-10-16"},{"lineNumber":35,"author":{"gitId":"hanwenlai"},"content":"        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getBirthdate(),","lastModifiedDate":"2022-10-19"},{"lineNumber":36,"author":{"gitId":"hanwenlai"},"content":"                personToEdit.getPhone(), personToEdit.getEmail(),","lastModifiedDate":"2022-10-18"},{"lineNumber":37,"author":{"gitId":"marclzh"},"content":"                personToEdit.getAddress(), personToEdit.getTags(),","lastModifiedDate":"2022-10-16"},{"lineNumber":38,"author":{"gitId":"marclzh"},"content":"                personToEdit.getRecordList(), Appointment.of(Appointment.NO_APPOINTMENT_SCHEDULED));","lastModifiedDate":"2022-10-16"},{"lineNumber":39,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":40,"author":{"gitId":"marclzh"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2022-10-16"},{"lineNumber":41,"author":{"gitId":"marclzh"},"content":"        model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2022-10-16"},{"lineNumber":42,"author":{"gitId":"marclzh"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2022-10-16"},{"lineNumber":43,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":44,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":45,"author":{"gitId":"marclzh"},"content":"    @Override","lastModifiedDate":"2022-10-21"},{"lineNumber":46,"author":{"gitId":"marclzh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-21"},{"lineNumber":47,"author":{"gitId":"marclzh"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-21"},{"lineNumber":48,"author":{"gitId":"marclzh"},"content":"                || (other instanceof ClearAppointmentCommand // instanceof handles nulls","lastModifiedDate":"2022-10-21"},{"lineNumber":49,"author":{"gitId":"marclzh"},"content":"                \u0026\u0026 index.equals(((ClearAppointmentCommand) other).index)); // state check","lastModifiedDate":"2022-10-21"},{"lineNumber":50,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":51,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-10-16"}],"authorContributionMap":{"marclzh":49,"hanwenlai":2}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Clears the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"anthonyhoth"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Patient list has been cleared!\";","lastModifiedDate":"2022-10-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"EiffelLKF"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":22,"author":{"gitId":"EiffelLKF"},"content":"        if (model.isRecordListDisplayed()) {","lastModifiedDate":"2022-10-11"},{"lineNumber":23,"author":{"gitId":"EiffelLKF"},"content":"            throw new CommandException(MESSAGE_ADDRESS_BOOK_COMMAND_PREREQUISITE);","lastModifiedDate":"2022-10-11"},{"lineNumber":24,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-11"},{"lineNumber":25,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        model.setAddressBook(new AddressBook());","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"anthonyhoth":1,"EiffelLKF":7,"-":21}},{"path":"src/main/java/seedu/address/logic/commands/ClearRecordCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-10"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-10"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":5,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-11"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-10"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"/**","lastModifiedDate":"2022-10-10"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":" * Clears all the records of a patient.","lastModifiedDate":"2022-10-10"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":" */","lastModifiedDate":"2022-10-10"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"public class ClearRecordCommand extends Command {","lastModifiedDate":"2022-10-10"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":13,"author":{"gitId":"anthonyhoth"},"content":"    public static final String COMMAND_WORD \u003d \"rclear\";","lastModifiedDate":"2022-10-18"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2022-10-10"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"            + \": Deletes the records of the currently specified record list.\\n\";","lastModifiedDate":"2022-10-10"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":18,"author":{"gitId":"anthonyhoth"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Patient\u0027s record list has been cleared!\";","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"    @Override","lastModifiedDate":"2022-10-10"},{"lineNumber":21,"author":{"gitId":"EiffelLKF"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-11"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-10"},{"lineNumber":23,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":24,"author":{"gitId":"EiffelLKF"},"content":"        if (!model.isRecordListDisplayed()) {","lastModifiedDate":"2022-10-11"},{"lineNumber":25,"author":{"gitId":"EiffelLKF"},"content":"            throw new CommandException(MESSAGE_RECORD_COMMAND_PREREQUISITE);","lastModifiedDate":"2022-10-11"},{"lineNumber":26,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-11"},{"lineNumber":27,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":28,"author":{"gitId":"marclzh"},"content":"        model.clearRecords();","lastModifiedDate":"2022-10-10"},{"lineNumber":29,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":30,"author":{"gitId":"EiffelLKF"},"content":"        return new CommandResult(MESSAGE_SUCCESS,","lastModifiedDate":"2022-10-11"},{"lineNumber":31,"author":{"gitId":"EiffelLKF"},"content":"                false, false, true);","lastModifiedDate":"2022-10-11"},{"lineNumber":32,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":33,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-10-10"}],"authorContributionMap":{"anthonyhoth":2,"marclzh":21,"EiffelLKF":10}},{"path":"src/main/java/seedu/address/logic/commands/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public abstract class Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"EiffelLKF"},"content":"    protected static final String MESSAGE_RECORD_COMMAND_PREREQUISITE \u003d","lastModifiedDate":"2022-10-11"},{"lineNumber":12,"author":{"gitId":"EiffelLKF"},"content":"            \"A person\u0027s record list should be displayed before calling record commands\\n\"","lastModifiedDate":"2022-10-11"},{"lineNumber":13,"author":{"gitId":"LJXSean"},"content":"            + \"(Hint: rlist)\";","lastModifiedDate":"2022-10-20"},{"lineNumber":14,"author":{"gitId":"EiffelLKF"},"content":"    protected static final String MESSAGE_ADDRESS_BOOK_COMMAND_PREREQUISITE \u003d","lastModifiedDate":"2022-10-11"},{"lineNumber":15,"author":{"gitId":"anthonyhoth"},"content":"            \"The patient list should be displayed before calling patient commands\\n\"","lastModifiedDate":"2022-11-01"},{"lineNumber":16,"author":{"gitId":"EiffelLKF"},"content":"            + \"(Hint: list)\";","lastModifiedDate":"2022-10-11"},{"lineNumber":17,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":18,"author":{"gitId":"LJXSean"},"content":"    protected static final String MESSAGE_LIST_COMMAND_PREREQUISITE \u003d","lastModifiedDate":"2022-10-20"},{"lineNumber":19,"author":{"gitId":"LJXSean"},"content":"            \"List should be used to navigate back to the patient list panel from the record list panel.\\n\"","lastModifiedDate":"2022-10-20"},{"lineNumber":20,"author":{"gitId":"LJXSean"},"content":"                    + \"A person\u0027s record list should be displayed first before calling the list command.\\n\"","lastModifiedDate":"2022-10-20"},{"lineNumber":21,"author":{"gitId":"anthonyhoth"},"content":"                    + \"(Hint: Use showall to view the unfiltered list )\";","lastModifiedDate":"2022-11-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2018-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public abstract CommandResult execute(Model model) throws CommandException;","lastModifiedDate":"2019-01-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"anthonyhoth":2,"LJXSean":4,"EiffelLKF":5,"-":20}},{"path":"src/main/java/seedu/address/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-12-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents the result of a command execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResult {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /** Help information should be shown to the user. */","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final boolean showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** The application should exit. */","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final boolean exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"LJXSean"},"content":"    /** The application should show recordList instead of personList. */","lastModifiedDate":"2022-10-08"},{"lineNumber":21,"author":{"gitId":"LJXSean"},"content":"    private final boolean showRecords;","lastModifiedDate":"2022-10-09"},{"lineNumber":22,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"LJXSean"},"content":"     * Constructs a {@code CommandResult} with the specified fields for commands displaying personList.","lastModifiedDate":"2022-10-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.showHelp \u003d showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"LJXSean"},"content":"        this.showRecords \u003d false;","lastModifiedDate":"2022-10-09"},{"lineNumber":31,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":32,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":33,"author":{"gitId":"LJXSean"},"content":"    /**","lastModifiedDate":"2022-10-08"},{"lineNumber":34,"author":{"gitId":"LJXSean"},"content":"     * Constructs a {@code CommandResult} with the specified fields for commands that display recordList","lastModifiedDate":"2022-10-08"},{"lineNumber":35,"author":{"gitId":"LJXSean"},"content":"     */","lastModifiedDate":"2022-10-08"},{"lineNumber":36,"author":{"gitId":"LJXSean"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean showRecords) {","lastModifiedDate":"2022-10-09"},{"lineNumber":37,"author":{"gitId":"LJXSean"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);","lastModifiedDate":"2022-10-08"},{"lineNumber":38,"author":{"gitId":"LJXSean"},"content":"        this.showHelp \u003d showHelp;","lastModifiedDate":"2022-10-08"},{"lineNumber":39,"author":{"gitId":"LJXSean"},"content":"        this.exit \u003d exit;","lastModifiedDate":"2022-10-08"},{"lineNumber":40,"author":{"gitId":"LJXSean"},"content":"        this.showRecords \u003d showRecords;","lastModifiedDate":"2022-10-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * and other fields set to their default value.","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"LJXSean"},"content":"        this(feedbackToUser, false, false, false);","lastModifiedDate":"2022-10-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public boolean isExit() {","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"LJXSean"},"content":"    public boolean isShowRecords() {","lastModifiedDate":"2022-10-09"},{"lineNumber":64,"author":{"gitId":"LJXSean"},"content":"        return showRecords;","lastModifiedDate":"2022-10-09"},{"lineNumber":65,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":66,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-12-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-12-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return Objects.hash(feedbackToUser, showHelp, exit);","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"LJXSean":20,"-":69}},{"path":"src/main/java/seedu/address/logic/commands/CommandUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-16"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-16"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"import static seedu.address.logic.commands.Command.MESSAGE_ADDRESS_BOOK_COMMAND_PREREQUISITE;","lastModifiedDate":"2022-10-16"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"import java.util.List;","lastModifiedDate":"2022-10-16"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-16"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-16"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-16"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-16"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-16"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"/**","lastModifiedDate":"2022-10-16"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":" * Contains utility methods for the Command classes.","lastModifiedDate":"2022-10-16"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":" */","lastModifiedDate":"2022-10-16"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"public class CommandUtil {","lastModifiedDate":"2022-10-16"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"     * Prepares the model for index based commands.","lastModifiedDate":"2022-10-16"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-10-16"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"     * @param model Model to be used.","lastModifiedDate":"2022-10-16"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"     * @param index Index of the patient.","lastModifiedDate":"2022-10-16"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"     * @throws CommandException If command input is invalid.","lastModifiedDate":"2022-10-16"},{"lineNumber":24,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":25,"author":{"gitId":"marclzh"},"content":"    public static List\u003cPerson\u003e prepareFilteredList(Model model, Index index) throws CommandException {","lastModifiedDate":"2022-10-16"},{"lineNumber":26,"author":{"gitId":"marclzh"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-16"},{"lineNumber":27,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":28,"author":{"gitId":"marclzh"},"content":"        if (model.isRecordListDisplayed()) {","lastModifiedDate":"2022-10-16"},{"lineNumber":29,"author":{"gitId":"marclzh"},"content":"            throw new CommandException(MESSAGE_ADDRESS_BOOK_COMMAND_PREREQUISITE);","lastModifiedDate":"2022-10-16"},{"lineNumber":30,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":31,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":32,"author":{"gitId":"marclzh"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2022-10-16"},{"lineNumber":33,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":34,"author":{"gitId":"marclzh"},"content":"        // Check if index given is out of bounds","lastModifiedDate":"2022-10-16"},{"lineNumber":35,"author":{"gitId":"marclzh"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2022-10-16"},{"lineNumber":36,"author":{"gitId":"marclzh"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-16"},{"lineNumber":37,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":38,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":39,"author":{"gitId":"marclzh"},"content":"        return lastShownList;","lastModifiedDate":"2022-10-16"},{"lineNumber":40,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":41,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-10-16"}],"authorContributionMap":{"marclzh":41}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Deletes a person identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2018-04-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"anthonyhoth"},"content":"            + \": Deletes the patient identified by the index number used in the displayed patient list.\\n\"","lastModifiedDate":"2022-10-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2016-09-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"anthonyhoth"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted patient: %1$s\";","lastModifiedDate":"2022-10-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final Index targetIndex;","lastModifiedDate":"2017-06-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {","lastModifiedDate":"2017-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2016-09-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":32,"author":{"gitId":"marclzh"},"content":"        List\u003cPerson\u003e lastShownList \u003d CommandUtil.prepareFilteredList(model, targetIndex);","lastModifiedDate":"2022-10-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        model.deletePerson(personToDelete);","lastModifiedDate":"2016-09-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));","lastModifiedDate":"2016-09-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"anthonyhoth":2,"marclzh":1,"-":42}},{"path":"src/main/java/seedu/address/logic/commands/DeleteRecordCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"anthonyhoth"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-10"},{"lineNumber":2,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":3,"author":{"gitId":"anthonyhoth"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-10"},{"lineNumber":4,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":5,"author":{"gitId":"anthonyhoth"},"content":"import java.util.List;","lastModifiedDate":"2022-10-10"},{"lineNumber":6,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":7,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-10"},{"lineNumber":8,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-10"},{"lineNumber":9,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-10"},{"lineNumber":10,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-10"},{"lineNumber":11,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2022-10-17"},{"lineNumber":12,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":13,"author":{"gitId":"anthonyhoth"},"content":"/**","lastModifiedDate":"2022-10-10"},{"lineNumber":14,"author":{"gitId":"anthonyhoth"},"content":" * Deletes a record identified using it\u0027s displayed index from the displayed record list.","lastModifiedDate":"2022-10-10"},{"lineNumber":15,"author":{"gitId":"anthonyhoth"},"content":" */","lastModifiedDate":"2022-10-10"},{"lineNumber":16,"author":{"gitId":"anthonyhoth"},"content":"public class DeleteRecordCommand extends Command {","lastModifiedDate":"2022-10-10"},{"lineNumber":17,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":18,"author":{"gitId":"anthonyhoth"},"content":"    public static final String COMMAND_WORD \u003d \"rdelete\";","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":20,"author":{"gitId":"anthonyhoth"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2022-10-10"},{"lineNumber":21,"author":{"gitId":"anthonyhoth"},"content":"            + \": Deletes the record identified by the index number used in the displayed record list.\\n\"","lastModifiedDate":"2022-10-10"},{"lineNumber":22,"author":{"gitId":"anthonyhoth"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2022-10-10"},{"lineNumber":23,"author":{"gitId":"anthonyhoth"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2022-10-10"},{"lineNumber":24,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":25,"author":{"gitId":"anthonyhoth"},"content":"    public static final String MESSAGE_DELETE_RECORD_SUCCESS \u003d \"Deleted record: %1$s\";","lastModifiedDate":"2022-10-18"},{"lineNumber":26,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":27,"author":{"gitId":"anthonyhoth"},"content":"    private final Index targetIndex;","lastModifiedDate":"2022-10-10"},{"lineNumber":28,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":29,"author":{"gitId":"anthonyhoth"},"content":"    public DeleteRecordCommand(Index targetIndex) {","lastModifiedDate":"2022-10-10"},{"lineNumber":30,"author":{"gitId":"anthonyhoth"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2022-10-10"},{"lineNumber":31,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":32,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":33,"author":{"gitId":"anthonyhoth"},"content":"    @Override","lastModifiedDate":"2022-10-10"},{"lineNumber":34,"author":{"gitId":"anthonyhoth"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-10"},{"lineNumber":35,"author":{"gitId":"anthonyhoth"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-10"},{"lineNumber":36,"author":{"gitId":"anthonyhoth"},"content":"        List\u003cRecord\u003e lastShownRecordList \u003d model.getFilteredRecordList();","lastModifiedDate":"2022-10-10"},{"lineNumber":37,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":38,"author":{"gitId":"EiffelLKF"},"content":"        if (!model.isRecordListDisplayed()) {","lastModifiedDate":"2022-10-11"},{"lineNumber":39,"author":{"gitId":"EiffelLKF"},"content":"            throw new CommandException(MESSAGE_RECORD_COMMAND_PREREQUISITE);","lastModifiedDate":"2022-10-11"},{"lineNumber":40,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-11"},{"lineNumber":41,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":42,"author":{"gitId":"anthonyhoth"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownRecordList.size()) {","lastModifiedDate":"2022-10-10"},{"lineNumber":43,"author":{"gitId":"anthonyhoth"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-12"},{"lineNumber":44,"author":{"gitId":"anthonyhoth"},"content":"        }","lastModifiedDate":"2022-10-10"},{"lineNumber":45,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":46,"author":{"gitId":"anthonyhoth"},"content":"        Record recordToDelete \u003d lastShownRecordList.get(targetIndex.getZeroBased());","lastModifiedDate":"2022-10-10"},{"lineNumber":47,"author":{"gitId":"anthonyhoth"},"content":"        model.deleteRecord(recordToDelete);","lastModifiedDate":"2022-10-10"},{"lineNumber":48,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":49,"author":{"gitId":"anthonyhoth"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_RECORD_SUCCESS, recordToDelete),","lastModifiedDate":"2022-10-12"},{"lineNumber":50,"author":{"gitId":"anthonyhoth"},"content":"                false, false, true);","lastModifiedDate":"2022-10-10"},{"lineNumber":51,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":52,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":53,"author":{"gitId":"anthonyhoth"},"content":"    @Override","lastModifiedDate":"2022-10-10"},{"lineNumber":54,"author":{"gitId":"anthonyhoth"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-10"},{"lineNumber":55,"author":{"gitId":"anthonyhoth"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-10"},{"lineNumber":56,"author":{"gitId":"anthonyhoth"},"content":"                || (other instanceof DeleteRecordCommand // instanceof handles nulls","lastModifiedDate":"2022-10-10"},{"lineNumber":57,"author":{"gitId":"anthonyhoth"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteRecordCommand) other).targetIndex)); // state check","lastModifiedDate":"2022-10-10"},{"lineNumber":58,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":59,"author":{"gitId":"anthonyhoth"},"content":"}","lastModifiedDate":"2022-10-10"}],"authorContributionMap":{"anthonyhoth":53,"EiffelLKF":6}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-12-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDATE;","lastModifiedDate":"2022-10-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-01-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-01-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2016-12-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2022-10-18"},{"lineNumber":23,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-18"},{"lineNumber":24,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.model.person.Birthdate;","lastModifiedDate":"2022-10-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2022-10-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2022-10-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2022-10-18"},{"lineNumber":29,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.RecordList;","lastModifiedDate":"2022-10-17"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book.","lastModifiedDate":"2016-12-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":39,"author":{"gitId":"anthonyhoth"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the patient identified \"","lastModifiedDate":"2022-10-25"},{"lineNumber":40,"author":{"gitId":"anthonyhoth"},"content":"            + \"by the index number used in the displayed patient list. \"","lastModifiedDate":"2022-10-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":44,"author":{"gitId":"hanwenlai"},"content":"            + \"[\" + PREFIX_BIRTHDATE + \"BIRTHDATE] \"","lastModifiedDate":"2022-10-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2017-05-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":53,"author":{"gitId":"anthonyhoth"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited patient: %1$s\";","lastModifiedDate":"2022-10-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":55,"author":{"gitId":"anthonyhoth"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This patient already exists in the patient list.\";","lastModifiedDate":"2022-10-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2016-12-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":61,"author":{"gitId":"anthonyhoth"},"content":"     * @param index                of the person in the filtered patient list to edit","lastModifiedDate":"2022-10-25"},{"lineNumber":62,"author":{"gitId":"anthonyhoth"},"content":"     * @param editPersonDescriptor details to edit the patient with","lastModifiedDate":"2022-10-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-05-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2018-01-10"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2016-12-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":80,"author":{"gitId":"hanwenlai"},"content":"        Birthdate updatedBirthdate \u003d editPersonDescriptor.getBirthdate().orElse(personToEdit.getBirthdate());","lastModifiedDate":"2022-10-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":85,"author":{"gitId":"marclzh"},"content":"        RecordList updatedRecordList \u003d personToEdit.getRecordList();","lastModifiedDate":"2022-10-04"},{"lineNumber":86,"author":{"gitId":"marclzh"},"content":"        Appointment updatedAppointment \u003d personToEdit.getAppointment();","lastModifiedDate":"2022-10-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":88,"author":{"gitId":"hanwenlai"},"content":"        return new Person(updatedName, updatedBirthdate, updatedPhone, updatedEmail, updatedAddress,","lastModifiedDate":"2022-10-19"},{"lineNumber":89,"author":{"gitId":"marclzh"},"content":"                updatedTags, updatedRecordList, updatedAppointment);","lastModifiedDate":"2022-10-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":92,"author":{"gitId":"marclzh"},"content":"    @Override","lastModifiedDate":"2022-10-16"},{"lineNumber":93,"author":{"gitId":"marclzh"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-16"},{"lineNumber":94,"author":{"gitId":"marclzh"},"content":"        List\u003cPerson\u003e lastShownList \u003d CommandUtil.prepareFilteredList(model, index);","lastModifiedDate":"2022-10-16"},{"lineNumber":95,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":96,"author":{"gitId":"marclzh"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2022-10-16"},{"lineNumber":97,"author":{"gitId":"marclzh"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2022-10-16"},{"lineNumber":98,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":99,"author":{"gitId":"marclzh"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2022-10-16"},{"lineNumber":100,"author":{"gitId":"marclzh"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2022-10-16"},{"lineNumber":101,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":102,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":103,"author":{"gitId":"marclzh"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2022-10-16"},{"lineNumber":104,"author":{"gitId":"marclzh"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2022-10-16"},{"lineNumber":105,"author":{"gitId":"marclzh"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2022-10-16"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;","lastModifiedDate":"2017-05-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2017-05-25"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2016-12-26"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2016-12-26"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2016-12-26"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":132,"author":{"gitId":"hanwenlai"},"content":"        private Birthdate birthdate;","lastModifiedDate":"2022-10-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        private Address address;","lastModifiedDate":"2017-06-21"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-06-21"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":138,"author":{"gitId":"marclzh"},"content":"        public EditPersonDescriptor() {","lastModifiedDate":"2022-10-16"},{"lineNumber":139,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":142,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":143,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":144,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2016-12-26"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":147,"author":{"gitId":"hanwenlai"},"content":"            setBirthdate(toCopy.birthdate);","lastModifiedDate":"2022-10-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2018-01-15"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2018-01-11"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":155,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":156,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":158,"author":{"gitId":"hanwenlai"},"content":"            return CollectionUtil.isAnyNonNull(name, birthdate, phone, email, address, tags);","lastModifiedDate":"2022-10-19"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2022-10-16"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2022-10-16"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":169,"author":{"gitId":"hanwenlai"},"content":"        public Optional\u003cBirthdate\u003e getBirthdate() {","lastModifiedDate":"2022-10-19"},{"lineNumber":170,"author":{"gitId":"hanwenlai"},"content":"            return Optional.ofNullable(birthdate);","lastModifiedDate":"2022-10-19"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":173,"author":{"gitId":"hanwenlai"},"content":"        public void setBirthdate(Birthdate birthdate) {","lastModifiedDate":"2022-10-19"},{"lineNumber":174,"author":{"gitId":"hanwenlai"},"content":"            this.birthdate \u003d birthdate;","lastModifiedDate":"2022-10-19"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":181,"author":{"gitId":"marclzh"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2022-10-16"},{"lineNumber":182,"author":{"gitId":"marclzh"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2022-10-16"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":189,"author":{"gitId":"marclzh"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2022-10-16"},{"lineNumber":190,"author":{"gitId":"marclzh"},"content":"            this.email \u003d email;","lastModifiedDate":"2022-10-16"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2016-12-26"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2017-06-21"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":197,"author":{"gitId":"marclzh"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2022-10-16"},{"lineNumber":198,"author":{"gitId":"marclzh"},"content":"            this.address \u003d address;","lastModifiedDate":"2022-10-16"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":202,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2018-01-11"},{"lineNumber":203,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2018-01-11"},{"lineNumber":204,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2018-01-11"},{"lineNumber":205,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2018-01-11"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":210,"author":{"gitId":"marclzh"},"content":"        /**","lastModifiedDate":"2022-10-16"},{"lineNumber":211,"author":{"gitId":"marclzh"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2022-10-16"},{"lineNumber":212,"author":{"gitId":"marclzh"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2022-10-16"},{"lineNumber":213,"author":{"gitId":"marclzh"},"content":"         */","lastModifiedDate":"2022-10-16"},{"lineNumber":214,"author":{"gitId":"marclzh"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2022-10-16"},{"lineNumber":215,"author":{"gitId":"marclzh"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2022-10-16"},{"lineNumber":216,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":217,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2017-05-05"},{"lineNumber":221,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":222,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":226,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2017-05-05"},{"lineNumber":227,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":230,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2017-05-05"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2017-05-05"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":233,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2017-06-21"},{"lineNumber":234,"author":{"gitId":"hanwenlai"},"content":"                    \u0026\u0026 getBirthdate().equals(e.getBirthdate())","lastModifiedDate":"2022-10-19"},{"lineNumber":235,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())","lastModifiedDate":"2017-06-21"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())","lastModifiedDate":"2017-06-21"},{"lineNumber":237,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())","lastModifiedDate":"2017-06-21"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":241,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"anthonyhoth":6,"marclzh":33,"hanwenlai":14,"EiffelLKF":1,"-":187}},{"path":"src/main/java/seedu/address/logic/commands/EditRecordCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"anthonyhoth"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-18"},{"lineNumber":2,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":3,"author":{"gitId":"anthonyhoth"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-18"},{"lineNumber":4,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICATION;","lastModifiedDate":"2022-10-18"},{"lineNumber":6,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RECORD;","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RECORDS;","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"anthonyhoth"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"anthonyhoth"},"content":"import java.util.Collections;","lastModifiedDate":"2022-10-18"},{"lineNumber":11,"author":{"gitId":"anthonyhoth"},"content":"import java.util.HashSet;","lastModifiedDate":"2022-10-18"},{"lineNumber":12,"author":{"gitId":"anthonyhoth"},"content":"import java.util.List;","lastModifiedDate":"2022-10-18"},{"lineNumber":13,"author":{"gitId":"anthonyhoth"},"content":"import java.util.Optional;","lastModifiedDate":"2022-10-18"},{"lineNumber":14,"author":{"gitId":"anthonyhoth"},"content":"import java.util.Set;","lastModifiedDate":"2022-10-18"},{"lineNumber":15,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":16,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-18"},{"lineNumber":17,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2022-10-18"},{"lineNumber":18,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-18"},{"lineNumber":20,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.model.record.Medication;","lastModifiedDate":"2022-10-18"},{"lineNumber":21,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2022-10-18"},{"lineNumber":22,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":23,"author":{"gitId":"anthonyhoth"},"content":"/**","lastModifiedDate":"2022-10-18"},{"lineNumber":24,"author":{"gitId":"anthonyhoth"},"content":" * Edits the details of an existing person in the address book.","lastModifiedDate":"2022-10-18"},{"lineNumber":25,"author":{"gitId":"anthonyhoth"},"content":" */","lastModifiedDate":"2022-10-18"},{"lineNumber":26,"author":{"gitId":"anthonyhoth"},"content":"public class EditRecordCommand extends Command {","lastModifiedDate":"2022-10-18"},{"lineNumber":27,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":28,"author":{"gitId":"anthonyhoth"},"content":"    public static final String COMMAND_WORD \u003d \"redit\";","lastModifiedDate":"2022-10-18"},{"lineNumber":29,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":30,"author":{"gitId":"anthonyhoth"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the record identified \"","lastModifiedDate":"2022-10-18"},{"lineNumber":31,"author":{"gitId":"anthonyhoth"},"content":"            + \"by the index number used in the displayed record list. \"","lastModifiedDate":"2022-10-18"},{"lineNumber":32,"author":{"gitId":"anthonyhoth"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2022-10-18"},{"lineNumber":33,"author":{"gitId":"anthonyhoth"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2022-10-18"},{"lineNumber":34,"author":{"gitId":"anthonyhoth"},"content":"            + PREFIX_DATE + \"RECORD_DATE_TIME \"","lastModifiedDate":"2022-11-01"},{"lineNumber":35,"author":{"gitId":"anthonyhoth"},"content":"            + PREFIX_RECORD + \"RECORD_DETAILS \"","lastModifiedDate":"2022-11-01"},{"lineNumber":36,"author":{"gitId":"anthonyhoth"},"content":"            + \"[\" + PREFIX_MEDICATION + \"MEDICATION]...\\n\"","lastModifiedDate":"2022-11-01"},{"lineNumber":37,"author":{"gitId":"anthonyhoth"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2022-10-18"},{"lineNumber":38,"author":{"gitId":"anthonyhoth"},"content":"            + PREFIX_DATE + \"31-10-2022 1430 (must be formatted in dd-MM-yyyy HHmm) \"","lastModifiedDate":"2022-10-18"},{"lineNumber":39,"author":{"gitId":"anthonyhoth"},"content":"            + PREFIX_RECORD + \"suffers from common cold \"","lastModifiedDate":"2022-10-18"},{"lineNumber":40,"author":{"gitId":"anthonyhoth"},"content":"            + PREFIX_MEDICATION + \"Paracetamol 500mg \"","lastModifiedDate":"2022-10-18"},{"lineNumber":41,"author":{"gitId":"anthonyhoth"},"content":"            + PREFIX_MEDICATION + \"Phenylephrine oral 10mg\";","lastModifiedDate":"2022-10-18"},{"lineNumber":42,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":43,"author":{"gitId":"anthonyhoth"},"content":"    public static final String MESSAGE_EDIT_RECORD_SUCCESS \u003d \"Edited record: %1$s\";","lastModifiedDate":"2022-10-18"},{"lineNumber":44,"author":{"gitId":"anthonyhoth"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2022-10-18"},{"lineNumber":45,"author":{"gitId":"anthonyhoth"},"content":"    public static final String MESSAGE_DUPLICATE_RECORD \u003d \"A record with this date \u0026 time\"","lastModifiedDate":"2022-11-01"},{"lineNumber":46,"author":{"gitId":"anthonyhoth"},"content":"            + \" already exists in the address book.\";","lastModifiedDate":"2022-11-01"},{"lineNumber":47,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":48,"author":{"gitId":"anthonyhoth"},"content":"    private final Index index;","lastModifiedDate":"2022-10-18"},{"lineNumber":49,"author":{"gitId":"anthonyhoth"},"content":"    private final EditRecordDescriptor editRecordDescriptor;","lastModifiedDate":"2022-10-18"},{"lineNumber":50,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":51,"author":{"gitId":"anthonyhoth"},"content":"    /**","lastModifiedDate":"2022-10-18"},{"lineNumber":52,"author":{"gitId":"anthonyhoth"},"content":"     * @param index                of the record in the filtered record list to edit","lastModifiedDate":"2022-10-18"},{"lineNumber":53,"author":{"gitId":"anthonyhoth"},"content":"     * @param editRecordDescriptor details to edit the record with","lastModifiedDate":"2022-10-18"},{"lineNumber":54,"author":{"gitId":"anthonyhoth"},"content":"     */","lastModifiedDate":"2022-10-18"},{"lineNumber":55,"author":{"gitId":"anthonyhoth"},"content":"    public EditRecordCommand(Index index, EditRecordDescriptor editRecordDescriptor) {","lastModifiedDate":"2022-10-18"},{"lineNumber":56,"author":{"gitId":"anthonyhoth"},"content":"        requireNonNull(index);","lastModifiedDate":"2022-10-18"},{"lineNumber":57,"author":{"gitId":"anthonyhoth"},"content":"        requireNonNull(editRecordDescriptor);","lastModifiedDate":"2022-10-18"},{"lineNumber":58,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":59,"author":{"gitId":"anthonyhoth"},"content":"        this.index \u003d index;","lastModifiedDate":"2022-10-18"},{"lineNumber":60,"author":{"gitId":"anthonyhoth"},"content":"        this.editRecordDescriptor \u003d new EditRecordDescriptor(editRecordDescriptor);","lastModifiedDate":"2022-10-18"},{"lineNumber":61,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":62,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":63,"author":{"gitId":"anthonyhoth"},"content":"    /**","lastModifiedDate":"2022-10-18"},{"lineNumber":64,"author":{"gitId":"anthonyhoth"},"content":"     * Creates and returns a {@code Record} with the details of {@code recordToEdit}","lastModifiedDate":"2022-10-18"},{"lineNumber":65,"author":{"gitId":"anthonyhoth"},"content":"     * edited with {@code editRecordDescriptor}.","lastModifiedDate":"2022-10-18"},{"lineNumber":66,"author":{"gitId":"anthonyhoth"},"content":"     */","lastModifiedDate":"2022-10-18"},{"lineNumber":67,"author":{"gitId":"anthonyhoth"},"content":"    private static Record createEditedRecord(Record recordToEdit, EditRecordDescriptor editRecordDescriptor) {","lastModifiedDate":"2022-10-18"},{"lineNumber":68,"author":{"gitId":"anthonyhoth"},"content":"        assert recordToEdit !\u003d null;","lastModifiedDate":"2022-10-18"},{"lineNumber":69,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":70,"author":{"gitId":"anthonyhoth"},"content":"        LocalDateTime updatedRecordDate \u003d editRecordDescriptor.getRecordDate().orElse(recordToEdit.getRecordDate());","lastModifiedDate":"2022-10-18"},{"lineNumber":71,"author":{"gitId":"anthonyhoth"},"content":"        String updatedRecord \u003d editRecordDescriptor.getRecord().orElse(recordToEdit.getRecordData());","lastModifiedDate":"2022-10-18"},{"lineNumber":72,"author":{"gitId":"anthonyhoth"},"content":"        Set\u003cMedication\u003e updatedMedications \u003d editRecordDescriptor.getMedications()","lastModifiedDate":"2022-10-18"},{"lineNumber":73,"author":{"gitId":"anthonyhoth"},"content":"                .orElse(recordToEdit.getMedications());","lastModifiedDate":"2022-10-18"},{"lineNumber":74,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":75,"author":{"gitId":"anthonyhoth"},"content":"        return new Record(updatedRecordDate, updatedRecord, updatedMedications);","lastModifiedDate":"2022-10-18"},{"lineNumber":76,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":77,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":78,"author":{"gitId":"anthonyhoth"},"content":"    @Override","lastModifiedDate":"2022-10-18"},{"lineNumber":79,"author":{"gitId":"anthonyhoth"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-18"},{"lineNumber":80,"author":{"gitId":"anthonyhoth"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-18"},{"lineNumber":81,"author":{"gitId":"anthonyhoth"},"content":"        List\u003cRecord\u003e lastShownList \u003d model.getFilteredRecordList();","lastModifiedDate":"2022-10-18"},{"lineNumber":82,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":83,"author":{"gitId":"anthonyhoth"},"content":"        Record recordToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2022-10-18"},{"lineNumber":84,"author":{"gitId":"anthonyhoth"},"content":"        Record editedRecord \u003d createEditedRecord(recordToEdit, editRecordDescriptor);","lastModifiedDate":"2022-10-18"},{"lineNumber":85,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":86,"author":{"gitId":"anthonyhoth"},"content":"        if (!model.isRecordListDisplayed()) {","lastModifiedDate":"2022-10-18"},{"lineNumber":87,"author":{"gitId":"anthonyhoth"},"content":"            throw new CommandException(MESSAGE_RECORD_COMMAND_PREREQUISITE);","lastModifiedDate":"2022-10-18"},{"lineNumber":88,"author":{"gitId":"anthonyhoth"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":89,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":90,"author":{"gitId":"anthonyhoth"},"content":"        if (!recordToEdit.isSameRecord(editedRecord) \u0026\u0026 model.hasRecord(editedRecord)) {","lastModifiedDate":"2022-10-18"},{"lineNumber":91,"author":{"gitId":"anthonyhoth"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_RECORD);","lastModifiedDate":"2022-10-18"},{"lineNumber":92,"author":{"gitId":"anthonyhoth"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":93,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":94,"author":{"gitId":"anthonyhoth"},"content":"        model.setRecord(recordToEdit, editedRecord);","lastModifiedDate":"2022-10-18"},{"lineNumber":95,"author":{"gitId":"anthonyhoth"},"content":"        model.updateFilteredRecordList(PREDICATE_SHOW_ALL_RECORDS);","lastModifiedDate":"2022-10-18"},{"lineNumber":96,"author":{"gitId":"anthonyhoth"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_RECORD_SUCCESS, editedRecord), false, false, true);","lastModifiedDate":"2022-10-18"},{"lineNumber":97,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":98,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":99,"author":{"gitId":"anthonyhoth"},"content":"    @Override","lastModifiedDate":"2022-10-18"},{"lineNumber":100,"author":{"gitId":"anthonyhoth"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-18"},{"lineNumber":101,"author":{"gitId":"anthonyhoth"},"content":"        // short circuit if same object","lastModifiedDate":"2022-10-18"},{"lineNumber":102,"author":{"gitId":"anthonyhoth"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-18"},{"lineNumber":103,"author":{"gitId":"anthonyhoth"},"content":"            return true;","lastModifiedDate":"2022-10-18"},{"lineNumber":104,"author":{"gitId":"anthonyhoth"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":105,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":106,"author":{"gitId":"anthonyhoth"},"content":"        // instanceof handles nulls","lastModifiedDate":"2022-10-18"},{"lineNumber":107,"author":{"gitId":"anthonyhoth"},"content":"        if (!(other instanceof EditRecordCommand)) {","lastModifiedDate":"2022-10-18"},{"lineNumber":108,"author":{"gitId":"anthonyhoth"},"content":"            return false;","lastModifiedDate":"2022-10-18"},{"lineNumber":109,"author":{"gitId":"anthonyhoth"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":110,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":111,"author":{"gitId":"anthonyhoth"},"content":"        // state check","lastModifiedDate":"2022-10-18"},{"lineNumber":112,"author":{"gitId":"anthonyhoth"},"content":"        EditRecordCommand e \u003d (EditRecordCommand) other;","lastModifiedDate":"2022-10-18"},{"lineNumber":113,"author":{"gitId":"anthonyhoth"},"content":"        return index.equals(e.index)","lastModifiedDate":"2022-10-18"},{"lineNumber":114,"author":{"gitId":"anthonyhoth"},"content":"                \u0026\u0026 editRecordDescriptor.equals(e.editRecordDescriptor);","lastModifiedDate":"2022-10-18"},{"lineNumber":115,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":116,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":117,"author":{"gitId":"anthonyhoth"},"content":"    /**","lastModifiedDate":"2022-10-18"},{"lineNumber":118,"author":{"gitId":"anthonyhoth"},"content":"     * Stores the details to edit the record with. Each non-empty field value will replace the","lastModifiedDate":"2022-10-18"},{"lineNumber":119,"author":{"gitId":"anthonyhoth"},"content":"     * corresponding field value of the record.","lastModifiedDate":"2022-10-26"},{"lineNumber":120,"author":{"gitId":"anthonyhoth"},"content":"     */","lastModifiedDate":"2022-10-18"},{"lineNumber":121,"author":{"gitId":"anthonyhoth"},"content":"    public static class EditRecordDescriptor {","lastModifiedDate":"2022-10-18"},{"lineNumber":122,"author":{"gitId":"anthonyhoth"},"content":"        private LocalDateTime recordDate;","lastModifiedDate":"2022-10-18"},{"lineNumber":123,"author":{"gitId":"anthonyhoth"},"content":"        private String record;","lastModifiedDate":"2022-10-18"},{"lineNumber":124,"author":{"gitId":"anthonyhoth"},"content":"        private Set\u003cMedication\u003e medications;","lastModifiedDate":"2022-10-18"},{"lineNumber":125,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":126,"author":{"gitId":"anthonyhoth"},"content":"        public EditRecordDescriptor() {","lastModifiedDate":"2022-10-18"},{"lineNumber":127,"author":{"gitId":"anthonyhoth"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":128,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":129,"author":{"gitId":"anthonyhoth"},"content":"        /**","lastModifiedDate":"2022-10-18"},{"lineNumber":130,"author":{"gitId":"anthonyhoth"},"content":"         * Copy constructor.","lastModifiedDate":"2022-10-18"},{"lineNumber":131,"author":{"gitId":"anthonyhoth"},"content":"         * A defensive copy of {@code medications} is used internally.","lastModifiedDate":"2022-10-26"},{"lineNumber":132,"author":{"gitId":"anthonyhoth"},"content":"         */","lastModifiedDate":"2022-10-18"},{"lineNumber":133,"author":{"gitId":"anthonyhoth"},"content":"        public EditRecordDescriptor(EditRecordDescriptor toCopy) {","lastModifiedDate":"2022-10-18"},{"lineNumber":134,"author":{"gitId":"anthonyhoth"},"content":"            setRecordDate(toCopy.recordDate);","lastModifiedDate":"2022-10-18"},{"lineNumber":135,"author":{"gitId":"anthonyhoth"},"content":"            setRecord(toCopy.record);","lastModifiedDate":"2022-10-18"},{"lineNumber":136,"author":{"gitId":"anthonyhoth"},"content":"            setMedications(toCopy.medications);","lastModifiedDate":"2022-10-18"},{"lineNumber":137,"author":{"gitId":"anthonyhoth"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":138,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":139,"author":{"gitId":"anthonyhoth"},"content":"        /**","lastModifiedDate":"2022-10-18"},{"lineNumber":140,"author":{"gitId":"anthonyhoth"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2022-10-18"},{"lineNumber":141,"author":{"gitId":"anthonyhoth"},"content":"         */","lastModifiedDate":"2022-10-18"},{"lineNumber":142,"author":{"gitId":"anthonyhoth"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2022-10-18"},{"lineNumber":143,"author":{"gitId":"anthonyhoth"},"content":"            return CollectionUtil.isAnyNonNull(recordDate, record, medications);","lastModifiedDate":"2022-10-18"},{"lineNumber":144,"author":{"gitId":"anthonyhoth"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":145,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":146,"author":{"gitId":"anthonyhoth"},"content":"        public Optional\u003cLocalDateTime\u003e getRecordDate() {","lastModifiedDate":"2022-10-18"},{"lineNumber":147,"author":{"gitId":"anthonyhoth"},"content":"            return Optional.ofNullable(recordDate);","lastModifiedDate":"2022-10-18"},{"lineNumber":148,"author":{"gitId":"anthonyhoth"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":149,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":150,"author":{"gitId":"anthonyhoth"},"content":"        public void setRecordDate(LocalDateTime recordDate) {","lastModifiedDate":"2022-10-18"},{"lineNumber":151,"author":{"gitId":"anthonyhoth"},"content":"            this.recordDate \u003d recordDate;","lastModifiedDate":"2022-10-18"},{"lineNumber":152,"author":{"gitId":"anthonyhoth"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":153,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":154,"author":{"gitId":"anthonyhoth"},"content":"        public Optional\u003cString\u003e getRecord() {","lastModifiedDate":"2022-10-18"},{"lineNumber":155,"author":{"gitId":"anthonyhoth"},"content":"            return Optional.ofNullable(record);","lastModifiedDate":"2022-10-18"},{"lineNumber":156,"author":{"gitId":"anthonyhoth"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":157,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":158,"author":{"gitId":"anthonyhoth"},"content":"        public void setRecord(String record) {","lastModifiedDate":"2022-10-18"},{"lineNumber":159,"author":{"gitId":"anthonyhoth"},"content":"            this.record \u003d record;","lastModifiedDate":"2022-10-18"},{"lineNumber":160,"author":{"gitId":"anthonyhoth"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":161,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":162,"author":{"gitId":"anthonyhoth"},"content":"        /**","lastModifiedDate":"2022-10-18"},{"lineNumber":163,"author":{"gitId":"anthonyhoth"},"content":"         * Returns an unmodifiable medication set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2022-10-18"},{"lineNumber":164,"author":{"gitId":"anthonyhoth"},"content":"         * if modification is attempted.","lastModifiedDate":"2022-10-18"},{"lineNumber":165,"author":{"gitId":"anthonyhoth"},"content":"         * Returns {@code Optional#empty()} if {@code medications} is null.","lastModifiedDate":"2022-10-26"},{"lineNumber":166,"author":{"gitId":"anthonyhoth"},"content":"         */","lastModifiedDate":"2022-10-18"},{"lineNumber":167,"author":{"gitId":"anthonyhoth"},"content":"        public Optional\u003cSet\u003cMedication\u003e\u003e getMedications() {","lastModifiedDate":"2022-10-18"},{"lineNumber":168,"author":{"gitId":"anthonyhoth"},"content":"            return (medications !\u003d null) ? Optional.of(Collections.unmodifiableSet(medications)) : Optional.empty();","lastModifiedDate":"2022-10-18"},{"lineNumber":169,"author":{"gitId":"anthonyhoth"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":170,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":171,"author":{"gitId":"anthonyhoth"},"content":"        /**","lastModifiedDate":"2022-10-18"},{"lineNumber":172,"author":{"gitId":"anthonyhoth"},"content":"         * Sets {@code medications} to this object\u0027s {@code medications}.","lastModifiedDate":"2022-10-18"},{"lineNumber":173,"author":{"gitId":"anthonyhoth"},"content":"         * A defensive copy of {@code medication} is used internally.","lastModifiedDate":"2022-10-18"},{"lineNumber":174,"author":{"gitId":"anthonyhoth"},"content":"         */","lastModifiedDate":"2022-10-18"},{"lineNumber":175,"author":{"gitId":"anthonyhoth"},"content":"        public void setMedications(Set\u003cMedication\u003e medications) {","lastModifiedDate":"2022-10-18"},{"lineNumber":176,"author":{"gitId":"anthonyhoth"},"content":"            this.medications \u003d (medications !\u003d null) ? new HashSet\u003c\u003e(medications) : null;","lastModifiedDate":"2022-10-18"},{"lineNumber":177,"author":{"gitId":"anthonyhoth"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":178,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":179,"author":{"gitId":"anthonyhoth"},"content":"        @Override","lastModifiedDate":"2022-10-18"},{"lineNumber":180,"author":{"gitId":"anthonyhoth"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2022-10-18"},{"lineNumber":181,"author":{"gitId":"anthonyhoth"},"content":"            // short circuit if same object","lastModifiedDate":"2022-10-18"},{"lineNumber":182,"author":{"gitId":"anthonyhoth"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-18"},{"lineNumber":183,"author":{"gitId":"anthonyhoth"},"content":"                return true;","lastModifiedDate":"2022-10-18"},{"lineNumber":184,"author":{"gitId":"anthonyhoth"},"content":"            }","lastModifiedDate":"2022-10-18"},{"lineNumber":185,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":186,"author":{"gitId":"anthonyhoth"},"content":"            // instanceof handles nulls","lastModifiedDate":"2022-10-18"},{"lineNumber":187,"author":{"gitId":"anthonyhoth"},"content":"            if (!(other instanceof EditRecordDescriptor)) {","lastModifiedDate":"2022-10-18"},{"lineNumber":188,"author":{"gitId":"anthonyhoth"},"content":"                return false;","lastModifiedDate":"2022-10-18"},{"lineNumber":189,"author":{"gitId":"anthonyhoth"},"content":"            }","lastModifiedDate":"2022-10-18"},{"lineNumber":190,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":191,"author":{"gitId":"anthonyhoth"},"content":"            // state check","lastModifiedDate":"2022-10-18"},{"lineNumber":192,"author":{"gitId":"anthonyhoth"},"content":"            EditRecordDescriptor e \u003d (EditRecordDescriptor) other;","lastModifiedDate":"2022-10-18"},{"lineNumber":193,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":194,"author":{"gitId":"anthonyhoth"},"content":"            return getRecord().equals(e.getRecord())","lastModifiedDate":"2022-10-18"},{"lineNumber":195,"author":{"gitId":"anthonyhoth"},"content":"                    \u0026\u0026 getRecordDate().equals(e.getRecordDate())","lastModifiedDate":"2022-10-18"},{"lineNumber":196,"author":{"gitId":"anthonyhoth"},"content":"                    \u0026\u0026 getMedications().equals(e.getMedications());","lastModifiedDate":"2022-10-18"},{"lineNumber":197,"author":{"gitId":"anthonyhoth"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":198,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":199,"author":{"gitId":"anthonyhoth"},"content":"}","lastModifiedDate":"2022-10-18"}],"authorContributionMap":{"anthonyhoth":199}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program.","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"anthonyhoth"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting OmniHealth as requested ...\";","lastModifiedDate":"2022-11-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"anthonyhoth":1,"-":18}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2018-04-01"},{"lineNumber":6,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords.","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2018-04-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"anthonyhoth"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all patients whose names contain any of \"","lastModifiedDate":"2022-10-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2016-09-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"EiffelLKF"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":33,"author":{"gitId":"EiffelLKF"},"content":"        if (model.isRecordListDisplayed()) {","lastModifiedDate":"2022-10-11"},{"lineNumber":34,"author":{"gitId":"EiffelLKF"},"content":"            throw new CommandException(MESSAGE_ADDRESS_BOOK_COMMAND_PREREQUISITE);","lastModifiedDate":"2022-10-11"},{"lineNumber":35,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-11"},{"lineNumber":36,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return new CommandResult(","lastModifiedDate":"2018-04-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2018-04-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"anthonyhoth":1,"EiffelLKF":7,"-":40}},{"path":"src/main/java/seedu/address/logic/commands/FindRecordCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LJXSean"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-08"},{"lineNumber":2,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":3,"author":{"gitId":"LJXSean"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-08"},{"lineNumber":4,"author":{"gitId":"LJXSean"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-10-20"},{"lineNumber":5,"author":{"gitId":"LJXSean"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICATION;","lastModifiedDate":"2022-10-20"},{"lineNumber":6,"author":{"gitId":"LJXSean"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RECORD;","lastModifiedDate":"2022-10-20"},{"lineNumber":7,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":8,"author":{"gitId":"LJXSean"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-10-20"},{"lineNumber":9,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":10,"author":{"gitId":"LJXSean"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-08"},{"lineNumber":11,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-11"},{"lineNumber":12,"author":{"gitId":"LJXSean"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-08"},{"lineNumber":13,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.RecordContainsKeywordsPredicate;","lastModifiedDate":"2022-10-17"},{"lineNumber":14,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":15,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":16,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":17,"author":{"gitId":"LJXSean"},"content":"/**","lastModifiedDate":"2022-10-08"},{"lineNumber":18,"author":{"gitId":"LJXSean"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords.","lastModifiedDate":"2022-10-08"},{"lineNumber":19,"author":{"gitId":"LJXSean"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2022-10-08"},{"lineNumber":20,"author":{"gitId":"LJXSean"},"content":" */","lastModifiedDate":"2022-10-08"},{"lineNumber":21,"author":{"gitId":"LJXSean"},"content":"public class FindRecordCommand extends Command {","lastModifiedDate":"2022-10-08"},{"lineNumber":22,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":23,"author":{"gitId":"anthonyhoth"},"content":"    public static final String COMMAND_WORD \u003d \"rfind\";","lastModifiedDate":"2022-10-18"},{"lineNumber":24,"author":{"gitId":"LJXSean"},"content":"    public static final DateTimeFormatter FIND_RECORD_DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"MM-yyyy\");","lastModifiedDate":"2022-10-26"},{"lineNumber":25,"author":{"gitId":"LJXSean"},"content":"    public static final String MESSAGE_EMPTY_PREFIX \u003d \"Specified field must not be empty. eg. rfind m/\";","lastModifiedDate":"2022-10-26"},{"lineNumber":26,"author":{"gitId":"LJXSean"},"content":"    public static final String MESSAGE_NOTHING_TO_FIND \u003d \"At least one field must be specified.\";","lastModifiedDate":"2022-10-26"},{"lineNumber":27,"author":{"gitId":"LJXSean"},"content":"    public static final String MESSAGE_INVALID_FIND_DATE_FORMAT \u003d \"Invalid find date format! \"","lastModifiedDate":"2022-10-27"},{"lineNumber":28,"author":{"gitId":"LJXSean"},"content":"            + \"\\n Please use the format MM-yyyy and input MonthYear must not be after current month!\";","lastModifiedDate":"2022-10-27"},{"lineNumber":29,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":30,"author":{"gitId":"LJXSean"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all records whose content contains any of \"","lastModifiedDate":"2022-10-08"},{"lineNumber":31,"author":{"gitId":"LJXSean"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2022-10-08"},{"lineNumber":32,"author":{"gitId":"LJXSean"},"content":"            + \"Parameters: \"","lastModifiedDate":"2022-10-20"},{"lineNumber":33,"author":{"gitId":"anthonyhoth"},"content":"            + \"[\" + PREFIX_DATE + \"RECORD_DATE] \"","lastModifiedDate":"2022-11-01"},{"lineNumber":34,"author":{"gitId":"anthonyhoth"},"content":"            + \"[\" + PREFIX_RECORD + \"RECORD_DETAILS] \"","lastModifiedDate":"2022-11-01"},{"lineNumber":35,"author":{"gitId":"anthonyhoth"},"content":"            + \"[\" + PREFIX_MEDICATION + \"MEDICATION] \"","lastModifiedDate":"2022-11-01"},{"lineNumber":36,"author":{"gitId":"LJXSean"},"content":"            + \"(at least 1 field must be specified)\\n\"","lastModifiedDate":"2022-10-20"},{"lineNumber":37,"author":{"gitId":"LJXSean"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2022-10-20"},{"lineNumber":38,"author":{"gitId":"LJXSean"},"content":"            + PREFIX_DATE + \"10-2011 (must be formatted in MM-yyyy) \"","lastModifiedDate":"2022-10-20"},{"lineNumber":39,"author":{"gitId":"LJXSean"},"content":"            + PREFIX_RECORD + \"suffers from common cold \"","lastModifiedDate":"2022-10-20"},{"lineNumber":40,"author":{"gitId":"LJXSean"},"content":"            + PREFIX_MEDICATION + \"Paracetamol\";","lastModifiedDate":"2022-10-20"},{"lineNumber":41,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":42,"author":{"gitId":"LJXSean"},"content":"    private final RecordContainsKeywordsPredicate predicate;","lastModifiedDate":"2022-10-08"},{"lineNumber":43,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":44,"author":{"gitId":"LJXSean"},"content":"    public FindRecordCommand(RecordContainsKeywordsPredicate predicate) {","lastModifiedDate":"2022-10-08"},{"lineNumber":45,"author":{"gitId":"LJXSean"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2022-10-08"},{"lineNumber":46,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":47,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":48,"author":{"gitId":"LJXSean"},"content":"    @Override","lastModifiedDate":"2022-10-08"},{"lineNumber":49,"author":{"gitId":"EiffelLKF"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-11"},{"lineNumber":50,"author":{"gitId":"LJXSean"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-08"},{"lineNumber":51,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":52,"author":{"gitId":"EiffelLKF"},"content":"        if (!model.isRecordListDisplayed()) {","lastModifiedDate":"2022-10-11"},{"lineNumber":53,"author":{"gitId":"EiffelLKF"},"content":"            throw new CommandException(MESSAGE_RECORD_COMMAND_PREREQUISITE);","lastModifiedDate":"2022-10-11"},{"lineNumber":54,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-11"},{"lineNumber":55,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":56,"author":{"gitId":"LJXSean"},"content":"        model.updateFilteredRecordList(predicate);","lastModifiedDate":"2022-10-08"},{"lineNumber":57,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":58,"author":{"gitId":"LJXSean"},"content":"        return new CommandResult(","lastModifiedDate":"2022-10-08"},{"lineNumber":59,"author":{"gitId":"LJXSean"},"content":"                String.format(Messages.MESSAGE_RECORDS_LISTED_OVERVIEW, model.getFilteredRecordList().size()),","lastModifiedDate":"2022-10-08"},{"lineNumber":60,"author":{"gitId":"LJXSean"},"content":"                false, false, true);","lastModifiedDate":"2022-10-08"},{"lineNumber":61,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":62,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":63,"author":{"gitId":"LJXSean"},"content":"    @Override","lastModifiedDate":"2022-10-08"},{"lineNumber":64,"author":{"gitId":"LJXSean"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-08"},{"lineNumber":65,"author":{"gitId":"LJXSean"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-08"},{"lineNumber":66,"author":{"gitId":"LJXSean"},"content":"                || (other instanceof FindRecordCommand // instanceof handles nulls","lastModifiedDate":"2022-10-08"},{"lineNumber":67,"author":{"gitId":"LJXSean"},"content":"                \u0026\u0026 predicate.equals(((FindRecordCommand) other).predicate)); // state check","lastModifiedDate":"2022-10-08"},{"lineNumber":68,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":69,"author":{"gitId":"LJXSean"},"content":"}","lastModifiedDate":"2022-10-08"}],"authorContributionMap":{"anthonyhoth":4,"LJXSean":56,"EiffelLKF":9}},{"path":"src/main/java/seedu/address/logic/commands/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Format full help instructions for every command for display.","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD;","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";","lastModifiedDate":"2016-08-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"LJXSean"},"content":"        if (model.isRecordListDisplayed()) {","lastModifiedDate":"2022-11-01"},{"lineNumber":20,"author":{"gitId":"LJXSean"},"content":"            return new CommandResult(SHOWING_HELP_MESSAGE, true, false, true);","lastModifiedDate":"2022-11-01"},{"lineNumber":21,"author":{"gitId":"LJXSean"},"content":"        } else {","lastModifiedDate":"2022-11-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            return new CommandResult(SHOWING_HELP_MESSAGE, true, false);","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-11-01"}],"authorContributionMap":{"LJXSean":3,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"LJXSean"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-20"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Lists all persons in the address book to the user.","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2016-09-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"anthonyhoth"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all patients\";","lastModifiedDate":"2022-10-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"LJXSean"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":22,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":23,"author":{"gitId":"LJXSean"},"content":"        if (!model.isRecordListDisplayed()) {","lastModifiedDate":"2022-10-20"},{"lineNumber":24,"author":{"gitId":"LJXSean"},"content":"            throw new CommandException(MESSAGE_LIST_COMMAND_PREREQUISITE);","lastModifiedDate":"2022-10-20"},{"lineNumber":25,"author":{"gitId":"LJXSean"},"content":"        }","lastModifiedDate":"2022-10-20"},{"lineNumber":26,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":27,"author":{"gitId":"EiffelLKF"},"content":"        // Update model record list display flag","lastModifiedDate":"2022-10-11"},{"lineNumber":28,"author":{"gitId":"EiffelLKF"},"content":"        model.setRecordListDisplayed(false);","lastModifiedDate":"2022-10-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":30,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"anthonyhoth":1,"LJXSean":6,"EiffelLKF":4,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/ListRecordCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hanwenlai"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-06"},{"lineNumber":2,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":3,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RECORDS;","lastModifiedDate":"2022-10-10"},{"lineNumber":4,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":5,"author":{"gitId":"hanwenlai"},"content":"import java.util.List;","lastModifiedDate":"2022-10-10"},{"lineNumber":6,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":7,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-06"},{"lineNumber":8,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-06"},{"lineNumber":9,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-06"},{"lineNumber":10,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-06"},{"lineNumber":11,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-06"},{"lineNumber":12,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":13,"author":{"gitId":"hanwenlai"},"content":"/**","lastModifiedDate":"2022-10-07"},{"lineNumber":14,"author":{"gitId":"hanwenlai"},"content":" * Lists all records for a specific patient to the user.","lastModifiedDate":"2022-10-07"},{"lineNumber":15,"author":{"gitId":"hanwenlai"},"content":" */","lastModifiedDate":"2022-10-07"},{"lineNumber":16,"author":{"gitId":"hanwenlai"},"content":"public class ListRecordCommand extends Command {","lastModifiedDate":"2022-10-10"},{"lineNumber":17,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":18,"author":{"gitId":"anthonyhoth"},"content":"    public static final String COMMAND_WORD \u003d \"rlist\";","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":20,"author":{"gitId":"hanwenlai"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2022-10-06"},{"lineNumber":21,"author":{"gitId":"hanwenlai"},"content":"            + \": Shows a list of all records for the specific patient in the records database.\\n\"","lastModifiedDate":"2022-10-06"},{"lineNumber":22,"author":{"gitId":"hanwenlai"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2022-10-06"},{"lineNumber":23,"author":{"gitId":"hanwenlai"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2022-10-06"},{"lineNumber":24,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":25,"author":{"gitId":"hanwenlai"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed records for this patient: \";","lastModifiedDate":"2022-10-09"},{"lineNumber":26,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":27,"author":{"gitId":"hanwenlai"},"content":"    private final Index targetIndex;","lastModifiedDate":"2022-10-10"},{"lineNumber":28,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":29,"author":{"gitId":"hanwenlai"},"content":"    public ListRecordCommand(Index targetIndex) {","lastModifiedDate":"2022-10-10"},{"lineNumber":30,"author":{"gitId":"hanwenlai"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2022-10-06"},{"lineNumber":31,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":32,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":33,"author":{"gitId":"hanwenlai"},"content":"    @Override","lastModifiedDate":"2022-10-06"},{"lineNumber":34,"author":{"gitId":"hanwenlai"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-06"},{"lineNumber":35,"author":{"gitId":"marclzh"},"content":"        List\u003cPerson\u003e lastShownList \u003d CommandUtil.prepareFilteredList(model, targetIndex);","lastModifiedDate":"2022-10-16"},{"lineNumber":36,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":37,"author":{"gitId":"hanwenlai"},"content":"        Person personToListRecords \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2022-10-06"},{"lineNumber":38,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":39,"author":{"gitId":"EiffelLKF"},"content":"        // Set Model record list displayed flag to true","lastModifiedDate":"2022-10-11"},{"lineNumber":40,"author":{"gitId":"EiffelLKF"},"content":"        model.setPersonWithRecords(personToListRecords);","lastModifiedDate":"2022-10-11"},{"lineNumber":41,"author":{"gitId":"EiffelLKF"},"content":"        model.setRecordListDisplayed(true);","lastModifiedDate":"2022-10-11"},{"lineNumber":42,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":43,"author":{"gitId":"EiffelLKF"},"content":"        model.setFilteredRecordList(personToListRecords);","lastModifiedDate":"2022-10-11"},{"lineNumber":44,"author":{"gitId":"EiffelLKF"},"content":"        model.updateFilteredRecordList(PREDICATE_SHOW_ALL_RECORDS);","lastModifiedDate":"2022-10-11"},{"lineNumber":45,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":46,"author":{"gitId":"hanwenlai"},"content":"        String feedbackToUser \u003d MESSAGE_SUCCESS + personToListRecords.getName() + \"\\n\"","lastModifiedDate":"2022-10-10"},{"lineNumber":47,"author":{"gitId":"hanwenlai"},"content":"                + String.format(Messages.MESSAGE_RECORDS_LISTED_OVERVIEW,","lastModifiedDate":"2022-10-10"},{"lineNumber":48,"author":{"gitId":"hanwenlai"},"content":"                model.getFilteredRecordList().size());","lastModifiedDate":"2022-10-10"},{"lineNumber":49,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":50,"author":{"gitId":"hanwenlai"},"content":"        return new CommandResult(feedbackToUser, false, false, true);","lastModifiedDate":"2022-10-10"},{"lineNumber":51,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":52,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":53,"author":{"gitId":"hanwenlai"},"content":"    @Override","lastModifiedDate":"2022-10-06"},{"lineNumber":54,"author":{"gitId":"hanwenlai"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-06"},{"lineNumber":55,"author":{"gitId":"hanwenlai"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-06"},{"lineNumber":56,"author":{"gitId":"hanwenlai"},"content":"                || (other instanceof ListRecordCommand // instanceof handles nulls","lastModifiedDate":"2022-10-10"},{"lineNumber":57,"author":{"gitId":"hanwenlai"},"content":"                \u0026\u0026 targetIndex.equals(((ListRecordCommand) other).targetIndex)); // state check","lastModifiedDate":"2022-10-10"},{"lineNumber":58,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":59,"author":{"gitId":"hanwenlai"},"content":"}","lastModifiedDate":"2022-10-06"}],"authorContributionMap":{"anthonyhoth":1,"marclzh":1,"hanwenlai":50,"EiffelLKF":7}},{"path":"src/main/java/seedu/address/logic/commands/ShowAllCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LJXSean"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-19"},{"lineNumber":2,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":3,"author":{"gitId":"LJXSean"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-19"},{"lineNumber":4,"author":{"gitId":"LJXSean"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2022-10-19"},{"lineNumber":5,"author":{"gitId":"LJXSean"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RECORDS;","lastModifiedDate":"2022-10-19"},{"lineNumber":6,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":7,"author":{"gitId":"LJXSean"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-19"},{"lineNumber":8,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":9,"author":{"gitId":"LJXSean"},"content":"/**","lastModifiedDate":"2022-10-19"},{"lineNumber":10,"author":{"gitId":"LJXSean"},"content":" * Displays all persons or records after a find or rfind command is executed","lastModifiedDate":"2022-10-19"},{"lineNumber":11,"author":{"gitId":"LJXSean"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2022-10-19"},{"lineNumber":12,"author":{"gitId":"LJXSean"},"content":" */","lastModifiedDate":"2022-10-19"},{"lineNumber":13,"author":{"gitId":"LJXSean"},"content":"public class ShowAllCommand extends Command {","lastModifiedDate":"2022-10-26"},{"lineNumber":14,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":15,"author":{"gitId":"LJXSean"},"content":"    public static final String COMMAND_WORD \u003d \"showall\";","lastModifiedDate":"2022-10-26"},{"lineNumber":16,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":17,"author":{"gitId":"LJXSean"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD;","lastModifiedDate":"2022-10-19"},{"lineNumber":18,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":19,"author":{"gitId":"LJXSean"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Displaying full list!\";","lastModifiedDate":"2022-10-26"},{"lineNumber":20,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":21,"author":{"gitId":"LJXSean"},"content":"    @Override","lastModifiedDate":"2022-10-19"},{"lineNumber":22,"author":{"gitId":"LJXSean"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2022-10-19"},{"lineNumber":23,"author":{"gitId":"LJXSean"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-19"},{"lineNumber":24,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":25,"author":{"gitId":"LJXSean"},"content":"        if (model.isRecordListDisplayed()) {","lastModifiedDate":"2022-10-19"},{"lineNumber":26,"author":{"gitId":"LJXSean"},"content":"            model.updateFilteredRecordList(PREDICATE_SHOW_ALL_RECORDS);","lastModifiedDate":"2022-10-19"},{"lineNumber":27,"author":{"gitId":"LJXSean"},"content":"            return new CommandResult(MESSAGE_SUCCESS, false, false, true);","lastModifiedDate":"2022-10-19"},{"lineNumber":28,"author":{"gitId":"LJXSean"},"content":"        } else {","lastModifiedDate":"2022-10-19"},{"lineNumber":29,"author":{"gitId":"LJXSean"},"content":"            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2022-10-19"},{"lineNumber":30,"author":{"gitId":"LJXSean"},"content":"            return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2022-10-19"},{"lineNumber":31,"author":{"gitId":"LJXSean"},"content":"        }","lastModifiedDate":"2022-10-19"},{"lineNumber":32,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-19"},{"lineNumber":33,"author":{"gitId":"LJXSean"},"content":"}","lastModifiedDate":"2022-10-19"}],"authorContributionMap":{"LJXSean":33}},{"path":"src/main/java/seedu/address/logic/parser/AddAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-15"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-15"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-15"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-10-15"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-15"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;","lastModifiedDate":"2022-10-15"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-15"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-15"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"/**","lastModifiedDate":"2022-10-15"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":" * Parses input arguments and creates a new AddAppointmentCommand object.","lastModifiedDate":"2022-10-15"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":" */","lastModifiedDate":"2022-10-15"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"public class AddAppointmentCommandParser implements Parser\u003cAddAppointmentCommand\u003e {","lastModifiedDate":"2022-10-15"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-15"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"     * Parses the given {@code String} of arguments in the context of the AddAppointmentCommand","lastModifiedDate":"2022-10-15"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"     * and returns an AddAppointmentCommand object for execution.","lastModifiedDate":"2022-10-15"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-10-15"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"     * @throws ParseException if the user input does not conform the expected format.","lastModifiedDate":"2022-10-15"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-15"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"    public AddAppointmentCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-15"},{"lineNumber":24,"author":{"gitId":"marclzh"},"content":"        requireNonNull(args);","lastModifiedDate":"2022-10-15"},{"lineNumber":25,"author":{"gitId":"marclzh"},"content":"        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DATE);","lastModifiedDate":"2022-10-15"},{"lineNumber":26,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":27,"author":{"gitId":"marclzh"},"content":"        Index index;","lastModifiedDate":"2022-10-15"},{"lineNumber":28,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":29,"author":{"gitId":"marclzh"},"content":"        try {","lastModifiedDate":"2022-10-15"},{"lineNumber":30,"author":{"gitId":"marclzh"},"content":"            index \u003d ParserUtil.parseIndex(argumentMultimap.getPreamble());","lastModifiedDate":"2022-10-15"},{"lineNumber":31,"author":{"gitId":"marclzh"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2022-10-15"},{"lineNumber":32,"author":{"gitId":"marclzh"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2022-10-15"},{"lineNumber":33,"author":{"gitId":"marclzh"},"content":"                    AddAppointmentCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2022-10-15"},{"lineNumber":34,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-10-15"},{"lineNumber":35,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":36,"author":{"gitId":"marclzh"},"content":"        if (argumentMultimap.getValue(PREFIX_DATE).isEmpty()) {","lastModifiedDate":"2022-10-15"},{"lineNumber":37,"author":{"gitId":"marclzh"},"content":"            throw new ParseException(AddAppointmentCommand.DATE_MISSING);","lastModifiedDate":"2022-10-15"},{"lineNumber":38,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-10-15"},{"lineNumber":39,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":40,"author":{"gitId":"marclzh"},"content":"        String appointmentDate \u003d argumentMultimap.getValue(PREFIX_DATE).orElse(\"\");","lastModifiedDate":"2022-10-15"},{"lineNumber":41,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":42,"author":{"gitId":"hanwenlai"},"content":"        if (!Appointment.isValidDateFormat(appointmentDate)) {","lastModifiedDate":"2022-10-27"},{"lineNumber":43,"author":{"gitId":"marclzh"},"content":"            throw new ParseException(AddAppointmentCommand.DATE_MISSING);","lastModifiedDate":"2022-10-15"},{"lineNumber":44,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-10-15"},{"lineNumber":45,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":46,"author":{"gitId":"marclzh"},"content":"        return new AddAppointmentCommand(index, appointmentDate);","lastModifiedDate":"2022-10-15"},{"lineNumber":47,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":48,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-10-15"}],"authorContributionMap":{"marclzh":47,"hanwenlai":1}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDATE;","lastModifiedDate":"2022-10-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-02-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2022-10-18"},{"lineNumber":17,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-18"},{"lineNumber":18,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.model.person.Birthdate;","lastModifiedDate":"2022-10-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2022-10-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2022-10-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2022-10-18"},{"lineNumber":23,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.RecordList;","lastModifiedDate":"2022-10-17"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-17"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2017-02-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2017-02-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":38,"author":{"gitId":"hanwenlai"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_BIRTHDATE, PREFIX_PHONE, PREFIX_EMAIL,","lastModifiedDate":"2022-10-19"},{"lineNumber":39,"author":{"gitId":"hanwenlai"},"content":"                        PREFIX_ADDRESS, PREFIX_TAG);","lastModifiedDate":"2022-10-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":41,"author":{"gitId":"hanwenlai"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_BIRTHDATE, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)","lastModifiedDate":"2022-10-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"hanwenlai"},"content":"        Birthdate birthdate \u003d ParserUtil.parseBirthdate(argMultimap.getValue(PREFIX_BIRTHDATE).get());","lastModifiedDate":"2022-10-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2017-03-17"},{"lineNumber":52,"author":{"gitId":"marclzh"},"content":"        RecordList recordList \u003d new RecordList();","lastModifiedDate":"2022-10-15"},{"lineNumber":53,"author":{"gitId":"marclzh"},"content":"        Appointment appointment \u003d Appointment.of(Appointment.NO_APPOINTMENT_SCHEDULED); // date is null","lastModifiedDate":"2022-10-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":55,"author":{"gitId":"hanwenlai"},"content":"        Person person \u003d new Person(name, birthdate, phone, email, address, tagList, recordList, appointment);","lastModifiedDate":"2022-10-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return new AddCommand(person);","lastModifiedDate":"2017-03-17"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"marclzh":2,"hanwenlai":8,"EiffelLKF":1,"-":57}},{"path":"src/main/java/seedu/address/logic/parser/AddRecordCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"EiffelLKF"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-10"},{"lineNumber":2,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":3,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-10"},{"lineNumber":4,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-10-10"},{"lineNumber":5,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICATION;","lastModifiedDate":"2022-10-17"},{"lineNumber":6,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RECORD;","lastModifiedDate":"2022-10-17"},{"lineNumber":7,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":8,"author":{"gitId":"EiffelLKF"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-17"},{"lineNumber":9,"author":{"gitId":"EiffelLKF"},"content":"import java.util.Set;","lastModifiedDate":"2022-10-17"},{"lineNumber":10,"author":{"gitId":"EiffelLKF"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2022-10-10"},{"lineNumber":11,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":12,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.logic.commands.AddRecordCommand;","lastModifiedDate":"2022-10-10"},{"lineNumber":13,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-10"},{"lineNumber":14,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.Medication;","lastModifiedDate":"2022-10-17"},{"lineNumber":15,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2022-10-17"},{"lineNumber":16,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":17,"author":{"gitId":"EiffelLKF"},"content":"/**","lastModifiedDate":"2022-10-10"},{"lineNumber":18,"author":{"gitId":"EiffelLKF"},"content":" * Parses input arguments and creates a new FindCommand object","lastModifiedDate":"2022-10-10"},{"lineNumber":19,"author":{"gitId":"EiffelLKF"},"content":" */","lastModifiedDate":"2022-10-10"},{"lineNumber":20,"author":{"gitId":"EiffelLKF"},"content":"public class AddRecordCommandParser implements Parser\u003cAddRecordCommand\u003e {","lastModifiedDate":"2022-10-10"},{"lineNumber":21,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":22,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":23,"author":{"gitId":"EiffelLKF"},"content":"     * Parses the given {@code String} of arguments in the context of the AddRecordCommand","lastModifiedDate":"2022-10-10"},{"lineNumber":24,"author":{"gitId":"EiffelLKF"},"content":"     * and returns a AddRecordCommand object for execution.","lastModifiedDate":"2022-10-10"},{"lineNumber":25,"author":{"gitId":"EiffelLKF"},"content":"     *","lastModifiedDate":"2022-10-10"},{"lineNumber":26,"author":{"gitId":"EiffelLKF"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-10-10"},{"lineNumber":27,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":28,"author":{"gitId":"EiffelLKF"},"content":"    public AddRecordCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-10"},{"lineNumber":29,"author":{"gitId":"EiffelLKF"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2022-10-10"},{"lineNumber":30,"author":{"gitId":"EiffelLKF"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_RECORD, PREFIX_MEDICATION);","lastModifiedDate":"2022-10-17"},{"lineNumber":31,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":32,"author":{"gitId":"EiffelLKF"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_DATE, PREFIX_RECORD)","lastModifiedDate":"2022-10-10"},{"lineNumber":33,"author":{"gitId":"EiffelLKF"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2022-10-10"},{"lineNumber":34,"author":{"gitId":"EiffelLKF"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddRecordCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-10"},{"lineNumber":35,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-10"},{"lineNumber":36,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":37,"author":{"gitId":"hanwenlai"},"content":"        LocalDateTime recordDate \u003d ParserUtil.parseRecordDate(argMultimap.getValue(PREFIX_DATE).get());","lastModifiedDate":"2022-10-27"},{"lineNumber":38,"author":{"gitId":"EiffelLKF"},"content":"        String recordData \u003d ParserUtil.parseRecordData(argMultimap.getValue(PREFIX_RECORD).get());","lastModifiedDate":"2022-10-17"},{"lineNumber":39,"author":{"gitId":"EiffelLKF"},"content":"        Set\u003cMedication\u003e medications \u003d ParserUtil.parseMedications(argMultimap.getAllValues(PREFIX_MEDICATION));","lastModifiedDate":"2022-10-17"},{"lineNumber":40,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":41,"author":{"gitId":"EiffelLKF"},"content":"        Record record \u003d new Record(recordDate, recordData, medications);","lastModifiedDate":"2022-10-17"},{"lineNumber":42,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":43,"author":{"gitId":"EiffelLKF"},"content":"        return new AddRecordCommand(record);","lastModifiedDate":"2022-10-10"},{"lineNumber":44,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":45,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":46,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":47,"author":{"gitId":"EiffelLKF"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2022-10-10"},{"lineNumber":48,"author":{"gitId":"EiffelLKF"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2022-10-10"},{"lineNumber":49,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":50,"author":{"gitId":"EiffelLKF"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2022-10-10"},{"lineNumber":51,"author":{"gitId":"EiffelLKF"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2022-10-10"},{"lineNumber":52,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":53,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":54,"author":{"gitId":"EiffelLKF"},"content":"}","lastModifiedDate":"2022-10-10"}],"authorContributionMap":{"hanwenlai":1,"EiffelLKF":53}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;","lastModifiedDate":"2022-10-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":11,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.logic.commands.AddRecordCommand;","lastModifiedDate":"2022-10-10"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"import seedu.address.logic.commands.ClearAppointmentCommand;","lastModifiedDate":"2022-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"import seedu.address.logic.commands.ClearRecordCommand;","lastModifiedDate":"2022-10-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2022-10-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":17,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.logic.commands.DeleteRecordCommand;","lastModifiedDate":"2022-10-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":19,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.logic.commands.EditRecordCommand;","lastModifiedDate":"2022-10-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":22,"author":{"gitId":"LJXSean"},"content":"import seedu.address.logic.commands.FindRecordCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":25,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.logic.commands.ListRecordCommand;","lastModifiedDate":"2022-10-10"},{"lineNumber":26,"author":{"gitId":"LJXSean"},"content":"import seedu.address.logic.commands.ShowAllCommand;","lastModifiedDate":"2022-10-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"anthonyhoth"},"content":"        case DeleteRecordCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-10"},{"lineNumber":66,"author":{"gitId":"anthonyhoth"},"content":"            return new DeleteRecordCommandParser().parse(arguments);","lastModifiedDate":"2022-10-10"},{"lineNumber":67,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"LJXSean"},"content":"        case ShowAllCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-26"},{"lineNumber":75,"author":{"gitId":"LJXSean"},"content":"            return new ShowAllCommand();","lastModifiedDate":"2022-10-26"},{"lineNumber":76,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":77,"author":{"gitId":"hanwenlai"},"content":"        case ListRecordCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-10"},{"lineNumber":78,"author":{"gitId":"hanwenlai"},"content":"            return new ListRecordCommandParser().parse(arguments);","lastModifiedDate":"2022-10-10"},{"lineNumber":79,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":89,"author":{"gitId":"LJXSean"},"content":"        case FindRecordCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-08"},{"lineNumber":90,"author":{"gitId":"LJXSean"},"content":"            return new FindRecordCommandParser().parse(arguments);","lastModifiedDate":"2022-10-08"},{"lineNumber":91,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":92,"author":{"gitId":"marclzh"},"content":"        case ClearRecordCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-10"},{"lineNumber":93,"author":{"gitId":"marclzh"},"content":"            return new ClearRecordCommand();","lastModifiedDate":"2022-10-10"},{"lineNumber":94,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":95,"author":{"gitId":"EiffelLKF"},"content":"        case AddRecordCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-10"},{"lineNumber":96,"author":{"gitId":"EiffelLKF"},"content":"            return new AddRecordCommandParser().parse(arguments);","lastModifiedDate":"2022-10-10"},{"lineNumber":97,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":98,"author":{"gitId":"anthonyhoth"},"content":"        case EditRecordCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-18"},{"lineNumber":99,"author":{"gitId":"anthonyhoth"},"content":"            return new EditRecordCommandParser().parse(arguments);","lastModifiedDate":"2022-10-18"},{"lineNumber":100,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":101,"author":{"gitId":"marclzh"},"content":"        case AddAppointmentCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-15"},{"lineNumber":102,"author":{"gitId":"marclzh"},"content":"            return new AddAppointmentCommandParser().parse(arguments);","lastModifiedDate":"2022-10-15"},{"lineNumber":103,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":104,"author":{"gitId":"marclzh"},"content":"        case ClearAppointmentCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-16"},{"lineNumber":105,"author":{"gitId":"marclzh"},"content":"            return new ClearAppointmentCommandParser().parse(arguments);","lastModifiedDate":"2022-10-16"},{"lineNumber":106,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"anthonyhoth":8,"marclzh":12,"hanwenlai":4,"LJXSean":8,"EiffelLKF":4,"-":76}},{"path":"src/main/java/seedu/address/logic/parser/ClearAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-16"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-16"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-16"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"import seedu.address.logic.commands.ClearAppointmentCommand;","lastModifiedDate":"2022-10-16"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-16"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"/**","lastModifiedDate":"2022-10-16"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":" * Parses input arguments and creates a new ClearAppointmentCommand object.","lastModifiedDate":"2022-10-16"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":" */","lastModifiedDate":"2022-10-16"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"public class ClearAppointmentCommandParser implements Parser\u003cClearAppointmentCommand\u003e {","lastModifiedDate":"2022-10-16"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"     * Parses the given {@code String} of arguments in the context of the ClearAppointmentCommand","lastModifiedDate":"2022-10-16"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"     * and returns ClearAppointmentCommand object for execution.","lastModifiedDate":"2022-10-16"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-10-16"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"     * @throws ParseException if the user input does not conform the expected format.","lastModifiedDate":"2022-10-16"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"    public ClearAppointmentCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-16"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"        try {","lastModifiedDate":"2022-10-16"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2022-10-16"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"            return new ClearAppointmentCommand(index);","lastModifiedDate":"2022-10-16"},{"lineNumber":24,"author":{"gitId":"marclzh"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2022-10-16"},{"lineNumber":25,"author":{"gitId":"marclzh"},"content":"            throw new ParseException(","lastModifiedDate":"2022-10-16"},{"lineNumber":26,"author":{"gitId":"marclzh"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClearAppointmentCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2022-10-16"},{"lineNumber":27,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":28,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":29,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-10-16"}],"authorContributionMap":{"marclzh":29}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"hanwenlai"},"content":"    public static final Prefix PREFIX_BIRTHDATE \u003d new Prefix(\"b/\");","lastModifiedDate":"2022-10-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":15,"author":{"gitId":"EiffelLKF"},"content":"    public static final Prefix PREFIX_RECORD \u003d new Prefix(\"r/\");","lastModifiedDate":"2022-10-10"},{"lineNumber":16,"author":{"gitId":"EiffelLKF"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");","lastModifiedDate":"2022-10-10"},{"lineNumber":17,"author":{"gitId":"EiffelLKF"},"content":"    public static final Prefix PREFIX_MEDICATION \u003d new Prefix(\"m/\");","lastModifiedDate":"2022-10-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"hanwenlai":1,"EiffelLKF":3,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/DeleteRecordCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"anthonyhoth"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-10"},{"lineNumber":2,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":3,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-10"},{"lineNumber":4,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":5,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-10"},{"lineNumber":6,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.logic.commands.DeleteRecordCommand;","lastModifiedDate":"2022-10-10"},{"lineNumber":7,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-10"},{"lineNumber":8,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":9,"author":{"gitId":"anthonyhoth"},"content":"/**","lastModifiedDate":"2022-10-10"},{"lineNumber":10,"author":{"gitId":"anthonyhoth"},"content":" * Parses input arguments and creates a new DeleteRecordCommand object","lastModifiedDate":"2022-10-10"},{"lineNumber":11,"author":{"gitId":"anthonyhoth"},"content":" */","lastModifiedDate":"2022-10-10"},{"lineNumber":12,"author":{"gitId":"anthonyhoth"},"content":"public class DeleteRecordCommandParser implements Parser\u003cDeleteRecordCommand\u003e {","lastModifiedDate":"2022-10-10"},{"lineNumber":13,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":14,"author":{"gitId":"anthonyhoth"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":15,"author":{"gitId":"anthonyhoth"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteRecordCommand","lastModifiedDate":"2022-10-10"},{"lineNumber":16,"author":{"gitId":"anthonyhoth"},"content":"     * and returns a DeleteRecordCommand object for execution.","lastModifiedDate":"2022-10-10"},{"lineNumber":17,"author":{"gitId":"anthonyhoth"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-10-10"},{"lineNumber":18,"author":{"gitId":"anthonyhoth"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":19,"author":{"gitId":"anthonyhoth"},"content":"    public DeleteRecordCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-10"},{"lineNumber":20,"author":{"gitId":"anthonyhoth"},"content":"        try {","lastModifiedDate":"2022-10-10"},{"lineNumber":21,"author":{"gitId":"anthonyhoth"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2022-10-10"},{"lineNumber":22,"author":{"gitId":"anthonyhoth"},"content":"            return new DeleteRecordCommand(index);","lastModifiedDate":"2022-10-10"},{"lineNumber":23,"author":{"gitId":"anthonyhoth"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2022-10-10"},{"lineNumber":24,"author":{"gitId":"anthonyhoth"},"content":"            throw new ParseException(","lastModifiedDate":"2022-10-10"},{"lineNumber":25,"author":{"gitId":"anthonyhoth"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteRecordCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2022-10-10"},{"lineNumber":26,"author":{"gitId":"anthonyhoth"},"content":"        }","lastModifiedDate":"2022-10-10"},{"lineNumber":27,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":28,"author":{"gitId":"anthonyhoth"},"content":"}","lastModifiedDate":"2022-10-10"}],"authorContributionMap":{"anthonyhoth":28}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2022-10-18"},{"lineNumber":6,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDATE;","lastModifiedDate":"2022-10-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-10-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-01-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2017-01-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":36,"author":{"gitId":"hanwenlai"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_BIRTHDATE, PREFIX_PHONE, PREFIX_EMAIL,","lastModifiedDate":"2022-10-19"},{"lineNumber":37,"author":{"gitId":"hanwenlai"},"content":"                        PREFIX_ADDRESS, PREFIX_TAG);","lastModifiedDate":"2022-10-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-01-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":51,"author":{"gitId":"hanwenlai"},"content":"        if (argMultimap.getValue(PREFIX_BIRTHDATE).isPresent()) {","lastModifiedDate":"2022-10-19"},{"lineNumber":52,"author":{"gitId":"hanwenlai"},"content":"            editPersonDescriptor.setBirthdate(ParserUtil.parseBirthdate(argMultimap.getValue(PREFIX_BIRTHDATE).get()));","lastModifiedDate":"2022-10-19"},{"lineNumber":53,"author":{"gitId":"hanwenlai"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);","lastModifiedDate":"2017-06-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-03-11"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2017-03-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2017-01-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags.","lastModifiedDate":"2017-03-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2017-01-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2017-01-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2017-01-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2017-01-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"hanwenlai":6,"-":81}},{"path":"src/main/java/seedu/address/logic/parser/EditRecordCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"anthonyhoth"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-18"},{"lineNumber":2,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":3,"author":{"gitId":"anthonyhoth"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-18"},{"lineNumber":4,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-10-18"},{"lineNumber":6,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICATION;","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RECORD;","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"anthonyhoth"},"content":"import java.util.Collection;","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"anthonyhoth"},"content":"import java.util.Collections;","lastModifiedDate":"2022-10-18"},{"lineNumber":11,"author":{"gitId":"anthonyhoth"},"content":"import java.util.Optional;","lastModifiedDate":"2022-10-18"},{"lineNumber":12,"author":{"gitId":"anthonyhoth"},"content":"import java.util.Set;","lastModifiedDate":"2022-10-18"},{"lineNumber":13,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":14,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-18"},{"lineNumber":15,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.logic.commands.EditRecordCommand;","lastModifiedDate":"2022-10-18"},{"lineNumber":16,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.logic.commands.EditRecordCommand.EditRecordDescriptor;","lastModifiedDate":"2022-10-18"},{"lineNumber":17,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-18"},{"lineNumber":18,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.model.record.Medication;","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":20,"author":{"gitId":"anthonyhoth"},"content":"/**","lastModifiedDate":"2022-10-18"},{"lineNumber":21,"author":{"gitId":"anthonyhoth"},"content":" * Parses input arguments and creates a new EditRecordCommand object","lastModifiedDate":"2022-10-18"},{"lineNumber":22,"author":{"gitId":"anthonyhoth"},"content":" */","lastModifiedDate":"2022-10-18"},{"lineNumber":23,"author":{"gitId":"anthonyhoth"},"content":"public class EditRecordCommandParser implements Parser\u003cEditRecordCommand\u003e {","lastModifiedDate":"2022-10-18"},{"lineNumber":24,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":25,"author":{"gitId":"anthonyhoth"},"content":"    /**","lastModifiedDate":"2022-10-18"},{"lineNumber":26,"author":{"gitId":"anthonyhoth"},"content":"     * Parses the given {@code String} of arguments in the context of the EditRecordCommand","lastModifiedDate":"2022-10-18"},{"lineNumber":27,"author":{"gitId":"anthonyhoth"},"content":"     * and returns an EditRecordCommand object for execution.","lastModifiedDate":"2022-10-18"},{"lineNumber":28,"author":{"gitId":"anthonyhoth"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-10-18"},{"lineNumber":29,"author":{"gitId":"anthonyhoth"},"content":"     */","lastModifiedDate":"2022-10-18"},{"lineNumber":30,"author":{"gitId":"anthonyhoth"},"content":"    public EditRecordCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-18"},{"lineNumber":31,"author":{"gitId":"anthonyhoth"},"content":"        requireNonNull(args);","lastModifiedDate":"2022-10-18"},{"lineNumber":32,"author":{"gitId":"anthonyhoth"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2022-10-18"},{"lineNumber":33,"author":{"gitId":"anthonyhoth"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_RECORD, PREFIX_MEDICATION);","lastModifiedDate":"2022-10-18"},{"lineNumber":34,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":35,"author":{"gitId":"anthonyhoth"},"content":"        Index index;","lastModifiedDate":"2022-10-18"},{"lineNumber":36,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":37,"author":{"gitId":"anthonyhoth"},"content":"        try {","lastModifiedDate":"2022-10-18"},{"lineNumber":38,"author":{"gitId":"anthonyhoth"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2022-10-18"},{"lineNumber":39,"author":{"gitId":"anthonyhoth"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2022-10-18"},{"lineNumber":40,"author":{"gitId":"anthonyhoth"},"content":"            throw new ParseException(","lastModifiedDate":"2022-10-18"},{"lineNumber":41,"author":{"gitId":"anthonyhoth"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditRecordCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2022-10-18"},{"lineNumber":42,"author":{"gitId":"anthonyhoth"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":43,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":44,"author":{"gitId":"anthonyhoth"},"content":"        EditRecordDescriptor editRecordDescriptor \u003d new EditRecordDescriptor();","lastModifiedDate":"2022-10-18"},{"lineNumber":45,"author":{"gitId":"anthonyhoth"},"content":"        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {","lastModifiedDate":"2022-10-18"},{"lineNumber":46,"author":{"gitId":"hanwenlai"},"content":"            editRecordDescriptor.setRecordDate(ParserUtil.parseRecordDate(argMultimap.getValue(PREFIX_DATE).get()));","lastModifiedDate":"2022-10-27"},{"lineNumber":47,"author":{"gitId":"anthonyhoth"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":48,"author":{"gitId":"anthonyhoth"},"content":"        if (argMultimap.getValue(PREFIX_RECORD).isPresent()) {","lastModifiedDate":"2022-10-18"},{"lineNumber":49,"author":{"gitId":"anthonyhoth"},"content":"            editRecordDescriptor.setRecord(ParserUtil.parseRecordData(argMultimap.getValue(PREFIX_RECORD).get()));","lastModifiedDate":"2022-10-18"},{"lineNumber":50,"author":{"gitId":"anthonyhoth"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":51,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":52,"author":{"gitId":"anthonyhoth"},"content":"        parseMedicationsForEdit(argMultimap.getAllValues(PREFIX_MEDICATION))","lastModifiedDate":"2022-10-18"},{"lineNumber":53,"author":{"gitId":"anthonyhoth"},"content":"                .ifPresent(editRecordDescriptor::setMedications);","lastModifiedDate":"2022-10-18"},{"lineNumber":54,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":55,"author":{"gitId":"anthonyhoth"},"content":"        if (!editRecordDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2022-10-18"},{"lineNumber":56,"author":{"gitId":"anthonyhoth"},"content":"            throw new ParseException(EditRecordCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2022-10-18"},{"lineNumber":57,"author":{"gitId":"anthonyhoth"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":58,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":59,"author":{"gitId":"anthonyhoth"},"content":"        return new EditRecordCommand(index, editRecordDescriptor);","lastModifiedDate":"2022-10-18"},{"lineNumber":60,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":61,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":62,"author":{"gitId":"anthonyhoth"},"content":"    /**","lastModifiedDate":"2022-10-18"},{"lineNumber":63,"author":{"gitId":"anthonyhoth"},"content":"     * Parses {@code Collection\u003cString\u003e medications} into a {@code Set\u003cMedication\u003e} if {@code medications} is non-empty.","lastModifiedDate":"2022-10-18"},{"lineNumber":64,"author":{"gitId":"anthonyhoth"},"content":"     * If {@code medications} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2022-10-18"},{"lineNumber":65,"author":{"gitId":"anthonyhoth"},"content":"     * {@code Set\u003cMedication\u003e} containing zero medications.","lastModifiedDate":"2022-10-18"},{"lineNumber":66,"author":{"gitId":"anthonyhoth"},"content":"     */","lastModifiedDate":"2022-10-18"},{"lineNumber":67,"author":{"gitId":"anthonyhoth"},"content":"    private Optional\u003cSet\u003cMedication\u003e\u003e parseMedicationsForEdit(Collection\u003cString\u003e medications) throws ParseException {","lastModifiedDate":"2022-10-18"},{"lineNumber":68,"author":{"gitId":"anthonyhoth"},"content":"        assert medications !\u003d null;","lastModifiedDate":"2022-10-18"},{"lineNumber":69,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":70,"author":{"gitId":"anthonyhoth"},"content":"        if (medications.isEmpty()) {","lastModifiedDate":"2022-10-18"},{"lineNumber":71,"author":{"gitId":"anthonyhoth"},"content":"            return Optional.empty();","lastModifiedDate":"2022-10-18"},{"lineNumber":72,"author":{"gitId":"anthonyhoth"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":73,"author":{"gitId":"anthonyhoth"},"content":"        Collection\u003cString\u003e medicationSet \u003d","lastModifiedDate":"2022-10-19"},{"lineNumber":74,"author":{"gitId":"anthonyhoth"},"content":"                medications.size() \u003d\u003d 1 \u0026\u0026 medications.contains(\"\") ? Collections.emptySet() : medications;","lastModifiedDate":"2022-10-18"},{"lineNumber":75,"author":{"gitId":"anthonyhoth"},"content":"        return Optional.of(ParserUtil.parseMedications(medicationSet));","lastModifiedDate":"2022-10-19"},{"lineNumber":76,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":77,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":78,"author":{"gitId":"anthonyhoth"},"content":"}","lastModifiedDate":"2022-10-18"}],"authorContributionMap":{"anthonyhoth":77,"hanwenlai":1}},{"path":"src/main/java/seedu/address/logic/parser/FindRecordCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LJXSean"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-08"},{"lineNumber":2,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":3,"author":{"gitId":"LJXSean"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-08"},{"lineNumber":4,"author":{"gitId":"LJXSean"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-10-20"},{"lineNumber":5,"author":{"gitId":"LJXSean"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICATION;","lastModifiedDate":"2022-10-20"},{"lineNumber":6,"author":{"gitId":"LJXSean"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RECORD;","lastModifiedDate":"2022-10-20"},{"lineNumber":7,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":8,"author":{"gitId":"LJXSean"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-26"},{"lineNumber":9,"author":{"gitId":"LJXSean"},"content":"import java.time.YearMonth;","lastModifiedDate":"2022-10-27"},{"lineNumber":10,"author":{"gitId":"LJXSean"},"content":"import java.time.ZoneId;","lastModifiedDate":"2022-10-27"},{"lineNumber":11,"author":{"gitId":"LJXSean"},"content":"import java.time.ZoneOffset;","lastModifiedDate":"2022-10-27"},{"lineNumber":12,"author":{"gitId":"LJXSean"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-10-26"},{"lineNumber":13,"author":{"gitId":"LJXSean"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-10-26"},{"lineNumber":14,"author":{"gitId":"LJXSean"},"content":"import java.util.List;","lastModifiedDate":"2022-10-20"},{"lineNumber":15,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":16,"author":{"gitId":"LJXSean"},"content":"import seedu.address.logic.commands.FindRecordCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":17,"author":{"gitId":"LJXSean"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-08"},{"lineNumber":18,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.RecordContainsKeywordsPredicate;","lastModifiedDate":"2022-10-17"},{"lineNumber":19,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":20,"author":{"gitId":"LJXSean"},"content":"/**","lastModifiedDate":"2022-10-08"},{"lineNumber":21,"author":{"gitId":"LJXSean"},"content":" * Parses input arguments and creates a new FindCommand object","lastModifiedDate":"2022-10-08"},{"lineNumber":22,"author":{"gitId":"LJXSean"},"content":" */","lastModifiedDate":"2022-10-08"},{"lineNumber":23,"author":{"gitId":"LJXSean"},"content":"public class FindRecordCommandParser implements Parser\u003cFindRecordCommand\u003e {","lastModifiedDate":"2022-10-08"},{"lineNumber":24,"author":{"gitId":"LJXSean"},"content":"    public static final String PREFIX_NOT_SPECIFIED \u003d \"@#$fIndREC%^\u0026orDiNPUtVALid*()\";","lastModifiedDate":"2022-10-26"},{"lineNumber":25,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":26,"author":{"gitId":"LJXSean"},"content":"    /**","lastModifiedDate":"2022-10-08"},{"lineNumber":27,"author":{"gitId":"LJXSean"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand","lastModifiedDate":"2022-10-08"},{"lineNumber":28,"author":{"gitId":"LJXSean"},"content":"     * and returns a FindCommand object for execution.","lastModifiedDate":"2022-10-08"},{"lineNumber":29,"author":{"gitId":"LJXSean"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-10-08"},{"lineNumber":30,"author":{"gitId":"LJXSean"},"content":"     */","lastModifiedDate":"2022-10-08"},{"lineNumber":31,"author":{"gitId":"LJXSean"},"content":"    public FindRecordCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-08"},{"lineNumber":32,"author":{"gitId":"LJXSean"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2022-10-20"},{"lineNumber":33,"author":{"gitId":"LJXSean"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_RECORD, PREFIX_MEDICATION);","lastModifiedDate":"2022-10-20"},{"lineNumber":34,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":35,"author":{"gitId":"LJXSean"},"content":"        if (!argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2022-10-26"},{"lineNumber":36,"author":{"gitId":"LJXSean"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindRecordCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-20"},{"lineNumber":37,"author":{"gitId":"LJXSean"},"content":"        }","lastModifiedDate":"2022-10-20"},{"lineNumber":38,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":39,"author":{"gitId":"LJXSean"},"content":"        String recordDate \u003d ParserUtil.parseDateKeyword(","lastModifiedDate":"2022-10-26"},{"lineNumber":40,"author":{"gitId":"LJXSean"},"content":"                argMultimap.getValue(PREFIX_DATE).orElse(PREFIX_NOT_SPECIFIED));","lastModifiedDate":"2022-10-26"},{"lineNumber":41,"author":{"gitId":"LJXSean"},"content":"        List\u003cString\u003e recordKeywords \u003d ParserUtil.parseKeywords(","lastModifiedDate":"2022-10-26"},{"lineNumber":42,"author":{"gitId":"LJXSean"},"content":"                argMultimap.getValue(PREFIX_RECORD).orElse(PREFIX_NOT_SPECIFIED));","lastModifiedDate":"2022-10-26"},{"lineNumber":43,"author":{"gitId":"LJXSean"},"content":"        List\u003cString\u003e medicationKeywords \u003d ParserUtil.parseKeywords(","lastModifiedDate":"2022-10-26"},{"lineNumber":44,"author":{"gitId":"LJXSean"},"content":"                argMultimap.getValue(PREFIX_MEDICATION).orElse(PREFIX_NOT_SPECIFIED));","lastModifiedDate":"2022-10-26"},{"lineNumber":45,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":46,"author":{"gitId":"LJXSean"},"content":"        if (noPrefixesPresent(recordKeywords, medicationKeywords, recordDate)) {","lastModifiedDate":"2022-10-26"},{"lineNumber":47,"author":{"gitId":"LJXSean"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindRecordCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-11-01"},{"lineNumber":48,"author":{"gitId":"LJXSean"},"content":"        }","lastModifiedDate":"2022-10-26"},{"lineNumber":49,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":50,"author":{"gitId":"LJXSean"},"content":"        return new FindRecordCommand(","lastModifiedDate":"2022-10-26"},{"lineNumber":51,"author":{"gitId":"LJXSean"},"content":"                new RecordContainsKeywordsPredicate(recordKeywords, medicationKeywords, recordDate));","lastModifiedDate":"2022-10-26"},{"lineNumber":52,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":53,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":54,"author":{"gitId":"LJXSean"},"content":"    /**","lastModifiedDate":"2022-10-20"},{"lineNumber":55,"author":{"gitId":"LJXSean"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2022-10-20"},{"lineNumber":56,"author":{"gitId":"LJXSean"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2022-10-20"},{"lineNumber":57,"author":{"gitId":"LJXSean"},"content":"     */","lastModifiedDate":"2022-10-20"},{"lineNumber":58,"author":{"gitId":"LJXSean"},"content":"    private static boolean noPrefixesPresent(","lastModifiedDate":"2022-10-26"},{"lineNumber":59,"author":{"gitId":"LJXSean"},"content":"            List\u003cString\u003e recordKeywords, List\u003cString\u003e medicationKeywords, String date) {","lastModifiedDate":"2022-10-26"},{"lineNumber":60,"author":{"gitId":"LJXSean"},"content":"        return recordKeywords.isEmpty() \u0026\u0026 medicationKeywords.isEmpty() \u0026\u0026 date.isBlank();","lastModifiedDate":"2022-10-26"},{"lineNumber":61,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-20"},{"lineNumber":62,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":63,"author":{"gitId":"LJXSean"},"content":"    /**","lastModifiedDate":"2022-10-26"},{"lineNumber":64,"author":{"gitId":"LJXSean"},"content":"     * Returns true if find date is a valid month and date","lastModifiedDate":"2022-10-26"},{"lineNumber":65,"author":{"gitId":"LJXSean"},"content":"     * @param date date to be validated","lastModifiedDate":"2022-10-26"},{"lineNumber":66,"author":{"gitId":"LJXSean"},"content":"     */","lastModifiedDate":"2022-10-26"},{"lineNumber":67,"author":{"gitId":"LJXSean"},"content":"    public static boolean isValidFindDate(String date) {","lastModifiedDate":"2022-10-26"},{"lineNumber":68,"author":{"gitId":"LJXSean"},"content":"        ZoneId timeZone \u003d ZoneOffset.UTC;","lastModifiedDate":"2022-10-27"},{"lineNumber":69,"author":{"gitId":"LJXSean"},"content":"        DateTimeFormatter validateDate \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");","lastModifiedDate":"2022-10-26"},{"lineNumber":70,"author":{"gitId":"LJXSean"},"content":"        try {","lastModifiedDate":"2022-10-26"},{"lineNumber":71,"author":{"gitId":"LJXSean"},"content":"            LocalDateTime toFind \u003d LocalDateTime.parse(\"01-\" + date + \" 1400\", validateDate);","lastModifiedDate":"2022-10-27"},{"lineNumber":72,"author":{"gitId":"LJXSean"},"content":"            YearMonth currentMonth \u003d YearMonth.now(timeZone);","lastModifiedDate":"2022-10-27"},{"lineNumber":73,"author":{"gitId":"LJXSean"},"content":"            return !YearMonth.from(toFind).isAfter(currentMonth);","lastModifiedDate":"2022-10-27"},{"lineNumber":74,"author":{"gitId":"LJXSean"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-10-26"},{"lineNumber":75,"author":{"gitId":"LJXSean"},"content":"            return false;","lastModifiedDate":"2022-10-26"},{"lineNumber":76,"author":{"gitId":"LJXSean"},"content":"        }","lastModifiedDate":"2022-10-26"},{"lineNumber":77,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-26"},{"lineNumber":78,"author":{"gitId":"LJXSean"},"content":"}","lastModifiedDate":"2022-10-08"},{"lineNumber":79,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-26"}],"authorContributionMap":{"LJXSean":78,"EiffelLKF":1}},{"path":"src/main/java/seedu/address/logic/parser/ListRecordCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hanwenlai"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-06"},{"lineNumber":2,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":3,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-10"},{"lineNumber":4,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":5,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-06"},{"lineNumber":6,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.logic.commands.ListRecordCommand;","lastModifiedDate":"2022-10-10"},{"lineNumber":7,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-06"},{"lineNumber":8,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":9,"author":{"gitId":"hanwenlai"},"content":"/**","lastModifiedDate":"2022-10-06"},{"lineNumber":10,"author":{"gitId":"hanwenlai"},"content":" * Parses input arguments and creates a new ListRCommand object","lastModifiedDate":"2022-10-06"},{"lineNumber":11,"author":{"gitId":"hanwenlai"},"content":" */","lastModifiedDate":"2022-10-06"},{"lineNumber":12,"author":{"gitId":"hanwenlai"},"content":"public class ListRecordCommandParser implements Parser\u003cListRecordCommand\u003e {","lastModifiedDate":"2022-10-10"},{"lineNumber":13,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":14,"author":{"gitId":"hanwenlai"},"content":"    /**","lastModifiedDate":"2022-10-06"},{"lineNumber":15,"author":{"gitId":"hanwenlai"},"content":"     * Parses the given {@code String} of arguments in the context of the ListRCommand","lastModifiedDate":"2022-10-06"},{"lineNumber":16,"author":{"gitId":"hanwenlai"},"content":"     * and returns a ListRCommand object for execution.","lastModifiedDate":"2022-10-06"},{"lineNumber":17,"author":{"gitId":"hanwenlai"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-10-06"},{"lineNumber":18,"author":{"gitId":"hanwenlai"},"content":"     */","lastModifiedDate":"2022-10-06"},{"lineNumber":19,"author":{"gitId":"hanwenlai"},"content":"    public ListRecordCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-10"},{"lineNumber":20,"author":{"gitId":"hanwenlai"},"content":"        try {","lastModifiedDate":"2022-10-06"},{"lineNumber":21,"author":{"gitId":"hanwenlai"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2022-10-06"},{"lineNumber":22,"author":{"gitId":"hanwenlai"},"content":"            return new ListRecordCommand(index);","lastModifiedDate":"2022-10-10"},{"lineNumber":23,"author":{"gitId":"hanwenlai"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2022-10-06"},{"lineNumber":24,"author":{"gitId":"hanwenlai"},"content":"            throw new ParseException(","lastModifiedDate":"2022-10-06"},{"lineNumber":25,"author":{"gitId":"hanwenlai"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListRecordCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2022-10-10"},{"lineNumber":26,"author":{"gitId":"hanwenlai"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":27,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":28,"author":{"gitId":"hanwenlai"},"content":"}","lastModifiedDate":"2022-10-06"}],"authorContributionMap":{"hanwenlai":28}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"EiffelLKF"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-17"},{"lineNumber":6,"author":{"gitId":"LJXSean"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-20"},{"lineNumber":7,"author":{"gitId":"LJXSean"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-20"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":10,"author":{"gitId":"LJXSean"},"content":"import java.util.List;","lastModifiedDate":"2022-10-20"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-02-11"},{"lineNumber":16,"author":{"gitId":"LJXSean"},"content":"import seedu.address.logic.commands.FindRecordCommand;","lastModifiedDate":"2022-10-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.model.person.Birthdate;","lastModifiedDate":"2022-10-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2022-10-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2022-10-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2022-10-18"},{"lineNumber":23,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.Medication;","lastModifiedDate":"2022-10-17"},{"lineNumber":24,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2022-10-17"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-02-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":33,"author":{"gitId":"EiffelLKF"},"content":"    public static final String MESSAGE_INVALID_SPACING_NAME \u003d \"There can be at most 1 space between parts of patient \"","lastModifiedDate":"2022-11-02"},{"lineNumber":34,"author":{"gitId":"EiffelLKF"},"content":"            + \"name\\n(eg. n/FIRST_NAME MIDDLE_NAME LAST_NAME)\";","lastModifiedDate":"2022-11-02"},{"lineNumber":35,"author":{"gitId":"EiffelLKF"},"content":"    public static final String MESSAGE_INVALID_SPACING_ADDRESS \u003d \"There can be at most 1 space between parts of patient\"","lastModifiedDate":"2022-11-02"},{"lineNumber":36,"author":{"gitId":"EiffelLKF"},"content":"            + \" address\\n(eg. a/STREET_NAME BUILDING_NAME UNIT_NUMBER)\";","lastModifiedDate":"2022-11-02"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":60,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":64,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":65,"author":{"gitId":"EiffelLKF"},"content":"        if (containsIllegalSpacing(trimmedName)) {","lastModifiedDate":"2022-11-02"},{"lineNumber":66,"author":{"gitId":"EiffelLKF"},"content":"            throw new ParseException(MESSAGE_INVALID_SPACING_NAME);","lastModifiedDate":"2022-11-02"},{"lineNumber":67,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-11-02"},{"lineNumber":68,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":72,"author":{"gitId":"hanwenlai"},"content":"    /**","lastModifiedDate":"2022-10-18"},{"lineNumber":73,"author":{"gitId":"hanwenlai"},"content":"     * Parses a {@code String birthdate} into a {@code Birthdate}.","lastModifiedDate":"2022-10-19"},{"lineNumber":74,"author":{"gitId":"hanwenlai"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-10-18"},{"lineNumber":75,"author":{"gitId":"hanwenlai"},"content":"     *","lastModifiedDate":"2022-10-18"},{"lineNumber":76,"author":{"gitId":"hanwenlai"},"content":"     * @throws ParseException if the given {@code birthdate} is invalid.","lastModifiedDate":"2022-10-19"},{"lineNumber":77,"author":{"gitId":"hanwenlai"},"content":"     */","lastModifiedDate":"2022-10-18"},{"lineNumber":78,"author":{"gitId":"hanwenlai"},"content":"    public static Birthdate parseBirthdate(String birthdate) throws ParseException {","lastModifiedDate":"2022-10-19"},{"lineNumber":79,"author":{"gitId":"hanwenlai"},"content":"        requireNonNull(birthdate);","lastModifiedDate":"2022-10-19"},{"lineNumber":80,"author":{"gitId":"hanwenlai"},"content":"        String trimmedBirthdate \u003d birthdate.trim();","lastModifiedDate":"2022-10-19"},{"lineNumber":81,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":82,"author":{"gitId":"hanwenlai"},"content":"        if (!Birthdate.isValidDateFormat(trimmedBirthdate)) {","lastModifiedDate":"2022-10-27"},{"lineNumber":83,"author":{"gitId":"hanwenlai"},"content":"            throw new ParseException(Birthdate.MESSAGE_INVALID_DATE_FORMAT);","lastModifiedDate":"2022-10-27"},{"lineNumber":84,"author":{"gitId":"hanwenlai"},"content":"        }","lastModifiedDate":"2022-10-27"},{"lineNumber":85,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":86,"author":{"gitId":"hanwenlai"},"content":"        if (Birthdate.isFutureDate(trimmedBirthdate)) {","lastModifiedDate":"2022-10-27"},{"lineNumber":87,"author":{"gitId":"hanwenlai"},"content":"            throw new ParseException(Birthdate.MESSAGE_FUTURE_DATE);","lastModifiedDate":"2022-10-27"},{"lineNumber":88,"author":{"gitId":"hanwenlai"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":89,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":90,"author":{"gitId":"hanwenlai"},"content":"        return new Birthdate(trimmedBirthdate);","lastModifiedDate":"2022-10-19"},{"lineNumber":91,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":92,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":121,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":122,"author":{"gitId":"EiffelLKF"},"content":"        if (containsIllegalSpacing(trimmedAddress)) {","lastModifiedDate":"2022-11-02"},{"lineNumber":123,"author":{"gitId":"EiffelLKF"},"content":"            throw new ParseException(MESSAGE_INVALID_SPACING_ADDRESS);","lastModifiedDate":"2022-11-02"},{"lineNumber":124,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-11-02"},{"lineNumber":125,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":170,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":171,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":172,"author":{"gitId":"EiffelLKF"},"content":"     * Parses a {@code String recordData} into a {@String recordData}.","lastModifiedDate":"2022-10-17"},{"lineNumber":173,"author":{"gitId":"EiffelLKF"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-10-10"},{"lineNumber":174,"author":{"gitId":"EiffelLKF"},"content":"     *","lastModifiedDate":"2022-10-10"},{"lineNumber":175,"author":{"gitId":"EiffelLKF"},"content":"     * @throws ParseException if the given inputs is invalid.","lastModifiedDate":"2022-10-10"},{"lineNumber":176,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":177,"author":{"gitId":"EiffelLKF"},"content":"    public static String parseRecordData(String recordData) throws ParseException {","lastModifiedDate":"2022-10-17"},{"lineNumber":178,"author":{"gitId":"EiffelLKF"},"content":"        requireNonNull(recordData);","lastModifiedDate":"2022-10-17"},{"lineNumber":179,"author":{"gitId":"EiffelLKF"},"content":"        String trimmedData \u003d recordData.trim();","lastModifiedDate":"2022-10-10"},{"lineNumber":180,"author":{"gitId":"EiffelLKF"},"content":"        if (!Record.isValidRecordData(trimmedData)) {","lastModifiedDate":"2022-10-17"},{"lineNumber":181,"author":{"gitId":"EiffelLKF"},"content":"            throw new ParseException(Messages.MESSAGE_INVALID_RECORD_DATA_FORMAT);","lastModifiedDate":"2022-10-17"},{"lineNumber":182,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-17"},{"lineNumber":183,"author":{"gitId":"EiffelLKF"},"content":"        return trimmedData;","lastModifiedDate":"2022-10-17"},{"lineNumber":184,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":185,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":186,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-17"},{"lineNumber":187,"author":{"gitId":"EiffelLKF"},"content":"     * Parses a {@code String recordDate} into a {@code LocalDateTime}.","lastModifiedDate":"2022-10-17"},{"lineNumber":188,"author":{"gitId":"EiffelLKF"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-10-17"},{"lineNumber":189,"author":{"gitId":"EiffelLKF"},"content":"     *","lastModifiedDate":"2022-10-17"},{"lineNumber":190,"author":{"gitId":"EiffelLKF"},"content":"     * @throws ParseException if the given inputs is invalid.","lastModifiedDate":"2022-10-17"},{"lineNumber":191,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-17"},{"lineNumber":192,"author":{"gitId":"hanwenlai"},"content":"    public static LocalDateTime parseRecordDate(String recordDate) throws ParseException {","lastModifiedDate":"2022-10-27"},{"lineNumber":193,"author":{"gitId":"EiffelLKF"},"content":"        requireNonNull(recordDate);","lastModifiedDate":"2022-10-17"},{"lineNumber":194,"author":{"gitId":"EiffelLKF"},"content":"        String trimmedDate \u003d recordDate.trim();","lastModifiedDate":"2022-10-17"},{"lineNumber":195,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":196,"author":{"gitId":"hanwenlai"},"content":"        if (!Record.isValidDateFormat(trimmedDate)) {","lastModifiedDate":"2022-10-27"},{"lineNumber":197,"author":{"gitId":"hanwenlai"},"content":"            throw new ParseException(Record.MESSAGE_INVALID_DATE_FORMAT);","lastModifiedDate":"2022-10-27"},{"lineNumber":198,"author":{"gitId":"hanwenlai"},"content":"        }","lastModifiedDate":"2022-10-27"},{"lineNumber":199,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":200,"author":{"gitId":"hanwenlai"},"content":"        if (Record.isFutureDate(trimmedDate)) {","lastModifiedDate":"2022-10-27"},{"lineNumber":201,"author":{"gitId":"hanwenlai"},"content":"            throw new ParseException(Record.MESSAGE_FUTURE_DATE);","lastModifiedDate":"2022-10-27"},{"lineNumber":202,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-12"},{"lineNumber":203,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":204,"author":{"gitId":"EiffelLKF"},"content":"        return LocalDateTime.parse(trimmedDate, Record.DATE_FORMAT);","lastModifiedDate":"2022-10-17"},{"lineNumber":205,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":206,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":207,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-17"},{"lineNumber":208,"author":{"gitId":"EiffelLKF"},"content":"     * Parses a {@code String medication} into a {@code Medication}.","lastModifiedDate":"2022-10-17"},{"lineNumber":209,"author":{"gitId":"EiffelLKF"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-10-17"},{"lineNumber":210,"author":{"gitId":"EiffelLKF"},"content":"     *","lastModifiedDate":"2022-10-17"},{"lineNumber":211,"author":{"gitId":"EiffelLKF"},"content":"     * @throws ParseException if the given {@code medication} is invalid.","lastModifiedDate":"2022-10-17"},{"lineNumber":212,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-17"},{"lineNumber":213,"author":{"gitId":"EiffelLKF"},"content":"    public static Medication parseMedication(String medication) throws ParseException {","lastModifiedDate":"2022-10-17"},{"lineNumber":214,"author":{"gitId":"EiffelLKF"},"content":"        requireNonNull(medication);","lastModifiedDate":"2022-10-17"},{"lineNumber":215,"author":{"gitId":"EiffelLKF"},"content":"        String trimmedMedication \u003d medication.trim();","lastModifiedDate":"2022-10-17"},{"lineNumber":216,"author":{"gitId":"EiffelLKF"},"content":"        if (!Medication.isValidMedication(trimmedMedication)) {","lastModifiedDate":"2022-10-17"},{"lineNumber":217,"author":{"gitId":"EiffelLKF"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-17"},{"lineNumber":218,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-17"},{"lineNumber":219,"author":{"gitId":"EiffelLKF"},"content":"        return Medication.of(trimmedMedication);","lastModifiedDate":"2022-10-17"},{"lineNumber":220,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":221,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":222,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-17"},{"lineNumber":223,"author":{"gitId":"EiffelLKF"},"content":"     * Parses {@code Collection\u003cString\u003e medications} into a {@code Set\u003cMedication\u003e}.","lastModifiedDate":"2022-10-17"},{"lineNumber":224,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-17"},{"lineNumber":225,"author":{"gitId":"EiffelLKF"},"content":"    public static Set\u003cMedication\u003e parseMedications(Collection\u003cString\u003e medications) throws ParseException {","lastModifiedDate":"2022-10-17"},{"lineNumber":226,"author":{"gitId":"EiffelLKF"},"content":"        requireNonNull(medications);","lastModifiedDate":"2022-10-17"},{"lineNumber":227,"author":{"gitId":"EiffelLKF"},"content":"        final Set\u003cMedication\u003e medicationSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2022-10-17"},{"lineNumber":228,"author":{"gitId":"EiffelLKF"},"content":"        for (String medicationName : medications) {","lastModifiedDate":"2022-10-17"},{"lineNumber":229,"author":{"gitId":"EiffelLKF"},"content":"            medicationSet.add(parseMedication(medicationName));","lastModifiedDate":"2022-10-17"},{"lineNumber":230,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-17"},{"lineNumber":231,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":232,"author":{"gitId":"EiffelLKF"},"content":"        // Default case","lastModifiedDate":"2022-10-17"},{"lineNumber":233,"author":{"gitId":"EiffelLKF"},"content":"        if (medicationSet.isEmpty()) {","lastModifiedDate":"2022-10-17"},{"lineNumber":234,"author":{"gitId":"EiffelLKF"},"content":"            medicationSet.add(Medication.of(Medication.MESSAGE_NO_MEDICATION_GIVEN));","lastModifiedDate":"2022-10-17"},{"lineNumber":235,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-10"},{"lineNumber":236,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":237,"author":{"gitId":"EiffelLKF"},"content":"        return medicationSet;","lastModifiedDate":"2022-10-17"},{"lineNumber":238,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":239,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":240,"author":{"gitId":"LJXSean"},"content":"    /**","lastModifiedDate":"2022-10-20"},{"lineNumber":241,"author":{"gitId":"LJXSean"},"content":"     * Parses {@code String keywords} into a {@code List\u003cString\u003e}.","lastModifiedDate":"2022-10-20"},{"lineNumber":242,"author":{"gitId":"LJXSean"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-10-20"},{"lineNumber":243,"author":{"gitId":"LJXSean"},"content":"     */","lastModifiedDate":"2022-10-20"},{"lineNumber":244,"author":{"gitId":"LJXSean"},"content":"    public static List\u003cString\u003e parseKeywords(String keywords) throws ParseException {","lastModifiedDate":"2022-10-26"},{"lineNumber":245,"author":{"gitId":"LJXSean"},"content":"        // currently does not throw error when empty field eg. r/ or m/","lastModifiedDate":"2022-10-20"},{"lineNumber":246,"author":{"gitId":"LJXSean"},"content":"        String trimmedArgs \u003d keywords.trim();","lastModifiedDate":"2022-10-20"},{"lineNumber":247,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":248,"author":{"gitId":"LJXSean"},"content":"        if (trimmedArgs.equals(FindRecordCommandParser.PREFIX_NOT_SPECIFIED)) {","lastModifiedDate":"2022-10-26"},{"lineNumber":249,"author":{"gitId":"LJXSean"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-20"},{"lineNumber":250,"author":{"gitId":"LJXSean"},"content":"        } else if (trimmedArgs.isBlank()) {","lastModifiedDate":"2022-10-26"},{"lineNumber":251,"author":{"gitId":"LJXSean"},"content":"            throw new ParseException(FindRecordCommand.MESSAGE_EMPTY_PREFIX);","lastModifiedDate":"2022-10-26"},{"lineNumber":252,"author":{"gitId":"LJXSean"},"content":"        } else {","lastModifiedDate":"2022-10-20"},{"lineNumber":253,"author":{"gitId":"LJXSean"},"content":"            String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2022-10-20"},{"lineNumber":254,"author":{"gitId":"LJXSean"},"content":"            return Arrays.asList(nameKeywords);","lastModifiedDate":"2022-10-20"},{"lineNumber":255,"author":{"gitId":"LJXSean"},"content":"        }","lastModifiedDate":"2022-10-20"},{"lineNumber":256,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-20"},{"lineNumber":257,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":258,"author":{"gitId":"LJXSean"},"content":"    /**","lastModifiedDate":"2022-10-20"},{"lineNumber":259,"author":{"gitId":"LJXSean"},"content":"     * Parses a {@code String dateToParse} into a {@code String}.","lastModifiedDate":"2022-10-26"},{"lineNumber":260,"author":{"gitId":"LJXSean"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-10-20"},{"lineNumber":261,"author":{"gitId":"LJXSean"},"content":"     *","lastModifiedDate":"2022-10-20"},{"lineNumber":262,"author":{"gitId":"LJXSean"},"content":"     * @throws ParseException if the given inputs is invalid.","lastModifiedDate":"2022-10-20"},{"lineNumber":263,"author":{"gitId":"LJXSean"},"content":"     */","lastModifiedDate":"2022-10-20"},{"lineNumber":264,"author":{"gitId":"LJXSean"},"content":"    public static String parseDateKeyword(String dateToParse) throws ParseException {","lastModifiedDate":"2022-10-26"},{"lineNumber":265,"author":{"gitId":"LJXSean"},"content":"        String trimmedArgs \u003d dateToParse.trim();","lastModifiedDate":"2022-10-26"},{"lineNumber":266,"author":{"gitId":"LJXSean"},"content":"        boolean matcher \u003d trimmedArgs.matches(\"^(?\u003d(?:[^-]*-){1}[^-]*$)(?\u003d(?:\\\\D*\\\\d){6}\\\\D*$).*$\");","lastModifiedDate":"2022-10-26"},{"lineNumber":267,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":268,"author":{"gitId":"LJXSean"},"content":"        if (trimmedArgs.equals(FindRecordCommandParser.PREFIX_NOT_SPECIFIED)) {","lastModifiedDate":"2022-10-26"},{"lineNumber":269,"author":{"gitId":"LJXSean"},"content":"            return \"\";","lastModifiedDate":"2022-10-26"},{"lineNumber":270,"author":{"gitId":"LJXSean"},"content":"        } else if (trimmedArgs.isBlank()) {","lastModifiedDate":"2022-10-26"},{"lineNumber":271,"author":{"gitId":"LJXSean"},"content":"            throw new ParseException(FindRecordCommand.MESSAGE_EMPTY_PREFIX);","lastModifiedDate":"2022-10-26"},{"lineNumber":272,"author":{"gitId":"LJXSean"},"content":"        } else if (matcher \u0026\u0026 FindRecordCommandParser.isValidFindDate(trimmedArgs)) {","lastModifiedDate":"2022-10-26"},{"lineNumber":273,"author":{"gitId":"LJXSean"},"content":"            return trimmedArgs;","lastModifiedDate":"2022-10-26"},{"lineNumber":274,"author":{"gitId":"LJXSean"},"content":"        } else {","lastModifiedDate":"2022-10-20"},{"lineNumber":275,"author":{"gitId":"LJXSean"},"content":"            throw new ParseException(FindRecordCommand.MESSAGE_INVALID_FIND_DATE_FORMAT);","lastModifiedDate":"2022-10-26"},{"lineNumber":276,"author":{"gitId":"LJXSean"},"content":"        }","lastModifiedDate":"2022-10-20"},{"lineNumber":277,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-20"},{"lineNumber":278,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":279,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-11-02"},{"lineNumber":280,"author":{"gitId":"EiffelLKF"},"content":"     * Checks input string for illegal spacing. Spacing is considered illegal if there are","lastModifiedDate":"2022-11-02"},{"lineNumber":281,"author":{"gitId":"EiffelLKF"},"content":"     * more than 1 consecutive spaces between substrings.","lastModifiedDate":"2022-11-02"},{"lineNumber":282,"author":{"gitId":"EiffelLKF"},"content":"     *","lastModifiedDate":"2022-11-02"},{"lineNumber":283,"author":{"gitId":"EiffelLKF"},"content":"     * @param in String to be checked.","lastModifiedDate":"2022-11-02"},{"lineNumber":284,"author":{"gitId":"EiffelLKF"},"content":"     * @return True if string contains additional (illegal) spaces. False otherwise.","lastModifiedDate":"2022-11-02"},{"lineNumber":285,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-11-02"},{"lineNumber":286,"author":{"gitId":"EiffelLKF"},"content":"    private static boolean containsIllegalSpacing(String in) {","lastModifiedDate":"2022-11-02"},{"lineNumber":287,"author":{"gitId":"EiffelLKF"},"content":"        String trimmedArgs \u003d in.trim();","lastModifiedDate":"2022-11-02"},{"lineNumber":288,"author":{"gitId":"EiffelLKF"},"content":"        String[] strArr \u003d trimmedArgs.split(\" \");","lastModifiedDate":"2022-11-02"},{"lineNumber":289,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":290,"author":{"gitId":"EiffelLKF"},"content":"        for (String str : strArr) {","lastModifiedDate":"2022-11-02"},{"lineNumber":291,"author":{"gitId":"EiffelLKF"},"content":"            // Consecutive spaces are split to \"\"","lastModifiedDate":"2022-11-02"},{"lineNumber":292,"author":{"gitId":"EiffelLKF"},"content":"            if (str.equals(\"\")) {","lastModifiedDate":"2022-11-02"},{"lineNumber":293,"author":{"gitId":"EiffelLKF"},"content":"                return true;","lastModifiedDate":"2022-11-02"},{"lineNumber":294,"author":{"gitId":"EiffelLKF"},"content":"            }","lastModifiedDate":"2022-11-02"},{"lineNumber":295,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-11-02"},{"lineNumber":296,"author":{"gitId":"EiffelLKF"},"content":"        return false;","lastModifiedDate":"2022-11-02"},{"lineNumber":297,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-11-02"},{"lineNumber":298,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"hanwenlai":25,"LJXSean":43,"EiffelLKF":106,"-":124}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.UniquePersonList;","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)","lastModifiedDate":"2018-04-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;","lastModifiedDate":"2016-08-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();","lastModifiedDate":"2016-08-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public AddressBook() {}","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}","lastModifiedDate":"2018-03-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);","lastModifiedDate":"2016-10-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}.","lastModifiedDate":"2017-08-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());","lastModifiedDate":"2018-03-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    //// person-level operations","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return persons.contains(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"anthonyhoth"},"content":"    /**","lastModifiedDate":"2022-10-25"},{"lineNumber":70,"author":{"gitId":"anthonyhoth"},"content":"     * Returns true if a person with a same name in lower case exists in the address book.","lastModifiedDate":"2022-10-25"},{"lineNumber":71,"author":{"gitId":"anthonyhoth"},"content":"     */","lastModifiedDate":"2022-10-25"},{"lineNumber":72,"author":{"gitId":"anthonyhoth"},"content":"    public boolean hasSimilarName(Person person) {","lastModifiedDate":"2022-10-25"},{"lineNumber":73,"author":{"gitId":"anthonyhoth"},"content":"        requireNonNull(person);","lastModifiedDate":"2022-10-25"},{"lineNumber":74,"author":{"gitId":"anthonyhoth"},"content":"        return persons.hasSimilarName(person);","lastModifiedDate":"2022-10-25"},{"lineNumber":75,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-25"},{"lineNumber":76,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Adds a person to the address book.","lastModifiedDate":"2016-09-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {","lastModifiedDate":"2018-08-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        persons.add(p);","lastModifiedDate":"2018-03-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2018-01-10"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);","lastModifiedDate":"2018-03-29"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2017-08-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {","lastModifiedDate":"2018-08-07"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        persons.remove(key);","lastModifiedDate":"2018-02-28"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList().size() + \" persons\";","lastModifiedDate":"2018-04-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        // TODO: refine later","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();","lastModifiedDate":"2018-04-05"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                \u0026\u0026 persons.equals(((AddressBook) other).persons));","lastModifiedDate":"2018-08-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        return persons.hashCode();","lastModifiedDate":"2018-03-29"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"anthonyhoth":8,"-":120}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":9,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2022-10-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"     * {@code Predicate} that always evaluate to true","lastModifiedDate":"2022-10-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2018-01-10"},{"lineNumber":19,"author":{"gitId":"hanwenlai"},"content":"    Predicate\u003cRecord\u003e PREDICATE_SHOW_ALL_RECORDS \u003d unused -\u003e true;","lastModifiedDate":"2022-10-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"marclzh"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2022-10-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"marclzh"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2022-10-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":52,"author":{"gitId":"marclzh"},"content":"     * Returns the AddressBook","lastModifiedDate":"2022-10-10"},{"lineNumber":53,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":54,"author":{"gitId":"marclzh"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2022-10-10"},{"lineNumber":55,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"anthonyhoth"},"content":"    /**","lastModifiedDate":"2022-10-25"},{"lineNumber":67,"author":{"gitId":"anthonyhoth"},"content":"     * Returns true if a person with the same name in lower case as another person.","lastModifiedDate":"2022-10-25"},{"lineNumber":68,"author":{"gitId":"anthonyhoth"},"content":"     */","lastModifiedDate":"2022-10-25"},{"lineNumber":69,"author":{"gitId":"anthonyhoth"},"content":"    boolean hasSimilarName(Person person);","lastModifiedDate":"2022-10-25"},{"lineNumber":70,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Deletes the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * The person must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Adds the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    void addPerson(Person person);","lastModifiedDate":"2018-08-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":90,"author":{"gitId":"anthonyhoth"},"content":"    /**","lastModifiedDate":"2022-10-18"},{"lineNumber":91,"author":{"gitId":"anthonyhoth"},"content":"     * Replaces the given record {@code target} with {@code editedRecord}.","lastModifiedDate":"2022-10-18"},{"lineNumber":92,"author":{"gitId":"anthonyhoth"},"content":"     * {@code target} must exist in the patient\u0027s record list.","lastModifiedDate":"2022-10-18"},{"lineNumber":93,"author":{"gitId":"anthonyhoth"},"content":"     * The record identity of {@code editedRecord} must not be the same as another existing record in the record list.","lastModifiedDate":"2022-10-18"},{"lineNumber":94,"author":{"gitId":"anthonyhoth"},"content":"     */","lastModifiedDate":"2022-10-18"},{"lineNumber":95,"author":{"gitId":"anthonyhoth"},"content":"    void setRecord(Record target, Record editedRecord);","lastModifiedDate":"2022-10-18"},{"lineNumber":96,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":97,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":98,"author":{"gitId":"EiffelLKF"},"content":"     * Returns true if a record with the same identity as {@code record} exists in the record list.","lastModifiedDate":"2022-10-10"},{"lineNumber":99,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":100,"author":{"gitId":"EiffelLKF"},"content":"    boolean hasRecord(Record record);","lastModifiedDate":"2022-10-10"},{"lineNumber":101,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":102,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":103,"author":{"gitId":"EiffelLKF"},"content":"     * Adds the given record.","lastModifiedDate":"2022-10-10"},{"lineNumber":104,"author":{"gitId":"EiffelLKF"},"content":"     * {@code person} must not already exist in the record list.","lastModifiedDate":"2022-10-10"},{"lineNumber":105,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":106,"author":{"gitId":"EiffelLKF"},"content":"    void addRecord(Record record);","lastModifiedDate":"2022-10-10"},{"lineNumber":107,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":108,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":109,"author":{"gitId":"marclzh"},"content":"     * Returns an unmodifiable view of the filtered person list","lastModifiedDate":"2022-10-10"},{"lineNumber":110,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":115,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-10-10"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2018-01-10"},{"lineNumber":119,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":120,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":121,"author":{"gitId":"marclzh"},"content":"     * Returns an unmodifiable view of the filtered record list","lastModifiedDate":"2022-10-10"},{"lineNumber":122,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":123,"author":{"gitId":"LJXSean"},"content":"    ObservableList\u003cRecord\u003e getFilteredRecordList();","lastModifiedDate":"2022-10-08"},{"lineNumber":124,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":125,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":126,"author":{"gitId":"marclzh"},"content":"     * Sets the filtered record list to the record list of the given {@code person}.","lastModifiedDate":"2022-10-10"},{"lineNumber":127,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-10-10"},{"lineNumber":128,"author":{"gitId":"marclzh"},"content":"     * @param person The person whose record list is to be displayed.","lastModifiedDate":"2022-10-10"},{"lineNumber":129,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":130,"author":{"gitId":"marclzh"},"content":"    void setFilteredRecordList(Person person);","lastModifiedDate":"2022-10-10"},{"lineNumber":131,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":132,"author":{"gitId":"LJXSean"},"content":"    /**","lastModifiedDate":"2022-10-08"},{"lineNumber":133,"author":{"gitId":"LJXSean"},"content":"     * Updates the filter of the filtered record list to filter by the given {@code predicate}.","lastModifiedDate":"2022-10-08"},{"lineNumber":134,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-10-10"},{"lineNumber":135,"author":{"gitId":"LJXSean"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2022-10-08"},{"lineNumber":136,"author":{"gitId":"LJXSean"},"content":"     */","lastModifiedDate":"2022-10-08"},{"lineNumber":137,"author":{"gitId":"LJXSean"},"content":"    void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate);","lastModifiedDate":"2022-10-08"},{"lineNumber":138,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":139,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":140,"author":{"gitId":"marclzh"},"content":"     * Clears the record list.","lastModifiedDate":"2022-10-10"},{"lineNumber":141,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":142,"author":{"gitId":"marclzh"},"content":"    void clearRecords();","lastModifiedDate":"2022-10-10"},{"lineNumber":143,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":144,"author":{"gitId":"hanwenlai"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":145,"author":{"gitId":"marclzh"},"content":"     * Deletes the given record.","lastModifiedDate":"2022-10-10"},{"lineNumber":146,"author":{"gitId":"marclzh"},"content":"     * {@code record} must exist in the filtered record list.","lastModifiedDate":"2022-10-10"},{"lineNumber":147,"author":{"gitId":"hanwenlai"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":148,"author":{"gitId":"marclzh"},"content":"    void deleteRecord(Record record);","lastModifiedDate":"2022-10-10"},{"lineNumber":149,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":150,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-11"},{"lineNumber":151,"author":{"gitId":"EiffelLKF"},"content":"     * Retrieve flag raised by record list being displayed.","lastModifiedDate":"2022-10-11"},{"lineNumber":152,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-11"},{"lineNumber":153,"author":{"gitId":"EiffelLKF"},"content":"    boolean isRecordListDisplayed();","lastModifiedDate":"2022-10-11"},{"lineNumber":154,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":155,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-11"},{"lineNumber":156,"author":{"gitId":"EiffelLKF"},"content":"     * Flag to determine is record list is being displayed.","lastModifiedDate":"2022-10-11"},{"lineNumber":157,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-11"},{"lineNumber":158,"author":{"gitId":"EiffelLKF"},"content":"    void setRecordListDisplayed(boolean b);","lastModifiedDate":"2022-10-11"},{"lineNumber":159,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":160,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-11"},{"lineNumber":161,"author":{"gitId":"EiffelLKF"},"content":"     * Set the person whose records are being displayed / processed.","lastModifiedDate":"2022-10-11"},{"lineNumber":162,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-11"},{"lineNumber":163,"author":{"gitId":"EiffelLKF"},"content":"    void setPersonWithRecords(Person person);","lastModifiedDate":"2022-10-11"},{"lineNumber":164,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":165,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"anthonyhoth":13,"marclzh":31,"hanwenlai":3,"LJXSean":8,"EiffelLKF":28,"-":82}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.model.person.Person.DEFAULT_ADDRESS;","lastModifiedDate":"2022-10-18"},{"lineNumber":6,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.model.person.Person.DEFAULT_BIRTHDATE;","lastModifiedDate":"2022-10-19"},{"lineNumber":7,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.model.person.Person.DEFAULT_EMAIL;","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.model.person.Person.DEFAULT_NAME;","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.model.person.Person.DEFAULT_PHONE;","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"hanwenlai"},"content":"import java.util.Collections;","lastModifiedDate":"2022-10-14"},{"lineNumber":13,"author":{"gitId":"EiffelLKF"},"content":"import java.util.HashSet;","lastModifiedDate":"2022-10-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":17,"author":{"gitId":"LJXSean"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2022-10-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":22,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2022-10-18"},{"lineNumber":23,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-18"},{"lineNumber":24,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.model.person.Birthdate;","lastModifiedDate":"2022-10-19"},{"lineNumber":25,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.model.person.DisplayedPerson;","lastModifiedDate":"2022-10-18"},{"lineNumber":26,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2022-10-18"},{"lineNumber":27,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2022-10-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-18"},{"lineNumber":29,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2022-10-18"},{"lineNumber":30,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2022-10-17"},{"lineNumber":31,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.RecordList;","lastModifiedDate":"2022-10-17"},{"lineNumber":32,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2022-10-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":42,"author":{"gitId":"EiffelLKF"},"content":"    private final DisplayedPerson personWithRecords; // Person whose records are being displayed (if any)","lastModifiedDate":"2022-10-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2018-01-10"},{"lineNumber":44,"author":{"gitId":"LJXSean"},"content":"    private FilteredList\u003cRecord\u003e filteredRecords;","lastModifiedDate":"2022-10-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"EiffelLKF"},"content":"    private boolean isRecordListDisplayed \u003d false;","lastModifiedDate":"2022-10-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs.","lastModifiedDate":"2016-12-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);","lastModifiedDate":"2017-05-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);","lastModifiedDate":"2016-12-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":58,"author":{"gitId":"EiffelLKF"},"content":"        Person placeholderPerson \u003d new Person(new Name(DEFAULT_NAME),","lastModifiedDate":"2022-10-11"},{"lineNumber":59,"author":{"gitId":"hanwenlai"},"content":"                new Birthdate(DEFAULT_BIRTHDATE),","lastModifiedDate":"2022-10-19"},{"lineNumber":60,"author":{"gitId":"EiffelLKF"},"content":"                new Phone(DEFAULT_PHONE),","lastModifiedDate":"2022-10-11"},{"lineNumber":61,"author":{"gitId":"EiffelLKF"},"content":"                new Email(DEFAULT_EMAIL),","lastModifiedDate":"2022-10-11"},{"lineNumber":62,"author":{"gitId":"EiffelLKF"},"content":"                new Address(DEFAULT_ADDRESS),","lastModifiedDate":"2022-10-11"},{"lineNumber":63,"author":{"gitId":"EiffelLKF"},"content":"                new HashSet\u003cTag\u003e(),","lastModifiedDate":"2022-10-11"},{"lineNumber":64,"author":{"gitId":"marclzh"},"content":"                new RecordList(),","lastModifiedDate":"2022-10-15"},{"lineNumber":65,"author":{"gitId":"marclzh"},"content":"                Appointment.of(Appointment.NO_APPOINTMENT_SCHEDULED));","lastModifiedDate":"2022-10-16"},{"lineNumber":66,"author":{"gitId":"EiffelLKF"},"content":"        this.personWithRecords \u003d new DisplayedPerson(placeholderPerson);","lastModifiedDate":"2022-10-11"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":68,"author":{"gitId":"hanwenlai"},"content":"        filteredRecords \u003d new FilteredList\u003c\u003e(FXCollections.observableArrayList()); // empty FilteredList","lastModifiedDate":"2022-10-10"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());","lastModifiedDate":"2016-09-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2018-11-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2016-09-21"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":128,"author":{"gitId":"anthonyhoth"},"content":"    @Override","lastModifiedDate":"2022-10-25"},{"lineNumber":129,"author":{"gitId":"anthonyhoth"},"content":"    public boolean hasSimilarName(Person person) {","lastModifiedDate":"2022-10-25"},{"lineNumber":130,"author":{"gitId":"anthonyhoth"},"content":"        requireNonNull(person);","lastModifiedDate":"2022-10-25"},{"lineNumber":131,"author":{"gitId":"anthonyhoth"},"content":"        return addressBook.hasSimilarName(person);","lastModifiedDate":"2022-10-25"},{"lineNumber":132,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-25"},{"lineNumber":133,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2018-08-15"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);","lastModifiedDate":"2019-01-25"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);","lastModifiedDate":"2019-01-25"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":152,"author":{"gitId":"EiffelLKF"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Record List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-10-10"},{"lineNumber":153,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":154,"author":{"gitId":"EiffelLKF"},"content":"    @Override","lastModifiedDate":"2022-10-11"},{"lineNumber":155,"author":{"gitId":"EiffelLKF"},"content":"    public void setRecordListDisplayed(boolean b) {","lastModifiedDate":"2022-10-11"},{"lineNumber":156,"author":{"gitId":"EiffelLKF"},"content":"        this.isRecordListDisplayed \u003d b;","lastModifiedDate":"2022-10-11"},{"lineNumber":157,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":158,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":159,"author":{"gitId":"EiffelLKF"},"content":"    @Override","lastModifiedDate":"2022-10-11"},{"lineNumber":160,"author":{"gitId":"EiffelLKF"},"content":"    public boolean isRecordListDisplayed() {","lastModifiedDate":"2022-10-11"},{"lineNumber":161,"author":{"gitId":"EiffelLKF"},"content":"        return isRecordListDisplayed;","lastModifiedDate":"2022-10-11"},{"lineNumber":162,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":163,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":164,"author":{"gitId":"EiffelLKF"},"content":"    @Override","lastModifiedDate":"2022-10-11"},{"lineNumber":165,"author":{"gitId":"EiffelLKF"},"content":"    public void setPersonWithRecords(Person person) {","lastModifiedDate":"2022-10-11"},{"lineNumber":166,"author":{"gitId":"EiffelLKF"},"content":"        personWithRecords.setDisplayedPerson(person, this.addressBook);","lastModifiedDate":"2022-10-11"},{"lineNumber":167,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":168,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":169,"author":{"gitId":"EiffelLKF"},"content":"    @Override","lastModifiedDate":"2022-10-10"},{"lineNumber":170,"author":{"gitId":"EiffelLKF"},"content":"    public void addRecord(Record record) {","lastModifiedDate":"2022-10-10"},{"lineNumber":171,"author":{"gitId":"EiffelLKF"},"content":"        personWithRecords.addRecord(record);","lastModifiedDate":"2022-10-10"},{"lineNumber":172,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":173,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":174,"author":{"gitId":"EiffelLKF"},"content":"    @Override","lastModifiedDate":"2022-10-10"},{"lineNumber":175,"author":{"gitId":"EiffelLKF"},"content":"    public boolean hasRecord(Record record) {","lastModifiedDate":"2022-10-10"},{"lineNumber":176,"author":{"gitId":"EiffelLKF"},"content":"        return personWithRecords.hasRecord(record);","lastModifiedDate":"2022-10-10"},{"lineNumber":177,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":178,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":179,"author":{"gitId":"EiffelLKF"},"content":"    @Override","lastModifiedDate":"2022-10-11"},{"lineNumber":180,"author":{"gitId":"EiffelLKF"},"content":"    public void deleteRecord(Record record) {","lastModifiedDate":"2022-10-11"},{"lineNumber":181,"author":{"gitId":"EiffelLKF"},"content":"        personWithRecords.deleteRecord(record);","lastModifiedDate":"2022-10-11"},{"lineNumber":182,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":183,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":184,"author":{"gitId":"EiffelLKF"},"content":"    @Override","lastModifiedDate":"2022-10-11"},{"lineNumber":185,"author":{"gitId":"EiffelLKF"},"content":"    public void clearRecords() {","lastModifiedDate":"2022-10-11"},{"lineNumber":186,"author":{"gitId":"EiffelLKF"},"content":"        personWithRecords.clearRecords();","lastModifiedDate":"2022-10-11"},{"lineNumber":187,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":188,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":189,"author":{"gitId":"anthonyhoth"},"content":"    @Override","lastModifiedDate":"2022-10-18"},{"lineNumber":190,"author":{"gitId":"anthonyhoth"},"content":"    public void setRecord(Record target, Record editedRecord) {","lastModifiedDate":"2022-10-18"},{"lineNumber":191,"author":{"gitId":"anthonyhoth"},"content":"        requireAllNonNull(target, editedRecord);","lastModifiedDate":"2022-10-18"},{"lineNumber":192,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":193,"author":{"gitId":"anthonyhoth"},"content":"        personWithRecords.setRecord(target, editedRecord);","lastModifiedDate":"2022-10-18"},{"lineNumber":194,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":195,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":199,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2018-01-10"},{"lineNumber":200,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":201,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        return filteredPersons;","lastModifiedDate":"2018-12-09"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":213,"author":{"gitId":"LJXSean"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Record List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-10-08"},{"lineNumber":214,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":215,"author":{"gitId":"LJXSean"},"content":"    /**","lastModifiedDate":"2022-10-08"},{"lineNumber":216,"author":{"gitId":"LJXSean"},"content":"     * Returns an unmodifiable view of the list of {@code Record} backed by the internal list of","lastModifiedDate":"2022-10-08"},{"lineNumber":217,"author":{"gitId":"hanwenlai"},"content":"     * {@code versionedAddressBook}. List of {@code Record} returned is sorted by Date, in","lastModifiedDate":"2022-10-15"},{"lineNumber":218,"author":{"gitId":"hanwenlai"},"content":"     * descending order.","lastModifiedDate":"2022-10-15"},{"lineNumber":219,"author":{"gitId":"LJXSean"},"content":"     */","lastModifiedDate":"2022-10-08"},{"lineNumber":220,"author":{"gitId":"LJXSean"},"content":"    @Override","lastModifiedDate":"2022-10-08"},{"lineNumber":221,"author":{"gitId":"LJXSean"},"content":"    public ObservableList\u003cRecord\u003e getFilteredRecordList() {","lastModifiedDate":"2022-10-08"},{"lineNumber":222,"author":{"gitId":"hanwenlai"},"content":"        return filteredRecords.sorted(Collections.reverseOrder());","lastModifiedDate":"2022-10-14"},{"lineNumber":223,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":224,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":225,"author":{"gitId":"LJXSean"},"content":"    @Override","lastModifiedDate":"2022-10-08"},{"lineNumber":226,"author":{"gitId":"LJXSean"},"content":"    public void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate) {","lastModifiedDate":"2022-10-08"},{"lineNumber":227,"author":{"gitId":"LJXSean"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2022-10-08"},{"lineNumber":228,"author":{"gitId":"LJXSean"},"content":"        filteredRecords.setPredicate(predicate);","lastModifiedDate":"2022-10-08"},{"lineNumber":229,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":230,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":231,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":232,"author":{"gitId":"anthonyhoth"},"content":"    @Override","lastModifiedDate":"2022-10-10"},{"lineNumber":233,"author":{"gitId":"hanwenlai"},"content":"    public void setFilteredRecordList(Person person) {","lastModifiedDate":"2022-10-10"},{"lineNumber":234,"author":{"gitId":"EiffelLKF"},"content":"        setPersonWithRecords(person);","lastModifiedDate":"2022-10-11"},{"lineNumber":235,"author":{"gitId":"EiffelLKF"},"content":"        filteredRecords \u003d new FilteredList\u003c\u003e(personWithRecords.getUnmodifiableRecords());","lastModifiedDate":"2022-10-11"},{"lineNumber":236,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":237,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":242,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":247,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)","lastModifiedDate":"2019-01-25"},{"lineNumber":253,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)","lastModifiedDate":"2018-11-27"},{"lineNumber":254,"author":{"gitId":"LJXSean"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons)","lastModifiedDate":"2022-10-19"},{"lineNumber":255,"author":{"gitId":"LJXSean"},"content":"                \u0026\u0026 filteredRecords.equals(other.filteredRecords);","lastModifiedDate":"2022-10-19"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":258,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"anthonyhoth":14,"marclzh":2,"hanwenlai":19,"LJXSean":21,"EiffelLKF":52,"-":150}},{"path":"src/main/java/seedu/address/model/person/Address.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.commons.util.StringUtil.toProperCase;","lastModifiedDate":"2022-11-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s address in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Address {","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"    /* Displayed address value is stored as proper case. */","lastModifiedDate":"2022-11-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"    /* Lowercase address used for duplicate detection.*/","lastModifiedDate":"2022-11-01"},{"lineNumber":24,"author":{"gitId":"marclzh"},"content":"    public final String lowerCaseAddress;","lastModifiedDate":"2022-11-01"},{"lineNumber":25,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Constructs an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @param address A valid address.","lastModifiedDate":"2017-05-30"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public Address(String address) {","lastModifiedDate":"2017-05-30"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":35,"author":{"gitId":"marclzh"},"content":"        lowerCaseAddress \u003d address.toLowerCase();","lastModifiedDate":"2022-11-01"},{"lineNumber":36,"author":{"gitId":"marclzh"},"content":"        value \u003d toProperCase(address);","lastModifiedDate":"2022-11-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static boolean isValidAddress(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                || (other instanceof Address // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"marclzh"},"content":"                \u0026\u0026 lowerCaseAddress.equals(((Address) other).lowerCaseAddress)); // state check","lastModifiedDate":"2022-11-01"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"marclzh":7,"EiffelLKF":1,"-":54}},{"path":"src/main/java/seedu/address/model/person/Appointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package seedu.address.model.person;","lastModifiedDate":"2022-10-15"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-15"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATE_FORMAT;","lastModifiedDate":"2022-10-15"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-10-15"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-15"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-10-15"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-10-15"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"import java.time.format.ResolverStyle;","lastModifiedDate":"2022-11-01"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"/**","lastModifiedDate":"2022-10-15"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":" * Represents a person\u0027s Appointment in the address group.","lastModifiedDate":"2022-10-15"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":" */","lastModifiedDate":"2022-10-15"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"public class Appointment {","lastModifiedDate":"2022-10-15"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"    public static final DateTimeFormatter DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd-MM-uuuu HHmm\")","lastModifiedDate":"2022-11-01"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"            .withResolverStyle(ResolverStyle.STRICT);","lastModifiedDate":"2022-11-01"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"    public static final String NO_APPOINTMENT_SCHEDULED \u003d \"No appointment scheduled!\";","lastModifiedDate":"2022-10-15"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Appointment dates have to be of format dd-MM-yyyy HHmm! \"","lastModifiedDate":"2022-11-01"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"            + \"Please also ensure this is a valid date!\";","lastModifiedDate":"2022-11-01"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"    public static final String MESSAGE_DATE_PAST \u003d \"Appointment dates have to be scheduled in the future!\";","lastModifiedDate":"2022-10-26"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"    private final LocalDateTime appointmentDate;","lastModifiedDate":"2022-10-15"},{"lineNumber":24,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":25,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-15"},{"lineNumber":26,"author":{"gitId":"marclzh"},"content":"     * Constructs an appointment with a given date.","lastModifiedDate":"2022-10-15"},{"lineNumber":27,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-10-15"},{"lineNumber":28,"author":{"gitId":"marclzh"},"content":"     * @param appointmentDate Date of the appointment.","lastModifiedDate":"2022-10-15"},{"lineNumber":29,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-15"},{"lineNumber":30,"author":{"gitId":"marclzh"},"content":"    private Appointment(String appointmentDate) {","lastModifiedDate":"2022-10-16"},{"lineNumber":31,"author":{"gitId":"marclzh"},"content":"        requireNonNull(appointmentDate);","lastModifiedDate":"2022-10-15"},{"lineNumber":32,"author":{"gitId":"hanwenlai"},"content":"        checkArgument(isValidDateFormat(appointmentDate), MESSAGE_INVALID_DATE_FORMAT);","lastModifiedDate":"2022-10-27"},{"lineNumber":33,"author":{"gitId":"marclzh"},"content":"        checkArgument(isFutureDate(appointmentDate), MESSAGE_DATE_PAST);","lastModifiedDate":"2022-10-26"},{"lineNumber":34,"author":{"gitId":"marclzh"},"content":"        this.appointmentDate \u003d LocalDateTime.parse(appointmentDate, DATE_FORMAT);","lastModifiedDate":"2022-10-15"},{"lineNumber":35,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":36,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":37,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-15"},{"lineNumber":38,"author":{"gitId":"marclzh"},"content":"     * Constructs an empty Appointment.","lastModifiedDate":"2022-10-15"},{"lineNumber":39,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-15"},{"lineNumber":40,"author":{"gitId":"marclzh"},"content":"    private Appointment() {","lastModifiedDate":"2022-10-16"},{"lineNumber":41,"author":{"gitId":"marclzh"},"content":"        this.appointmentDate \u003d null;","lastModifiedDate":"2022-10-15"},{"lineNumber":42,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":43,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":44,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-15"},{"lineNumber":45,"author":{"gitId":"hanwenlai"},"content":"     * Returns true if the appointment date is in the valid format.","lastModifiedDate":"2022-10-27"},{"lineNumber":46,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-10-15"},{"lineNumber":47,"author":{"gitId":"hanwenlai"},"content":"     * @param testDate Appointment date to be tested.","lastModifiedDate":"2022-10-27"},{"lineNumber":48,"author":{"gitId":"hanwenlai"},"content":"     * @return True if the appointment date is in the valid format.","lastModifiedDate":"2022-10-27"},{"lineNumber":49,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-15"},{"lineNumber":50,"author":{"gitId":"hanwenlai"},"content":"    public static boolean isValidDateFormat(String testDate) {","lastModifiedDate":"2022-10-27"},{"lineNumber":51,"author":{"gitId":"marclzh"},"content":"        try {","lastModifiedDate":"2022-10-15"},{"lineNumber":52,"author":{"gitId":"marclzh"},"content":"            LocalDateTime.parse(testDate, DATE_FORMAT);","lastModifiedDate":"2022-10-15"},{"lineNumber":53,"author":{"gitId":"marclzh"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-10-15"},{"lineNumber":54,"author":{"gitId":"marclzh"},"content":"            return false;","lastModifiedDate":"2022-10-15"},{"lineNumber":55,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-10-15"},{"lineNumber":56,"author":{"gitId":"marclzh"},"content":"        return true;","lastModifiedDate":"2022-10-15"},{"lineNumber":57,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":58,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":59,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-26"},{"lineNumber":60,"author":{"gitId":"marclzh"},"content":"     * Returns true if the date is in the past.","lastModifiedDate":"2022-10-26"},{"lineNumber":61,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-10-26"},{"lineNumber":62,"author":{"gitId":"marclzh"},"content":"     * @param testDate Date to be tested","lastModifiedDate":"2022-10-26"},{"lineNumber":63,"author":{"gitId":"marclzh"},"content":"     * @return","lastModifiedDate":"2022-10-26"},{"lineNumber":64,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-26"},{"lineNumber":65,"author":{"gitId":"marclzh"},"content":"    public static boolean isFutureDate(String testDate) {","lastModifiedDate":"2022-10-26"},{"lineNumber":66,"author":{"gitId":"marclzh"},"content":"        LocalDateTime currDate \u003d LocalDateTime.now();","lastModifiedDate":"2022-10-26"},{"lineNumber":67,"author":{"gitId":"marclzh"},"content":"        LocalDateTime actualDate \u003d LocalDateTime.parse(testDate, DATE_FORMAT);","lastModifiedDate":"2022-10-26"},{"lineNumber":68,"author":{"gitId":"marclzh"},"content":"        // Use !isBefore to allow date to be today.","lastModifiedDate":"2022-10-26"},{"lineNumber":69,"author":{"gitId":"marclzh"},"content":"        return !actualDate.isBefore(currDate);","lastModifiedDate":"2022-10-26"},{"lineNumber":70,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-26"},{"lineNumber":71,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":72,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-15"},{"lineNumber":73,"author":{"gitId":"marclzh"},"content":"     * Returns true is appointment is valid.","lastModifiedDate":"2022-10-15"},{"lineNumber":74,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-10-15"},{"lineNumber":75,"author":{"gitId":"marclzh"},"content":"     * @param test Input args for appointment test.","lastModifiedDate":"2022-10-15"},{"lineNumber":76,"author":{"gitId":"marclzh"},"content":"     * @return True if valid.","lastModifiedDate":"2022-10-15"},{"lineNumber":77,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-15"},{"lineNumber":78,"author":{"gitId":"marclzh"},"content":"    public static boolean isValidAppointment(String test) {","lastModifiedDate":"2022-10-15"},{"lineNumber":79,"author":{"gitId":"hanwenlai"},"content":"        return test.equals(NO_APPOINTMENT_SCHEDULED) || isValidDateFormat(test);","lastModifiedDate":"2022-10-27"},{"lineNumber":80,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":81,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":82,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-15"},{"lineNumber":83,"author":{"gitId":"marclzh"},"content":"     * Factory method for the construction of an appointment from the JSON storage file.","lastModifiedDate":"2022-10-15"},{"lineNumber":84,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-10-15"},{"lineNumber":85,"author":{"gitId":"marclzh"},"content":"     * @param in Json storage format of an appointment.","lastModifiedDate":"2022-10-15"},{"lineNumber":86,"author":{"gitId":"marclzh"},"content":"     * @return An appointment with the input field.","lastModifiedDate":"2022-10-15"},{"lineNumber":87,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-15"},{"lineNumber":88,"author":{"gitId":"marclzh"},"content":"    public static Appointment of(String in) {","lastModifiedDate":"2022-10-15"},{"lineNumber":89,"author":{"gitId":"marclzh"},"content":"        if (in.equals(NO_APPOINTMENT_SCHEDULED)) {","lastModifiedDate":"2022-10-15"},{"lineNumber":90,"author":{"gitId":"marclzh"},"content":"            return new Appointment();","lastModifiedDate":"2022-10-15"},{"lineNumber":91,"author":{"gitId":"marclzh"},"content":"        } else {","lastModifiedDate":"2022-10-15"},{"lineNumber":92,"author":{"gitId":"marclzh"},"content":"            return new Appointment(in);","lastModifiedDate":"2022-10-15"},{"lineNumber":93,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-10-15"},{"lineNumber":94,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":95,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":96,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-15"},{"lineNumber":97,"author":{"gitId":"marclzh"},"content":"     * Converts the appointment into string format for Jackson storage.","lastModifiedDate":"2022-10-15"},{"lineNumber":98,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-10-15"},{"lineNumber":99,"author":{"gitId":"marclzh"},"content":"     * @return Storage format for an appointment.","lastModifiedDate":"2022-10-15"},{"lineNumber":100,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-15"},{"lineNumber":101,"author":{"gitId":"marclzh"},"content":"    public String storageFormat() {","lastModifiedDate":"2022-10-15"},{"lineNumber":102,"author":{"gitId":"marclzh"},"content":"        if (this.appointmentDate \u003d\u003d null) {","lastModifiedDate":"2022-10-15"},{"lineNumber":103,"author":{"gitId":"marclzh"},"content":"            return NO_APPOINTMENT_SCHEDULED;","lastModifiedDate":"2022-10-15"},{"lineNumber":104,"author":{"gitId":"marclzh"},"content":"        } else {","lastModifiedDate":"2022-10-15"},{"lineNumber":105,"author":{"gitId":"marclzh"},"content":"            return this.toString();","lastModifiedDate":"2022-10-15"},{"lineNumber":106,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-10-15"},{"lineNumber":107,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":108,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":109,"author":{"gitId":"marclzh"},"content":"    @Override","lastModifiedDate":"2022-10-15"},{"lineNumber":110,"author":{"gitId":"marclzh"},"content":"    public String toString() {","lastModifiedDate":"2022-10-15"},{"lineNumber":111,"author":{"gitId":"marclzh"},"content":"        return appointmentDate \u003d\u003d null ? NO_APPOINTMENT_SCHEDULED : appointmentDate.format(DATE_FORMAT);","lastModifiedDate":"2022-10-15"},{"lineNumber":112,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":113,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":114,"author":{"gitId":"marclzh"},"content":"    @Override","lastModifiedDate":"2022-10-15"},{"lineNumber":115,"author":{"gitId":"marclzh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-15"},{"lineNumber":116,"author":{"gitId":"marclzh"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-15"},{"lineNumber":117,"author":{"gitId":"marclzh"},"content":"                || (other instanceof Appointment // instanceof handles nulls","lastModifiedDate":"2022-10-15"},{"lineNumber":118,"author":{"gitId":"marclzh"},"content":"                \u0026\u0026 appointmentDate.equals(((Appointment) other).appointmentDate));","lastModifiedDate":"2022-10-15"},{"lineNumber":119,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":120,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":121,"author":{"gitId":"marclzh"},"content":"    @Override","lastModifiedDate":"2022-10-15"},{"lineNumber":122,"author":{"gitId":"marclzh"},"content":"    public int hashCode() {","lastModifiedDate":"2022-10-15"},{"lineNumber":123,"author":{"gitId":"marclzh"},"content":"        return appointmentDate.hashCode();","lastModifiedDate":"2022-10-15"},{"lineNumber":124,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":125,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-10-15"}],"authorContributionMap":{"marclzh":119,"hanwenlai":6}},{"path":"src/main/java/seedu/address/model/person/Birthdate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hanwenlai"},"content":"package seedu.address.model.person;","lastModifiedDate":"2022-10-19"},{"lineNumber":2,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":3,"author":{"gitId":"hanwenlai"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-19"},{"lineNumber":4,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-10-19"},{"lineNumber":5,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":6,"author":{"gitId":"hanwenlai"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-10-19"},{"lineNumber":7,"author":{"gitId":"hanwenlai"},"content":"import java.time.Period;","lastModifiedDate":"2022-10-19"},{"lineNumber":8,"author":{"gitId":"hanwenlai"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-10-19"},{"lineNumber":9,"author":{"gitId":"hanwenlai"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-10-26"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"import java.time.format.ResolverStyle;","lastModifiedDate":"2022-11-01"},{"lineNumber":11,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":12,"author":{"gitId":"hanwenlai"},"content":"/**","lastModifiedDate":"2022-10-19"},{"lineNumber":13,"author":{"gitId":"hanwenlai"},"content":" * Represents a Person\u0027s birthdate in the address book.","lastModifiedDate":"2022-10-19"},{"lineNumber":14,"author":{"gitId":"hanwenlai"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDateFormat(String)}","lastModifiedDate":"2022-10-27"},{"lineNumber":15,"author":{"gitId":"hanwenlai"},"content":" */","lastModifiedDate":"2022-10-19"},{"lineNumber":16,"author":{"gitId":"hanwenlai"},"content":"public class Birthdate {","lastModifiedDate":"2022-10-19"},{"lineNumber":17,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"    public static final DateTimeFormatter DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd-MM-uuuu\")","lastModifiedDate":"2022-11-01"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"            .withResolverStyle(ResolverStyle.STRICT);","lastModifiedDate":"2022-11-01"},{"lineNumber":20,"author":{"gitId":"hanwenlai"},"content":"    public static final DateTimeFormatter DISPLAYED_DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy\");","lastModifiedDate":"2022-10-19"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"    public static final String MESSAGE_INVALID_DATE_FORMAT \u003d \"Birthdates have to be of format dd-MM-yyyy! \"","lastModifiedDate":"2022-11-01"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"            + \"Please also ensure this is a valid date!\";","lastModifiedDate":"2022-11-01"},{"lineNumber":23,"author":{"gitId":"hanwenlai"},"content":"    public static final String MESSAGE_FUTURE_DATE \u003d \"Birthdates must not be later than the current date!\";","lastModifiedDate":"2022-10-27"},{"lineNumber":24,"author":{"gitId":"hanwenlai"},"content":"    private final LocalDate birthdate;","lastModifiedDate":"2022-10-19"},{"lineNumber":25,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":26,"author":{"gitId":"hanwenlai"},"content":"    /**","lastModifiedDate":"2022-10-19"},{"lineNumber":27,"author":{"gitId":"hanwenlai"},"content":"     * Constructs a {@code Birthdate}.","lastModifiedDate":"2022-10-19"},{"lineNumber":28,"author":{"gitId":"hanwenlai"},"content":"     *","lastModifiedDate":"2022-10-19"},{"lineNumber":29,"author":{"gitId":"hanwenlai"},"content":"     * @param birthdate A valid birthdate.","lastModifiedDate":"2022-10-19"},{"lineNumber":30,"author":{"gitId":"hanwenlai"},"content":"     */","lastModifiedDate":"2022-10-19"},{"lineNumber":31,"author":{"gitId":"hanwenlai"},"content":"    public Birthdate(String birthdate) {","lastModifiedDate":"2022-10-19"},{"lineNumber":32,"author":{"gitId":"hanwenlai"},"content":"        requireNonNull(birthdate);","lastModifiedDate":"2022-10-19"},{"lineNumber":33,"author":{"gitId":"hanwenlai"},"content":"        checkArgument(isValidDateFormat(birthdate), MESSAGE_INVALID_DATE_FORMAT);","lastModifiedDate":"2022-10-27"},{"lineNumber":34,"author":{"gitId":"hanwenlai"},"content":"        checkArgument(!isFutureDate(birthdate), MESSAGE_FUTURE_DATE);","lastModifiedDate":"2022-10-27"},{"lineNumber":35,"author":{"gitId":"hanwenlai"},"content":"        this.birthdate \u003d LocalDate.parse(birthdate, DATE_FORMAT);","lastModifiedDate":"2022-10-19"},{"lineNumber":36,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-19"},{"lineNumber":37,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":38,"author":{"gitId":"hanwenlai"},"content":"    /**","lastModifiedDate":"2022-10-19"},{"lineNumber":39,"author":{"gitId":"hanwenlai"},"content":"     * Returns true if the given birthdate is in the valid format.","lastModifiedDate":"2022-10-27"},{"lineNumber":40,"author":{"gitId":"hanwenlai"},"content":"     *","lastModifiedDate":"2022-10-26"},{"lineNumber":41,"author":{"gitId":"hanwenlai"},"content":"     * @param testDate Birthdate to be tested.","lastModifiedDate":"2022-10-26"},{"lineNumber":42,"author":{"gitId":"hanwenlai"},"content":"     * @return true when the given birthdate is in the valid format.","lastModifiedDate":"2022-10-27"},{"lineNumber":43,"author":{"gitId":"hanwenlai"},"content":"     */","lastModifiedDate":"2022-10-26"},{"lineNumber":44,"author":{"gitId":"hanwenlai"},"content":"    public static boolean isValidDateFormat(String testDate) {","lastModifiedDate":"2022-10-27"},{"lineNumber":45,"author":{"gitId":"hanwenlai"},"content":"        try {","lastModifiedDate":"2022-10-26"},{"lineNumber":46,"author":{"gitId":"hanwenlai"},"content":"            LocalDate.parse(testDate, DATE_FORMAT);","lastModifiedDate":"2022-10-27"},{"lineNumber":47,"author":{"gitId":"hanwenlai"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-10-26"},{"lineNumber":48,"author":{"gitId":"hanwenlai"},"content":"            return false;","lastModifiedDate":"2022-10-26"},{"lineNumber":49,"author":{"gitId":"hanwenlai"},"content":"        }","lastModifiedDate":"2022-10-26"},{"lineNumber":50,"author":{"gitId":"hanwenlai"},"content":"        return true;","lastModifiedDate":"2022-10-27"},{"lineNumber":51,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-27"},{"lineNumber":52,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":53,"author":{"gitId":"hanwenlai"},"content":"    /**","lastModifiedDate":"2022-10-27"},{"lineNumber":54,"author":{"gitId":"hanwenlai"},"content":"     * Returns true if the given birthdate is after the current date.","lastModifiedDate":"2022-10-27"},{"lineNumber":55,"author":{"gitId":"hanwenlai"},"content":"     *","lastModifiedDate":"2022-10-27"},{"lineNumber":56,"author":{"gitId":"hanwenlai"},"content":"     * @param testDate Birthdate to be tested.","lastModifiedDate":"2022-10-27"},{"lineNumber":57,"author":{"gitId":"hanwenlai"},"content":"     * @return true when the given birthdate is after the current date.","lastModifiedDate":"2022-10-27"},{"lineNumber":58,"author":{"gitId":"hanwenlai"},"content":"     */","lastModifiedDate":"2022-10-27"},{"lineNumber":59,"author":{"gitId":"hanwenlai"},"content":"    public static boolean isFutureDate(String testDate) {","lastModifiedDate":"2022-10-27"},{"lineNumber":60,"author":{"gitId":"hanwenlai"},"content":"        LocalDate birthdate \u003d LocalDate.parse(testDate, DATE_FORMAT);","lastModifiedDate":"2022-10-27"},{"lineNumber":61,"author":{"gitId":"hanwenlai"},"content":"        LocalDate currDate \u003d LocalDate.now();","lastModifiedDate":"2022-10-27"},{"lineNumber":62,"author":{"gitId":"hanwenlai"},"content":"        return birthdate.isAfter(currDate);","lastModifiedDate":"2022-10-27"},{"lineNumber":63,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-26"},{"lineNumber":64,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":65,"author":{"gitId":"hanwenlai"},"content":"    /**","lastModifiedDate":"2022-10-26"},{"lineNumber":66,"author":{"gitId":"hanwenlai"},"content":"     * Calculates and returns the age of a Person with this birthdate.","lastModifiedDate":"2022-10-19"},{"lineNumber":67,"author":{"gitId":"hanwenlai"},"content":"     *","lastModifiedDate":"2022-10-19"},{"lineNumber":68,"author":{"gitId":"hanwenlai"},"content":"     * @return the age of a Person with this birthdate.","lastModifiedDate":"2022-10-19"},{"lineNumber":69,"author":{"gitId":"hanwenlai"},"content":"     */","lastModifiedDate":"2022-10-19"},{"lineNumber":70,"author":{"gitId":"hanwenlai"},"content":"    public int calculateAge() {","lastModifiedDate":"2022-10-19"},{"lineNumber":71,"author":{"gitId":"hanwenlai"},"content":"        return Period.between(birthdate, LocalDate.now()).getYears();","lastModifiedDate":"2022-10-19"},{"lineNumber":72,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-19"},{"lineNumber":73,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":74,"author":{"gitId":"hanwenlai"},"content":"    /**","lastModifiedDate":"2022-10-19"},{"lineNumber":75,"author":{"gitId":"hanwenlai"},"content":"     * Returns the String representation of the birthdate when displayed in the GUI.","lastModifiedDate":"2022-10-19"},{"lineNumber":76,"author":{"gitId":"hanwenlai"},"content":"     *","lastModifiedDate":"2022-10-19"},{"lineNumber":77,"author":{"gitId":"hanwenlai"},"content":"     * @return String representation of birthdate, when displayed in the GUI.","lastModifiedDate":"2022-10-19"},{"lineNumber":78,"author":{"gitId":"hanwenlai"},"content":"     */","lastModifiedDate":"2022-10-19"},{"lineNumber":79,"author":{"gitId":"hanwenlai"},"content":"    public String toDisplayFormat() {","lastModifiedDate":"2022-10-19"},{"lineNumber":80,"author":{"gitId":"hanwenlai"},"content":"        return this.birthdate.format(DISPLAYED_DATE_FORMAT);","lastModifiedDate":"2022-10-19"},{"lineNumber":81,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-19"},{"lineNumber":82,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":83,"author":{"gitId":"hanwenlai"},"content":"    @Override","lastModifiedDate":"2022-10-19"},{"lineNumber":84,"author":{"gitId":"hanwenlai"},"content":"    public String toString() {","lastModifiedDate":"2022-10-19"},{"lineNumber":85,"author":{"gitId":"hanwenlai"},"content":"        return this.birthdate.format(DATE_FORMAT);","lastModifiedDate":"2022-10-19"},{"lineNumber":86,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-19"},{"lineNumber":87,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":88,"author":{"gitId":"hanwenlai"},"content":"    @Override","lastModifiedDate":"2022-10-19"},{"lineNumber":89,"author":{"gitId":"hanwenlai"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-19"},{"lineNumber":90,"author":{"gitId":"hanwenlai"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-19"},{"lineNumber":91,"author":{"gitId":"hanwenlai"},"content":"                || (other instanceof Birthdate // instanceof handles nulls","lastModifiedDate":"2022-10-19"},{"lineNumber":92,"author":{"gitId":"hanwenlai"},"content":"                \u0026\u0026 birthdate.equals(((Birthdate) other).birthdate)); // state check","lastModifiedDate":"2022-10-19"},{"lineNumber":93,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-19"},{"lineNumber":94,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":95,"author":{"gitId":"hanwenlai"},"content":"    @Override","lastModifiedDate":"2022-10-19"},{"lineNumber":96,"author":{"gitId":"hanwenlai"},"content":"    public int hashCode() {","lastModifiedDate":"2022-10-19"},{"lineNumber":97,"author":{"gitId":"hanwenlai"},"content":"        return birthdate.hashCode();","lastModifiedDate":"2022-10-19"},{"lineNumber":98,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-19"},{"lineNumber":99,"author":{"gitId":"hanwenlai"},"content":"}","lastModifiedDate":"2022-10-19"}],"authorContributionMap":{"marclzh":5,"hanwenlai":94}},{"path":"src/main/java/seedu/address/model/person/DisplayedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"EiffelLKF"},"content":"package seedu.address.model.person;","lastModifiedDate":"2022-10-11"},{"lineNumber":2,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":3,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-10-11"},{"lineNumber":4,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":5,"author":{"gitId":"EiffelLKF"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-10-11"},{"lineNumber":6,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2022-10-11"},{"lineNumber":7,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2022-10-11"},{"lineNumber":8,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2022-10-17"},{"lineNumber":9,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":10,"author":{"gitId":"EiffelLKF"},"content":"/**","lastModifiedDate":"2022-10-11"},{"lineNumber":11,"author":{"gitId":"EiffelLKF"},"content":" * Represents person whose records are being displayed.","lastModifiedDate":"2022-10-11"},{"lineNumber":12,"author":{"gitId":"EiffelLKF"},"content":" */","lastModifiedDate":"2022-10-11"},{"lineNumber":13,"author":{"gitId":"EiffelLKF"},"content":"public class DisplayedPerson {","lastModifiedDate":"2022-10-11"},{"lineNumber":14,"author":{"gitId":"EiffelLKF"},"content":"    /** Person to be displayed */","lastModifiedDate":"2022-10-11"},{"lineNumber":15,"author":{"gitId":"EiffelLKF"},"content":"    private Person person;","lastModifiedDate":"2022-10-11"},{"lineNumber":16,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":17,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-11"},{"lineNumber":18,"author":{"gitId":"EiffelLKF"},"content":"     * Constructor for DisplayedPerson","lastModifiedDate":"2022-10-11"},{"lineNumber":19,"author":{"gitId":"EiffelLKF"},"content":"     * @param person person to be displayed.","lastModifiedDate":"2022-10-11"},{"lineNumber":20,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-11"},{"lineNumber":21,"author":{"gitId":"EiffelLKF"},"content":"    public DisplayedPerson(Person person) {","lastModifiedDate":"2022-10-11"},{"lineNumber":22,"author":{"gitId":"EiffelLKF"},"content":"        requireAllNonNull(person);","lastModifiedDate":"2022-10-11"},{"lineNumber":23,"author":{"gitId":"EiffelLKF"},"content":"        this.person \u003d person;","lastModifiedDate":"2022-10-11"},{"lineNumber":24,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":25,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":26,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-11"},{"lineNumber":27,"author":{"gitId":"EiffelLKF"},"content":"     * Set the person displayed to the input person parameter.","lastModifiedDate":"2022-10-11"},{"lineNumber":28,"author":{"gitId":"EiffelLKF"},"content":"     *","lastModifiedDate":"2022-10-11"},{"lineNumber":29,"author":{"gitId":"EiffelLKF"},"content":"     * @param person New person to be displayed.","lastModifiedDate":"2022-10-11"},{"lineNumber":30,"author":{"gitId":"EiffelLKF"},"content":"     * @param addressBook Addressbook from which the new person originated from.","lastModifiedDate":"2022-10-11"},{"lineNumber":31,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-11"},{"lineNumber":32,"author":{"gitId":"EiffelLKF"},"content":"    public void setDisplayedPerson(Person person, AddressBook addressBook) {","lastModifiedDate":"2022-10-11"},{"lineNumber":33,"author":{"gitId":"EiffelLKF"},"content":"        requireAllNonNull(person, addressBook);","lastModifiedDate":"2022-10-11"},{"lineNumber":34,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":35,"author":{"gitId":"EiffelLKF"},"content":"        if (!addressBook.hasPerson(person)) {","lastModifiedDate":"2022-10-11"},{"lineNumber":36,"author":{"gitId":"EiffelLKF"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2022-10-11"},{"lineNumber":37,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-11"},{"lineNumber":38,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":39,"author":{"gitId":"EiffelLKF"},"content":"        setPerson(person);","lastModifiedDate":"2022-10-11"},{"lineNumber":40,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":41,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":42,"author":{"gitId":"EiffelLKF"},"content":"    private void setPerson(Person toSet) {","lastModifiedDate":"2022-10-11"},{"lineNumber":43,"author":{"gitId":"EiffelLKF"},"content":"        this.person \u003d toSet;","lastModifiedDate":"2022-10-11"},{"lineNumber":44,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":45,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":46,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-11"},{"lineNumber":47,"author":{"gitId":"EiffelLKF"},"content":"     * Adds a record to the record list.","lastModifiedDate":"2022-10-11"},{"lineNumber":48,"author":{"gitId":"EiffelLKF"},"content":"     * The record must not already exist in the record list.","lastModifiedDate":"2022-10-11"},{"lineNumber":49,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-11"},{"lineNumber":50,"author":{"gitId":"EiffelLKF"},"content":"    public void addRecord(Record record) {","lastModifiedDate":"2022-10-11"},{"lineNumber":51,"author":{"gitId":"EiffelLKF"},"content":"        person.addRecord(record);","lastModifiedDate":"2022-10-11"},{"lineNumber":52,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":53,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":54,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-11"},{"lineNumber":55,"author":{"gitId":"EiffelLKF"},"content":"     * Returns true if a record with the same identity as {@code record} exists in the record list.","lastModifiedDate":"2022-10-11"},{"lineNumber":56,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-11"},{"lineNumber":57,"author":{"gitId":"EiffelLKF"},"content":"    public boolean hasRecord(Record record) {","lastModifiedDate":"2022-10-11"},{"lineNumber":58,"author":{"gitId":"EiffelLKF"},"content":"        return person.hasRecord(record);","lastModifiedDate":"2022-10-11"},{"lineNumber":59,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":60,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":61,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-11"},{"lineNumber":62,"author":{"gitId":"EiffelLKF"},"content":"     * Deletes a record from the record list.","lastModifiedDate":"2022-10-11"},{"lineNumber":63,"author":{"gitId":"EiffelLKF"},"content":"     * The record must already exist in the record list.","lastModifiedDate":"2022-10-11"},{"lineNumber":64,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-11"},{"lineNumber":65,"author":{"gitId":"EiffelLKF"},"content":"    public void deleteRecord(Record record) {","lastModifiedDate":"2022-10-11"},{"lineNumber":66,"author":{"gitId":"EiffelLKF"},"content":"        person.deleteRecord(record);","lastModifiedDate":"2022-10-11"},{"lineNumber":67,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":68,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":69,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-11"},{"lineNumber":70,"author":{"gitId":"EiffelLKF"},"content":"     * Clears the contents of the record list.","lastModifiedDate":"2022-10-11"},{"lineNumber":71,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-11"},{"lineNumber":72,"author":{"gitId":"EiffelLKF"},"content":"    public void clearRecords() {","lastModifiedDate":"2022-10-11"},{"lineNumber":73,"author":{"gitId":"EiffelLKF"},"content":"        person.clearRecords();","lastModifiedDate":"2022-10-11"},{"lineNumber":74,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":75,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":76,"author":{"gitId":"anthonyhoth"},"content":"    /**","lastModifiedDate":"2022-10-18"},{"lineNumber":77,"author":{"gitId":"anthonyhoth"},"content":"     * Sets the target record to the new edited record.","lastModifiedDate":"2022-10-18"},{"lineNumber":78,"author":{"gitId":"anthonyhoth"},"content":"     */","lastModifiedDate":"2022-10-18"},{"lineNumber":79,"author":{"gitId":"anthonyhoth"},"content":"    public void setRecord(Record target, Record editedRecord) {","lastModifiedDate":"2022-10-18"},{"lineNumber":80,"author":{"gitId":"anthonyhoth"},"content":"        person.setRecord(target, editedRecord);","lastModifiedDate":"2022-10-18"},{"lineNumber":81,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":82,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":83,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-11"},{"lineNumber":84,"author":{"gitId":"EiffelLKF"},"content":"     * Retrieve unmodifiable list of records","lastModifiedDate":"2022-10-11"},{"lineNumber":85,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-11"},{"lineNumber":86,"author":{"gitId":"EiffelLKF"},"content":"    public ObservableList\u003cRecord\u003e getUnmodifiableRecords() {","lastModifiedDate":"2022-10-11"},{"lineNumber":87,"author":{"gitId":"EiffelLKF"},"content":"        return person.getUnmodifiableRecords();","lastModifiedDate":"2022-10-11"},{"lineNumber":88,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":89,"author":{"gitId":"EiffelLKF"},"content":"}","lastModifiedDate":"2022-10-11"}],"authorContributionMap":{"anthonyhoth":7,"EiffelLKF":82}},{"path":"src/main/java/seedu/address/model/person/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.commons.util.StringUtil.toProperCase;","lastModifiedDate":"2022-11-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s name in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Name {","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2018-04-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"anthonyhoth"},"content":"    public final String lowerCaseName;","lastModifiedDate":"2022-10-24"},{"lineNumber":23,"author":{"gitId":"anthonyhoth"},"content":"    public final String properCaseName;","lastModifiedDate":"2022-10-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @param name A valid name.","lastModifiedDate":"2017-05-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Name(String name) {","lastModifiedDate":"2017-05-30"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":33,"author":{"gitId":"anthonyhoth"},"content":"        lowerCaseName \u003d name.toLowerCase();","lastModifiedDate":"2022-10-24"},{"lineNumber":34,"author":{"gitId":"anthonyhoth"},"content":"        properCaseName \u003d toProperCase(lowerCaseName);","lastModifiedDate":"2022-10-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2018-04-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"anthonyhoth"},"content":"        return properCaseName;","lastModifiedDate":"2022-10-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                || (other instanceof Name // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"anthonyhoth"},"content":"                \u0026\u0026 lowerCaseName.equals(((Name) other).lowerCaseName)); // state check","lastModifiedDate":"2022-10-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"anthonyhoth"},"content":"        return lowerCaseName.hashCode();","lastModifiedDate":"2022-10-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"anthonyhoth":7,"EiffelLKF":1,"-":53}},{"path":"src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2018-01-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return keywords.stream()","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"anthonyhoth"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().lowerCaseName, keyword));","lastModifiedDate":"2022-10-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"anthonyhoth":1,"-":30}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"EiffelLKF"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"EiffelLKF"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-10-11"},{"lineNumber":12,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2022-10-17"},{"lineNumber":13,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.RecordList;","lastModifiedDate":"2022-10-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"EiffelLKF"},"content":"    // Default Fields","lastModifiedDate":"2022-10-11"},{"lineNumber":23,"author":{"gitId":"EiffelLKF"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2022-10-11"},{"lineNumber":24,"author":{"gitId":"hanwenlai"},"content":"    public static final String DEFAULT_BIRTHDATE \u003d \"06-06-1966\";","lastModifiedDate":"2022-10-19"},{"lineNumber":25,"author":{"gitId":"EiffelLKF"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2022-10-11"},{"lineNumber":26,"author":{"gitId":"EiffelLKF"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2022-10-11"},{"lineNumber":27,"author":{"gitId":"EiffelLKF"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2022-10-11"},{"lineNumber":28,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":31,"author":{"gitId":"hanwenlai"},"content":"    private final Birthdate birthdate;","lastModifiedDate":"2022-10-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":38,"author":{"gitId":"anthonyhoth"},"content":"    private final RecordList records;","lastModifiedDate":"2022-10-10"},{"lineNumber":39,"author":{"gitId":"marclzh"},"content":"    private final Appointment appointment;","lastModifiedDate":"2022-10-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"hanwenlai"},"content":"    public Person(Name name, Birthdate birthdate, Phone phone, Email email, Address address, Set\u003cTag\u003e tags,","lastModifiedDate":"2022-10-19"},{"lineNumber":45,"author":{"gitId":"marclzh"},"content":"                  RecordList records, Appointment appointment) {","lastModifiedDate":"2022-10-15"},{"lineNumber":46,"author":{"gitId":"hanwenlai"},"content":"        requireAllNonNull(name, birthdate, phone, email, address, tags);","lastModifiedDate":"2022-10-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":48,"author":{"gitId":"hanwenlai"},"content":"        this.birthdate \u003d birthdate;","lastModifiedDate":"2022-10-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":53,"author":{"gitId":"anthonyhoth"},"content":"        this.records \u003d records;","lastModifiedDate":"2022-10-10"},{"lineNumber":54,"author":{"gitId":"marclzh"},"content":"        this.appointment \u003d appointment;","lastModifiedDate":"2022-10-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"hanwenlai"},"content":"    public Birthdate getBirthdate() {","lastModifiedDate":"2022-10-19"},{"lineNumber":62,"author":{"gitId":"hanwenlai"},"content":"        return birthdate;","lastModifiedDate":"2022-10-19"},{"lineNumber":63,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":64,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":77,"author":{"gitId":"marclzh"},"content":"    public RecordList getRecordList() {","lastModifiedDate":"2022-10-04"},{"lineNumber":78,"author":{"gitId":"anthonyhoth"},"content":"        return records;","lastModifiedDate":"2022-10-10"},{"lineNumber":79,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":80,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":81,"author":{"gitId":"marclzh"},"content":"    public Appointment getAppointment() {","lastModifiedDate":"2022-10-15"},{"lineNumber":82,"author":{"gitId":"marclzh"},"content":"        return appointment;","lastModifiedDate":"2022-10-15"},{"lineNumber":83,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":84,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":94,"author":{"gitId":"anthonyhoth"},"content":"     * Returns true if both persons have the same name and address.","lastModifiedDate":"2022-10-25"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":102,"author":{"gitId":"anthonyhoth"},"content":"        boolean isSameName \u003d otherPerson !\u003d null","lastModifiedDate":"2022-10-24"},{"lineNumber":103,"author":{"gitId":"anthonyhoth"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());","lastModifiedDate":"2022-10-25"},{"lineNumber":104,"author":{"gitId":"anthonyhoth"},"content":"        boolean isSameAddress \u003d otherPerson !\u003d null","lastModifiedDate":"2022-10-24"},{"lineNumber":105,"author":{"gitId":"anthonyhoth"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress());","lastModifiedDate":"2022-10-24"},{"lineNumber":106,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":107,"author":{"gitId":"anthonyhoth"},"content":"        return isSameName \u0026\u0026 isSameAddress;","lastModifiedDate":"2022-10-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":110,"author":{"gitId":"anthonyhoth"},"content":"    /**","lastModifiedDate":"2022-10-25"},{"lineNumber":111,"author":{"gitId":"anthonyhoth"},"content":"     * Returns true if both persons have the same name in lower case.","lastModifiedDate":"2022-10-25"},{"lineNumber":112,"author":{"gitId":"anthonyhoth"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2022-10-25"},{"lineNumber":113,"author":{"gitId":"anthonyhoth"},"content":"     */","lastModifiedDate":"2022-10-25"},{"lineNumber":114,"author":{"gitId":"anthonyhoth"},"content":"    public boolean hasSimilarName(Person otherPerson) {","lastModifiedDate":"2022-10-25"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2022-10-25"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());","lastModifiedDate":"2022-10-26"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-10-25"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":119,"author":{"gitId":"hanwenlai"},"content":"    /**","lastModifiedDate":"2022-10-19"},{"lineNumber":120,"author":{"gitId":"hanwenlai"},"content":"     * Returns the age of a Person.","lastModifiedDate":"2022-10-19"},{"lineNumber":121,"author":{"gitId":"hanwenlai"},"content":"     *","lastModifiedDate":"2022-10-19"},{"lineNumber":122,"author":{"gitId":"hanwenlai"},"content":"     * @return the age of a Person.","lastModifiedDate":"2022-10-19"},{"lineNumber":123,"author":{"gitId":"hanwenlai"},"content":"     */","lastModifiedDate":"2022-10-19"},{"lineNumber":124,"author":{"gitId":"hanwenlai"},"content":"    public int getAge() {","lastModifiedDate":"2022-10-19"},{"lineNumber":125,"author":{"gitId":"hanwenlai"},"content":"        return this.birthdate.calculateAge();","lastModifiedDate":"2022-10-19"},{"lineNumber":126,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-19"},{"lineNumber":127,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":128,"author":{"gitId":"hanwenlai"},"content":"    /**","lastModifiedDate":"2022-10-19"},{"lineNumber":129,"author":{"gitId":"hanwenlai"},"content":"     * Returns the String representation of a Person\u0027s birthdate, when displayed on the GUI.","lastModifiedDate":"2022-10-19"},{"lineNumber":130,"author":{"gitId":"hanwenlai"},"content":"     *","lastModifiedDate":"2022-10-19"},{"lineNumber":131,"author":{"gitId":"hanwenlai"},"content":"     * @return the String representation of a Person\u0027s birthdate, when displayed on the GUI.","lastModifiedDate":"2022-10-19"},{"lineNumber":132,"author":{"gitId":"hanwenlai"},"content":"     */","lastModifiedDate":"2022-10-19"},{"lineNumber":133,"author":{"gitId":"hanwenlai"},"content":"    public String displayBirthdate() {","lastModifiedDate":"2022-10-19"},{"lineNumber":134,"author":{"gitId":"hanwenlai"},"content":"        return this.birthdate.toDisplayFormat();","lastModifiedDate":"2022-10-19"},{"lineNumber":135,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-19"},{"lineNumber":136,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":137,"author":{"gitId":"anthonyhoth"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d Record List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-10-10"},{"lineNumber":138,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":139,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":140,"author":{"gitId":"EiffelLKF"},"content":"     * Returns true if a record with the same identity as {@code record} exists in the record list.","lastModifiedDate":"2022-10-10"},{"lineNumber":141,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":142,"author":{"gitId":"EiffelLKF"},"content":"    public boolean hasRecord(Record record) {","lastModifiedDate":"2022-10-10"},{"lineNumber":143,"author":{"gitId":"EiffelLKF"},"content":"        requireNonNull(record);","lastModifiedDate":"2022-10-10"},{"lineNumber":144,"author":{"gitId":"EiffelLKF"},"content":"        return records.contains(record);","lastModifiedDate":"2022-10-10"},{"lineNumber":145,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":146,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":147,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":148,"author":{"gitId":"EiffelLKF"},"content":"     * Adds a record to the record list.","lastModifiedDate":"2022-10-10"},{"lineNumber":149,"author":{"gitId":"EiffelLKF"},"content":"     * The record must not already exist in the record list.","lastModifiedDate":"2022-10-10"},{"lineNumber":150,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":151,"author":{"gitId":"EiffelLKF"},"content":"    public void addRecord(Record r) {","lastModifiedDate":"2022-10-10"},{"lineNumber":152,"author":{"gitId":"EiffelLKF"},"content":"        records.add(r);","lastModifiedDate":"2022-10-10"},{"lineNumber":153,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":154,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":155,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-11"},{"lineNumber":156,"author":{"gitId":"EiffelLKF"},"content":"     * Deletes a record from the record list.","lastModifiedDate":"2022-10-11"},{"lineNumber":157,"author":{"gitId":"EiffelLKF"},"content":"     * The record must already exist in the record list.","lastModifiedDate":"2022-10-11"},{"lineNumber":158,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-11"},{"lineNumber":159,"author":{"gitId":"EiffelLKF"},"content":"    public void deleteRecord(Record record) {","lastModifiedDate":"2022-10-11"},{"lineNumber":160,"author":{"gitId":"EiffelLKF"},"content":"        records.delete(record);","lastModifiedDate":"2022-10-11"},{"lineNumber":161,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":162,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":163,"author":{"gitId":"anthonyhoth"},"content":"    /**","lastModifiedDate":"2022-10-18"},{"lineNumber":164,"author":{"gitId":"anthonyhoth"},"content":"     * Sets a record in the record list to the new edited record.","lastModifiedDate":"2022-10-18"},{"lineNumber":165,"author":{"gitId":"anthonyhoth"},"content":"     */","lastModifiedDate":"2022-10-18"},{"lineNumber":166,"author":{"gitId":"anthonyhoth"},"content":"    public void setRecord(Record target, Record editedRecord) {","lastModifiedDate":"2022-10-18"},{"lineNumber":167,"author":{"gitId":"anthonyhoth"},"content":"        records.set(target, editedRecord);","lastModifiedDate":"2022-10-18"},{"lineNumber":168,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":169,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":170,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-11"},{"lineNumber":171,"author":{"gitId":"EiffelLKF"},"content":"     * Replaces the contents of the record list with {@code records}.","lastModifiedDate":"2022-10-11"},{"lineNumber":172,"author":{"gitId":"EiffelLKF"},"content":"     * {@code records} must not contain duplicate persons.","lastModifiedDate":"2022-10-11"},{"lineNumber":173,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-11"},{"lineNumber":174,"author":{"gitId":"EiffelLKF"},"content":"    public void setRecords(RecordList records) {","lastModifiedDate":"2022-10-11"},{"lineNumber":175,"author":{"gitId":"EiffelLKF"},"content":"        this.records.setRecordList(records);","lastModifiedDate":"2022-10-11"},{"lineNumber":176,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":177,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":178,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":179,"author":{"gitId":"marclzh"},"content":"     * Clears the contents of the record list.","lastModifiedDate":"2022-10-10"},{"lineNumber":180,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":181,"author":{"gitId":"marclzh"},"content":"    public void clearRecords() {","lastModifiedDate":"2022-10-10"},{"lineNumber":182,"author":{"gitId":"marclzh"},"content":"        records.clearRecords();","lastModifiedDate":"2022-10-10"},{"lineNumber":183,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":184,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":185,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-11"},{"lineNumber":186,"author":{"gitId":"EiffelLKF"},"content":"     * Retrieve unmodifiable list of records","lastModifiedDate":"2022-10-11"},{"lineNumber":187,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-11"},{"lineNumber":188,"author":{"gitId":"EiffelLKF"},"content":"    public ObservableList\u003cRecord\u003e getUnmodifiableRecords() {","lastModifiedDate":"2022-10-11"},{"lineNumber":189,"author":{"gitId":"EiffelLKF"},"content":"        return records.asUnmodifiableObservableList();","lastModifiedDate":"2022-10-11"},{"lineNumber":190,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":191,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":192,"author":{"gitId":"EiffelLKF"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-10-11"},{"lineNumber":193,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":195,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":196,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":197,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())","lastModifiedDate":"2018-08-14"},{"lineNumber":210,"author":{"gitId":"hanwenlai"},"content":"                \u0026\u0026 otherPerson.getBirthdate().equals(getBirthdate())","lastModifiedDate":"2022-10-19"},{"lineNumber":211,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())","lastModifiedDate":"2018-08-14"},{"lineNumber":212,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())","lastModifiedDate":"2018-08-14"},{"lineNumber":213,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())","lastModifiedDate":"2018-08-14"},{"lineNumber":214,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags());","lastModifiedDate":"2018-08-14"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":220,"author":{"gitId":"hanwenlai"},"content":"        return Objects.hash(name, birthdate, phone, email, address, tags);","lastModifiedDate":"2022-10-19"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        builder.append(getName())","lastModifiedDate":"2018-01-10"},{"lineNumber":227,"author":{"gitId":"hanwenlai"},"content":"                .append(\"; Birthdate: \")","lastModifiedDate":"2022-10-19"},{"lineNumber":228,"author":{"gitId":"hanwenlai"},"content":"                .append(getBirthdate())","lastModifiedDate":"2022-10-19"},{"lineNumber":229,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":230,"author":{"gitId":"-"},"content":"                .append(getPhone())","lastModifiedDate":"2018-01-10"},{"lineNumber":231,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":232,"author":{"gitId":"-"},"content":"                .append(getEmail())","lastModifiedDate":"2018-01-10"},{"lineNumber":233,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":234,"author":{"gitId":"marclzh"},"content":"                .append(getAddress())","lastModifiedDate":"2022-10-04"},{"lineNumber":235,"author":{"gitId":"marclzh"},"content":"                .append(\"; Record Count: \")","lastModifiedDate":"2022-10-04"},{"lineNumber":236,"author":{"gitId":"marclzh"},"content":"                .append(getRecordList());","lastModifiedDate":"2022-10-04"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();","lastModifiedDate":"2020-12-11"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {","lastModifiedDate":"2020-12-11"},{"lineNumber":240,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");","lastModifiedDate":"2020-12-11"},{"lineNumber":241,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);","lastModifiedDate":"2020-12-11"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-11"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":245,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"anthonyhoth":24,"marclzh":20,"hanwenlai":31,"EiffelLKF":51,"-":119}},{"path":"src/main/java/seedu/address/model/person/Phone.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s phone number in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Phone {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"hanwenlai"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Phone numbers should only contain numbers, \"","lastModifiedDate":"2022-11-01"},{"lineNumber":14,"author":{"gitId":"hanwenlai"},"content":"        + \"and it should be at least 5 digits long, up to a maximum of 15 digits.\";","lastModifiedDate":"2022-11-01"},{"lineNumber":15,"author":{"gitId":"hanwenlai"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{5,15}\";","lastModifiedDate":"2022-11-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Constructs a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param phone A valid phone number.","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public Phone(String phone) {","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        value \u003d phone;","lastModifiedDate":"2018-08-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid phone number.","lastModifiedDate":"2018-04-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isValidPhone(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Phone) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"hanwenlai":3,"-":50}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Iterator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2017-06-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2017-06-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * as to ensure that the person with exactly the same fields will be removed.","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * @see Person#isSamePerson(Person)","lastModifiedDate":"2018-04-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument.","lastModifiedDate":"2016-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public boolean contains(Person toCheck) {","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return internalList.stream().anyMatch(toCheck::isSamePerson);","lastModifiedDate":"2018-04-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"anthonyhoth"},"content":"    /**","lastModifiedDate":"2022-10-25"},{"lineNumber":40,"author":{"gitId":"anthonyhoth"},"content":"     * Returns true if the list contains a person with the same name in lower case as the given argument.","lastModifiedDate":"2022-10-25"},{"lineNumber":41,"author":{"gitId":"anthonyhoth"},"content":"     */","lastModifiedDate":"2022-10-25"},{"lineNumber":42,"author":{"gitId":"anthonyhoth"},"content":"    public boolean hasSimilarName(Person toCheck) {","lastModifiedDate":"2022-10-25"},{"lineNumber":43,"author":{"gitId":"anthonyhoth"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2022-10-25"},{"lineNumber":44,"author":{"gitId":"anthonyhoth"},"content":"        return internalList.stream().anyMatch(toCheck::hasSimilarName);","lastModifiedDate":"2022-10-25"},{"lineNumber":45,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-25"},{"lineNumber":46,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Adds a person to the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * The person must not already exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void add(Person toAdd) {","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2017-05-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2018-01-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2017-06-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-06-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2017-06-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-12-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        internalList.set(index, editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Removes the equivalent person from the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * The person must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void remove(Person toRemove) {","lastModifiedDate":"2018-08-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2017-05-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2018-02-28"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2016-08-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void setPersons(UniquePersonList replacement) {","lastModifiedDate":"2016-10-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2018-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2018-08-14"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Replaces the contents of this list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        requireAllNonNull(persons);","lastModifiedDate":"2018-01-10"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        if (!personsAreUnique(persons)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2018-01-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        internalList.setAll(persons);","lastModifiedDate":"2018-08-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-01"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2017-09-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-01"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2018-04-05"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2018-12-09"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {","lastModifiedDate":"2016-08-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        return internalList.iterator();","lastModifiedDate":"2016-08-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));","lastModifiedDate":"2018-08-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        return internalList.hashCode();","lastModifiedDate":"2016-09-21"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Returns true if {@code persons} contains only unique persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    private boolean personsAreUnique(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-04-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            for (int j \u003d i + 1; j \u003c persons.size(); j++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                if (persons.get(i).isSamePerson(persons.get(j))) {","lastModifiedDate":"2018-04-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                    return false;","lastModifiedDate":"2018-04-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2018-04-19"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":145,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"anthonyhoth":8,"-":137}},{"path":"src/main/java/seedu/address/model/person/exceptions/DuplicateRecordException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"anthonyhoth"},"content":"package seedu.address.model.person.exceptions;","lastModifiedDate":"2022-10-18"},{"lineNumber":2,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":3,"author":{"gitId":"anthonyhoth"},"content":"/**","lastModifiedDate":"2022-10-18"},{"lineNumber":4,"author":{"gitId":"anthonyhoth"},"content":" * Signals that the operation will result in duplicate Records (Records are considered duplicates if they have the same","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"anthonyhoth"},"content":" * date and data).","lastModifiedDate":"2022-10-18"},{"lineNumber":6,"author":{"gitId":"anthonyhoth"},"content":" */","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"anthonyhoth"},"content":"public class DuplicateRecordException extends RuntimeException {","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"anthonyhoth"},"content":"    public DuplicateRecordException() {","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"anthonyhoth"},"content":"        super(\"Operation would result in duplicate records\");","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":11,"author":{"gitId":"anthonyhoth"},"content":"}","lastModifiedDate":"2022-10-18"}],"authorContributionMap":{"anthonyhoth":11}},{"path":"src/main/java/seedu/address/model/person/exceptions/RecordNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"anthonyhoth"},"content":"package seedu.address.model.person.exceptions;","lastModifiedDate":"2022-10-18"},{"lineNumber":2,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":3,"author":{"gitId":"anthonyhoth"},"content":"/**","lastModifiedDate":"2022-10-18"},{"lineNumber":4,"author":{"gitId":"anthonyhoth"},"content":" * Signals that the operation is unable to find the specified record.","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"anthonyhoth"},"content":" */","lastModifiedDate":"2022-10-18"},{"lineNumber":6,"author":{"gitId":"anthonyhoth"},"content":"public class RecordNotFoundException extends RuntimeException {}","lastModifiedDate":"2022-10-18"}],"authorContributionMap":{"anthonyhoth":6}},{"path":"src/main/java/seedu/address/model/record/Medication.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"EiffelLKF"},"content":"package seedu.address.model.record;","lastModifiedDate":"2022-10-17"},{"lineNumber":2,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":3,"author":{"gitId":"EiffelLKF"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-17"},{"lineNumber":4,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-10-17"},{"lineNumber":5,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":6,"author":{"gitId":"EiffelLKF"},"content":"/**","lastModifiedDate":"2022-10-17"},{"lineNumber":7,"author":{"gitId":"EiffelLKF"},"content":" * Class encapsulating prescribed medication as part of medical records.","lastModifiedDate":"2022-10-17"},{"lineNumber":8,"author":{"gitId":"EiffelLKF"},"content":" */","lastModifiedDate":"2022-10-17"},{"lineNumber":9,"author":{"gitId":"EiffelLKF"},"content":"public class Medication {","lastModifiedDate":"2022-10-17"},{"lineNumber":10,"author":{"gitId":"EiffelLKF"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Medication field cannot be empty!\";","lastModifiedDate":"2022-10-17"},{"lineNumber":11,"author":{"gitId":"EiffelLKF"},"content":"    public static final String MESSAGE_NO_MEDICATION_GIVEN \u003d \"No medication was prescribed!\";","lastModifiedDate":"2022-10-17"},{"lineNumber":12,"author":{"gitId":"EiffelLKF"},"content":"    public final String medicationName;","lastModifiedDate":"2022-10-17"},{"lineNumber":13,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":14,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-17"},{"lineNumber":15,"author":{"gitId":"EiffelLKF"},"content":"     * Returns Medication object of input string.","lastModifiedDate":"2022-10-17"},{"lineNumber":16,"author":{"gitId":"EiffelLKF"},"content":"     *","lastModifiedDate":"2022-10-17"},{"lineNumber":17,"author":{"gitId":"EiffelLKF"},"content":"     * @param medication Input string.","lastModifiedDate":"2022-10-17"},{"lineNumber":18,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-17"},{"lineNumber":19,"author":{"gitId":"EiffelLKF"},"content":"    private Medication(String medication) {","lastModifiedDate":"2022-10-17"},{"lineNumber":20,"author":{"gitId":"EiffelLKF"},"content":"        requireNonNull(medication);","lastModifiedDate":"2022-10-17"},{"lineNumber":21,"author":{"gitId":"EiffelLKF"},"content":"        checkArgument(isValidMedication(medication), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-17"},{"lineNumber":22,"author":{"gitId":"EiffelLKF"},"content":"        this.medicationName \u003d medication;","lastModifiedDate":"2022-10-17"},{"lineNumber":23,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":24,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":25,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-17"},{"lineNumber":26,"author":{"gitId":"EiffelLKF"},"content":"     * Empty constructor.","lastModifiedDate":"2022-10-17"},{"lineNumber":27,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-17"},{"lineNumber":28,"author":{"gitId":"EiffelLKF"},"content":"    private Medication() {","lastModifiedDate":"2022-10-17"},{"lineNumber":29,"author":{"gitId":"EiffelLKF"},"content":"        this.medicationName \u003d MESSAGE_NO_MEDICATION_GIVEN;","lastModifiedDate":"2022-10-17"},{"lineNumber":30,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":31,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":32,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-17"},{"lineNumber":33,"author":{"gitId":"EiffelLKF"},"content":"     * Factory method of the Medication class.","lastModifiedDate":"2022-10-17"},{"lineNumber":34,"author":{"gitId":"EiffelLKF"},"content":"     * Also used to parse JSON Storage file.","lastModifiedDate":"2022-10-17"},{"lineNumber":35,"author":{"gitId":"EiffelLKF"},"content":"     *","lastModifiedDate":"2022-10-17"},{"lineNumber":36,"author":{"gitId":"EiffelLKF"},"content":"     * @param in String to be read.","lastModifiedDate":"2022-10-17"},{"lineNumber":37,"author":{"gitId":"EiffelLKF"},"content":"     * @return Medication object corresponding to the input string.","lastModifiedDate":"2022-10-17"},{"lineNumber":38,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-17"},{"lineNumber":39,"author":{"gitId":"EiffelLKF"},"content":"    public static Medication of(String in) {","lastModifiedDate":"2022-10-17"},{"lineNumber":40,"author":{"gitId":"EiffelLKF"},"content":"        if (in.equals(MESSAGE_NO_MEDICATION_GIVEN)) {","lastModifiedDate":"2022-10-17"},{"lineNumber":41,"author":{"gitId":"EiffelLKF"},"content":"            return new Medication();","lastModifiedDate":"2022-10-17"},{"lineNumber":42,"author":{"gitId":"EiffelLKF"},"content":"        } else {","lastModifiedDate":"2022-10-17"},{"lineNumber":43,"author":{"gitId":"EiffelLKF"},"content":"            return new Medication(in);","lastModifiedDate":"2022-10-17"},{"lineNumber":44,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-17"},{"lineNumber":45,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":46,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":47,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-17"},{"lineNumber":48,"author":{"gitId":"EiffelLKF"},"content":"     * Check if an input string medication is valid.","lastModifiedDate":"2022-10-17"},{"lineNumber":49,"author":{"gitId":"EiffelLKF"},"content":"     * Input string is valid if it is non-empty.","lastModifiedDate":"2022-10-17"},{"lineNumber":50,"author":{"gitId":"EiffelLKF"},"content":"     *","lastModifiedDate":"2022-10-17"},{"lineNumber":51,"author":{"gitId":"EiffelLKF"},"content":"     * @param in String to be tested.","lastModifiedDate":"2022-10-17"},{"lineNumber":52,"author":{"gitId":"EiffelLKF"},"content":"     * @return True if input string is valid. False otherwise.","lastModifiedDate":"2022-10-17"},{"lineNumber":53,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-17"},{"lineNumber":54,"author":{"gitId":"EiffelLKF"},"content":"    public static boolean isValidMedication(String in) {","lastModifiedDate":"2022-10-17"},{"lineNumber":55,"author":{"gitId":"EiffelLKF"},"content":"        return !in.isEmpty();","lastModifiedDate":"2022-10-17"},{"lineNumber":56,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":57,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":58,"author":{"gitId":"EiffelLKF"},"content":"    @Override","lastModifiedDate":"2022-10-17"},{"lineNumber":59,"author":{"gitId":"EiffelLKF"},"content":"    public String toString() {","lastModifiedDate":"2022-10-17"},{"lineNumber":60,"author":{"gitId":"EiffelLKF"},"content":"        return this.medicationName;","lastModifiedDate":"2022-10-17"},{"lineNumber":61,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":62,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":63,"author":{"gitId":"EiffelLKF"},"content":"    @Override","lastModifiedDate":"2022-10-17"},{"lineNumber":64,"author":{"gitId":"EiffelLKF"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-17"},{"lineNumber":65,"author":{"gitId":"EiffelLKF"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-17"},{"lineNumber":66,"author":{"gitId":"EiffelLKF"},"content":"                || (other instanceof Medication // instanceof handles nulls","lastModifiedDate":"2022-10-17"},{"lineNumber":67,"author":{"gitId":"EiffelLKF"},"content":"                \u0026\u0026 isMedicationNamesEqual(((Medication) other).medicationName)// state check","lastModifiedDate":"2022-10-17"},{"lineNumber":68,"author":{"gitId":"EiffelLKF"},"content":"                );","lastModifiedDate":"2022-10-17"},{"lineNumber":69,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":70,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":71,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-17"},{"lineNumber":72,"author":{"gitId":"EiffelLKF"},"content":"     * Determine if two medication names are equal, regardless of lettercase","lastModifiedDate":"2022-10-17"},{"lineNumber":73,"author":{"gitId":"EiffelLKF"},"content":"     *","lastModifiedDate":"2022-10-17"},{"lineNumber":74,"author":{"gitId":"EiffelLKF"},"content":"     * @param other Other medication name to check.","lastModifiedDate":"2022-10-17"},{"lineNumber":75,"author":{"gitId":"EiffelLKF"},"content":"     * @return True if both names are equal. False otherwise.","lastModifiedDate":"2022-10-17"},{"lineNumber":76,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-17"},{"lineNumber":77,"author":{"gitId":"EiffelLKF"},"content":"    private boolean isMedicationNamesEqual(String other) {","lastModifiedDate":"2022-10-17"},{"lineNumber":78,"author":{"gitId":"EiffelLKF"},"content":"        String name \u003d medicationName.toLowerCase();","lastModifiedDate":"2022-10-17"},{"lineNumber":79,"author":{"gitId":"EiffelLKF"},"content":"        String otherName \u003d other.toLowerCase();","lastModifiedDate":"2022-10-17"},{"lineNumber":80,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":81,"author":{"gitId":"EiffelLKF"},"content":"        return name.equals(otherName);","lastModifiedDate":"2022-10-17"},{"lineNumber":82,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":83,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":84,"author":{"gitId":"EiffelLKF"},"content":"    @Override","lastModifiedDate":"2022-10-17"},{"lineNumber":85,"author":{"gitId":"EiffelLKF"},"content":"    public int hashCode() {","lastModifiedDate":"2022-10-17"},{"lineNumber":86,"author":{"gitId":"EiffelLKF"},"content":"        return medicationName.hashCode();","lastModifiedDate":"2022-10-17"},{"lineNumber":87,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":88,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":89,"author":{"gitId":"EiffelLKF"},"content":"}","lastModifiedDate":"2022-10-17"}],"authorContributionMap":{"EiffelLKF":89}},{"path":"src/main/java/seedu/address/model/record/Record.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"EiffelLKF"},"content":"package seedu.address.model.record;","lastModifiedDate":"2022-10-17"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":3,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RECORD_DATA_FORMAT;","lastModifiedDate":"2022-10-12"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-10-04"},{"lineNumber":5,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-10-17"},{"lineNumber":6,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.model.record.Medication.MESSAGE_NO_MEDICATION_GIVEN;","lastModifiedDate":"2022-10-17"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-04"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-10-04"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-10-04"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"import java.time.format.ResolverStyle;","lastModifiedDate":"2022-11-01"},{"lineNumber":12,"author":{"gitId":"EiffelLKF"},"content":"import java.util.Collections;","lastModifiedDate":"2022-10-17"},{"lineNumber":13,"author":{"gitId":"EiffelLKF"},"content":"import java.util.HashSet;","lastModifiedDate":"2022-10-17"},{"lineNumber":14,"author":{"gitId":"EiffelLKF"},"content":"import java.util.Set;","lastModifiedDate":"2022-10-17"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"/**","lastModifiedDate":"2022-10-04"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":" * Represents a single record in the record list of a Person object.","lastModifiedDate":"2022-10-04"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":" */","lastModifiedDate":"2022-10-04"},{"lineNumber":19,"author":{"gitId":"hanwenlai"},"content":"public class Record implements Comparable\u003cRecord\u003e {","lastModifiedDate":"2022-10-14"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"    public static final DateTimeFormatter DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd-MM-uuuu HHmm\")","lastModifiedDate":"2022-11-01"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"            .withResolverStyle(ResolverStyle.STRICT);","lastModifiedDate":"2022-11-01"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"    public static final String MESSAGE_INVALID_DATE_FORMAT \u003d \"Record dates have to be of format dd-MM-yyyy HHmm!\"","lastModifiedDate":"2022-11-01"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"            + \"Please also ensure this is a valid date!\";","lastModifiedDate":"2022-11-01"},{"lineNumber":24,"author":{"gitId":"hanwenlai"},"content":"    public static final String MESSAGE_FUTURE_DATE \u003d \"Record dates must not be later than the current date!\";","lastModifiedDate":"2022-10-27"},{"lineNumber":25,"author":{"gitId":"marclzh"},"content":"    /* Data Fields */","lastModifiedDate":"2022-10-04"},{"lineNumber":26,"author":{"gitId":"marclzh"},"content":"    public final String record;","lastModifiedDate":"2022-10-04"},{"lineNumber":27,"author":{"gitId":"marclzh"},"content":"    private final LocalDateTime recordDate;","lastModifiedDate":"2022-10-04"},{"lineNumber":28,"author":{"gitId":"EiffelLKF"},"content":"    private final Set\u003cMedication\u003e medications; // optional field","lastModifiedDate":"2022-10-17"},{"lineNumber":29,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":30,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-04"},{"lineNumber":31,"author":{"gitId":"marclzh"},"content":"     * Constructs a record.","lastModifiedDate":"2022-10-04"},{"lineNumber":32,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-10-04"},{"lineNumber":33,"author":{"gitId":"marclzh"},"content":"     * @param recordDate Date that the record was made.","lastModifiedDate":"2022-10-04"},{"lineNumber":34,"author":{"gitId":"marclzh"},"content":"     * @param record     Contents of the record.","lastModifiedDate":"2022-10-04"},{"lineNumber":35,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-04"},{"lineNumber":36,"author":{"gitId":"EiffelLKF"},"content":"    public Record(LocalDateTime recordDate, String record, Set\u003cMedication\u003e meds) {","lastModifiedDate":"2022-10-17"},{"lineNumber":37,"author":{"gitId":"EiffelLKF"},"content":"        requireAllNonNull(recordDate, record, meds);","lastModifiedDate":"2022-10-17"},{"lineNumber":38,"author":{"gitId":"EiffelLKF"},"content":"        checkArgument(isValidRecordData(record), MESSAGE_INVALID_RECORD_DATA_FORMAT);","lastModifiedDate":"2022-10-12"},{"lineNumber":39,"author":{"gitId":"EiffelLKF"},"content":"        this.recordDate \u003d recordDate;","lastModifiedDate":"2022-10-17"},{"lineNumber":40,"author":{"gitId":"marclzh"},"content":"        this.record \u003d record;","lastModifiedDate":"2022-10-04"},{"lineNumber":41,"author":{"gitId":"EiffelLKF"},"content":"        this.medications \u003d meds;","lastModifiedDate":"2022-10-17"},{"lineNumber":42,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":43,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":44,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-17"},{"lineNumber":45,"author":{"gitId":"EiffelLKF"},"content":"     * Constructs a record, with no medication.","lastModifiedDate":"2022-10-17"},{"lineNumber":46,"author":{"gitId":"EiffelLKF"},"content":"     *","lastModifiedDate":"2022-10-17"},{"lineNumber":47,"author":{"gitId":"EiffelLKF"},"content":"     * @param recordDate Date that the record was made.","lastModifiedDate":"2022-10-17"},{"lineNumber":48,"author":{"gitId":"EiffelLKF"},"content":"     * @param record     Contents of the record.","lastModifiedDate":"2022-10-17"},{"lineNumber":49,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-17"},{"lineNumber":50,"author":{"gitId":"EiffelLKF"},"content":"    public Record(LocalDateTime recordDate, String record) {","lastModifiedDate":"2022-10-17"},{"lineNumber":51,"author":{"gitId":"EiffelLKF"},"content":"        requireAllNonNull(recordDate, record);","lastModifiedDate":"2022-10-17"},{"lineNumber":52,"author":{"gitId":"EiffelLKF"},"content":"        checkArgument(isValidRecordData(record), MESSAGE_INVALID_RECORD_DATA_FORMAT);","lastModifiedDate":"2022-10-17"},{"lineNumber":53,"author":{"gitId":"EiffelLKF"},"content":"        this.recordDate \u003d recordDate;","lastModifiedDate":"2022-10-17"},{"lineNumber":54,"author":{"gitId":"EiffelLKF"},"content":"        this.record \u003d record;","lastModifiedDate":"2022-10-17"},{"lineNumber":55,"author":{"gitId":"EiffelLKF"},"content":"        this.medications \u003d new HashSet\u003cMedication\u003e();","lastModifiedDate":"2022-10-17"},{"lineNumber":56,"author":{"gitId":"EiffelLKF"},"content":"        this.medications.add(Medication.of(MESSAGE_NO_MEDICATION_GIVEN));","lastModifiedDate":"2022-10-17"},{"lineNumber":57,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":58,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":59,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-04"},{"lineNumber":60,"author":{"gitId":"hanwenlai"},"content":"     * Returns true if the record date is in the valid format.","lastModifiedDate":"2022-10-27"},{"lineNumber":61,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-10-04"},{"lineNumber":62,"author":{"gitId":"marclzh"},"content":"     * @param testDate Date to be tested.","lastModifiedDate":"2022-10-04"},{"lineNumber":63,"author":{"gitId":"hanwenlai"},"content":"     * @return True if the record date is in the valid format.","lastModifiedDate":"2022-10-27"},{"lineNumber":64,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-04"},{"lineNumber":65,"author":{"gitId":"hanwenlai"},"content":"    public static boolean isValidDateFormat(String testDate) {","lastModifiedDate":"2022-10-27"},{"lineNumber":66,"author":{"gitId":"marclzh"},"content":"        try {","lastModifiedDate":"2022-10-04"},{"lineNumber":67,"author":{"gitId":"marclzh"},"content":"            LocalDateTime.parse(testDate, DATE_FORMAT);","lastModifiedDate":"2022-10-04"},{"lineNumber":68,"author":{"gitId":"marclzh"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-10-04"},{"lineNumber":69,"author":{"gitId":"marclzh"},"content":"            return false;","lastModifiedDate":"2022-10-04"},{"lineNumber":70,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-10-04"},{"lineNumber":71,"author":{"gitId":"marclzh"},"content":"        return true;","lastModifiedDate":"2022-10-04"},{"lineNumber":72,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":73,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":74,"author":{"gitId":"hanwenlai"},"content":"    /**","lastModifiedDate":"2022-10-27"},{"lineNumber":75,"author":{"gitId":"hanwenlai"},"content":"     * Returns true if the record date is after the current date.","lastModifiedDate":"2022-10-27"},{"lineNumber":76,"author":{"gitId":"hanwenlai"},"content":"     *","lastModifiedDate":"2022-10-27"},{"lineNumber":77,"author":{"gitId":"hanwenlai"},"content":"     * @param testDate Date to be tested.","lastModifiedDate":"2022-10-27"},{"lineNumber":78,"author":{"gitId":"hanwenlai"},"content":"     * @return True if the record date is after the current date.","lastModifiedDate":"2022-10-27"},{"lineNumber":79,"author":{"gitId":"hanwenlai"},"content":"     */","lastModifiedDate":"2022-10-27"},{"lineNumber":80,"author":{"gitId":"hanwenlai"},"content":"    public static boolean isFutureDate(String testDate) {","lastModifiedDate":"2022-10-27"},{"lineNumber":81,"author":{"gitId":"hanwenlai"},"content":"        LocalDateTime recordDate \u003d LocalDateTime.parse(testDate, DATE_FORMAT);","lastModifiedDate":"2022-10-27"},{"lineNumber":82,"author":{"gitId":"hanwenlai"},"content":"        LocalDateTime currDate \u003d LocalDateTime.now();","lastModifiedDate":"2022-10-27"},{"lineNumber":83,"author":{"gitId":"hanwenlai"},"content":"        return recordDate.isAfter(currDate);","lastModifiedDate":"2022-10-27"},{"lineNumber":84,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-27"},{"lineNumber":85,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-27"},{"lineNumber":86,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-12"},{"lineNumber":87,"author":{"gitId":"EiffelLKF"},"content":"     * Returns true if a given string is valid record data.","lastModifiedDate":"2022-10-12"},{"lineNumber":88,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-12"},{"lineNumber":89,"author":{"gitId":"EiffelLKF"},"content":"    public static boolean isValidRecordData(String test) {","lastModifiedDate":"2022-10-12"},{"lineNumber":90,"author":{"gitId":"EiffelLKF"},"content":"        return !test.isBlank();","lastModifiedDate":"2022-10-12"},{"lineNumber":91,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":92,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":93,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-04"},{"lineNumber":94,"author":{"gitId":"marclzh"},"content":"     * Record date getter.","lastModifiedDate":"2022-10-04"},{"lineNumber":95,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-10-04"},{"lineNumber":96,"author":{"gitId":"marclzh"},"content":"     * @return The record date.","lastModifiedDate":"2022-10-04"},{"lineNumber":97,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-04"},{"lineNumber":98,"author":{"gitId":"EiffelLKF"},"content":"    public LocalDateTime getRecordDate() {","lastModifiedDate":"2022-10-17"},{"lineNumber":99,"author":{"gitId":"EiffelLKF"},"content":"        return this.recordDate;","lastModifiedDate":"2022-10-17"},{"lineNumber":100,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":101,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":102,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-17"},{"lineNumber":103,"author":{"gitId":"EiffelLKF"},"content":"     * Record data getter.","lastModifiedDate":"2022-10-17"},{"lineNumber":104,"author":{"gitId":"EiffelLKF"},"content":"     *","lastModifiedDate":"2022-10-17"},{"lineNumber":105,"author":{"gitId":"EiffelLKF"},"content":"     * @return The record data.","lastModifiedDate":"2022-10-17"},{"lineNumber":106,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-17"},{"lineNumber":107,"author":{"gitId":"EiffelLKF"},"content":"    public String getRecordData() {","lastModifiedDate":"2022-10-17"},{"lineNumber":108,"author":{"gitId":"EiffelLKF"},"content":"        return this.record;","lastModifiedDate":"2022-10-17"},{"lineNumber":109,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":110,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":111,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-17"},{"lineNumber":112,"author":{"gitId":"EiffelLKF"},"content":"     * Medication Set getter.","lastModifiedDate":"2022-10-17"},{"lineNumber":113,"author":{"gitId":"EiffelLKF"},"content":"     *","lastModifiedDate":"2022-10-17"},{"lineNumber":114,"author":{"gitId":"EiffelLKF"},"content":"     * @return Unmodifiable set of medications.","lastModifiedDate":"2022-10-17"},{"lineNumber":115,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-17"},{"lineNumber":116,"author":{"gitId":"EiffelLKF"},"content":"    public Set\u003cMedication\u003e getMedications() {","lastModifiedDate":"2022-10-17"},{"lineNumber":117,"author":{"gitId":"EiffelLKF"},"content":"        return Collections.unmodifiableSet(medications);","lastModifiedDate":"2022-10-17"},{"lineNumber":118,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":119,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":120,"author":{"gitId":"anthonyhoth"},"content":"    /**","lastModifiedDate":"2022-10-18"},{"lineNumber":121,"author":{"gitId":"anthonyhoth"},"content":"     * Returns true if both record have the same record data and date.","lastModifiedDate":"2022-10-18"},{"lineNumber":122,"author":{"gitId":"anthonyhoth"},"content":"     * This defines a weaker notion of equality between two record.","lastModifiedDate":"2022-10-18"},{"lineNumber":123,"author":{"gitId":"anthonyhoth"},"content":"     */","lastModifiedDate":"2022-10-18"},{"lineNumber":124,"author":{"gitId":"anthonyhoth"},"content":"    public boolean isSameRecord(Record otherRecord) {","lastModifiedDate":"2022-10-18"},{"lineNumber":125,"author":{"gitId":"anthonyhoth"},"content":"        if (otherRecord \u003d\u003d this) {","lastModifiedDate":"2022-10-18"},{"lineNumber":126,"author":{"gitId":"anthonyhoth"},"content":"            return true;","lastModifiedDate":"2022-10-18"},{"lineNumber":127,"author":{"gitId":"anthonyhoth"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":128,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":129,"author":{"gitId":"anthonyhoth"},"content":"        return otherRecord !\u003d null","lastModifiedDate":"2022-10-24"},{"lineNumber":130,"author":{"gitId":"anthonyhoth"},"content":"                \u0026\u0026 otherRecord.getRecordDate().equals(getRecordDate());","lastModifiedDate":"2022-10-18"},{"lineNumber":131,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":132,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":133,"author":{"gitId":"hanwenlai"},"content":"    @Override","lastModifiedDate":"2022-10-14"},{"lineNumber":134,"author":{"gitId":"hanwenlai"},"content":"    public int compareTo(Record record) {","lastModifiedDate":"2022-10-14"},{"lineNumber":135,"author":{"gitId":"hanwenlai"},"content":"        return this.recordDate.compareTo(record.recordDate);","lastModifiedDate":"2022-10-14"},{"lineNumber":136,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":137,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":138,"author":{"gitId":"marclzh"},"content":"    @Override","lastModifiedDate":"2022-10-04"},{"lineNumber":139,"author":{"gitId":"marclzh"},"content":"    public String toString() {","lastModifiedDate":"2022-10-04"},{"lineNumber":140,"author":{"gitId":"EiffelLKF"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2022-10-17"},{"lineNumber":141,"author":{"gitId":"anthonyhoth"},"content":"        builder.append(\"Date: \")","lastModifiedDate":"2022-10-24"},{"lineNumber":142,"author":{"gitId":"anthonyhoth"},"content":"                .append(getRecordDate().format(DATE_FORMAT))","lastModifiedDate":"2022-10-24"},{"lineNumber":143,"author":{"gitId":"EiffelLKF"},"content":"                .append(\"; Record: \")","lastModifiedDate":"2022-10-17"},{"lineNumber":144,"author":{"gitId":"EiffelLKF"},"content":"                .append(record);","lastModifiedDate":"2022-10-17"},{"lineNumber":145,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":146,"author":{"gitId":"EiffelLKF"},"content":"        Set\u003cMedication\u003e meds \u003d getMedications();","lastModifiedDate":"2022-10-17"},{"lineNumber":147,"author":{"gitId":"EiffelLKF"},"content":"        if (!meds.isEmpty()) {","lastModifiedDate":"2022-10-17"},{"lineNumber":148,"author":{"gitId":"EiffelLKF"},"content":"            builder.append(\"; Medications: \");","lastModifiedDate":"2022-10-17"},{"lineNumber":149,"author":{"gitId":"EiffelLKF"},"content":"            meds.forEach(med -\u003e builder.append(med + \" \"));","lastModifiedDate":"2022-10-17"},{"lineNumber":150,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-17"},{"lineNumber":151,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":152,"author":{"gitId":"EiffelLKF"},"content":"        return builder.toString();","lastModifiedDate":"2022-10-17"},{"lineNumber":153,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":154,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":155,"author":{"gitId":"marclzh"},"content":"    @Override","lastModifiedDate":"2022-10-04"},{"lineNumber":156,"author":{"gitId":"marclzh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-04"},{"lineNumber":157,"author":{"gitId":"marclzh"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-04"},{"lineNumber":158,"author":{"gitId":"marclzh"},"content":"                || (other instanceof Record // instanceof handles nulls","lastModifiedDate":"2022-10-04"},{"lineNumber":159,"author":{"gitId":"marclzh"},"content":"                \u0026\u0026 recordDate.equals(((Record) other).recordDate)","lastModifiedDate":"2022-10-04"},{"lineNumber":160,"author":{"gitId":"EiffelLKF"},"content":"                \u0026\u0026 record.equals((((Record) other).record))","lastModifiedDate":"2022-10-17"},{"lineNumber":161,"author":{"gitId":"EiffelLKF"},"content":"                \u0026\u0026 medications.equals(((Record) other).medications)); // state check","lastModifiedDate":"2022-10-17"},{"lineNumber":162,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":163,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":164,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":165,"author":{"gitId":"marclzh"},"content":"    /* todo figure out what this should be */","lastModifiedDate":"2022-10-04"},{"lineNumber":166,"author":{"gitId":"marclzh"},"content":"    @Override","lastModifiedDate":"2022-10-04"},{"lineNumber":167,"author":{"gitId":"marclzh"},"content":"    public int hashCode() {","lastModifiedDate":"2022-10-04"},{"lineNumber":168,"author":{"gitId":"marclzh"},"content":"        return record.hashCode();","lastModifiedDate":"2022-10-04"},{"lineNumber":169,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":170,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-10-04"}],"authorContributionMap":{"anthonyhoth":15,"marclzh":63,"hanwenlai":22,"LJXSean":1,"EiffelLKF":69}},{"path":"src/main/java/seedu/address/model/record/RecordContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"EiffelLKF"},"content":"package seedu.address.model.record;","lastModifiedDate":"2022-10-17"},{"lineNumber":2,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":3,"author":{"gitId":"LJXSean"},"content":"import static seedu.address.logic.commands.FindRecordCommand.FIND_RECORD_DATE_FORMAT;","lastModifiedDate":"2022-10-26"},{"lineNumber":4,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":5,"author":{"gitId":"LJXSean"},"content":"import java.util.List;","lastModifiedDate":"2022-10-08"},{"lineNumber":6,"author":{"gitId":"LJXSean"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-08"},{"lineNumber":7,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":8,"author":{"gitId":"LJXSean"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2022-10-08"},{"lineNumber":9,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":10,"author":{"gitId":"LJXSean"},"content":"/**","lastModifiedDate":"2022-10-08"},{"lineNumber":11,"author":{"gitId":"LJXSean"},"content":" * Tests that all fields in {@code Record} that are specified by the input prefix matches any of the keywords given.","lastModifiedDate":"2022-10-26"},{"lineNumber":12,"author":{"gitId":"LJXSean"},"content":" */","lastModifiedDate":"2022-10-08"},{"lineNumber":13,"author":{"gitId":"LJXSean"},"content":"public class RecordContainsKeywordsPredicate implements Predicate\u003cRecord\u003e {","lastModifiedDate":"2022-10-08"},{"lineNumber":14,"author":{"gitId":"LJXSean"},"content":"    private final List\u003cString\u003e recordKeywords;","lastModifiedDate":"2022-10-20"},{"lineNumber":15,"author":{"gitId":"LJXSean"},"content":"    private final List\u003cString\u003e medicationKeywords;","lastModifiedDate":"2022-10-20"},{"lineNumber":16,"author":{"gitId":"LJXSean"},"content":"    private final String dateKeyword;","lastModifiedDate":"2022-10-26"},{"lineNumber":17,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":18,"author":{"gitId":"LJXSean"},"content":"    /**","lastModifiedDate":"2022-10-20"},{"lineNumber":19,"author":{"gitId":"LJXSean"},"content":"     * Constructs a {@code RecordContainsKeywordsPredicate} with the specified fields for","lastModifiedDate":"2022-10-20"},{"lineNumber":20,"author":{"gitId":"LJXSean"},"content":"     * rfind commands with multiple input parameters","lastModifiedDate":"2022-10-20"},{"lineNumber":21,"author":{"gitId":"LJXSean"},"content":"     */","lastModifiedDate":"2022-10-20"},{"lineNumber":22,"author":{"gitId":"LJXSean"},"content":"    public RecordContainsKeywordsPredicate(","lastModifiedDate":"2022-10-20"},{"lineNumber":23,"author":{"gitId":"LJXSean"},"content":"            List\u003cString\u003e recordKeywords, List\u003cString\u003e medicationKeywords, String dateKeyword) {","lastModifiedDate":"2022-10-26"},{"lineNumber":24,"author":{"gitId":"LJXSean"},"content":"        this.recordKeywords \u003d recordKeywords;","lastModifiedDate":"2022-10-20"},{"lineNumber":25,"author":{"gitId":"LJXSean"},"content":"        this.medicationKeywords \u003d medicationKeywords;","lastModifiedDate":"2022-10-20"},{"lineNumber":26,"author":{"gitId":"LJXSean"},"content":"        this.dateKeyword \u003d dateKeyword;","lastModifiedDate":"2022-10-20"},{"lineNumber":27,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":28,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":29,"author":{"gitId":"LJXSean"},"content":"    @Override","lastModifiedDate":"2022-10-08"},{"lineNumber":30,"author":{"gitId":"LJXSean"},"content":"    public boolean test(Record record) {","lastModifiedDate":"2022-10-08"},{"lineNumber":31,"author":{"gitId":"LJXSean"},"content":"        boolean recordDataMatch \u003d recordKeywords.isEmpty()","lastModifiedDate":"2022-10-26"},{"lineNumber":32,"author":{"gitId":"LJXSean"},"content":"                || recordKeywords.stream()","lastModifiedDate":"2022-10-26"},{"lineNumber":33,"author":{"gitId":"LJXSean"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(record.record, keyword));","lastModifiedDate":"2022-10-08"},{"lineNumber":34,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":35,"author":{"gitId":"LJXSean"},"content":"        boolean medicationMatch \u003d medicationKeywords.isEmpty()","lastModifiedDate":"2022-10-26"},{"lineNumber":36,"author":{"gitId":"LJXSean"},"content":"                || medicationKeywords.stream()","lastModifiedDate":"2022-10-26"},{"lineNumber":37,"author":{"gitId":"LJXSean"},"content":"                .anyMatch(keyword -\u003e record.getMedications().stream()","lastModifiedDate":"2022-10-20"},{"lineNumber":38,"author":{"gitId":"LJXSean"},"content":"                        .anyMatch(meds -\u003e StringUtil.containsWordIgnoreCase(meds.toString(), keyword)));","lastModifiedDate":"2022-10-20"},{"lineNumber":39,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":40,"author":{"gitId":"LJXSean"},"content":"        String recordDate \u003d record.getRecordDate().format(FIND_RECORD_DATE_FORMAT);","lastModifiedDate":"2022-10-26"},{"lineNumber":41,"author":{"gitId":"LJXSean"},"content":"        boolean dateMatch \u003d dateKeyword.isBlank()","lastModifiedDate":"2022-10-26"},{"lineNumber":42,"author":{"gitId":"LJXSean"},"content":"                || dateKeyword.equals(recordDate);","lastModifiedDate":"2022-10-26"},{"lineNumber":43,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":44,"author":{"gitId":"LJXSean"},"content":"        return dateMatch \u0026\u0026 medicationMatch \u0026\u0026 recordDataMatch;","lastModifiedDate":"2022-10-26"},{"lineNumber":45,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":46,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":47,"author":{"gitId":"LJXSean"},"content":"    @Override","lastModifiedDate":"2022-10-08"},{"lineNumber":48,"author":{"gitId":"LJXSean"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-08"},{"lineNumber":49,"author":{"gitId":"LJXSean"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-08"},{"lineNumber":50,"author":{"gitId":"LJXSean"},"content":"                || (other instanceof RecordContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2022-10-08"},{"lineNumber":51,"author":{"gitId":"LJXSean"},"content":"                \u0026\u0026 recordKeywords.equals(((RecordContainsKeywordsPredicate) other).recordKeywords)// state check","lastModifiedDate":"2022-10-20"},{"lineNumber":52,"author":{"gitId":"LJXSean"},"content":"                \u0026\u0026 medicationKeywords.equals(((RecordContainsKeywordsPredicate) other).medicationKeywords) //state check","lastModifiedDate":"2022-10-20"},{"lineNumber":53,"author":{"gitId":"LJXSean"},"content":"                \u0026\u0026 dateKeyword.equals(((RecordContainsKeywordsPredicate) other).dateKeyword)); // state check","lastModifiedDate":"2022-10-20"},{"lineNumber":54,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":55,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":56,"author":{"gitId":"LJXSean"},"content":"}","lastModifiedDate":"2022-10-08"}],"authorContributionMap":{"LJXSean":55,"EiffelLKF":1}},{"path":"src/main/java/seedu/address/model/record/RecordList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"EiffelLKF"},"content":"package seedu.address.model.record;","lastModifiedDate":"2022-10-17"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":3,"author":{"gitId":"EiffelLKF"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-10"},{"lineNumber":4,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":6,"author":{"gitId":"LJXSean"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2022-10-08"},{"lineNumber":7,"author":{"gitId":"LJXSean"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-10-08"},{"lineNumber":8,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.model.person.exceptions.DuplicateRecordException;","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.model.person.exceptions.RecordNotFoundException;","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"/**","lastModifiedDate":"2022-10-04"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":" * Represents a record list in the address book.","lastModifiedDate":"2022-10-04"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":" */","lastModifiedDate":"2022-10-04"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"public class RecordList {","lastModifiedDate":"2022-10-04"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"    /* Record List variables */","lastModifiedDate":"2022-10-04"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"    // count of the record list should be accessed through the ArrayList#size() method.","lastModifiedDate":"2022-10-04"},{"lineNumber":17,"author":{"gitId":"LJXSean"},"content":"    private final ObservableList\u003cRecord\u003e recordList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2022-10-08"},{"lineNumber":18,"author":{"gitId":"LJXSean"},"content":"    private final ObservableList\u003cRecord\u003e internalUnmodifiableRecordList \u003d","lastModifiedDate":"2022-10-08"},{"lineNumber":19,"author":{"gitId":"LJXSean"},"content":"            FXCollections.unmodifiableObservableList(recordList);","lastModifiedDate":"2022-10-08"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":21,"author":{"gitId":"hanwenlai"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":22,"author":{"gitId":"hanwenlai"},"content":"     * Adds a record to the RecordList.","lastModifiedDate":"2022-10-10"},{"lineNumber":23,"author":{"gitId":"hanwenlai"},"content":"     *","lastModifiedDate":"2022-10-10"},{"lineNumber":24,"author":{"gitId":"hanwenlai"},"content":"     * @param toAdd Record to add.","lastModifiedDate":"2022-10-10"},{"lineNumber":25,"author":{"gitId":"hanwenlai"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":26,"author":{"gitId":"hanwenlai"},"content":"    public void add(Record toAdd) {","lastModifiedDate":"2022-10-10"},{"lineNumber":27,"author":{"gitId":"hanwenlai"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2022-10-10"},{"lineNumber":28,"author":{"gitId":"hanwenlai"},"content":"        recordList.add(toAdd);","lastModifiedDate":"2022-10-10"},{"lineNumber":29,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":30,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":31,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":32,"author":{"gitId":"EiffelLKF"},"content":"     * Returns true if the list contains an equivalent record as the given argument.","lastModifiedDate":"2022-10-10"},{"lineNumber":33,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":34,"author":{"gitId":"EiffelLKF"},"content":"    public boolean contains(Record toCheck) {","lastModifiedDate":"2022-10-10"},{"lineNumber":35,"author":{"gitId":"EiffelLKF"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2022-10-10"},{"lineNumber":36,"author":{"gitId":"anthonyhoth"},"content":"        return recordList.stream().anyMatch(toCheck::isSameRecord);","lastModifiedDate":"2022-10-24"},{"lineNumber":37,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":38,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":39,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-04"},{"lineNumber":40,"author":{"gitId":"marclzh"},"content":"     * Getter for list of records.","lastModifiedDate":"2022-10-04"},{"lineNumber":41,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-10-04"},{"lineNumber":42,"author":{"gitId":"marclzh"},"content":"     * @return List of records.","lastModifiedDate":"2022-10-04"},{"lineNumber":43,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-04"},{"lineNumber":44,"author":{"gitId":"hanwenlai"},"content":"    public ObservableList\u003cRecord\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2022-10-10"},{"lineNumber":45,"author":{"gitId":"LJXSean"},"content":"        return internalUnmodifiableRecordList;","lastModifiedDate":"2022-10-08"},{"lineNumber":46,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":47,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":48,"author":{"gitId":"EiffelLKF"},"content":"    public void setRecordList(RecordList replacement) {","lastModifiedDate":"2022-10-10"},{"lineNumber":49,"author":{"gitId":"EiffelLKF"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2022-10-10"},{"lineNumber":50,"author":{"gitId":"EiffelLKF"},"content":"        recordList.setAll(replacement.recordList);","lastModifiedDate":"2022-10-10"},{"lineNumber":51,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":52,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":53,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-04"},{"lineNumber":54,"author":{"gitId":"marclzh"},"content":"     * Getter for size of list.","lastModifiedDate":"2022-10-04"},{"lineNumber":55,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-10-04"},{"lineNumber":56,"author":{"gitId":"marclzh"},"content":"     * @return Size of list.","lastModifiedDate":"2022-10-04"},{"lineNumber":57,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-04"},{"lineNumber":58,"author":{"gitId":"marclzh"},"content":"    public int getRecordListCount() {","lastModifiedDate":"2022-10-04"},{"lineNumber":59,"author":{"gitId":"marclzh"},"content":"        return this.recordList.size();","lastModifiedDate":"2022-10-04"},{"lineNumber":60,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":61,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":62,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":63,"author":{"gitId":"marclzh"},"content":"     * Clears the record list.","lastModifiedDate":"2022-10-10"},{"lineNumber":64,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":65,"author":{"gitId":"marclzh"},"content":"    public void clearRecords() {","lastModifiedDate":"2022-10-10"},{"lineNumber":66,"author":{"gitId":"marclzh"},"content":"        this.recordList.clear();","lastModifiedDate":"2022-10-10"},{"lineNumber":67,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":68,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":69,"author":{"gitId":"anthonyhoth"},"content":"    public void set(Record target, Record editedRecord) {","lastModifiedDate":"2022-10-18"},{"lineNumber":70,"author":{"gitId":"anthonyhoth"},"content":"        requireAllNonNull(target, editedRecord);","lastModifiedDate":"2022-10-18"},{"lineNumber":71,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":72,"author":{"gitId":"anthonyhoth"},"content":"        int index \u003d recordList.indexOf(target);","lastModifiedDate":"2022-10-18"},{"lineNumber":73,"author":{"gitId":"anthonyhoth"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2022-10-18"},{"lineNumber":74,"author":{"gitId":"anthonyhoth"},"content":"            throw new RecordNotFoundException();","lastModifiedDate":"2022-10-18"},{"lineNumber":75,"author":{"gitId":"anthonyhoth"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":76,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":77,"author":{"gitId":"anthonyhoth"},"content":"        if (!target.isSameRecord(editedRecord) \u0026\u0026 this.contains(editedRecord)) {","lastModifiedDate":"2022-10-18"},{"lineNumber":78,"author":{"gitId":"anthonyhoth"},"content":"            throw new DuplicateRecordException();","lastModifiedDate":"2022-10-18"},{"lineNumber":79,"author":{"gitId":"anthonyhoth"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":80,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":81,"author":{"gitId":"anthonyhoth"},"content":"        recordList.set(index, editedRecord);","lastModifiedDate":"2022-10-18"},{"lineNumber":82,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":83,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":84,"author":{"gitId":"marclzh"},"content":"    @Override","lastModifiedDate":"2022-10-04"},{"lineNumber":85,"author":{"gitId":"marclzh"},"content":"    public String toString() {","lastModifiedDate":"2022-10-04"},{"lineNumber":86,"author":{"gitId":"marclzh"},"content":"        return Integer.toString(recordList.size());","lastModifiedDate":"2022-10-15"},{"lineNumber":87,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":88,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":89,"author":{"gitId":"marclzh"},"content":"    @Override","lastModifiedDate":"2022-10-04"},{"lineNumber":90,"author":{"gitId":"marclzh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-04"},{"lineNumber":91,"author":{"gitId":"marclzh"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-04"},{"lineNumber":92,"author":{"gitId":"marclzh"},"content":"                || (other instanceof RecordList // instanceof handles nulls","lastModifiedDate":"2022-10-04"},{"lineNumber":93,"author":{"gitId":"marclzh"},"content":"                \u0026\u0026 recordList.equals(((RecordList) other).recordList)); // state check","lastModifiedDate":"2022-10-04"},{"lineNumber":94,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":95,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":96,"author":{"gitId":"anthonyhoth"},"content":"    public void delete(Record record) {","lastModifiedDate":"2022-10-10"},{"lineNumber":97,"author":{"gitId":"anthonyhoth"},"content":"        recordList.remove(record);","lastModifiedDate":"2022-10-10"},{"lineNumber":98,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":99,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":100,"author":{"gitId":"marclzh"},"content":"    @Override","lastModifiedDate":"2022-10-04"},{"lineNumber":101,"author":{"gitId":"marclzh"},"content":"    public int hashCode() {","lastModifiedDate":"2022-10-04"},{"lineNumber":102,"author":{"gitId":"marclzh"},"content":"        return recordList.hashCode();","lastModifiedDate":"2022-10-04"},{"lineNumber":103,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":104,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-10-04"}],"authorContributionMap":{"anthonyhoth":21,"marclzh":48,"hanwenlai":11,"LJXSean":9,"EiffelLKF":15}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;","lastModifiedDate":"2016-12-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"EiffelLKF"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2022-10-18"},{"lineNumber":11,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-18"},{"lineNumber":12,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.model.person.Birthdate;","lastModifiedDate":"2022-10-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2022-10-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2022-10-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2022-10-18"},{"lineNumber":17,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.Medication;","lastModifiedDate":"2022-10-17"},{"lineNumber":18,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2022-10-17"},{"lineNumber":19,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.RecordList;","lastModifiedDate":"2022-10-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":26,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {","lastModifiedDate":"2016-12-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return new Person[] {","lastModifiedDate":"2016-12-20"},{"lineNumber":29,"author":{"gitId":"hanwenlai"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Birthdate(\"08-08-1988\"), new Phone(\"87438807\"),","lastModifiedDate":"2022-10-19"},{"lineNumber":30,"author":{"gitId":"hanwenlai"},"content":"                new Email(\"alexyeoh@example.com\"), new Address(\"Blk 30 Geylang Street 29, #06-40\"),","lastModifiedDate":"2022-10-18"},{"lineNumber":31,"author":{"gitId":"marclzh"},"content":"                getTagSet(\"PollenAllergy\"), getSampleRecordList(), Appointment.of(\"11-11-2024 1500\")),","lastModifiedDate":"2022-10-26"},{"lineNumber":32,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":33,"author":{"gitId":"hanwenlai"},"content":"            new Person(new Name(\"Bernice Yu\"), new Birthdate(\"04-04-1944\"), new Phone(\"99272758\"),","lastModifiedDate":"2022-10-19"},{"lineNumber":34,"author":{"gitId":"hanwenlai"},"content":"                new Email(\"berniceyu@example.com\"), new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),","lastModifiedDate":"2022-10-18"},{"lineNumber":35,"author":{"gitId":"anthonyhoth"},"content":"                getTagSet(\"Elderly\", \"PollenAllergy\"), getSampleRecordList(),","lastModifiedDate":"2022-10-24"},{"lineNumber":36,"author":{"gitId":"marclzh"},"content":"                Appointment.of(Appointment.NO_APPOINTMENT_SCHEDULED)),","lastModifiedDate":"2022-10-16"},{"lineNumber":37,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":38,"author":{"gitId":"hanwenlai"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Birthdate(\"06-06-2006\"), new Phone(\"93210283\"),","lastModifiedDate":"2022-10-19"},{"lineNumber":39,"author":{"gitId":"hanwenlai"},"content":"                new Email(\"charlotte@example.com\"), new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),","lastModifiedDate":"2022-10-18"},{"lineNumber":40,"author":{"gitId":"marclzh"},"content":"                    getTagSet(), getSampleRecordList(), Appointment.of(\"01-05-2024 1045\")),","lastModifiedDate":"2022-10-26"},{"lineNumber":41,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":42,"author":{"gitId":"hanwenlai"},"content":"            new Person(new Name(\"David Li\"), new Birthdate(\"01-10-2001\"), new Phone(\"91031282\"),","lastModifiedDate":"2022-10-19"},{"lineNumber":43,"author":{"gitId":"hanwenlai"},"content":"                new Email(\"lidavid@example.com\"), new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),","lastModifiedDate":"2022-10-18"},{"lineNumber":44,"author":{"gitId":"anthonyhoth"},"content":"                getTagSet(\"GlutenAllergy\"), getSampleRecordList(),","lastModifiedDate":"2022-10-24"},{"lineNumber":45,"author":{"gitId":"marclzh"},"content":"                Appointment.of(Appointment.NO_APPOINTMENT_SCHEDULED)),","lastModifiedDate":"2022-10-16"},{"lineNumber":46,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":47,"author":{"gitId":"hanwenlai"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Birthdate(\"04-04-1994\"), new Phone(\"92492021\"),","lastModifiedDate":"2022-10-19"},{"lineNumber":48,"author":{"gitId":"hanwenlai"},"content":"                new Email(\"irfan@example.com\"), new Address(\"Blk 47 Tampines Street 20, #17-35\"),","lastModifiedDate":"2022-10-18"},{"lineNumber":49,"author":{"gitId":"anthonyhoth"},"content":"                getTagSet(\"LatexAllergy\"), getSampleRecordList(), Appointment.of(\"02-12-2024 1600\")),","lastModifiedDate":"2022-10-24"},{"lineNumber":50,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":51,"author":{"gitId":"hanwenlai"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Birthdate(\"09-09-1969\"), new Phone(\"92624417\"),","lastModifiedDate":"2022-10-19"},{"lineNumber":52,"author":{"gitId":"hanwenlai"},"content":"                new Email(\"royb@example.com\"), new Address(\"Blk 45 Aljunied Street 85, #11-31\"),","lastModifiedDate":"2022-10-18"},{"lineNumber":53,"author":{"gitId":"hanwenlai"},"content":"                getTagSet(\"DustAllergy\"), getSampleRecordList(), Appointment.of(\"08-03-2023 1200\"))","lastModifiedDate":"2022-10-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {","lastModifiedDate":"2016-12-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();","lastModifiedDate":"2017-04-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {","lastModifiedDate":"2016-12-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);","lastModifiedDate":"2017-04-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {","lastModifiedDate":"2017-05-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                .map(Tag::new)","lastModifiedDate":"2018-01-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":74,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-17"},{"lineNumber":75,"author":{"gitId":"EiffelLKF"},"content":"     * Returns a medication set containing the list of strings given.","lastModifiedDate":"2022-10-17"},{"lineNumber":76,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-17"},{"lineNumber":77,"author":{"gitId":"EiffelLKF"},"content":"    public static Set\u003cMedication\u003e getMedicationSet(String... strings) {","lastModifiedDate":"2022-10-17"},{"lineNumber":78,"author":{"gitId":"EiffelLKF"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2022-10-17"},{"lineNumber":79,"author":{"gitId":"EiffelLKF"},"content":"                .map(Medication :: of)","lastModifiedDate":"2022-10-17"},{"lineNumber":80,"author":{"gitId":"EiffelLKF"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2022-10-17"},{"lineNumber":81,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":82,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":83,"author":{"gitId":"hanwenlai"},"content":"    public static RecordList getSampleRecordList() {","lastModifiedDate":"2022-10-10"},{"lineNumber":84,"author":{"gitId":"hanwenlai"},"content":"        RecordList sampleRecordList \u003d new RecordList();","lastModifiedDate":"2022-10-10"},{"lineNumber":85,"author":{"gitId":"EiffelLKF"},"content":"        sampleRecordList.add(new Record(LocalDateTime.parse(\"05-06-2022 1200\", Record.DATE_FORMAT),","lastModifiedDate":"2022-10-17"},{"lineNumber":86,"author":{"gitId":"EiffelLKF"},"content":"                \"tested positive for covid-19\"));","lastModifiedDate":"2022-10-17"},{"lineNumber":87,"author":{"gitId":"EiffelLKF"},"content":"        sampleRecordList.add(new Record(LocalDateTime.parse(\"06-06-2010 1600\", Record.DATE_FORMAT),","lastModifiedDate":"2022-10-17"},{"lineNumber":88,"author":{"gitId":"EiffelLKF"},"content":"                \"tested positive for H1N1\"));","lastModifiedDate":"2022-10-17"},{"lineNumber":89,"author":{"gitId":"EiffelLKF"},"content":"        sampleRecordList.add(new Record(LocalDateTime.parse(\"20-02-2002 0200\", Record.DATE_FORMAT),","lastModifiedDate":"2022-10-17"},{"lineNumber":90,"author":{"gitId":"EiffelLKF"},"content":"                \"tested positive for SARS\"));","lastModifiedDate":"2022-10-17"},{"lineNumber":91,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":92,"author":{"gitId":"hanwenlai"},"content":"        return sampleRecordList;","lastModifiedDate":"2022-10-10"},{"lineNumber":93,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"anthonyhoth":3,"marclzh":4,"hanwenlai":25,"EiffelLKF":20,"-":42}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedMedication.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"EiffelLKF"},"content":"package seedu.address.storage;","lastModifiedDate":"2022-10-17"},{"lineNumber":2,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":3,"author":{"gitId":"EiffelLKF"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2022-10-17"},{"lineNumber":4,"author":{"gitId":"EiffelLKF"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2022-10-17"},{"lineNumber":5,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":6,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2022-10-17"},{"lineNumber":7,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.Medication;","lastModifiedDate":"2022-10-17"},{"lineNumber":8,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":9,"author":{"gitId":"EiffelLKF"},"content":"/**","lastModifiedDate":"2022-10-17"},{"lineNumber":10,"author":{"gitId":"EiffelLKF"},"content":" * Jackson-friendly version of {@link Medication}.","lastModifiedDate":"2022-10-17"},{"lineNumber":11,"author":{"gitId":"EiffelLKF"},"content":" */","lastModifiedDate":"2022-10-17"},{"lineNumber":12,"author":{"gitId":"EiffelLKF"},"content":"class JsonAdaptedMedication {","lastModifiedDate":"2022-10-17"},{"lineNumber":13,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":14,"author":{"gitId":"EiffelLKF"},"content":"    private final String medicationName;","lastModifiedDate":"2022-10-17"},{"lineNumber":15,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":16,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-17"},{"lineNumber":17,"author":{"gitId":"EiffelLKF"},"content":"     * Constructs a {@code JsonAdaptedMedication} with the given {@code medicationName}.","lastModifiedDate":"2022-10-17"},{"lineNumber":18,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-17"},{"lineNumber":19,"author":{"gitId":"EiffelLKF"},"content":"    @JsonCreator","lastModifiedDate":"2022-10-17"},{"lineNumber":20,"author":{"gitId":"EiffelLKF"},"content":"    public JsonAdaptedMedication(String medicationName) {","lastModifiedDate":"2022-10-17"},{"lineNumber":21,"author":{"gitId":"EiffelLKF"},"content":"        this.medicationName \u003d medicationName;","lastModifiedDate":"2022-10-17"},{"lineNumber":22,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":23,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":24,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-17"},{"lineNumber":25,"author":{"gitId":"EiffelLKF"},"content":"     * Converts a given {@code Medication} into this class for Jackson use.","lastModifiedDate":"2022-10-17"},{"lineNumber":26,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-17"},{"lineNumber":27,"author":{"gitId":"EiffelLKF"},"content":"    public JsonAdaptedMedication(Medication source) {","lastModifiedDate":"2022-10-17"},{"lineNumber":28,"author":{"gitId":"EiffelLKF"},"content":"        medicationName \u003d source.medicationName;","lastModifiedDate":"2022-10-17"},{"lineNumber":29,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":30,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":31,"author":{"gitId":"EiffelLKF"},"content":"    @JsonValue","lastModifiedDate":"2022-10-17"},{"lineNumber":32,"author":{"gitId":"EiffelLKF"},"content":"    public String getMedicationName() {","lastModifiedDate":"2022-10-17"},{"lineNumber":33,"author":{"gitId":"EiffelLKF"},"content":"        return medicationName;","lastModifiedDate":"2022-10-17"},{"lineNumber":34,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":35,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":36,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-17"},{"lineNumber":37,"author":{"gitId":"EiffelLKF"},"content":"     * Converts this Jackson-friendly adapted medication object into the model\u0027s {@code Medication} object.","lastModifiedDate":"2022-10-17"},{"lineNumber":38,"author":{"gitId":"EiffelLKF"},"content":"     *","lastModifiedDate":"2022-10-17"},{"lineNumber":39,"author":{"gitId":"EiffelLKF"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag.","lastModifiedDate":"2022-10-17"},{"lineNumber":40,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-17"},{"lineNumber":41,"author":{"gitId":"EiffelLKF"},"content":"    public Medication toModelType() throws IllegalValueException {","lastModifiedDate":"2022-10-17"},{"lineNumber":42,"author":{"gitId":"EiffelLKF"},"content":"        if (!Medication.isValidMedication(medicationName)) {","lastModifiedDate":"2022-10-17"},{"lineNumber":43,"author":{"gitId":"EiffelLKF"},"content":"            throw new IllegalValueException(Medication.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-17"},{"lineNumber":44,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-17"},{"lineNumber":45,"author":{"gitId":"EiffelLKF"},"content":"        return Medication.of(medicationName);","lastModifiedDate":"2022-10-17"},{"lineNumber":46,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":47,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":48,"author":{"gitId":"EiffelLKF"},"content":"}","lastModifiedDate":"2022-10-17"}],"authorContributionMap":{"EiffelLKF":48}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2022-10-18"},{"lineNumber":14,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-18"},{"lineNumber":15,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.model.person.Birthdate;","lastModifiedDate":"2022-10-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2022-10-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2022-10-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2022-10-18"},{"lineNumber":20,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.RecordList;","lastModifiedDate":"2022-10-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {","lastModifiedDate":"2018-12-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"hanwenlai"},"content":"    private final String birthdate;","lastModifiedDate":"2022-10-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final String address;","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"LJXSean"},"content":"    private final List\u003cJsonAdaptedRecord\u003e recordList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-09"},{"lineNumber":37,"author":{"gitId":"marclzh"},"content":"    private final String appointment;","lastModifiedDate":"2022-10-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"hanwenlai"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"birthdate\") String birthdate,","lastModifiedDate":"2022-10-19"},{"lineNumber":44,"author":{"gitId":"hanwenlai"},"content":"                             @JsonProperty(\"phone\") String phone, @JsonProperty(\"email\") String email,","lastModifiedDate":"2022-10-18"},{"lineNumber":45,"author":{"gitId":"hanwenlai"},"content":"                             @JsonProperty(\"address\") String address,","lastModifiedDate":"2022-10-18"},{"lineNumber":46,"author":{"gitId":"marclzh"},"content":"                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,","lastModifiedDate":"2022-10-04"},{"lineNumber":47,"author":{"gitId":"marclzh"},"content":"                             @JsonProperty(\"recordList\") List\u003cJsonAdaptedRecord\u003e recordList,","lastModifiedDate":"2022-10-15"},{"lineNumber":48,"author":{"gitId":"marclzh"},"content":"                             @JsonProperty(\"appointment\") String appointment) {","lastModifiedDate":"2022-10-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"hanwenlai"},"content":"        this.birthdate \u003d birthdate;","lastModifiedDate":"2022-10-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"marclzh"},"content":"        this.appointment \u003d appointment;","lastModifiedDate":"2022-10-15"},{"lineNumber":55,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":56,"author":{"gitId":"LJXSean"},"content":"        if (recordList !\u003d null) {","lastModifiedDate":"2022-10-09"},{"lineNumber":57,"author":{"gitId":"LJXSean"},"content":"            this.recordList.addAll(recordList);","lastModifiedDate":"2022-10-09"},{"lineNumber":58,"author":{"gitId":"LJXSean"},"content":"        }","lastModifiedDate":"2022-10-09"},{"lineNumber":59,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"anthonyhoth"},"content":"        name \u003d source.getName().properCaseName;","lastModifiedDate":"2022-10-24"},{"lineNumber":70,"author":{"gitId":"hanwenlai"},"content":"        birthdate \u003d source.getBirthdate().toString();","lastModifiedDate":"2022-10-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"marclzh"},"content":"        appointment \u003d source.getAppointment().storageFormat();","lastModifiedDate":"2022-10-15"},{"lineNumber":75,"author":{"gitId":"hanwenlai"},"content":"        recordList.addAll(source.getRecordList().asUnmodifiableObservableList().stream()","lastModifiedDate":"2022-10-10"},{"lineNumber":76,"author":{"gitId":"LJXSean"},"content":"                .map(JsonAdaptedRecord::new)","lastModifiedDate":"2022-10-09"},{"lineNumber":77,"author":{"gitId":"LJXSean"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2022-10-09"},{"lineNumber":78,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"LJXSean"},"content":"        final RecordList modelRecordList \u003d new RecordList();","lastModifiedDate":"2022-10-09"},{"lineNumber":96,"author":{"gitId":"LJXSean"},"content":"        for (JsonAdaptedRecord record : recordList) {","lastModifiedDate":"2022-10-09"},{"lineNumber":97,"author":{"gitId":"LJXSean"},"content":"            modelRecordList.add(record.toModelType());","lastModifiedDate":"2022-10-09"},{"lineNumber":98,"author":{"gitId":"LJXSean"},"content":"        }","lastModifiedDate":"2022-10-09"},{"lineNumber":99,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"hanwenlai"},"content":"        if (birthdate \u003d\u003d null) {","lastModifiedDate":"2022-10-19"},{"lineNumber":109,"author":{"gitId":"hanwenlai"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2022-10-19"},{"lineNumber":110,"author":{"gitId":"hanwenlai"},"content":"                    Birthdate.class.getSimpleName()));","lastModifiedDate":"2022-10-19"},{"lineNumber":111,"author":{"gitId":"hanwenlai"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":112,"author":{"gitId":"hanwenlai"},"content":"        if (!Birthdate.isValidDateFormat(birthdate)) {","lastModifiedDate":"2022-10-27"},{"lineNumber":113,"author":{"gitId":"hanwenlai"},"content":"            throw new IllegalValueException(Birthdate.MESSAGE_INVALID_DATE_FORMAT);","lastModifiedDate":"2022-10-27"},{"lineNumber":114,"author":{"gitId":"hanwenlai"},"content":"        }","lastModifiedDate":"2022-10-27"},{"lineNumber":115,"author":{"gitId":"hanwenlai"},"content":"        if (Birthdate.isFutureDate(birthdate)) {","lastModifiedDate":"2022-10-27"},{"lineNumber":116,"author":{"gitId":"hanwenlai"},"content":"            throw new IllegalValueException(Birthdate.MESSAGE_FUTURE_DATE);","lastModifiedDate":"2022-10-27"},{"lineNumber":117,"author":{"gitId":"hanwenlai"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":118,"author":{"gitId":"hanwenlai"},"content":"        final Birthdate modelBirthdate \u003d new Birthdate(birthdate);","lastModifiedDate":"2022-10-19"},{"lineNumber":119,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":137,"author":{"gitId":"hanwenlai"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2022-10-19"},{"lineNumber":138,"author":{"gitId":"hanwenlai"},"content":"                    Address.class.getSimpleName()));","lastModifiedDate":"2022-10-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2018-08-13"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":145,"author":{"gitId":"marclzh"},"content":"        if (!Appointment.isValidAppointment(appointment)) {","lastModifiedDate":"2022-10-15"},{"lineNumber":146,"author":{"gitId":"marclzh"},"content":"            throw new IllegalValueException(Appointment.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-15"},{"lineNumber":147,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-10-15"},{"lineNumber":148,"author":{"gitId":"marclzh"},"content":"        final Appointment modelAppointment \u003d Appointment.of(appointment);","lastModifiedDate":"2022-10-15"},{"lineNumber":149,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":151,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":152,"author":{"gitId":"hanwenlai"},"content":"        return new Person(modelName, modelBirthdate, modelPhone, modelEmail, modelAddress,","lastModifiedDate":"2022-10-19"},{"lineNumber":153,"author":{"gitId":"marclzh"},"content":"                modelTags, modelRecordList, modelAppointment);","lastModifiedDate":"2022-10-15"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":156,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"anthonyhoth":1,"marclzh":14,"hanwenlai":24,"LJXSean":13,"EiffelLKF":1,"-":103}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedRecord.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LJXSean"},"content":"package seedu.address.storage;","lastModifiedDate":"2022-10-09"},{"lineNumber":2,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":3,"author":{"gitId":"EiffelLKF"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-17"},{"lineNumber":4,"author":{"gitId":"EiffelLKF"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-17"},{"lineNumber":5,"author":{"gitId":"EiffelLKF"},"content":"import java.util.HashSet;","lastModifiedDate":"2022-10-17"},{"lineNumber":6,"author":{"gitId":"EiffelLKF"},"content":"import java.util.List;","lastModifiedDate":"2022-10-17"},{"lineNumber":7,"author":{"gitId":"EiffelLKF"},"content":"import java.util.Set;","lastModifiedDate":"2022-10-17"},{"lineNumber":8,"author":{"gitId":"EiffelLKF"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2022-10-17"},{"lineNumber":9,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":10,"author":{"gitId":"LJXSean"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2022-10-09"},{"lineNumber":11,"author":{"gitId":"LJXSean"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2022-10-09"},{"lineNumber":12,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":13,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-12"},{"lineNumber":14,"author":{"gitId":"LJXSean"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2022-10-09"},{"lineNumber":15,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.Medication;","lastModifiedDate":"2022-10-17"},{"lineNumber":16,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2022-10-17"},{"lineNumber":17,"author":{"gitId":"LJXSean"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2022-10-09"},{"lineNumber":18,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":19,"author":{"gitId":"LJXSean"},"content":"/**","lastModifiedDate":"2022-10-09"},{"lineNumber":20,"author":{"gitId":"LJXSean"},"content":" * Jackson-friendly version of {@link Tag}.","lastModifiedDate":"2022-10-09"},{"lineNumber":21,"author":{"gitId":"LJXSean"},"content":" */","lastModifiedDate":"2022-10-09"},{"lineNumber":22,"author":{"gitId":"LJXSean"},"content":"class JsonAdaptedRecord {","lastModifiedDate":"2022-10-09"},{"lineNumber":23,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":24,"author":{"gitId":"LJXSean"},"content":"    private final String record;","lastModifiedDate":"2022-10-09"},{"lineNumber":25,"author":{"gitId":"LJXSean"},"content":"    private final String recordDate;","lastModifiedDate":"2022-10-09"},{"lineNumber":26,"author":{"gitId":"EiffelLKF"},"content":"    private final List\u003cJsonAdaptedMedication\u003e medicationList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-17"},{"lineNumber":27,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":28,"author":{"gitId":"LJXSean"},"content":"    /**","lastModifiedDate":"2022-10-09"},{"lineNumber":29,"author":{"gitId":"LJXSean"},"content":"     * Constructs a {@code JsonAdaptedRecord} with the given {@code Record details}.","lastModifiedDate":"2022-10-09"},{"lineNumber":30,"author":{"gitId":"LJXSean"},"content":"     */","lastModifiedDate":"2022-10-09"},{"lineNumber":31,"author":{"gitId":"LJXSean"},"content":"    @JsonCreator","lastModifiedDate":"2022-10-09"},{"lineNumber":32,"author":{"gitId":"EiffelLKF"},"content":"    public JsonAdaptedRecord(@JsonProperty(\"recordDate\") String recordDate,","lastModifiedDate":"2022-10-17"},{"lineNumber":33,"author":{"gitId":"EiffelLKF"},"content":"                             @JsonProperty(\"record\") String record,","lastModifiedDate":"2022-10-17"},{"lineNumber":34,"author":{"gitId":"EiffelLKF"},"content":"                             @JsonProperty(\"medicationList\") List\u003cJsonAdaptedMedication\u003e medicationList) {","lastModifiedDate":"2022-10-17"},{"lineNumber":35,"author":{"gitId":"LJXSean"},"content":"        this.record \u003d record;","lastModifiedDate":"2022-10-09"},{"lineNumber":36,"author":{"gitId":"LJXSean"},"content":"        this.recordDate \u003d recordDate;","lastModifiedDate":"2022-10-09"},{"lineNumber":37,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":38,"author":{"gitId":"EiffelLKF"},"content":"        if (medicationList !\u003d null) {","lastModifiedDate":"2022-10-17"},{"lineNumber":39,"author":{"gitId":"EiffelLKF"},"content":"            this.medicationList.addAll(medicationList);","lastModifiedDate":"2022-10-17"},{"lineNumber":40,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-17"},{"lineNumber":41,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":42,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":43,"author":{"gitId":"LJXSean"},"content":"    /**","lastModifiedDate":"2022-10-09"},{"lineNumber":44,"author":{"gitId":"LJXSean"},"content":"     * Converts a given {@code Record} into this class for Jackson use.","lastModifiedDate":"2022-10-09"},{"lineNumber":45,"author":{"gitId":"LJXSean"},"content":"     */","lastModifiedDate":"2022-10-09"},{"lineNumber":46,"author":{"gitId":"LJXSean"},"content":"    public JsonAdaptedRecord(Record source) {","lastModifiedDate":"2022-10-09"},{"lineNumber":47,"author":{"gitId":"LJXSean"},"content":"        this.record \u003d source.record;","lastModifiedDate":"2022-10-09"},{"lineNumber":48,"author":{"gitId":"EiffelLKF"},"content":"        this.recordDate \u003d source.getRecordDate().format(Record.DATE_FORMAT);","lastModifiedDate":"2022-10-17"},{"lineNumber":49,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":50,"author":{"gitId":"EiffelLKF"},"content":"        medicationList.addAll(source.getMedications().stream()","lastModifiedDate":"2022-10-17"},{"lineNumber":51,"author":{"gitId":"EiffelLKF"},"content":"                .map(JsonAdaptedMedication::new)","lastModifiedDate":"2022-10-17"},{"lineNumber":52,"author":{"gitId":"EiffelLKF"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2022-10-17"},{"lineNumber":53,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":54,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":55,"author":{"gitId":"LJXSean"},"content":"    /**","lastModifiedDate":"2022-10-09"},{"lineNumber":56,"author":{"gitId":"LJXSean"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object.","lastModifiedDate":"2022-10-09"},{"lineNumber":57,"author":{"gitId":"LJXSean"},"content":"     *","lastModifiedDate":"2022-10-09"},{"lineNumber":58,"author":{"gitId":"LJXSean"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag.","lastModifiedDate":"2022-10-09"},{"lineNumber":59,"author":{"gitId":"LJXSean"},"content":"     */","lastModifiedDate":"2022-10-09"},{"lineNumber":60,"author":{"gitId":"LJXSean"},"content":"    public Record toModelType() throws IllegalValueException {","lastModifiedDate":"2022-10-09"},{"lineNumber":61,"author":{"gitId":"EiffelLKF"},"content":"        final List\u003cMedication\u003e recordMedications \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-17"},{"lineNumber":62,"author":{"gitId":"EiffelLKF"},"content":"        for (JsonAdaptedMedication med : medicationList) {","lastModifiedDate":"2022-10-17"},{"lineNumber":63,"author":{"gitId":"EiffelLKF"},"content":"            recordMedications.add(med.toModelType());","lastModifiedDate":"2022-10-17"},{"lineNumber":64,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-17"},{"lineNumber":65,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":66,"author":{"gitId":"hanwenlai"},"content":"        if (!Record.isValidDateFormat(recordDate)) {","lastModifiedDate":"2022-10-27"},{"lineNumber":67,"author":{"gitId":"hanwenlai"},"content":"            throw new IllegalValueException(Record.MESSAGE_INVALID_DATE_FORMAT);","lastModifiedDate":"2022-10-27"},{"lineNumber":68,"author":{"gitId":"hanwenlai"},"content":"        }","lastModifiedDate":"2022-10-27"},{"lineNumber":69,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-27"},{"lineNumber":70,"author":{"gitId":"hanwenlai"},"content":"        if (Record.isFutureDate(recordDate)) {","lastModifiedDate":"2022-10-27"},{"lineNumber":71,"author":{"gitId":"hanwenlai"},"content":"            throw new IllegalValueException(Record.MESSAGE_FUTURE_DATE);","lastModifiedDate":"2022-10-27"},{"lineNumber":72,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-12"},{"lineNumber":73,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":74,"author":{"gitId":"EiffelLKF"},"content":"        if (!Record.isValidRecordData(record)) {","lastModifiedDate":"2022-10-12"},{"lineNumber":75,"author":{"gitId":"EiffelLKF"},"content":"            throw new IllegalValueException(Messages.MESSAGE_INVALID_RECORD_DATA_FORMAT);","lastModifiedDate":"2022-10-12"},{"lineNumber":76,"author":{"gitId":"LJXSean"},"content":"        }","lastModifiedDate":"2022-10-09"},{"lineNumber":77,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":78,"author":{"gitId":"EiffelLKF"},"content":"        final Set\u003cMedication\u003e modelMedication \u003d new HashSet\u003c\u003e(recordMedications);","lastModifiedDate":"2022-10-17"},{"lineNumber":79,"author":{"gitId":"EiffelLKF"},"content":"        return new Record(LocalDateTime.parse(recordDate, Record.DATE_FORMAT), record, modelMedication);","lastModifiedDate":"2022-10-17"},{"lineNumber":80,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":81,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":82,"author":{"gitId":"LJXSean"},"content":"}","lastModifiedDate":"2022-10-09"}],"authorContributionMap":{"hanwenlai":6,"LJXSean":41,"EiffelLKF":35}},{"path":"src/main/java/seedu/address/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2019-08-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2019-08-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;","lastModifiedDate":"2019-08-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-12-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"anthonyhoth"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2223s1-cs2103t-t14-3.github.io/tp/UserGuide.html\";","lastModifiedDate":"2022-10-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;","lastModifiedDate":"2019-08-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";","lastModifiedDate":"2016-09-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;","lastModifiedDate":"2019-08-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;","lastModifiedDate":"2019-08-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-12-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {","lastModifiedDate":"2017-12-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);","lastModifiedDate":"2017-12-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);","lastModifiedDate":"2019-08-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {","lastModifiedDate":"2017-12-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());","lastModifiedDate":"2017-12-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window.","lastModifiedDate":"2017-08-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException","lastModifiedDate":"2017-08-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     *     \u003cul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *             if this method is called on a thread other than the JavaFX Application Thread.","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *             if this method is called during animation or layout processing.","lastModifiedDate":"2017-08-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *             if this method is called on the primary stage.","lastModifiedDate":"2017-08-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *             if {@code dialogStage} is already showing.","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     *     \u003c/ul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {","lastModifiedDate":"2016-08-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");","lastModifiedDate":"2016-12-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();","lastModifiedDate":"2018-02-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2019-08-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown.","lastModifiedDate":"2018-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {","lastModifiedDate":"2018-03-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2018-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window.","lastModifiedDate":"2018-12-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {","lastModifiedDate":"2018-12-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window.","lastModifiedDate":"2018-03-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {","lastModifiedDate":"2018-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2018-03-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-08-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard.","lastModifiedDate":"2019-08-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-08-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void copyUrl() {","lastModifiedDate":"2019-08-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();","lastModifiedDate":"2019-08-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();","lastModifiedDate":"2019-08-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);","lastModifiedDate":"2019-08-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);","lastModifiedDate":"2019-08-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-08-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"anthonyhoth":1,"-":101}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"LJXSean"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2022-10-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2016-09-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-06-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;","lastModifiedDate":"2016-08-18"},{"lineNumber":36,"author":{"gitId":"LJXSean"},"content":"    private RecordListPanel recordListPanel;","lastModifiedDate":"2022-10-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"LJXSean"},"content":"    private StackPane listPanelsPlaceholder;","lastModifiedDate":"2022-10-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":111,"author":{"gitId":"LJXSean"},"content":"    /**","lastModifiedDate":"2022-10-26"},{"lineNumber":112,"author":{"gitId":"LJXSean"},"content":"     * Sets which panel is visible and updates it.","lastModifiedDate":"2022-10-26"},{"lineNumber":113,"author":{"gitId":"LJXSean"},"content":"     * @param isPersonPanel Flag to indicate is updatePanel a PersonListPanel","lastModifiedDate":"2022-10-26"},{"lineNumber":114,"author":{"gitId":"LJXSean"},"content":"     * @param updatedPanel the updatedPanel to replace the old panel","lastModifiedDate":"2022-10-26"},{"lineNumber":115,"author":{"gitId":"LJXSean"},"content":"     */","lastModifiedDate":"2022-10-26"},{"lineNumber":116,"author":{"gitId":"LJXSean"},"content":"    void updatePanel(boolean isPersonPanel, UiPart\u003cRegion\u003e updatedPanel) {","lastModifiedDate":"2022-10-26"},{"lineNumber":117,"author":{"gitId":"LJXSean"},"content":"        assert updatedPanel instanceof PersonListPanel","lastModifiedDate":"2022-10-26"},{"lineNumber":118,"author":{"gitId":"LJXSean"},"content":"                || updatedPanel instanceof RecordListPanel;","lastModifiedDate":"2022-10-26"},{"lineNumber":119,"author":{"gitId":"LJXSean"},"content":"        personListPanel.getRoot().setVisible(isPersonPanel);","lastModifiedDate":"2022-10-26"},{"lineNumber":120,"author":{"gitId":"LJXSean"},"content":"        recordListPanel.getRoot().setVisible(!isPersonPanel);","lastModifiedDate":"2022-10-26"},{"lineNumber":121,"author":{"gitId":"LJXSean"},"content":"        listPanelsPlaceholder.getChildren().remove(updatedPanel.getRoot());","lastModifiedDate":"2022-10-26"},{"lineNumber":122,"author":{"gitId":"LJXSean"},"content":"        listPanelsPlaceholder.getChildren().add(updatedPanel.getRoot());","lastModifiedDate":"2022-10-26"},{"lineNumber":123,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-26"},{"lineNumber":124,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":125,"author":{"gitId":"LJXSean"},"content":"    void showPersonList() {","lastModifiedDate":"2022-10-08"},{"lineNumber":126,"author":{"gitId":"LJXSean"},"content":"        PersonListPanel updatedPanel \u003d new PersonListPanel(logic.getFilteredPersonList());","lastModifiedDate":"2022-10-26"},{"lineNumber":127,"author":{"gitId":"LJXSean"},"content":"        updatePanel(true, updatedPanel);","lastModifiedDate":"2022-10-26"},{"lineNumber":128,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":129,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":130,"author":{"gitId":"LJXSean"},"content":"    void showRecordList() {","lastModifiedDate":"2022-10-08"},{"lineNumber":131,"author":{"gitId":"LJXSean"},"content":"        RecordListPanel updatedPanel \u003d new RecordListPanel(logic.getFilteredRecordList());","lastModifiedDate":"2022-10-26"},{"lineNumber":132,"author":{"gitId":"LJXSean"},"content":"        updatePanel(false, updatedPanel);","lastModifiedDate":"2022-10-26"},{"lineNumber":133,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":134,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":139,"author":{"gitId":"LJXSean"},"content":"        recordListPanel \u003d new RecordListPanel(logic.getFilteredRecordList());","lastModifiedDate":"2022-10-08"},{"lineNumber":140,"author":{"gitId":"LJXSean"},"content":"        listPanelsPlaceholder.getChildren().add(recordListPanel.getRoot());","lastModifiedDate":"2022-10-26"},{"lineNumber":141,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":143,"author":{"gitId":"LJXSean"},"content":"        listPanelsPlaceholder.getChildren().add(personListPanel.getRoot());","lastModifiedDate":"2022-10-26"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());","lastModifiedDate":"2019-01-25"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2019-01-25"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":168,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":169,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":184,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":185,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":189,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {","lastModifiedDate":"2016-08-25"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        return personListPanel;","lastModifiedDate":"2018-08-14"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-25"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":200,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":201,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":202,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)","lastModifiedDate":"2018-12-09"},{"lineNumber":203,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":211,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":215,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":218,"author":{"gitId":"LJXSean"},"content":"            // Controls which list to display","lastModifiedDate":"2022-10-08"},{"lineNumber":219,"author":{"gitId":"LJXSean"},"content":"            if (commandResult.isShowRecords()) {","lastModifiedDate":"2022-10-09"},{"lineNumber":220,"author":{"gitId":"LJXSean"},"content":"                showRecordList();","lastModifiedDate":"2022-10-08"},{"lineNumber":221,"author":{"gitId":"LJXSean"},"content":"            } else {","lastModifiedDate":"2022-10-08"},{"lineNumber":222,"author":{"gitId":"LJXSean"},"content":"                showPersonList();","lastModifiedDate":"2022-10-08"},{"lineNumber":223,"author":{"gitId":"LJXSean"},"content":"            }","lastModifiedDate":"2022-10-08"},{"lineNumber":224,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":227,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":229,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":232,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"LJXSean":38,"-":194}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;","lastModifiedDate":"2019-01-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-01-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"hanwenlai"},"content":" * A UI component that displays information of a {@code Person}.","lastModifiedDate":"2022-10-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";","lastModifiedDate":"2016-09-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public final Person person;","lastModifiedDate":"2018-01-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"hanwenlai"},"content":"    private Label birthdate;","lastModifiedDate":"2022-10-19"},{"lineNumber":37,"author":{"gitId":"hanwenlai"},"content":"    @FXML","lastModifiedDate":"2022-10-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label phone;","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label address;","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Label email;","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private FlowPane tags;","lastModifiedDate":"2016-12-18"},{"lineNumber":45,"author":{"gitId":"marclzh"},"content":"    @FXML","lastModifiedDate":"2022-10-04"},{"lineNumber":46,"author":{"gitId":"marclzh"},"content":"    private Label recordList;","lastModifiedDate":"2022-10-04"},{"lineNumber":47,"author":{"gitId":"marclzh"},"content":"    @FXML","lastModifiedDate":"2022-10-15"},{"lineNumber":48,"author":{"gitId":"marclzh"},"content":"    private Label appointment;","lastModifiedDate":"2022-10-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2020-05-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2018-01-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this.person \u003d person;","lastModifiedDate":"2017-07-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"anthonyhoth"},"content":"        name.setText(person.getName().properCaseName);","lastModifiedDate":"2022-10-24"},{"lineNumber":58,"author":{"gitId":"hanwenlai"},"content":"        birthdate.setText(\"Age: \" + person.getAge() + \"   (d.o.b. \" + person.displayBirthdate() + \")\");","lastModifiedDate":"2022-10-19"},{"lineNumber":59,"author":{"gitId":"hanwenlai"},"content":"        phone.setText(\"Phone: \" + person.getPhone().value);","lastModifiedDate":"2022-10-18"},{"lineNumber":60,"author":{"gitId":"hanwenlai"},"content":"        address.setText(\"Address: \" + person.getAddress().value);","lastModifiedDate":"2022-10-18"},{"lineNumber":61,"author":{"gitId":"hanwenlai"},"content":"        email.setText(\"Email: \" + person.getEmail().value);","lastModifiedDate":"2022-10-18"},{"lineNumber":62,"author":{"gitId":"marclzh"},"content":"        recordList.setText(\"Number of records: \" + person.getRecordList().toString());","lastModifiedDate":"2022-10-15"},{"lineNumber":63,"author":{"gitId":"marclzh"},"content":"        appointment.setText(\"Next Appointment: \" + person.getAppointment().toString());","lastModifiedDate":"2022-10-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        person.getTags().stream()","lastModifiedDate":"2019-01-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2019-01-02"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));","lastModifiedDate":"2019-01-02"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-07-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-07-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-07-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-07-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-07-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {","lastModifiedDate":"2017-07-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-07-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-07-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;","lastModifiedDate":"2017-07-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2017-07-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);","lastModifiedDate":"2017-07-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"anthonyhoth":1,"marclzh":6,"hanwenlai":7,"-":72}},{"path":"src/main/java/seedu/address/ui/RecordCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LJXSean"},"content":"package seedu.address.ui;","lastModifiedDate":"2022-10-08"},{"lineNumber":2,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":3,"author":{"gitId":"EiffelLKF"},"content":"import java.util.Comparator;","lastModifiedDate":"2022-10-17"},{"lineNumber":4,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":5,"author":{"gitId":"LJXSean"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-10-08"},{"lineNumber":6,"author":{"gitId":"LJXSean"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2022-10-08"},{"lineNumber":7,"author":{"gitId":"EiffelLKF"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2022-10-17"},{"lineNumber":8,"author":{"gitId":"LJXSean"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2022-10-08"},{"lineNumber":9,"author":{"gitId":"LJXSean"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2022-10-08"},{"lineNumber":10,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2022-10-17"},{"lineNumber":11,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":12,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":13,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":14,"author":{"gitId":"LJXSean"},"content":"/**","lastModifiedDate":"2022-10-08"},{"lineNumber":15,"author":{"gitId":"LJXSean"},"content":" * An UI component that displays information of a {@code Record}.","lastModifiedDate":"2022-10-08"},{"lineNumber":16,"author":{"gitId":"LJXSean"},"content":" */","lastModifiedDate":"2022-10-08"},{"lineNumber":17,"author":{"gitId":"LJXSean"},"content":"public class RecordCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2022-10-08"},{"lineNumber":18,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":19,"author":{"gitId":"LJXSean"},"content":"    private static final String FXML \u003d \"RecordListCard.fxml\";","lastModifiedDate":"2022-10-08"},{"lineNumber":20,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":21,"author":{"gitId":"LJXSean"},"content":"    /**","lastModifiedDate":"2022-10-08"},{"lineNumber":22,"author":{"gitId":"LJXSean"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2022-10-08"},{"lineNumber":23,"author":{"gitId":"LJXSean"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2022-10-08"},{"lineNumber":24,"author":{"gitId":"LJXSean"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2022-10-08"},{"lineNumber":25,"author":{"gitId":"LJXSean"},"content":"     *","lastModifiedDate":"2022-10-08"},{"lineNumber":26,"author":{"gitId":"LJXSean"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":27,"author":{"gitId":"LJXSean"},"content":"     */","lastModifiedDate":"2022-10-08"},{"lineNumber":28,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":29,"author":{"gitId":"LJXSean"},"content":"    public final Record record;","lastModifiedDate":"2022-10-08"},{"lineNumber":30,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":31,"author":{"gitId":"LJXSean"},"content":"    @FXML","lastModifiedDate":"2022-10-08"},{"lineNumber":32,"author":{"gitId":"LJXSean"},"content":"    private HBox cardPane;","lastModifiedDate":"2022-10-08"},{"lineNumber":33,"author":{"gitId":"LJXSean"},"content":"    @FXML","lastModifiedDate":"2022-10-08"},{"lineNumber":34,"author":{"gitId":"LJXSean"},"content":"    private Label id;","lastModifiedDate":"2022-10-08"},{"lineNumber":35,"author":{"gitId":"LJXSean"},"content":"    @FXML","lastModifiedDate":"2022-10-08"},{"lineNumber":36,"author":{"gitId":"LJXSean"},"content":"    private Label recordText;","lastModifiedDate":"2022-10-08"},{"lineNumber":37,"author":{"gitId":"LJXSean"},"content":"    @FXML","lastModifiedDate":"2022-10-08"},{"lineNumber":38,"author":{"gitId":"LJXSean"},"content":"    private Label date;","lastModifiedDate":"2022-10-08"},{"lineNumber":39,"author":{"gitId":"EiffelLKF"},"content":"    @FXML","lastModifiedDate":"2022-10-17"},{"lineNumber":40,"author":{"gitId":"EiffelLKF"},"content":"    private FlowPane medications;","lastModifiedDate":"2022-10-17"},{"lineNumber":41,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":42,"author":{"gitId":"LJXSean"},"content":"    /**","lastModifiedDate":"2022-10-08"},{"lineNumber":43,"author":{"gitId":"LJXSean"},"content":"     * Creates a {@code RecordCode} with the given {@code Record} and index to display.","lastModifiedDate":"2022-10-08"},{"lineNumber":44,"author":{"gitId":"LJXSean"},"content":"     */","lastModifiedDate":"2022-10-08"},{"lineNumber":45,"author":{"gitId":"LJXSean"},"content":"    public RecordCard(Record record, int displayedIndex) {","lastModifiedDate":"2022-10-08"},{"lineNumber":46,"author":{"gitId":"LJXSean"},"content":"        super(FXML);","lastModifiedDate":"2022-10-08"},{"lineNumber":47,"author":{"gitId":"LJXSean"},"content":"        this.record \u003d record;","lastModifiedDate":"2022-10-08"},{"lineNumber":48,"author":{"gitId":"LJXSean"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2022-10-08"},{"lineNumber":49,"author":{"gitId":"LJXSean"},"content":"        recordText.setText(record.record);","lastModifiedDate":"2022-10-08"},{"lineNumber":50,"author":{"gitId":"EiffelLKF"},"content":"        date.setText(record.getRecordDate().format(Record.DATE_FORMAT));","lastModifiedDate":"2022-10-17"},{"lineNumber":51,"author":{"gitId":"EiffelLKF"},"content":"        record.getMedications().stream()","lastModifiedDate":"2022-10-17"},{"lineNumber":52,"author":{"gitId":"EiffelLKF"},"content":"                .sorted(Comparator.comparing(med -\u003e med.medicationName))","lastModifiedDate":"2022-10-17"},{"lineNumber":53,"author":{"gitId":"EiffelLKF"},"content":"                .forEach(med -\u003e medications.getChildren().add(new Label(med.medicationName)));","lastModifiedDate":"2022-10-17"},{"lineNumber":54,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":55,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":56,"author":{"gitId":"LJXSean"},"content":"    @Override","lastModifiedDate":"2022-10-08"},{"lineNumber":57,"author":{"gitId":"LJXSean"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-08"},{"lineNumber":58,"author":{"gitId":"LJXSean"},"content":"        // short circuit if same object","lastModifiedDate":"2022-10-08"},{"lineNumber":59,"author":{"gitId":"LJXSean"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-08"},{"lineNumber":60,"author":{"gitId":"LJXSean"},"content":"            return true;","lastModifiedDate":"2022-10-08"},{"lineNumber":61,"author":{"gitId":"LJXSean"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":62,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":63,"author":{"gitId":"LJXSean"},"content":"        // instanceof handles nulls","lastModifiedDate":"2022-10-08"},{"lineNumber":64,"author":{"gitId":"LJXSean"},"content":"        if (!(other instanceof RecordCard)) {","lastModifiedDate":"2022-10-08"},{"lineNumber":65,"author":{"gitId":"LJXSean"},"content":"            return false;","lastModifiedDate":"2022-10-08"},{"lineNumber":66,"author":{"gitId":"LJXSean"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":67,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":68,"author":{"gitId":"LJXSean"},"content":"        // state check","lastModifiedDate":"2022-10-08"},{"lineNumber":69,"author":{"gitId":"LJXSean"},"content":"        RecordCard card \u003d (RecordCard) other;","lastModifiedDate":"2022-10-08"},{"lineNumber":70,"author":{"gitId":"LJXSean"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2022-10-08"},{"lineNumber":71,"author":{"gitId":"EiffelLKF"},"content":"                \u0026\u0026 record.equals(card.record)","lastModifiedDate":"2022-10-17"},{"lineNumber":72,"author":{"gitId":"EiffelLKF"},"content":"                \u0026\u0026 medications.equals(card.medications);","lastModifiedDate":"2022-10-17"},{"lineNumber":73,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":74,"author":{"gitId":"LJXSean"},"content":"}","lastModifiedDate":"2022-10-08"}],"authorContributionMap":{"LJXSean":60,"EiffelLKF":14}},{"path":"src/main/java/seedu/address/ui/RecordListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LJXSean"},"content":"package seedu.address.ui;","lastModifiedDate":"2022-10-08"},{"lineNumber":2,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":3,"author":{"gitId":"LJXSean"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2022-10-08"},{"lineNumber":4,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":5,"author":{"gitId":"LJXSean"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-10-08"},{"lineNumber":6,"author":{"gitId":"LJXSean"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-10-08"},{"lineNumber":7,"author":{"gitId":"LJXSean"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2022-10-08"},{"lineNumber":8,"author":{"gitId":"LJXSean"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2022-10-08"},{"lineNumber":9,"author":{"gitId":"LJXSean"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2022-10-08"},{"lineNumber":10,"author":{"gitId":"LJXSean"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2022-10-08"},{"lineNumber":11,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2022-10-17"},{"lineNumber":12,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":13,"author":{"gitId":"LJXSean"},"content":"/**","lastModifiedDate":"2022-10-08"},{"lineNumber":14,"author":{"gitId":"LJXSean"},"content":" * Panel containing the list of Records.","lastModifiedDate":"2022-10-08"},{"lineNumber":15,"author":{"gitId":"LJXSean"},"content":" */","lastModifiedDate":"2022-10-08"},{"lineNumber":16,"author":{"gitId":"LJXSean"},"content":"public class RecordListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2022-10-08"},{"lineNumber":17,"author":{"gitId":"LJXSean"},"content":"    private static final String FXML \u003d \"RecordListPanel.fxml\";","lastModifiedDate":"2022-10-08"},{"lineNumber":18,"author":{"gitId":"LJXSean"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(RecordListPanel.class);","lastModifiedDate":"2022-10-08"},{"lineNumber":19,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":20,"author":{"gitId":"LJXSean"},"content":"    @FXML","lastModifiedDate":"2022-10-08"},{"lineNumber":21,"author":{"gitId":"LJXSean"},"content":"    private ListView\u003cRecord\u003e recordListView;","lastModifiedDate":"2022-10-08"},{"lineNumber":22,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":23,"author":{"gitId":"LJXSean"},"content":"    /**","lastModifiedDate":"2022-10-08"},{"lineNumber":24,"author":{"gitId":"LJXSean"},"content":"     * Creates a {@code RecordListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2022-10-08"},{"lineNumber":25,"author":{"gitId":"LJXSean"},"content":"     */","lastModifiedDate":"2022-10-08"},{"lineNumber":26,"author":{"gitId":"LJXSean"},"content":"    public RecordListPanel(ObservableList\u003cRecord\u003e recordList) {","lastModifiedDate":"2022-10-08"},{"lineNumber":27,"author":{"gitId":"LJXSean"},"content":"        super(FXML);","lastModifiedDate":"2022-10-08"},{"lineNumber":28,"author":{"gitId":"LJXSean"},"content":"        recordListView.setItems(recordList);","lastModifiedDate":"2022-10-08"},{"lineNumber":29,"author":{"gitId":"EiffelLKF"},"content":"        recordListView.setCellFactory(listView -\u003e new RecordListViewCell());","lastModifiedDate":"2022-10-10"},{"lineNumber":30,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":31,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":32,"author":{"gitId":"LJXSean"},"content":"    /**","lastModifiedDate":"2022-10-08"},{"lineNumber":33,"author":{"gitId":"LJXSean"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Record} using a {@code RecordCard}.","lastModifiedDate":"2022-10-08"},{"lineNumber":34,"author":{"gitId":"LJXSean"},"content":"     */","lastModifiedDate":"2022-10-08"},{"lineNumber":35,"author":{"gitId":"EiffelLKF"},"content":"    class RecordListViewCell extends ListCell\u003cRecord\u003e {","lastModifiedDate":"2022-10-10"},{"lineNumber":36,"author":{"gitId":"LJXSean"},"content":"        @Override","lastModifiedDate":"2022-10-08"},{"lineNumber":37,"author":{"gitId":"LJXSean"},"content":"        protected void updateItem(Record record, boolean empty) {","lastModifiedDate":"2022-10-08"},{"lineNumber":38,"author":{"gitId":"LJXSean"},"content":"            super.updateItem(record, empty);","lastModifiedDate":"2022-10-08"},{"lineNumber":39,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":40,"author":{"gitId":"LJXSean"},"content":"            if (empty || record \u003d\u003d null) {","lastModifiedDate":"2022-10-08"},{"lineNumber":41,"author":{"gitId":"LJXSean"},"content":"                setGraphic(null);","lastModifiedDate":"2022-10-08"},{"lineNumber":42,"author":{"gitId":"LJXSean"},"content":"                setText(null);","lastModifiedDate":"2022-10-08"},{"lineNumber":43,"author":{"gitId":"LJXSean"},"content":"            } else {","lastModifiedDate":"2022-10-08"},{"lineNumber":44,"author":{"gitId":"LJXSean"},"content":"                setGraphic(new RecordCard(record, getIndex() + 1).getRoot());","lastModifiedDate":"2022-10-08"},{"lineNumber":45,"author":{"gitId":"LJXSean"},"content":"            }","lastModifiedDate":"2022-10-08"},{"lineNumber":46,"author":{"gitId":"LJXSean"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":47,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":48,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":49,"author":{"gitId":"LJXSean"},"content":"}","lastModifiedDate":"2022-10-08"}],"authorContributionMap":{"LJXSean":46,"EiffelLKF":3}},{"path":"src/main/java/seedu/address/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Platform;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;","lastModifiedDate":"2016-08-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.MainApp;","lastModifiedDate":"2016-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The manager of the UI component.","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";","lastModifiedDate":"2017-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/OmniHealth_logo.png\";","lastModifiedDate":"2022-10-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        //Set the application icon.","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));","lastModifiedDate":"2016-08-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {","lastModifiedDate":"2016-08-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);","lastModifiedDate":"2016-08-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters.","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                                               String contentText) {","lastModifiedDate":"2016-08-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);","lastModifiedDate":"2016-08-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");","lastModifiedDate":"2016-08-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        alert.setTitle(title);","lastModifiedDate":"2016-08-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);","lastModifiedDate":"2016-08-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);","lastModifiedDate":"2016-10-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        alert.showAndWait();","lastModifiedDate":"2016-08-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {","lastModifiedDate":"2016-09-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());","lastModifiedDate":"2016-08-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        Platform.exit();","lastModifiedDate":"2016-08-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        System.exit(1);","lastModifiedDate":"2016-08-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"marclzh":1,"-":87}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"anthonyhoth"},"content":"    -fx-background-color: derive(#ffffff, 20%);","lastModifiedDate":"2022-10-27"},{"lineNumber":3,"author":{"gitId":"anthonyhoth"},"content":"    background-color: #dfe5f1; /* Used in the default.html file */","lastModifiedDate":"2022-10-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":".label {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":9,"author":{"gitId":"anthonyhoth"},"content":"    -fx-text-fill: #dfe5f1;","lastModifiedDate":"2022-10-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":".label-bright {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":16,"author":{"gitId":"anthonyhoth"},"content":"    -fx-text-fill: #012c3c;","lastModifiedDate":"2022-10-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":".label-header {","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":23,"author":{"gitId":"anthonyhoth"},"content":"    -fx-text-fill: #012c3c;","lastModifiedDate":"2022-10-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":".text-field {","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":".tab-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    -fx-min-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    -fx-max-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":".table-view {","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"anthonyhoth"},"content":"    -fx-base: #dfe5f1;","lastModifiedDate":"2022-10-27"},{"lineNumber":44,"author":{"gitId":"anthonyhoth"},"content":"    -fx-control-inner-background: #dfe5f1;","lastModifiedDate":"2022-10-27"},{"lineNumber":45,"author":{"gitId":"anthonyhoth"},"content":"    -fx-background-color: #dfe5f1;","lastModifiedDate":"2022-10-27"},{"lineNumber":46,"author":{"gitId":"anthonyhoth"},"content":"    -fx-table-cell-border-color: #ffffff;","lastModifiedDate":"2022-10-27"},{"lineNumber":47,"author":{"gitId":"anthonyhoth"},"content":"    -fx-table-header-border-color: #ffffff;","lastModifiedDate":"2022-10-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    -fx-padding: 5;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":".table-view .column-header-background {","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    -fx-size: 35;","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    -fx-border-color:","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        derive(-fx-base, 80%)","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":".table-view .column-header .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":70,"author":{"gitId":"anthonyhoth"},"content":"    -fx-text-fill: #012c3c;","lastModifiedDate":"2022-10-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"anthonyhoth"},"content":"    -fx-background-color: derive(#ffffff, 20%);","lastModifiedDate":"2022-10-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;","lastModifiedDate":"2017-03-02"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":".split-pane {","lastModifiedDate":"2016-08-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":87,"author":{"gitId":"anthonyhoth"},"content":"    -fx-background-color: derive(#ffffff, 20%);","lastModifiedDate":"2022-10-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":".list-view {","lastModifiedDate":"2017-03-02"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    -fx-padding: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":93,"author":{"gitId":"anthonyhoth"},"content":"    -fx-background-color: derive(#ffffff, 20%);","lastModifiedDate":"2022-10-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":96,"author":{"gitId":"-"},"content":".list-cell {","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap : 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":".list-cell:filled:even {","lastModifiedDate":"2017-03-02"},{"lineNumber":103,"author":{"gitId":"anthonyhoth"},"content":"    -fx-background-color: #f6f8ff;","lastModifiedDate":"2022-10-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":106,"author":{"gitId":"-"},"content":".list-cell:filled:odd {","lastModifiedDate":"2017-03-02"},{"lineNumber":107,"author":{"gitId":"anthonyhoth"},"content":"    -fx-background-color: #dfe5f1;","lastModifiedDate":"2022-10-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":110,"author":{"gitId":"-"},"content":".list-cell:filled:selected {","lastModifiedDate":"2017-03-02"},{"lineNumber":111,"author":{"gitId":"anthonyhoth"},"content":"    -fx-background-color: #c4cad6;","lastModifiedDate":"2022-10-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":114,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {","lastModifiedDate":"2017-03-02"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    -fx-border-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":119,"author":{"gitId":"-"},"content":".list-cell .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"anthonyhoth"},"content":"    -fx-text-fill: #012c3c;","lastModifiedDate":"2022-10-27"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":".cell_big_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"anthonyhoth"},"content":"    -fx-text-fill: #012c3c;","lastModifiedDate":"2022-10-27"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":".cell_small_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\";","lastModifiedDate":"2022-01-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;","lastModifiedDate":"2017-03-02"},{"lineNumber":132,"author":{"gitId":"anthonyhoth"},"content":"    -fx-text-fill: #012c3c;","lastModifiedDate":"2022-10-27"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":".stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":136,"author":{"gitId":"anthonyhoth"},"content":"     -fx-background-color: derive(#dfe5f1, 20%);","lastModifiedDate":"2022-10-27"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":".pane-with-border {","lastModifiedDate":"2017-05-15"},{"lineNumber":140,"author":{"gitId":"anthonyhoth"},"content":"     -fx-background-color: derive(#ffffff, 20%);","lastModifiedDate":"2022-10-27"},{"lineNumber":141,"author":{"gitId":"anthonyhoth"},"content":"     -fx-border-color: derive(#dfe5f1, 10%);","lastModifiedDate":"2022-10-27"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     -fx-border-top-width: 1px;","lastModifiedDate":"2017-05-09"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-09"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":145,"author":{"gitId":"-"},"content":".status-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":146,"author":{"gitId":"anthonyhoth"},"content":"    -fx-background-color: derive(#dfe5f1, 30%);","lastModifiedDate":"2022-10-27"},{"lineNumber":147,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":149,"author":{"gitId":"-"},"content":".result-display {","lastModifiedDate":"2016-09-14"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2017-03-02"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":153,"author":{"gitId":"anthonyhoth"},"content":"    -fx-text-fill: #012c3c;","lastModifiedDate":"2022-10-27"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":156,"author":{"gitId":"-"},"content":".result-display .label {","lastModifiedDate":"2016-09-14"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    -fx-text-fill: black !important;","lastModifiedDate":"2016-09-14"},{"lineNumber":158,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":".status-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":162,"author":{"gitId":"anthonyhoth"},"content":"    -fx-text-fill: #012c3c;","lastModifiedDate":"2022-10-27"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;","lastModifiedDate":"2018-12-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;","lastModifiedDate":"2018-12-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":".status-bar-with-border {","lastModifiedDate":"2016-08-08"},{"lineNumber":168,"author":{"gitId":"anthonyhoth"},"content":"    -fx-background-color: derive(#ffffff, 30%);","lastModifiedDate":"2022-10-27"},{"lineNumber":169,"author":{"gitId":"anthonyhoth"},"content":"    -fx-border-color: derive(#ffffff, 25%);","lastModifiedDate":"2022-10-27"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":".status-bar-with-border .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"anthonyhoth"},"content":"    -fx-text-fill: #012c3c;","lastModifiedDate":"2022-10-27"},{"lineNumber":175,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":".grid-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":178,"author":{"gitId":"anthonyhoth"},"content":"    -fx-background-color: derive(#dfe5f1, 30%);","lastModifiedDate":"2022-10-27"},{"lineNumber":179,"author":{"gitId":"anthonyhoth"},"content":"    -fx-border-color: derive(#dfe5f1, 30%);","lastModifiedDate":"2022-10-27"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":184,"author":{"gitId":"anthonyhoth"},"content":"    -fx-background-color: derive(#dfe5f1, 30%);","lastModifiedDate":"2022-10-27"},{"lineNumber":185,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":".context-menu {","lastModifiedDate":"2016-08-08"},{"lineNumber":188,"author":{"gitId":"anthonyhoth"},"content":"    -fx-background-color: derive(#dfe5f1, 50%);","lastModifiedDate":"2022-10-27"},{"lineNumber":189,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":191,"author":{"gitId":"-"},"content":".context-menu .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":192,"author":{"gitId":"anthonyhoth"},"content":"    -fx-text-fill: #012c3c;","lastModifiedDate":"2022-10-27"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":".menu-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":196,"author":{"gitId":"anthonyhoth"},"content":"    -fx-background-color: derive(#ffffff, 20%);","lastModifiedDate":"2022-10-27"},{"lineNumber":197,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":199,"author":{"gitId":"-"},"content":".menu-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":202,"author":{"gitId":"anthonyhoth"},"content":"    -fx-text-fill: #012c3c;","lastModifiedDate":"2022-10-27"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":204,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":206,"author":{"gitId":"-"},"content":".menu .left-container {","lastModifiedDate":"2016-08-08"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    -fx-background-color: black;","lastModifiedDate":"2016-08-08"},{"lineNumber":208,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":210,"author":{"gitId":"-"},"content":"/*","lastModifiedDate":"2016-08-08"},{"lineNumber":211,"author":{"gitId":"-"},"content":" * Metro style Push Button","lastModifiedDate":"2016-08-08"},{"lineNumber":212,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira","lastModifiedDate":"2016-08-08"},{"lineNumber":213,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/","lastModifiedDate":"2016-08-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":".button {","lastModifiedDate":"2016-08-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;","lastModifiedDate":"2016-08-08"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    -fx-border-color: #e2e2e2;","lastModifiedDate":"2016-08-08"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    -fx-border-width: 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;","lastModifiedDate":"2022-01-13"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d8d8d8;","lastModifiedDate":"2016-08-08"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":225,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":227,"author":{"gitId":"-"},"content":".button:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    -fx-background-color: #3a3a3a;","lastModifiedDate":"2016-08-08"},{"lineNumber":229,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":231,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {","lastModifiedDate":"2016-08-08"},{"lineNumber":232,"author":{"gitId":"-"},"content":"  -fx-background-color: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  -fx-text-fill: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":236,"author":{"gitId":"-"},"content":".button:focused {","lastModifiedDate":"2016-08-08"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    -fx-border-color: white, white;","lastModifiedDate":"2016-08-08"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);","lastModifiedDate":"2016-08-08"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":242,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":244,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {","lastModifiedDate":"2016-08-08"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;","lastModifiedDate":"2016-08-08"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":248,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":250,"author":{"gitId":"-"},"content":".button:default {","lastModifiedDate":"2016-08-08"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2016-08-08"},{"lineNumber":253,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":255,"author":{"gitId":"-"},"content":".button:default:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);","lastModifiedDate":"2016-08-08"},{"lineNumber":257,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":259,"author":{"gitId":"-"},"content":".dialog-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":261,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":263,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {","lastModifiedDate":"2016-08-08"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":265,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":267,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {","lastModifiedDate":"2016-08-08"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;","lastModifiedDate":"2016-08-08"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2016-08-08"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":271,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":273,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {","lastModifiedDate":"2016-08-08"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2016-08-15"},{"lineNumber":275,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":277,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {","lastModifiedDate":"2016-08-08"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;","lastModifiedDate":"2016-08-08"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;","lastModifiedDate":"2016-08-08"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    -fx-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":281,"author":{"gitId":"anthonyhoth"},"content":"    -fx-text-fill: #012c3c;","lastModifiedDate":"2022-10-27"},{"lineNumber":282,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":284,"author":{"gitId":"-"},"content":".scroll-bar {","lastModifiedDate":"2017-03-02"},{"lineNumber":285,"author":{"gitId":"anthonyhoth"},"content":"    -fx-background-color: derive(#b5bcca, 20%);","lastModifiedDate":"2022-10-27"},{"lineNumber":286,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":288,"author":{"gitId":"-"},"content":".scroll-bar .thumb {","lastModifiedDate":"2016-08-15"},{"lineNumber":289,"author":{"gitId":"anthonyhoth"},"content":"    -fx-background-color: derive(#dfe5f1, 50%);","lastModifiedDate":"2022-10-27"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;","lastModifiedDate":"2016-08-15"},{"lineNumber":291,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":293,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {","lastModifiedDate":"2016-08-15"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-15"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-15"},{"lineNumber":296,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":298,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {","lastModifiedDate":"2016-08-15"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";","lastModifiedDate":"2016-08-15"},{"lineNumber":300,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":302,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;","lastModifiedDate":"2016-08-15"},{"lineNumber":304,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":305,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":306,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;","lastModifiedDate":"2016-08-18"},{"lineNumber":308,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":309,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":310,"author":{"gitId":"-"},"content":"#cardPane {","lastModifiedDate":"2016-08-08"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":313,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":314,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":315,"author":{"gitId":"-"},"content":"#commandTypeLabel {","lastModifiedDate":"2016-08-08"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;","lastModifiedDate":"2016-08-08"},{"lineNumber":317,"author":{"gitId":"-"},"content":"    -fx-text-fill: #F70D1A;","lastModifiedDate":"2016-08-08"},{"lineNumber":318,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":320,"author":{"gitId":"-"},"content":"#commandTextField {","lastModifiedDate":"2017-03-02"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent #383838 transparent #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":323,"author":{"gitId":"-"},"content":"    -fx-border-color: #383838 #383838 #ffffff #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":328,"author":{"gitId":"anthonyhoth"},"content":"    -fx-text-fill: #012c3c;","lastModifiedDate":"2022-10-27"},{"lineNumber":329,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":331,"author":{"gitId":"-"},"content":"#filterField, #personListPanel, #personWebpage {","lastModifiedDate":"2016-08-15"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);","lastModifiedDate":"2016-08-15"},{"lineNumber":333,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":334,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":335,"author":{"gitId":"-"},"content":"#resultDisplay .content {","lastModifiedDate":"2017-03-02"},{"lineNumber":336,"author":{"gitId":"anthonyhoth"},"content":"    -fx-background-color: #dfe5f1;","lastModifiedDate":"2022-10-27"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":338,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":339,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":340,"author":{"gitId":"-"},"content":"#tags {","lastModifiedDate":"2016-12-18"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2016-12-18"},{"lineNumber":342,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":343,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":344,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":345,"author":{"gitId":"-"},"content":"#tags .label {","lastModifiedDate":"2016-12-18"},{"lineNumber":346,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2022-10-17"},{"lineNumber":347,"author":{"gitId":"-"},"content":"    -fx-background-color: #3e7b91;","lastModifiedDate":"2022-10-17"},{"lineNumber":348,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2022-10-17"},{"lineNumber":349,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2022-10-17"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2022-10-17"},{"lineNumber":351,"author":{"gitId":"EiffelLKF"},"content":"    -fx-font-size: 15;","lastModifiedDate":"2022-10-17"},{"lineNumber":352,"author":{"gitId":"EiffelLKF"},"content":"}","lastModifiedDate":"2022-10-17"},{"lineNumber":353,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":354,"author":{"gitId":"EiffelLKF"},"content":"#medications {","lastModifiedDate":"2022-10-17"},{"lineNumber":355,"author":{"gitId":"EiffelLKF"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2022-10-17"},{"lineNumber":356,"author":{"gitId":"EiffelLKF"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2022-10-17"},{"lineNumber":357,"author":{"gitId":"EiffelLKF"},"content":"}","lastModifiedDate":"2022-10-17"},{"lineNumber":358,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":359,"author":{"gitId":"EiffelLKF"},"content":"#medications .label {","lastModifiedDate":"2022-10-17"},{"lineNumber":360,"author":{"gitId":"anthonyhoth"},"content":"    -fx-text-fill: #012c3c;","lastModifiedDate":"2022-10-27"},{"lineNumber":361,"author":{"gitId":"anthonyhoth"},"content":"    -fx-background-color: #b9dcfa;","lastModifiedDate":"2022-10-27"},{"lineNumber":362,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":363,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":364,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2016-12-18"},{"lineNumber":366,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"}],"authorContributionMap":{"anthonyhoth":43,"EiffelLKF":9,"-":314}},{"path":"src/main/resources/view/Extensions.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":".error {","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */","lastModifiedDate":"2017-03-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":".list-cell:empty {","lastModifiedDate":"2017-02-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /* Empty cells will not have alternating colours */","lastModifiedDate":"2017-02-23"},{"lineNumber":8,"author":{"gitId":"anthonyhoth"},"content":"    -fx-background: #e9ecf3;","lastModifiedDate":"2022-10-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":".tag-selector {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    -fx-border-color: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-border-radius: 3;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-background-radius: 3;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":".tooltip-text {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"anthonyhoth":1,"-":19}},{"path":"src/main/resources/view/HelpWindow.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#copyButton, #helpMessage {","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"anthonyhoth"},"content":"    -fx-text-fill: #012c3c;","lastModifiedDate":"2022-10-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-01-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"#copyButton {","lastModifiedDate":"2022-01-02"},{"lineNumber":6,"author":{"gitId":"anthonyhoth"},"content":"    -fx-background-color: #dfe5f1;","lastModifiedDate":"2022-10-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-01-02"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-02"},{"lineNumber":9,"author":{"gitId":"-"},"content":"#copyButton:hover {","lastModifiedDate":"2022-01-02"},{"lineNumber":10,"author":{"gitId":"anthonyhoth"},"content":"    -fx-background-color: #e9effb;","lastModifiedDate":"2022-10-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-01-02"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-02"},{"lineNumber":13,"author":{"gitId":"-"},"content":"#copyButton:armed {","lastModifiedDate":"2022-01-02"},{"lineNumber":14,"author":{"gitId":"anthonyhoth"},"content":"    -fx-background-color: #bcc3cf;","lastModifiedDate":"2022-10-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-01-02"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-02"},{"lineNumber":17,"author":{"gitId":"-"},"content":"#helpMessageContainer {","lastModifiedDate":"2022-01-02"},{"lineNumber":18,"author":{"gitId":"anthonyhoth"},"content":"    -fx-background-color: derive(#ffffff, 20%);","lastModifiedDate":"2022-10-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-08-28"}],"authorContributionMap":{"anthonyhoth":5,"-":14}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2017-11-29"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"         title\u003d\"OmniHealth\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e","lastModifiedDate":"2022-10-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"    \u003cImage url\u003d\"@/images/OmniHealth_logo.png\" /\u003e","lastModifiedDate":"2022-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e","lastModifiedDate":"2016-08-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2017-06-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\"","lastModifiedDate":"2017-05-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2019-01-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":53,"author":{"gitId":"LJXSean"},"content":"          \u003cStackPane fx:id\u003d\"listPanelsPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"marclzh":2,"LJXSean":1,"-":57}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":31,"author":{"gitId":"hanwenlai"},"content":"      \u003cLabel fx:id\u003d\"birthdate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$birthdate\" /\u003e","lastModifiedDate":"2022-10-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"marclzh"},"content":"      \u003cLabel fx:id\u003d\"recordList\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$recordCount\" /\u003e","lastModifiedDate":"2022-10-04"},{"lineNumber":36,"author":{"gitId":"marclzh"},"content":"      \u003cLabel fx:id\u003d\"appointment\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$appointment\" /\u003e","lastModifiedDate":"2022-10-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"marclzh":2,"hanwenlai":1,"-":36}},{"path":"src/main/resources/view/RecordListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LJXSean"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":2,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":3,"author":{"gitId":"LJXSean"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":4,"author":{"gitId":"LJXSean"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":5,"author":{"gitId":"LJXSean"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":6,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":7,"author":{"gitId":"LJXSean"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":8,"author":{"gitId":"LJXSean"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":9,"author":{"gitId":"LJXSean"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":10,"author":{"gitId":"LJXSean"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":11,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":12,"author":{"gitId":"LJXSean"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":13,"author":{"gitId":"EiffelLKF"},"content":"\u003c?import javafx.scene.text.Text?\u003e","lastModifiedDate":"2022-10-17"},{"lineNumber":14,"author":{"gitId":"LJXSean"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":15,"author":{"gitId":"LJXSean"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":16,"author":{"gitId":"LJXSean"},"content":"        \u003ccolumnConstraints\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":17,"author":{"gitId":"LJXSean"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":18,"author":{"gitId":"LJXSean"},"content":"        \u003c/columnConstraints\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":19,"author":{"gitId":"LJXSean"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":20,"author":{"gitId":"LJXSean"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":21,"author":{"gitId":"LJXSean"},"content":"                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":22,"author":{"gitId":"LJXSean"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":23,"author":{"gitId":"LJXSean"},"content":"            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":24,"author":{"gitId":"LJXSean"},"content":"                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":25,"author":{"gitId":"LJXSean"},"content":"                    \u003cminWidth\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":26,"author":{"gitId":"LJXSean"},"content":"                        \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":27,"author":{"gitId":"LJXSean"},"content":"                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":28,"author":{"gitId":"LJXSean"},"content":"                    \u003c/minWidth\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":29,"author":{"gitId":"LJXSean"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":30,"author":{"gitId":"EiffelLKF"},"content":"                \u003cLabel fx:id\u003d\"date\" text\u003d\"\\$date\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2022-10-17"},{"lineNumber":31,"author":{"gitId":"LJXSean"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":32,"author":{"gitId":"EiffelLKF"},"content":"            \u003cLabel fx:id\u003d\"recordText\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$recordText\" /\u003e","lastModifiedDate":"2022-10-17"},{"lineNumber":33,"author":{"gitId":"EiffelLKF"},"content":"            \u003cFlowPane fx:id\u003d\"medications\" /\u003e","lastModifiedDate":"2022-10-17"},{"lineNumber":34,"author":{"gitId":"LJXSean"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":35,"author":{"gitId":"LJXSean"},"content":"    \u003c/GridPane\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":36,"author":{"gitId":"LJXSean"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2022-10-08"}],"authorContributionMap":{"LJXSean":32,"EiffelLKF":4}},{"path":"src/main/resources/view/RecordListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LJXSean"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":2,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":3,"author":{"gitId":"LJXSean"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":4,"author":{"gitId":"LJXSean"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":5,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":6,"author":{"gitId":"LJXSean"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":7,"author":{"gitId":"LJXSean"},"content":"    \u003cListView fx:id\u003d\"recordListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":8,"author":{"gitId":"LJXSean"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2022-10-08"}],"authorContributionMap":{"LJXSean":8}},{"path":"src/test/java/seedu/address/commons/util/AppUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2016-09-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class AppUtilTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public void getImage_exitingImage() {","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"        assertNotNull(AppUtil.getImage(\"/images/OmniHealth_logo.png\"));","lastModifiedDate":"2022-10-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void checkArgument_true_nothingHappens() {","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true);","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true, \"\");","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String errorMessage \u003d \"error message\";","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"marclzh":1,"-":35}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDATE_DESC_AMY;","lastModifiedDate":"2022-10-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2022-10-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"LJXSean"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2022-10-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2017-01-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";","lastModifiedDate":"2017-06-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-06-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":68,"author":{"gitId":"LJXSean"},"content":"        String clearCommand \u003d ClearCommand.COMMAND_WORD;","lastModifiedDate":"2022-10-20"},{"lineNumber":69,"author":{"gitId":"LJXSean"},"content":"        assertCommandSuccess(clearCommand, ClearCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2022-10-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Execute add command","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"hanwenlai"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + BIRTHDATE_DESC_AMY + PHONE_DESC_AMY","lastModifiedDate":"2022-10-19"},{"lineNumber":84,"author":{"gitId":"hanwenlai"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;","lastModifiedDate":"2022-10-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-05-31"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {","lastModifiedDate":"2018-12-09"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2018-12-09"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-12-09"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":163,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"hanwenlai":3,"LJXSean":3,"-":157}},{"path":"src/test/java/seedu/address/logic/commands/AddAppointmentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-21"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-21"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-21"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":"import static seedu.address.logic.commands.Command.MESSAGE_ADDRESS_BOOK_COMMAND_PREREQUISITE;","lastModifiedDate":"2022-10-21"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-10-21"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-21"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2022-10-21"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"import static seedu.address.testutil.TypicalIndexes.FIRST_INDEX;","lastModifiedDate":"2022-10-21"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"import static seedu.address.testutil.TypicalIndexes.SECOND_INDEX;","lastModifiedDate":"2022-10-21"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2022-10-21"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-21"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-21"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-21"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-10-21"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-21"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2022-10-21"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":24,"author":{"gitId":"marclzh"},"content":"class AddAppointmentCommandTest {","lastModifiedDate":"2022-10-21"},{"lineNumber":25,"author":{"gitId":"marclzh"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-21"},{"lineNumber":26,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":27,"author":{"gitId":"marclzh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":28,"author":{"gitId":"marclzh"},"content":"    public void execute_validIndexValidDate_success() {","lastModifiedDate":"2022-10-21"},{"lineNumber":29,"author":{"gitId":"marclzh"},"content":"        String appointmentDate \u003d \"01-01-2024 1200\";","lastModifiedDate":"2022-10-26"},{"lineNumber":30,"author":{"gitId":"marclzh"},"content":"        Person personToAddAppointment \u003d model.getFilteredPersonList().get(FIRST_INDEX.getZeroBased());","lastModifiedDate":"2022-10-21"},{"lineNumber":31,"author":{"gitId":"marclzh"},"content":"        AddAppointmentCommand addAppointmentCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":32,"author":{"gitId":"marclzh"},"content":"                new AddAppointmentCommand(FIRST_INDEX, appointmentDate);","lastModifiedDate":"2022-10-26"},{"lineNumber":33,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":34,"author":{"gitId":"marclzh"},"content":"        String expectedMessage \u003d String.format(AddAppointmentCommand.MESSAGE_SUCCESS,","lastModifiedDate":"2022-10-26"},{"lineNumber":35,"author":{"gitId":"marclzh"},"content":"                personToAddAppointment.getName().toString()) + \": \" + appointmentDate;","lastModifiedDate":"2022-10-26"},{"lineNumber":36,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":37,"author":{"gitId":"marclzh"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-21"},{"lineNumber":38,"author":{"gitId":"marclzh"},"content":"        Person expectedPersonToAddAppointment \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":39,"author":{"gitId":"marclzh"},"content":"                new PersonBuilder(personToAddAppointment).withAppointment(appointmentDate).build();","lastModifiedDate":"2022-10-26"},{"lineNumber":40,"author":{"gitId":"marclzh"},"content":"        expectedModel.setPerson(expectedModel.getFilteredPersonList().get(0), expectedPersonToAddAppointment);","lastModifiedDate":"2022-10-21"},{"lineNumber":41,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":42,"author":{"gitId":"marclzh"},"content":"        assertCommandSuccess(addAppointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-21"},{"lineNumber":43,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":44,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":45,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":46,"author":{"gitId":"marclzh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":47,"author":{"gitId":"marclzh"},"content":"    public void execute_validIndexValidDateFilteredList_success() {","lastModifiedDate":"2022-10-21"},{"lineNumber":48,"author":{"gitId":"marclzh"},"content":"        showPersonAtIndex(model, FIRST_INDEX);","lastModifiedDate":"2022-10-21"},{"lineNumber":49,"author":{"gitId":"marclzh"},"content":"        String appointmentDate \u003d \"01-01-2024 1200\";","lastModifiedDate":"2022-10-26"},{"lineNumber":50,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":51,"author":{"gitId":"marclzh"},"content":"        Person personToAddAppointment \u003d model.getFilteredPersonList().get(FIRST_INDEX.getZeroBased());","lastModifiedDate":"2022-10-21"},{"lineNumber":52,"author":{"gitId":"marclzh"},"content":"        AddAppointmentCommand addAppointmentCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":53,"author":{"gitId":"marclzh"},"content":"                new AddAppointmentCommand(FIRST_INDEX, appointmentDate);","lastModifiedDate":"2022-10-26"},{"lineNumber":54,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":55,"author":{"gitId":"marclzh"},"content":"        String expectedMessage \u003d String.format(AddAppointmentCommand.MESSAGE_SUCCESS,","lastModifiedDate":"2022-10-26"},{"lineNumber":56,"author":{"gitId":"marclzh"},"content":"                personToAddAppointment.getName().toString()) + \": \" + appointmentDate;","lastModifiedDate":"2022-10-26"},{"lineNumber":57,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":58,"author":{"gitId":"marclzh"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-21"},{"lineNumber":59,"author":{"gitId":"marclzh"},"content":"        Person expectedPersonToAddAppointment \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":60,"author":{"gitId":"marclzh"},"content":"                new PersonBuilder(personToAddAppointment).withAppointment(appointmentDate).build();","lastModifiedDate":"2022-10-26"},{"lineNumber":61,"author":{"gitId":"marclzh"},"content":"        expectedModel.setPerson(expectedModel.getFilteredPersonList().get(0), expectedPersonToAddAppointment);","lastModifiedDate":"2022-10-21"},{"lineNumber":62,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":63,"author":{"gitId":"marclzh"},"content":"        assertCommandSuccess(addAppointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-21"},{"lineNumber":64,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":65,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":66,"author":{"gitId":"marclzh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":67,"author":{"gitId":"marclzh"},"content":"    public void execute_invalidIndexValidDateFilteredList_failure() {","lastModifiedDate":"2022-10-21"},{"lineNumber":68,"author":{"gitId":"marclzh"},"content":"        showPersonAtIndex(model, FIRST_INDEX);","lastModifiedDate":"2022-10-21"},{"lineNumber":69,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":70,"author":{"gitId":"marclzh"},"content":"        AddAppointmentCommand addAppointmentCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":71,"author":{"gitId":"marclzh"},"content":"                new AddAppointmentCommand(SECOND_INDEX, \"01-01-2000 1200\");","lastModifiedDate":"2022-10-21"},{"lineNumber":72,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":73,"author":{"gitId":"marclzh"},"content":"        assertCommandFailure(addAppointmentCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-21"},{"lineNumber":74,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":75,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":76,"author":{"gitId":"marclzh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":77,"author":{"gitId":"marclzh"},"content":"    public void execute_addAppointmentInEmptyPatientList_failure() {","lastModifiedDate":"2022-10-21"},{"lineNumber":78,"author":{"gitId":"marclzh"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2022-10-21"},{"lineNumber":79,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":80,"author":{"gitId":"marclzh"},"content":"        AddAppointmentCommand addAppointmentCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":81,"author":{"gitId":"marclzh"},"content":"                new AddAppointmentCommand(FIRST_INDEX, \"01-01-2000 1200\");","lastModifiedDate":"2022-10-21"},{"lineNumber":82,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":83,"author":{"gitId":"marclzh"},"content":"        assertCommandFailure(addAppointmentCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-21"},{"lineNumber":84,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":85,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":86,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":87,"author":{"gitId":"marclzh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":88,"author":{"gitId":"marclzh"},"content":"    public void execute_invalidIndexValidDate_failure() {","lastModifiedDate":"2022-10-21"},{"lineNumber":89,"author":{"gitId":"marclzh"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2022-10-21"},{"lineNumber":90,"author":{"gitId":"marclzh"},"content":"        AddAppointmentCommand addAppointmentCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":91,"author":{"gitId":"marclzh"},"content":"                new AddAppointmentCommand(outOfBoundIndex, \"01-01-2000 1200\");","lastModifiedDate":"2022-10-21"},{"lineNumber":92,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":93,"author":{"gitId":"marclzh"},"content":"        assertCommandFailure(addAppointmentCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-21"},{"lineNumber":94,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":95,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":96,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":97,"author":{"gitId":"marclzh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":98,"author":{"gitId":"marclzh"},"content":"    public void execute_addAppointmentInRecordList_failure() {","lastModifiedDate":"2022-10-21"},{"lineNumber":99,"author":{"gitId":"marclzh"},"content":"        AddAppointmentCommand addAppointmentCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":100,"author":{"gitId":"marclzh"},"content":"                new AddAppointmentCommand(FIRST_INDEX, \"01-01-2000 1200\");","lastModifiedDate":"2022-10-21"},{"lineNumber":101,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":102,"author":{"gitId":"marclzh"},"content":"        model.setFilteredRecordList(BENSON);","lastModifiedDate":"2022-10-21"},{"lineNumber":103,"author":{"gitId":"marclzh"},"content":"        model.setRecordListDisplayed(true);","lastModifiedDate":"2022-10-21"},{"lineNumber":104,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":105,"author":{"gitId":"marclzh"},"content":"        assertCommandFailure(addAppointmentCommand, model, MESSAGE_ADDRESS_BOOK_COMMAND_PREREQUISITE);","lastModifiedDate":"2022-10-21"},{"lineNumber":106,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":107,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":108,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":109,"author":{"gitId":"marclzh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":110,"author":{"gitId":"marclzh"},"content":"    public void equals() {","lastModifiedDate":"2022-10-21"},{"lineNumber":111,"author":{"gitId":"marclzh"},"content":"        AddAppointmentCommand testFirstAppointmentCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":112,"author":{"gitId":"marclzh"},"content":"                new AddAppointmentCommand(FIRST_INDEX, \"01-01-2000 1200\");","lastModifiedDate":"2022-10-21"},{"lineNumber":113,"author":{"gitId":"marclzh"},"content":"        AddAppointmentCommand testSecondAppointmentCommand \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":114,"author":{"gitId":"marclzh"},"content":"                new AddAppointmentCommand(SECOND_INDEX, \"01-01-2000 1200\");","lastModifiedDate":"2022-10-21"},{"lineNumber":115,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":116,"author":{"gitId":"marclzh"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-10-21"},{"lineNumber":117,"author":{"gitId":"marclzh"},"content":"        assertTrue(testFirstAppointmentCommand.equals(testFirstAppointmentCommand));","lastModifiedDate":"2022-10-21"},{"lineNumber":118,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":119,"author":{"gitId":"marclzh"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-10-21"},{"lineNumber":120,"author":{"gitId":"marclzh"},"content":"        AddAppointmentCommand testFirstAppointmentCommandCopy \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":121,"author":{"gitId":"marclzh"},"content":"                new AddAppointmentCommand(FIRST_INDEX, \"01-01-2000 1200\");","lastModifiedDate":"2022-10-21"},{"lineNumber":122,"author":{"gitId":"marclzh"},"content":"        assertTrue(testFirstAppointmentCommand.equals(testFirstAppointmentCommandCopy));","lastModifiedDate":"2022-10-21"},{"lineNumber":123,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":124,"author":{"gitId":"marclzh"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2022-10-21"},{"lineNumber":125,"author":{"gitId":"marclzh"},"content":"        assertFalse(testFirstAppointmentCommand.equals(1));","lastModifiedDate":"2022-10-21"},{"lineNumber":126,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":127,"author":{"gitId":"marclzh"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-10-21"},{"lineNumber":128,"author":{"gitId":"marclzh"},"content":"        assertFalse(testFirstAppointmentCommand.equals(null));","lastModifiedDate":"2022-10-21"},{"lineNumber":129,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":130,"author":{"gitId":"marclzh"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2022-10-21"},{"lineNumber":131,"author":{"gitId":"marclzh"},"content":"        assertFalse(testFirstAppointmentCommand.equals(testSecondAppointmentCommand));","lastModifiedDate":"2022-10-21"},{"lineNumber":132,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":133,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-10-21"}],"authorContributionMap":{"marclzh":133}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-05-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-05-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-12"},{"lineNumber":24,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2022-10-17"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class AddCommandTest {","lastModifiedDate":"2017-05-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);","lastModifiedDate":"2019-01-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());","lastModifiedDate":"2022-10-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);","lastModifiedDate":"2017-05-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2019-05-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);","lastModifiedDate":"2017-06-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":117,"author":{"gitId":"anthonyhoth"},"content":"        @Override","lastModifiedDate":"2022-10-25"},{"lineNumber":118,"author":{"gitId":"anthonyhoth"},"content":"        public boolean hasSimilarName(Person person) {","lastModifiedDate":"2022-10-25"},{"lineNumber":119,"author":{"gitId":"anthonyhoth"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-25"},{"lineNumber":120,"author":{"gitId":"anthonyhoth"},"content":"        }","lastModifiedDate":"2022-10-25"},{"lineNumber":121,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2018-11-27"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-12"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2018-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":147,"author":{"gitId":"anthonyhoth"},"content":"        @Override","lastModifiedDate":"2022-10-18"},{"lineNumber":148,"author":{"gitId":"anthonyhoth"},"content":"        public void setRecord(Record target, Record editedRecord) {","lastModifiedDate":"2022-10-18"},{"lineNumber":149,"author":{"gitId":"anthonyhoth"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-18"},{"lineNumber":150,"author":{"gitId":"anthonyhoth"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":151,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":152,"author":{"gitId":"EiffelLKF"},"content":"        @Override","lastModifiedDate":"2022-10-10"},{"lineNumber":153,"author":{"gitId":"EiffelLKF"},"content":"        public boolean hasRecord(Record record) {","lastModifiedDate":"2022-10-10"},{"lineNumber":154,"author":{"gitId":"EiffelLKF"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-10"},{"lineNumber":155,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-10"},{"lineNumber":156,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":157,"author":{"gitId":"EiffelLKF"},"content":"        @Override","lastModifiedDate":"2022-10-10"},{"lineNumber":158,"author":{"gitId":"EiffelLKF"},"content":"        public void addRecord(Record record) {","lastModifiedDate":"2022-10-10"},{"lineNumber":159,"author":{"gitId":"EiffelLKF"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-10"},{"lineNumber":160,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-10"},{"lineNumber":161,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":171,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":172,"author":{"gitId":"anthonyhoth"},"content":"        @Override","lastModifiedDate":"2022-10-10"},{"lineNumber":173,"author":{"gitId":"anthonyhoth"},"content":"        public void deleteRecord(Record record) {","lastModifiedDate":"2022-10-10"},{"lineNumber":174,"author":{"gitId":"anthonyhoth"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-10"},{"lineNumber":175,"author":{"gitId":"anthonyhoth"},"content":"        }","lastModifiedDate":"2022-10-10"},{"lineNumber":176,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":177,"author":{"gitId":"LJXSean"},"content":"        @Override","lastModifiedDate":"2022-10-08"},{"lineNumber":178,"author":{"gitId":"LJXSean"},"content":"        public ObservableList\u003cRecord\u003e getFilteredRecordList() {","lastModifiedDate":"2022-10-08"},{"lineNumber":179,"author":{"gitId":"LJXSean"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-08"},{"lineNumber":180,"author":{"gitId":"LJXSean"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":181,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":182,"author":{"gitId":"LJXSean"},"content":"        @Override","lastModifiedDate":"2022-10-08"},{"lineNumber":183,"author":{"gitId":"LJXSean"},"content":"        public void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate) {","lastModifiedDate":"2022-10-08"},{"lineNumber":184,"author":{"gitId":"LJXSean"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-08"},{"lineNumber":185,"author":{"gitId":"LJXSean"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":186,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":187,"author":{"gitId":"marclzh"},"content":"        @Override","lastModifiedDate":"2022-10-10"},{"lineNumber":188,"author":{"gitId":"marclzh"},"content":"        public void clearRecords() {","lastModifiedDate":"2022-10-10"},{"lineNumber":189,"author":{"gitId":"marclzh"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-10"},{"lineNumber":190,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-10-10"},{"lineNumber":191,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":192,"author":{"gitId":"EiffelLKF"},"content":"        @Override","lastModifiedDate":"2022-10-11"},{"lineNumber":193,"author":{"gitId":"hanwenlai"},"content":"        public void setFilteredRecordList(Person person) {","lastModifiedDate":"2022-10-10"},{"lineNumber":194,"author":{"gitId":"hanwenlai"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-10"},{"lineNumber":195,"author":{"gitId":"hanwenlai"},"content":"        }","lastModifiedDate":"2022-10-10"},{"lineNumber":196,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":197,"author":{"gitId":"EiffelLKF"},"content":"        @Override","lastModifiedDate":"2022-10-11"},{"lineNumber":198,"author":{"gitId":"EiffelLKF"},"content":"        public void setRecordListDisplayed(boolean b) {","lastModifiedDate":"2022-10-11"},{"lineNumber":199,"author":{"gitId":"EiffelLKF"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-11"},{"lineNumber":200,"author":{"gitId":"EiffelLKF"},"content":"        };","lastModifiedDate":"2022-10-11"},{"lineNumber":201,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":202,"author":{"gitId":"EiffelLKF"},"content":"        @Override","lastModifiedDate":"2022-10-11"},{"lineNumber":203,"author":{"gitId":"EiffelLKF"},"content":"        public boolean isRecordListDisplayed() {","lastModifiedDate":"2022-10-11"},{"lineNumber":204,"author":{"gitId":"EiffelLKF"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-11"},{"lineNumber":205,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-11"},{"lineNumber":206,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":207,"author":{"gitId":"EiffelLKF"},"content":"        @Override","lastModifiedDate":"2022-10-11"},{"lineNumber":208,"author":{"gitId":"EiffelLKF"},"content":"        public void setPersonWithRecords(Person person) {","lastModifiedDate":"2022-10-11"},{"lineNumber":209,"author":{"gitId":"EiffelLKF"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-11"},{"lineNumber":210,"author":{"gitId":"EiffelLKF"},"content":"        };","lastModifiedDate":"2022-10-11"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":214,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":215,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2018-08-07"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2018-08-07"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":221,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2018-08-07"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":226,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":227,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":232,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":233,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2017-05-12"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":239,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":240,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-08"},{"lineNumber":245,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":246,"author":{"gitId":"-"},"content":"            personsAdded.add(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":249,"author":{"gitId":"anthonyhoth"},"content":"        @Override","lastModifiedDate":"2022-10-25"},{"lineNumber":250,"author":{"gitId":"anthonyhoth"},"content":"        public boolean hasSimilarName(Person person) {","lastModifiedDate":"2022-10-25"},{"lineNumber":251,"author":{"gitId":"anthonyhoth"},"content":"            requireNonNull(person);","lastModifiedDate":"2022-10-25"},{"lineNumber":252,"author":{"gitId":"anthonyhoth"},"content":"            return personsAdded.stream().anyMatch(person::hasSimilarName);","lastModifiedDate":"2022-10-25"},{"lineNumber":253,"author":{"gitId":"anthonyhoth"},"content":"        }","lastModifiedDate":"2022-10-25"},{"lineNumber":254,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-04"},{"lineNumber":257,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2017-05-04"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":260,"author":{"gitId":"EiffelLKF"},"content":"        @Override","lastModifiedDate":"2022-10-11"},{"lineNumber":261,"author":{"gitId":"EiffelLKF"},"content":"        public boolean isRecordListDisplayed() {","lastModifiedDate":"2022-10-11"},{"lineNumber":262,"author":{"gitId":"EiffelLKF"},"content":"            return false;","lastModifiedDate":"2022-10-11"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":266,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-10-11"}],"authorContributionMap":{"anthonyhoth":21,"marclzh":6,"hanwenlai":3,"LJXSean":10,"EiffelLKF":30,"-":196}},{"path":"src/test/java/seedu/address/logic/commands/AddRecordCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"EiffelLKF"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-12"},{"lineNumber":2,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":3,"author":{"gitId":"EiffelLKF"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-12"},{"lineNumber":4,"author":{"gitId":"EiffelLKF"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-12"},{"lineNumber":5,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.logic.commands.AddRecordCommand.MESSAGE_DUPLICATE_RECORD;","lastModifiedDate":"2022-10-12"},{"lineNumber":6,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.logic.commands.AddRecordCommand.MESSAGE_SUCCESS;","lastModifiedDate":"2022-10-12"},{"lineNumber":7,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-10-12"},{"lineNumber":8,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-12"},{"lineNumber":9,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;","lastModifiedDate":"2022-10-12"},{"lineNumber":10,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.testutil.TypicalPersons.RECORD1;","lastModifiedDate":"2022-10-12"},{"lineNumber":11,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.testutil.TypicalPersons.RECORD2;","lastModifiedDate":"2022-10-12"},{"lineNumber":12,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-12"},{"lineNumber":13,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":14,"author":{"gitId":"EiffelLKF"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-12"},{"lineNumber":15,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":16,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-12"},{"lineNumber":17,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-10-12"},{"lineNumber":18,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-10-12"},{"lineNumber":19,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":20,"author":{"gitId":"EiffelLKF"},"content":"/**","lastModifiedDate":"2022-10-12"},{"lineNumber":21,"author":{"gitId":"EiffelLKF"},"content":" * Contains integration tests (interaction with the Model) for {@code AddRecordCommand}.","lastModifiedDate":"2022-10-12"},{"lineNumber":22,"author":{"gitId":"EiffelLKF"},"content":" */","lastModifiedDate":"2022-10-12"},{"lineNumber":23,"author":{"gitId":"EiffelLKF"},"content":"public class AddRecordCommandTest {","lastModifiedDate":"2022-10-12"},{"lineNumber":24,"author":{"gitId":"EiffelLKF"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-12"},{"lineNumber":25,"author":{"gitId":"EiffelLKF"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-12"},{"lineNumber":26,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":27,"author":{"gitId":"EiffelLKF"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":28,"author":{"gitId":"EiffelLKF"},"content":"    public void equals() {","lastModifiedDate":"2022-10-12"},{"lineNumber":29,"author":{"gitId":"EiffelLKF"},"content":"        AddRecordCommand addFirstCommand \u003d new AddRecordCommand(RECORD1);","lastModifiedDate":"2022-10-12"},{"lineNumber":30,"author":{"gitId":"EiffelLKF"},"content":"        AddRecordCommand addSecondCommand \u003d new AddRecordCommand(RECORD2);","lastModifiedDate":"2022-10-12"},{"lineNumber":31,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":32,"author":{"gitId":"EiffelLKF"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-10-12"},{"lineNumber":33,"author":{"gitId":"EiffelLKF"},"content":"        assertTrue(addFirstCommand.equals(addFirstCommand));","lastModifiedDate":"2022-10-12"},{"lineNumber":34,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":35,"author":{"gitId":"EiffelLKF"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-10-12"},{"lineNumber":36,"author":{"gitId":"EiffelLKF"},"content":"        AddRecordCommand addFirstCommandCopy \u003d new AddRecordCommand(RECORD1);","lastModifiedDate":"2022-10-12"},{"lineNumber":37,"author":{"gitId":"EiffelLKF"},"content":"        assertTrue(addFirstCommand.equals(addFirstCommandCopy));","lastModifiedDate":"2022-10-12"},{"lineNumber":38,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":39,"author":{"gitId":"EiffelLKF"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2022-10-12"},{"lineNumber":40,"author":{"gitId":"EiffelLKF"},"content":"        assertFalse(addFirstCommand.equals(1));","lastModifiedDate":"2022-10-12"},{"lineNumber":41,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":42,"author":{"gitId":"EiffelLKF"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-10-12"},{"lineNumber":43,"author":{"gitId":"EiffelLKF"},"content":"        assertFalse(addFirstCommand.equals(null));","lastModifiedDate":"2022-10-12"},{"lineNumber":44,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":45,"author":{"gitId":"EiffelLKF"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2022-10-12"},{"lineNumber":46,"author":{"gitId":"EiffelLKF"},"content":"        assertFalse(addFirstCommand.equals(addSecondCommand));","lastModifiedDate":"2022-10-12"},{"lineNumber":47,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":48,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":49,"author":{"gitId":"EiffelLKF"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":50,"author":{"gitId":"EiffelLKF"},"content":"    public void execute_duplicateRecord_exceptionThrown() {","lastModifiedDate":"2022-10-12"},{"lineNumber":51,"author":{"gitId":"EiffelLKF"},"content":"        model.setFilteredRecordList(GEORGE); // Typical Person with existing RECORD1 in record list","lastModifiedDate":"2022-10-12"},{"lineNumber":52,"author":{"gitId":"EiffelLKF"},"content":"        model.setRecordListDisplayed(true);","lastModifiedDate":"2022-10-12"},{"lineNumber":53,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":54,"author":{"gitId":"EiffelLKF"},"content":"        AddRecordCommand addRecordCommand \u003d new AddRecordCommand(RECORD1);","lastModifiedDate":"2022-10-12"},{"lineNumber":55,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":56,"author":{"gitId":"EiffelLKF"},"content":"        assertCommandFailure(addRecordCommand, model, MESSAGE_DUPLICATE_RECORD);","lastModifiedDate":"2022-10-12"},{"lineNumber":57,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":58,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":59,"author":{"gitId":"EiffelLKF"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":60,"author":{"gitId":"EiffelLKF"},"content":"    public void execute_addRecord_success() {","lastModifiedDate":"2022-10-12"},{"lineNumber":61,"author":{"gitId":"EiffelLKF"},"content":"        model.setFilteredRecordList(GEORGE); // Typical Person with existing RECORD1 in record list","lastModifiedDate":"2022-10-12"},{"lineNumber":62,"author":{"gitId":"EiffelLKF"},"content":"        model.setRecordListDisplayed(true);","lastModifiedDate":"2022-10-12"},{"lineNumber":63,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":64,"author":{"gitId":"EiffelLKF"},"content":"        expectedModel.setFilteredRecordList(GEORGE); // Typical Person with existing RECORD1 in record list","lastModifiedDate":"2022-10-12"},{"lineNumber":65,"author":{"gitId":"EiffelLKF"},"content":"        expectedModel.setRecordListDisplayed(true);","lastModifiedDate":"2022-10-12"},{"lineNumber":66,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":67,"author":{"gitId":"EiffelLKF"},"content":"        AddRecordCommand addRecordCommand \u003d new AddRecordCommand(RECORD2);","lastModifiedDate":"2022-10-12"},{"lineNumber":68,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":69,"author":{"gitId":"EiffelLKF"},"content":"        assertCommandSuccess(addRecordCommand, model, String.format(MESSAGE_SUCCESS, RECORD2), expectedModel);","lastModifiedDate":"2022-10-12"},{"lineNumber":70,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":71,"author":{"gitId":"EiffelLKF"},"content":"}","lastModifiedDate":"2022-10-12"}],"authorContributionMap":{"EiffelLKF":71}},{"path":"src/test/java/seedu/address/logic/commands/ClearAppointmentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-21"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-21"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-21"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":"import static seedu.address.logic.commands.Command.MESSAGE_ADDRESS_BOOK_COMMAND_PREREQUISITE;","lastModifiedDate":"2022-10-21"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-10-21"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-21"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2022-10-21"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"import static seedu.address.testutil.TypicalIndexes.FIRST_INDEX;","lastModifiedDate":"2022-10-21"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"import static seedu.address.testutil.TypicalIndexes.SECOND_INDEX;","lastModifiedDate":"2022-10-21"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2022-10-21"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-21"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-21"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-21"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-10-21"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-21"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-21"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2022-10-21"},{"lineNumber":24,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":25,"author":{"gitId":"marclzh"},"content":"class ClearAppointmentCommandTest {","lastModifiedDate":"2022-10-21"},{"lineNumber":26,"author":{"gitId":"marclzh"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-21"},{"lineNumber":27,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":28,"author":{"gitId":"marclzh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":29,"author":{"gitId":"marclzh"},"content":"    void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2022-10-21"},{"lineNumber":30,"author":{"gitId":"marclzh"},"content":"        Person personToClearAppointment \u003d model.getFilteredPersonList().get(FIRST_INDEX.getZeroBased());","lastModifiedDate":"2022-10-21"},{"lineNumber":31,"author":{"gitId":"marclzh"},"content":"        ClearAppointmentCommand clearAppointmentCommand \u003d new ClearAppointmentCommand(FIRST_INDEX);","lastModifiedDate":"2022-10-21"},{"lineNumber":32,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":33,"author":{"gitId":"marclzh"},"content":"        String expectedMessage \u003d ClearAppointmentCommand.MESSAGE_SUCCESS;","lastModifiedDate":"2022-10-21"},{"lineNumber":34,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":35,"author":{"gitId":"marclzh"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-21"},{"lineNumber":36,"author":{"gitId":"marclzh"},"content":"        Person expectedPersonToAddAppointment \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":37,"author":{"gitId":"marclzh"},"content":"                new PersonBuilder(personToClearAppointment)","lastModifiedDate":"2022-10-21"},{"lineNumber":38,"author":{"gitId":"marclzh"},"content":"                        .withAppointment(Appointment.NO_APPOINTMENT_SCHEDULED).build();","lastModifiedDate":"2022-10-21"},{"lineNumber":39,"author":{"gitId":"marclzh"},"content":"        expectedModel.setPerson(expectedModel.getFilteredPersonList().get(0), expectedPersonToAddAppointment);","lastModifiedDate":"2022-10-21"},{"lineNumber":40,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":41,"author":{"gitId":"marclzh"},"content":"        assertCommandSuccess(clearAppointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-21"},{"lineNumber":42,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":43,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":44,"author":{"gitId":"marclzh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":45,"author":{"gitId":"marclzh"},"content":"    void execute_validIndexFilteredList_success() {","lastModifiedDate":"2022-10-21"},{"lineNumber":46,"author":{"gitId":"marclzh"},"content":"        showPersonAtIndex(model, FIRST_INDEX);","lastModifiedDate":"2022-10-21"},{"lineNumber":47,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":48,"author":{"gitId":"marclzh"},"content":"        Person personToClearAppointment \u003d model.getFilteredPersonList().get(FIRST_INDEX.getZeroBased());","lastModifiedDate":"2022-10-21"},{"lineNumber":49,"author":{"gitId":"marclzh"},"content":"        ClearAppointmentCommand clearAppointmentCommand \u003d new ClearAppointmentCommand(FIRST_INDEX);","lastModifiedDate":"2022-10-21"},{"lineNumber":50,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":51,"author":{"gitId":"marclzh"},"content":"        String expectedMessage \u003d ClearAppointmentCommand.MESSAGE_SUCCESS;","lastModifiedDate":"2022-10-21"},{"lineNumber":52,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":53,"author":{"gitId":"marclzh"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-21"},{"lineNumber":54,"author":{"gitId":"marclzh"},"content":"        Person expectedPersonToAddAppointment \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":55,"author":{"gitId":"marclzh"},"content":"                new PersonBuilder(personToClearAppointment)","lastModifiedDate":"2022-10-21"},{"lineNumber":56,"author":{"gitId":"marclzh"},"content":"                        .withAppointment(Appointment.NO_APPOINTMENT_SCHEDULED).build();","lastModifiedDate":"2022-10-21"},{"lineNumber":57,"author":{"gitId":"marclzh"},"content":"        expectedModel.setPerson(expectedModel.getFilteredPersonList().get(0), expectedPersonToAddAppointment);","lastModifiedDate":"2022-10-21"},{"lineNumber":58,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":59,"author":{"gitId":"marclzh"},"content":"        assertCommandSuccess(clearAppointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-21"},{"lineNumber":60,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":61,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":62,"author":{"gitId":"marclzh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":63,"author":{"gitId":"marclzh"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {","lastModifiedDate":"2022-10-21"},{"lineNumber":64,"author":{"gitId":"marclzh"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2022-10-21"},{"lineNumber":65,"author":{"gitId":"marclzh"},"content":"        ClearAppointmentCommand clearAppointmentCommand \u003d new ClearAppointmentCommand(outOfBoundIndex);","lastModifiedDate":"2022-10-21"},{"lineNumber":66,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":67,"author":{"gitId":"marclzh"},"content":"        assertCommandFailure(clearAppointmentCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-21"},{"lineNumber":68,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":69,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":70,"author":{"gitId":"marclzh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":71,"author":{"gitId":"marclzh"},"content":"    public void execute_clearAppointmentInRecordList_failure() {","lastModifiedDate":"2022-10-21"},{"lineNumber":72,"author":{"gitId":"marclzh"},"content":"        ClearAppointmentCommand clearAppointmentCommand \u003d new ClearAppointmentCommand(FIRST_INDEX);","lastModifiedDate":"2022-10-21"},{"lineNumber":73,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":74,"author":{"gitId":"marclzh"},"content":"        model.setFilteredRecordList(BENSON);","lastModifiedDate":"2022-10-21"},{"lineNumber":75,"author":{"gitId":"marclzh"},"content":"        model.setRecordListDisplayed(true);","lastModifiedDate":"2022-10-21"},{"lineNumber":76,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":77,"author":{"gitId":"marclzh"},"content":"        assertCommandFailure(clearAppointmentCommand, model, MESSAGE_ADDRESS_BOOK_COMMAND_PREREQUISITE);","lastModifiedDate":"2022-10-21"},{"lineNumber":78,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":79,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":80,"author":{"gitId":"marclzh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":81,"author":{"gitId":"marclzh"},"content":"    void equals() {","lastModifiedDate":"2022-10-21"},{"lineNumber":82,"author":{"gitId":"marclzh"},"content":"        ClearAppointmentCommand testFirstClearAppointmentCommand \u003d new ClearAppointmentCommand(FIRST_INDEX);","lastModifiedDate":"2022-10-21"},{"lineNumber":83,"author":{"gitId":"marclzh"},"content":"        ClearAppointmentCommand testSecondClearAppointmentCommand \u003d new ClearAppointmentCommand(SECOND_INDEX);","lastModifiedDate":"2022-10-21"},{"lineNumber":84,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":85,"author":{"gitId":"marclzh"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-10-21"},{"lineNumber":86,"author":{"gitId":"marclzh"},"content":"        assertTrue(testFirstClearAppointmentCommand.equals(testFirstClearAppointmentCommand));","lastModifiedDate":"2022-10-21"},{"lineNumber":87,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":88,"author":{"gitId":"marclzh"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-10-21"},{"lineNumber":89,"author":{"gitId":"marclzh"},"content":"        ClearAppointmentCommand testFirstClearAppointmentCommandCopy \u003d new ClearAppointmentCommand(FIRST_INDEX);","lastModifiedDate":"2022-10-21"},{"lineNumber":90,"author":{"gitId":"marclzh"},"content":"        assertTrue(testFirstClearAppointmentCommand.equals(testFirstClearAppointmentCommand));","lastModifiedDate":"2022-10-21"},{"lineNumber":91,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":92,"author":{"gitId":"marclzh"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2022-10-21"},{"lineNumber":93,"author":{"gitId":"marclzh"},"content":"        assertFalse(testFirstClearAppointmentCommand.equals(1));","lastModifiedDate":"2022-10-21"},{"lineNumber":94,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":95,"author":{"gitId":"marclzh"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-10-21"},{"lineNumber":96,"author":{"gitId":"marclzh"},"content":"        assertFalse(testFirstClearAppointmentCommand.equals(null));","lastModifiedDate":"2022-10-21"},{"lineNumber":97,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":98,"author":{"gitId":"marclzh"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2022-10-21"},{"lineNumber":99,"author":{"gitId":"marclzh"},"content":"        assertFalse(testFirstClearAppointmentCommand.equals(testSecondClearAppointmentCommand));","lastModifiedDate":"2022-10-21"},{"lineNumber":100,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":101,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-10-21"}],"authorContributionMap":{"marclzh":101}},{"path":"src/test/java/seedu/address/logic/commands/ClearRecordCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-12"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"import static seedu.address.logic.commands.Command.MESSAGE_RECORD_COMMAND_PREREQUISITE;","lastModifiedDate":"2022-10-12"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-10-12"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-12"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2022-10-12"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2022-10-12"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-12"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-12"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-12"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-10-12"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-10-12"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"class ClearRecordCommandTest {","lastModifiedDate":"2022-10-12"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"    public void execute_clearEmptyRecordsWithoutListing_failure() {","lastModifiedDate":"2022-10-12"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2022-10-12"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"        assertCommandFailure(new ClearRecordCommand(), model, MESSAGE_RECORD_COMMAND_PREREQUISITE);","lastModifiedDate":"2022-10-12"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":24,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":25,"author":{"gitId":"marclzh"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":26,"author":{"gitId":"marclzh"},"content":"    public void execute_clearRecordsWithoutListing_failure() {","lastModifiedDate":"2022-10-12"},{"lineNumber":27,"author":{"gitId":"marclzh"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-12"},{"lineNumber":28,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":29,"author":{"gitId":"marclzh"},"content":"        assertCommandFailure(new ClearRecordCommand(), model, MESSAGE_RECORD_COMMAND_PREREQUISITE);","lastModifiedDate":"2022-10-12"},{"lineNumber":30,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":31,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":32,"author":{"gitId":"marclzh"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":33,"author":{"gitId":"marclzh"},"content":"    public void execute_clearRecords_success() {","lastModifiedDate":"2022-10-12"},{"lineNumber":34,"author":{"gitId":"marclzh"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-12"},{"lineNumber":35,"author":{"gitId":"marclzh"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-12"},{"lineNumber":36,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":37,"author":{"gitId":"marclzh"},"content":"        model.setFilteredRecordList(BENSON);","lastModifiedDate":"2022-10-12"},{"lineNumber":38,"author":{"gitId":"marclzh"},"content":"        model.setRecordListDisplayed(true);","lastModifiedDate":"2022-10-12"},{"lineNumber":39,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":40,"author":{"gitId":"marclzh"},"content":"        expectedModel.setFilteredRecordList(BENSON);","lastModifiedDate":"2022-10-12"},{"lineNumber":41,"author":{"gitId":"marclzh"},"content":"        expectedModel.setRecordListDisplayed(true);","lastModifiedDate":"2022-10-12"},{"lineNumber":42,"author":{"gitId":"marclzh"},"content":"        expectedModel.clearRecords();","lastModifiedDate":"2022-10-12"},{"lineNumber":43,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":44,"author":{"gitId":"marclzh"},"content":"        assertCommandSuccess(new ClearRecordCommand(), model, ClearRecordCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2022-10-12"},{"lineNumber":45,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":46,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":47,"author":{"gitId":"marclzh"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":48,"author":{"gitId":"marclzh"},"content":"    public void execute_clearRecordsEmptyRecords_success() {","lastModifiedDate":"2022-10-12"},{"lineNumber":49,"author":{"gitId":"marclzh"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-12"},{"lineNumber":50,"author":{"gitId":"marclzh"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-12"},{"lineNumber":51,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":52,"author":{"gitId":"marclzh"},"content":"        model.setFilteredRecordList(ALICE);","lastModifiedDate":"2022-10-12"},{"lineNumber":53,"author":{"gitId":"marclzh"},"content":"        model.setRecordListDisplayed(true);","lastModifiedDate":"2022-10-12"},{"lineNumber":54,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":55,"author":{"gitId":"marclzh"},"content":"        expectedModel.setFilteredRecordList(ALICE);","lastModifiedDate":"2022-10-12"},{"lineNumber":56,"author":{"gitId":"marclzh"},"content":"        expectedModel.setRecordListDisplayed(true);","lastModifiedDate":"2022-10-12"},{"lineNumber":57,"author":{"gitId":"marclzh"},"content":"        expectedModel.clearRecords();","lastModifiedDate":"2022-10-12"},{"lineNumber":58,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":59,"author":{"gitId":"marclzh"},"content":"        assertCommandSuccess(new ClearRecordCommand(), model, ClearRecordCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2022-10-12"},{"lineNumber":60,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":61,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-10-12"}],"authorContributionMap":{"marclzh":61}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2022-10-18"},{"lineNumber":6,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDATE;","lastModifiedDate":"2022-10-19"},{"lineNumber":7,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2022-10-18"},{"lineNumber":11,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RECORD;","lastModifiedDate":"2022-10-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-10-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2018-01-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-07-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":25,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2022-10-17"},{"lineNumber":26,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.RecordContainsKeywordsPredicate;","lastModifiedDate":"2022-10-17"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-07-05"},{"lineNumber":28,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.testutil.EditRecordDescriptorBuilder;","lastModifiedDate":"2022-10-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":37,"author":{"gitId":"hanwenlai"},"content":"    public static final String VALID_BIRTHDATE_AMY \u003d \"06-06-1966\";","lastModifiedDate":"2022-10-19"},{"lineNumber":38,"author":{"gitId":"hanwenlai"},"content":"    public static final String VALID_BIRTHDATE_BOB \u003d \"08-08-1988\";","lastModifiedDate":"2022-10-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":45,"author":{"gitId":"anthonyhoth"},"content":"    public static final String VALID_ADDRESS_ALICE \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2022-10-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";","lastModifiedDate":"2017-07-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";","lastModifiedDate":"2017-07-05"},{"lineNumber":48,"author":{"gitId":"hanwenlai"},"content":"    public static final String VALID_RECORD_DATE \u003d \"02-03-2020 1230\";","lastModifiedDate":"2022-10-27"},{"lineNumber":49,"author":{"gitId":"anthonyhoth"},"content":"    public static final String VALID_RECORD_DATE_2 \u003d \"01-05-2022 1700\";","lastModifiedDate":"2022-10-18"},{"lineNumber":50,"author":{"gitId":"EiffelLKF"},"content":"    public static final String VALID_RECORD_DATA \u003d \"fever\";","lastModifiedDate":"2022-10-12"},{"lineNumber":51,"author":{"gitId":"anthonyhoth"},"content":"    public static final String VALID_RECORD_DATA_2 \u003d \"abdominal pain\";","lastModifiedDate":"2022-10-18"},{"lineNumber":52,"author":{"gitId":"EiffelLKF"},"content":"    public static final String VALID_RECORD_MEDICATION \u003d \"Paracetamol 250mg\";","lastModifiedDate":"2022-10-17"},{"lineNumber":53,"author":{"gitId":"marclzh"},"content":"    public static final String VALID_APPOINTMENT_DATE_AMY \u003d \"01-01-2024 1200\";","lastModifiedDate":"2022-10-26"},{"lineNumber":54,"author":{"gitId":"marclzh"},"content":"    public static final String VALID_APPOINTMENT_DATE_BOB \u003d \"02-02-2024 1300\";","lastModifiedDate":"2022-10-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":58,"author":{"gitId":"hanwenlai"},"content":"    public static final String BIRTHDATE_DESC_AMY \u003d \" \" + PREFIX_BIRTHDATE + VALID_BIRTHDATE_AMY;","lastModifiedDate":"2022-10-19"},{"lineNumber":59,"author":{"gitId":"hanwenlai"},"content":"    public static final String BIRTHDATE_DESC_BOB \u003d \" \" + PREFIX_BIRTHDATE + VALID_BIRTHDATE_BOB;","lastModifiedDate":"2022-10-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":68,"author":{"gitId":"EiffelLKF"},"content":"    public static final String RECORD_DATE_DESC \u003d \" \" + PREFIX_DATE + VALID_RECORD_DATE;","lastModifiedDate":"2022-10-12"},{"lineNumber":69,"author":{"gitId":"EiffelLKF"},"content":"    public static final String RECORD_DATA_DESC \u003d \" \" + PREFIX_RECORD + VALID_RECORD_DATA;","lastModifiedDate":"2022-10-12"},{"lineNumber":70,"author":{"gitId":"marclzh"},"content":"    public static final String APPOINTMENT_DATE_AMY \u003d \" \" + PREFIX_DATE + VALID_APPOINTMENT_DATE_AMY;","lastModifiedDate":"2022-10-21"},{"lineNumber":71,"author":{"gitId":"marclzh"},"content":"    public static final String APPOINTMENT_DATE_BOB \u003d \" \" + PREFIX_DATE + VALID_APPOINTMENT_DATE_BOB;","lastModifiedDate":"2022-10-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":74,"author":{"gitId":"hanwenlai"},"content":"    public static final String INVALID_BIRTHDATE_DESC \u003d \" \" + PREFIX_BIRTHDATE + \"99-99-99\"; // Incorrect date format","lastModifiedDate":"2022-10-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses","lastModifiedDate":"2017-07-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2017-07-05"},{"lineNumber":79,"author":{"gitId":"EiffelLKF"},"content":"    public static final String INVALID_RECORD_DATE_DESC \u003d \" \" + PREFIX_DATE + \"99-99-99\"; // Incorrect date format","lastModifiedDate":"2022-10-12"},{"lineNumber":80,"author":{"gitId":"EiffelLKF"},"content":"    public static final String INVALID_RECORD_DATA_DESC \u003d \" \" + PREFIX_RECORD + \" \"; // Cannot be blank","lastModifiedDate":"2022-10-12"},{"lineNumber":81,"author":{"gitId":"marclzh"},"content":"    public static final String INVALID_APPOINTMENT_DATE \u003d \"\" + PREFIX_DATE + \"02-02-2023 3000\"; // incorrect time format","lastModifiedDate":"2022-10-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":88,"author":{"gitId":"anthonyhoth"},"content":"    public static final EditRecordCommand.EditRecordDescriptor DESC_RECORD;","lastModifiedDate":"2022-10-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":91,"author":{"gitId":"hanwenlai"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).withBirthdate(VALID_BIRTHDATE_AMY)","lastModifiedDate":"2022-10-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":94,"author":{"gitId":"hanwenlai"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).withBirthdate(VALID_BIRTHDATE_BOB)","lastModifiedDate":"2022-10-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":97,"author":{"gitId":"anthonyhoth"},"content":"        DESC_RECORD \u003d new EditRecordDescriptorBuilder().withDate(VALID_RECORD_DATE)","lastModifiedDate":"2022-10-18"},{"lineNumber":98,"author":{"gitId":"anthonyhoth"},"content":"                .withData(VALID_RECORD_DATA).build();","lastModifiedDate":"2022-10-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2019-01-25"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2018-01-10"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());","lastModifiedDate":"2017-06-05"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2018-01-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2018-01-31"},{"lineNumber":151,"author":{"gitId":"anthonyhoth"},"content":"        final String[] splitName \u003d person.getName().properCaseName.split(\"\\\\s+\");","lastModifiedDate":"2022-10-25"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2017-07-20"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":157,"author":{"gitId":"anthonyhoth"},"content":"    /**","lastModifiedDate":"2022-10-12"},{"lineNumber":158,"author":{"gitId":"anthonyhoth"},"content":"     * Updates {@code model}\u0027s filtered record list to show only the record at the given {@code targetIndex} in the","lastModifiedDate":"2022-10-12"},{"lineNumber":159,"author":{"gitId":"anthonyhoth"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2022-10-12"},{"lineNumber":160,"author":{"gitId":"anthonyhoth"},"content":"     */","lastModifiedDate":"2022-10-12"},{"lineNumber":161,"author":{"gitId":"anthonyhoth"},"content":"    public static void showRecordAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2022-10-12"},{"lineNumber":162,"author":{"gitId":"anthonyhoth"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredRecordList().size());","lastModifiedDate":"2022-10-12"},{"lineNumber":163,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":164,"author":{"gitId":"anthonyhoth"},"content":"        Record record \u003d model.getFilteredRecordList().get(targetIndex.getZeroBased());","lastModifiedDate":"2022-10-12"},{"lineNumber":165,"author":{"gitId":"anthonyhoth"},"content":"        final String[] splitRecord \u003d record.record.split(\" \");","lastModifiedDate":"2022-10-12"},{"lineNumber":166,"author":{"gitId":"LJXSean"},"content":"        model.updateFilteredRecordList(new RecordContainsKeywordsPredicate(","lastModifiedDate":"2022-10-26"},{"lineNumber":167,"author":{"gitId":"LJXSean"},"content":"                Arrays.asList(splitRecord[0]), Arrays.asList(), \"\"));","lastModifiedDate":"2022-10-26"},{"lineNumber":168,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":169,"author":{"gitId":"anthonyhoth"},"content":"        assertEquals(1, model.getFilteredRecordList().size());","lastModifiedDate":"2022-10-12"},{"lineNumber":170,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":171,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"anthonyhoth":20,"marclzh":5,"hanwenlai":11,"LJXSean":2,"EiffelLKF":8,"-":125}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2018-01-31"},{"lineNumber":8,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.testutil.TypicalIndexes.FIRST_INDEX;","lastModifiedDate":"2022-10-12"},{"lineNumber":9,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.testutil.TypicalIndexes.SECOND_INDEX;","lastModifiedDate":"2022-10-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2020-12-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}.","lastModifiedDate":"2018-01-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":31,"author":{"gitId":"anthonyhoth"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(FIRST_INDEX.getZeroBased());","lastModifiedDate":"2022-10-12"},{"lineNumber":32,"author":{"gitId":"anthonyhoth"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(FIRST_INDEX);","lastModifiedDate":"2022-10-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-06-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"anthonyhoth"},"content":"        showPersonAtIndex(model, FIRST_INDEX);","lastModifiedDate":"2022-10-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":54,"author":{"gitId":"anthonyhoth"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(FIRST_INDEX.getZeroBased());","lastModifiedDate":"2022-10-12"},{"lineNumber":55,"author":{"gitId":"anthonyhoth"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(FIRST_INDEX);","lastModifiedDate":"2022-10-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":68,"author":{"gitId":"anthonyhoth"},"content":"        showPersonAtIndex(model, FIRST_INDEX);","lastModifiedDate":"2022-10-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":70,"author":{"gitId":"anthonyhoth"},"content":"        Index outOfBoundIndex \u003d SECOND_INDEX;","lastModifiedDate":"2022-10-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-06-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-06-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"anthonyhoth"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(FIRST_INDEX);","lastModifiedDate":"2022-10-12"},{"lineNumber":82,"author":{"gitId":"anthonyhoth"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(SECOND_INDEX);","lastModifiedDate":"2022-10-12"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"anthonyhoth"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(FIRST_INDEX);","lastModifiedDate":"2022-10-12"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {","lastModifiedDate":"2017-06-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);","lastModifiedDate":"2017-06-12"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());","lastModifiedDate":"2018-02-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"anthonyhoth":12,"-":97}},{"path":"src/test/java/seedu/address/logic/commands/DeleteRecordCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"anthonyhoth"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-12"},{"lineNumber":2,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":3,"author":{"gitId":"anthonyhoth"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-12"},{"lineNumber":4,"author":{"gitId":"anthonyhoth"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-12"},{"lineNumber":5,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-10-12"},{"lineNumber":6,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-12"},{"lineNumber":7,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.testutil.TestUtil.prepareModel;","lastModifiedDate":"2022-10-13"},{"lineNumber":8,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.testutil.TypicalIndexes.FIRST_INDEX;","lastModifiedDate":"2022-10-12"},{"lineNumber":9,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.testutil.TypicalIndexes.SECOND_INDEX;","lastModifiedDate":"2022-10-12"},{"lineNumber":10,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":11,"author":{"gitId":"anthonyhoth"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-12"},{"lineNumber":12,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":13,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-12"},{"lineNumber":14,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-12"},{"lineNumber":15,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-12"},{"lineNumber":16,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2022-10-17"},{"lineNumber":17,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":18,"author":{"gitId":"anthonyhoth"},"content":"/**","lastModifiedDate":"2022-10-12"},{"lineNumber":19,"author":{"gitId":"anthonyhoth"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2022-10-12"},{"lineNumber":20,"author":{"gitId":"anthonyhoth"},"content":" * {@code DeleteRecordCommand}.","lastModifiedDate":"2022-10-12"},{"lineNumber":21,"author":{"gitId":"anthonyhoth"},"content":" */","lastModifiedDate":"2022-10-12"},{"lineNumber":22,"author":{"gitId":"anthonyhoth"},"content":"public class DeleteRecordCommandTest {","lastModifiedDate":"2022-10-12"},{"lineNumber":23,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":24,"author":{"gitId":"anthonyhoth"},"content":"    private Model model \u003d prepareModel();","lastModifiedDate":"2022-10-13"},{"lineNumber":25,"author":{"gitId":"anthonyhoth"},"content":"    private Model expectedModel \u003d prepareModel();","lastModifiedDate":"2022-10-13"},{"lineNumber":26,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":27,"author":{"gitId":"anthonyhoth"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":28,"author":{"gitId":"anthonyhoth"},"content":"    public void execute_validIndex_success() {","lastModifiedDate":"2022-10-13"},{"lineNumber":29,"author":{"gitId":"anthonyhoth"},"content":"        // Deleting record with valid index","lastModifiedDate":"2022-10-12"},{"lineNumber":30,"author":{"gitId":"anthonyhoth"},"content":"        Record recordToDelete \u003d model.getFilteredRecordList().get(FIRST_INDEX.getZeroBased());","lastModifiedDate":"2022-10-12"},{"lineNumber":31,"author":{"gitId":"anthonyhoth"},"content":"        DeleteRecordCommand deleteRecordCommand \u003d new DeleteRecordCommand(FIRST_INDEX);","lastModifiedDate":"2022-10-12"},{"lineNumber":32,"author":{"gitId":"anthonyhoth"},"content":"        expectedModel.deleteRecord(recordToDelete);","lastModifiedDate":"2022-10-12"},{"lineNumber":33,"author":{"gitId":"anthonyhoth"},"content":"        String expectedMessage \u003d String.format(DeleteRecordCommand.MESSAGE_DELETE_RECORD_SUCCESS, recordToDelete);","lastModifiedDate":"2022-10-12"},{"lineNumber":34,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":35,"author":{"gitId":"anthonyhoth"},"content":"        assertCommandSuccess(deleteRecordCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-12"},{"lineNumber":36,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":37,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":38,"author":{"gitId":"anthonyhoth"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":39,"author":{"gitId":"anthonyhoth"},"content":"    public void execute_invalidIndex_throwsCommandException() {","lastModifiedDate":"2022-10-13"},{"lineNumber":40,"author":{"gitId":"anthonyhoth"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRecordList().size() + 1);","lastModifiedDate":"2022-10-13"},{"lineNumber":41,"author":{"gitId":"anthonyhoth"},"content":"        DeleteRecordCommand deleteRecordCommand \u003d new DeleteRecordCommand(outOfBoundIndex);","lastModifiedDate":"2022-10-12"},{"lineNumber":42,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":43,"author":{"gitId":"anthonyhoth"},"content":"        assertCommandFailure(deleteRecordCommand, model, Messages.MESSAGE_INVALID_RECORD_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-12"},{"lineNumber":44,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":45,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":46,"author":{"gitId":"anthonyhoth"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":47,"author":{"gitId":"anthonyhoth"},"content":"    public void equals() {","lastModifiedDate":"2022-10-12"},{"lineNumber":48,"author":{"gitId":"anthonyhoth"},"content":"        DeleteRecordCommand firstDeleteRecordCommand \u003d new DeleteRecordCommand(FIRST_INDEX);","lastModifiedDate":"2022-10-12"},{"lineNumber":49,"author":{"gitId":"anthonyhoth"},"content":"        DeleteRecordCommand secondDeleteRecordCommand \u003d new DeleteRecordCommand(SECOND_INDEX);","lastModifiedDate":"2022-10-12"},{"lineNumber":50,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":51,"author":{"gitId":"anthonyhoth"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-10-12"},{"lineNumber":52,"author":{"gitId":"anthonyhoth"},"content":"        assertTrue(firstDeleteRecordCommand.equals(firstDeleteRecordCommand));","lastModifiedDate":"2022-10-12"},{"lineNumber":53,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":54,"author":{"gitId":"anthonyhoth"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-10-12"},{"lineNumber":55,"author":{"gitId":"anthonyhoth"},"content":"        DeleteRecordCommand deleteFirstCommandCopy \u003d new DeleteRecordCommand(FIRST_INDEX);","lastModifiedDate":"2022-10-12"},{"lineNumber":56,"author":{"gitId":"anthonyhoth"},"content":"        assertTrue(firstDeleteRecordCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2022-10-12"},{"lineNumber":57,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":58,"author":{"gitId":"anthonyhoth"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2022-10-12"},{"lineNumber":59,"author":{"gitId":"anthonyhoth"},"content":"        assertFalse(firstDeleteRecordCommand.equals(1));","lastModifiedDate":"2022-10-12"},{"lineNumber":60,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":61,"author":{"gitId":"anthonyhoth"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-10-12"},{"lineNumber":62,"author":{"gitId":"anthonyhoth"},"content":"        assertFalse(firstDeleteRecordCommand.equals(null));","lastModifiedDate":"2022-10-12"},{"lineNumber":63,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":64,"author":{"gitId":"anthonyhoth"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2022-10-12"},{"lineNumber":65,"author":{"gitId":"anthonyhoth"},"content":"        assertFalse(firstDeleteRecordCommand.equals(secondDeleteRecordCommand));","lastModifiedDate":"2022-10-12"},{"lineNumber":66,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":67,"author":{"gitId":"anthonyhoth"},"content":"}","lastModifiedDate":"2022-10-12"}],"authorContributionMap":{"anthonyhoth":66,"EiffelLKF":1}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2018-01-31"},{"lineNumber":13,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.testutil.TypicalIndexes.FIRST_INDEX;","lastModifiedDate":"2022-10-12"},{"lineNumber":14,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.testutil.TypicalIndexes.SECOND_INDEX;","lastModifiedDate":"2022-10-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-05-04"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-05-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-04"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2020-12-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class EditCommandTest {","lastModifiedDate":"2017-05-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"anthonyhoth"},"content":"        EditCommand editCommand \u003d new EditCommand(FIRST_INDEX, descriptor);","lastModifiedDate":"2022-10-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":74,"author":{"gitId":"anthonyhoth"},"content":"        EditCommand editCommand \u003d new EditCommand(FIRST_INDEX, new EditPersonDescriptor());","lastModifiedDate":"2022-10-12"},{"lineNumber":75,"author":{"gitId":"anthonyhoth"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(FIRST_INDEX.getZeroBased());","lastModifiedDate":"2022-10-12"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"anthonyhoth"},"content":"        showPersonAtIndex(model, FIRST_INDEX);","lastModifiedDate":"2022-10-12"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":88,"author":{"gitId":"anthonyhoth"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(FIRST_INDEX.getZeroBased());","lastModifiedDate":"2022-10-12"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":90,"author":{"gitId":"anthonyhoth"},"content":"        EditCommand editCommand \u003d new EditCommand(FIRST_INDEX,","lastModifiedDate":"2022-10-12"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":103,"author":{"gitId":"anthonyhoth"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(FIRST_INDEX.getZeroBased());","lastModifiedDate":"2022-10-12"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":105,"author":{"gitId":"anthonyhoth"},"content":"        EditCommand editCommand \u003d new EditCommand(SECOND_INDEX, descriptor);","lastModifiedDate":"2022-10-12"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":112,"author":{"gitId":"anthonyhoth"},"content":"        showPersonAtIndex(model, FIRST_INDEX);","lastModifiedDate":"2022-10-12"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book","lastModifiedDate":"2017-05-18"},{"lineNumber":115,"author":{"gitId":"anthonyhoth"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(SECOND_INDEX.getZeroBased());","lastModifiedDate":"2022-10-12"},{"lineNumber":116,"author":{"gitId":"anthonyhoth"},"content":"        EditCommand editCommand \u003d new EditCommand(FIRST_INDEX,","lastModifiedDate":"2022-10-12"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-05-18"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-22"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * but smaller than size of address book","lastModifiedDate":"2017-05-18"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":137,"author":{"gitId":"anthonyhoth"},"content":"        showPersonAtIndex(model, FIRST_INDEX);","lastModifiedDate":"2022-10-12"},{"lineNumber":138,"author":{"gitId":"anthonyhoth"},"content":"        Index outOfBoundIndex \u003d SECOND_INDEX;","lastModifiedDate":"2022-10-12"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-05-18"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,","lastModifiedDate":"2018-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":150,"author":{"gitId":"anthonyhoth"},"content":"        final EditCommand standardCommand \u003d new EditCommand(FIRST_INDEX, DESC_AMY);","lastModifiedDate":"2022-10-12"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-08"},{"lineNumber":154,"author":{"gitId":"anthonyhoth"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(FIRST_INDEX, copyDescriptor);","lastModifiedDate":"2022-10-12"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-05-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":167,"author":{"gitId":"anthonyhoth"},"content":"        assertFalse(standardCommand.equals(new EditCommand(SECOND_INDEX, DESC_AMY)));","lastModifiedDate":"2022-10-12"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":170,"author":{"gitId":"anthonyhoth"},"content":"        assertFalse(standardCommand.equals(new EditCommand(FIRST_INDEX, DESC_BOB)));","lastModifiedDate":"2022-10-12"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":173,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"anthonyhoth":19,"-":154}},{"path":"src/test/java/seedu/address/logic/commands/EditRecordCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"anthonyhoth"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-18"},{"lineNumber":2,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":3,"author":{"gitId":"anthonyhoth"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-18"},{"lineNumber":4,"author":{"gitId":"anthonyhoth"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_RECORD;","lastModifiedDate":"2022-10-18"},{"lineNumber":6,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RECORD_DATA;","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RECORD_DATE;","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showRecordAtIndex;","lastModifiedDate":"2022-10-18"},{"lineNumber":11,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.testutil.TestUtil.prepareModel;","lastModifiedDate":"2022-10-18"},{"lineNumber":12,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.testutil.TypicalIndexes.FIRST_INDEX;","lastModifiedDate":"2022-10-18"},{"lineNumber":13,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.testutil.TypicalIndexes.SECOND_INDEX;","lastModifiedDate":"2022-10-18"},{"lineNumber":14,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":15,"author":{"gitId":"anthonyhoth"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-18"},{"lineNumber":16,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":17,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-18"},{"lineNumber":18,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.logic.commands.EditRecordCommand.EditRecordDescriptor;","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-18"},{"lineNumber":20,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2022-10-18"},{"lineNumber":21,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.testutil.EditRecordDescriptorBuilder;","lastModifiedDate":"2022-10-18"},{"lineNumber":22,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.testutil.RecordBuilder;","lastModifiedDate":"2022-10-18"},{"lineNumber":23,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":24,"author":{"gitId":"anthonyhoth"},"content":"/**","lastModifiedDate":"2022-10-18"},{"lineNumber":25,"author":{"gitId":"anthonyhoth"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditRecordCommand.","lastModifiedDate":"2022-10-18"},{"lineNumber":26,"author":{"gitId":"anthonyhoth"},"content":" */","lastModifiedDate":"2022-10-18"},{"lineNumber":27,"author":{"gitId":"anthonyhoth"},"content":"public class EditRecordCommandTest {","lastModifiedDate":"2022-10-18"},{"lineNumber":28,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":29,"author":{"gitId":"anthonyhoth"},"content":"    private Model model \u003d prepareModel();","lastModifiedDate":"2022-10-18"},{"lineNumber":30,"author":{"gitId":"anthonyhoth"},"content":"    private Model expectedModel \u003d prepareModel();","lastModifiedDate":"2022-10-18"},{"lineNumber":31,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":32,"author":{"gitId":"anthonyhoth"},"content":"    @Test","lastModifiedDate":"2022-10-18"},{"lineNumber":33,"author":{"gitId":"anthonyhoth"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2022-10-18"},{"lineNumber":34,"author":{"gitId":"anthonyhoth"},"content":"        Index indexLastRecord \u003d Index.fromOneBased(model.getFilteredRecordList().size());","lastModifiedDate":"2022-10-18"},{"lineNumber":35,"author":{"gitId":"anthonyhoth"},"content":"        Record lastRecord \u003d model.getFilteredRecordList().get(indexLastRecord.getZeroBased());","lastModifiedDate":"2022-10-18"},{"lineNumber":36,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":37,"author":{"gitId":"anthonyhoth"},"content":"        RecordBuilder recordInList \u003d new RecordBuilder(lastRecord);","lastModifiedDate":"2022-10-18"},{"lineNumber":38,"author":{"gitId":"anthonyhoth"},"content":"        Record editedRecord \u003d recordInList.withRecordDate(VALID_RECORD_DATE).withRecordData(VALID_RECORD_DATA).build();","lastModifiedDate":"2022-10-18"},{"lineNumber":39,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":40,"author":{"gitId":"anthonyhoth"},"content":"        EditRecordDescriptor descriptor \u003d new EditRecordDescriptorBuilder()","lastModifiedDate":"2022-10-18"},{"lineNumber":41,"author":{"gitId":"anthonyhoth"},"content":"                .withDate(VALID_RECORD_DATE).withData(VALID_RECORD_DATA).build();","lastModifiedDate":"2022-10-18"},{"lineNumber":42,"author":{"gitId":"anthonyhoth"},"content":"        EditRecordCommand editRecordCommand \u003d new EditRecordCommand(indexLastRecord, descriptor);","lastModifiedDate":"2022-10-18"},{"lineNumber":43,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":44,"author":{"gitId":"anthonyhoth"},"content":"        String expectedMessage \u003d String.format(EditRecordCommand.MESSAGE_EDIT_RECORD_SUCCESS, editedRecord);","lastModifiedDate":"2022-10-18"},{"lineNumber":45,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":46,"author":{"gitId":"LJXSean"},"content":"        expectedModel.setRecord(model.getFilteredRecordList().get(indexLastRecord.getZeroBased()), editedRecord);","lastModifiedDate":"2022-10-19"},{"lineNumber":47,"author":{"gitId":"anthonyhoth"},"content":"        assertCommandSuccess(editRecordCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-18"},{"lineNumber":48,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":49,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":50,"author":{"gitId":"anthonyhoth"},"content":"    @Test","lastModifiedDate":"2022-10-18"},{"lineNumber":51,"author":{"gitId":"anthonyhoth"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2022-10-18"},{"lineNumber":52,"author":{"gitId":"anthonyhoth"},"content":"        EditRecordCommand editRecordCommand \u003d new EditRecordCommand(FIRST_INDEX, new EditRecordDescriptor());","lastModifiedDate":"2022-10-18"},{"lineNumber":53,"author":{"gitId":"anthonyhoth"},"content":"        Record editedRecord \u003d model.getFilteredRecordList().get(FIRST_INDEX.getZeroBased());","lastModifiedDate":"2022-10-18"},{"lineNumber":54,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":55,"author":{"gitId":"anthonyhoth"},"content":"        String expectedMessage \u003d String.format(EditRecordCommand.MESSAGE_EDIT_RECORD_SUCCESS, editedRecord);","lastModifiedDate":"2022-10-18"},{"lineNumber":56,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":57,"author":{"gitId":"anthonyhoth"},"content":"        assertCommandSuccess(editRecordCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-18"},{"lineNumber":58,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":59,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":60,"author":{"gitId":"anthonyhoth"},"content":"    @Test","lastModifiedDate":"2022-10-18"},{"lineNumber":61,"author":{"gitId":"anthonyhoth"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2022-10-18"},{"lineNumber":62,"author":{"gitId":"anthonyhoth"},"content":"        showRecordAtIndex(model, FIRST_INDEX);","lastModifiedDate":"2022-10-18"},{"lineNumber":63,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":64,"author":{"gitId":"anthonyhoth"},"content":"        Record recordInFilteredList \u003d model.getFilteredRecordList().get(FIRST_INDEX.getZeroBased());","lastModifiedDate":"2022-10-18"},{"lineNumber":65,"author":{"gitId":"anthonyhoth"},"content":"        Record editedRecord \u003d new RecordBuilder(recordInFilteredList).withRecordData(VALID_RECORD_DATA).build();","lastModifiedDate":"2022-10-18"},{"lineNumber":66,"author":{"gitId":"anthonyhoth"},"content":"        EditRecordCommand editRecordCommand \u003d new EditRecordCommand(FIRST_INDEX,","lastModifiedDate":"2022-10-18"},{"lineNumber":67,"author":{"gitId":"anthonyhoth"},"content":"                new EditRecordDescriptorBuilder().withData(VALID_RECORD_DATA).build());","lastModifiedDate":"2022-10-18"},{"lineNumber":68,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":69,"author":{"gitId":"anthonyhoth"},"content":"        String expectedMessage \u003d String.format(EditRecordCommand.MESSAGE_EDIT_RECORD_SUCCESS, editedRecord);","lastModifiedDate":"2022-10-18"},{"lineNumber":70,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":71,"author":{"gitId":"anthonyhoth"},"content":"        expectedModel.setRecord(model.getFilteredRecordList().get(0), editedRecord);","lastModifiedDate":"2022-10-18"},{"lineNumber":72,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":73,"author":{"gitId":"anthonyhoth"},"content":"        assertCommandSuccess(editRecordCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-18"},{"lineNumber":74,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":75,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":76,"author":{"gitId":"anthonyhoth"},"content":"    @Test","lastModifiedDate":"2022-10-18"},{"lineNumber":77,"author":{"gitId":"anthonyhoth"},"content":"    public void execute_duplicateRecordUnfilteredList_failure() {","lastModifiedDate":"2022-10-18"},{"lineNumber":78,"author":{"gitId":"anthonyhoth"},"content":"        Record firstRecord \u003d model.getFilteredRecordList().get(FIRST_INDEX.getZeroBased());","lastModifiedDate":"2022-10-18"},{"lineNumber":79,"author":{"gitId":"anthonyhoth"},"content":"        EditRecordDescriptor descriptor \u003d new EditRecordDescriptorBuilder(firstRecord).build();","lastModifiedDate":"2022-10-18"},{"lineNumber":80,"author":{"gitId":"anthonyhoth"},"content":"        EditRecordCommand editRecordCommand \u003d new EditRecordCommand(SECOND_INDEX, descriptor);","lastModifiedDate":"2022-10-18"},{"lineNumber":81,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":82,"author":{"gitId":"anthonyhoth"},"content":"        assertCommandFailure(editRecordCommand, model, EditRecordCommand.MESSAGE_DUPLICATE_RECORD);","lastModifiedDate":"2022-10-18"},{"lineNumber":83,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":84,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":85,"author":{"gitId":"anthonyhoth"},"content":"    @Test","lastModifiedDate":"2022-10-18"},{"lineNumber":86,"author":{"gitId":"anthonyhoth"},"content":"    public void equals() {","lastModifiedDate":"2022-10-18"},{"lineNumber":87,"author":{"gitId":"anthonyhoth"},"content":"        final EditRecordCommand standardCommand \u003d new EditRecordCommand(FIRST_INDEX, DESC_RECORD);","lastModifiedDate":"2022-10-18"},{"lineNumber":88,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":89,"author":{"gitId":"anthonyhoth"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-10-18"},{"lineNumber":90,"author":{"gitId":"anthonyhoth"},"content":"        EditRecordDescriptor copyDescriptor \u003d new EditRecordDescriptor(DESC_RECORD);","lastModifiedDate":"2022-10-18"},{"lineNumber":91,"author":{"gitId":"anthonyhoth"},"content":"        EditRecordCommand commandWithSameValues \u003d new EditRecordCommand(FIRST_INDEX, copyDescriptor);","lastModifiedDate":"2022-10-18"},{"lineNumber":92,"author":{"gitId":"anthonyhoth"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2022-10-18"},{"lineNumber":93,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":94,"author":{"gitId":"anthonyhoth"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-10-18"},{"lineNumber":95,"author":{"gitId":"anthonyhoth"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2022-10-18"},{"lineNumber":96,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":97,"author":{"gitId":"anthonyhoth"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-10-18"},{"lineNumber":98,"author":{"gitId":"anthonyhoth"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2022-10-18"},{"lineNumber":99,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":100,"author":{"gitId":"anthonyhoth"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2022-10-18"},{"lineNumber":101,"author":{"gitId":"anthonyhoth"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2022-10-18"},{"lineNumber":102,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":103,"author":{"gitId":"anthonyhoth"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2022-10-18"},{"lineNumber":104,"author":{"gitId":"anthonyhoth"},"content":"        assertFalse(standardCommand.equals(new EditRecordCommand(SECOND_INDEX, DESC_RECORD)));","lastModifiedDate":"2022-10-18"},{"lineNumber":105,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":106,"author":{"gitId":"anthonyhoth"},"content":"}","lastModifiedDate":"2022-10-18"}],"authorContributionMap":{"anthonyhoth":105,"LJXSean":1}},{"path":"src/test/java/seedu/address/logic/commands/FindRecordCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"LJXSean"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-12"},{"lineNumber":2,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":3,"author":{"gitId":"LJXSean"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-10-12"},{"lineNumber":4,"author":{"gitId":"LJXSean"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-12"},{"lineNumber":5,"author":{"gitId":"LJXSean"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-12"},{"lineNumber":6,"author":{"gitId":"LJXSean"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_RECORDS_LISTED_OVERVIEW;","lastModifiedDate":"2022-10-12"},{"lineNumber":7,"author":{"gitId":"LJXSean"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-12"},{"lineNumber":8,"author":{"gitId":"LJXSean"},"content":"import static seedu.address.testutil.TypicalPersons.RECORD1;","lastModifiedDate":"2022-10-13"},{"lineNumber":9,"author":{"gitId":"LJXSean"},"content":"import static seedu.address.testutil.TypicalPersons.RECORD2;","lastModifiedDate":"2022-10-13"},{"lineNumber":10,"author":{"gitId":"LJXSean"},"content":"import static seedu.address.testutil.TypicalPersons.RECORD3;","lastModifiedDate":"2022-10-13"},{"lineNumber":11,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":12,"author":{"gitId":"LJXSean"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-12"},{"lineNumber":13,"author":{"gitId":"LJXSean"},"content":"import java.util.List;","lastModifiedDate":"2022-10-26"},{"lineNumber":14,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":15,"author":{"gitId":"LJXSean"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-12"},{"lineNumber":16,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":17,"author":{"gitId":"LJXSean"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-12"},{"lineNumber":18,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.RecordContainsKeywordsPredicate;","lastModifiedDate":"2022-10-17"},{"lineNumber":19,"author":{"gitId":"LJXSean"},"content":"import seedu.address.testutil.TestUtil;","lastModifiedDate":"2022-10-13"},{"lineNumber":20,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":21,"author":{"gitId":"LJXSean"},"content":"/**","lastModifiedDate":"2022-10-12"},{"lineNumber":22,"author":{"gitId":"LJXSean"},"content":" * Contains integration tests (interaction with the Model) for {@code FindRecordCommand}.","lastModifiedDate":"2022-10-12"},{"lineNumber":23,"author":{"gitId":"LJXSean"},"content":" */","lastModifiedDate":"2022-10-12"},{"lineNumber":24,"author":{"gitId":"LJXSean"},"content":"public class FindRecordCommandTest {","lastModifiedDate":"2022-10-12"},{"lineNumber":25,"author":{"gitId":"LJXSean"},"content":"    private Model model \u003d TestUtil.prepareModel();","lastModifiedDate":"2022-10-13"},{"lineNumber":26,"author":{"gitId":"LJXSean"},"content":"    private Model expectedModel \u003d TestUtil.prepareModel();","lastModifiedDate":"2022-10-13"},{"lineNumber":27,"author":{"gitId":"LJXSean"},"content":"    private final List\u003cString\u003e emptyList \u003d Arrays.asList();","lastModifiedDate":"2022-10-26"},{"lineNumber":28,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":29,"author":{"gitId":"LJXSean"},"content":"    /**","lastModifiedDate":"2022-10-26"},{"lineNumber":30,"author":{"gitId":"LJXSean"},"content":"     * Parses {@code userInput} into a {@code RecordContainsKeywordsPredicate}.","lastModifiedDate":"2022-10-26"},{"lineNumber":31,"author":{"gitId":"LJXSean"},"content":"     */","lastModifiedDate":"2022-10-26"},{"lineNumber":32,"author":{"gitId":"LJXSean"},"content":"    public static RecordContainsKeywordsPredicate preparePredicateWithOnePrefix(String userInput) {","lastModifiedDate":"2022-10-26"},{"lineNumber":33,"author":{"gitId":"LJXSean"},"content":"        return new RecordContainsKeywordsPredicate(","lastModifiedDate":"2022-10-26"},{"lineNumber":34,"author":{"gitId":"LJXSean"},"content":"                Arrays.asList(userInput.split(\"\\\\s+\")), Arrays.asList(), \"\");","lastModifiedDate":"2022-10-26"},{"lineNumber":35,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-26"},{"lineNumber":36,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":37,"author":{"gitId":"LJXSean"},"content":"    /**","lastModifiedDate":"2022-10-26"},{"lineNumber":38,"author":{"gitId":"LJXSean"},"content":"     * Parses {@code userInput} into a {@code RecordContainsKeywordsPredicate}.","lastModifiedDate":"2022-10-26"},{"lineNumber":39,"author":{"gitId":"LJXSean"},"content":"     */","lastModifiedDate":"2022-10-26"},{"lineNumber":40,"author":{"gitId":"LJXSean"},"content":"    public static RecordContainsKeywordsPredicate preparePredicateWithMultiplePrefix(","lastModifiedDate":"2022-10-26"},{"lineNumber":41,"author":{"gitId":"LJXSean"},"content":"            String record, String medication, String date) {","lastModifiedDate":"2022-10-26"},{"lineNumber":42,"author":{"gitId":"LJXSean"},"content":"        List\u003cString\u003e recordKeywords \u003d Arrays.asList(record.split(\"\\\\s+\"));","lastModifiedDate":"2022-10-26"},{"lineNumber":43,"author":{"gitId":"LJXSean"},"content":"        List\u003cString\u003e medicationKeywords \u003d Arrays.asList(medication.split(\"\\\\s+\"));","lastModifiedDate":"2022-10-26"},{"lineNumber":44,"author":{"gitId":"LJXSean"},"content":"        return new RecordContainsKeywordsPredicate(recordKeywords, medicationKeywords, date);","lastModifiedDate":"2022-10-26"},{"lineNumber":45,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-26"},{"lineNumber":46,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":47,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":48,"author":{"gitId":"LJXSean"},"content":"    public void equals() {","lastModifiedDate":"2022-10-12"},{"lineNumber":49,"author":{"gitId":"LJXSean"},"content":"        RecordContainsKeywordsPredicate firstPredicate \u003d preparePredicateWithOnePrefix(\"covid-10\");","lastModifiedDate":"2022-10-26"},{"lineNumber":50,"author":{"gitId":"LJXSean"},"content":"        RecordContainsKeywordsPredicate secondPredicate \u003d preparePredicateWithOnePrefix(\"cold\");","lastModifiedDate":"2022-10-26"},{"lineNumber":51,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":52,"author":{"gitId":"LJXSean"},"content":"        FindRecordCommand findFirstCommand \u003d new FindRecordCommand(firstPredicate);","lastModifiedDate":"2022-10-12"},{"lineNumber":53,"author":{"gitId":"LJXSean"},"content":"        FindRecordCommand findSecondCommand \u003d new FindRecordCommand(secondPredicate);","lastModifiedDate":"2022-10-12"},{"lineNumber":54,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":55,"author":{"gitId":"LJXSean"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-10-12"},{"lineNumber":56,"author":{"gitId":"LJXSean"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2022-10-12"},{"lineNumber":57,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":58,"author":{"gitId":"LJXSean"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-10-12"},{"lineNumber":59,"author":{"gitId":"LJXSean"},"content":"        FindRecordCommand findFirstCommandCopy \u003d new FindRecordCommand(firstPredicate);","lastModifiedDate":"2022-10-12"},{"lineNumber":60,"author":{"gitId":"LJXSean"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2022-10-12"},{"lineNumber":61,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":62,"author":{"gitId":"LJXSean"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2022-10-12"},{"lineNumber":63,"author":{"gitId":"LJXSean"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2022-10-12"},{"lineNumber":64,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":65,"author":{"gitId":"LJXSean"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-10-12"},{"lineNumber":66,"author":{"gitId":"LJXSean"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2022-10-12"},{"lineNumber":67,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":68,"author":{"gitId":"LJXSean"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2022-10-12"},{"lineNumber":69,"author":{"gitId":"LJXSean"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2022-10-12"},{"lineNumber":70,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":71,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":72,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":73,"author":{"gitId":"LJXSean"},"content":"    public void execute_unspecifiedPrefix_allRecordsFound() {","lastModifiedDate":"2022-10-26"},{"lineNumber":74,"author":{"gitId":"LJXSean"},"content":"        String expectedMessage \u003d String.format(MESSAGE_RECORDS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2022-10-26"},{"lineNumber":75,"author":{"gitId":"LJXSean"},"content":"        RecordContainsKeywordsPredicate predicate \u003d preparePredicateWithOnePrefix(\" \");","lastModifiedDate":"2022-10-26"},{"lineNumber":76,"author":{"gitId":"LJXSean"},"content":"        FindRecordCommand command \u003d new FindRecordCommand(predicate);","lastModifiedDate":"2022-10-12"},{"lineNumber":77,"author":{"gitId":"LJXSean"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-12"},{"lineNumber":78,"author":{"gitId":"LJXSean"},"content":"        assertEquals(Arrays.asList(RECORD3, RECORD1, RECORD2), model.getFilteredRecordList());","lastModifiedDate":"2022-10-26"},{"lineNumber":79,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":80,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":81,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":82,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":83,"author":{"gitId":"LJXSean"},"content":"    public void execute_multiplePrefix_oneRecordFound() {","lastModifiedDate":"2022-10-26"},{"lineNumber":84,"author":{"gitId":"LJXSean"},"content":"        String expectedMessage \u003d String.format(MESSAGE_RECORDS_LISTED_OVERVIEW, 1);","lastModifiedDate":"2022-10-26"},{"lineNumber":85,"author":{"gitId":"LJXSean"},"content":"        RecordContainsKeywordsPredicate predicate \u003d preparePredicateWithMultiplePrefix(","lastModifiedDate":"2022-10-26"},{"lineNumber":86,"author":{"gitId":"LJXSean"},"content":"                \"covid-19\", \"Paracetamol\", \"10-2011\");","lastModifiedDate":"2022-10-26"},{"lineNumber":87,"author":{"gitId":"LJXSean"},"content":"        FindRecordCommand command \u003d new FindRecordCommand(predicate);","lastModifiedDate":"2022-10-26"},{"lineNumber":88,"author":{"gitId":"LJXSean"},"content":"        expectedModel.updateFilteredRecordList(predicate);","lastModifiedDate":"2022-10-26"},{"lineNumber":89,"author":{"gitId":"LJXSean"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-26"},{"lineNumber":90,"author":{"gitId":"LJXSean"},"content":"        assertEquals(Arrays.asList(RECORD1), model.getFilteredRecordList());","lastModifiedDate":"2022-10-26"},{"lineNumber":91,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-26"},{"lineNumber":92,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":93,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-26"},{"lineNumber":94,"author":{"gitId":"LJXSean"},"content":"    public void execute_onePrefixMultipleKeywords_multipleRecordsFound() {","lastModifiedDate":"2022-10-26"},{"lineNumber":95,"author":{"gitId":"LJXSean"},"content":"        String expectedMessage \u003d String.format(MESSAGE_RECORDS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2022-10-12"},{"lineNumber":96,"author":{"gitId":"LJXSean"},"content":"        RecordContainsKeywordsPredicate predicate \u003d preparePredicateWithOnePrefix(\"covid-19 rashes cold\");","lastModifiedDate":"2022-10-26"},{"lineNumber":97,"author":{"gitId":"LJXSean"},"content":"        FindRecordCommand command \u003d new FindRecordCommand(predicate);","lastModifiedDate":"2022-10-12"},{"lineNumber":98,"author":{"gitId":"LJXSean"},"content":"        expectedModel.updateFilteredRecordList(predicate);","lastModifiedDate":"2022-10-12"},{"lineNumber":99,"author":{"gitId":"LJXSean"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-12"},{"lineNumber":100,"author":{"gitId":"hanwenlai"},"content":"        assertEquals(Arrays.asList(RECORD3, RECORD1, RECORD2), model.getFilteredRecordList());","lastModifiedDate":"2022-10-15"},{"lineNumber":101,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":102,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":103,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-26"},{"lineNumber":104,"author":{"gitId":"LJXSean"},"content":"    public void execute_onePrefix_noRecordsFound() {","lastModifiedDate":"2022-10-26"},{"lineNumber":105,"author":{"gitId":"LJXSean"},"content":"        String expectedMessage \u003d String.format(MESSAGE_RECORDS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2022-10-26"},{"lineNumber":106,"author":{"gitId":"LJXSean"},"content":"        RecordContainsKeywordsPredicate predicate \u003d preparePredicateWithOnePrefix(\"thisshouldnotmatch\");","lastModifiedDate":"2022-10-26"},{"lineNumber":107,"author":{"gitId":"LJXSean"},"content":"        FindRecordCommand command \u003d new FindRecordCommand(predicate);","lastModifiedDate":"2022-10-26"},{"lineNumber":108,"author":{"gitId":"LJXSean"},"content":"        expectedModel.updateFilteredRecordList(predicate);","lastModifiedDate":"2022-10-26"},{"lineNumber":109,"author":{"gitId":"LJXSean"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-26"},{"lineNumber":110,"author":{"gitId":"LJXSean"},"content":"        assertEquals(emptyList, model.getFilteredRecordList());","lastModifiedDate":"2022-10-26"},{"lineNumber":111,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-26"},{"lineNumber":112,"author":{"gitId":"LJXSean"},"content":"}","lastModifiedDate":"2022-10-12"}],"authorContributionMap":{"hanwenlai":1,"LJXSean":110,"EiffelLKF":1}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"LJXSean"},"content":"import static seedu.address.logic.commands.Command.MESSAGE_LIST_COMMAND_PREREQUISITE;","lastModifiedDate":"2022-10-20"},{"lineNumber":4,"author":{"gitId":"LJXSean"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-10-20"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2018-01-31"},{"lineNumber":7,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.testutil.TypicalIndexes.FIRST_INDEX;","lastModifiedDate":"2022-10-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand.","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class ListCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"LJXSean"},"content":"    private Model modelShowingRecordList;","lastModifiedDate":"2022-10-20"},{"lineNumber":23,"author":{"gitId":"LJXSean"},"content":"    private Model modelShowingPatientList;","lastModifiedDate":"2022-10-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"LJXSean"},"content":"        modelShowingRecordList \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-20"},{"lineNumber":29,"author":{"gitId":"LJXSean"},"content":"        modelShowingPatientList \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-20"},{"lineNumber":30,"author":{"gitId":"LJXSean"},"content":"        expectedModel \u003d new ModelManager(modelShowingRecordList.getAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-20"},{"lineNumber":31,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":32,"author":{"gitId":"LJXSean"},"content":"        modelShowingRecordList.setRecordListDisplayed(true);","lastModifiedDate":"2022-10-20"},{"lineNumber":33,"author":{"gitId":"LJXSean"},"content":"        expectedModel.setRecordListDisplayed(true);","lastModifiedDate":"2022-10-20"},{"lineNumber":34,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-20"},{"lineNumber":35,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-20"},{"lineNumber":36,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-20"},{"lineNumber":37,"author":{"gitId":"LJXSean"},"content":"    public void execute_listWhileRecordListNotDisplayed_throwCommandException() {","lastModifiedDate":"2022-10-20"},{"lineNumber":38,"author":{"gitId":"LJXSean"},"content":"        assertCommandFailure(new ListCommand(), modelShowingPatientList, MESSAGE_LIST_COMMAND_PREREQUISITE);","lastModifiedDate":"2022-10-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2017-08-15"},{"lineNumber":43,"author":{"gitId":"LJXSean"},"content":"        assertCommandSuccess(new ListCommand(), modelShowingRecordList, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2022-10-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2017-08-15"},{"lineNumber":48,"author":{"gitId":"LJXSean"},"content":"        showPersonAtIndex(modelShowingRecordList, FIRST_INDEX);","lastModifiedDate":"2022-10-20"},{"lineNumber":49,"author":{"gitId":"LJXSean"},"content":"        assertCommandSuccess(new ListCommand(), modelShowingRecordList, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2022-10-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"anthonyhoth":1,"LJXSean":18,"-":32}},{"path":"src/test/java/seedu/address/logic/commands/ListRecordCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hanwenlai"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-12"},{"lineNumber":2,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":3,"author":{"gitId":"hanwenlai"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-13"},{"lineNumber":4,"author":{"gitId":"hanwenlai"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-13"},{"lineNumber":5,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-10-13"},{"lineNumber":6,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-13"},{"lineNumber":7,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2022-10-13"},{"lineNumber":8,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.logic.commands.ListRecordCommand.MESSAGE_SUCCESS;","lastModifiedDate":"2022-10-13"},{"lineNumber":9,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.testutil.TypicalIndexes.FIRST_INDEX;","lastModifiedDate":"2022-10-13"},{"lineNumber":10,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.testutil.TypicalIndexes.SECOND_INDEX;","lastModifiedDate":"2022-10-13"},{"lineNumber":11,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-13"},{"lineNumber":12,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":13,"author":{"gitId":"hanwenlai"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-12"},{"lineNumber":14,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":15,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-12"},{"lineNumber":16,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-12"},{"lineNumber":17,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2022-10-13"},{"lineNumber":18,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-12"},{"lineNumber":19,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-10-12"},{"lineNumber":20,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-10-12"},{"lineNumber":21,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-12"},{"lineNumber":22,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":23,"author":{"gitId":"hanwenlai"},"content":"public class ListRecordCommandTest {","lastModifiedDate":"2022-10-12"},{"lineNumber":24,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":25,"author":{"gitId":"hanwenlai"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-13"},{"lineNumber":26,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":27,"author":{"gitId":"hanwenlai"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":28,"author":{"gitId":"hanwenlai"},"content":"    public void execute_validIndexUnfilteredPersonList_success() {","lastModifiedDate":"2022-10-13"},{"lineNumber":29,"author":{"gitId":"anthonyhoth"},"content":"        Person personToListRecords \u003d model.getFilteredPersonList().get(FIRST_INDEX.getZeroBased());","lastModifiedDate":"2022-10-13"},{"lineNumber":30,"author":{"gitId":"anthonyhoth"},"content":"        ListRecordCommand listRecordCommand \u003d new ListRecordCommand(FIRST_INDEX);","lastModifiedDate":"2022-10-13"},{"lineNumber":31,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":32,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":33,"author":{"gitId":"hanwenlai"},"content":"        String expectedMessage \u003d MESSAGE_SUCCESS + personToListRecords.getName() + \"\\n\"","lastModifiedDate":"2022-10-12"},{"lineNumber":34,"author":{"gitId":"hanwenlai"},"content":"                + String.format(Messages.MESSAGE_RECORDS_LISTED_OVERVIEW,","lastModifiedDate":"2022-10-12"},{"lineNumber":35,"author":{"gitId":"hanwenlai"},"content":"                model.getFilteredRecordList().size());","lastModifiedDate":"2022-10-12"},{"lineNumber":36,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":37,"author":{"gitId":"hanwenlai"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-13"},{"lineNumber":38,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":39,"author":{"gitId":"hanwenlai"},"content":"        assertCommandSuccess(listRecordCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-12"},{"lineNumber":40,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":41,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":42,"author":{"gitId":"hanwenlai"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":43,"author":{"gitId":"hanwenlai"},"content":"    public void execute_invalidIndexUnfilteredPersonList_throwsCommandException() {","lastModifiedDate":"2022-10-13"},{"lineNumber":44,"author":{"gitId":"hanwenlai"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2022-10-12"},{"lineNumber":45,"author":{"gitId":"hanwenlai"},"content":"        ListRecordCommand listRecordCommand \u003d new ListRecordCommand(outOfBoundIndex);","lastModifiedDate":"2022-10-12"},{"lineNumber":46,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":47,"author":{"gitId":"hanwenlai"},"content":"        assertCommandFailure(listRecordCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-12"},{"lineNumber":48,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":49,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":50,"author":{"gitId":"hanwenlai"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":51,"author":{"gitId":"hanwenlai"},"content":"    public void execute_validIndexFilteredPersonList_success() {","lastModifiedDate":"2022-10-13"},{"lineNumber":52,"author":{"gitId":"anthonyhoth"},"content":"        showPersonAtIndex(model, FIRST_INDEX);","lastModifiedDate":"2022-10-13"},{"lineNumber":53,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":54,"author":{"gitId":"anthonyhoth"},"content":"        Person personToListRecords \u003d model.getFilteredPersonList().get(FIRST_INDEX.getZeroBased());","lastModifiedDate":"2022-10-13"},{"lineNumber":55,"author":{"gitId":"anthonyhoth"},"content":"        ListRecordCommand listRecordCommand \u003d new ListRecordCommand(FIRST_INDEX);","lastModifiedDate":"2022-10-13"},{"lineNumber":56,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":57,"author":{"gitId":"hanwenlai"},"content":"        String expectedMessage \u003d MESSAGE_SUCCESS + personToListRecords.getName() + \"\\n\"","lastModifiedDate":"2022-10-12"},{"lineNumber":58,"author":{"gitId":"hanwenlai"},"content":"                + String.format(Messages.MESSAGE_RECORDS_LISTED_OVERVIEW,","lastModifiedDate":"2022-10-12"},{"lineNumber":59,"author":{"gitId":"hanwenlai"},"content":"                model.getFilteredRecordList().size());","lastModifiedDate":"2022-10-12"},{"lineNumber":60,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":61,"author":{"gitId":"hanwenlai"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2022-10-13"},{"lineNumber":62,"author":{"gitId":"anthonyhoth"},"content":"        showPersonAtIndex(expectedModel, FIRST_INDEX);","lastModifiedDate":"2022-10-13"},{"lineNumber":63,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":64,"author":{"gitId":"hanwenlai"},"content":"        assertCommandSuccess(listRecordCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-13"},{"lineNumber":65,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":66,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":67,"author":{"gitId":"hanwenlai"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":68,"author":{"gitId":"hanwenlai"},"content":"    public void execute_invalidIndexFilteredPersonList_throwsCommandException() {","lastModifiedDate":"2022-10-13"},{"lineNumber":69,"author":{"gitId":"anthonyhoth"},"content":"        showPersonAtIndex(model, FIRST_INDEX);","lastModifiedDate":"2022-10-13"},{"lineNumber":70,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":71,"author":{"gitId":"anthonyhoth"},"content":"        Index outOfBoundIndex \u003d SECOND_INDEX;","lastModifiedDate":"2022-10-13"},{"lineNumber":72,"author":{"gitId":"hanwenlai"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2022-10-12"},{"lineNumber":73,"author":{"gitId":"hanwenlai"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2022-10-12"},{"lineNumber":74,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":75,"author":{"gitId":"hanwenlai"},"content":"        ListRecordCommand listRecordCommand \u003d new ListRecordCommand(outOfBoundIndex);","lastModifiedDate":"2022-10-12"},{"lineNumber":76,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":77,"author":{"gitId":"hanwenlai"},"content":"        assertCommandFailure(listRecordCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-12"},{"lineNumber":78,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":79,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":80,"author":{"gitId":"hanwenlai"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":81,"author":{"gitId":"hanwenlai"},"content":"    public void equals() {","lastModifiedDate":"2022-10-12"},{"lineNumber":82,"author":{"gitId":"anthonyhoth"},"content":"        ListRecordCommand listRecordFirstCommand \u003d new ListRecordCommand(FIRST_INDEX);","lastModifiedDate":"2022-10-13"},{"lineNumber":83,"author":{"gitId":"anthonyhoth"},"content":"        ListRecordCommand listRecordSecondCommand \u003d new ListRecordCommand(SECOND_INDEX);","lastModifiedDate":"2022-10-13"},{"lineNumber":84,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":85,"author":{"gitId":"hanwenlai"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-10-12"},{"lineNumber":86,"author":{"gitId":"hanwenlai"},"content":"        assertTrue(listRecordFirstCommand.equals(listRecordFirstCommand));","lastModifiedDate":"2022-10-12"},{"lineNumber":87,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":88,"author":{"gitId":"hanwenlai"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-10-12"},{"lineNumber":89,"author":{"gitId":"anthonyhoth"},"content":"        ListRecordCommand listRecordFirstCommandCopy \u003d new ListRecordCommand(FIRST_INDEX);","lastModifiedDate":"2022-10-13"},{"lineNumber":90,"author":{"gitId":"hanwenlai"},"content":"        assertTrue(listRecordFirstCommand.equals(listRecordFirstCommandCopy));","lastModifiedDate":"2022-10-12"},{"lineNumber":91,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":92,"author":{"gitId":"hanwenlai"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2022-10-12"},{"lineNumber":93,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(listRecordFirstCommand.equals(1));","lastModifiedDate":"2022-10-12"},{"lineNumber":94,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":95,"author":{"gitId":"hanwenlai"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-10-12"},{"lineNumber":96,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(listRecordFirstCommand.equals(null));","lastModifiedDate":"2022-10-12"},{"lineNumber":97,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":98,"author":{"gitId":"hanwenlai"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2022-10-12"},{"lineNumber":99,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(listRecordFirstCommand.equals(listRecordSecondCommand));","lastModifiedDate":"2022-10-12"},{"lineNumber":100,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":101,"author":{"gitId":"hanwenlai"},"content":"}","lastModifiedDate":"2022-10-12"},{"lineNumber":102,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-13"}],"authorContributionMap":{"anthonyhoth":13,"hanwenlai":89}},{"path":"src/test/java/seedu/address/logic/commands/ShowAllCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"LJXSean"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-19"},{"lineNumber":2,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":3,"author":{"gitId":"LJXSean"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-19"},{"lineNumber":4,"author":{"gitId":"LJXSean"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-19"},{"lineNumber":5,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":6,"author":{"gitId":"LJXSean"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-19"},{"lineNumber":7,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":8,"author":{"gitId":"LJXSean"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-19"},{"lineNumber":9,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":10,"author":{"gitId":"LJXSean"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-19"},{"lineNumber":11,"author":{"gitId":"LJXSean"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-10-19"},{"lineNumber":12,"author":{"gitId":"LJXSean"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-10-19"},{"lineNumber":13,"author":{"gitId":"LJXSean"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2022-10-19"},{"lineNumber":14,"author":{"gitId":"LJXSean"},"content":"import seedu.address.model.record.RecordContainsKeywordsPredicate;","lastModifiedDate":"2022-10-19"},{"lineNumber":15,"author":{"gitId":"LJXSean"},"content":"import seedu.address.testutil.TestUtil;","lastModifiedDate":"2022-10-19"},{"lineNumber":16,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":17,"author":{"gitId":"LJXSean"},"content":"/**","lastModifiedDate":"2022-10-19"},{"lineNumber":18,"author":{"gitId":"LJXSean"},"content":" * Contains integration tests (interaction with the Model) for {@code BackCommand}.","lastModifiedDate":"2022-10-19"},{"lineNumber":19,"author":{"gitId":"LJXSean"},"content":" */","lastModifiedDate":"2022-10-19"},{"lineNumber":20,"author":{"gitId":"LJXSean"},"content":"public class ShowAllCommandTest {","lastModifiedDate":"2022-10-26"},{"lineNumber":21,"author":{"gitId":"LJXSean"},"content":"    private final String testString \u003d \"benson covid-19\";","lastModifiedDate":"2022-10-19"},{"lineNumber":22,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-19"},{"lineNumber":23,"author":{"gitId":"LJXSean"},"content":"    public void execute_emptyAddressBook_success() {","lastModifiedDate":"2022-10-19"},{"lineNumber":24,"author":{"gitId":"LJXSean"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2022-10-19"},{"lineNumber":25,"author":{"gitId":"LJXSean"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2022-10-19"},{"lineNumber":26,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":27,"author":{"gitId":"LJXSean"},"content":"        assertCommandSuccess(new ShowAllCommand(), model, ShowAllCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2022-10-26"},{"lineNumber":28,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-26"},{"lineNumber":29,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":30,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-26"},{"lineNumber":31,"author":{"gitId":"LJXSean"},"content":"    public void execute_nonEmptyUnfilteredPersonList_success() {","lastModifiedDate":"2022-10-26"},{"lineNumber":32,"author":{"gitId":"LJXSean"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-26"},{"lineNumber":33,"author":{"gitId":"LJXSean"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-26"},{"lineNumber":34,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":35,"author":{"gitId":"LJXSean"},"content":"        assertCommandSuccess(new ShowAllCommand(), model, ShowAllCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2022-10-26"},{"lineNumber":36,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-26"},{"lineNumber":37,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":38,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-26"},{"lineNumber":39,"author":{"gitId":"LJXSean"},"content":"    public void execute_nonEmptyUnfilteredRecordList_success() {","lastModifiedDate":"2022-10-26"},{"lineNumber":40,"author":{"gitId":"LJXSean"},"content":"        Model model \u003d TestUtil.prepareModel();","lastModifiedDate":"2022-10-26"},{"lineNumber":41,"author":{"gitId":"LJXSean"},"content":"        Model expectedModel \u003d TestUtil.prepareModel();","lastModifiedDate":"2022-10-26"},{"lineNumber":42,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":43,"author":{"gitId":"LJXSean"},"content":"        assertCommandSuccess(new ShowAllCommand(), model, ShowAllCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2022-10-26"},{"lineNumber":44,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-19"},{"lineNumber":45,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":46,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-19"},{"lineNumber":47,"author":{"gitId":"LJXSean"},"content":"    public void execute_nonEmptyFilteredPersonList_success() {","lastModifiedDate":"2022-10-19"},{"lineNumber":48,"author":{"gitId":"LJXSean"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-19"},{"lineNumber":49,"author":{"gitId":"LJXSean"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-19"},{"lineNumber":50,"author":{"gitId":"LJXSean"},"content":"        model.updateFilteredPersonList(prepareNamePredicate());","lastModifiedDate":"2022-10-19"},{"lineNumber":51,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":52,"author":{"gitId":"LJXSean"},"content":"        assertCommandSuccess(new ShowAllCommand(), model, ShowAllCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2022-10-26"},{"lineNumber":53,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-19"},{"lineNumber":54,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":55,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-19"},{"lineNumber":56,"author":{"gitId":"LJXSean"},"content":"    public void execute_nonEmptyFilteredRecordList_success() {","lastModifiedDate":"2022-10-19"},{"lineNumber":57,"author":{"gitId":"LJXSean"},"content":"        Model model \u003d TestUtil.prepareModel();","lastModifiedDate":"2022-10-19"},{"lineNumber":58,"author":{"gitId":"LJXSean"},"content":"        Model expectedModel \u003d TestUtil.prepareModel();","lastModifiedDate":"2022-10-19"},{"lineNumber":59,"author":{"gitId":"LJXSean"},"content":"        model.updateFilteredRecordList(prepareRecordPredicate());","lastModifiedDate":"2022-10-19"},{"lineNumber":60,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":61,"author":{"gitId":"LJXSean"},"content":"        assertCommandSuccess(new ShowAllCommand(), model, ShowAllCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2022-10-26"},{"lineNumber":62,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-19"},{"lineNumber":63,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":64,"author":{"gitId":"LJXSean"},"content":"    /**","lastModifiedDate":"2022-10-19"},{"lineNumber":65,"author":{"gitId":"LJXSean"},"content":"     * Returns a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2022-10-19"},{"lineNumber":66,"author":{"gitId":"LJXSean"},"content":"     */","lastModifiedDate":"2022-10-19"},{"lineNumber":67,"author":{"gitId":"LJXSean"},"content":"    private NameContainsKeywordsPredicate prepareNamePredicate() {","lastModifiedDate":"2022-10-19"},{"lineNumber":68,"author":{"gitId":"LJXSean"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(testString.split(\"\\\\s+\")));","lastModifiedDate":"2022-10-19"},{"lineNumber":69,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-19"},{"lineNumber":70,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":71,"author":{"gitId":"LJXSean"},"content":"    /**","lastModifiedDate":"2022-10-19"},{"lineNumber":72,"author":{"gitId":"LJXSean"},"content":"     * Returns a {@code RecordContainsKeywordsPredicate}.","lastModifiedDate":"2022-10-19"},{"lineNumber":73,"author":{"gitId":"LJXSean"},"content":"     */","lastModifiedDate":"2022-10-19"},{"lineNumber":74,"author":{"gitId":"LJXSean"},"content":"    private RecordContainsKeywordsPredicate prepareRecordPredicate() {","lastModifiedDate":"2022-10-19"},{"lineNumber":75,"author":{"gitId":"LJXSean"},"content":"        return new RecordContainsKeywordsPredicate(","lastModifiedDate":"2022-10-26"},{"lineNumber":76,"author":{"gitId":"LJXSean"},"content":"                Arrays.asList(testString.split(\"\\\\s+\")), Arrays.asList(), \"\");","lastModifiedDate":"2022-10-26"},{"lineNumber":77,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-19"},{"lineNumber":78,"author":{"gitId":"LJXSean"},"content":"}","lastModifiedDate":"2022-10-19"}],"authorContributionMap":{"LJXSean":78}},{"path":"src/test/java/seedu/address/logic/parser/AddAppointmentCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-21"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-21"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPOINTMENT_DATE_AMY;","lastModifiedDate":"2022-10-21"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.APPOINTMENT_DATE_BOB;","lastModifiedDate":"2022-10-21"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_APPOINTMENT_DATE;","lastModifiedDate":"2022-10-21"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_DATE_AMY;","lastModifiedDate":"2022-10-21"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_DATE_BOB;","lastModifiedDate":"2022-10-21"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-10-21"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-10-21"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"import static seedu.address.testutil.TypicalIndexes.FIRST_INDEX;","lastModifiedDate":"2022-10-21"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"import static seedu.address.testutil.TypicalIndexes.SECOND_INDEX;","lastModifiedDate":"2022-10-21"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-21"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"class AddAppointmentCommandParserTest {","lastModifiedDate":"2022-10-21"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"    private AddAppointmentCommandParser parser \u003d new AddAppointmentCommandParser();","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"    public void parse_validArgs_returnsAddAppointmentCommand() {","lastModifiedDate":"2022-10-21"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"        assertParseSuccess(parser, \"1\" + APPOINTMENT_DATE_AMY,","lastModifiedDate":"2022-10-21"},{"lineNumber":24,"author":{"gitId":"marclzh"},"content":"                new AddAppointmentCommand(FIRST_INDEX, VALID_APPOINTMENT_DATE_AMY));","lastModifiedDate":"2022-10-21"},{"lineNumber":25,"author":{"gitId":"marclzh"},"content":"        assertParseSuccess(parser, \"2\" + APPOINTMENT_DATE_BOB,","lastModifiedDate":"2022-10-21"},{"lineNumber":26,"author":{"gitId":"marclzh"},"content":"                new AddAppointmentCommand(SECOND_INDEX, VALID_APPOINTMENT_DATE_BOB));","lastModifiedDate":"2022-10-21"},{"lineNumber":27,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":28,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":29,"author":{"gitId":"marclzh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":30,"author":{"gitId":"marclzh"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2022-10-21"},{"lineNumber":31,"author":{"gitId":"marclzh"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2022-10-21"},{"lineNumber":32,"author":{"gitId":"marclzh"},"content":"                AddAppointmentCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-21"},{"lineNumber":33,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":34,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":35,"author":{"gitId":"marclzh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":36,"author":{"gitId":"marclzh"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2022-10-21"},{"lineNumber":37,"author":{"gitId":"marclzh"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2022-10-21"},{"lineNumber":38,"author":{"gitId":"marclzh"},"content":"                AddAppointmentCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-21"},{"lineNumber":39,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":40,"author":{"gitId":"marclzh"},"content":"        // incorrect date","lastModifiedDate":"2022-10-21"},{"lineNumber":41,"author":{"gitId":"marclzh"},"content":"        assertParseFailure(parser, \"1\" + INVALID_APPOINTMENT_DATE, String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2022-10-21"},{"lineNumber":42,"author":{"gitId":"marclzh"},"content":"                AddAppointmentCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-21"},{"lineNumber":43,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":44,"author":{"gitId":"marclzh"},"content":"        // incorrect index","lastModifiedDate":"2022-10-21"},{"lineNumber":45,"author":{"gitId":"marclzh"},"content":"        assertParseFailure(parser, \"b\" + APPOINTMENT_DATE_AMY, String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2022-10-21"},{"lineNumber":46,"author":{"gitId":"marclzh"},"content":"                AddAppointmentCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-21"},{"lineNumber":47,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":48,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-10-21"}],"authorContributionMap":{"marclzh":48}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2022-10-18"},{"lineNumber":6,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDATE_DESC_AMY;","lastModifiedDate":"2022-10-19"},{"lineNumber":7,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDATE_DESC_BOB;","lastModifiedDate":"2022-10-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2022-10-18"},{"lineNumber":11,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_BIRTHDATE_DESC;","lastModifiedDate":"2022-10-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2022-10-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2022-10-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2022-10-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2022-10-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2022-10-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2022-10-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2022-10-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2022-10-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2022-10-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2022-10-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2022-10-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2022-10-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2022-10-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2022-10-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2022-10-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2022-10-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2022-10-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2018-07-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-07-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-06-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2022-10-19"},{"lineNumber":39,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.model.person.Birthdate;","lastModifiedDate":"2022-10-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2022-10-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2022-10-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2022-10-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-06-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();","lastModifiedDate":"2017-06-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2018-07-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // whitespace only preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":55,"author":{"gitId":"hanwenlai"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + BIRTHDATE_DESC_BOB","lastModifiedDate":"2022-10-19"},{"lineNumber":56,"author":{"gitId":"hanwenlai"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND,","lastModifiedDate":"2022-10-18"},{"lineNumber":57,"author":{"gitId":"hanwenlai"},"content":"                new AddCommand(expectedPerson));","lastModifiedDate":"2022-10-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":60,"author":{"gitId":"hanwenlai"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + BIRTHDATE_DESC_BOB","lastModifiedDate":"2022-10-19"},{"lineNumber":61,"author":{"gitId":"hanwenlai"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND,","lastModifiedDate":"2022-10-18"},{"lineNumber":62,"author":{"gitId":"hanwenlai"},"content":"                new AddCommand(expectedPerson));","lastModifiedDate":"2022-10-18"},{"lineNumber":63,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":64,"author":{"gitId":"hanwenlai"},"content":"        // multiple ages - last age accepted","lastModifiedDate":"2022-10-18"},{"lineNumber":65,"author":{"gitId":"hanwenlai"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + BIRTHDATE_DESC_AMY + BIRTHDATE_DESC_BOB + PHONE_DESC_BOB","lastModifiedDate":"2022-10-19"},{"lineNumber":66,"author":{"gitId":"hanwenlai"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2022-10-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":69,"author":{"gitId":"hanwenlai"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + BIRTHDATE_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB","lastModifiedDate":"2022-10-19"},{"lineNumber":70,"author":{"gitId":"hanwenlai"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2022-10-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":73,"author":{"gitId":"hanwenlai"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + BIRTHDATE_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY","lastModifiedDate":"2022-10-19"},{"lineNumber":74,"author":{"gitId":"hanwenlai"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2022-10-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":77,"author":{"gitId":"hanwenlai"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + BIRTHDATE_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2022-10-19"},{"lineNumber":78,"author":{"gitId":"hanwenlai"},"content":"                + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2022-10-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2018-07-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-07-25"},{"lineNumber":83,"author":{"gitId":"hanwenlai"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + BIRTHDATE_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2022-10-19"},{"lineNumber":84,"author":{"gitId":"hanwenlai"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));","lastModifiedDate":"2022-10-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // zero tags","lastModifiedDate":"2017-06-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2018-07-25"},{"lineNumber":91,"author":{"gitId":"hanwenlai"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + BIRTHDATE_DESC_AMY + PHONE_DESC_AMY","lastModifiedDate":"2022-10-19"},{"lineNumber":92,"author":{"gitId":"hanwenlai"},"content":"                        + EMAIL_DESC_AMY + ADDRESS_DESC_AMY, new AddCommand(expectedPerson));","lastModifiedDate":"2022-10-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-06-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        // missing name prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // missing phone prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // missing email prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // missing address prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":123,"author":{"gitId":"hanwenlai"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + BIRTHDATE_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2022-10-19"},{"lineNumber":124,"author":{"gitId":"hanwenlai"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-18"},{"lineNumber":125,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":126,"author":{"gitId":"hanwenlai"},"content":"        // invalid age","lastModifiedDate":"2022-10-18"},{"lineNumber":127,"author":{"gitId":"hanwenlai"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_BIRTHDATE_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2022-10-19"},{"lineNumber":128,"author":{"gitId":"hanwenlai"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Birthdate.MESSAGE_INVALID_DATE_FORMAT);","lastModifiedDate":"2022-10-27"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2017-06-15"},{"lineNumber":131,"author":{"gitId":"hanwenlai"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + BIRTHDATE_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB","lastModifiedDate":"2022-10-19"},{"lineNumber":132,"author":{"gitId":"hanwenlai"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-18"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2017-06-15"},{"lineNumber":135,"author":{"gitId":"hanwenlai"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + BIRTHDATE_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC","lastModifiedDate":"2022-10-19"},{"lineNumber":136,"author":{"gitId":"hanwenlai"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-18"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2017-06-15"},{"lineNumber":139,"author":{"gitId":"hanwenlai"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + BIRTHDATE_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2022-10-19"},{"lineNumber":140,"author":{"gitId":"hanwenlai"},"content":"                + INVALID_ADDRESS_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-18"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        // invalid tag","lastModifiedDate":"2017-06-15"},{"lineNumber":143,"author":{"gitId":"hanwenlai"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + BIRTHDATE_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2022-10-19"},{"lineNumber":144,"author":{"gitId":"hanwenlai"},"content":"                + ADDRESS_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-18"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-06-15"},{"lineNumber":147,"author":{"gitId":"hanwenlai"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + BIRTHDATE_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2022-10-19"},{"lineNumber":148,"author":{"gitId":"hanwenlai"},"content":"                        + INVALID_ADDRESS_DESC, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-18"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        // non-empty preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":151,"author":{"gitId":"hanwenlai"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + BIRTHDATE_DESC_BOB + PHONE_DESC_BOB","lastModifiedDate":"2022-10-19"},{"lineNumber":152,"author":{"gitId":"hanwenlai"},"content":"                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2022-10-18"},{"lineNumber":153,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-12-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":155,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"hanwenlai":42,"-":113}},{"path":"src/test/java/seedu/address/logic/parser/AddRecordCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"EiffelLKF"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-12"},{"lineNumber":2,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":3,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-12"},{"lineNumber":4,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RECORD_DATA_FORMAT;","lastModifiedDate":"2022-10-12"},{"lineNumber":5,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_RECORD_DATA_DESC;","lastModifiedDate":"2022-10-12"},{"lineNumber":6,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_RECORD_DATE_DESC;","lastModifiedDate":"2022-10-12"},{"lineNumber":7,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RECORD_DATA_DESC;","lastModifiedDate":"2022-10-12"},{"lineNumber":8,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RECORD_DATE_DESC;","lastModifiedDate":"2022-10-12"},{"lineNumber":9,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RECORD_DATA;","lastModifiedDate":"2022-10-12"},{"lineNumber":10,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RECORD_DATE;","lastModifiedDate":"2022-10-12"},{"lineNumber":11,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-10-12"},{"lineNumber":12,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-10-12"},{"lineNumber":13,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.model.record.Record.MESSAGE_INVALID_DATE_FORMAT;","lastModifiedDate":"2022-10-27"},{"lineNumber":14,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":15,"author":{"gitId":"EiffelLKF"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-17"},{"lineNumber":16,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":17,"author":{"gitId":"EiffelLKF"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-12"},{"lineNumber":18,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":19,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.logic.commands.AddRecordCommand;","lastModifiedDate":"2022-10-12"},{"lineNumber":20,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2022-10-17"},{"lineNumber":21,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":22,"author":{"gitId":"EiffelLKF"},"content":"public class AddRecordCommandParserTest {","lastModifiedDate":"2022-10-12"},{"lineNumber":23,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":24,"author":{"gitId":"EiffelLKF"},"content":"    private AddRecordCommandParser parser \u003d new AddRecordCommandParser();","lastModifiedDate":"2022-10-12"},{"lineNumber":25,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":26,"author":{"gitId":"EiffelLKF"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":27,"author":{"gitId":"EiffelLKF"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2022-10-12"},{"lineNumber":28,"author":{"gitId":"EiffelLKF"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2022-10-12"},{"lineNumber":29,"author":{"gitId":"EiffelLKF"},"content":"                AddRecordCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-12"},{"lineNumber":30,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":31,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":32,"author":{"gitId":"EiffelLKF"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":33,"author":{"gitId":"EiffelLKF"},"content":"    public void parse_validArgs_success() {","lastModifiedDate":"2022-10-12"},{"lineNumber":34,"author":{"gitId":"EiffelLKF"},"content":"        Record expectedRecord \u003d new Record(LocalDateTime.parse(VALID_RECORD_DATE,","lastModifiedDate":"2022-10-17"},{"lineNumber":35,"author":{"gitId":"EiffelLKF"},"content":"                Record.DATE_FORMAT), VALID_RECORD_DATA);","lastModifiedDate":"2022-10-17"},{"lineNumber":36,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":37,"author":{"gitId":"EiffelLKF"},"content":"        assertParseSuccess(parser, RECORD_DATE_DESC + RECORD_DATA_DESC, new AddRecordCommand(expectedRecord));","lastModifiedDate":"2022-10-12"},{"lineNumber":38,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":39,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":40,"author":{"gitId":"EiffelLKF"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":41,"author":{"gitId":"EiffelLKF"},"content":"    public void parse_invalidArgs_parseExceptionThrown() {","lastModifiedDate":"2022-10-12"},{"lineNumber":42,"author":{"gitId":"EiffelLKF"},"content":"        String expectedMessageInvalidDate \u003d MESSAGE_INVALID_DATE_FORMAT;","lastModifiedDate":"2022-10-12"},{"lineNumber":43,"author":{"gitId":"EiffelLKF"},"content":"        String expectedMessageInvalidRecordData \u003d MESSAGE_INVALID_RECORD_DATA_FORMAT;","lastModifiedDate":"2022-10-12"},{"lineNumber":44,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":45,"author":{"gitId":"EiffelLKF"},"content":"        // Invalid data","lastModifiedDate":"2022-10-12"},{"lineNumber":46,"author":{"gitId":"EiffelLKF"},"content":"        assertParseFailure(parser, RECORD_DATE_DESC + INVALID_RECORD_DATA_DESC,","lastModifiedDate":"2022-10-12"},{"lineNumber":47,"author":{"gitId":"EiffelLKF"},"content":"                expectedMessageInvalidRecordData);","lastModifiedDate":"2022-10-12"},{"lineNumber":48,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":49,"author":{"gitId":"EiffelLKF"},"content":"        // Invalid date","lastModifiedDate":"2022-10-12"},{"lineNumber":50,"author":{"gitId":"EiffelLKF"},"content":"        assertParseFailure(parser, INVALID_RECORD_DATE_DESC + RECORD_DATA_DESC, expectedMessageInvalidDate);","lastModifiedDate":"2022-10-12"},{"lineNumber":51,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":52,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":53,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":54,"author":{"gitId":"EiffelLKF"},"content":"}","lastModifiedDate":"2022-10-12"}],"authorContributionMap":{"hanwenlai":1,"EiffelLKF":53}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.testutil.TypicalIndexes.FIRST_INDEX;","lastModifiedDate":"2022-10-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-06-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-06-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"LJXSean"},"content":"import seedu.address.logic.commands.FindRecordCommand;","lastModifiedDate":"2022-10-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-27"},{"lineNumber":29,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.RecordContainsKeywordsPredicate;","lastModifiedDate":"2022-10-17"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;","lastModifiedDate":"2017-06-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {","lastModifiedDate":"2017-07-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();","lastModifiedDate":"2017-07-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"anthonyhoth"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + FIRST_INDEX.getOneBased());","lastModifiedDate":"2022-10-12"},{"lineNumber":55,"author":{"gitId":"anthonyhoth"},"content":"        assertEquals(new DeleteCommand(FIRST_INDEX), command);","lastModifiedDate":"2022-10-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"anthonyhoth"},"content":"                + FIRST_INDEX.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2022-10-12"},{"lineNumber":64,"author":{"gitId":"anthonyhoth"},"content":"        assertEquals(new EditCommand(FIRST_INDEX, descriptor), command);","lastModifiedDate":"2022-10-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2017-06-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":81,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":82,"author":{"gitId":"LJXSean"},"content":"    public void parseCommand_findR() throws Exception {","lastModifiedDate":"2022-10-12"},{"lineNumber":83,"author":{"gitId":"LJXSean"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2022-10-12"},{"lineNumber":84,"author":{"gitId":"LJXSean"},"content":"        FindRecordCommand command \u003d (FindRecordCommand) parser.parseCommand(","lastModifiedDate":"2022-10-12"},{"lineNumber":85,"author":{"gitId":"LJXSean"},"content":"                FindRecordCommand.COMMAND_WORD","lastModifiedDate":"2022-10-26"},{"lineNumber":86,"author":{"gitId":"LJXSean"},"content":"                        + \" r/\"","lastModifiedDate":"2022-10-26"},{"lineNumber":87,"author":{"gitId":"LJXSean"},"content":"                        + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2022-10-26"},{"lineNumber":88,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":89,"author":{"gitId":"LJXSean"},"content":"        assertEquals(new FindRecordCommand(","lastModifiedDate":"2022-10-26"},{"lineNumber":90,"author":{"gitId":"LJXSean"},"content":"                new RecordContainsKeywordsPredicate(keywords, Arrays.asList(), \"\")), command);","lastModifiedDate":"2022-10-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"anthonyhoth":5,"LJXSean":11,"EiffelLKF":1,"-":98}},{"path":"src/test/java/seedu/address/logic/parser/ClearAppointmentCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-21"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-21"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-10-21"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-10-21"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"import static seedu.address.testutil.TypicalIndexes.FIRST_INDEX;","lastModifiedDate":"2022-10-21"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-21"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"import seedu.address.logic.commands.ClearAppointmentCommand;","lastModifiedDate":"2022-10-21"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"class ClearAppointmentCommandParserTest {","lastModifiedDate":"2022-10-21"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"    private ClearAppointmentCommandParser parser \u003d new ClearAppointmentCommandParser();","lastModifiedDate":"2022-10-21"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"    public void parse_validArgs_returnsClearAppointmentCommand() {","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"        assertParseSuccess(parser, \"1\", new ClearAppointmentCommand(FIRST_INDEX));","lastModifiedDate":"2022-10-21"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2022-10-21"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2022-10-21"},{"lineNumber":24,"author":{"gitId":"marclzh"},"content":"                ClearAppointmentCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-21"},{"lineNumber":25,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":26,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-10-21"}],"authorContributionMap":{"marclzh":26}},{"path":"src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.testutil.TypicalIndexes.FIRST_INDEX;","lastModifiedDate":"2022-10-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-06-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2017-06-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2017-06-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them.","lastModifiedDate":"2017-06-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2017-06-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2017-06-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class DeleteCommandParserTest {","lastModifiedDate":"2017-06-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();","lastModifiedDate":"2017-06-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"anthonyhoth"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCommand(FIRST_INDEX));","lastModifiedDate":"2022-10-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-07-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"anthonyhoth":2,"-":30}},{"path":"src/test/java/seedu/address/logic/parser/DeleteRecordCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"anthonyhoth"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-18"},{"lineNumber":2,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":3,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-18"},{"lineNumber":4,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-10-18"},{"lineNumber":6,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.testutil.TypicalIndexes.FIRST_INDEX;","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"anthonyhoth"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.logic.commands.DeleteRecordCommand;","lastModifiedDate":"2022-10-18"},{"lineNumber":11,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":12,"author":{"gitId":"anthonyhoth"},"content":"/**","lastModifiedDate":"2022-10-18"},{"lineNumber":13,"author":{"gitId":"anthonyhoth"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2022-10-18"},{"lineNumber":14,"author":{"gitId":"anthonyhoth"},"content":" * outside of the DeleteRecordCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2022-10-18"},{"lineNumber":15,"author":{"gitId":"anthonyhoth"},"content":" * same path through the DeleteRecordCommand, and therefore we test only one of them.","lastModifiedDate":"2022-10-18"},{"lineNumber":16,"author":{"gitId":"anthonyhoth"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2022-10-18"},{"lineNumber":17,"author":{"gitId":"anthonyhoth"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2022-10-18"},{"lineNumber":18,"author":{"gitId":"anthonyhoth"},"content":" */","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"anthonyhoth"},"content":"public class DeleteRecordCommandParserTest {","lastModifiedDate":"2022-10-18"},{"lineNumber":20,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":21,"author":{"gitId":"anthonyhoth"},"content":"    private DeleteRecordCommandParser parser \u003d new DeleteRecordCommandParser();","lastModifiedDate":"2022-10-18"},{"lineNumber":22,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":23,"author":{"gitId":"anthonyhoth"},"content":"    @Test","lastModifiedDate":"2022-10-18"},{"lineNumber":24,"author":{"gitId":"anthonyhoth"},"content":"    public void parse_validArgs_returnsDeleteRecordCommand() {","lastModifiedDate":"2022-10-18"},{"lineNumber":25,"author":{"gitId":"anthonyhoth"},"content":"        assertParseSuccess(parser, \"1\", new DeleteRecordCommand(FIRST_INDEX));","lastModifiedDate":"2022-10-18"},{"lineNumber":26,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":27,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":28,"author":{"gitId":"anthonyhoth"},"content":"    @Test","lastModifiedDate":"2022-10-18"},{"lineNumber":29,"author":{"gitId":"anthonyhoth"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2022-10-18"},{"lineNumber":30,"author":{"gitId":"anthonyhoth"},"content":"        assertParseFailure(parser, \"a\",","lastModifiedDate":"2022-10-18"},{"lineNumber":31,"author":{"gitId":"anthonyhoth"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteRecordCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-18"},{"lineNumber":32,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":33,"author":{"gitId":"anthonyhoth"},"content":"}","lastModifiedDate":"2022-10-18"}],"authorContributionMap":{"anthonyhoth":33}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-05-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.testutil.TypicalIndexes.FIRST_INDEX;","lastModifiedDate":"2022-10-12"},{"lineNumber":31,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.testutil.TypicalIndexes.SECOND_INDEX;","lastModifiedDate":"2022-10-12"},{"lineNumber":32,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.testutil.TypicalIndexes.THIRD_INDEX;","lastModifiedDate":"2022-10-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-05-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-04"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-05-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-05-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-05-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-05-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {","lastModifiedDate":"2017-05-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // no index specified","lastModifiedDate":"2017-05-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-07-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // no index and no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-06-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // negative index","lastModifiedDate":"2017-05-04"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // zero index","lastModifiedDate":"2017-06-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2018-09-22"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2018-09-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2018-09-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address","lastModifiedDate":"2018-09-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag","lastModifiedDate":"2018-09-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email","lastModifiedDate":"2017-05-04"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone","lastModifiedDate":"2017-05-04"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2017-05-04"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,","lastModifiedDate":"2017-05-04"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error","lastModifiedDate":"2017-05-04"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2017-05-04"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,","lastModifiedDate":"2017-07-06"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":110,"author":{"gitId":"anthonyhoth"},"content":"        Index targetIndex \u003d SECOND_INDEX;","lastModifiedDate":"2022-10-12"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND","lastModifiedDate":"2017-06-06"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;","lastModifiedDate":"2017-06-06"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":124,"author":{"gitId":"anthonyhoth"},"content":"        Index targetIndex \u003d FIRST_INDEX;","lastModifiedDate":"2022-10-12"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // name","lastModifiedDate":"2017-05-04"},{"lineNumber":137,"author":{"gitId":"anthonyhoth"},"content":"        Index targetIndex \u003d THIRD_INDEX;","lastModifiedDate":"2022-10-12"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // phone","lastModifiedDate":"2017-05-04"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        // email","lastModifiedDate":"2017-05-04"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // address","lastModifiedDate":"2017-05-04"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        // tags","lastModifiedDate":"2017-05-04"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;","lastModifiedDate":"2017-05-25"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2017-08-15"},{"lineNumber":170,"author":{"gitId":"anthonyhoth"},"content":"        Index targetIndex \u003d FIRST_INDEX;","lastModifiedDate":"2022-10-12"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2017-05-25"},{"lineNumber":172,"author":{"gitId":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND","lastModifiedDate":"2017-05-25"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;","lastModifiedDate":"2017-05-25"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":176,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2017-05-04"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2017-05-04"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        // no other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":186,"author":{"gitId":"anthonyhoth"},"content":"        Index targetIndex \u003d FIRST_INDEX;","lastModifiedDate":"2022-10-12"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        // other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-05-25"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":196,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":203,"author":{"gitId":"anthonyhoth"},"content":"        Index targetIndex \u003d THIRD_INDEX;","lastModifiedDate":"2022-10-12"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;","lastModifiedDate":"2017-05-25"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();","lastModifiedDate":"2017-05-04"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":211,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"anthonyhoth":9,"-":202}},{"path":"src/test/java/seedu/address/logic/parser/EditRecordCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"anthonyhoth"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-18"},{"lineNumber":2,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":3,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-18"},{"lineNumber":4,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RECORD_DATA_FORMAT;","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_RECORD_DATA_DESC;","lastModifiedDate":"2022-10-18"},{"lineNumber":6,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_RECORD_DATE_DESC;","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RECORD_DATA;","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RECORD_DATE;","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RECORD_DATE_2;","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-10-18"},{"lineNumber":11,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-10-18"},{"lineNumber":12,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.model.record.Record.MESSAGE_INVALID_DATE_FORMAT;","lastModifiedDate":"2022-10-27"},{"lineNumber":13,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.testutil.TypicalIndexes.FIRST_INDEX;","lastModifiedDate":"2022-10-18"},{"lineNumber":14,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.testutil.TypicalIndexes.SECOND_INDEX;","lastModifiedDate":"2022-10-18"},{"lineNumber":15,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.testutil.TypicalIndexes.THIRD_INDEX;","lastModifiedDate":"2022-10-18"},{"lineNumber":16,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":17,"author":{"gitId":"anthonyhoth"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-18"},{"lineNumber":18,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-18"},{"lineNumber":20,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.logic.commands.EditRecordCommand;","lastModifiedDate":"2022-10-18"},{"lineNumber":21,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.logic.commands.EditRecordCommand.EditRecordDescriptor;","lastModifiedDate":"2022-10-18"},{"lineNumber":22,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.testutil.EditRecordDescriptorBuilder;","lastModifiedDate":"2022-10-18"},{"lineNumber":23,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":24,"author":{"gitId":"anthonyhoth"},"content":"public class EditRecordCommandParserTest {","lastModifiedDate":"2022-10-18"},{"lineNumber":25,"author":{"gitId":"anthonyhoth"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2022-10-18"},{"lineNumber":26,"author":{"gitId":"anthonyhoth"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditRecordCommand.MESSAGE_USAGE);","lastModifiedDate":"2022-10-18"},{"lineNumber":27,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":28,"author":{"gitId":"anthonyhoth"},"content":"    private EditRecordCommandParser parser \u003d new EditRecordCommandParser();","lastModifiedDate":"2022-10-18"},{"lineNumber":29,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":30,"author":{"gitId":"anthonyhoth"},"content":"    @Test","lastModifiedDate":"2022-10-18"},{"lineNumber":31,"author":{"gitId":"anthonyhoth"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2022-10-18"},{"lineNumber":32,"author":{"gitId":"anthonyhoth"},"content":"        // no index specified","lastModifiedDate":"2022-10-18"},{"lineNumber":33,"author":{"gitId":"anthonyhoth"},"content":"        assertParseFailure(parser, VALID_RECORD_DATA, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-10-18"},{"lineNumber":34,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":35,"author":{"gitId":"anthonyhoth"},"content":"        // no field specified","lastModifiedDate":"2022-10-18"},{"lineNumber":36,"author":{"gitId":"anthonyhoth"},"content":"        assertParseFailure(parser, \"1\", EditRecordCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2022-10-18"},{"lineNumber":37,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":38,"author":{"gitId":"anthonyhoth"},"content":"        // no index and no field specified","lastModifiedDate":"2022-10-18"},{"lineNumber":39,"author":{"gitId":"anthonyhoth"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-10-18"},{"lineNumber":40,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":41,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":42,"author":{"gitId":"anthonyhoth"},"content":"    @Test","lastModifiedDate":"2022-10-18"},{"lineNumber":43,"author":{"gitId":"anthonyhoth"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2022-10-18"},{"lineNumber":44,"author":{"gitId":"anthonyhoth"},"content":"        // negative index","lastModifiedDate":"2022-10-18"},{"lineNumber":45,"author":{"gitId":"anthonyhoth"},"content":"        assertParseFailure(parser, \"-5\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-10-18"},{"lineNumber":46,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":47,"author":{"gitId":"anthonyhoth"},"content":"        // zero index","lastModifiedDate":"2022-10-18"},{"lineNumber":48,"author":{"gitId":"anthonyhoth"},"content":"        assertParseFailure(parser, \"0\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-10-18"},{"lineNumber":49,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":50,"author":{"gitId":"anthonyhoth"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2022-10-18"},{"lineNumber":51,"author":{"gitId":"anthonyhoth"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-10-18"},{"lineNumber":52,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":53,"author":{"gitId":"anthonyhoth"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2022-10-18"},{"lineNumber":54,"author":{"gitId":"anthonyhoth"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-10-18"},{"lineNumber":55,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":56,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":57,"author":{"gitId":"anthonyhoth"},"content":"    @Test","lastModifiedDate":"2022-10-18"},{"lineNumber":58,"author":{"gitId":"anthonyhoth"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2022-10-18"},{"lineNumber":59,"author":{"gitId":"anthonyhoth"},"content":"        // invalid record date","lastModifiedDate":"2022-10-18"},{"lineNumber":60,"author":{"gitId":"anthonyhoth"},"content":"        assertParseFailure(parser, \"1\" + INVALID_RECORD_DATE_DESC, MESSAGE_INVALID_DATE_FORMAT);","lastModifiedDate":"2022-10-18"},{"lineNumber":61,"author":{"gitId":"anthonyhoth"},"content":"        // invalid record data","lastModifiedDate":"2022-10-18"},{"lineNumber":62,"author":{"gitId":"anthonyhoth"},"content":"        assertParseFailure(parser, \"1\" + INVALID_RECORD_DATA_DESC, MESSAGE_INVALID_RECORD_DATA_FORMAT);","lastModifiedDate":"2022-10-18"},{"lineNumber":63,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":64,"author":{"gitId":"anthonyhoth"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2022-10-18"},{"lineNumber":65,"author":{"gitId":"anthonyhoth"},"content":"        assertParseFailure(parser, \"1\" + INVALID_RECORD_DATE_DESC + INVALID_RECORD_DATA_DESC,","lastModifiedDate":"2022-10-18"},{"lineNumber":66,"author":{"gitId":"anthonyhoth"},"content":"                MESSAGE_INVALID_DATE_FORMAT);","lastModifiedDate":"2022-10-18"},{"lineNumber":67,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":68,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":69,"author":{"gitId":"anthonyhoth"},"content":"    @Test","lastModifiedDate":"2022-10-18"},{"lineNumber":70,"author":{"gitId":"anthonyhoth"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2022-10-18"},{"lineNumber":71,"author":{"gitId":"anthonyhoth"},"content":"        Index targetIndex \u003d SECOND_INDEX;","lastModifiedDate":"2022-10-18"},{"lineNumber":72,"author":{"gitId":"anthonyhoth"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" d/\" + VALID_RECORD_DATE + \" r/\" + VALID_RECORD_DATA;","lastModifiedDate":"2022-10-18"},{"lineNumber":73,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":74,"author":{"gitId":"anthonyhoth"},"content":"        EditRecordDescriptor descriptor \u003d new EditRecordDescriptorBuilder().withDate(VALID_RECORD_DATE)","lastModifiedDate":"2022-10-18"},{"lineNumber":75,"author":{"gitId":"anthonyhoth"},"content":"                .withData(VALID_RECORD_DATA).build();","lastModifiedDate":"2022-10-18"},{"lineNumber":76,"author":{"gitId":"anthonyhoth"},"content":"        EditRecordCommand expectedCommand \u003d new EditRecordCommand(targetIndex, descriptor);","lastModifiedDate":"2022-10-18"},{"lineNumber":77,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":78,"author":{"gitId":"anthonyhoth"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-10-18"},{"lineNumber":79,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":80,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":81,"author":{"gitId":"anthonyhoth"},"content":"    @Test","lastModifiedDate":"2022-10-18"},{"lineNumber":82,"author":{"gitId":"anthonyhoth"},"content":"    public void parse_oneFieldsSpecified_success() {","lastModifiedDate":"2022-10-18"},{"lineNumber":83,"author":{"gitId":"anthonyhoth"},"content":"        // record data","lastModifiedDate":"2022-10-18"},{"lineNumber":84,"author":{"gitId":"anthonyhoth"},"content":"        Index targetIndex \u003d FIRST_INDEX;","lastModifiedDate":"2022-10-18"},{"lineNumber":85,"author":{"gitId":"anthonyhoth"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" r/\" + VALID_RECORD_DATA;","lastModifiedDate":"2022-10-18"},{"lineNumber":86,"author":{"gitId":"anthonyhoth"},"content":"        EditRecordDescriptor descriptor \u003d new EditRecordDescriptorBuilder().withData(VALID_RECORD_DATA).build();","lastModifiedDate":"2022-10-18"},{"lineNumber":87,"author":{"gitId":"anthonyhoth"},"content":"        EditRecordCommand expectedCommand \u003d new EditRecordCommand(targetIndex, descriptor);","lastModifiedDate":"2022-10-18"},{"lineNumber":88,"author":{"gitId":"anthonyhoth"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-10-18"},{"lineNumber":89,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":90,"author":{"gitId":"anthonyhoth"},"content":"        // record date","lastModifiedDate":"2022-10-18"},{"lineNumber":91,"author":{"gitId":"anthonyhoth"},"content":"        userInput \u003d targetIndex.getOneBased() + \" d/\" + VALID_RECORD_DATE;","lastModifiedDate":"2022-10-18"},{"lineNumber":92,"author":{"gitId":"anthonyhoth"},"content":"        descriptor \u003d new EditRecordDescriptorBuilder().withDate(VALID_RECORD_DATE).build();","lastModifiedDate":"2022-10-18"},{"lineNumber":93,"author":{"gitId":"anthonyhoth"},"content":"        expectedCommand \u003d new EditRecordCommand(targetIndex, descriptor);","lastModifiedDate":"2022-10-18"},{"lineNumber":94,"author":{"gitId":"anthonyhoth"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-10-18"},{"lineNumber":95,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":96,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":97,"author":{"gitId":"anthonyhoth"},"content":"    @Test","lastModifiedDate":"2022-10-18"},{"lineNumber":98,"author":{"gitId":"anthonyhoth"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2022-10-18"},{"lineNumber":99,"author":{"gitId":"anthonyhoth"},"content":"        Index targetIndex \u003d FIRST_INDEX;","lastModifiedDate":"2022-10-18"},{"lineNumber":100,"author":{"gitId":"anthonyhoth"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" d/\" + VALID_RECORD_DATE + \" r/\" + VALID_RECORD_DATA","lastModifiedDate":"2022-10-18"},{"lineNumber":101,"author":{"gitId":"anthonyhoth"},"content":"                + \" d/\" + VALID_RECORD_DATE_2;","lastModifiedDate":"2022-10-18"},{"lineNumber":102,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":103,"author":{"gitId":"anthonyhoth"},"content":"        EditRecordDescriptor descriptor \u003d new EditRecordDescriptorBuilder().withDate(VALID_RECORD_DATE_2)","lastModifiedDate":"2022-10-18"},{"lineNumber":104,"author":{"gitId":"anthonyhoth"},"content":"                .withData(VALID_RECORD_DATA).build();","lastModifiedDate":"2022-10-18"},{"lineNumber":105,"author":{"gitId":"anthonyhoth"},"content":"        EditRecordCommand expectedCommand \u003d new EditRecordCommand(targetIndex, descriptor);","lastModifiedDate":"2022-10-18"},{"lineNumber":106,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":107,"author":{"gitId":"anthonyhoth"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-10-18"},{"lineNumber":108,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":109,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":110,"author":{"gitId":"anthonyhoth"},"content":"    @Test","lastModifiedDate":"2022-10-18"},{"lineNumber":111,"author":{"gitId":"anthonyhoth"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2022-10-18"},{"lineNumber":112,"author":{"gitId":"anthonyhoth"},"content":"        Index targetIndex \u003d FIRST_INDEX;","lastModifiedDate":"2022-10-18"},{"lineNumber":113,"author":{"gitId":"anthonyhoth"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" r/\" + INVALID_RECORD_DATA_DESC + \" r/\" + VALID_RECORD_DATA;","lastModifiedDate":"2022-10-18"},{"lineNumber":114,"author":{"gitId":"anthonyhoth"},"content":"        EditRecordDescriptor descriptor \u003d new EditRecordDescriptorBuilder().withData(VALID_RECORD_DATA).build();","lastModifiedDate":"2022-10-18"},{"lineNumber":115,"author":{"gitId":"anthonyhoth"},"content":"        EditRecordCommand expectedCommand \u003d new EditRecordCommand(targetIndex, descriptor);","lastModifiedDate":"2022-10-18"},{"lineNumber":116,"author":{"gitId":"anthonyhoth"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-10-18"},{"lineNumber":117,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":118,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":119,"author":{"gitId":"anthonyhoth"},"content":"    @Test","lastModifiedDate":"2022-10-18"},{"lineNumber":120,"author":{"gitId":"anthonyhoth"},"content":"    public void parse_addingMedications_success() {","lastModifiedDate":"2022-10-18"},{"lineNumber":121,"author":{"gitId":"anthonyhoth"},"content":"        Index targetIndex \u003d THIRD_INDEX;","lastModifiedDate":"2022-10-18"},{"lineNumber":122,"author":{"gitId":"anthonyhoth"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" m/Paracetamol\";","lastModifiedDate":"2022-10-18"},{"lineNumber":123,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":124,"author":{"gitId":"anthonyhoth"},"content":"        EditRecordDescriptor descriptor \u003d new EditRecordDescriptorBuilder().withMedications(\"Paracetamol\").build();","lastModifiedDate":"2022-10-18"},{"lineNumber":125,"author":{"gitId":"anthonyhoth"},"content":"        EditRecordCommand expectedCommand \u003d new EditRecordCommand(targetIndex, descriptor);","lastModifiedDate":"2022-10-18"},{"lineNumber":126,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":127,"author":{"gitId":"anthonyhoth"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-10-18"},{"lineNumber":128,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":129,"author":{"gitId":"anthonyhoth"},"content":"}","lastModifiedDate":"2022-10-18"}],"authorContributionMap":{"anthonyhoth":128,"hanwenlai":1}},{"path":"src/test/java/seedu/address/logic/parser/FindRecordCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"LJXSean"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-12"},{"lineNumber":2,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":3,"author":{"gitId":"LJXSean"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-10-12"},{"lineNumber":4,"author":{"gitId":"LJXSean"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-10-12"},{"lineNumber":5,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":6,"author":{"gitId":"LJXSean"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-12"},{"lineNumber":7,"author":{"gitId":"LJXSean"},"content":"import java.util.List;","lastModifiedDate":"2022-10-26"},{"lineNumber":8,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":9,"author":{"gitId":"LJXSean"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-12"},{"lineNumber":10,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":11,"author":{"gitId":"LJXSean"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-11-01"},{"lineNumber":12,"author":{"gitId":"LJXSean"},"content":"import seedu.address.logic.commands.FindRecordCommand;","lastModifiedDate":"2022-10-12"},{"lineNumber":13,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.RecordContainsKeywordsPredicate;","lastModifiedDate":"2022-10-17"},{"lineNumber":14,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":15,"author":{"gitId":"LJXSean"},"content":"public class FindRecordCommandParserTest {","lastModifiedDate":"2022-10-12"},{"lineNumber":16,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":17,"author":{"gitId":"LJXSean"},"content":"    private FindRecordCommandParser parser \u003d new FindRecordCommandParser();","lastModifiedDate":"2022-10-12"},{"lineNumber":18,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":19,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":20,"author":{"gitId":"LJXSean"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2022-10-12"},{"lineNumber":21,"author":{"gitId":"LJXSean"},"content":"        assertParseFailure(parser, \"     \",","lastModifiedDate":"2022-11-01"},{"lineNumber":22,"author":{"gitId":"LJXSean"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FindRecordCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-11-01"},{"lineNumber":23,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":24,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":25,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-26"},{"lineNumber":26,"author":{"gitId":"LJXSean"},"content":"    public void parse_emptyPrefix_throwsParseException() {","lastModifiedDate":"2022-10-26"},{"lineNumber":27,"author":{"gitId":"LJXSean"},"content":"        assertParseFailure(parser, \" m/ r/cold\", FindRecordCommand.MESSAGE_EMPTY_PREFIX);","lastModifiedDate":"2022-10-26"},{"lineNumber":28,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-26"},{"lineNumber":29,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":30,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":31,"author":{"gitId":"LJXSean"},"content":"    public void parse_invalidDateFormat_throwsParseException() {","lastModifiedDate":"2022-10-26"},{"lineNumber":32,"author":{"gitId":"LJXSean"},"content":"        assertParseFailure(parser, \" d/10-10-2010 1400\", FindRecordCommand.MESSAGE_INVALID_FIND_DATE_FORMAT);","lastModifiedDate":"2022-10-26"},{"lineNumber":33,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-26"},{"lineNumber":34,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":35,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-26"},{"lineNumber":36,"author":{"gitId":"LJXSean"},"content":"    public void parse_validArgsWithOnePrefix_returnsFindRecordCommand() {","lastModifiedDate":"2022-10-26"},{"lineNumber":37,"author":{"gitId":"LJXSean"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2022-10-12"},{"lineNumber":38,"author":{"gitId":"LJXSean"},"content":"        FindRecordCommand expectedFindRecordCommand \u003d","lastModifiedDate":"2022-10-12"},{"lineNumber":39,"author":{"gitId":"LJXSean"},"content":"                new FindRecordCommand(new RecordContainsKeywordsPredicate(","lastModifiedDate":"2022-10-26"},{"lineNumber":40,"author":{"gitId":"LJXSean"},"content":"                        Arrays.asList(\"flu\", \"cold\"), Arrays.asList(), \"\"));","lastModifiedDate":"2022-10-26"},{"lineNumber":41,"author":{"gitId":"LJXSean"},"content":"        assertParseSuccess(parser, \" r/flu cold\", expectedFindRecordCommand);","lastModifiedDate":"2022-10-20"},{"lineNumber":42,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":43,"author":{"gitId":"LJXSean"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2022-10-12"},{"lineNumber":44,"author":{"gitId":"LJXSean"},"content":"        assertParseSuccess(parser, \" r/flu \\n \\t cold  \\t\", expectedFindRecordCommand);","lastModifiedDate":"2022-10-20"},{"lineNumber":45,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":46,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":47,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-26"},{"lineNumber":48,"author":{"gitId":"LJXSean"},"content":"    public void parse_validArgsWithMultiplePrefix_returnsFindRecordCommand() {","lastModifiedDate":"2022-10-26"},{"lineNumber":49,"author":{"gitId":"LJXSean"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2022-10-26"},{"lineNumber":50,"author":{"gitId":"LJXSean"},"content":"        List\u003cString\u003e recordKeywords \u003d Arrays.asList(\"flu\", \"cold\");","lastModifiedDate":"2022-10-26"},{"lineNumber":51,"author":{"gitId":"LJXSean"},"content":"        List\u003cString\u003e medicationKeywords \u003d Arrays.asList(\"paracetemol\", \"panadol\");","lastModifiedDate":"2022-10-26"},{"lineNumber":52,"author":{"gitId":"LJXSean"},"content":"        String dateKeyword \u003d \"12-2012\";","lastModifiedDate":"2022-10-26"},{"lineNumber":53,"author":{"gitId":"LJXSean"},"content":"        FindRecordCommand expectedFindRecordCommand \u003d","lastModifiedDate":"2022-10-26"},{"lineNumber":54,"author":{"gitId":"LJXSean"},"content":"                new FindRecordCommand(","lastModifiedDate":"2022-10-26"},{"lineNumber":55,"author":{"gitId":"LJXSean"},"content":"                        new RecordContainsKeywordsPredicate(recordKeywords, medicationKeywords, dateKeyword));","lastModifiedDate":"2022-10-26"},{"lineNumber":56,"author":{"gitId":"LJXSean"},"content":"        assertParseSuccess(parser, \" r/flu cold m/paracetemol panadol d/12-2012\", expectedFindRecordCommand);","lastModifiedDate":"2022-10-26"},{"lineNumber":57,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":58,"author":{"gitId":"LJXSean"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2022-10-26"},{"lineNumber":59,"author":{"gitId":"LJXSean"},"content":"        assertParseSuccess(parser, \" r/flu \\n \\t cold  \\t m/paracetemol panadol d/12-2012\\t\",","lastModifiedDate":"2022-10-26"},{"lineNumber":60,"author":{"gitId":"LJXSean"},"content":"                expectedFindRecordCommand);","lastModifiedDate":"2022-10-26"},{"lineNumber":61,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-26"},{"lineNumber":62,"author":{"gitId":"LJXSean"},"content":"}","lastModifiedDate":"2022-10-12"}],"authorContributionMap":{"LJXSean":61,"EiffelLKF":1}},{"path":"src/test/java/seedu/address/logic/parser/ListRecordCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hanwenlai"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-13"},{"lineNumber":2,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":3,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-13"},{"lineNumber":4,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-10-13"},{"lineNumber":5,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-10-13"},{"lineNumber":6,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.testutil.TypicalIndexes.FIRST_INDEX;","lastModifiedDate":"2022-10-13"},{"lineNumber":7,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":8,"author":{"gitId":"hanwenlai"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-13"},{"lineNumber":9,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":10,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.logic.commands.ListRecordCommand;","lastModifiedDate":"2022-10-13"},{"lineNumber":11,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":12,"author":{"gitId":"hanwenlai"},"content":"public class ListRecordCommandParserTest {","lastModifiedDate":"2022-10-13"},{"lineNumber":13,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":14,"author":{"gitId":"hanwenlai"},"content":"    private ListRecordCommandParser parser \u003d new ListRecordCommandParser();","lastModifiedDate":"2022-10-13"},{"lineNumber":15,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":16,"author":{"gitId":"hanwenlai"},"content":"    @Test","lastModifiedDate":"2022-10-13"},{"lineNumber":17,"author":{"gitId":"hanwenlai"},"content":"    public void parse_validArgs_returnsListRecordCommand() {","lastModifiedDate":"2022-10-13"},{"lineNumber":18,"author":{"gitId":"anthonyhoth"},"content":"        assertParseSuccess(parser, \"1\", new ListRecordCommand(FIRST_INDEX));","lastModifiedDate":"2022-10-13"},{"lineNumber":19,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-13"},{"lineNumber":20,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":21,"author":{"gitId":"hanwenlai"},"content":"    @Test","lastModifiedDate":"2022-10-13"},{"lineNumber":22,"author":{"gitId":"hanwenlai"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2022-10-13"},{"lineNumber":23,"author":{"gitId":"hanwenlai"},"content":"        assertParseFailure(parser, \"a\",","lastModifiedDate":"2022-10-13"},{"lineNumber":24,"author":{"gitId":"hanwenlai"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListRecordCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-13"},{"lineNumber":25,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-13"},{"lineNumber":26,"author":{"gitId":"hanwenlai"},"content":"}","lastModifiedDate":"2022-10-13"},{"lineNumber":27,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-13"}],"authorContributionMap":{"anthonyhoth":2,"hanwenlai":25}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2017-06-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":7,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.testutil.TypicalIndexes.FIRST_INDEX;","lastModifiedDate":"2022-10-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-05-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-05-22"},{"lineNumber":12,"author":{"gitId":"LJXSean"},"content":"import java.util.List;","lastModifiedDate":"2022-10-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-05-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-05-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-05-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-05-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-05-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-05-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2017-05-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":30,"author":{"gitId":"EiffelLKF"},"content":"    private static final String INVALID_RECORD_DATE \u003d \"99-99-99\";","lastModifiedDate":"2022-10-12"},{"lineNumber":31,"author":{"gitId":"EiffelLKF"},"content":"    private static final String INVALID_RECORD_DATA \u003d \" \";","lastModifiedDate":"2022-10-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2017-05-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";","lastModifiedDate":"2017-05-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";","lastModifiedDate":"2017-05-22"},{"lineNumber":39,"author":{"gitId":"EiffelLKF"},"content":"    private static final String VALID_RECORD_DATE \u003d \"02-03-2024 1230\";","lastModifiedDate":"2022-10-12"},{"lineNumber":40,"author":{"gitId":"EiffelLKF"},"content":"    private static final String VALID_RECORD_DATA \u003d \"fever\";","lastModifiedDate":"2022-10-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":58,"author":{"gitId":"anthonyhoth"},"content":"        assertEquals(FIRST_INDEX, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2022-10-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":61,"author":{"gitId":"anthonyhoth"},"content":"        assertEquals(FIRST_INDEX, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2022-10-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2017-05-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2017-05-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));","lastModifiedDate":"2019-03-14"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2019-03-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-22"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2017-05-30"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-30"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));","lastModifiedDate":"2019-03-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));","lastModifiedDate":"2017-05-30"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));","lastModifiedDate":"2019-03-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());","lastModifiedDate":"2017-05-22"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));","lastModifiedDate":"2017-05-22"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));","lastModifiedDate":"2017-05-22"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);","lastModifiedDate":"2017-05-22"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":201,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":202,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-26"},{"lineNumber":203,"author":{"gitId":"LJXSean"},"content":"    public void parseKeywords_unspecifiedPrefix_returnsEmptyList() throws Exception {","lastModifiedDate":"2022-10-26"},{"lineNumber":204,"author":{"gitId":"LJXSean"},"content":"        List\u003cString\u003e actualPredicate \u003d ParserUtil.parseKeywords(FindRecordCommandParser.PREFIX_NOT_SPECIFIED);","lastModifiedDate":"2022-10-26"},{"lineNumber":205,"author":{"gitId":"LJXSean"},"content":"        List\u003cString\u003e expectedPredicate \u003d Arrays.asList();","lastModifiedDate":"2022-10-26"},{"lineNumber":206,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":207,"author":{"gitId":"LJXSean"},"content":"        assertEquals(expectedPredicate, actualPredicate);","lastModifiedDate":"2022-10-26"},{"lineNumber":208,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-26"},{"lineNumber":209,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":210,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-26"},{"lineNumber":211,"author":{"gitId":"LJXSean"},"content":"    public void parseKeywords_emptySpecifiedPrefix_throwsParseException() {","lastModifiedDate":"2022-10-26"},{"lineNumber":212,"author":{"gitId":"LJXSean"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseKeywords(\"\"));","lastModifiedDate":"2022-10-26"},{"lineNumber":213,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-26"},{"lineNumber":214,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":215,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-26"},{"lineNumber":216,"author":{"gitId":"LJXSean"},"content":"    public void parseKeywords_validValue_returnsListOfKeywords() throws Exception {","lastModifiedDate":"2022-10-26"},{"lineNumber":217,"author":{"gitId":"LJXSean"},"content":"        String toParse \u003d \"covid-19 SARS H1N1\";","lastModifiedDate":"2022-10-26"},{"lineNumber":218,"author":{"gitId":"LJXSean"},"content":"        List\u003cString\u003e actualPredicate \u003d ParserUtil.parseKeywords(toParse);","lastModifiedDate":"2022-10-26"},{"lineNumber":219,"author":{"gitId":"LJXSean"},"content":"        List\u003cString\u003e expectedPredicate \u003d Arrays.asList(toParse.split(\"\\\\s+\"));","lastModifiedDate":"2022-10-26"},{"lineNumber":220,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":221,"author":{"gitId":"LJXSean"},"content":"        assertEquals(expectedPredicate, actualPredicate);","lastModifiedDate":"2022-10-26"},{"lineNumber":222,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-26"},{"lineNumber":223,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":224,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-26"},{"lineNumber":225,"author":{"gitId":"LJXSean"},"content":"    public void parseDateKeyword_unspecifiedPrefix_returnsBlankString() throws Exception {","lastModifiedDate":"2022-10-26"},{"lineNumber":226,"author":{"gitId":"LJXSean"},"content":"        String actualPredicate \u003d ParserUtil.parseDateKeyword(FindRecordCommandParser.PREFIX_NOT_SPECIFIED);","lastModifiedDate":"2022-10-26"},{"lineNumber":227,"author":{"gitId":"LJXSean"},"content":"        String expectedPredicate \u003d \"\";","lastModifiedDate":"2022-10-26"},{"lineNumber":228,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":229,"author":{"gitId":"LJXSean"},"content":"        assertEquals(expectedPredicate, actualPredicate);","lastModifiedDate":"2022-10-26"},{"lineNumber":230,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-26"},{"lineNumber":231,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":232,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-26"},{"lineNumber":233,"author":{"gitId":"LJXSean"},"content":"    public void parseDateKeywords_emptySpecifiedPrefix_throwsParseException() {","lastModifiedDate":"2022-10-26"},{"lineNumber":234,"author":{"gitId":"LJXSean"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDateKeyword(\"\"));","lastModifiedDate":"2022-10-26"},{"lineNumber":235,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-26"},{"lineNumber":236,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":237,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-26"},{"lineNumber":238,"author":{"gitId":"LJXSean"},"content":"    public void parseDateKeywords_invalidValue_throwsParseException() {","lastModifiedDate":"2022-10-26"},{"lineNumber":239,"author":{"gitId":"LJXSean"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDateKeyword(\"99-2022\"));","lastModifiedDate":"2022-10-26"},{"lineNumber":240,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-26"},{"lineNumber":241,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":242,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-26"},{"lineNumber":243,"author":{"gitId":"LJXSean"},"content":"    public void parseDateKeyword_validValue_returnsDateString() throws Exception {","lastModifiedDate":"2022-10-26"},{"lineNumber":244,"author":{"gitId":"LJXSean"},"content":"        String expectedPredicate \u003d \"10-2000\";","lastModifiedDate":"2022-10-26"},{"lineNumber":245,"author":{"gitId":"LJXSean"},"content":"        String actualPredicate \u003d ParserUtil.parseDateKeyword(expectedPredicate);","lastModifiedDate":"2022-10-26"},{"lineNumber":246,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":247,"author":{"gitId":"LJXSean"},"content":"        assertEquals(expectedPredicate, actualPredicate);","lastModifiedDate":"2022-10-26"},{"lineNumber":248,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-26"},{"lineNumber":249,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":250,"author":{"gitId":"EiffelLKF"},"content":"    /*","lastModifiedDate":"2022-10-17"},{"lineNumber":251,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":252,"author":{"gitId":"EiffelLKF"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":253,"author":{"gitId":"EiffelLKF"},"content":"    public void parseRecord_nullRecordDate_throwsNullPointerException() {","lastModifiedDate":"2022-10-12"},{"lineNumber":254,"author":{"gitId":"EiffelLKF"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseRecord((String) null, VALID_RECORD_DATA));","lastModifiedDate":"2022-10-12"},{"lineNumber":255,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":256,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":257,"author":{"gitId":"EiffelLKF"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":258,"author":{"gitId":"EiffelLKF"},"content":"    public void parseRecord_nullRecordData_throwsNullPointerException() {","lastModifiedDate":"2022-10-12"},{"lineNumber":259,"author":{"gitId":"EiffelLKF"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseRecord(VALID_RECORD_DATE, (String) null));","lastModifiedDate":"2022-10-12"},{"lineNumber":260,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":261,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":262,"author":{"gitId":"EiffelLKF"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":263,"author":{"gitId":"EiffelLKF"},"content":"    public void parseRecord_invalidRecordDate_throwsParseException() {","lastModifiedDate":"2022-10-12"},{"lineNumber":264,"author":{"gitId":"EiffelLKF"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRecord(INVALID_RECORD_DATE, VALID_RECORD_DATA));","lastModifiedDate":"2022-10-12"},{"lineNumber":265,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":266,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":267,"author":{"gitId":"EiffelLKF"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":268,"author":{"gitId":"EiffelLKF"},"content":"    public void parseRecord_invalidRecordData_throwsParseException() {","lastModifiedDate":"2022-10-12"},{"lineNumber":269,"author":{"gitId":"EiffelLKF"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRecord(VALID_RECORD_DATE, INVALID_RECORD_DATA));","lastModifiedDate":"2022-10-12"},{"lineNumber":270,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":271,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":272,"author":{"gitId":"EiffelLKF"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":273,"author":{"gitId":"EiffelLKF"},"content":"    public void parseRecord_validValuesWithoutWhitespace_returnsRecord() throws Exception {","lastModifiedDate":"2022-10-12"},{"lineNumber":274,"author":{"gitId":"EiffelLKF"},"content":"        Record expectedRecord \u003d new Record(VALID_RECORD_DATE, VALID_RECORD_DATA);","lastModifiedDate":"2022-10-12"},{"lineNumber":275,"author":{"gitId":"EiffelLKF"},"content":"        assertEquals(expectedRecord, ParserUtil.parseRecord(VALID_RECORD_DATE, VALID_RECORD_DATA));","lastModifiedDate":"2022-10-12"},{"lineNumber":276,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":277,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":278,"author":{"gitId":"EiffelLKF"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":279,"author":{"gitId":"EiffelLKF"},"content":"    public void parseRecord_validValuesWithWhitespace_returnsTrimmedRecord() throws Exception {","lastModifiedDate":"2022-10-12"},{"lineNumber":280,"author":{"gitId":"EiffelLKF"},"content":"        String recordDateWithWhitespace \u003d WHITESPACE + VALID_RECORD_DATE + WHITESPACE;","lastModifiedDate":"2022-10-12"},{"lineNumber":281,"author":{"gitId":"EiffelLKF"},"content":"        String recordDataWithWhitespace \u003d WHITESPACE + VALID_RECORD_DATA + WHITESPACE;","lastModifiedDate":"2022-10-12"},{"lineNumber":282,"author":{"gitId":"EiffelLKF"},"content":"        Record expectedRecord \u003d new Record(VALID_RECORD_DATE, VALID_RECORD_DATA);","lastModifiedDate":"2022-10-12"},{"lineNumber":283,"author":{"gitId":"EiffelLKF"},"content":"        assertEquals(expectedRecord, ParserUtil.parseRecord(recordDateWithWhitespace, recordDataWithWhitespace));","lastModifiedDate":"2022-10-12"},{"lineNumber":284,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":285,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":286,"author":{"gitId":"EiffelLKF"},"content":"    */","lastModifiedDate":"2022-10-17"},{"lineNumber":287,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"anthonyhoth":3,"LJXSean":49,"EiffelLKF":42,"-":193}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-12-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_ALICE;","lastModifiedDate":"2022-10-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-04-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2018-08-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-04-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class AddressBookTest {","lastModifiedDate":"2016-12-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);","lastModifiedDate":"2016-12-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":49,"author":{"gitId":"anthonyhoth"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_ALICE).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2022-10-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons);","lastModifiedDate":"2018-03-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2019-03-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"anthonyhoth"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_ALICE).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2022-10-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints.","lastModifiedDate":"2018-03-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {","lastModifiedDate":"2016-12-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();","lastModifiedDate":"2018-01-10"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons) {","lastModifiedDate":"2018-03-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);","lastModifiedDate":"2016-12-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return persons;","lastModifiedDate":"2016-12-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"anthonyhoth":3,"-":99}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2017-05-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2017-07-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;","lastModifiedDate":"2017-05-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2018-12-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":96,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":97,"author":{"gitId":"LJXSean"},"content":"    public void getFilteredRecordList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2022-10-12"},{"lineNumber":98,"author":{"gitId":"LJXSean"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredRecordList().remove(0));","lastModifiedDate":"2022-10-12"},{"lineNumber":99,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":100,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();","lastModifiedDate":"2017-07-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2018-08-06"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2017-05-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":125,"author":{"gitId":"anthonyhoth"},"content":"        String[] keywords \u003d ALICE.getName().properCaseName.split(\"\\\\s+\");","lastModifiedDate":"2022-10-25"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2017-06-12"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2018-08-09"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));","lastModifiedDate":"2018-11-27"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"anthonyhoth":1,"LJXSean":5,"-":131}},{"path":"src/test/java/seedu/address/model/person/AppointmentTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package seedu.address.model.person;","lastModifiedDate":"2022-10-21"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-10-21"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-21"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-21"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-21"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-26"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-10-26"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-21"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"class AppointmentTest {","lastModifiedDate":"2022-10-21"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"    public static final DateTimeFormatter DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");","lastModifiedDate":"2022-10-26"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"        assertThrows(NullPointerException.class, () -\u003e Appointment.of(null));","lastModifiedDate":"2022-10-21"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"    public void constructor_invalidInput_throwsIllegalArgumentException() {","lastModifiedDate":"2022-10-21"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"        String invalidInput \u003d \"\";","lastModifiedDate":"2022-10-21"},{"lineNumber":24,"author":{"gitId":"marclzh"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Appointment.of(invalidInput));","lastModifiedDate":"2022-10-21"},{"lineNumber":25,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":26,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":27,"author":{"gitId":"marclzh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":28,"author":{"gitId":"marclzh"},"content":"    public void isValidDate() {","lastModifiedDate":"2022-10-21"},{"lineNumber":29,"author":{"gitId":"hanwenlai"},"content":"        assertThrows(NullPointerException.class, () -\u003e Appointment.isValidDateFormat(null)); // null date","lastModifiedDate":"2022-10-27"},{"lineNumber":30,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":31,"author":{"gitId":"marclzh"},"content":"        // invalid dates","lastModifiedDate":"2022-10-21"},{"lineNumber":32,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(Appointment.isValidDateFormat(\"\")); // empty string","lastModifiedDate":"2022-10-27"},{"lineNumber":33,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(Appointment.isValidDateFormat(\" \")); // spaces only","lastModifiedDate":"2022-10-27"},{"lineNumber":34,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(Appointment.isValidDateFormat(\"02022002 2222\")); // incorrect date format","lastModifiedDate":"2022-10-27"},{"lineNumber":35,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(Appointment.isValidDateFormat(\"11.11.2001 1100\")); // incorrect date format","lastModifiedDate":"2022-10-27"},{"lineNumber":36,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(Appointment.isValidDateFormat(\"2009.09.21 0000\")); // incorrect date format","lastModifiedDate":"2022-10-27"},{"lineNumber":37,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(Appointment.isValidDateFormat(\"10 Jul 2022 1000\")); // incorrect date format","lastModifiedDate":"2022-10-27"},{"lineNumber":38,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(Appointment.isValidDateFormat(\"12 12 2007 1230\")); // incorrect date format","lastModifiedDate":"2022-10-27"},{"lineNumber":39,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(Appointment.isValidDateFormat(\"2004-11-11 1300\")); // incorrect date format","lastModifiedDate":"2022-10-27"},{"lineNumber":40,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(Appointment.isValidDateFormat(\"01-01-2001\")); // missing time","lastModifiedDate":"2022-10-27"},{"lineNumber":41,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(Appointment.isValidDateFormat(\"01-01-2001 3000\")); // invalid time","lastModifiedDate":"2022-10-27"},{"lineNumber":42,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":43,"author":{"gitId":"marclzh"},"content":"        // valid dates","lastModifiedDate":"2022-10-21"},{"lineNumber":44,"author":{"gitId":"hanwenlai"},"content":"        assertTrue(Appointment.isValidDateFormat(\"01-01-2001 1200\"));","lastModifiedDate":"2022-10-27"},{"lineNumber":45,"author":{"gitId":"hanwenlai"},"content":"        assertTrue(Appointment.isValidDateFormat(\"12-02-1927 1230\"));","lastModifiedDate":"2022-10-27"},{"lineNumber":46,"author":{"gitId":"hanwenlai"},"content":"        assertTrue(Appointment.isValidDateFormat(\"31-12-2003 1300\"));","lastModifiedDate":"2022-10-27"},{"lineNumber":47,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":48,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":49,"author":{"gitId":"marclzh"},"content":"    @Test","lastModifiedDate":"2022-10-26"},{"lineNumber":50,"author":{"gitId":"marclzh"},"content":"    public void isFutureDate() {","lastModifiedDate":"2022-10-26"},{"lineNumber":51,"author":{"gitId":"hanwenlai"},"content":"        assertThrows(NullPointerException.class, () -\u003e Appointment.isValidDateFormat(null)); // null date","lastModifiedDate":"2022-10-27"},{"lineNumber":52,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":53,"author":{"gitId":"marclzh"},"content":"        // invalid dates","lastModifiedDate":"2022-10-26"},{"lineNumber":54,"author":{"gitId":"marclzh"},"content":"        assertFalse(Appointment.isFutureDate(LocalDateTime.now()","lastModifiedDate":"2022-10-26"},{"lineNumber":55,"author":{"gitId":"marclzh"},"content":"                .minusDays(1).format(DATE_FORMAT).toString()));","lastModifiedDate":"2022-10-26"},{"lineNumber":56,"author":{"gitId":"marclzh"},"content":"        assertFalse(Appointment.isFutureDate(LocalDateTime.now()","lastModifiedDate":"2022-10-26"},{"lineNumber":57,"author":{"gitId":"marclzh"},"content":"                .minusMonths(1).format(DATE_FORMAT).toString()));","lastModifiedDate":"2022-10-26"},{"lineNumber":58,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":59,"author":{"gitId":"marclzh"},"content":"        // valid dates","lastModifiedDate":"2022-10-26"},{"lineNumber":60,"author":{"gitId":"marclzh"},"content":"        assertTrue(Appointment.isFutureDate(LocalDateTime.now()","lastModifiedDate":"2022-10-26"},{"lineNumber":61,"author":{"gitId":"marclzh"},"content":"                .plusDays(1).format(DATE_FORMAT).toString()));","lastModifiedDate":"2022-10-26"},{"lineNumber":62,"author":{"gitId":"marclzh"},"content":"        assertTrue(Appointment.isFutureDate(LocalDateTime.now()","lastModifiedDate":"2022-10-26"},{"lineNumber":63,"author":{"gitId":"marclzh"},"content":"                .plusMonths(1).format(DATE_FORMAT).toString()));","lastModifiedDate":"2022-10-26"},{"lineNumber":64,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-26"},{"lineNumber":65,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":66,"author":{"gitId":"marclzh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":67,"author":{"gitId":"marclzh"},"content":"    public void isValidAppointment() {","lastModifiedDate":"2022-10-21"},{"lineNumber":68,"author":{"gitId":"marclzh"},"content":"        assertThrows(NullPointerException.class, () -\u003e Appointment.isValidAppointment(null)); // null date","lastModifiedDate":"2022-10-21"},{"lineNumber":69,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":70,"author":{"gitId":"marclzh"},"content":"        // invalid appointments","lastModifiedDate":"2022-10-21"},{"lineNumber":71,"author":{"gitId":"marclzh"},"content":"        assertFalse(Appointment.isValidAppointment(\"02022002 2222\")); // incorrect date format","lastModifiedDate":"2022-10-21"},{"lineNumber":72,"author":{"gitId":"marclzh"},"content":"        assertFalse(Appointment.isValidAppointment(\"11.11.2001 1100\")); // incorrect date format","lastModifiedDate":"2022-10-21"},{"lineNumber":73,"author":{"gitId":"marclzh"},"content":"        assertFalse(Appointment.isValidAppointment(\"2009.09.21 0000\")); // incorrect date format","lastModifiedDate":"2022-10-21"},{"lineNumber":74,"author":{"gitId":"marclzh"},"content":"        assertFalse(Appointment.isValidAppointment(\"10 Jul 2022 1000\")); // incorrect date format","lastModifiedDate":"2022-10-21"},{"lineNumber":75,"author":{"gitId":"marclzh"},"content":"        assertFalse(Appointment.isValidAppointment(\"12 12 2007 1230\")); // incorrect date format","lastModifiedDate":"2022-10-21"},{"lineNumber":76,"author":{"gitId":"marclzh"},"content":"        assertFalse(Appointment.isValidAppointment(\"2004-11-11 1300\")); // incorrect date format","lastModifiedDate":"2022-10-21"},{"lineNumber":77,"author":{"gitId":"marclzh"},"content":"        assertFalse(Appointment.isValidAppointment(\"01-01-2001\")); // missing time","lastModifiedDate":"2022-10-21"},{"lineNumber":78,"author":{"gitId":"marclzh"},"content":"        assertFalse(Appointment.isValidAppointment(\"01-01-2001 3000\")); // invalid time","lastModifiedDate":"2022-10-21"},{"lineNumber":79,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":80,"author":{"gitId":"marclzh"},"content":"        // valid appointments","lastModifiedDate":"2022-10-21"},{"lineNumber":81,"author":{"gitId":"marclzh"},"content":"        assertTrue(Appointment.isValidAppointment(Appointment.NO_APPOINTMENT_SCHEDULED));","lastModifiedDate":"2022-10-21"},{"lineNumber":82,"author":{"gitId":"marclzh"},"content":"        assertTrue(Appointment.isValidAppointment(\"01-01-2001 1200\"));","lastModifiedDate":"2022-10-21"},{"lineNumber":83,"author":{"gitId":"marclzh"},"content":"        assertTrue(Appointment.isValidAppointment(\"12-02-1927 1230\"));","lastModifiedDate":"2022-10-21"},{"lineNumber":84,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":85,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":86,"author":{"gitId":"marclzh"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":87,"author":{"gitId":"marclzh"},"content":"    public void storageFormat() {","lastModifiedDate":"2022-10-21"},{"lineNumber":88,"author":{"gitId":"marclzh"},"content":"        Appointment emptyAppointment \u003d Appointment.of(Appointment.NO_APPOINTMENT_SCHEDULED);","lastModifiedDate":"2022-10-21"},{"lineNumber":89,"author":{"gitId":"marclzh"},"content":"        Appointment testAppointment \u003d Appointment.of(\"01-01-2024 1200\");","lastModifiedDate":"2022-10-26"},{"lineNumber":90,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":91,"author":{"gitId":"marclzh"},"content":"        assertEquals(Appointment.NO_APPOINTMENT_SCHEDULED, emptyAppointment.storageFormat());","lastModifiedDate":"2022-10-21"},{"lineNumber":92,"author":{"gitId":"marclzh"},"content":"        assertEquals(\"01-01-2024 1200\", testAppointment.storageFormat());","lastModifiedDate":"2022-10-26"},{"lineNumber":93,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":94,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-10-21"}],"authorContributionMap":{"marclzh":79,"hanwenlai":15}},{"path":"src/test/java/seedu/address/model/person/BirthdateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hanwenlai"},"content":"package seedu.address.model.person;","lastModifiedDate":"2022-10-19"},{"lineNumber":2,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":3,"author":{"gitId":"hanwenlai"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-10-19"},{"lineNumber":4,"author":{"gitId":"hanwenlai"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-19"},{"lineNumber":5,"author":{"gitId":"hanwenlai"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-19"},{"lineNumber":6,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.model.person.Birthdate.DATE_FORMAT;","lastModifiedDate":"2022-10-27"},{"lineNumber":7,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-19"},{"lineNumber":8,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":9,"author":{"gitId":"hanwenlai"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-10-27"},{"lineNumber":10,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-27"},{"lineNumber":11,"author":{"gitId":"hanwenlai"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-27"},{"lineNumber":12,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-27"},{"lineNumber":13,"author":{"gitId":"hanwenlai"},"content":"class BirthdateTest {","lastModifiedDate":"2022-10-19"},{"lineNumber":14,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":15,"author":{"gitId":"hanwenlai"},"content":"    @Test","lastModifiedDate":"2022-10-19"},{"lineNumber":16,"author":{"gitId":"hanwenlai"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2022-10-19"},{"lineNumber":17,"author":{"gitId":"hanwenlai"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Birthdate(null));","lastModifiedDate":"2022-10-19"},{"lineNumber":18,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-19"},{"lineNumber":19,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":20,"author":{"gitId":"hanwenlai"},"content":"    @Test","lastModifiedDate":"2022-10-19"},{"lineNumber":21,"author":{"gitId":"hanwenlai"},"content":"    public void constructor_invalidDate_throwsIllegalArgumentException() {","lastModifiedDate":"2022-10-19"},{"lineNumber":22,"author":{"gitId":"hanwenlai"},"content":"        String invalidBirthdate \u003d \"2001.09.11\";","lastModifiedDate":"2022-10-19"},{"lineNumber":23,"author":{"gitId":"hanwenlai"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Birthdate(invalidBirthdate));","lastModifiedDate":"2022-10-19"},{"lineNumber":24,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-19"},{"lineNumber":25,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":26,"author":{"gitId":"hanwenlai"},"content":"    @Test","lastModifiedDate":"2022-10-19"},{"lineNumber":27,"author":{"gitId":"hanwenlai"},"content":"    void isValidDateFormat() {","lastModifiedDate":"2022-10-27"},{"lineNumber":28,"author":{"gitId":"hanwenlai"},"content":"        // null birthdate","lastModifiedDate":"2022-10-19"},{"lineNumber":29,"author":{"gitId":"hanwenlai"},"content":"        assertThrows(NullPointerException.class, () -\u003e Birthdate.isValidDateFormat(null));","lastModifiedDate":"2022-10-27"},{"lineNumber":30,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":31,"author":{"gitId":"hanwenlai"},"content":"        // invalid birthdate","lastModifiedDate":"2022-10-19"},{"lineNumber":32,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(Birthdate.isValidDateFormat(\"\")); // empty string","lastModifiedDate":"2022-10-27"},{"lineNumber":33,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(Birthdate.isValidDateFormat(\" \")); // spaces only","lastModifiedDate":"2022-10-27"},{"lineNumber":34,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(Birthdate.isValidDateFormat(\"02022002\")); // incorrect date format","lastModifiedDate":"2022-10-27"},{"lineNumber":35,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(Birthdate.isValidDateFormat(\"11.11.2001\")); // incorrect date format","lastModifiedDate":"2022-10-27"},{"lineNumber":36,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(Birthdate.isValidDateFormat(\"2009.09.21\")); // incorrect date format","lastModifiedDate":"2022-10-27"},{"lineNumber":37,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(Birthdate.isValidDateFormat(\"10 Jul 2022\")); // incorrect date format","lastModifiedDate":"2022-10-27"},{"lineNumber":38,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(Birthdate.isValidDateFormat(\"12 12 2007\")); // incorrect date format","lastModifiedDate":"2022-10-27"},{"lineNumber":39,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(Birthdate.isValidDateFormat(\"2004-11-11\")); // incorrect date format","lastModifiedDate":"2022-10-27"},{"lineNumber":40,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":41,"author":{"gitId":"hanwenlai"},"content":"        // valid birthdate","lastModifiedDate":"2022-10-19"},{"lineNumber":42,"author":{"gitId":"hanwenlai"},"content":"        assertTrue(Birthdate.isValidDateFormat(\"01-01-2001\"));","lastModifiedDate":"2022-10-27"},{"lineNumber":43,"author":{"gitId":"hanwenlai"},"content":"        assertTrue(Birthdate.isValidDateFormat(\"12-02-1927\"));","lastModifiedDate":"2022-10-27"},{"lineNumber":44,"author":{"gitId":"hanwenlai"},"content":"        assertTrue(Birthdate.isValidDateFormat(\"31-12-2003\"));","lastModifiedDate":"2022-10-27"},{"lineNumber":45,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-27"},{"lineNumber":46,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-27"},{"lineNumber":47,"author":{"gitId":"hanwenlai"},"content":"    @Test","lastModifiedDate":"2022-10-27"},{"lineNumber":48,"author":{"gitId":"hanwenlai"},"content":"    void isFutureDate() {","lastModifiedDate":"2022-10-27"},{"lineNumber":49,"author":{"gitId":"hanwenlai"},"content":"        assertTrue(Birthdate.isFutureDate(LocalDate.now().plusYears(10).format(DATE_FORMAT)));","lastModifiedDate":"2022-10-27"},{"lineNumber":50,"author":{"gitId":"hanwenlai"},"content":"        assertTrue(Birthdate.isFutureDate(LocalDate.now().plusDays(1).format(DATE_FORMAT)));","lastModifiedDate":"2022-10-27"},{"lineNumber":51,"author":{"gitId":"hanwenlai"},"content":"        assertTrue(Birthdate.isFutureDate(LocalDate.now().plusMonths(1).format(DATE_FORMAT)));","lastModifiedDate":"2022-10-27"},{"lineNumber":52,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-27"},{"lineNumber":53,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(Birthdate.isFutureDate(LocalDate.now().minusYears(6).format(DATE_FORMAT)));","lastModifiedDate":"2022-10-27"},{"lineNumber":54,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(Birthdate.isFutureDate(LocalDate.now().minusDays(1).format(DATE_FORMAT)));","lastModifiedDate":"2022-10-27"},{"lineNumber":55,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(Birthdate.isFutureDate(LocalDate.now().minusMonths(1).format(DATE_FORMAT)));","lastModifiedDate":"2022-10-27"},{"lineNumber":56,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-19"},{"lineNumber":57,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":58,"author":{"gitId":"hanwenlai"},"content":"    @Test","lastModifiedDate":"2022-10-19"},{"lineNumber":59,"author":{"gitId":"hanwenlai"},"content":"    void calculateAge() {","lastModifiedDate":"2022-10-26"},{"lineNumber":60,"author":{"gitId":"hanwenlai"},"content":"        // set up test Birthdate","lastModifiedDate":"2022-10-19"},{"lineNumber":61,"author":{"gitId":"hanwenlai"},"content":"        Birthdate bd1 \u003d new Birthdate(\"01-04-1974\");","lastModifiedDate":"2022-10-19"},{"lineNumber":62,"author":{"gitId":"hanwenlai"},"content":"        Birthdate bd2 \u003d new Birthdate(\"05-05-1995\");","lastModifiedDate":"2022-10-19"},{"lineNumber":63,"author":{"gitId":"hanwenlai"},"content":"        Birthdate bd3 \u003d new Birthdate(\"03-08-1989\");","lastModifiedDate":"2022-10-19"},{"lineNumber":64,"author":{"gitId":"hanwenlai"},"content":"        Birthdate bd4 \u003d new Birthdate(\"30-03-2003\");","lastModifiedDate":"2022-10-19"},{"lineNumber":65,"author":{"gitId":"hanwenlai"},"content":"        Birthdate bd5 \u003d new Birthdate(\"10-10-2010\");","lastModifiedDate":"2022-10-19"},{"lineNumber":66,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":67,"author":{"gitId":"hanwenlai"},"content":"        assertEquals(48, bd1.calculateAge());","lastModifiedDate":"2022-10-19"},{"lineNumber":68,"author":{"gitId":"hanwenlai"},"content":"        assertEquals(27, bd2.calculateAge());","lastModifiedDate":"2022-10-19"},{"lineNumber":69,"author":{"gitId":"hanwenlai"},"content":"        assertEquals(33, bd3.calculateAge());","lastModifiedDate":"2022-10-19"},{"lineNumber":70,"author":{"gitId":"hanwenlai"},"content":"        assertEquals(19, bd4.calculateAge());","lastModifiedDate":"2022-10-19"},{"lineNumber":71,"author":{"gitId":"hanwenlai"},"content":"        assertEquals(12, bd5.calculateAge());","lastModifiedDate":"2022-10-19"},{"lineNumber":72,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-19"},{"lineNumber":73,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":74,"author":{"gitId":"hanwenlai"},"content":"    @Test","lastModifiedDate":"2022-10-19"},{"lineNumber":75,"author":{"gitId":"hanwenlai"},"content":"    void toDisplayFormat() {","lastModifiedDate":"2022-10-19"},{"lineNumber":76,"author":{"gitId":"hanwenlai"},"content":"        // set up test Birthdate","lastModifiedDate":"2022-10-19"},{"lineNumber":77,"author":{"gitId":"hanwenlai"},"content":"        Birthdate bd1 \u003d new Birthdate(\"01-04-1974\");","lastModifiedDate":"2022-10-19"},{"lineNumber":78,"author":{"gitId":"hanwenlai"},"content":"        Birthdate bd2 \u003d new Birthdate(\"05-05-1995\");","lastModifiedDate":"2022-10-19"},{"lineNumber":79,"author":{"gitId":"hanwenlai"},"content":"        Birthdate bd3 \u003d new Birthdate(\"03-08-1989\");","lastModifiedDate":"2022-10-19"},{"lineNumber":80,"author":{"gitId":"hanwenlai"},"content":"        Birthdate bd4 \u003d new Birthdate(\"30-03-2003\");","lastModifiedDate":"2022-10-19"},{"lineNumber":81,"author":{"gitId":"hanwenlai"},"content":"        Birthdate bd5 \u003d new Birthdate(\"10-10-2010\");","lastModifiedDate":"2022-10-19"},{"lineNumber":82,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":83,"author":{"gitId":"hanwenlai"},"content":"        assertEquals(\"1 Apr 1974\", bd1.toDisplayFormat());","lastModifiedDate":"2022-10-19"},{"lineNumber":84,"author":{"gitId":"hanwenlai"},"content":"        assertEquals(\"5 May 1995\", bd2.toDisplayFormat());","lastModifiedDate":"2022-10-19"},{"lineNumber":85,"author":{"gitId":"hanwenlai"},"content":"        assertEquals(\"3 Aug 1989\", bd3.toDisplayFormat());","lastModifiedDate":"2022-10-19"},{"lineNumber":86,"author":{"gitId":"hanwenlai"},"content":"        assertEquals(\"30 Mar 2003\", bd4.toDisplayFormat());","lastModifiedDate":"2022-10-19"},{"lineNumber":87,"author":{"gitId":"hanwenlai"},"content":"        assertEquals(\"10 Oct 2010\", bd5.toDisplayFormat());","lastModifiedDate":"2022-10-19"},{"lineNumber":88,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-19"},{"lineNumber":89,"author":{"gitId":"hanwenlai"},"content":"}","lastModifiedDate":"2022-10-19"}],"authorContributionMap":{"hanwenlai":89}},{"path":"src/test/java/seedu/address/model/person/DisplayedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"EiffelLKF"},"content":"package seedu.address.model.person;","lastModifiedDate":"2022-10-12"},{"lineNumber":2,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":3,"author":{"gitId":"EiffelLKF"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2022-10-12"},{"lineNumber":4,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;","lastModifiedDate":"2022-10-12"},{"lineNumber":5,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-12"},{"lineNumber":6,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":7,"author":{"gitId":"EiffelLKF"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-12"},{"lineNumber":8,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":9,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-12"},{"lineNumber":10,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-10-12"},{"lineNumber":11,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-10-12"},{"lineNumber":12,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2022-10-12"},{"lineNumber":13,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2022-10-12"},{"lineNumber":14,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":15,"author":{"gitId":"EiffelLKF"},"content":"/**","lastModifiedDate":"2022-10-12"},{"lineNumber":16,"author":{"gitId":"EiffelLKF"},"content":" * Test cases for {@code DisplayedPerson}","lastModifiedDate":"2022-10-12"},{"lineNumber":17,"author":{"gitId":"EiffelLKF"},"content":" */","lastModifiedDate":"2022-10-12"},{"lineNumber":18,"author":{"gitId":"EiffelLKF"},"content":"public class DisplayedPersonTest {","lastModifiedDate":"2022-10-12"},{"lineNumber":19,"author":{"gitId":"EiffelLKF"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-12"},{"lineNumber":20,"author":{"gitId":"EiffelLKF"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-12"},{"lineNumber":21,"author":{"gitId":"EiffelLKF"},"content":"    private DisplayedPerson defaultPerson \u003d new DisplayedPerson(GEORGE);","lastModifiedDate":"2022-10-12"},{"lineNumber":22,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":23,"author":{"gitId":"EiffelLKF"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":24,"author":{"gitId":"EiffelLKF"},"content":"    public void setDisplayedPerson_nullPerson_nullPointerExceptionThrown() {","lastModifiedDate":"2022-10-12"},{"lineNumber":25,"author":{"gitId":"EiffelLKF"},"content":"        try {","lastModifiedDate":"2022-10-12"},{"lineNumber":26,"author":{"gitId":"EiffelLKF"},"content":"            defaultPerson.setDisplayedPerson((Person) null, getTypicalAddressBook());","lastModifiedDate":"2022-10-12"},{"lineNumber":27,"author":{"gitId":"EiffelLKF"},"content":"            fail(); // should not reach this step","lastModifiedDate":"2022-10-12"},{"lineNumber":28,"author":{"gitId":"EiffelLKF"},"content":"        } catch (NullPointerException npe) {","lastModifiedDate":"2022-10-12"},{"lineNumber":29,"author":{"gitId":"EiffelLKF"},"content":"            assert true;","lastModifiedDate":"2022-10-12"},{"lineNumber":30,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-12"},{"lineNumber":31,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":32,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":33,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-12"},{"lineNumber":34,"author":{"gitId":"EiffelLKF"},"content":"     * pass if PersonNotFoundException is thrown when attempting to set a {@code Person} not","lastModifiedDate":"2022-10-12"},{"lineNumber":35,"author":{"gitId":"EiffelLKF"},"content":"     * found in addressbook.","lastModifiedDate":"2022-10-12"},{"lineNumber":36,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-12"},{"lineNumber":37,"author":{"gitId":"EiffelLKF"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":38,"author":{"gitId":"EiffelLKF"},"content":"    public void setDisplayedPerson_invalidPerson_personNotFoundExceptionThrown() {","lastModifiedDate":"2022-10-12"},{"lineNumber":39,"author":{"gitId":"EiffelLKF"},"content":"        try {","lastModifiedDate":"2022-10-12"},{"lineNumber":40,"author":{"gitId":"EiffelLKF"},"content":"            Person invalidPerson \u003d new PersonBuilder().withName(\"Person\")","lastModifiedDate":"2022-10-12"},{"lineNumber":41,"author":{"gitId":"EiffelLKF"},"content":"                    .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"Person@example.com\")","lastModifiedDate":"2022-10-12"},{"lineNumber":42,"author":{"gitId":"EiffelLKF"},"content":"                    .withPhone(\"12345678\")","lastModifiedDate":"2022-10-12"},{"lineNumber":43,"author":{"gitId":"EiffelLKF"},"content":"                    .build();","lastModifiedDate":"2022-10-12"},{"lineNumber":44,"author":{"gitId":"EiffelLKF"},"content":"            defaultPerson.setDisplayedPerson(invalidPerson, getTypicalAddressBook());","lastModifiedDate":"2022-10-12"},{"lineNumber":45,"author":{"gitId":"EiffelLKF"},"content":"            fail(); // should not reach this step","lastModifiedDate":"2022-10-12"},{"lineNumber":46,"author":{"gitId":"EiffelLKF"},"content":"        } catch (PersonNotFoundException pnfe) {","lastModifiedDate":"2022-10-12"},{"lineNumber":47,"author":{"gitId":"EiffelLKF"},"content":"            assert true;","lastModifiedDate":"2022-10-12"},{"lineNumber":48,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-12"},{"lineNumber":49,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":50,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":51,"author":{"gitId":"EiffelLKF"},"content":"}","lastModifiedDate":"2022-10-12"}],"authorContributionMap":{"EiffelLKF":51}},{"path":"src/test/java/seedu/address/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2018-03-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"hanwenlai"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-10-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_ALICE;","lastModifiedDate":"2022-10-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-04-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2018-04-19"},{"lineNumber":14,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2022-10-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":16,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;","lastModifiedDate":"2022-10-19"},{"lineNumber":17,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;","lastModifiedDate":"2022-10-19"},{"lineNumber":18,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;","lastModifiedDate":"2022-10-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-03-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class PersonTest {","lastModifiedDate":"2018-03-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2018-03-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void isSamePerson() {","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true","lastModifiedDate":"2020-12-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2020-12-18"},{"lineNumber":42,"author":{"gitId":"anthonyhoth"},"content":"                .withAddress(VALID_ADDRESS_ALICE).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2022-10-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2020-12-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":49,"author":{"gitId":"anthonyhoth"},"content":"        // name differs in case, all other attributes same -\u003e returns true","lastModifiedDate":"2022-10-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":51,"author":{"gitId":"anthonyhoth"},"content":"        assertTrue(BOB.isSamePerson(editedBob));","lastModifiedDate":"2022-10-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";","lastModifiedDate":"2020-12-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":59,"author":{"gitId":"hanwenlai"},"content":"    @Test","lastModifiedDate":"2022-10-19"},{"lineNumber":60,"author":{"gitId":"hanwenlai"},"content":"    public void getAge() {","lastModifiedDate":"2022-10-19"},{"lineNumber":61,"author":{"gitId":"hanwenlai"},"content":"        assertEquals(78, ALICE.getAge());","lastModifiedDate":"2022-10-19"},{"lineNumber":62,"author":{"gitId":"hanwenlai"},"content":"        assertEquals(34, BENSON.getAge());","lastModifiedDate":"2022-10-19"},{"lineNumber":63,"author":{"gitId":"hanwenlai"},"content":"        assertEquals(20, CARL.getAge());","lastModifiedDate":"2022-10-19"},{"lineNumber":64,"author":{"gitId":"hanwenlai"},"content":"        assertEquals(26, DANIEL.getAge());","lastModifiedDate":"2022-10-19"},{"lineNumber":65,"author":{"gitId":"hanwenlai"},"content":"        assertEquals(29, ELLE.getAge());","lastModifiedDate":"2022-10-19"},{"lineNumber":66,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-19"},{"lineNumber":67,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":68,"author":{"gitId":"hanwenlai"},"content":"    @Test","lastModifiedDate":"2022-10-19"},{"lineNumber":69,"author":{"gitId":"hanwenlai"},"content":"    public void displayBirthdate() {","lastModifiedDate":"2022-10-19"},{"lineNumber":70,"author":{"gitId":"hanwenlai"},"content":"        assertEquals(\"4 Apr 1944\", ALICE.displayBirthdate());","lastModifiedDate":"2022-10-19"},{"lineNumber":71,"author":{"gitId":"hanwenlai"},"content":"        assertEquals(\"8 Aug 1988\", BENSON.displayBirthdate());","lastModifiedDate":"2022-10-19"},{"lineNumber":72,"author":{"gitId":"hanwenlai"},"content":"        assertEquals(\"2 Feb 2002\", CARL.displayBirthdate());","lastModifiedDate":"2022-10-19"},{"lineNumber":73,"author":{"gitId":"hanwenlai"},"content":"        assertEquals(\"6 Jun 1996\", DANIEL.displayBirthdate());","lastModifiedDate":"2022-10-19"},{"lineNumber":74,"author":{"gitId":"hanwenlai"},"content":"        assertEquals(\"13 Mar 1993\", ELLE.displayBirthdate());","lastModifiedDate":"2022-10-19"},{"lineNumber":75,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-19"},{"lineNumber":76,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2018-04-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2018-04-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2018-04-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2018-04-18"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":115,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"anthonyhoth":4,"hanwenlai":23,"-":88}},{"path":"src/test/java/seedu/address/model/person/PhoneTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2017-01-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class PhoneTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Phone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidPhone \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidPhone() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null phone number","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(Phone.isValidPhone(\"9111\")); // less than 5 numbers","lastModifiedDate":"2022-11-01"},{"lineNumber":31,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(Phone.isValidPhone(\"1234567812345678\")); // more than 15 numbers","lastModifiedDate":"2022-11-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // valid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"hanwenlai"},"content":"        assertTrue(Phone.isValidPhone(\"91111\")); // exactly 5 numbers","lastModifiedDate":"2022-11-01"},{"lineNumber":38,"author":{"gitId":"hanwenlai"},"content":"        assertTrue(Phone.isValidPhone(\"123456781234567\")); // exactly 15 numbers","lastModifiedDate":"2022-11-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"hanwenlai"},"content":"        assertTrue(Phone.isValidPhone(\"12429384203312\")); // long phone numbers","lastModifiedDate":"2022-11-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"hanwenlai":5,"-":37}},{"path":"src/test/java/seedu/address/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2018-08-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_ALICE;","lastModifiedDate":"2022-10-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2018-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2018-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class UniquePersonListTest {","lastModifiedDate":"2017-09-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {","lastModifiedDate":"2018-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":46,"author":{"gitId":"anthonyhoth"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_ALICE).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2022-10-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(editedAlice));","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));","lastModifiedDate":"2019-03-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        uniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));","lastModifiedDate":"2019-03-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {","lastModifiedDate":"2018-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        uniquePersonList.remove(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(expectedUniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(personList);","lastModifiedDate":"2018-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));","lastModifiedDate":"2019-03-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2018-04-05"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":171,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"anthonyhoth":2,"-":169}},{"path":"src/test/java/seedu/address/model/record/MedicationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"EiffelLKF"},"content":"package seedu.address.model.record;","lastModifiedDate":"2022-10-17"},{"lineNumber":2,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":3,"author":{"gitId":"EiffelLKF"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-17"},{"lineNumber":4,"author":{"gitId":"EiffelLKF"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-17"},{"lineNumber":5,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RECORD_MEDICATION;","lastModifiedDate":"2022-10-17"},{"lineNumber":6,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":7,"author":{"gitId":"EiffelLKF"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-17"},{"lineNumber":8,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":9,"author":{"gitId":"EiffelLKF"},"content":"public class MedicationTest {","lastModifiedDate":"2022-10-17"},{"lineNumber":10,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":11,"author":{"gitId":"EiffelLKF"},"content":"    private final Medication validMedication \u003d Medication.of(VALID_RECORD_MEDICATION);","lastModifiedDate":"2022-10-17"},{"lineNumber":12,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":13,"author":{"gitId":"EiffelLKF"},"content":"    @Test","lastModifiedDate":"2022-10-17"},{"lineNumber":14,"author":{"gitId":"EiffelLKF"},"content":"    public void equals() {","lastModifiedDate":"2022-10-17"},{"lineNumber":15,"author":{"gitId":"EiffelLKF"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-10-17"},{"lineNumber":16,"author":{"gitId":"EiffelLKF"},"content":"        Medication medicationCopy \u003d Medication.of(VALID_RECORD_MEDICATION);","lastModifiedDate":"2022-10-17"},{"lineNumber":17,"author":{"gitId":"EiffelLKF"},"content":"        assertTrue(validMedication.equals(medicationCopy));","lastModifiedDate":"2022-10-17"},{"lineNumber":18,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":19,"author":{"gitId":"EiffelLKF"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-10-17"},{"lineNumber":20,"author":{"gitId":"EiffelLKF"},"content":"        assertTrue(validMedication.equals(validMedication));","lastModifiedDate":"2022-10-17"},{"lineNumber":21,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":22,"author":{"gitId":"EiffelLKF"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-10-17"},{"lineNumber":23,"author":{"gitId":"EiffelLKF"},"content":"        assertFalse(validMedication.equals(null));","lastModifiedDate":"2022-10-17"},{"lineNumber":24,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":25,"author":{"gitId":"EiffelLKF"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2022-10-17"},{"lineNumber":26,"author":{"gitId":"EiffelLKF"},"content":"        assertFalse(validMedication.equals(5));","lastModifiedDate":"2022-10-17"},{"lineNumber":27,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":28,"author":{"gitId":"EiffelLKF"},"content":"        // different medication -\u003e returns false","lastModifiedDate":"2022-10-17"},{"lineNumber":29,"author":{"gitId":"EiffelLKF"},"content":"        assertFalse(validMedication.equals(Medication.of(\"Test\")));","lastModifiedDate":"2022-10-17"},{"lineNumber":30,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":31,"author":{"gitId":"EiffelLKF"},"content":"}","lastModifiedDate":"2022-10-17"},{"lineNumber":32,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"}],"authorContributionMap":{"EiffelLKF":32}},{"path":"src/test/java/seedu/address/model/record/RecordContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"EiffelLKF"},"content":"package seedu.address.model.record;","lastModifiedDate":"2022-10-17"},{"lineNumber":2,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":3,"author":{"gitId":"LJXSean"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-12"},{"lineNumber":4,"author":{"gitId":"LJXSean"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-12"},{"lineNumber":5,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":6,"author":{"gitId":"EiffelLKF"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-17"},{"lineNumber":7,"author":{"gitId":"LJXSean"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-12"},{"lineNumber":8,"author":{"gitId":"LJXSean"},"content":"import java.util.Collections;","lastModifiedDate":"2022-10-12"},{"lineNumber":9,"author":{"gitId":"LJXSean"},"content":"import java.util.List;","lastModifiedDate":"2022-10-12"},{"lineNumber":10,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":11,"author":{"gitId":"LJXSean"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-12"},{"lineNumber":12,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":13,"author":{"gitId":"LJXSean"},"content":"public class RecordContainsKeywordsPredicateTest {","lastModifiedDate":"2022-10-12"},{"lineNumber":14,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":15,"author":{"gitId":"EiffelLKF"},"content":"    private Record recordWithKeywords \u003d new Record(LocalDateTime.parse(\"10-10-2000 1400\",","lastModifiedDate":"2022-10-17"},{"lineNumber":16,"author":{"gitId":"EiffelLKF"},"content":"            Record.DATE_FORMAT), \"Covid-19 Flu SARS\");","lastModifiedDate":"2022-10-17"},{"lineNumber":17,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":18,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":19,"author":{"gitId":"LJXSean"},"content":"    public void equals() {","lastModifiedDate":"2022-10-12"},{"lineNumber":20,"author":{"gitId":"LJXSean"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2022-10-12"},{"lineNumber":21,"author":{"gitId":"LJXSean"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2022-10-12"},{"lineNumber":22,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":23,"author":{"gitId":"LJXSean"},"content":"        RecordContainsKeywordsPredicate firstPredicate \u003d new RecordContainsKeywordsPredicate(","lastModifiedDate":"2022-10-26"},{"lineNumber":24,"author":{"gitId":"LJXSean"},"content":"                firstPredicateKeywordList, firstPredicateKeywordList, \"10-2022\");","lastModifiedDate":"2022-10-26"},{"lineNumber":25,"author":{"gitId":"LJXSean"},"content":"        RecordContainsKeywordsPredicate secondPredicate \u003d new RecordContainsKeywordsPredicate(","lastModifiedDate":"2022-10-12"},{"lineNumber":26,"author":{"gitId":"LJXSean"},"content":"                secondPredicateKeywordList, secondPredicateKeywordList, \"12-2012\");","lastModifiedDate":"2022-10-26"},{"lineNumber":27,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":28,"author":{"gitId":"LJXSean"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-10-12"},{"lineNumber":29,"author":{"gitId":"LJXSean"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2022-10-12"},{"lineNumber":30,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":31,"author":{"gitId":"LJXSean"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-10-12"},{"lineNumber":32,"author":{"gitId":"LJXSean"},"content":"        RecordContainsKeywordsPredicate firstPredicateCopy \u003d new RecordContainsKeywordsPredicate(","lastModifiedDate":"2022-10-12"},{"lineNumber":33,"author":{"gitId":"LJXSean"},"content":"                firstPredicateKeywordList, firstPredicateKeywordList, \"10-2022\");","lastModifiedDate":"2022-10-26"},{"lineNumber":34,"author":{"gitId":"LJXSean"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2022-10-12"},{"lineNumber":35,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":36,"author":{"gitId":"LJXSean"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2022-10-12"},{"lineNumber":37,"author":{"gitId":"LJXSean"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2022-10-12"},{"lineNumber":38,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":39,"author":{"gitId":"LJXSean"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-10-12"},{"lineNumber":40,"author":{"gitId":"LJXSean"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2022-10-12"},{"lineNumber":41,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":42,"author":{"gitId":"LJXSean"},"content":"        // different record -\u003e returns false","lastModifiedDate":"2022-10-26"},{"lineNumber":43,"author":{"gitId":"LJXSean"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2022-10-12"},{"lineNumber":44,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":45,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":46,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":47,"author":{"gitId":"LJXSean"},"content":"    public void test_recordFieldsContainsKeywords_returnsTrue() {","lastModifiedDate":"2022-10-26"},{"lineNumber":48,"author":{"gitId":"LJXSean"},"content":"        List\u003cString\u003e nonSpecifiedKeyword \u003d Arrays.asList();","lastModifiedDate":"2022-10-26"},{"lineNumber":49,"author":{"gitId":"LJXSean"},"content":"        String nonSpecifiedDate \u003d \"\";","lastModifiedDate":"2022-10-26"},{"lineNumber":50,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":51,"author":{"gitId":"LJXSean"},"content":"        // One keyword","lastModifiedDate":"2022-10-12"},{"lineNumber":52,"author":{"gitId":"LJXSean"},"content":"        RecordContainsKeywordsPredicate predicate \u003d new RecordContainsKeywordsPredicate(","lastModifiedDate":"2022-10-12"},{"lineNumber":53,"author":{"gitId":"LJXSean"},"content":"                Collections.singletonList(\"Flu\"), nonSpecifiedKeyword, nonSpecifiedDate);","lastModifiedDate":"2022-10-26"},{"lineNumber":54,"author":{"gitId":"LJXSean"},"content":"        assertTrue(predicate.test(recordWithKeywords));","lastModifiedDate":"2022-10-12"},{"lineNumber":55,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":56,"author":{"gitId":"LJXSean"},"content":"        // Multiple keywords","lastModifiedDate":"2022-10-12"},{"lineNumber":57,"author":{"gitId":"LJXSean"},"content":"        predicate \u003d new RecordContainsKeywordsPredicate(","lastModifiedDate":"2022-10-26"},{"lineNumber":58,"author":{"gitId":"LJXSean"},"content":"                Arrays.asList(\"Covid-19\", \"Flu\"), nonSpecifiedKeyword, nonSpecifiedDate);","lastModifiedDate":"2022-10-26"},{"lineNumber":59,"author":{"gitId":"LJXSean"},"content":"        assertTrue(predicate.test(recordWithKeywords));","lastModifiedDate":"2022-10-12"},{"lineNumber":60,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":61,"author":{"gitId":"LJXSean"},"content":"        // Only one matching keyword","lastModifiedDate":"2022-10-12"},{"lineNumber":62,"author":{"gitId":"LJXSean"},"content":"        predicate \u003d new RecordContainsKeywordsPredicate(","lastModifiedDate":"2022-10-26"},{"lineNumber":63,"author":{"gitId":"LJXSean"},"content":"                Arrays.asList(\"Covid-19\", \"H1N1\"), nonSpecifiedKeyword, nonSpecifiedDate);","lastModifiedDate":"2022-10-26"},{"lineNumber":64,"author":{"gitId":"LJXSean"},"content":"        assertTrue(predicate.test(recordWithKeywords));","lastModifiedDate":"2022-10-12"},{"lineNumber":65,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":66,"author":{"gitId":"LJXSean"},"content":"        // Mixed-case keywords","lastModifiedDate":"2022-10-12"},{"lineNumber":67,"author":{"gitId":"LJXSean"},"content":"        predicate \u003d new RecordContainsKeywordsPredicate(","lastModifiedDate":"2022-10-26"},{"lineNumber":68,"author":{"gitId":"LJXSean"},"content":"                Arrays.asList(\"cOVid-19\", \"h1n1\"), nonSpecifiedKeyword, nonSpecifiedDate);","lastModifiedDate":"2022-10-26"},{"lineNumber":69,"author":{"gitId":"LJXSean"},"content":"        assertTrue(predicate.test(recordWithKeywords));","lastModifiedDate":"2022-10-12"},{"lineNumber":70,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":71,"author":{"gitId":"LJXSean"},"content":"        // Correct find date format","lastModifiedDate":"2022-10-26"},{"lineNumber":72,"author":{"gitId":"LJXSean"},"content":"        predicate \u003d new RecordContainsKeywordsPredicate(","lastModifiedDate":"2022-10-26"},{"lineNumber":73,"author":{"gitId":"LJXSean"},"content":"                nonSpecifiedKeyword, nonSpecifiedKeyword, \"10-2000\");","lastModifiedDate":"2022-10-26"},{"lineNumber":74,"author":{"gitId":"LJXSean"},"content":"        assertTrue(predicate.test(recordWithKeywords));","lastModifiedDate":"2022-10-26"},{"lineNumber":75,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":76,"author":{"gitId":"LJXSean"},"content":"}","lastModifiedDate":"2022-10-12"}],"authorContributionMap":{"LJXSean":72,"EiffelLKF":4}},{"path":"src/test/java/seedu/address/model/record/RecordTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"EiffelLKF"},"content":"package seedu.address.model.record;","lastModifiedDate":"2022-10-17"},{"lineNumber":2,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":3,"author":{"gitId":"EiffelLKF"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-17"},{"lineNumber":4,"author":{"gitId":"EiffelLKF"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-17"},{"lineNumber":5,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RECORD_DATA;","lastModifiedDate":"2022-10-17"},{"lineNumber":6,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RECORD_DATE;","lastModifiedDate":"2022-10-17"},{"lineNumber":7,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RECORD_MEDICATION;","lastModifiedDate":"2022-10-17"},{"lineNumber":8,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.model.record.Record.DATE_FORMAT;","lastModifiedDate":"2022-10-27"},{"lineNumber":9,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-27"},{"lineNumber":10,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.testutil.TypicalPersons.RECORD1;","lastModifiedDate":"2022-10-17"},{"lineNumber":11,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.testutil.TypicalPersons.RECORD2;","lastModifiedDate":"2022-10-17"},{"lineNumber":12,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":13,"author":{"gitId":"hanwenlai"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-27"},{"lineNumber":14,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-27"},{"lineNumber":15,"author":{"gitId":"EiffelLKF"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-17"},{"lineNumber":16,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":17,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.testutil.RecordBuilder;","lastModifiedDate":"2022-10-17"},{"lineNumber":18,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":19,"author":{"gitId":"EiffelLKF"},"content":"public class RecordTest {","lastModifiedDate":"2022-10-17"},{"lineNumber":20,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":21,"author":{"gitId":"hanwenlai"},"content":"    @Test","lastModifiedDate":"2022-10-27"},{"lineNumber":22,"author":{"gitId":"hanwenlai"},"content":"    public void isValidDateFormat() {","lastModifiedDate":"2022-10-27"},{"lineNumber":23,"author":{"gitId":"hanwenlai"},"content":"        assertThrows(NullPointerException.class, () -\u003e Record.isValidDateFormat(null)); // null date","lastModifiedDate":"2022-10-27"},{"lineNumber":24,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-27"},{"lineNumber":25,"author":{"gitId":"hanwenlai"},"content":"        // invalid dates","lastModifiedDate":"2022-10-27"},{"lineNumber":26,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(Record.isValidDateFormat(\"\")); // empty string","lastModifiedDate":"2022-10-27"},{"lineNumber":27,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(Record.isValidDateFormat(\" \")); // spaces only","lastModifiedDate":"2022-10-27"},{"lineNumber":28,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(Record.isValidDateFormat(\"02022002 2222\")); // incorrect date format","lastModifiedDate":"2022-10-27"},{"lineNumber":29,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(Record.isValidDateFormat(\"11.11.2001 1100\")); // incorrect date format","lastModifiedDate":"2022-10-27"},{"lineNumber":30,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(Record.isValidDateFormat(\"2009.09.21 0000\")); // incorrect date format","lastModifiedDate":"2022-10-27"},{"lineNumber":31,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(Record.isValidDateFormat(\"10 Jul 2022 1000\")); // incorrect date format","lastModifiedDate":"2022-10-27"},{"lineNumber":32,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(Record.isValidDateFormat(\"12 12 2007 1230\")); // incorrect date format","lastModifiedDate":"2022-10-27"},{"lineNumber":33,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(Record.isValidDateFormat(\"2004-11-11 1300\")); // incorrect date format","lastModifiedDate":"2022-10-27"},{"lineNumber":34,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(Record.isValidDateFormat(\"01-01-2001\")); // missing time","lastModifiedDate":"2022-10-27"},{"lineNumber":35,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(Record.isValidDateFormat(\"01-01-2001 3000\")); // invalid time","lastModifiedDate":"2022-10-27"},{"lineNumber":36,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-27"},{"lineNumber":37,"author":{"gitId":"hanwenlai"},"content":"        // valid dates","lastModifiedDate":"2022-10-27"},{"lineNumber":38,"author":{"gitId":"hanwenlai"},"content":"        assertTrue(Record.isValidDateFormat(\"01-01-2001 1200\"));","lastModifiedDate":"2022-10-27"},{"lineNumber":39,"author":{"gitId":"hanwenlai"},"content":"        assertTrue(Record.isValidDateFormat(\"12-02-1927 1230\"));","lastModifiedDate":"2022-10-27"},{"lineNumber":40,"author":{"gitId":"hanwenlai"},"content":"        assertTrue(Record.isValidDateFormat(\"31-12-2003 1300\"));","lastModifiedDate":"2022-10-27"},{"lineNumber":41,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-27"},{"lineNumber":42,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-27"},{"lineNumber":43,"author":{"gitId":"hanwenlai"},"content":"    @Test","lastModifiedDate":"2022-10-27"},{"lineNumber":44,"author":{"gitId":"hanwenlai"},"content":"    void isFutureDate() {","lastModifiedDate":"2022-10-27"},{"lineNumber":45,"author":{"gitId":"hanwenlai"},"content":"        assertTrue(Record.isFutureDate(LocalDateTime.now().plusYears(10).format(DATE_FORMAT)));","lastModifiedDate":"2022-10-27"},{"lineNumber":46,"author":{"gitId":"hanwenlai"},"content":"        assertTrue(Record.isFutureDate(LocalDateTime.now().plusDays(1).format(DATE_FORMAT)));","lastModifiedDate":"2022-10-27"},{"lineNumber":47,"author":{"gitId":"hanwenlai"},"content":"        assertTrue(Record.isFutureDate(LocalDateTime.now().plusHours(1).format(DATE_FORMAT)));","lastModifiedDate":"2022-10-27"},{"lineNumber":48,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-27"},{"lineNumber":49,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(Record.isFutureDate(LocalDateTime.now().minusYears(6).format(DATE_FORMAT)));","lastModifiedDate":"2022-10-27"},{"lineNumber":50,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(Record.isFutureDate(LocalDateTime.now().minusDays(1).format(DATE_FORMAT)));","lastModifiedDate":"2022-10-27"},{"lineNumber":51,"author":{"gitId":"hanwenlai"},"content":"        assertFalse(Record.isFutureDate(LocalDateTime.now().minusHours(1).format(DATE_FORMAT)));","lastModifiedDate":"2022-10-27"},{"lineNumber":52,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-27"},{"lineNumber":53,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-27"},{"lineNumber":54,"author":{"gitId":"EiffelLKF"},"content":"    @Test","lastModifiedDate":"2022-10-17"},{"lineNumber":55,"author":{"gitId":"EiffelLKF"},"content":"    public void equals() {","lastModifiedDate":"2022-10-17"},{"lineNumber":56,"author":{"gitId":"EiffelLKF"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-10-17"},{"lineNumber":57,"author":{"gitId":"EiffelLKF"},"content":"        Record recordCopy \u003d new RecordBuilder(RECORD1).build();","lastModifiedDate":"2022-10-17"},{"lineNumber":58,"author":{"gitId":"EiffelLKF"},"content":"        assertTrue(RECORD1.equals(recordCopy));","lastModifiedDate":"2022-10-17"},{"lineNumber":59,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":60,"author":{"gitId":"EiffelLKF"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-10-17"},{"lineNumber":61,"author":{"gitId":"EiffelLKF"},"content":"        assertTrue(RECORD1.equals(RECORD1));","lastModifiedDate":"2022-10-17"},{"lineNumber":62,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":63,"author":{"gitId":"EiffelLKF"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-10-17"},{"lineNumber":64,"author":{"gitId":"EiffelLKF"},"content":"        assertFalse(RECORD1.equals(null));","lastModifiedDate":"2022-10-17"},{"lineNumber":65,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":66,"author":{"gitId":"EiffelLKF"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2022-10-17"},{"lineNumber":67,"author":{"gitId":"EiffelLKF"},"content":"        assertFalse(RECORD1.equals(5));","lastModifiedDate":"2022-10-17"},{"lineNumber":68,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":69,"author":{"gitId":"EiffelLKF"},"content":"        // different record -\u003e returns false","lastModifiedDate":"2022-10-17"},{"lineNumber":70,"author":{"gitId":"EiffelLKF"},"content":"        assertFalse(RECORD1.equals(RECORD2));","lastModifiedDate":"2022-10-17"},{"lineNumber":71,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":72,"author":{"gitId":"EiffelLKF"},"content":"        // different date -\u003e returns false","lastModifiedDate":"2022-10-17"},{"lineNumber":73,"author":{"gitId":"EiffelLKF"},"content":"        Record editedRecord \u003d new RecordBuilder(RECORD1).withRecordDate(VALID_RECORD_DATE).build();","lastModifiedDate":"2022-10-17"},{"lineNumber":74,"author":{"gitId":"EiffelLKF"},"content":"        assertFalse(RECORD1.equals(editedRecord));","lastModifiedDate":"2022-10-17"},{"lineNumber":75,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":76,"author":{"gitId":"EiffelLKF"},"content":"        // different data -\u003e returns false","lastModifiedDate":"2022-10-17"},{"lineNumber":77,"author":{"gitId":"EiffelLKF"},"content":"        editedRecord \u003d new RecordBuilder(RECORD1).withRecordData(VALID_RECORD_DATA).build();","lastModifiedDate":"2022-10-17"},{"lineNumber":78,"author":{"gitId":"EiffelLKF"},"content":"        assertFalse(RECORD1.equals(editedRecord));","lastModifiedDate":"2022-10-17"},{"lineNumber":79,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":80,"author":{"gitId":"EiffelLKF"},"content":"        // different medications -\u003e returns false","lastModifiedDate":"2022-10-17"},{"lineNumber":81,"author":{"gitId":"EiffelLKF"},"content":"        editedRecord \u003d new RecordBuilder(RECORD1).withMedications(VALID_RECORD_MEDICATION).build();","lastModifiedDate":"2022-10-17"},{"lineNumber":82,"author":{"gitId":"EiffelLKF"},"content":"        assertFalse(RECORD1.equals(editedRecord));","lastModifiedDate":"2022-10-17"},{"lineNumber":83,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":84,"author":{"gitId":"EiffelLKF"},"content":"}","lastModifiedDate":"2022-10-17"}],"authorContributionMap":{"hanwenlai":37,"EiffelLKF":47}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2022-10-18"},{"lineNumber":16,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.model.person.Birthdate;","lastModifiedDate":"2022-10-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2022-10-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2022-10-18"},{"lineNumber":20,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2022-10-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"hanwenlai"},"content":"    private static final String INVALID_BIRTHDATE \u003d \"04042004\";","lastModifiedDate":"2022-10-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"EiffelLKF"},"content":"    private static final String INVALID_RECORD_DATE \u003d \"10102000 1430\";","lastModifiedDate":"2022-10-17"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"hanwenlai"},"content":"    private static final String VALID_BIRTHDATE \u003d BENSON.getBirthdate().toString();","lastModifiedDate":"2022-10-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"hanwenlai"},"content":"    private static final List\u003cJsonAdaptedRecord\u003e VALID_RECORDLIST \u003d BENSON.getRecordList()","lastModifiedDate":"2022-10-10"},{"lineNumber":37,"author":{"gitId":"hanwenlai"},"content":"            .asUnmodifiableObservableList().stream()","lastModifiedDate":"2022-10-10"},{"lineNumber":38,"author":{"gitId":"LJXSean"},"content":"            .map(JsonAdaptedRecord::new)","lastModifiedDate":"2022-10-09"},{"lineNumber":39,"author":{"gitId":"LJXSean"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2022-10-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"marclzh"},"content":"    private static final String VALID_APPOINTMENT \u003d BENSON.getAppointment().toString();","lastModifiedDate":"2022-10-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"hanwenlai"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_BIRTHDATE, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2022-10-19"},{"lineNumber":55,"author":{"gitId":"marclzh"},"content":"                        VALID_ADDRESS, VALID_TAGS, VALID_RECORDLIST, VALID_APPOINTMENT);","lastModifiedDate":"2022-10-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"hanwenlai"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_BIRTHDATE, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2022-10-19"},{"lineNumber":63,"author":{"gitId":"marclzh"},"content":"                VALID_ADDRESS, VALID_TAGS, VALID_RECORDLIST, VALID_APPOINTMENT);","lastModifiedDate":"2022-10-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"hanwenlai"},"content":"    @Test","lastModifiedDate":"2022-10-18"},{"lineNumber":69,"author":{"gitId":"hanwenlai"},"content":"    public void toModelType_invalidBirthdate_throwsIllegalValueException() {","lastModifiedDate":"2022-10-19"},{"lineNumber":70,"author":{"gitId":"hanwenlai"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2022-10-18"},{"lineNumber":71,"author":{"gitId":"hanwenlai"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_BIRTHDATE, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2022-10-19"},{"lineNumber":72,"author":{"gitId":"hanwenlai"},"content":"                        VALID_ADDRESS, VALID_TAGS, VALID_RECORDLIST, VALID_APPOINTMENT);","lastModifiedDate":"2022-10-18"},{"lineNumber":73,"author":{"gitId":"hanwenlai"},"content":"        String expectedMessage \u003d Birthdate.MESSAGE_INVALID_DATE_FORMAT;","lastModifiedDate":"2022-10-27"},{"lineNumber":74,"author":{"gitId":"hanwenlai"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2022-10-18"},{"lineNumber":75,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":76,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":77,"author":{"gitId":"hanwenlai"},"content":"    @Test","lastModifiedDate":"2022-10-18"},{"lineNumber":78,"author":{"gitId":"hanwenlai"},"content":"    public void toModelType_nullBirthdate_throwsIllegalValueException() {","lastModifiedDate":"2022-10-19"},{"lineNumber":79,"author":{"gitId":"hanwenlai"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2022-10-18"},{"lineNumber":80,"author":{"gitId":"hanwenlai"},"content":"                VALID_ADDRESS, VALID_TAGS, VALID_RECORDLIST, VALID_APPOINTMENT);","lastModifiedDate":"2022-10-18"},{"lineNumber":81,"author":{"gitId":"hanwenlai"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Birthdate.class.getSimpleName());","lastModifiedDate":"2022-10-19"},{"lineNumber":82,"author":{"gitId":"hanwenlai"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2022-10-18"},{"lineNumber":83,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":84,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"hanwenlai"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_BIRTHDATE, INVALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2022-10-19"},{"lineNumber":89,"author":{"gitId":"marclzh"},"content":"                        VALID_ADDRESS, VALID_TAGS, VALID_RECORDLIST, VALID_APPOINTMENT);","lastModifiedDate":"2022-10-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"hanwenlai"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_BIRTHDATE, null, VALID_EMAIL,","lastModifiedDate":"2022-10-19"},{"lineNumber":97,"author":{"gitId":"marclzh"},"content":"                VALID_ADDRESS, VALID_TAGS, VALID_RECORDLIST, VALID_APPOINTMENT);","lastModifiedDate":"2022-10-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"hanwenlai"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_BIRTHDATE, VALID_PHONE, INVALID_EMAIL,","lastModifiedDate":"2022-10-19"},{"lineNumber":106,"author":{"gitId":"marclzh"},"content":"                        VALID_ADDRESS, VALID_TAGS, VALID_RECORDLIST, VALID_APPOINTMENT);","lastModifiedDate":"2022-10-15"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"hanwenlai"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_BIRTHDATE, VALID_PHONE, null,","lastModifiedDate":"2022-10-19"},{"lineNumber":114,"author":{"gitId":"marclzh"},"content":"                VALID_ADDRESS, VALID_TAGS, VALID_RECORDLIST, VALID_APPOINTMENT);","lastModifiedDate":"2022-10-15"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":122,"author":{"gitId":"hanwenlai"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_BIRTHDATE, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2022-10-19"},{"lineNumber":123,"author":{"gitId":"marclzh"},"content":"                        INVALID_ADDRESS, VALID_TAGS, VALID_RECORDLIST, VALID_APPOINTMENT);","lastModifiedDate":"2022-10-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":130,"author":{"gitId":"hanwenlai"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_BIRTHDATE, VALID_PHONE,","lastModifiedDate":"2022-10-19"},{"lineNumber":131,"author":{"gitId":"marclzh"},"content":"                VALID_EMAIL, null, VALID_TAGS, VALID_RECORDLIST, VALID_APPOINTMENT);","lastModifiedDate":"2022-10-15"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":136,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":137,"author":{"gitId":"LJXSean"},"content":"    public void toModelType_invalidRecords_throwsIllegalValueException() {","lastModifiedDate":"2022-10-12"},{"lineNumber":138,"author":{"gitId":"LJXSean"},"content":"        List\u003cJsonAdaptedRecord\u003e invalidRecords \u003d new ArrayList\u003c\u003e(VALID_RECORDLIST);","lastModifiedDate":"2022-10-12"},{"lineNumber":139,"author":{"gitId":"EiffelLKF"},"content":"        invalidRecords.add(new JsonAdaptedRecord(INVALID_RECORD_DATE, \"Covid-19\", null));","lastModifiedDate":"2022-10-17"},{"lineNumber":140,"author":{"gitId":"LJXSean"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2022-10-12"},{"lineNumber":141,"author":{"gitId":"hanwenlai"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_BIRTHDATE, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2022-10-19"},{"lineNumber":142,"author":{"gitId":"marclzh"},"content":"                        VALID_ADDRESS, VALID_TAGS, invalidRecords, VALID_APPOINTMENT);","lastModifiedDate":"2022-10-15"},{"lineNumber":143,"author":{"gitId":"hanwenlai"},"content":"        String expectedMessage \u003d Record.MESSAGE_INVALID_DATE_FORMAT;","lastModifiedDate":"2022-10-27"},{"lineNumber":144,"author":{"gitId":"LJXSean"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2022-10-12"},{"lineNumber":145,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":146,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2018-08-13"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":152,"author":{"gitId":"hanwenlai"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_BIRTHDATE, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2022-10-19"},{"lineNumber":153,"author":{"gitId":"marclzh"},"content":"                        VALID_ADDRESS, invalidTags, VALID_RECORDLIST, VALID_APPOINTMENT);","lastModifiedDate":"2022-10-15"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":157,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"marclzh":11,"hanwenlai":34,"LJXSean":9,"EiffelLKF":2,"-":101}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-12-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-12-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-12-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.model.person.Birthdate;","lastModifiedDate":"2022-10-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2022-10-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2022-10-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2022-10-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-12-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":37,"author":{"gitId":"hanwenlai"},"content":"        descriptor.setBirthdate(person.getBirthdate());","lastModifiedDate":"2022-10-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        descriptor.setAddress(person.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        descriptor.setTags(person.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2017-12-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":52,"author":{"gitId":"hanwenlai"},"content":"    /**","lastModifiedDate":"2022-10-18"},{"lineNumber":53,"author":{"gitId":"hanwenlai"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2022-10-18"},{"lineNumber":54,"author":{"gitId":"hanwenlai"},"content":"     */","lastModifiedDate":"2022-10-18"},{"lineNumber":55,"author":{"gitId":"hanwenlai"},"content":"    public EditPersonDescriptorBuilder withBirthdate(String birthdate) {","lastModifiedDate":"2022-10-19"},{"lineNumber":56,"author":{"gitId":"hanwenlai"},"content":"        descriptor.setBirthdate(new Birthdate(birthdate));","lastModifiedDate":"2022-10-19"},{"lineNumber":57,"author":{"gitId":"hanwenlai"},"content":"        return this;","lastModifiedDate":"2022-10-18"},{"lineNumber":58,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":59,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2017-12-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2017-12-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));","lastModifiedDate":"2017-12-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}","lastModifiedDate":"2017-07-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());","lastModifiedDate":"2017-12-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);","lastModifiedDate":"2017-12-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {","lastModifiedDate":"2017-05-05"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":97,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"hanwenlai":10,"-":87}},{"path":"src/test/java/seedu/address/testutil/EditRecordDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"anthonyhoth"},"content":"package seedu.address.testutil;","lastModifiedDate":"2022-10-18"},{"lineNumber":2,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":3,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.model.record.Record.DATE_FORMAT;","lastModifiedDate":"2022-10-18"},{"lineNumber":4,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"anthonyhoth"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-18"},{"lineNumber":6,"author":{"gitId":"anthonyhoth"},"content":"import java.util.Set;","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"anthonyhoth"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"anthonyhoth"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.logic.commands.EditRecordCommand.EditRecordDescriptor;","lastModifiedDate":"2022-10-18"},{"lineNumber":11,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.model.record.Medication;","lastModifiedDate":"2022-10-18"},{"lineNumber":12,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2022-10-18"},{"lineNumber":13,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":14,"author":{"gitId":"anthonyhoth"},"content":"/**","lastModifiedDate":"2022-10-18"},{"lineNumber":15,"author":{"gitId":"anthonyhoth"},"content":" * A utility class to help with building EditRecordDescriptor objects.","lastModifiedDate":"2022-10-18"},{"lineNumber":16,"author":{"gitId":"anthonyhoth"},"content":" */","lastModifiedDate":"2022-10-18"},{"lineNumber":17,"author":{"gitId":"anthonyhoth"},"content":"public class EditRecordDescriptorBuilder {","lastModifiedDate":"2022-10-18"},{"lineNumber":18,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"anthonyhoth"},"content":"    private EditRecordDescriptor descriptor;","lastModifiedDate":"2022-10-18"},{"lineNumber":20,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":21,"author":{"gitId":"anthonyhoth"},"content":"    public EditRecordDescriptorBuilder() {","lastModifiedDate":"2022-10-18"},{"lineNumber":22,"author":{"gitId":"anthonyhoth"},"content":"        descriptor \u003d new EditRecordDescriptor();","lastModifiedDate":"2022-10-18"},{"lineNumber":23,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":24,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":25,"author":{"gitId":"anthonyhoth"},"content":"    public EditRecordDescriptorBuilder(EditRecordDescriptor descriptor) {","lastModifiedDate":"2022-10-18"},{"lineNumber":26,"author":{"gitId":"anthonyhoth"},"content":"        this.descriptor \u003d new EditRecordDescriptor(descriptor);","lastModifiedDate":"2022-10-18"},{"lineNumber":27,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":28,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":29,"author":{"gitId":"anthonyhoth"},"content":"    /**","lastModifiedDate":"2022-10-18"},{"lineNumber":30,"author":{"gitId":"anthonyhoth"},"content":"     * Returns an {@code EditRecordDescriptor} with fields containing {@code record}\u0027s details","lastModifiedDate":"2022-10-18"},{"lineNumber":31,"author":{"gitId":"anthonyhoth"},"content":"     */","lastModifiedDate":"2022-10-18"},{"lineNumber":32,"author":{"gitId":"anthonyhoth"},"content":"    public EditRecordDescriptorBuilder(Record record) {","lastModifiedDate":"2022-10-18"},{"lineNumber":33,"author":{"gitId":"anthonyhoth"},"content":"        descriptor \u003d new EditRecordDescriptor();","lastModifiedDate":"2022-10-18"},{"lineNumber":34,"author":{"gitId":"anthonyhoth"},"content":"        descriptor.setRecordDate(record.getRecordDate());","lastModifiedDate":"2022-10-18"},{"lineNumber":35,"author":{"gitId":"anthonyhoth"},"content":"        descriptor.setRecord(record.getRecordData());","lastModifiedDate":"2022-10-18"},{"lineNumber":36,"author":{"gitId":"anthonyhoth"},"content":"        descriptor.setMedications(record.getMedications());","lastModifiedDate":"2022-10-18"},{"lineNumber":37,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":38,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":39,"author":{"gitId":"anthonyhoth"},"content":"    /**","lastModifiedDate":"2022-10-18"},{"lineNumber":40,"author":{"gitId":"anthonyhoth"},"content":"     * Sets the {@code Record} of the {@code EditRecordDescriptor} that we are building.","lastModifiedDate":"2022-10-18"},{"lineNumber":41,"author":{"gitId":"anthonyhoth"},"content":"     */","lastModifiedDate":"2022-10-18"},{"lineNumber":42,"author":{"gitId":"anthonyhoth"},"content":"    public EditRecordDescriptorBuilder withData(String data) {","lastModifiedDate":"2022-10-18"},{"lineNumber":43,"author":{"gitId":"anthonyhoth"},"content":"        descriptor.setRecord(data);","lastModifiedDate":"2022-10-18"},{"lineNumber":44,"author":{"gitId":"anthonyhoth"},"content":"        return this;","lastModifiedDate":"2022-10-18"},{"lineNumber":45,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":46,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":47,"author":{"gitId":"anthonyhoth"},"content":"    /**","lastModifiedDate":"2022-10-18"},{"lineNumber":48,"author":{"gitId":"anthonyhoth"},"content":"     * Sets the {@code Record Date} of the {@code EditRecordDescriptor} that we are building.","lastModifiedDate":"2022-10-18"},{"lineNumber":49,"author":{"gitId":"anthonyhoth"},"content":"     */","lastModifiedDate":"2022-10-18"},{"lineNumber":50,"author":{"gitId":"anthonyhoth"},"content":"    public EditRecordDescriptorBuilder withDate(String recordDate) {","lastModifiedDate":"2022-10-18"},{"lineNumber":51,"author":{"gitId":"anthonyhoth"},"content":"        descriptor.setRecordDate(LocalDateTime.parse(recordDate, DATE_FORMAT));","lastModifiedDate":"2022-10-18"},{"lineNumber":52,"author":{"gitId":"anthonyhoth"},"content":"        return this;","lastModifiedDate":"2022-10-18"},{"lineNumber":53,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":54,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":55,"author":{"gitId":"anthonyhoth"},"content":"    /**","lastModifiedDate":"2022-10-18"},{"lineNumber":56,"author":{"gitId":"anthonyhoth"},"content":"     * Parses the {@code medications} into a {@code Set\u003cMedication\u003e} and set it to the {@code EditRecordDescriptor}","lastModifiedDate":"2022-10-18"},{"lineNumber":57,"author":{"gitId":"anthonyhoth"},"content":"     * that we are building.","lastModifiedDate":"2022-10-18"},{"lineNumber":58,"author":{"gitId":"anthonyhoth"},"content":"     */","lastModifiedDate":"2022-10-18"},{"lineNumber":59,"author":{"gitId":"anthonyhoth"},"content":"    public EditRecordDescriptorBuilder withMedications(String... medications) {","lastModifiedDate":"2022-10-18"},{"lineNumber":60,"author":{"gitId":"anthonyhoth"},"content":"        Set\u003cMedication\u003e medicationSet \u003d Stream.of(medications).map(Medication::of).collect(Collectors.toSet());","lastModifiedDate":"2022-10-19"},{"lineNumber":61,"author":{"gitId":"anthonyhoth"},"content":"        descriptor.setMedications(medicationSet);","lastModifiedDate":"2022-10-18"},{"lineNumber":62,"author":{"gitId":"anthonyhoth"},"content":"        return this;","lastModifiedDate":"2022-10-18"},{"lineNumber":63,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":64,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":65,"author":{"gitId":"anthonyhoth"},"content":"    public EditRecordDescriptor build() {","lastModifiedDate":"2022-10-18"},{"lineNumber":66,"author":{"gitId":"anthonyhoth"},"content":"        return descriptor;","lastModifiedDate":"2022-10-18"},{"lineNumber":67,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":68,"author":{"gitId":"anthonyhoth"},"content":"}","lastModifiedDate":"2022-10-18"}],"authorContributionMap":{"anthonyhoth":68}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.model.person.Birthdate;","lastModifiedDate":"2022-10-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2022-10-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2022-10-18"},{"lineNumber":13,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2022-10-17"},{"lineNumber":14,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.RecordList;","lastModifiedDate":"2022-10-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":24,"author":{"gitId":"hanwenlai"},"content":"    public static final String DEFAULT_BIRTHDATE \u003d \"06-06-1966\";","lastModifiedDate":"2022-10-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":28,"author":{"gitId":"marclzh"},"content":"    public static final String DEFAULT_APPOINTMENT \u003d \"01-01-2024 2359\";","lastModifiedDate":"2022-10-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":31,"author":{"gitId":"hanwenlai"},"content":"    private Birthdate birthdate;","lastModifiedDate":"2022-10-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Address address;","lastModifiedDate":"2017-12-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-12-20"},{"lineNumber":36,"author":{"gitId":"marclzh"},"content":"    private RecordList recordList;","lastModifiedDate":"2022-10-04"},{"lineNumber":37,"author":{"gitId":"marclzh"},"content":"    private Appointment appointment;","lastModifiedDate":"2022-10-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":44,"author":{"gitId":"hanwenlai"},"content":"        birthdate \u003d new Birthdate(DEFAULT_BIRTHDATE);","lastModifiedDate":"2022-10-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":49,"author":{"gitId":"marclzh"},"content":"        recordList \u003d new RecordList();","lastModifiedDate":"2022-10-04"},{"lineNumber":50,"author":{"gitId":"marclzh"},"content":"        appointment \u003d Appointment.of(DEFAULT_APPOINTMENT);","lastModifiedDate":"2022-10-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":58,"author":{"gitId":"hanwenlai"},"content":"        birthdate \u003d personToCopy.getBirthdate();","lastModifiedDate":"2022-10-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2017-12-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();","lastModifiedDate":"2017-12-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());","lastModifiedDate":"2017-12-20"},{"lineNumber":63,"author":{"gitId":"marclzh"},"content":"        recordList \u003d personToCopy.getRecordList();","lastModifiedDate":"2022-10-04"},{"lineNumber":64,"author":{"gitId":"marclzh"},"content":"        appointment \u003d personToCopy.getAppointment();","lastModifiedDate":"2022-10-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":83,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-04"},{"lineNumber":84,"author":{"gitId":"marclzh"},"content":"     * Sets the {@code RecordList} of the {@code Person} that we are building.","lastModifiedDate":"2022-10-12"},{"lineNumber":85,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-04"},{"lineNumber":86,"author":{"gitId":"marclzh"},"content":"    public PersonBuilder withRecordList(Record ... records) {","lastModifiedDate":"2022-10-12"},{"lineNumber":87,"author":{"gitId":"marclzh"},"content":"        for (Record record : records) {","lastModifiedDate":"2022-10-12"},{"lineNumber":88,"author":{"gitId":"marclzh"},"content":"            this.recordList.add(record);","lastModifiedDate":"2022-10-12"},{"lineNumber":89,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-10-12"},{"lineNumber":90,"author":{"gitId":"marclzh"},"content":"        return this;","lastModifiedDate":"2022-10-04"},{"lineNumber":91,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":92,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2017-12-20"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":109,"author":{"gitId":"hanwenlai"},"content":"    /**","lastModifiedDate":"2022-10-18"},{"lineNumber":110,"author":{"gitId":"hanwenlai"},"content":"     * Sets the {@code Birthdate} of the {@code Person} that we are building.","lastModifiedDate":"2022-10-19"},{"lineNumber":111,"author":{"gitId":"hanwenlai"},"content":"     */","lastModifiedDate":"2022-10-18"},{"lineNumber":112,"author":{"gitId":"hanwenlai"},"content":"    public PersonBuilder withBirthdate(String birthdate) {","lastModifiedDate":"2022-10-19"},{"lineNumber":113,"author":{"gitId":"hanwenlai"},"content":"        this.birthdate \u003d new Birthdate(birthdate);","lastModifiedDate":"2022-10-19"},{"lineNumber":114,"author":{"gitId":"hanwenlai"},"content":"        return this;","lastModifiedDate":"2022-10-18"},{"lineNumber":115,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":116,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":125,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-15"},{"lineNumber":126,"author":{"gitId":"marclzh"},"content":"     * Sets the {@code Appointment} of the {@code Person} that we are building.","lastModifiedDate":"2022-10-15"},{"lineNumber":127,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-15"},{"lineNumber":128,"author":{"gitId":"marclzh"},"content":"    public PersonBuilder withAppointment(String appointment) {","lastModifiedDate":"2022-10-15"},{"lineNumber":129,"author":{"gitId":"marclzh"},"content":"        this.appointment \u003d Appointment.of(appointment);","lastModifiedDate":"2022-10-16"},{"lineNumber":130,"author":{"gitId":"marclzh"},"content":"        return this;","lastModifiedDate":"2022-10-15"},{"lineNumber":131,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":132,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public Person build() {","lastModifiedDate":"2017-04-05"},{"lineNumber":134,"author":{"gitId":"hanwenlai"},"content":"        return new Person(name, birthdate, phone, email, address, tags, recordList, appointment);","lastModifiedDate":"2022-10-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"marclzh":25,"hanwenlai":15,"EiffelLKF":2,"-":95}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-04-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2022-10-18"},{"lineNumber":4,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDATE;","lastModifiedDate":"2022-10-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2022-10-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-03-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-03-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2018-03-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-03-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A utility class for Person.","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class PersonUtil {","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}.","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);","lastModifiedDate":"2017-03-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2017-04-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":34,"author":{"gitId":"anthonyhoth"},"content":"        sb.append(PREFIX_NAME + person.getName().properCaseName + \" \");","lastModifiedDate":"2022-10-25"},{"lineNumber":35,"author":{"gitId":"hanwenlai"},"content":"        sb.append(PREFIX_BIRTHDATE + person.getBirthdate().toString() + \" \");","lastModifiedDate":"2022-10-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        person.getTags().stream().forEach(","lastModifiedDate":"2017-05-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2017-05-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details.","lastModifiedDate":"2018-03-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {","lastModifiedDate":"2018-03-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":50,"author":{"gitId":"anthonyhoth"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.properCaseName).append(\" \"));","lastModifiedDate":"2022-10-25"},{"lineNumber":51,"author":{"gitId":"hanwenlai"},"content":"        descriptor.getBirthdate().ifPresent(birthdate -\u003e sb.append(PREFIX_BIRTHDATE).append(birthdate).append(\" \"));","lastModifiedDate":"2022-10-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();","lastModifiedDate":"2018-03-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                sb.append(PREFIX_TAG);","lastModifiedDate":"2018-03-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2018-03-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-03-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"anthonyhoth":2,"hanwenlai":3,"-":60}},{"path":"src/test/java/seedu/address/testutil/RecordBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"EiffelLKF"},"content":"package seedu.address.testutil;","lastModifiedDate":"2022-10-17"},{"lineNumber":2,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":3,"author":{"gitId":"EiffelLKF"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-17"},{"lineNumber":4,"author":{"gitId":"EiffelLKF"},"content":"import java.util.HashSet;","lastModifiedDate":"2022-10-17"},{"lineNumber":5,"author":{"gitId":"EiffelLKF"},"content":"import java.util.Set;","lastModifiedDate":"2022-10-17"},{"lineNumber":6,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":7,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.Medication;","lastModifiedDate":"2022-10-17"},{"lineNumber":8,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2022-10-17"},{"lineNumber":9,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2022-10-17"},{"lineNumber":10,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":11,"author":{"gitId":"EiffelLKF"},"content":"/**","lastModifiedDate":"2022-10-17"},{"lineNumber":12,"author":{"gitId":"EiffelLKF"},"content":" * A utility class to help with building Record objects.","lastModifiedDate":"2022-10-17"},{"lineNumber":13,"author":{"gitId":"EiffelLKF"},"content":" */","lastModifiedDate":"2022-10-17"},{"lineNumber":14,"author":{"gitId":"EiffelLKF"},"content":"public class RecordBuilder {","lastModifiedDate":"2022-10-17"},{"lineNumber":15,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":16,"author":{"gitId":"EiffelLKF"},"content":"    public static final String DEFAULT_RECORD_DATE \u003d \"02-02-2022 1222\";","lastModifiedDate":"2022-10-17"},{"lineNumber":17,"author":{"gitId":"EiffelLKF"},"content":"    public static final String DEFAULT_RECORD_DATA \u003d \"Covid-19\";","lastModifiedDate":"2022-10-17"},{"lineNumber":18,"author":{"gitId":"EiffelLKF"},"content":"    public static final String DEFAULT_MEDICATION \u003d Medication.MESSAGE_NO_MEDICATION_GIVEN;","lastModifiedDate":"2022-10-17"},{"lineNumber":19,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":20,"author":{"gitId":"EiffelLKF"},"content":"    private LocalDateTime recordDate;","lastModifiedDate":"2022-10-17"},{"lineNumber":21,"author":{"gitId":"EiffelLKF"},"content":"    private String recordData;","lastModifiedDate":"2022-10-17"},{"lineNumber":22,"author":{"gitId":"EiffelLKF"},"content":"    private Set\u003cMedication\u003e medications;","lastModifiedDate":"2022-10-17"},{"lineNumber":23,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":24,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-17"},{"lineNumber":25,"author":{"gitId":"EiffelLKF"},"content":"     * Creates a {@code RecordBuilder} with the default details.","lastModifiedDate":"2022-10-17"},{"lineNumber":26,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-17"},{"lineNumber":27,"author":{"gitId":"EiffelLKF"},"content":"    public RecordBuilder() {","lastModifiedDate":"2022-10-17"},{"lineNumber":28,"author":{"gitId":"hanwenlai"},"content":"        recordDate \u003d LocalDateTime.parse(DEFAULT_RECORD_DATE, Record.DATE_FORMAT);","lastModifiedDate":"2022-10-19"},{"lineNumber":29,"author":{"gitId":"EiffelLKF"},"content":"        recordData \u003d DEFAULT_RECORD_DATA;","lastModifiedDate":"2022-10-17"},{"lineNumber":30,"author":{"gitId":"EiffelLKF"},"content":"        medications \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2022-10-17"},{"lineNumber":31,"author":{"gitId":"EiffelLKF"},"content":"        medications.add(Medication.of(DEFAULT_MEDICATION));","lastModifiedDate":"2022-10-17"},{"lineNumber":32,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":33,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":34,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-17"},{"lineNumber":35,"author":{"gitId":"EiffelLKF"},"content":"     * Initializes the RecordBuilder with the data of {@code recordToCopy}.","lastModifiedDate":"2022-10-17"},{"lineNumber":36,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-17"},{"lineNumber":37,"author":{"gitId":"EiffelLKF"},"content":"    public RecordBuilder(Record recordToCopy) {","lastModifiedDate":"2022-10-17"},{"lineNumber":38,"author":{"gitId":"EiffelLKF"},"content":"        recordDate \u003d recordToCopy.getRecordDate();","lastModifiedDate":"2022-10-17"},{"lineNumber":39,"author":{"gitId":"EiffelLKF"},"content":"        recordData \u003d recordToCopy.getRecordData();","lastModifiedDate":"2022-10-17"},{"lineNumber":40,"author":{"gitId":"EiffelLKF"},"content":"        medications \u003d new HashSet\u003c\u003e(recordToCopy.getMedications());","lastModifiedDate":"2022-10-17"},{"lineNumber":41,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":42,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":43,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-17"},{"lineNumber":44,"author":{"gitId":"EiffelLKF"},"content":"     * Sets the {@code RecordDate} of the {@code Record} that we are building.","lastModifiedDate":"2022-10-17"},{"lineNumber":45,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-17"},{"lineNumber":46,"author":{"gitId":"EiffelLKF"},"content":"    public RecordBuilder withRecordDate(String date) {","lastModifiedDate":"2022-10-17"},{"lineNumber":47,"author":{"gitId":"EiffelLKF"},"content":"        LocalDateTime formattedDate \u003d LocalDateTime.parse(date, Record.DATE_FORMAT);","lastModifiedDate":"2022-10-17"},{"lineNumber":48,"author":{"gitId":"EiffelLKF"},"content":"        this.recordDate \u003d formattedDate;","lastModifiedDate":"2022-10-17"},{"lineNumber":49,"author":{"gitId":"EiffelLKF"},"content":"        return this;","lastModifiedDate":"2022-10-17"},{"lineNumber":50,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":51,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":52,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-17"},{"lineNumber":53,"author":{"gitId":"EiffelLKF"},"content":"     * Parses the {@code medications} into a {@code Set\u003cMedication\u003e} and set it to the {@code Record}","lastModifiedDate":"2022-10-17"},{"lineNumber":54,"author":{"gitId":"EiffelLKF"},"content":"     * that we are building.","lastModifiedDate":"2022-10-17"},{"lineNumber":55,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-17"},{"lineNumber":56,"author":{"gitId":"EiffelLKF"},"content":"    public RecordBuilder withMedications(String ... medications) {","lastModifiedDate":"2022-10-17"},{"lineNumber":57,"author":{"gitId":"EiffelLKF"},"content":"        this.medications \u003d SampleDataUtil.getMedicationSet(medications);","lastModifiedDate":"2022-10-17"},{"lineNumber":58,"author":{"gitId":"EiffelLKF"},"content":"        return this;","lastModifiedDate":"2022-10-17"},{"lineNumber":59,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":60,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":61,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":62,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":63,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-17"},{"lineNumber":64,"author":{"gitId":"EiffelLKF"},"content":"     * Sets the {@code RecordData} of the {@code Record} that we are building.","lastModifiedDate":"2022-10-17"},{"lineNumber":65,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-17"},{"lineNumber":66,"author":{"gitId":"EiffelLKF"},"content":"    public RecordBuilder withRecordData(String data) {","lastModifiedDate":"2022-10-17"},{"lineNumber":67,"author":{"gitId":"EiffelLKF"},"content":"        this.recordData \u003d data;","lastModifiedDate":"2022-10-17"},{"lineNumber":68,"author":{"gitId":"EiffelLKF"},"content":"        return this;","lastModifiedDate":"2022-10-17"},{"lineNumber":69,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":70,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":71,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":72,"author":{"gitId":"EiffelLKF"},"content":"    public Record build() {","lastModifiedDate":"2022-10-17"},{"lineNumber":73,"author":{"gitId":"EiffelLKF"},"content":"        return new Record(recordDate, recordData, medications);","lastModifiedDate":"2022-10-17"},{"lineNumber":74,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":75,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":76,"author":{"gitId":"EiffelLKF"},"content":"}","lastModifiedDate":"2022-10-17"}],"authorContributionMap":{"hanwenlai":1,"EiffelLKF":75}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"LJXSean"},"content":"import static seedu.address.testutil.TypicalPersons.RECORD1;","lastModifiedDate":"2022-10-13"},{"lineNumber":4,"author":{"gitId":"LJXSean"},"content":"import static seedu.address.testutil.TypicalPersons.RECORD2;","lastModifiedDate":"2022-10-13"},{"lineNumber":5,"author":{"gitId":"LJXSean"},"content":"import static seedu.address.testutil.TypicalPersons.RECORD3;","lastModifiedDate":"2022-10-13"},{"lineNumber":6,"author":{"gitId":"LJXSean"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-13"},{"lineNumber":7,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-07-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-07-30"},{"lineNumber":15,"author":{"gitId":"LJXSean"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-10-13"},{"lineNumber":16,"author":{"gitId":"LJXSean"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-10-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * A utility class for test cases.","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class TestUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git.","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path.","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist.","lastModifiedDate":"2016-09-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-28"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-28"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2016-09-28"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns the middle index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Returns the last index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Returns the person in the {@code model}\u0027s person list at {@code index}.","lastModifiedDate":"2017-07-30"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static Person getPerson(Model model, Index index) {","lastModifiedDate":"2018-01-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList().get(index.getZeroBased());","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":62,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":63,"author":{"gitId":"LJXSean"},"content":"    /**","lastModifiedDate":"2022-10-13"},{"lineNumber":64,"author":{"gitId":"anthonyhoth"},"content":"     * Returns a Model for FindRecordCommand and DeleteRecordCommand test.","lastModifiedDate":"2022-10-13"},{"lineNumber":65,"author":{"gitId":"LJXSean"},"content":"     */","lastModifiedDate":"2022-10-13"},{"lineNumber":66,"author":{"gitId":"LJXSean"},"content":"    public static Model prepareModel() {","lastModifiedDate":"2022-10-13"},{"lineNumber":67,"author":{"gitId":"LJXSean"},"content":"        Person benson \u003d new PersonBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2022-10-13"},{"lineNumber":68,"author":{"gitId":"hanwenlai"},"content":"                .withBirthdate(\"08-08-1988\")","lastModifiedDate":"2022-10-19"},{"lineNumber":69,"author":{"gitId":"LJXSean"},"content":"                .withAddress(\"311, Clementi Ave 2, #02-25\")","lastModifiedDate":"2022-10-13"},{"lineNumber":70,"author":{"gitId":"LJXSean"},"content":"                .withEmail(\"johnd@example.com\").withPhone(\"98765432\")","lastModifiedDate":"2022-10-13"},{"lineNumber":71,"author":{"gitId":"LJXSean"},"content":"                .withTags(\"owesMoney\", \"friends\").withRecordList(RECORD1, RECORD2, RECORD3).build();","lastModifiedDate":"2022-10-13"},{"lineNumber":72,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":73,"author":{"gitId":"LJXSean"},"content":"        Model testModal \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-13"},{"lineNumber":74,"author":{"gitId":"LJXSean"},"content":"        testModal.setFilteredRecordList(benson);","lastModifiedDate":"2022-10-13"},{"lineNumber":75,"author":{"gitId":"LJXSean"},"content":"        testModal.setRecordListDisplayed(true);","lastModifiedDate":"2022-10-13"},{"lineNumber":76,"author":{"gitId":"LJXSean"},"content":"        return testModal;","lastModifiedDate":"2022-10-13"},{"lineNumber":77,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"anthonyhoth":1,"hanwenlai":1,"LJXSean":21,"-":55}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-08-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"anthonyhoth"},"content":"    public static final Index FIRST_INDEX \u003d Index.fromOneBased(1);","lastModifiedDate":"2022-10-12"},{"lineNumber":10,"author":{"gitId":"anthonyhoth"},"content":"    public static final Index SECOND_INDEX \u003d Index.fromOneBased(2);","lastModifiedDate":"2022-10-12"},{"lineNumber":11,"author":{"gitId":"anthonyhoth"},"content":"    public static final Index THIRD_INDEX \u003d Index.fromOneBased(3);","lastModifiedDate":"2022-10-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-05"}],"authorContributionMap":{"anthonyhoth":3,"-":9}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2022-10-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDATE_AMY;","lastModifiedDate":"2022-10-19"},{"lineNumber":6,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDATE_BOB;","lastModifiedDate":"2022-10-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2022-10-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2022-10-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2022-10-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2022-10-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2022-10-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":22,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.record.Record;","lastModifiedDate":"2022-10-17"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":29,"author":{"gitId":"EiffelLKF"},"content":"    public static final Record RECORD1 \u003d new RecordBuilder().withRecordDate(\"10-10-2011 1400\")","lastModifiedDate":"2022-10-17"},{"lineNumber":30,"author":{"gitId":"EiffelLKF"},"content":"            .withRecordData(\"Covid-19\")","lastModifiedDate":"2022-10-17"},{"lineNumber":31,"author":{"gitId":"EiffelLKF"},"content":"            .withMedications(\"Paracetamol 500mg\").build();","lastModifiedDate":"2022-10-17"},{"lineNumber":32,"author":{"gitId":"EiffelLKF"},"content":"    public static final Record RECORD2 \u003d new RecordBuilder().withRecordDate(\"10-10-2010 1400\")","lastModifiedDate":"2022-10-17"},{"lineNumber":33,"author":{"gitId":"EiffelLKF"},"content":"            .withRecordData(\"Cold\").build();","lastModifiedDate":"2022-10-17"},{"lineNumber":34,"author":{"gitId":"EiffelLKF"},"content":"    public static final Record RECORD3 \u003d new RecordBuilder().withRecordDate(\"10-11-2011 1410\")","lastModifiedDate":"2022-10-17"},{"lineNumber":35,"author":{"gitId":"EiffelLKF"},"content":"            .withRecordData(\"Rashes (Allergic Reaction)\")","lastModifiedDate":"2022-10-17"},{"lineNumber":36,"author":{"gitId":"EiffelLKF"},"content":"            .withMedications(\"Cetrizine 10 tabs\", \" Ketotifen 1 botl\")","lastModifiedDate":"2022-10-17"},{"lineNumber":37,"author":{"gitId":"EiffelLKF"},"content":"            .build();","lastModifiedDate":"2022-10-17"},{"lineNumber":38,"author":{"gitId":"hanwenlai"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\").withBirthdate(\"04-04-1944\")","lastModifiedDate":"2022-10-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")","lastModifiedDate":"2017-04-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            .withPhone(\"94351253\")","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"marclzh"},"content":"            .withTags(\"friends\").withAppointment(\"01-01-2024 0000\").build();","lastModifiedDate":"2022-10-26"},{"lineNumber":42,"author":{"gitId":"hanwenlai"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\").withBirthdate(\"08-08-1988\")","lastModifiedDate":"2022-10-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")","lastModifiedDate":"2017-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")","lastModifiedDate":"2017-04-05"},{"lineNumber":45,"author":{"gitId":"marclzh"},"content":"            .withTags(\"owesMoney\", \"friends\").withRecordList(RECORD1, RECORD2, RECORD3)","lastModifiedDate":"2022-10-15"},{"lineNumber":46,"author":{"gitId":"marclzh"},"content":"            .withAppointment(\"05-05-2024 1200\").build();","lastModifiedDate":"2022-10-26"},{"lineNumber":47,"author":{"gitId":"hanwenlai"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withBirthdate(\"02-02-2002\")","lastModifiedDate":"2022-10-19"},{"lineNumber":48,"author":{"gitId":"hanwenlai"},"content":"            .withPhone(\"95352563\").withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();","lastModifiedDate":"2022-10-19"},{"lineNumber":49,"author":{"gitId":"hanwenlai"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withBirthdate(\"06-06-1996\")","lastModifiedDate":"2022-10-19"},{"lineNumber":50,"author":{"gitId":"hanwenlai"},"content":"            .withPhone(\"87652533\").withEmail(\"cornelia@example.com\")","lastModifiedDate":"2022-10-19"},{"lineNumber":51,"author":{"gitId":"hanwenlai"},"content":"            .withAddress(\"10th street\").withTags(\"friends\").build();","lastModifiedDate":"2022-10-19"},{"lineNumber":52,"author":{"gitId":"hanwenlai"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withBirthdate(\"13-03-1993\")","lastModifiedDate":"2022-10-19"},{"lineNumber":53,"author":{"gitId":"hanwenlai"},"content":"            .withPhone(\"9482224\").withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();","lastModifiedDate":"2022-10-19"},{"lineNumber":54,"author":{"gitId":"hanwenlai"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withBirthdate(\"07-07-1977\")","lastModifiedDate":"2022-10-19"},{"lineNumber":55,"author":{"gitId":"hanwenlai"},"content":"            .withPhone(\"9482427\").withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();","lastModifiedDate":"2022-10-19"},{"lineNumber":56,"author":{"gitId":"hanwenlai"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withBirthdate(\"15-05-1975\")","lastModifiedDate":"2022-10-19"},{"lineNumber":57,"author":{"gitId":"hanwenlai"},"content":"            .withPhone(\"9482442\").withEmail(\"anna@example.com\")","lastModifiedDate":"2022-10-19"},{"lineNumber":58,"author":{"gitId":"hanwenlai"},"content":"            .withAddress(\"4th street\").withRecordList(RECORD1).build();","lastModifiedDate":"2022-10-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")","lastModifiedDate":"2022-10-19"},{"lineNumber":62,"author":{"gitId":"hanwenlai"},"content":"            .withBirthdate(\"20-02-2002\").withEmail(\"stefan@example.com\").withAddress(\"little india\").build();","lastModifiedDate":"2022-10-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")","lastModifiedDate":"2022-10-19"},{"lineNumber":64,"author":{"gitId":"hanwenlai"},"content":"            .withBirthdate(\"07-07-1977\").withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();","lastModifiedDate":"2022-10-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2018-01-10"},{"lineNumber":68,"author":{"gitId":"hanwenlai"},"content":"            .withBirthdate(VALID_BIRTHDATE_AMY).withEmail(VALID_EMAIL_AMY)","lastModifiedDate":"2022-10-19"},{"lineNumber":69,"author":{"gitId":"hanwenlai"},"content":"            .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2022-10-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2018-01-10"},{"lineNumber":71,"author":{"gitId":"hanwenlai"},"content":"            .withBirthdate(VALID_BIRTHDATE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2022-10-19"},{"lineNumber":72,"author":{"gitId":"hanwenlai"},"content":"            .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2022-10-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation","lastModifiedDate":"2017-07-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2017-08-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2017-08-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2017-08-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2018-01-10"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            ab.addPerson(person);","lastModifiedDate":"2017-08-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {","lastModifiedDate":"2018-01-10"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2017-08-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":92,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"marclzh":3,"hanwenlai":22,"EiffelLKF":10,"-":57}}]
