[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"anthonyhoth"},"content":"[![CI Status](https://github.com/AY2223S1-CS2103T-T14-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2223S1-CS2103T-T14-3/tp/actions)","lastModifiedDate":"2022-09-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"anthonyhoth"},"content":"# OmniHealth","lastModifiedDate":"2022-09-27"},{"lineNumber":6,"author":{"gitId":"anthonyhoth"},"content":"OmniHealth is a **desktop app for private clinic practitioners to quickly store, edit and search for patients and their records**. It is optimised for use via a **Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). ","lastModifiedDate":"2022-09-27"},{"lineNumber":7,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":8,"author":{"gitId":"anthonyhoth"},"content":"If you can type fast, OmniHealth can get your patient management tasks done faster than traditional GUI apps! ðŸ’Šâœ¨","lastModifiedDate":"2022-09-27"},{"lineNumber":9,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":10,"author":{"gitId":"anthonyhoth"},"content":"* For the detailed documentation of this project, see the **[OmniHealth Website](https://ay2223s1-cs2103t-t14-3.github.io/tp/)**.","lastModifiedDate":"2022-09-27"},{"lineNumber":11,"author":{"gitId":"anthonyhoth"},"content":"* This project is built on the AddressBook-Level3 project, find out more on [se-education.org](https://se-education.org#https://se-education.org/#contributing) for more info.","lastModifiedDate":"2022-09-27"}],"authorContributionMap":{"anthonyhoth":8,"-":3}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"anthonyhoth"},"content":"### Anthony Ho","lastModifiedDate":"2022-09-20"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"anthonyhoth"},"content":"\u003cimg src\u003d\"images/anthonyhoth.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-09-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"anthonyhoth"},"content":"[[github](https://github.com/anthonyhoth)]","lastModifiedDate":"2022-09-20"},{"lineNumber":16,"author":{"gitId":"LJXSean"},"content":"[[portfolio](team/anthonyhoth.md)]","lastModifiedDate":"2022-09-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"anthonyhoth"},"content":"* Role: TBD","lastModifiedDate":"2022-09-20"},{"lineNumber":19,"author":{"gitId":"anthonyhoth"},"content":"* Responsiblities: In charge of `delete` and `deleteR` commands","lastModifiedDate":"2022-09-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"hanwenlai"},"content":"### Lai Han Wen","lastModifiedDate":"2022-09-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"hanwenlai"},"content":"\u003cimg src\u003d\"images/hanwenlai.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-09-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"hanwenlai"},"content":"[[github](https://github.com/hanwenlai)]","lastModifiedDate":"2022-09-20"},{"lineNumber":27,"author":{"gitId":"hanwenlai"},"content":"[[portfolio](team/hanwenlai.md)]","lastModifiedDate":"2022-09-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"hanwenlai"},"content":"* Role: TBD","lastModifiedDate":"2022-09-20"},{"lineNumber":30,"author":{"gitId":"hanwenlai"},"content":"* Responsiblities: In charge of `list` and `listR` commands","lastModifiedDate":"2022-09-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"marclzh"},"content":"### Marcus Lee","lastModifiedDate":"2022-09-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"marclzh"},"content":"\u003cimg src\u003d\"images/marclzh.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-09-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"marclzh"},"content":"[[github](https://github.com/marclzh)]","lastModifiedDate":"2022-09-20"},{"lineNumber":37,"author":{"gitId":"marclzh"},"content":"[[portfolio](team/marclzh.md)]","lastModifiedDate":"2022-09-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"marclzh"},"content":"* Role: TBD","lastModifiedDate":"2022-09-20"},{"lineNumber":40,"author":{"gitId":"EiffelLKF"},"content":"* Responsibilities: In charge of `find` and `findR` commands","lastModifiedDate":"2022-09-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"EiffelLKF"},"content":"### Eiffel Leo","lastModifiedDate":"2022-09-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"EiffelLKF"},"content":"\u003cimg src\u003d\"images/eiffellkf.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-09-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"EiffelLKF"},"content":"[[github](http://github.com/eiffellkf)]","lastModifiedDate":"2022-09-20"},{"lineNumber":47,"author":{"gitId":"EiffelLKF"},"content":"[[portfolio](team/eiffellkf.md)]","lastModifiedDate":"2022-09-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"EiffelLKF"},"content":"* Role: TBD","lastModifiedDate":"2022-09-20"},{"lineNumber":50,"author":{"gitId":"EiffelLKF"},"content":"* Responsibilities: In charge of `add` and `addR` command","lastModifiedDate":"2022-09-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"LJXSean"},"content":"### Sean Lam","lastModifiedDate":"2022-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"LJXSean"},"content":"\u003cimg src\u003d\"images/ljxsean.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-09-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"marclzh"},"content":"[[github](https://github.com/ljxsean)]","lastModifiedDate":"2022-09-27"},{"lineNumber":57,"author":{"gitId":"LJXSean"},"content":"[[portfolio](team/ljxsean.md)]","lastModifiedDate":"2022-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"LJXSean"},"content":"* Role: TBD","lastModifiedDate":"2022-09-21"},{"lineNumber":60,"author":{"gitId":"LJXSean"},"content":"* Responsiblities: In charge of `clear` and `clearR` commands","lastModifiedDate":"2022-09-21"}],"authorContributionMap":{"anthonyhoth":5,"marclzh":6,"hanwenlai":6,"LJXSean":6,"EiffelLKF":7,"-":30}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"* Adapted from AB3 https://github.com/nus-cs2103-AY2223S1/tp","lastModifiedDate":"2022-09-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2021-07-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-07-31"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":83,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":84,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":85,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"**API** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2021-07-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `AddCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to add a person).","lastModifiedDate":"2021-07-31"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2021-07-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2021-07-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-07-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the userâ€™s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique tag, instead of each `Person` needing their own `Tag` objects.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/BetterModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"* can save both address book data and user preference data in json format, and read them back into corresponding objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()`â€‰â€”â€‰Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()`â€‰â€”â€‰Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()`â€‰â€”â€‰Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David â€¦â€‹` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"The `redo` command does the oppositeâ€‰â€”â€‰it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David â€¦â€‹` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/CommitActivityDiagram.png\" width\u003d\"250\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":247,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":248,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":249,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":250,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"* has a need to manage a significant number of contacts","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"LJXSean"},"content":"* private clinic practitioners who do not have access to general health service management applications like Healthhub","lastModifiedDate":"2022-09-27"},{"lineNumber":262,"author":{"gitId":"LJXSean"},"content":"* private clinic practitioners of clinics who still utilise physical paper records to store patient information","lastModifiedDate":"2022-09-27"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"LJXSean"},"content":"**Value proposition**:","lastModifiedDate":"2022-09-27"},{"lineNumber":265,"author":{"gitId":"LJXSean"},"content":"* provide doctors with a place to **store and centrally manage their patientsâ€™ information**","lastModifiedDate":"2022-09-27"},{"lineNumber":266,"author":{"gitId":"LJXSean"},"content":"* allows doctors to schedule appointments, send appointment reminders and other notifications (eg. medication, payment","lastModifiedDate":"2022-09-27"},{"lineNumber":267,"author":{"gitId":"LJXSean"},"content":"  information) to patients using their stored contact information.","lastModifiedDate":"2022-09-27"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"| Priority | As a â€¦â€‹   | I want to â€¦â€‹                            | So that I canâ€¦â€‹                                                                           |","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"LJXSean"},"content":"| -------- |-----------|-----------------------------------------|-------------------------------------------------------------------------------------------|","lastModifiedDate":"2022-09-27"},{"lineNumber":276,"author":{"gitId":"LJXSean"},"content":"| `* * *`  | new user  | view the user guide easily              | learn more about the product usage                                                        |","lastModifiedDate":"2022-09-27"},{"lineNumber":277,"author":{"gitId":"LJXSean"},"content":"| `* * *`  | user      | add a new patient and their details     | save them for later viewing                                                               |","lastModifiedDate":"2022-09-27"},{"lineNumber":278,"author":{"gitId":"LJXSean"},"content":"| `* * *`  | user      | view an existing patient\u0027s full details | know more about the patient                                                               |","lastModifiedDate":"2022-09-27"},{"lineNumber":279,"author":{"gitId":"LJXSean"},"content":"| `* * *`  | user      | delete a patient\u0027s records              | clear a particular patient\u0027s medical records upon request. (E.g. due to privacy reasons)  |","lastModifiedDate":"2022-09-27"},{"lineNumber":280,"author":{"gitId":"LJXSean"},"content":"| `* * *`  | user      | clear the all of a patient\u0027s records    | save time by not deleting one by one                                                      |","lastModifiedDate":"2022-09-27"},{"lineNumber":281,"author":{"gitId":"LJXSean"},"content":"| `*`      | user      | view the entire list of patients        | see all my patients I have added.                                                         |","lastModifiedDate":"2022-09-27"},{"lineNumber":282,"author":{"gitId":"LJXSean"},"content":"| `* * *`  | user      | search for a specific patientâ€™s records | view one patient\u0027s record                                                                 |","lastModifiedDate":"2022-09-27"},{"lineNumber":283,"author":{"gitId":"LJXSean"},"content":"| `* * *`  | user      | exit the program                        |                                                                                           |","lastModifiedDate":"2022-09-27"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"LJXSean"},"content":"(For all use cases below, the **System** is the `OmniHealth` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2022-09-21"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"EiffelLKF"},"content":"**Use case: UC01 - Add a patient**","lastModifiedDate":"2022-10-11"},{"lineNumber":292,"author":{"gitId":"EiffelLKF"},"content":"**Precondition: Addressbook is displayed**","lastModifiedDate":"2022-10-11"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"LJXSean"},"content":"1. User requests to add a patient with given input fields.","lastModifiedDate":"2022-09-21"},{"lineNumber":297,"author":{"gitId":"LJXSean"},"content":"2. OmniHealth adds patients with given fields into the list of patients.","lastModifiedDate":"2022-09-21"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2022-09-21"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":301,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2022-09-21"},{"lineNumber":302,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":303,"author":{"gitId":"EiffelLKF"},"content":"* 1a. The given input fields are invalid.","lastModifiedDate":"2022-09-27"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":305,"author":{"gitId":"EiffelLKF"},"content":"    * 1a1. OmniHealth shows an error message.","lastModifiedDate":"2022-09-27"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":307,"author":{"gitId":"LJXSean"},"content":"      Use case ends.","lastModifiedDate":"2022-09-21"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":309,"author":{"gitId":"EiffelLKF"},"content":"**Use case: UC02 - Add a record**","lastModifiedDate":"2022-10-11"},{"lineNumber":310,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":311,"author":{"gitId":"LJXSean"},"content":"**MSS**","lastModifiedDate":"2022-09-21"},{"lineNumber":312,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":313,"author":{"gitId":"EiffelLKF"},"content":"1. User !!requests to list patients (UC05)!!","lastModifiedDate":"2022-10-11"},{"lineNumber":314,"author":{"gitId":"EiffelLKF"},"content":"2. User !!requests to display record list of specific patient (UC06)!!","lastModifiedDate":"2022-10-11"},{"lineNumber":315,"author":{"gitId":"EiffelLKF"},"content":"3. User requests to add record with given fields into to the patient.","lastModifiedDate":"2022-10-11"},{"lineNumber":316,"author":{"gitId":"EiffelLKF"},"content":"4. OmniHealth adds a record with given fields to the record list of the patient.","lastModifiedDate":"2022-10-11"},{"lineNumber":317,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":318,"author":{"gitId":"LJXSean"},"content":"    Use case ends.","lastModifiedDate":"2022-09-21"},{"lineNumber":319,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":320,"author":{"gitId":"LJXSean"},"content":"**Extensions**","lastModifiedDate":"2022-09-21"},{"lineNumber":321,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":322,"author":{"gitId":"EiffelLKF"},"content":"* 3a. The given input fields are invalid.","lastModifiedDate":"2022-09-27"},{"lineNumber":323,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":324,"author":{"gitId":"EiffelLKF"},"content":"    * 3a1. OmniHealth shows an error message.","lastModifiedDate":"2022-09-27"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":326,"author":{"gitId":"-"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2022-09-21"},{"lineNumber":327,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":328,"author":{"gitId":"EiffelLKF"},"content":"**Use case: UC03 - Delete a patient**","lastModifiedDate":"2022-10-11"},{"lineNumber":329,"author":{"gitId":"EiffelLKF"},"content":"**Precondition: Addressbook is displayed**","lastModifiedDate":"2022-10-11"},{"lineNumber":330,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":331,"author":{"gitId":"LJXSean"},"content":"**MSS**","lastModifiedDate":"2022-09-21"},{"lineNumber":332,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":333,"author":{"gitId":"LJXSean"},"content":"1.  User requests to list patients","lastModifiedDate":"2022-09-21"},{"lineNumber":334,"author":{"gitId":"LJXSean"},"content":"2.  OmniHealth shows a list of patients","lastModifiedDate":"2022-09-21"},{"lineNumber":335,"author":{"gitId":"LJXSean"},"content":"3.  User requests to delete a specific patient in the list","lastModifiedDate":"2022-09-21"},{"lineNumber":336,"author":{"gitId":"LJXSean"},"content":"4.  OmniHealth deletes the person","lastModifiedDate":"2022-09-21"},{"lineNumber":337,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":339,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":340,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":341,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":342,"author":{"gitId":"EiffelLKF"},"content":"* 3a. The list is empty.","lastModifiedDate":"2022-09-27"},{"lineNumber":343,"author":{"gitId":"EiffelLKF"},"content":"    * 3a1. OmniHealth shows an error message.","lastModifiedDate":"2022-09-27"},{"lineNumber":344,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":345,"author":{"gitId":"-"},"content":"        Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":346,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":347,"author":{"gitId":"EiffelLKF"},"content":"* 3b. The given index is invalid.","lastModifiedDate":"2022-09-27"},{"lineNumber":348,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":349,"author":{"gitId":"EiffelLKF"},"content":"    * 3b1. OmniHealth shows an error message.","lastModifiedDate":"2022-09-27"},{"lineNumber":350,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":351,"author":{"gitId":"LJXSean"},"content":"      Use case ends.","lastModifiedDate":"2022-09-21"},{"lineNumber":352,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":353,"author":{"gitId":"EiffelLKF"},"content":"* 2a. The user searches for a specific patient before deleting.","lastModifiedDate":"2022-09-27"},{"lineNumber":354,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":355,"author":{"gitId":"EiffelLKF"},"content":"    * 2a1. User requests to find a patient","lastModifiedDate":"2022-09-27"},{"lineNumber":356,"author":{"gitId":"EiffelLKF"},"content":"    * 2a2. OmniHealth shows a list of patient with given keyword","lastModifiedDate":"2022-09-27"},{"lineNumber":357,"author":{"gitId":"EiffelLKF"},"content":"    * 2a3. User requests to delete a specific patient in the list","lastModifiedDate":"2022-09-27"},{"lineNumber":358,"author":{"gitId":"EiffelLKF"},"content":"    * 2a4. OmniHealth deletes the patient","lastModifiedDate":"2022-09-27"},{"lineNumber":359,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":360,"author":{"gitId":"LJXSean"},"content":"      Use case ends.","lastModifiedDate":"2022-09-21"},{"lineNumber":361,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":362,"author":{"gitId":"EiffelLKF"},"content":"**Use case: UC04 - Delete a record**","lastModifiedDate":"2022-10-11"},{"lineNumber":363,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":364,"author":{"gitId":"LJXSean"},"content":"**MSS**","lastModifiedDate":"2022-09-21"},{"lineNumber":365,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":366,"author":{"gitId":"EiffelLKF"},"content":"1.  User !!requests to list patients (UC05).!!","lastModifiedDate":"2022-10-11"},{"lineNumber":367,"author":{"gitId":"EiffelLKF"},"content":"2.  User !!requests to display record list of specific patient (UC06).!!","lastModifiedDate":"2022-10-11"},{"lineNumber":368,"author":{"gitId":"EiffelLKF"},"content":"3.  User requests to delete a specific record in the list.","lastModifiedDate":"2022-10-11"},{"lineNumber":369,"author":{"gitId":"EiffelLKF"},"content":"4.  OmniHealth deletes the record.","lastModifiedDate":"2022-10-11"},{"lineNumber":370,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":371,"author":{"gitId":"LJXSean"},"content":"    Use case ends.","lastModifiedDate":"2022-09-21"},{"lineNumber":372,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":373,"author":{"gitId":"LJXSean"},"content":"**Extensions**","lastModifiedDate":"2022-09-21"},{"lineNumber":374,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":375,"author":{"gitId":"EiffelLKF"},"content":"* 3a. The list is empty.","lastModifiedDate":"2022-09-27"},{"lineNumber":376,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":377,"author":{"gitId":"EiffelLKF"},"content":"    * 3a1. OmniHealth shows an error message.","lastModifiedDate":"2022-09-27"},{"lineNumber":378,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":379,"author":{"gitId":"LJXSean"},"content":"        Use case ends.","lastModifiedDate":"2022-09-21"},{"lineNumber":380,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":381,"author":{"gitId":"EiffelLKF"},"content":"* 3b. The given index is invalid.","lastModifiedDate":"2022-09-27"},{"lineNumber":382,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":383,"author":{"gitId":"EiffelLKF"},"content":"    * 3b1. OmniHealth shows an error message.","lastModifiedDate":"2022-09-27"},{"lineNumber":384,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":385,"author":{"gitId":"LJXSean"},"content":"      Use case ends.","lastModifiedDate":"2022-09-21"},{"lineNumber":386,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":387,"author":{"gitId":"EiffelLKF"},"content":"* *a. Patient attempts to delete a record before listing records.","lastModifiedDate":"2022-09-27"},{"lineNumber":388,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":389,"author":{"gitId":"EiffelLKF"},"content":"    * *a1. OmniHealth shows an error message.","lastModifiedDate":"2022-09-27"},{"lineNumber":390,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":391,"author":{"gitId":"LJXSean"},"content":"      Use case ends.","lastModifiedDate":"2022-09-21"},{"lineNumber":392,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":393,"author":{"gitId":"EiffelLKF"},"content":"**Use case: UC05 - List all patients**","lastModifiedDate":"2022-10-11"},{"lineNumber":394,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":395,"author":{"gitId":"LJXSean"},"content":"**MSS**","lastModifiedDate":"2022-09-21"},{"lineNumber":396,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":397,"author":{"gitId":"LJXSean"},"content":"1. User requests to list all patients.","lastModifiedDate":"2022-09-21"},{"lineNumber":398,"author":{"gitId":"LJXSean"},"content":"2. OmniHealth shows a list of all patients.","lastModifiedDate":"2022-09-21"},{"lineNumber":399,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":400,"author":{"gitId":"LJXSean"},"content":"    Use case ends.","lastModifiedDate":"2022-09-21"},{"lineNumber":401,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":402,"author":{"gitId":"LJXSean"},"content":"**Extensions**","lastModifiedDate":"2022-09-21"},{"lineNumber":403,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":404,"author":{"gitId":"LJXSean"},"content":"* 1a. The patient list is empty.","lastModifiedDate":"2022-09-21"},{"lineNumber":405,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":406,"author":{"gitId":"LJXSean"},"content":"    * 1a1. OmniHealth shows an error message.","lastModifiedDate":"2022-09-21"},{"lineNumber":407,"author":{"gitId":"LJXSean"},"content":"    ","lastModifiedDate":"2022-09-21"},{"lineNumber":408,"author":{"gitId":"LJXSean"},"content":"        Use case ends.","lastModifiedDate":"2022-09-21"},{"lineNumber":409,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":410,"author":{"gitId":"EiffelLKF"},"content":"**Use case: UC06 - List all records for a specified patient**","lastModifiedDate":"2022-10-11"},{"lineNumber":411,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":412,"author":{"gitId":"LJXSean"},"content":"**MSS**","lastModifiedDate":"2022-09-21"},{"lineNumber":413,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":414,"author":{"gitId":"EiffelLKF"},"content":"1. User requests to display all records for the specified patient.","lastModifiedDate":"2022-10-11"},{"lineNumber":415,"author":{"gitId":"LJXSean"},"content":"2. OmniHealth shows a list of all records for the specified patient.","lastModifiedDate":"2022-09-21"},{"lineNumber":416,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":417,"author":{"gitId":"LJXSean"},"content":"   Use case ends.","lastModifiedDate":"2022-09-21"},{"lineNumber":418,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":419,"author":{"gitId":"LJXSean"},"content":"**Extensions**","lastModifiedDate":"2022-09-21"},{"lineNumber":420,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":421,"author":{"gitId":"LJXSean"},"content":"* 1a. The record list is empty.","lastModifiedDate":"2022-09-21"},{"lineNumber":422,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":423,"author":{"gitId":"LJXSean"},"content":"    * 1a1. OmniHealth shows an error message.","lastModifiedDate":"2022-09-21"},{"lineNumber":424,"author":{"gitId":"LJXSean"},"content":"    ","lastModifiedDate":"2022-09-21"},{"lineNumber":425,"author":{"gitId":"LJXSean"},"content":"        Use case ends.","lastModifiedDate":"2022-09-21"},{"lineNumber":426,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":427,"author":{"gitId":"LJXSean"},"content":"* 1b. The given index is invalid.","lastModifiedDate":"2022-09-21"},{"lineNumber":428,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":429,"author":{"gitId":"LJXSean"},"content":"    * 1b1. OmniHealth shows an error message.","lastModifiedDate":"2022-09-21"},{"lineNumber":430,"author":{"gitId":"LJXSean"},"content":"    ","lastModifiedDate":"2022-09-21"},{"lineNumber":431,"author":{"gitId":"LJXSean"},"content":"        Use case ends.","lastModifiedDate":"2022-09-21"},{"lineNumber":432,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":433,"author":{"gitId":"EiffelLKF"},"content":"**Use case: UC07 - Clear patient list**","lastModifiedDate":"2022-10-11"},{"lineNumber":434,"author":{"gitId":"EiffelLKF"},"content":"**Precondition: Addressbook is displayed**","lastModifiedDate":"2022-10-11"},{"lineNumber":435,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":436,"author":{"gitId":"LJXSean"},"content":"**MSS**","lastModifiedDate":"2022-09-21"},{"lineNumber":437,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":438,"author":{"gitId":"LJXSean"},"content":"1. User requests to clear all patients from list","lastModifiedDate":"2022-09-21"},{"lineNumber":439,"author":{"gitId":"LJXSean"},"content":"2. Omnihealth deletes patient list","lastModifiedDate":"2022-09-21"},{"lineNumber":440,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":441,"author":{"gitId":"LJXSean"},"content":"   Use case ends","lastModifiedDate":"2022-09-21"},{"lineNumber":442,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":443,"author":{"gitId":"LJXSean"},"content":"**Extensions**","lastModifiedDate":"2022-09-21"},{"lineNumber":444,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":445,"author":{"gitId":"LJXSean"},"content":"* 1a. Patient list is empty","lastModifiedDate":"2022-09-21"},{"lineNumber":446,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":447,"author":{"gitId":"LJXSean"},"content":"    Use case ends","lastModifiedDate":"2022-09-21"},{"lineNumber":448,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":449,"author":{"gitId":"EiffelLKF"},"content":"**Use case: UC08 - Clear patient records**","lastModifiedDate":"2022-10-11"},{"lineNumber":450,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":451,"author":{"gitId":"LJXSean"},"content":"**MSS**","lastModifiedDate":"2022-09-21"},{"lineNumber":452,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":453,"author":{"gitId":"EiffelLKF"},"content":"1. User !!requests to list patients (UC05)!!","lastModifiedDate":"2022-10-11"},{"lineNumber":454,"author":{"gitId":"EiffelLKF"},"content":"2. User !!requests to display record list of specific patient (UC06)!!","lastModifiedDate":"2022-10-11"},{"lineNumber":455,"author":{"gitId":"EiffelLKF"},"content":"3. User requests to clear all records from a patient","lastModifiedDate":"2022-10-11"},{"lineNumber":456,"author":{"gitId":"EiffelLKF"},"content":"4. Omnihealth deletes all patient records","lastModifiedDate":"2022-10-11"},{"lineNumber":457,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":458,"author":{"gitId":"LJXSean"},"content":"   Use case ends","lastModifiedDate":"2022-09-21"},{"lineNumber":459,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":460,"author":{"gitId":"LJXSean"},"content":"**Extensions**","lastModifiedDate":"2022-09-21"},{"lineNumber":461,"author":{"gitId":"LJXSean"},"content":"* 1a. Patient record list is empty","lastModifiedDate":"2022-09-21"},{"lineNumber":462,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":463,"author":{"gitId":"LJXSean"},"content":"  Use case ends","lastModifiedDate":"2022-09-21"},{"lineNumber":464,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":465,"author":{"gitId":"LJXSean"},"content":"* 1b. Patient does not exist","lastModifiedDate":"2022-09-21"},{"lineNumber":466,"author":{"gitId":"LJXSean"},"content":"  * 1b1. Omnihealth displays error message","lastModifiedDate":"2022-09-21"},{"lineNumber":467,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":468,"author":{"gitId":"EiffelLKF"},"content":"  Use case ends","lastModifiedDate":"2022-09-27"},{"lineNumber":469,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":470,"author":{"gitId":"EiffelLKF"},"content":"**Use case: UC09 - Get Help**","lastModifiedDate":"2022-10-11"},{"lineNumber":471,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":472,"author":{"gitId":"LJXSean"},"content":"**MSS**","lastModifiedDate":"2022-09-21"},{"lineNumber":473,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":474,"author":{"gitId":"LJXSean"},"content":"1. User requests to view help","lastModifiedDate":"2022-09-21"},{"lineNumber":475,"author":{"gitId":"LJXSean"},"content":"2. Omnihealth shows list of commands","lastModifiedDate":"2022-09-21"},{"lineNumber":476,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":477,"author":{"gitId":"LJXSean"},"content":"    Use case ends","lastModifiedDate":"2022-09-21"},{"lineNumber":478,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":479,"author":{"gitId":"EiffelLKF"},"content":"**Use case: UC10 - Find patient**","lastModifiedDate":"2022-10-11"},{"lineNumber":480,"author":{"gitId":"EiffelLKF"},"content":"**Precondition: Addressbook is displayed**","lastModifiedDate":"2022-10-11"},{"lineNumber":481,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":482,"author":{"gitId":"LJXSean"},"content":"**MSS**","lastModifiedDate":"2022-09-21"},{"lineNumber":483,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":484,"author":{"gitId":"EiffelLKF"},"content":"1. User requests to find a patient by name.","lastModifiedDate":"2022-10-11"},{"lineNumber":485,"author":{"gitId":"LJXSean"},"content":"2. OmniHealth shows a list of all patients matching the input by the user.","lastModifiedDate":"2022-09-21"},{"lineNumber":486,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":487,"author":{"gitId":"marclzh"},"content":"**Extensions**","lastModifiedDate":"2022-09-27"},{"lineNumber":488,"author":{"gitId":"marclzh"},"content":"* 1a. Patient record list is empty","lastModifiedDate":"2022-09-27"},{"lineNumber":489,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":490,"author":{"gitId":"marclzh"},"content":"  Use case ends","lastModifiedDate":"2022-09-27"},{"lineNumber":491,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":492,"author":{"gitId":"marclzh"},"content":"* 1b. Patient does not exist","lastModifiedDate":"2022-09-27"},{"lineNumber":493,"author":{"gitId":"marclzh"},"content":"    * 1b1. Omnihealth displays error message","lastModifiedDate":"2022-09-27"},{"lineNumber":494,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":495,"author":{"gitId":"marclzh"},"content":"  Use case ends","lastModifiedDate":"2022-09-27"},{"lineNumber":496,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":497,"author":{"gitId":"EiffelLKF"},"content":"**Use case: UC11 - Find patient records**","lastModifiedDate":"2022-10-11"},{"lineNumber":498,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":499,"author":{"gitId":"LJXSean"},"content":"**MSS**","lastModifiedDate":"2022-09-21"},{"lineNumber":500,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":501,"author":{"gitId":"EiffelLKF"},"content":"1. User !!requests to list patients (UC05)!!","lastModifiedDate":"2022-10-11"},{"lineNumber":502,"author":{"gitId":"EiffelLKF"},"content":"2. User !!requests to display record list of specific patient (UC06)!!","lastModifiedDate":"2022-10-11"},{"lineNumber":503,"author":{"gitId":"EiffelLKF"},"content":"3. User inputs a keyword to search the record list.","lastModifiedDate":"2022-10-11"},{"lineNumber":504,"author":{"gitId":"LJXSean"},"content":"4. OmniHealth shows all the relevant records of the specified patient.","lastModifiedDate":"2022-09-21"},{"lineNumber":505,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":506,"author":{"gitId":"marclzh"},"content":"**Extensions**","lastModifiedDate":"2022-09-27"},{"lineNumber":507,"author":{"gitId":"marclzh"},"content":"* 1a. Patient record list is empty","lastModifiedDate":"2022-09-27"},{"lineNumber":508,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":509,"author":{"gitId":"marclzh"},"content":"  Use case ends","lastModifiedDate":"2022-09-27"},{"lineNumber":510,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":511,"author":{"gitId":"marclzh"},"content":"* 1b. Patient does not exist","lastModifiedDate":"2022-09-27"},{"lineNumber":512,"author":{"gitId":"marclzh"},"content":"    * 1b1. Omnihealth displays error message","lastModifiedDate":"2022-09-27"},{"lineNumber":513,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":514,"author":{"gitId":"marclzh"},"content":"  Use case ends","lastModifiedDate":"2022-09-27"},{"lineNumber":515,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":516,"author":{"gitId":"marclzh"},"content":"* 3a. No keywords matching can be found","lastModifiedDate":"2022-09-27"},{"lineNumber":517,"author":{"gitId":"marclzh"},"content":"    * 3a1. Omnihealth displays error message","lastModifiedDate":"2022-09-27"},{"lineNumber":518,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":519,"author":{"gitId":"marclzh"},"content":"  Use case ends","lastModifiedDate":"2022-09-27"},{"lineNumber":520,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":521,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":522,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":523,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":524,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":525,"author":{"gitId":"LJXSean"},"content":"1. Should work as long as Java `11` or above is installed.","lastModifiedDate":"2022-09-27"},{"lineNumber":526,"author":{"gitId":"LJXSean"},"content":"2. Should be secure to use so that patient records are not easily leaked.","lastModifiedDate":"2022-09-27"},{"lineNumber":527,"author":{"gitId":"LJXSean"},"content":"3. Should be able to handle large amounts of data eg. Patient record list, Patient list","lastModifiedDate":"2022-09-27"},{"lineNumber":528,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":529,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":530,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":531,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":532,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":533,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":534,"author":{"gitId":"-"},"content":"* **Private contact detail**: A contact detail that is not meant to be shared with others","lastModifiedDate":"2020-05-23"},{"lineNumber":535,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":536,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":537,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":538,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":539,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":540,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":541,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":542,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":543,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":544,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":545,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":546,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":547,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":548,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":549,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":550,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":551,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":552,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":553,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":554,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":555,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":556,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":557,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":558,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":559,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":560,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":561,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":562,"author":{"gitId":"-"},"content":"1. _{ more test cases â€¦â€‹ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":563,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":564,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":565,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":566,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":567,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":568,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":569,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":570,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":571,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":572,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":573,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":574,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":575,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":576,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":577,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":578,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":579,"author":{"gitId":"-"},"content":"1. _{ more test cases â€¦â€‹ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":580,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":581,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":582,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":583,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":584,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":585,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":586,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":587,"author":{"gitId":"-"},"content":"1. _{ more test cases â€¦â€‹ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"marclzh":23,"LJXSean":150,"EiffelLKF":53,"-":361}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"OmniHealth is a **desktop app for private clinic practitioners to quickly store, edit and search for patients and their records**. It is optimised for use via a **Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). ","lastModifiedDate":"2022-09-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"If you can type fast, OmniHealth can get your patient management tasks done faster than traditional GUI apps! ðŸ’Šâœ¨","lastModifiedDate":"2022-09-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"1. Download the latest `OmniHealth.jar` from [here](https://github.com/AY2223S1-CS2103T-T14-3/tp/releases).","lastModifiedDate":"2022-09-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"anthonyhoth"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for OmniHealth.","lastModifiedDate":"2022-09-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   Some example commands you can try:","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"anthonyhoth"},"content":"   * **`list`** : Lists all patients.","lastModifiedDate":"2022-09-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"anthonyhoth"},"content":"   * **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : Adds a patient named `John Doe` to OmniHealth.","lastModifiedDate":"2022-09-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"anthonyhoth"},"content":"   * **`delete`**`3` : Deletes the 3rd patient shown in the current list.","lastModifiedDate":"2022-09-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"anthonyhoth"},"content":"   * **`clear`** : Deletes all patients.","lastModifiedDate":"2022-09-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"   * **`exit`** : Exits the app.","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"* Items with `â€¦`â€‹ after them can be used multiple times including zero times.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]â€¦â€‹` can be used as `Â ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken.","lastModifiedDate":"2021-02-04"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":63,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-02-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-02-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"### Viewing help : `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"Shows a message explaning how to access the help page.","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"Format: `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"EiffelLKF"},"content":"### Adding a patient: `add`","lastModifiedDate":"2022-09-20"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"EiffelLKF"},"content":"Adds a patient to the patient record database.","lastModifiedDate":"2022-09-20"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]â€¦â€‹`","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"A person can have any number of tags (including 0)","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"EiffelLKF"},"content":"### Adding a record: `addR`","lastModifiedDate":"2022-09-20"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":93,"author":{"gitId":"EiffelLKF"},"content":"Adds a new record to a given patient.","lastModifiedDate":"2022-09-20"},{"lineNumber":94,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":95,"author":{"gitId":"EiffelLKF"},"content":"Format: `addR INDEX d/DATE r/DESCRIPTION`","lastModifiedDate":"2022-09-20"},{"lineNumber":96,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":97,"author":{"gitId":"EiffelLKF"},"content":"* Adds a new record to the patient at the specified `INDEX`.","lastModifiedDate":"2022-09-20"},{"lineNumber":98,"author":{"gitId":"EiffelLKF"},"content":"* The index refers to the index number shown in the displayed patient records list.","lastModifiedDate":"2022-09-20"},{"lineNumber":99,"author":{"gitId":"EiffelLKF"},"content":"* The index must be a positive integer 1, 2, 3, â€¦â€‹","lastModifiedDate":"2022-09-20"},{"lineNumber":100,"author":{"gitId":"EiffelLKF"},"content":"* The record is created with given `DATE` and `DESCRIPTION` information.","lastModifiedDate":"2022-09-20"},{"lineNumber":101,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":102,"author":{"gitId":"EiffelLKF"},"content":"Examples:","lastModifiedDate":"2022-09-20"},{"lineNumber":103,"author":{"gitId":"EiffelLKF"},"content":"* `addR 1 d/2022-09-11 r/Patient tested negative for COVID-19`","lastModifiedDate":"2022-09-20"},{"lineNumber":104,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":105,"author":{"gitId":"anthonyhoth"},"content":"### Deleting a patient: `delete`","lastModifiedDate":"2022-09-20"},{"lineNumber":106,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":107,"author":{"gitId":"anthonyhoth"},"content":"Deletes the specified patient from the patient database.","lastModifiedDate":"2022-09-20"},{"lineNumber":108,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":109,"author":{"gitId":"anthonyhoth"},"content":"Format: `delete INDEX`","lastModifiedDate":"2022-09-20"},{"lineNumber":110,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":111,"author":{"gitId":"anthonyhoth"},"content":"* Deletes the patient at the specified `INDEX`.","lastModifiedDate":"2022-09-20"},{"lineNumber":112,"author":{"gitId":"anthonyhoth"},"content":"* The index refers to the index number shown in the displayed patient records list.","lastModifiedDate":"2022-09-20"},{"lineNumber":113,"author":{"gitId":"anthonyhoth"},"content":"* The index must be a positive integer 1, 2, 3, â€¦â€‹","lastModifiedDate":"2022-09-20"},{"lineNumber":114,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":115,"author":{"gitId":"anthonyhoth"},"content":"Examples:","lastModifiedDate":"2022-09-20"},{"lineNumber":116,"author":{"gitId":"anthonyhoth"},"content":"* `list` followed by `delete 2` deletes the 2nd patient in the address book.","lastModifiedDate":"2022-09-20"},{"lineNumber":117,"author":{"gitId":"anthonyhoth"},"content":"* `find Betsy` followed by `delete 1` deletes the 1st patient in the results of the find command.","lastModifiedDate":"2022-09-20"},{"lineNumber":118,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":119,"author":{"gitId":"anthonyhoth"},"content":"### Deleting a record: `deleteR`","lastModifiedDate":"2022-09-20"},{"lineNumber":120,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":121,"author":{"gitId":"anthonyhoth"},"content":"Deletes the specified record from the currently viewed patientâ€™s records.","lastModifiedDate":"2022-09-20"},{"lineNumber":122,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":123,"author":{"gitId":"anthonyhoth"},"content":"Format: `deleteR RECORD_INDEX`","lastModifiedDate":"2022-09-20"},{"lineNumber":124,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":125,"author":{"gitId":"anthonyhoth"},"content":"* The command is only valid after using `listR PATIENT_INDEX`.","lastModifiedDate":"2022-09-20"},{"lineNumber":126,"author":{"gitId":"anthonyhoth"},"content":"* Deletes the record of the currently viewed patient at the specified `RECORD_INDEX`.","lastModifiedDate":"2022-09-20"},{"lineNumber":127,"author":{"gitId":"anthonyhoth"},"content":"* The record index must be a positive integer 1, 2, 3, â€¦â€‹","lastModifiedDate":"2022-09-20"},{"lineNumber":128,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":129,"author":{"gitId":"anthonyhoth"},"content":"Examples:","lastModifiedDate":"2022-09-20"},{"lineNumber":130,"author":{"gitId":"anthonyhoth"},"content":"* `listR 1` then `deleteR 2` deletes the 2nd record from the 1st patientâ€™s listed records.","lastModifiedDate":"2022-09-20"},{"lineNumber":131,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":132,"author":{"gitId":"hanwenlai"},"content":"### Listing all patients: `list`","lastModifiedDate":"2022-09-20"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"hanwenlai"},"content":"Shows a list of all patients in the patient database.","lastModifiedDate":"2022-10-12"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"Format: `list`","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":138,"author":{"gitId":"hanwenlai"},"content":"### Listing all record(s) for the specified patient : `listR`","lastModifiedDate":"2022-09-20"},{"lineNumber":139,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":140,"author":{"gitId":"hanwenlai"},"content":"Shows a list of all records for the specified patient.","lastModifiedDate":"2022-10-12"},{"lineNumber":141,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":142,"author":{"gitId":"hanwenlai"},"content":"Format: `listR PATIENT_INDEX`","lastModifiedDate":"2022-09-20"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"hanwenlai"},"content":"* The command is only valid after using `list`.","lastModifiedDate":"2022-10-12"},{"lineNumber":145,"author":{"gitId":"hanwenlai"},"content":"* Lists all records of the patient at the specified `PATIENT_INDEX`. ","lastModifiedDate":"2022-10-12"},{"lineNumber":146,"author":{"gitId":"hanwenlai"},"content":"* The index refers to the index number shown in the displayed patient list. ","lastModifiedDate":"2022-10-12"},{"lineNumber":147,"author":{"gitId":"hanwenlai"},"content":"* The index **must be a positive integer** 1, 2, 3, â€¦â€‹","lastModifiedDate":"2022-10-12"},{"lineNumber":148,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":149,"author":{"gitId":"hanwenlai"},"content":"Examples:","lastModifiedDate":"2022-10-12"},{"lineNumber":150,"author":{"gitId":"hanwenlai"},"content":"* `listR 1` displays all records of the 1st patient in the displayed patient list.","lastModifiedDate":"2022-10-12"},{"lineNumber":151,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":152,"author":{"gitId":"-"},"content":"### Editing a person : `edit`","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"Edits an existing person in the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]â€¦â€‹`","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, â€¦â€‹","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative.","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"* You can remove all the personâ€™s tags by typing `t/` without","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    specifying any tags after it.","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"*  `edit 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags.","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"### Locating persons by name: `find`","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"Finds persons whose names contain any of the given keywords.","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"* The search is case-insensitive. e.g `hans` will match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"* Only the name is searched.","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search).","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"* `find John` returns `john` and `John Doe`","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"* `find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":188,"author":{"gitId":"marclzh"},"content":"### Locating records by keyword: `findR`","lastModifiedDate":"2022-09-20"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":190,"author":{"gitId":"marclzh"},"content":"Finds records with a description that matches the keyword(s) specified in the records database. This command is only valid after using the listR command to list out the records for a specified patient.","lastModifiedDate":"2022-09-20"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":192,"author":{"gitId":"marclzh"},"content":"Format: `findR KEYWORD [MORE_KEYWORDS]`","lastModifiedDate":"2022-09-20"},{"lineNumber":193,"author":{"gitId":"marclzh"},"content":"* The search is case-insensitive. e.g `hello` will `match HELLO`","lastModifiedDate":"2022-09-20"},{"lineNumber":194,"author":{"gitId":"marclzh"},"content":"* The order of the keywords does not matter. e.g. `Hello World` will match `World Hello`","lastModifiedDate":"2022-09-20"},{"lineNumber":195,"author":{"gitId":"marclzh"},"content":"* Only the description of the record will be searched.","lastModifiedDate":"2022-09-20"},{"lineNumber":196,"author":{"gitId":"marclzh"},"content":"* Only full words will be matched e.g. `Hell` will not match `Hello`.","lastModifiedDate":"2022-09-20"},{"lineNumber":197,"author":{"gitId":"marclzh"},"content":"* Records with a description matching at least one keyword will be returned (i.e. OR search). e.g. `Hello World` will return `Hello Hello`, `World World`.","lastModifiedDate":"2022-09-20"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":199,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2022-09-20"},{"lineNumber":200,"author":{"gitId":"marclzh"},"content":"* `findR hello` returns `hello` and `Hello World`","lastModifiedDate":"2022-09-20"},{"lineNumber":201,"author":{"gitId":"marclzh"},"content":"* `findR foo bar` returns `foo bar`, `bar null`","lastModifiedDate":"2022-09-20"},{"lineNumber":202,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":204,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"LJXSean"},"content":"Clears all patients from Omnihealth.","lastModifiedDate":"2022-09-21"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"Format: `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"LJXSean"},"content":"### Clearing all patient records : `clearR`","lastModifiedDate":"2022-09-21"},{"lineNumber":211,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":212,"author":{"gitId":"LJXSean"},"content":"Clears all records of a specific patient from Omnihealth.","lastModifiedDate":"2022-09-21"},{"lineNumber":213,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":214,"author":{"gitId":"LJXSean"},"content":"Format: `clearR`","lastModifiedDate":"2022-09-21"},{"lineNumber":215,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":216,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"### Saving the data","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"marclzh"},"content":"Patient\u0027s data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2022-09-27"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"### Editing the data file","lastModifiedDate":"2021-02-04"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":228,"author":{"gitId":"marclzh"},"content":"OmniHealth\u0027s data are saved as a JSON file `[JAR file location]/data/patientlist.json`. Advanced users are welcome to update data directly by editing that data file.","lastModifiedDate":"2022-09-27"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":230,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2021-02-04"},{"lineNumber":231,"author":{"gitId":"marclzh"},"content":"If your changes to the data file makes its format invalid, OmniHealth will discard all data and start with an empty data file at the next run.","lastModifiedDate":"2022-09-27"},{"lineNumber":232,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":234,"author":{"gitId":"-"},"content":"### Archiving data files `[coming in v2.0]`","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"_Details coming soon ..._","lastModifiedDate":"2021-02-04"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"marclzh"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous OmniHealth home folder.","lastModifiedDate":"2022-09-27"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"marclzh"},"content":"| Action            | Format, Examples                                                                                                                                                      |","lastModifiedDate":"2022-09-20"},{"lineNumber":250,"author":{"gitId":"anthonyhoth"},"content":"|-------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2022-09-27"},{"lineNumber":251,"author":{"gitId":"marclzh"},"content":"| **Add Patient**   | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]â€¦â€‹` \u003cbr\u003e e.g., `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague` |","lastModifiedDate":"2022-09-20"},{"lineNumber":252,"author":{"gitId":"marclzh"},"content":"| **Add Record**    | `addR INDEX d/DATE r/DESCRIPTION` \u003cbr\u003e e.g., `e.g., addR 1 d/2022-09-11 r/Patient tested negative for COVID-19`                                                       |","lastModifiedDate":"2022-09-20"},{"lineNumber":253,"author":{"gitId":"marclzh"},"content":"| **Clear**         | `clear`                                                                                                                                                               |","lastModifiedDate":"2022-09-20"},{"lineNumber":254,"author":{"gitId":"LJXSean"},"content":"| **Clear Record**  | `clearR`                                                                                                                                                              |","lastModifiedDate":"2022-09-21"},{"lineNumber":255,"author":{"gitId":"marclzh"},"content":"| **Delete**        | `delete INDEX`\u003cbr\u003e e.g., `delete 3`                                                                                                                                   |","lastModifiedDate":"2022-09-20"},{"lineNumber":256,"author":{"gitId":"anthonyhoth"},"content":"| **Delete Record** | `deleteR INDEX`                                                                                                                                                       |","lastModifiedDate":"2022-09-27"},{"lineNumber":257,"author":{"gitId":"marclzh"},"content":"| **Edit**          | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]â€¦â€‹`\u003cbr\u003e e.g.,`edit 2 n/James Lee e/jameslee@example.com`                                           |","lastModifiedDate":"2022-09-20"},{"lineNumber":258,"author":{"gitId":"marclzh"},"content":"| **Find**          | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`                                                                                                            |","lastModifiedDate":"2022-09-20"},{"lineNumber":259,"author":{"gitId":"marclzh"},"content":"| **List**          | `list`                                                                                                                                                                |","lastModifiedDate":"2022-09-20"},{"lineNumber":260,"author":{"gitId":"marclzh"},"content":"| **Help**          | `help`                                                                                                                                                                |","lastModifiedDate":"2022-09-20"}],"authorContributionMap":{"anthonyhoth":34,"marclzh":27,"hanwenlai":15,"LJXSean":8,"EiffelLKF":15,"-":161}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"anthonyhoth"},"content":"title: OmniHealth","lastModifiedDate":"2022-09-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"[![CI Status](https://github.com/AY2223S1-CS2103T-T14-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2223S1-CS2103T-T14-3/tp/actions)","lastModifiedDate":"2022-09-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"[![codecov](https://codecov.io/gh/AY2223S1-CS2103T-T14-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2223S1-CS2103T-T14-3/tp)","lastModifiedDate":"2022-09-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"anthonyhoth"},"content":"OmniHealth is a **desktop app for private clinic practitioners to quickly store, edit and search for patients and their records**. It is optimised for use via a **Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI).","lastModifiedDate":"2022-09-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"anthonyhoth"},"content":"If you can type fast, OmniHealth can get your patient management tasks done faster than traditional GUI apps! ðŸ’Šâœ¨","lastModifiedDate":"2022-09-27"},{"lineNumber":14,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":15,"author":{"gitId":"anthonyhoth"},"content":"* For the detailed documentation of this project, see the **[OmniHealth Website](https://ay2223s1-cs2103t-t14-3.github.io/tp/)**.","lastModifiedDate":"2022-09-27"},{"lineNumber":16,"author":{"gitId":"anthonyhoth"},"content":"* This project is built on the AddressBook-Level3 project, find out more on [se-education.org](https://se-education.org#https://se-education.org/#contributing) for more info.","lastModifiedDate":"2022-09-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"**Acknowledgements**","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"anthonyhoth":6,"-":15}},{"path":"docs/team/anthonyhoth.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"anthonyhoth"},"content":"---","lastModifiedDate":"2022-09-27"},{"lineNumber":2,"author":{"gitId":"anthonyhoth"},"content":"layout: page","lastModifiedDate":"2022-09-27"},{"lineNumber":3,"author":{"gitId":"anthonyhoth"},"content":"title: Anthony\u0027s Project Portfolio Page","lastModifiedDate":"2022-09-27"},{"lineNumber":4,"author":{"gitId":"anthonyhoth"},"content":"---","lastModifiedDate":"2022-09-27"},{"lineNumber":5,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":6,"author":{"gitId":"anthonyhoth"},"content":"### Project: OmniHealth","lastModifiedDate":"2022-09-27"},{"lineNumber":7,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":8,"author":{"gitId":"anthonyhoth"},"content":"## Overview","lastModifiedDate":"2022-09-27"},{"lineNumber":9,"author":{"gitId":"anthonyhoth"},"content":"OmniHealth aims to provide doctors with a place to store and centrally manage their patientsâ€™ information (eg. medical records, contact information), as well as allowing doctors to schedule appointments, send appointment reminders and other notifications to patients using their stored contact information.","lastModifiedDate":"2022-09-27"},{"lineNumber":10,"author":{"gitId":"anthonyhoth"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-09-27"},{"lineNumber":11,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":12,"author":{"gitId":"anthonyhoth"},"content":"## Summary of Contributions","lastModifiedDate":"2022-09-27"},{"lineNumber":13,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":14,"author":{"gitId":"anthonyhoth"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-09-27"},{"lineNumber":15,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":16,"author":{"gitId":"anthonyhoth"},"content":"* **Code contributed**: to be added soon","lastModifiedDate":"2022-09-27"},{"lineNumber":17,"author":{"gitId":"anthonyhoth"},"content":"* **Enhancements implemented**: to be added soon","lastModifiedDate":"2022-09-27"},{"lineNumber":18,"author":{"gitId":"anthonyhoth"},"content":"* **Project management**: to be added soon","lastModifiedDate":"2022-09-27"},{"lineNumber":19,"author":{"gitId":"anthonyhoth"},"content":"* **Documentation**: to be added soon","lastModifiedDate":"2022-09-27"},{"lineNumber":20,"author":{"gitId":"anthonyhoth"},"content":"  * User Guide: to be added soon","lastModifiedDate":"2022-09-27"},{"lineNumber":21,"author":{"gitId":"anthonyhoth"},"content":"  * Developer Guide: to be added soon","lastModifiedDate":"2022-09-27"},{"lineNumber":22,"author":{"gitId":"anthonyhoth"},"content":"* **Community**:","lastModifiedDate":"2022-09-27"},{"lineNumber":23,"author":{"gitId":"anthonyhoth"},"content":"  * Contribution to team-based tasks: to be added soon","lastModifiedDate":"2022-09-27"},{"lineNumber":24,"author":{"gitId":"anthonyhoth"},"content":"  * Review/mentoring contributions: to be added soon","lastModifiedDate":"2022-09-27"},{"lineNumber":25,"author":{"gitId":"anthonyhoth"},"content":"* **Tools**: to be added soon","lastModifiedDate":"2022-09-27"},{"lineNumber":26,"author":{"gitId":"anthonyhoth"},"content":"* **Contributions beyond the project team** :to be added soon","lastModifiedDate":"2022-09-27"}],"authorContributionMap":{"anthonyhoth":26}},{"path":"docs/team/eiffellkf.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"EiffelLKF"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":2,"author":{"gitId":"EiffelLKF"},"content":"layout: page","lastModifiedDate":"2022-09-20"},{"lineNumber":3,"author":{"gitId":"EiffelLKF"},"content":"title: Eiffel Leo\u0027s Project Portfolio Page","lastModifiedDate":"2022-09-20"},{"lineNumber":4,"author":{"gitId":"EiffelLKF"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":5,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":6,"author":{"gitId":"EiffelLKF"},"content":"### Project: OmniHealth","lastModifiedDate":"2022-09-20"},{"lineNumber":7,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":8,"author":{"gitId":"EiffelLKF"},"content":"## Overview","lastModifiedDate":"2022-09-20"},{"lineNumber":9,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":10,"author":{"gitId":"EiffelLKF"},"content":"to be added soon","lastModifiedDate":"2022-09-20"},{"lineNumber":11,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":12,"author":{"gitId":"EiffelLKF"},"content":"## Summary of Contributions","lastModifiedDate":"2022-09-20"},{"lineNumber":13,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":14,"author":{"gitId":"EiffelLKF"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-09-20"},{"lineNumber":15,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":16,"author":{"gitId":"EiffelLKF"},"content":"* **Code contributed**: to be added soon","lastModifiedDate":"2022-09-20"},{"lineNumber":17,"author":{"gitId":"EiffelLKF"},"content":"* **Enhancements implemented**: to be added soon","lastModifiedDate":"2022-09-20"},{"lineNumber":18,"author":{"gitId":"EiffelLKF"},"content":"* **Project management**: to be added soon","lastModifiedDate":"2022-09-20"},{"lineNumber":19,"author":{"gitId":"EiffelLKF"},"content":"* **Documentation**: to be added soon","lastModifiedDate":"2022-09-20"},{"lineNumber":20,"author":{"gitId":"EiffelLKF"},"content":"  * User Guide: to be added soon","lastModifiedDate":"2022-09-20"},{"lineNumber":21,"author":{"gitId":"EiffelLKF"},"content":"  * Developer Guide: to be added soon","lastModifiedDate":"2022-09-20"},{"lineNumber":22,"author":{"gitId":"EiffelLKF"},"content":"* **Community**:","lastModifiedDate":"2022-09-20"},{"lineNumber":23,"author":{"gitId":"EiffelLKF"},"content":"  * Contribution to team-based tasks: to be added soon","lastModifiedDate":"2022-09-20"},{"lineNumber":24,"author":{"gitId":"EiffelLKF"},"content":"  * Review/mentoring contributions: to be added soon","lastModifiedDate":"2022-09-20"},{"lineNumber":25,"author":{"gitId":"EiffelLKF"},"content":"* **Tools**: to be added soon","lastModifiedDate":"2022-09-20"},{"lineNumber":26,"author":{"gitId":"EiffelLKF"},"content":"* **Contributions beyond the project team** :to be added soon","lastModifiedDate":"2022-09-20"}],"authorContributionMap":{"EiffelLKF":26}},{"path":"docs/team/hanwenlai.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"hanwenlai"},"content":"---","lastModifiedDate":"2022-09-27"},{"lineNumber":2,"author":{"gitId":"hanwenlai"},"content":"layout: page","lastModifiedDate":"2022-09-27"},{"lineNumber":3,"author":{"gitId":"hanwenlai"},"content":"title: Lai Han Wen\u0027s Project Portfolio Page","lastModifiedDate":"2022-09-27"},{"lineNumber":4,"author":{"gitId":"hanwenlai"},"content":"---","lastModifiedDate":"2022-09-27"},{"lineNumber":5,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":6,"author":{"gitId":"hanwenlai"},"content":"### Project: OmniHealth","lastModifiedDate":"2022-09-27"},{"lineNumber":7,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":8,"author":{"gitId":"hanwenlai"},"content":"## Overview","lastModifiedDate":"2022-09-27"},{"lineNumber":9,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":10,"author":{"gitId":"hanwenlai"},"content":"OmniHealth aims to provide doctors with a place to store and centrally manage their patientsâ€™ information (eg. medical records, contact information), as well as allowing doctors to schedule appointments, send appointment reminders and other notifications to patients using their stored contact information.","lastModifiedDate":"2022-09-27"},{"lineNumber":11,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":12,"author":{"gitId":"hanwenlai"},"content":"## Summary of Contributions","lastModifiedDate":"2022-09-27"},{"lineNumber":13,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":14,"author":{"gitId":"hanwenlai"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-09-27"},{"lineNumber":15,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":16,"author":{"gitId":"hanwenlai"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2223s1.github.io/tp-dashboard/?search\u003dhanwenlai\u0026breakdown\u003dtrue)","lastModifiedDate":"2022-09-27"},{"lineNumber":17,"author":{"gitId":"hanwenlai"},"content":"* **Enhancements implemented**: to be added soon","lastModifiedDate":"2022-09-27"},{"lineNumber":18,"author":{"gitId":"hanwenlai"},"content":"* **Project management**: to be added soon","lastModifiedDate":"2022-09-27"},{"lineNumber":19,"author":{"gitId":"hanwenlai"},"content":"* **Documentation**","lastModifiedDate":"2022-09-27"},{"lineNumber":20,"author":{"gitId":"hanwenlai"},"content":"  * User Guide:","lastModifiedDate":"2022-09-27"},{"lineNumber":21,"author":{"gitId":"hanwenlai"},"content":"    * Added documentation for the features `list patients` and `list records`.","lastModifiedDate":"2022-09-27"},{"lineNumber":22,"author":{"gitId":"hanwenlai"},"content":"  * Developer Guide:","lastModifiedDate":"2022-09-27"},{"lineNumber":23,"author":{"gitId":"hanwenlai"},"content":"    * Added implementation details of the `list patients` and `list records` features.","lastModifiedDate":"2022-09-27"},{"lineNumber":24,"author":{"gitId":"hanwenlai"},"content":"* **Community**:","lastModifiedDate":"2022-09-27"},{"lineNumber":25,"author":{"gitId":"hanwenlai"},"content":"  * Contribution to team-based tasks: to be added soon","lastModifiedDate":"2022-09-27"},{"lineNumber":26,"author":{"gitId":"hanwenlai"},"content":"  * Review/mentoring contributions: to be added soon","lastModifiedDate":"2022-09-27"},{"lineNumber":27,"author":{"gitId":"hanwenlai"},"content":"* **Tools**: to be added soon","lastModifiedDate":"2022-09-27"},{"lineNumber":28,"author":{"gitId":"hanwenlai"},"content":"* **Contributions beyond the project team** :to be added soon","lastModifiedDate":"2022-09-27"}],"authorContributionMap":{"hanwenlai":28}},{"path":"docs/team/ljxsean.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"LJXSean"},"content":"---","lastModifiedDate":"2022-09-21"},{"lineNumber":2,"author":{"gitId":"LJXSean"},"content":"layout: page","lastModifiedDate":"2022-09-21"},{"lineNumber":3,"author":{"gitId":"LJXSean"},"content":"title: Sean Lam\u0027s Project Portfolio Page","lastModifiedDate":"2022-09-21"},{"lineNumber":4,"author":{"gitId":"LJXSean"},"content":"---","lastModifiedDate":"2022-09-21"},{"lineNumber":5,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":6,"author":{"gitId":"LJXSean"},"content":"### Project: Omnihealth","lastModifiedDate":"2022-09-21"},{"lineNumber":7,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":8,"author":{"gitId":"LJXSean"},"content":"OmniHealth aims to provide doctors with a place to store and centrally manage their patientsâ€™ information (eg. medical records, contact information), as well as allowing doctors to schedule appointments, send appointment reminders and other notifications to patients using their stored contact information.","lastModifiedDate":"2022-09-21"},{"lineNumber":9,"author":{"gitId":"LJXSean"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-09-21"},{"lineNumber":10,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":11,"author":{"gitId":"LJXSean"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2223s1.github.io/tp-dashboard/?search\u003dljxsean\u0026breakdown\u003dtrue)","lastModifiedDate":"2022-09-21"},{"lineNumber":12,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":13,"author":{"gitId":"LJXSean"},"content":"* **Project management**:","lastModifiedDate":"2022-09-21"},{"lineNumber":14,"author":{"gitId":"LJXSean"},"content":"    * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2022-09-21"},{"lineNumber":15,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":16,"author":{"gitId":"LJXSean"},"content":"* **Enhancements to existing features**: To be added","lastModifiedDate":"2022-09-21"},{"lineNumber":17,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":18,"author":{"gitId":"LJXSean"},"content":"* **Documentation**:","lastModifiedDate":"2022-09-21"},{"lineNumber":19,"author":{"gitId":"LJXSean"},"content":"    * User Guide:","lastModifiedDate":"2022-09-21"},{"lineNumber":20,"author":{"gitId":"LJXSean"},"content":"        * Added documentation for the features `clear` and `help`","lastModifiedDate":"2022-09-21"},{"lineNumber":21,"author":{"gitId":"LJXSean"},"content":"    * Developer Guide:","lastModifiedDate":"2022-09-21"},{"lineNumber":22,"author":{"gitId":"LJXSean"},"content":"        * Added implementation details of the `clear` and `help` feature.","lastModifiedDate":"2022-09-21"},{"lineNumber":23,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":24,"author":{"gitId":"LJXSean"},"content":"* **Community**:","lastModifiedDate":"2022-09-21"},{"lineNumber":25,"author":{"gitId":"LJXSean"},"content":"    * PRs reviewed (with non-trivial review comments): to be added","lastModifiedDate":"2022-09-21"},{"lineNumber":26,"author":{"gitId":"LJXSean"},"content":"    * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2022-09-21"},{"lineNumber":27,"author":{"gitId":"LJXSean"},"content":"    * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2022-09-21"},{"lineNumber":28,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":29,"author":{"gitId":"LJXSean"},"content":"* **Tools**: To be added soon","lastModifiedDate":"2022-09-21"},{"lineNumber":30,"author":{"gitId":"LJXSean"},"content":"* **Contributions beyond project team**: To be added soon","lastModifiedDate":"2022-09-21"}],"authorContributionMap":{"LJXSean":30}},{"path":"docs/team/marclzh.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"layout: page","lastModifiedDate":"2022-09-20"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"title: Marcus Lee\u0027s Project Portfolio Page","lastModifiedDate":"2022-09-20"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"## Project: OmniHealth","lastModifiedDate":"2022-09-20"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"### Overview","lastModifiedDate":"2022-09-20"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"OmniHealth aims to provide doctors with a place to store and centrally manage their patientsâ€™ information (eg. medical records, contact information), as well as allowing doctors to schedule appointments, send appointment reminders and other notifications to patients using their stored contact information.","lastModifiedDate":"2022-09-20"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-09-20"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"* **New Feature**: Added the ability to search for relevant keywords in records.","lastModifiedDate":"2022-09-20"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"    * What it does:","lastModifiedDate":"2022-09-20"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"    * Justification:","lastModifiedDate":"2022-09-20"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"    * Highlights:","lastModifiedDate":"2022-09-20"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"    * Credits: *{}*","lastModifiedDate":"2022-09-20"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2022-09-20"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"* **Project management**:","lastModifiedDate":"2022-09-20"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"    * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2022-09-20"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2022-09-20"},{"lineNumber":24,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":25,"author":{"gitId":"marclzh"},"content":"* **Documentation**:","lastModifiedDate":"2022-09-20"},{"lineNumber":26,"author":{"gitId":"marclzh"},"content":"    * User Guide:","lastModifiedDate":"2022-09-20"},{"lineNumber":27,"author":{"gitId":"marclzh"},"content":"        * Added documentation for the features `find record` [\\#72]()","lastModifiedDate":"2022-09-20"},{"lineNumber":28,"author":{"gitId":"marclzh"},"content":"    * Developer Guide:","lastModifiedDate":"2022-09-20"},{"lineNumber":29,"author":{"gitId":"marclzh"},"content":"        * Added implementation details of the `find record` feature.","lastModifiedDate":"2022-09-20"},{"lineNumber":30,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":31,"author":{"gitId":"marclzh"},"content":"* **Community**:","lastModifiedDate":"2022-09-20"},{"lineNumber":32,"author":{"gitId":"marclzh"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2022-09-20"},{"lineNumber":33,"author":{"gitId":"marclzh"},"content":"    * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2022-09-20"},{"lineNumber":34,"author":{"gitId":"marclzh"},"content":"    * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2022-09-20"},{"lineNumber":35,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":36,"author":{"gitId":"marclzh"},"content":"* **Tools**:","lastModifiedDate":"2022-09-20"},{"lineNumber":37,"author":{"gitId":"marclzh"},"content":"    * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2022-09-20"},{"lineNumber":38,"author":{"gitId":"marclzh"},"content":"    * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2022-09-20"},{"lineNumber":39,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-09-20"}],"authorContributionMap":{"marclzh":39}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"LJXSean"},"content":"    public static final String MESSAGE_RECORDS_LISTED_OVERVIEW \u003d \"%1$d records listed!\";","lastModifiedDate":"2022-10-08"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"    public static final String MESSAGE_INVALID_DATE_FORMAT \u003d","lastModifiedDate":"2022-10-04"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"            \"Invalid date format! \\n Please use the format dd-MM-yyyy HHmm!\";","lastModifiedDate":"2022-10-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"marclzh":2,"LJXSean":1,"-":13}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"LJXSean"},"content":"import seedu.address.model.person.Record;","lastModifiedDate":"2022-10-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Returns the AddressBook.","lastModifiedDate":"2018-12-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @see seedu.address.model.Model#getAddressBook()","lastModifiedDate":"2018-12-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */","lastModifiedDate":"2017-09-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":37,"author":{"gitId":"LJXSean"},"content":"    /** Returns an unmodifiable view of the filtered list of records */","lastModifiedDate":"2022-10-08"},{"lineNumber":38,"author":{"gitId":"LJXSean"},"content":"    ObservableList\u003cRecord\u003e getFilteredRecordList();","lastModifiedDate":"2022-10-08"},{"lineNumber":39,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"LJXSean":4,"-":50}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":18,"author":{"gitId":"LJXSean"},"content":"import seedu.address.model.person.Record;","lastModifiedDate":"2022-10-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();","lastModifiedDate":"2018-01-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2017-07-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2018-12-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return model.getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":68,"author":{"gitId":"LJXSean"},"content":"    @Override","lastModifiedDate":"2022-10-08"},{"lineNumber":69,"author":{"gitId":"LJXSean"},"content":"    public ObservableList\u003cRecord\u003e getFilteredRecordList() {","lastModifiedDate":"2022-10-08"},{"lineNumber":70,"author":{"gitId":"LJXSean"},"content":"        return model.getFilteredRecordList();","lastModifiedDate":"2022-10-08"},{"lineNumber":71,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":72,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"LJXSean":6,"-":81}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-01-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Adds a person to the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2017-06-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2017-05-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2017-05-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \"","lastModifiedDate":"2017-05-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2017-06-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2017-05-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"friends \"","lastModifiedDate":"2017-05-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";","lastModifiedDate":"2017-05-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private final Person toAdd;","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}","lastModifiedDate":"2018-01-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        toAdd \u003d person;","lastModifiedDate":"2018-01-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"EiffelLKF"},"content":"        if (model.isRecordListDisplayed()) {","lastModifiedDate":"2022-10-11"},{"lineNumber":58,"author":{"gitId":"EiffelLKF"},"content":"            throw new CommandException(MESSAGE_ADDRESS_BOOK_COMMAND_PREREQUISITE);","lastModifiedDate":"2022-10-11"},{"lineNumber":59,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-11"},{"lineNumber":60,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);","lastModifiedDate":"2016-09-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"EiffelLKF":4,"-":67}},{"path":"src/main/java/seedu/address/logic/commands/AddRecordCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"EiffelLKF"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-10"},{"lineNumber":2,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":3,"author":{"gitId":"EiffelLKF"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-10"},{"lineNumber":4,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-10-10"},{"lineNumber":5,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RECORD;","lastModifiedDate":"2022-10-10"},{"lineNumber":6,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":7,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-10"},{"lineNumber":8,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-10"},{"lineNumber":9,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.person.Record;","lastModifiedDate":"2022-10-10"},{"lineNumber":10,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":11,"author":{"gitId":"EiffelLKF"},"content":"/**","lastModifiedDate":"2022-10-10"},{"lineNumber":12,"author":{"gitId":"EiffelLKF"},"content":" * Adds a new record into the record list of the current person whose record list is being displayed.","lastModifiedDate":"2022-10-10"},{"lineNumber":13,"author":{"gitId":"EiffelLKF"},"content":" * Record Date provided must be formatted in dd-MM-yyyy HHmm.","lastModifiedDate":"2022-10-10"},{"lineNumber":14,"author":{"gitId":"EiffelLKF"},"content":" */","lastModifiedDate":"2022-10-10"},{"lineNumber":15,"author":{"gitId":"EiffelLKF"},"content":"public class AddRecordCommand extends Command {","lastModifiedDate":"2022-10-10"},{"lineNumber":16,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":17,"author":{"gitId":"EiffelLKF"},"content":"    public static final String COMMAND_WORD \u003d \"addR\";","lastModifiedDate":"2022-10-10"},{"lineNumber":18,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":19,"author":{"gitId":"EiffelLKF"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a new record to the list of records.\\n\"","lastModifiedDate":"2022-10-10"},{"lineNumber":20,"author":{"gitId":"EiffelLKF"},"content":"            + \"Parameters: \"","lastModifiedDate":"2022-10-10"},{"lineNumber":21,"author":{"gitId":"EiffelLKF"},"content":"            + PREFIX_DATE + \"Record Date \"","lastModifiedDate":"2022-10-10"},{"lineNumber":22,"author":{"gitId":"EiffelLKF"},"content":"            + PREFIX_RECORD + \"Record Content\\n\"","lastModifiedDate":"2022-10-10"},{"lineNumber":23,"author":{"gitId":"EiffelLKF"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2022-10-10"},{"lineNumber":24,"author":{"gitId":"EiffelLKF"},"content":"            + PREFIX_DATE + \"31-10-2022 1430 (must be formatted in dd-MM-yyyy HHmm) \"","lastModifiedDate":"2022-10-10"},{"lineNumber":25,"author":{"gitId":"EiffelLKF"},"content":"            + PREFIX_RECORD + \"suffers from common cold\";","lastModifiedDate":"2022-10-10"},{"lineNumber":26,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":27,"author":{"gitId":"EiffelLKF"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New record added: %1$s\";","lastModifiedDate":"2022-10-10"},{"lineNumber":28,"author":{"gitId":"EiffelLKF"},"content":"    public static final String MESSAGE_DUPLICATE_RECORD \u003d \"This record already exists in the record list\";","lastModifiedDate":"2022-10-10"},{"lineNumber":29,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":30,"author":{"gitId":"EiffelLKF"},"content":"    private final Record toAdd;","lastModifiedDate":"2022-10-10"},{"lineNumber":31,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":32,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":33,"author":{"gitId":"EiffelLKF"},"content":"     * Creates an AddRecordCommand to add the specified {@code Record}","lastModifiedDate":"2022-10-10"},{"lineNumber":34,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":35,"author":{"gitId":"EiffelLKF"},"content":"    public AddRecordCommand(Record record) {","lastModifiedDate":"2022-10-10"},{"lineNumber":36,"author":{"gitId":"EiffelLKF"},"content":"        requireNonNull(record);","lastModifiedDate":"2022-10-10"},{"lineNumber":37,"author":{"gitId":"EiffelLKF"},"content":"        toAdd \u003d record;","lastModifiedDate":"2022-10-10"},{"lineNumber":38,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":39,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":40,"author":{"gitId":"EiffelLKF"},"content":"    @Override","lastModifiedDate":"2022-10-10"},{"lineNumber":41,"author":{"gitId":"EiffelLKF"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-10"},{"lineNumber":42,"author":{"gitId":"EiffelLKF"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-10"},{"lineNumber":43,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":44,"author":{"gitId":"EiffelLKF"},"content":"        if (!model.isRecordListDisplayed()) {","lastModifiedDate":"2022-10-11"},{"lineNumber":45,"author":{"gitId":"EiffelLKF"},"content":"            throw new CommandException(MESSAGE_RECORD_COMMAND_PREREQUISITE);","lastModifiedDate":"2022-10-11"},{"lineNumber":46,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-11"},{"lineNumber":47,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":48,"author":{"gitId":"EiffelLKF"},"content":"        if (model.hasRecord(toAdd)) {","lastModifiedDate":"2022-10-10"},{"lineNumber":49,"author":{"gitId":"EiffelLKF"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_RECORD);","lastModifiedDate":"2022-10-10"},{"lineNumber":50,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-10"},{"lineNumber":51,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":52,"author":{"gitId":"EiffelLKF"},"content":"        model.addRecord(toAdd);","lastModifiedDate":"2022-10-10"},{"lineNumber":53,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":54,"author":{"gitId":"EiffelLKF"},"content":"        return new CommandResult(","lastModifiedDate":"2022-10-10"},{"lineNumber":55,"author":{"gitId":"EiffelLKF"},"content":"                String.format(MESSAGE_SUCCESS, toAdd),","lastModifiedDate":"2022-10-10"},{"lineNumber":56,"author":{"gitId":"EiffelLKF"},"content":"                false, false, true);","lastModifiedDate":"2022-10-10"},{"lineNumber":57,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":58,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":59,"author":{"gitId":"EiffelLKF"},"content":"    @Override","lastModifiedDate":"2022-10-10"},{"lineNumber":60,"author":{"gitId":"EiffelLKF"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-10"},{"lineNumber":61,"author":{"gitId":"EiffelLKF"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-10"},{"lineNumber":62,"author":{"gitId":"EiffelLKF"},"content":"                || (other instanceof AddRecordCommand // instanceof handles nulls","lastModifiedDate":"2022-10-10"},{"lineNumber":63,"author":{"gitId":"EiffelLKF"},"content":"                \u0026\u0026 toAdd.equals(((AddRecordCommand) other).toAdd));","lastModifiedDate":"2022-10-10"},{"lineNumber":64,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":65,"author":{"gitId":"EiffelLKF"},"content":"}","lastModifiedDate":"2022-10-10"}],"authorContributionMap":{"EiffelLKF":65}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Clears the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"EiffelLKF"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":22,"author":{"gitId":"EiffelLKF"},"content":"        if (model.isRecordListDisplayed()) {","lastModifiedDate":"2022-10-11"},{"lineNumber":23,"author":{"gitId":"EiffelLKF"},"content":"            throw new CommandException(MESSAGE_ADDRESS_BOOK_COMMAND_PREREQUISITE);","lastModifiedDate":"2022-10-11"},{"lineNumber":24,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-11"},{"lineNumber":25,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        model.setAddressBook(new AddressBook());","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"EiffelLKF":7,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/ClearRecordCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-10"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-10"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":5,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-11"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-10"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"/**","lastModifiedDate":"2022-10-10"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":" * Clears all the records of a patient.","lastModifiedDate":"2022-10-10"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":" */","lastModifiedDate":"2022-10-10"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"public class ClearRecordCommand extends Command {","lastModifiedDate":"2022-10-10"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"    public static final String COMMAND_WORD \u003d \"clearR\";","lastModifiedDate":"2022-10-10"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2022-10-10"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"            + \": Deletes the records of the currently specified record list.\\n\";","lastModifiedDate":"2022-10-10"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Patient\u0027s Record List has been cleared!\";","lastModifiedDate":"2022-10-10"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"    @Override","lastModifiedDate":"2022-10-10"},{"lineNumber":21,"author":{"gitId":"EiffelLKF"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-11"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-10"},{"lineNumber":23,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":24,"author":{"gitId":"EiffelLKF"},"content":"        if (!model.isRecordListDisplayed()) {","lastModifiedDate":"2022-10-11"},{"lineNumber":25,"author":{"gitId":"EiffelLKF"},"content":"            throw new CommandException(MESSAGE_RECORD_COMMAND_PREREQUISITE);","lastModifiedDate":"2022-10-11"},{"lineNumber":26,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-11"},{"lineNumber":27,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":28,"author":{"gitId":"marclzh"},"content":"        model.clearRecords();","lastModifiedDate":"2022-10-10"},{"lineNumber":29,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":30,"author":{"gitId":"EiffelLKF"},"content":"        return new CommandResult(MESSAGE_SUCCESS,","lastModifiedDate":"2022-10-11"},{"lineNumber":31,"author":{"gitId":"EiffelLKF"},"content":"                false, false, true);","lastModifiedDate":"2022-10-11"},{"lineNumber":32,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":33,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-10-10"}],"authorContributionMap":{"marclzh":23,"EiffelLKF":10}},{"path":"src/main/java/seedu/address/logic/commands/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public abstract class Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"EiffelLKF"},"content":"    protected static final String MESSAGE_RECORD_COMMAND_PREREQUISITE \u003d","lastModifiedDate":"2022-10-11"},{"lineNumber":12,"author":{"gitId":"EiffelLKF"},"content":"            \"A person\u0027s record list should be displayed before calling record commands\\n\"","lastModifiedDate":"2022-10-11"},{"lineNumber":13,"author":{"gitId":"EiffelLKF"},"content":"            + \"(Hint: listR)\";","lastModifiedDate":"2022-10-11"},{"lineNumber":14,"author":{"gitId":"EiffelLKF"},"content":"    protected static final String MESSAGE_ADDRESS_BOOK_COMMAND_PREREQUISITE \u003d","lastModifiedDate":"2022-10-11"},{"lineNumber":15,"author":{"gitId":"EiffelLKF"},"content":"            \"The address book should be displayed before calling address book commands\\n\"","lastModifiedDate":"2022-10-11"},{"lineNumber":16,"author":{"gitId":"EiffelLKF"},"content":"            + \"(Hint: list)\";","lastModifiedDate":"2022-10-11"},{"lineNumber":17,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2018-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public abstract CommandResult execute(Model model) throws CommandException;","lastModifiedDate":"2019-01-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"EiffelLKF":7,"-":20}},{"path":"src/main/java/seedu/address/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-12-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents the result of a command execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResult {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /** Help information should be shown to the user. */","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final boolean showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** The application should exit. */","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final boolean exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"LJXSean"},"content":"    /** The application should show recordList instead of personList. */","lastModifiedDate":"2022-10-08"},{"lineNumber":21,"author":{"gitId":"LJXSean"},"content":"    private final boolean showRecords;","lastModifiedDate":"2022-10-09"},{"lineNumber":22,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified fields.","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.showHelp \u003d showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"LJXSean"},"content":"        this.showRecords \u003d false;","lastModifiedDate":"2022-10-09"},{"lineNumber":31,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":32,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":33,"author":{"gitId":"LJXSean"},"content":"    /**","lastModifiedDate":"2022-10-08"},{"lineNumber":34,"author":{"gitId":"LJXSean"},"content":"     * Constructs a {@code CommandResult} with the specified fields for commands that display recordList","lastModifiedDate":"2022-10-08"},{"lineNumber":35,"author":{"gitId":"LJXSean"},"content":"     */","lastModifiedDate":"2022-10-08"},{"lineNumber":36,"author":{"gitId":"LJXSean"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean showRecords) {","lastModifiedDate":"2022-10-09"},{"lineNumber":37,"author":{"gitId":"LJXSean"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);","lastModifiedDate":"2022-10-08"},{"lineNumber":38,"author":{"gitId":"LJXSean"},"content":"        this.showHelp \u003d showHelp;","lastModifiedDate":"2022-10-08"},{"lineNumber":39,"author":{"gitId":"LJXSean"},"content":"        this.exit \u003d exit;","lastModifiedDate":"2022-10-08"},{"lineNumber":40,"author":{"gitId":"LJXSean"},"content":"        this.showRecords \u003d showRecords;","lastModifiedDate":"2022-10-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * and other fields set to their default value.","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"LJXSean"},"content":"        this(feedbackToUser, false, false, false);","lastModifiedDate":"2022-10-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public boolean isExit() {","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"LJXSean"},"content":"    public boolean isShowRecords() {","lastModifiedDate":"2022-10-09"},{"lineNumber":64,"author":{"gitId":"LJXSean"},"content":"        return showRecords;","lastModifiedDate":"2022-10-09"},{"lineNumber":65,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":66,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-12-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-12-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return Objects.hash(feedbackToUser, showHelp, exit);","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"LJXSean":19,"-":70}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-09-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Deletes a person identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2018-04-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \": Deletes the person identified by the index number used in the displayed person list.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2016-09-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Index targetIndex;","lastModifiedDate":"2017-06-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {","lastModifiedDate":"2017-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2016-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"EiffelLKF"},"content":"        if (model.isRecordListDisplayed()) {","lastModifiedDate":"2022-10-11"},{"lineNumber":43,"author":{"gitId":"EiffelLKF"},"content":"            throw new CommandException(MESSAGE_ADDRESS_BOOK_COMMAND_PREREQUISITE);","lastModifiedDate":"2022-10-11"},{"lineNumber":44,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-11"},{"lineNumber":45,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        model.deletePerson(personToDelete);","lastModifiedDate":"2016-09-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));","lastModifiedDate":"2016-09-22"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"EiffelLKF":4,"-":53}},{"path":"src/main/java/seedu/address/logic/commands/DeleteRecordCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"anthonyhoth"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-10"},{"lineNumber":2,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":3,"author":{"gitId":"anthonyhoth"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-10"},{"lineNumber":4,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":5,"author":{"gitId":"anthonyhoth"},"content":"import java.util.List;","lastModifiedDate":"2022-10-10"},{"lineNumber":6,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":7,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-10"},{"lineNumber":8,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-10"},{"lineNumber":9,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-10"},{"lineNumber":10,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-10"},{"lineNumber":11,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.model.person.Record;","lastModifiedDate":"2022-10-10"},{"lineNumber":12,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":13,"author":{"gitId":"anthonyhoth"},"content":"/**","lastModifiedDate":"2022-10-10"},{"lineNumber":14,"author":{"gitId":"anthonyhoth"},"content":" * Deletes a record identified using it\u0027s displayed index from the displayed record list.","lastModifiedDate":"2022-10-10"},{"lineNumber":15,"author":{"gitId":"anthonyhoth"},"content":" */","lastModifiedDate":"2022-10-10"},{"lineNumber":16,"author":{"gitId":"anthonyhoth"},"content":"public class DeleteRecordCommand extends Command {","lastModifiedDate":"2022-10-10"},{"lineNumber":17,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":18,"author":{"gitId":"anthonyhoth"},"content":"    public static final String COMMAND_WORD \u003d \"deleteR\";","lastModifiedDate":"2022-10-10"},{"lineNumber":19,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":20,"author":{"gitId":"anthonyhoth"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2022-10-10"},{"lineNumber":21,"author":{"gitId":"anthonyhoth"},"content":"            + \": Deletes the record identified by the index number used in the displayed record list.\\n\"","lastModifiedDate":"2022-10-10"},{"lineNumber":22,"author":{"gitId":"anthonyhoth"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2022-10-10"},{"lineNumber":23,"author":{"gitId":"anthonyhoth"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2022-10-10"},{"lineNumber":24,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":25,"author":{"gitId":"anthonyhoth"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Record: %1$s\";","lastModifiedDate":"2022-10-10"},{"lineNumber":26,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":27,"author":{"gitId":"anthonyhoth"},"content":"    private final Index targetIndex;","lastModifiedDate":"2022-10-10"},{"lineNumber":28,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":29,"author":{"gitId":"anthonyhoth"},"content":"    public DeleteRecordCommand(Index targetIndex) {","lastModifiedDate":"2022-10-10"},{"lineNumber":30,"author":{"gitId":"anthonyhoth"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2022-10-10"},{"lineNumber":31,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":32,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":33,"author":{"gitId":"anthonyhoth"},"content":"    @Override","lastModifiedDate":"2022-10-10"},{"lineNumber":34,"author":{"gitId":"anthonyhoth"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-10"},{"lineNumber":35,"author":{"gitId":"anthonyhoth"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-10"},{"lineNumber":36,"author":{"gitId":"anthonyhoth"},"content":"        List\u003cRecord\u003e lastShownRecordList \u003d model.getFilteredRecordList();","lastModifiedDate":"2022-10-10"},{"lineNumber":37,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":38,"author":{"gitId":"EiffelLKF"},"content":"        if (!model.isRecordListDisplayed()) {","lastModifiedDate":"2022-10-11"},{"lineNumber":39,"author":{"gitId":"EiffelLKF"},"content":"            throw new CommandException(MESSAGE_RECORD_COMMAND_PREREQUISITE);","lastModifiedDate":"2022-10-11"},{"lineNumber":40,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-11"},{"lineNumber":41,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":42,"author":{"gitId":"anthonyhoth"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownRecordList.size()) {","lastModifiedDate":"2022-10-10"},{"lineNumber":43,"author":{"gitId":"anthonyhoth"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-10"},{"lineNumber":44,"author":{"gitId":"anthonyhoth"},"content":"        }","lastModifiedDate":"2022-10-10"},{"lineNumber":45,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":46,"author":{"gitId":"anthonyhoth"},"content":"        Record recordToDelete \u003d lastShownRecordList.get(targetIndex.getZeroBased());","lastModifiedDate":"2022-10-10"},{"lineNumber":47,"author":{"gitId":"anthonyhoth"},"content":"        model.deleteRecord(recordToDelete);","lastModifiedDate":"2022-10-10"},{"lineNumber":48,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":49,"author":{"gitId":"anthonyhoth"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, recordToDelete),","lastModifiedDate":"2022-10-10"},{"lineNumber":50,"author":{"gitId":"anthonyhoth"},"content":"                false, false, true);","lastModifiedDate":"2022-10-10"},{"lineNumber":51,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":52,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":53,"author":{"gitId":"anthonyhoth"},"content":"    @Override","lastModifiedDate":"2022-10-10"},{"lineNumber":54,"author":{"gitId":"anthonyhoth"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-10"},{"lineNumber":55,"author":{"gitId":"anthonyhoth"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-10"},{"lineNumber":56,"author":{"gitId":"anthonyhoth"},"content":"                || (other instanceof DeleteRecordCommand // instanceof handles nulls","lastModifiedDate":"2022-10-10"},{"lineNumber":57,"author":{"gitId":"anthonyhoth"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteRecordCommand) other).targetIndex)); // state check","lastModifiedDate":"2022-10-10"},{"lineNumber":58,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":59,"author":{"gitId":"anthonyhoth"},"content":"}","lastModifiedDate":"2022-10-10"}],"authorContributionMap":{"anthonyhoth":54,"EiffelLKF":5}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-12-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-01-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-01-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-12-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2016-12-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2016-12-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2016-12-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2016-12-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2016-12-26"},{"lineNumber":27,"author":{"gitId":"marclzh"},"content":"import seedu.address.model.person.RecordList;","lastModifiedDate":"2022-10-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book.","lastModifiedDate":"2016-12-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \"","lastModifiedDate":"2016-12-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \"","lastModifiedDate":"2018-04-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2017-05-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";","lastModifiedDate":"2016-12-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2016-12-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit","lastModifiedDate":"2017-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2016-12-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"EiffelLKF"},"content":"        if (model.isRecordListDisplayed()) {","lastModifiedDate":"2022-10-11"},{"lineNumber":75,"author":{"gitId":"EiffelLKF"},"content":"            throw new CommandException(MESSAGE_ADDRESS_BOOK_COMMAND_PREREQUISITE);","lastModifiedDate":"2022-10-11"},{"lineNumber":76,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-11"},{"lineNumber":77,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2017-08-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2018-01-10"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2016-12-26"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":106,"author":{"gitId":"marclzh"},"content":"        RecordList updatedRecordList \u003d personToEdit.getRecordList();","lastModifiedDate":"2022-10-04"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":108,"author":{"gitId":"marclzh"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, updatedRecordList);","lastModifiedDate":"2022-10-04"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;","lastModifiedDate":"2017-05-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2017-05-25"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2016-12-26"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2016-12-26"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2016-12-26"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        private Address address;","lastModifiedDate":"2017-06-21"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-06-21"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}","lastModifiedDate":"2016-12-26"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":143,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":144,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":145,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2016-12-26"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2018-01-15"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2018-01-11"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":155,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":156,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);","lastModifiedDate":"2018-08-14"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2017-06-21"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            this.address \u003d address;","lastModifiedDate":"2017-06-21"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2016-12-26"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2017-06-21"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":194,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2018-01-11"},{"lineNumber":195,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":196,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-06-21"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2018-01-11"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":202,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2018-01-11"},{"lineNumber":203,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2018-01-11"},{"lineNumber":204,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2018-01-11"},{"lineNumber":205,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2018-01-11"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2017-05-05"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":214,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2017-05-05"},{"lineNumber":219,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2017-05-05"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2017-05-05"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2017-06-21"},{"lineNumber":226,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())","lastModifiedDate":"2017-06-21"},{"lineNumber":227,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())","lastModifiedDate":"2017-06-21"},{"lineNumber":228,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())","lastModifiedDate":"2017-06-21"},{"lineNumber":229,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":232,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"marclzh":3,"EiffelLKF":4,"-":225}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2018-04-01"},{"lineNumber":6,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords.","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2018-04-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \"","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2016-09-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"EiffelLKF"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":33,"author":{"gitId":"EiffelLKF"},"content":"        if (model.isRecordListDisplayed()) {","lastModifiedDate":"2022-10-11"},{"lineNumber":34,"author":{"gitId":"EiffelLKF"},"content":"            throw new CommandException(MESSAGE_ADDRESS_BOOK_COMMAND_PREREQUISITE);","lastModifiedDate":"2022-10-11"},{"lineNumber":35,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-11"},{"lineNumber":36,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return new CommandResult(","lastModifiedDate":"2018-04-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2018-04-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"EiffelLKF":7,"-":41}},{"path":"src/main/java/seedu/address/logic/commands/FindRecordCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LJXSean"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-08"},{"lineNumber":2,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":3,"author":{"gitId":"LJXSean"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-08"},{"lineNumber":4,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":5,"author":{"gitId":"LJXSean"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-08"},{"lineNumber":6,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-11"},{"lineNumber":7,"author":{"gitId":"LJXSean"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-08"},{"lineNumber":8,"author":{"gitId":"LJXSean"},"content":"import seedu.address.model.person.RecordContainsKeywordsPredicate;","lastModifiedDate":"2022-10-08"},{"lineNumber":9,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":10,"author":{"gitId":"LJXSean"},"content":"/**","lastModifiedDate":"2022-10-08"},{"lineNumber":11,"author":{"gitId":"LJXSean"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords.","lastModifiedDate":"2022-10-08"},{"lineNumber":12,"author":{"gitId":"LJXSean"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2022-10-08"},{"lineNumber":13,"author":{"gitId":"LJXSean"},"content":" */","lastModifiedDate":"2022-10-08"},{"lineNumber":14,"author":{"gitId":"LJXSean"},"content":"public class FindRecordCommand extends Command {","lastModifiedDate":"2022-10-08"},{"lineNumber":15,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":16,"author":{"gitId":"LJXSean"},"content":"    public static final String COMMAND_WORD \u003d \"findR\";","lastModifiedDate":"2022-10-09"},{"lineNumber":17,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":18,"author":{"gitId":"LJXSean"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all records whose content contains any of \"","lastModifiedDate":"2022-10-08"},{"lineNumber":19,"author":{"gitId":"LJXSean"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2022-10-08"},{"lineNumber":20,"author":{"gitId":"LJXSean"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2022-10-08"},{"lineNumber":21,"author":{"gitId":"LJXSean"},"content":"            + \"Example: \" + COMMAND_WORD + \" suffers from common cold\";","lastModifiedDate":"2022-10-08"},{"lineNumber":22,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":23,"author":{"gitId":"LJXSean"},"content":"    private final RecordContainsKeywordsPredicate predicate;","lastModifiedDate":"2022-10-08"},{"lineNumber":24,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":25,"author":{"gitId":"LJXSean"},"content":"    public FindRecordCommand(RecordContainsKeywordsPredicate predicate) {","lastModifiedDate":"2022-10-08"},{"lineNumber":26,"author":{"gitId":"LJXSean"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2022-10-08"},{"lineNumber":27,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":28,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":29,"author":{"gitId":"LJXSean"},"content":"    @Override","lastModifiedDate":"2022-10-08"},{"lineNumber":30,"author":{"gitId":"EiffelLKF"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-11"},{"lineNumber":31,"author":{"gitId":"LJXSean"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-08"},{"lineNumber":32,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":33,"author":{"gitId":"EiffelLKF"},"content":"        if (!model.isRecordListDisplayed()) {","lastModifiedDate":"2022-10-11"},{"lineNumber":34,"author":{"gitId":"EiffelLKF"},"content":"            throw new CommandException(MESSAGE_RECORD_COMMAND_PREREQUISITE);","lastModifiedDate":"2022-10-11"},{"lineNumber":35,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-11"},{"lineNumber":36,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":37,"author":{"gitId":"LJXSean"},"content":"        model.updateFilteredRecordList(predicate);","lastModifiedDate":"2022-10-08"},{"lineNumber":38,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":39,"author":{"gitId":"LJXSean"},"content":"        return new CommandResult(","lastModifiedDate":"2022-10-08"},{"lineNumber":40,"author":{"gitId":"LJXSean"},"content":"                String.format(Messages.MESSAGE_RECORDS_LISTED_OVERVIEW, model.getFilteredRecordList().size()),","lastModifiedDate":"2022-10-08"},{"lineNumber":41,"author":{"gitId":"LJXSean"},"content":"                false, false, true);","lastModifiedDate":"2022-10-08"},{"lineNumber":42,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":43,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":44,"author":{"gitId":"LJXSean"},"content":"    @Override","lastModifiedDate":"2022-10-08"},{"lineNumber":45,"author":{"gitId":"LJXSean"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-08"},{"lineNumber":46,"author":{"gitId":"LJXSean"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-08"},{"lineNumber":47,"author":{"gitId":"LJXSean"},"content":"                || (other instanceof FindRecordCommand // instanceof handles nulls","lastModifiedDate":"2022-10-08"},{"lineNumber":48,"author":{"gitId":"LJXSean"},"content":"                \u0026\u0026 predicate.equals(((FindRecordCommand) other).predicate)); // state check","lastModifiedDate":"2022-10-08"},{"lineNumber":49,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":50,"author":{"gitId":"LJXSean"},"content":"}","lastModifiedDate":"2022-10-08"}],"authorContributionMap":{"LJXSean":42,"EiffelLKF":8}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Lists all persons in the address book to the user.","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";","lastModifiedDate":"2016-09-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":21,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":22,"author":{"gitId":"EiffelLKF"},"content":"        // Update model record list display flag","lastModifiedDate":"2022-10-11"},{"lineNumber":23,"author":{"gitId":"EiffelLKF"},"content":"        model.setRecordListDisplayed(false);","lastModifiedDate":"2022-10-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":25,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-09-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"EiffelLKF":4,"-":24}},{"path":"src/main/java/seedu/address/logic/commands/ListRecordCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hanwenlai"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-06"},{"lineNumber":2,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":3,"author":{"gitId":"hanwenlai"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-10"},{"lineNumber":4,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RECORDS;","lastModifiedDate":"2022-10-10"},{"lineNumber":5,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":6,"author":{"gitId":"hanwenlai"},"content":"import java.util.List;","lastModifiedDate":"2022-10-10"},{"lineNumber":7,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":8,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-06"},{"lineNumber":9,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-06"},{"lineNumber":10,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-06"},{"lineNumber":11,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-06"},{"lineNumber":12,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-06"},{"lineNumber":13,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":14,"author":{"gitId":"hanwenlai"},"content":"/**","lastModifiedDate":"2022-10-07"},{"lineNumber":15,"author":{"gitId":"hanwenlai"},"content":" * Lists all records for a specific patient to the user.","lastModifiedDate":"2022-10-07"},{"lineNumber":16,"author":{"gitId":"hanwenlai"},"content":" */","lastModifiedDate":"2022-10-07"},{"lineNumber":17,"author":{"gitId":"hanwenlai"},"content":"public class ListRecordCommand extends Command {","lastModifiedDate":"2022-10-10"},{"lineNumber":18,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":19,"author":{"gitId":"hanwenlai"},"content":"    public static final String COMMAND_WORD \u003d \"listR\";","lastModifiedDate":"2022-10-06"},{"lineNumber":20,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":21,"author":{"gitId":"hanwenlai"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2022-10-06"},{"lineNumber":22,"author":{"gitId":"hanwenlai"},"content":"            + \": Shows a list of all records for the specific patient in the records database.\\n\"","lastModifiedDate":"2022-10-06"},{"lineNumber":23,"author":{"gitId":"hanwenlai"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2022-10-06"},{"lineNumber":24,"author":{"gitId":"hanwenlai"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2022-10-06"},{"lineNumber":25,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":26,"author":{"gitId":"hanwenlai"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed records for this patient: \";","lastModifiedDate":"2022-10-09"},{"lineNumber":27,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":28,"author":{"gitId":"hanwenlai"},"content":"    private final Index targetIndex;","lastModifiedDate":"2022-10-10"},{"lineNumber":29,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":30,"author":{"gitId":"hanwenlai"},"content":"    public ListRecordCommand(Index targetIndex) {","lastModifiedDate":"2022-10-10"},{"lineNumber":31,"author":{"gitId":"hanwenlai"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2022-10-06"},{"lineNumber":32,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":33,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":34,"author":{"gitId":"hanwenlai"},"content":"    @Override","lastModifiedDate":"2022-10-06"},{"lineNumber":35,"author":{"gitId":"hanwenlai"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-06"},{"lineNumber":36,"author":{"gitId":"hanwenlai"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-06"},{"lineNumber":37,"author":{"gitId":"hanwenlai"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2022-10-06"},{"lineNumber":38,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":39,"author":{"gitId":"EiffelLKF"},"content":"        // Inverse condition: listR is an addressbook command","lastModifiedDate":"2022-10-11"},{"lineNumber":40,"author":{"gitId":"EiffelLKF"},"content":"        if (model.isRecordListDisplayed()) {","lastModifiedDate":"2022-10-11"},{"lineNumber":41,"author":{"gitId":"EiffelLKF"},"content":"            throw new CommandException(MESSAGE_ADDRESS_BOOK_COMMAND_PREREQUISITE);","lastModifiedDate":"2022-10-11"},{"lineNumber":42,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-11"},{"lineNumber":43,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":44,"author":{"gitId":"hanwenlai"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2022-10-06"},{"lineNumber":45,"author":{"gitId":"hanwenlai"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-06"},{"lineNumber":46,"author":{"gitId":"hanwenlai"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":47,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":48,"author":{"gitId":"hanwenlai"},"content":"        Person personToListRecords \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2022-10-06"},{"lineNumber":49,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":50,"author":{"gitId":"EiffelLKF"},"content":"        // Set Model record list displayed flag to true","lastModifiedDate":"2022-10-11"},{"lineNumber":51,"author":{"gitId":"EiffelLKF"},"content":"        model.setPersonWithRecords(personToListRecords);","lastModifiedDate":"2022-10-11"},{"lineNumber":52,"author":{"gitId":"EiffelLKF"},"content":"        model.setRecordListDisplayed(true);","lastModifiedDate":"2022-10-11"},{"lineNumber":53,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":54,"author":{"gitId":"EiffelLKF"},"content":"        model.setFilteredRecordList(personToListRecords);","lastModifiedDate":"2022-10-11"},{"lineNumber":55,"author":{"gitId":"EiffelLKF"},"content":"        model.updateFilteredRecordList(PREDICATE_SHOW_ALL_RECORDS);","lastModifiedDate":"2022-10-11"},{"lineNumber":56,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":57,"author":{"gitId":"hanwenlai"},"content":"        String feedbackToUser \u003d MESSAGE_SUCCESS + personToListRecords.getName() + \"\\n\"","lastModifiedDate":"2022-10-10"},{"lineNumber":58,"author":{"gitId":"hanwenlai"},"content":"                + String.format(Messages.MESSAGE_RECORDS_LISTED_OVERVIEW,","lastModifiedDate":"2022-10-10"},{"lineNumber":59,"author":{"gitId":"hanwenlai"},"content":"                model.getFilteredRecordList().size());","lastModifiedDate":"2022-10-10"},{"lineNumber":60,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":61,"author":{"gitId":"hanwenlai"},"content":"        return new CommandResult(feedbackToUser, false, false, true);","lastModifiedDate":"2022-10-10"},{"lineNumber":62,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":63,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":64,"author":{"gitId":"hanwenlai"},"content":"    @Override","lastModifiedDate":"2022-10-06"},{"lineNumber":65,"author":{"gitId":"hanwenlai"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-06"},{"lineNumber":66,"author":{"gitId":"hanwenlai"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-06"},{"lineNumber":67,"author":{"gitId":"hanwenlai"},"content":"                || (other instanceof ListRecordCommand // instanceof handles nulls","lastModifiedDate":"2022-10-10"},{"lineNumber":68,"author":{"gitId":"hanwenlai"},"content":"                \u0026\u0026 targetIndex.equals(((ListRecordCommand) other).targetIndex)); // state check","lastModifiedDate":"2022-10-10"},{"lineNumber":69,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":70,"author":{"gitId":"hanwenlai"},"content":"}","lastModifiedDate":"2022-10-06"}],"authorContributionMap":{"hanwenlai":58,"EiffelLKF":12}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-02-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-03-17"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-03-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-03-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-03-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-03-17"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"import seedu.address.model.person.RecordList;","lastModifiedDate":"2022-10-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-17"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2017-02-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);","lastModifiedDate":"2017-06-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)","lastModifiedDate":"2017-12-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2017-03-17"},{"lineNumber":47,"author":{"gitId":"marclzh"},"content":"        RecordList recordList \u003d new RecordList(); /* todo implement record add function */","lastModifiedDate":"2022-10-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":49,"author":{"gitId":"marclzh"},"content":"        Person person \u003d new Person(name, phone, email, address, tagList, recordList);","lastModifiedDate":"2022-10-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new AddCommand(person);","lastModifiedDate":"2017-03-17"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"marclzh":3,"-":59}},{"path":"src/main/java/seedu/address/logic/parser/AddRecordCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"EiffelLKF"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-10"},{"lineNumber":2,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":3,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-10"},{"lineNumber":4,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-10-10"},{"lineNumber":5,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RECORD;","lastModifiedDate":"2022-10-10"},{"lineNumber":6,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":7,"author":{"gitId":"EiffelLKF"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2022-10-10"},{"lineNumber":8,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":9,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.logic.commands.AddRecordCommand;","lastModifiedDate":"2022-10-10"},{"lineNumber":10,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-10"},{"lineNumber":11,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.person.Record;","lastModifiedDate":"2022-10-10"},{"lineNumber":12,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":13,"author":{"gitId":"EiffelLKF"},"content":"/**","lastModifiedDate":"2022-10-10"},{"lineNumber":14,"author":{"gitId":"EiffelLKF"},"content":" * Parses input arguments and creates a new FindCommand object","lastModifiedDate":"2022-10-10"},{"lineNumber":15,"author":{"gitId":"EiffelLKF"},"content":" */","lastModifiedDate":"2022-10-10"},{"lineNumber":16,"author":{"gitId":"EiffelLKF"},"content":"public class AddRecordCommandParser implements Parser\u003cAddRecordCommand\u003e {","lastModifiedDate":"2022-10-10"},{"lineNumber":17,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":18,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":19,"author":{"gitId":"EiffelLKF"},"content":"     * Parses the given {@code String} of arguments in the context of the AddRecordCommand","lastModifiedDate":"2022-10-10"},{"lineNumber":20,"author":{"gitId":"EiffelLKF"},"content":"     * and returns a AddRecordCommand object for execution.","lastModifiedDate":"2022-10-10"},{"lineNumber":21,"author":{"gitId":"EiffelLKF"},"content":"     *","lastModifiedDate":"2022-10-10"},{"lineNumber":22,"author":{"gitId":"EiffelLKF"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-10-10"},{"lineNumber":23,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":24,"author":{"gitId":"EiffelLKF"},"content":"    public AddRecordCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-10"},{"lineNumber":25,"author":{"gitId":"EiffelLKF"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2022-10-10"},{"lineNumber":26,"author":{"gitId":"EiffelLKF"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_RECORD);","lastModifiedDate":"2022-10-10"},{"lineNumber":27,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":28,"author":{"gitId":"EiffelLKF"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_DATE, PREFIX_RECORD)","lastModifiedDate":"2022-10-10"},{"lineNumber":29,"author":{"gitId":"EiffelLKF"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2022-10-10"},{"lineNumber":30,"author":{"gitId":"EiffelLKF"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddRecordCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-10"},{"lineNumber":31,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-10"},{"lineNumber":32,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":33,"author":{"gitId":"EiffelLKF"},"content":"        String recordDate \u003d argMultimap.getValue(PREFIX_DATE).get();","lastModifiedDate":"2022-10-10"},{"lineNumber":34,"author":{"gitId":"EiffelLKF"},"content":"        String recordData \u003d argMultimap.getValue(PREFIX_RECORD).get();","lastModifiedDate":"2022-10-10"},{"lineNumber":35,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":36,"author":{"gitId":"EiffelLKF"},"content":"        Record record \u003d ParserUtil.parseRecord(recordDate, recordData);","lastModifiedDate":"2022-10-10"},{"lineNumber":37,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":38,"author":{"gitId":"EiffelLKF"},"content":"        return new AddRecordCommand(record);","lastModifiedDate":"2022-10-10"},{"lineNumber":39,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":40,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":41,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":42,"author":{"gitId":"EiffelLKF"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2022-10-10"},{"lineNumber":43,"author":{"gitId":"EiffelLKF"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2022-10-10"},{"lineNumber":44,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":45,"author":{"gitId":"EiffelLKF"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2022-10-10"},{"lineNumber":46,"author":{"gitId":"EiffelLKF"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2022-10-10"},{"lineNumber":47,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":48,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":49,"author":{"gitId":"EiffelLKF"},"content":"}","lastModifiedDate":"2022-10-10"}],"authorContributionMap":{"EiffelLKF":49}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":10,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.logic.commands.AddRecordCommand;","lastModifiedDate":"2022-10-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"import seedu.address.logic.commands.ClearRecordCommand;","lastModifiedDate":"2022-10-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2022-10-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":15,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.logic.commands.DeleteRecordCommand;","lastModifiedDate":"2022-10-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":19,"author":{"gitId":"LJXSean"},"content":"import seedu.address.logic.commands.FindRecordCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":22,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.logic.commands.ListRecordCommand;","lastModifiedDate":"2022-10-10"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"anthonyhoth"},"content":"        case DeleteRecordCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-10"},{"lineNumber":62,"author":{"gitId":"anthonyhoth"},"content":"            return new DeleteRecordCommandParser().parse(arguments);","lastModifiedDate":"2022-10-10"},{"lineNumber":63,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"hanwenlai"},"content":"        case ListRecordCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-10"},{"lineNumber":71,"author":{"gitId":"hanwenlai"},"content":"            return new ListRecordCommandParser().parse(arguments);","lastModifiedDate":"2022-10-10"},{"lineNumber":72,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":82,"author":{"gitId":"LJXSean"},"content":"        case FindRecordCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-08"},{"lineNumber":83,"author":{"gitId":"LJXSean"},"content":"            return new FindRecordCommandParser().parse(arguments);","lastModifiedDate":"2022-10-08"},{"lineNumber":84,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":85,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":86,"author":{"gitId":"marclzh"},"content":"        case ClearRecordCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-10"},{"lineNumber":87,"author":{"gitId":"marclzh"},"content":"            return new ClearRecordCommand();","lastModifiedDate":"2022-10-10"},{"lineNumber":88,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":89,"author":{"gitId":"EiffelLKF"},"content":"        case AddRecordCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-10"},{"lineNumber":90,"author":{"gitId":"EiffelLKF"},"content":"            return new AddRecordCommandParser().parse(arguments);","lastModifiedDate":"2022-10-10"},{"lineNumber":91,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"anthonyhoth":4,"marclzh":5,"hanwenlai":4,"LJXSean":4,"EiffelLKF":4,"-":76}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"EiffelLKF"},"content":"    public static final Prefix PREFIX_RECORD \u003d new Prefix(\"r/\");","lastModifiedDate":"2022-10-10"},{"lineNumber":15,"author":{"gitId":"EiffelLKF"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");","lastModifiedDate":"2022-10-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"EiffelLKF":2,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/DeleteRecordCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"anthonyhoth"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-10"},{"lineNumber":2,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":3,"author":{"gitId":"anthonyhoth"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-10"},{"lineNumber":4,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":5,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-10"},{"lineNumber":6,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.logic.commands.DeleteRecordCommand;","lastModifiedDate":"2022-10-10"},{"lineNumber":7,"author":{"gitId":"anthonyhoth"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-10"},{"lineNumber":8,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":9,"author":{"gitId":"anthonyhoth"},"content":"/**","lastModifiedDate":"2022-10-10"},{"lineNumber":10,"author":{"gitId":"anthonyhoth"},"content":" * Parses input arguments and creates a new DeleteRecordCommand object","lastModifiedDate":"2022-10-10"},{"lineNumber":11,"author":{"gitId":"anthonyhoth"},"content":" */","lastModifiedDate":"2022-10-10"},{"lineNumber":12,"author":{"gitId":"anthonyhoth"},"content":"public class DeleteRecordCommandParser implements Parser\u003cDeleteRecordCommand\u003e {","lastModifiedDate":"2022-10-10"},{"lineNumber":13,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":14,"author":{"gitId":"anthonyhoth"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":15,"author":{"gitId":"anthonyhoth"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteRecordCommand","lastModifiedDate":"2022-10-10"},{"lineNumber":16,"author":{"gitId":"anthonyhoth"},"content":"     * and returns a DeleteRecordCommand object for execution.","lastModifiedDate":"2022-10-10"},{"lineNumber":17,"author":{"gitId":"anthonyhoth"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-10-10"},{"lineNumber":18,"author":{"gitId":"anthonyhoth"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":19,"author":{"gitId":"anthonyhoth"},"content":"    public DeleteRecordCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-10"},{"lineNumber":20,"author":{"gitId":"anthonyhoth"},"content":"        try {","lastModifiedDate":"2022-10-10"},{"lineNumber":21,"author":{"gitId":"anthonyhoth"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2022-10-10"},{"lineNumber":22,"author":{"gitId":"anthonyhoth"},"content":"            return new DeleteRecordCommand(index);","lastModifiedDate":"2022-10-10"},{"lineNumber":23,"author":{"gitId":"anthonyhoth"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2022-10-10"},{"lineNumber":24,"author":{"gitId":"anthonyhoth"},"content":"            throw new ParseException(","lastModifiedDate":"2022-10-10"},{"lineNumber":25,"author":{"gitId":"anthonyhoth"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteRecordCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2022-10-10"},{"lineNumber":26,"author":{"gitId":"anthonyhoth"},"content":"        }","lastModifiedDate":"2022-10-10"},{"lineNumber":27,"author":{"gitId":"anthonyhoth"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":28,"author":{"gitId":"anthonyhoth"},"content":"}","lastModifiedDate":"2022-10-10"}],"authorContributionMap":{"anthonyhoth":28}},{"path":"src/main/java/seedu/address/logic/parser/FindRecordCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LJXSean"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-08"},{"lineNumber":2,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":3,"author":{"gitId":"LJXSean"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-08"},{"lineNumber":4,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":5,"author":{"gitId":"LJXSean"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-08"},{"lineNumber":6,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":7,"author":{"gitId":"LJXSean"},"content":"import seedu.address.logic.commands.FindRecordCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":8,"author":{"gitId":"LJXSean"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-08"},{"lineNumber":9,"author":{"gitId":"LJXSean"},"content":"import seedu.address.model.person.RecordContainsKeywordsPredicate;","lastModifiedDate":"2022-10-08"},{"lineNumber":10,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":11,"author":{"gitId":"LJXSean"},"content":"/**","lastModifiedDate":"2022-10-08"},{"lineNumber":12,"author":{"gitId":"LJXSean"},"content":" * Parses input arguments and creates a new FindCommand object","lastModifiedDate":"2022-10-08"},{"lineNumber":13,"author":{"gitId":"LJXSean"},"content":" */","lastModifiedDate":"2022-10-08"},{"lineNumber":14,"author":{"gitId":"LJXSean"},"content":"public class FindRecordCommandParser implements Parser\u003cFindRecordCommand\u003e {","lastModifiedDate":"2022-10-08"},{"lineNumber":15,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":16,"author":{"gitId":"LJXSean"},"content":"    /**","lastModifiedDate":"2022-10-08"},{"lineNumber":17,"author":{"gitId":"LJXSean"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand","lastModifiedDate":"2022-10-08"},{"lineNumber":18,"author":{"gitId":"LJXSean"},"content":"     * and returns a FindCommand object for execution.","lastModifiedDate":"2022-10-08"},{"lineNumber":19,"author":{"gitId":"LJXSean"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-10-08"},{"lineNumber":20,"author":{"gitId":"LJXSean"},"content":"     */","lastModifiedDate":"2022-10-08"},{"lineNumber":21,"author":{"gitId":"LJXSean"},"content":"    public FindRecordCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-08"},{"lineNumber":22,"author":{"gitId":"LJXSean"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2022-10-08"},{"lineNumber":23,"author":{"gitId":"LJXSean"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2022-10-08"},{"lineNumber":24,"author":{"gitId":"LJXSean"},"content":"            throw new ParseException(","lastModifiedDate":"2022-10-08"},{"lineNumber":25,"author":{"gitId":"LJXSean"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindRecordCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-08"},{"lineNumber":26,"author":{"gitId":"LJXSean"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":27,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":28,"author":{"gitId":"LJXSean"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2022-10-08"},{"lineNumber":29,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":30,"author":{"gitId":"LJXSean"},"content":"        return new FindRecordCommand(new RecordContainsKeywordsPredicate(Arrays.asList(nameKeywords)));","lastModifiedDate":"2022-10-08"},{"lineNumber":31,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":32,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":33,"author":{"gitId":"LJXSean"},"content":"}","lastModifiedDate":"2022-10-08"}],"authorContributionMap":{"LJXSean":33}},{"path":"src/main/java/seedu/address/logic/parser/ListRecordCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hanwenlai"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-06"},{"lineNumber":2,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":3,"author":{"gitId":"hanwenlai"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-10"},{"lineNumber":4,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":5,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-06"},{"lineNumber":6,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.logic.commands.ListRecordCommand;","lastModifiedDate":"2022-10-10"},{"lineNumber":7,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-06"},{"lineNumber":8,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":9,"author":{"gitId":"hanwenlai"},"content":"/**","lastModifiedDate":"2022-10-06"},{"lineNumber":10,"author":{"gitId":"hanwenlai"},"content":" * Parses input arguments and creates a new ListRCommand object","lastModifiedDate":"2022-10-06"},{"lineNumber":11,"author":{"gitId":"hanwenlai"},"content":" */","lastModifiedDate":"2022-10-06"},{"lineNumber":12,"author":{"gitId":"hanwenlai"},"content":"public class ListRecordCommandParser implements Parser\u003cListRecordCommand\u003e {","lastModifiedDate":"2022-10-10"},{"lineNumber":13,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":14,"author":{"gitId":"hanwenlai"},"content":"    /**","lastModifiedDate":"2022-10-06"},{"lineNumber":15,"author":{"gitId":"hanwenlai"},"content":"     * Parses the given {@code String} of arguments in the context of the ListRCommand","lastModifiedDate":"2022-10-06"},{"lineNumber":16,"author":{"gitId":"hanwenlai"},"content":"     * and returns a ListRCommand object for execution.","lastModifiedDate":"2022-10-06"},{"lineNumber":17,"author":{"gitId":"hanwenlai"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-10-06"},{"lineNumber":18,"author":{"gitId":"hanwenlai"},"content":"     */","lastModifiedDate":"2022-10-06"},{"lineNumber":19,"author":{"gitId":"hanwenlai"},"content":"    public ListRecordCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-10"},{"lineNumber":20,"author":{"gitId":"hanwenlai"},"content":"        try {","lastModifiedDate":"2022-10-06"},{"lineNumber":21,"author":{"gitId":"hanwenlai"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2022-10-06"},{"lineNumber":22,"author":{"gitId":"hanwenlai"},"content":"            return new ListRecordCommand(index);","lastModifiedDate":"2022-10-10"},{"lineNumber":23,"author":{"gitId":"hanwenlai"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2022-10-06"},{"lineNumber":24,"author":{"gitId":"hanwenlai"},"content":"            throw new ParseException(","lastModifiedDate":"2022-10-06"},{"lineNumber":25,"author":{"gitId":"hanwenlai"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListRecordCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2022-10-10"},{"lineNumber":26,"author":{"gitId":"hanwenlai"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":27,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":28,"author":{"gitId":"hanwenlai"},"content":"}","lastModifiedDate":"2022-10-06"}],"authorContributionMap":{"hanwenlai":28}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-10-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-02-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-02-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-02-11"},{"lineNumber":17,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.person.Record;","lastModifiedDate":"2022-10-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-02-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":126,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":127,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":128,"author":{"gitId":"EiffelLKF"},"content":"     * Parses a {@code String recordDate} and {@code String recordData} into a {@code Record}.","lastModifiedDate":"2022-10-10"},{"lineNumber":129,"author":{"gitId":"EiffelLKF"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-10-10"},{"lineNumber":130,"author":{"gitId":"EiffelLKF"},"content":"     *","lastModifiedDate":"2022-10-10"},{"lineNumber":131,"author":{"gitId":"EiffelLKF"},"content":"     * @throws ParseException if the given inputs is invalid.","lastModifiedDate":"2022-10-10"},{"lineNumber":132,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":133,"author":{"gitId":"EiffelLKF"},"content":"    public static Record parseRecord(String recordDate, String recordData) throws ParseException {","lastModifiedDate":"2022-10-10"},{"lineNumber":134,"author":{"gitId":"EiffelLKF"},"content":"        requireAllNonNull(recordDate, recordData);","lastModifiedDate":"2022-10-10"},{"lineNumber":135,"author":{"gitId":"EiffelLKF"},"content":"        String trimmedDate \u003d recordDate.trim();","lastModifiedDate":"2022-10-10"},{"lineNumber":136,"author":{"gitId":"EiffelLKF"},"content":"        String trimmedData \u003d recordData.trim();","lastModifiedDate":"2022-10-10"},{"lineNumber":137,"author":{"gitId":"EiffelLKF"},"content":"        if (!Record.isValidDate(trimmedDate)) {","lastModifiedDate":"2022-10-10"},{"lineNumber":138,"author":{"gitId":"EiffelLKF"},"content":"            throw new ParseException(Record.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-10"},{"lineNumber":139,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-10"},{"lineNumber":140,"author":{"gitId":"EiffelLKF"},"content":"        return new Record(trimmedDate, trimmedData);","lastModifiedDate":"2022-10-10"},{"lineNumber":141,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":142,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"EiffelLKF":18,"-":124}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":9,"author":{"gitId":"LJXSean"},"content":"import seedu.address.model.person.Record;","lastModifiedDate":"2022-10-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"     * {@code Predicate} that always evaluate to true","lastModifiedDate":"2022-10-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2018-01-10"},{"lineNumber":19,"author":{"gitId":"hanwenlai"},"content":"    Predicate\u003cRecord\u003e PREDICATE_SHOW_ALL_RECORDS \u003d unused -\u003e true;","lastModifiedDate":"2022-10-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"marclzh"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2022-10-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"marclzh"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2022-10-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":52,"author":{"gitId":"marclzh"},"content":"     * Returns the AddressBook","lastModifiedDate":"2022-10-10"},{"lineNumber":53,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":54,"author":{"gitId":"marclzh"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2022-10-10"},{"lineNumber":55,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Deletes the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * The person must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);","lastModifiedDate":"2018-08-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Adds the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    void addPerson(Person person);","lastModifiedDate":"2018-08-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":85,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":86,"author":{"gitId":"EiffelLKF"},"content":"     * Returns true if a record with the same identity as {@code record} exists in the record list.","lastModifiedDate":"2022-10-10"},{"lineNumber":87,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":88,"author":{"gitId":"EiffelLKF"},"content":"    boolean hasRecord(Record record);","lastModifiedDate":"2022-10-10"},{"lineNumber":89,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":90,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":91,"author":{"gitId":"EiffelLKF"},"content":"     * Adds the given record.","lastModifiedDate":"2022-10-10"},{"lineNumber":92,"author":{"gitId":"EiffelLKF"},"content":"     * {@code person} must not already exist in the record list.","lastModifiedDate":"2022-10-10"},{"lineNumber":93,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":94,"author":{"gitId":"EiffelLKF"},"content":"    void addRecord(Record record);","lastModifiedDate":"2022-10-10"},{"lineNumber":95,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":96,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":97,"author":{"gitId":"marclzh"},"content":"     * Returns an unmodifiable view of the filtered person list","lastModifiedDate":"2022-10-10"},{"lineNumber":98,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":103,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-10-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2018-01-10"},{"lineNumber":107,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":108,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":109,"author":{"gitId":"marclzh"},"content":"     * Returns an unmodifiable view of the filtered record list","lastModifiedDate":"2022-10-10"},{"lineNumber":110,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":111,"author":{"gitId":"LJXSean"},"content":"    ObservableList\u003cRecord\u003e getFilteredRecordList();","lastModifiedDate":"2022-10-08"},{"lineNumber":112,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":113,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":114,"author":{"gitId":"marclzh"},"content":"     * Sets the filtered record list to the record list of the given {@code person}.","lastModifiedDate":"2022-10-10"},{"lineNumber":115,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-10-10"},{"lineNumber":116,"author":{"gitId":"marclzh"},"content":"     * @param person The person whose record list is to be displayed.","lastModifiedDate":"2022-10-10"},{"lineNumber":117,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":118,"author":{"gitId":"marclzh"},"content":"    void setFilteredRecordList(Person person);","lastModifiedDate":"2022-10-10"},{"lineNumber":119,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":120,"author":{"gitId":"LJXSean"},"content":"    /**","lastModifiedDate":"2022-10-08"},{"lineNumber":121,"author":{"gitId":"LJXSean"},"content":"     * Updates the filter of the filtered record list to filter by the given {@code predicate}.","lastModifiedDate":"2022-10-08"},{"lineNumber":122,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-10-10"},{"lineNumber":123,"author":{"gitId":"LJXSean"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2022-10-08"},{"lineNumber":124,"author":{"gitId":"LJXSean"},"content":"     */","lastModifiedDate":"2022-10-08"},{"lineNumber":125,"author":{"gitId":"LJXSean"},"content":"    void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate);","lastModifiedDate":"2022-10-08"},{"lineNumber":126,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":127,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":128,"author":{"gitId":"marclzh"},"content":"     * Clears the record list.","lastModifiedDate":"2022-10-10"},{"lineNumber":129,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":130,"author":{"gitId":"marclzh"},"content":"    void clearRecords();","lastModifiedDate":"2022-10-10"},{"lineNumber":131,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":132,"author":{"gitId":"hanwenlai"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":133,"author":{"gitId":"marclzh"},"content":"     * Deletes the given record.","lastModifiedDate":"2022-10-10"},{"lineNumber":134,"author":{"gitId":"marclzh"},"content":"     * {@code record} must exist in the filtered record list.","lastModifiedDate":"2022-10-10"},{"lineNumber":135,"author":{"gitId":"hanwenlai"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":136,"author":{"gitId":"marclzh"},"content":"    void deleteRecord(Record record);","lastModifiedDate":"2022-10-10"},{"lineNumber":137,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":138,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-11"},{"lineNumber":139,"author":{"gitId":"EiffelLKF"},"content":"     * Retrieve flag raised by record list being displayed.","lastModifiedDate":"2022-10-11"},{"lineNumber":140,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-11"},{"lineNumber":141,"author":{"gitId":"EiffelLKF"},"content":"    boolean isRecordListDisplayed();","lastModifiedDate":"2022-10-11"},{"lineNumber":142,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":143,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-11"},{"lineNumber":144,"author":{"gitId":"EiffelLKF"},"content":"     * Flag to determine is record list is being displayed.","lastModifiedDate":"2022-10-11"},{"lineNumber":145,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-11"},{"lineNumber":146,"author":{"gitId":"EiffelLKF"},"content":"    void setRecordListDisplayed(boolean b);","lastModifiedDate":"2022-10-11"},{"lineNumber":147,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":148,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-11"},{"lineNumber":149,"author":{"gitId":"EiffelLKF"},"content":"     * Set the person whose records are being displayed / processed.","lastModifiedDate":"2022-10-11"},{"lineNumber":150,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-11"},{"lineNumber":151,"author":{"gitId":"EiffelLKF"},"content":"    void setPersonWithRecords(Person person);","lastModifiedDate":"2022-10-11"},{"lineNumber":152,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":153,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"anthonyhoth":1,"marclzh":31,"hanwenlai":3,"LJXSean":9,"EiffelLKF":27,"-":82}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.model.person.Person.DEFAULT_ADDRESS;","lastModifiedDate":"2022-10-11"},{"lineNumber":6,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.model.person.Person.DEFAULT_EMAIL;","lastModifiedDate":"2022-10-11"},{"lineNumber":7,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.model.person.Person.DEFAULT_NAME;","lastModifiedDate":"2022-10-11"},{"lineNumber":8,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.model.person.Person.DEFAULT_PHONE;","lastModifiedDate":"2022-10-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"EiffelLKF"},"content":"import java.util.HashSet;","lastModifiedDate":"2022-10-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"LJXSean"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2022-10-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":20,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2022-10-11"},{"lineNumber":21,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.person.DisplayedPerson;","lastModifiedDate":"2022-10-11"},{"lineNumber":22,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2022-10-11"},{"lineNumber":23,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2022-10-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":25,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2022-10-11"},{"lineNumber":26,"author":{"gitId":"LJXSean"},"content":"import seedu.address.model.person.Record;","lastModifiedDate":"2022-10-08"},{"lineNumber":27,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.person.RecordList;","lastModifiedDate":"2022-10-11"},{"lineNumber":28,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2022-10-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"EiffelLKF"},"content":"    private final DisplayedPerson personWithRecords; // Person whose records are being displayed (if any)","lastModifiedDate":"2022-10-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2018-01-10"},{"lineNumber":40,"author":{"gitId":"LJXSean"},"content":"    private FilteredList\u003cRecord\u003e filteredRecords;","lastModifiedDate":"2022-10-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"EiffelLKF"},"content":"    private boolean isRecordListDisplayed \u003d false;","lastModifiedDate":"2022-10-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs.","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);","lastModifiedDate":"2017-05-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);","lastModifiedDate":"2016-12-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":54,"author":{"gitId":"EiffelLKF"},"content":"        Person placeholderPerson \u003d new Person(new Name(DEFAULT_NAME),","lastModifiedDate":"2022-10-11"},{"lineNumber":55,"author":{"gitId":"EiffelLKF"},"content":"                new Phone(DEFAULT_PHONE),","lastModifiedDate":"2022-10-11"},{"lineNumber":56,"author":{"gitId":"EiffelLKF"},"content":"                new Email(DEFAULT_EMAIL),","lastModifiedDate":"2022-10-11"},{"lineNumber":57,"author":{"gitId":"EiffelLKF"},"content":"                new Address(DEFAULT_ADDRESS),","lastModifiedDate":"2022-10-11"},{"lineNumber":58,"author":{"gitId":"EiffelLKF"},"content":"                new HashSet\u003cTag\u003e(),","lastModifiedDate":"2022-10-11"},{"lineNumber":59,"author":{"gitId":"EiffelLKF"},"content":"                new RecordList());","lastModifiedDate":"2022-10-11"},{"lineNumber":60,"author":{"gitId":"EiffelLKF"},"content":"        this.personWithRecords \u003d new DisplayedPerson(placeholderPerson);","lastModifiedDate":"2022-10-11"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":62,"author":{"gitId":"hanwenlai"},"content":"        filteredRecords \u003d new FilteredList\u003c\u003e(FXCollections.observableArrayList()); // empty FilteredList","lastModifiedDate":"2022-10-10"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());","lastModifiedDate":"2016-09-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2016-09-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2018-08-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);","lastModifiedDate":"2019-01-25"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);","lastModifiedDate":"2019-01-25"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":140,"author":{"gitId":"EiffelLKF"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Record List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-10-10"},{"lineNumber":141,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":142,"author":{"gitId":"EiffelLKF"},"content":"    @Override","lastModifiedDate":"2022-10-11"},{"lineNumber":143,"author":{"gitId":"EiffelLKF"},"content":"    public void setRecordListDisplayed(boolean b) {","lastModifiedDate":"2022-10-11"},{"lineNumber":144,"author":{"gitId":"EiffelLKF"},"content":"        this.isRecordListDisplayed \u003d b;","lastModifiedDate":"2022-10-11"},{"lineNumber":145,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":146,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":147,"author":{"gitId":"EiffelLKF"},"content":"    @Override","lastModifiedDate":"2022-10-11"},{"lineNumber":148,"author":{"gitId":"EiffelLKF"},"content":"    public boolean isRecordListDisplayed() {","lastModifiedDate":"2022-10-11"},{"lineNumber":149,"author":{"gitId":"EiffelLKF"},"content":"        return isRecordListDisplayed;","lastModifiedDate":"2022-10-11"},{"lineNumber":150,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":151,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":152,"author":{"gitId":"EiffelLKF"},"content":"    @Override","lastModifiedDate":"2022-10-11"},{"lineNumber":153,"author":{"gitId":"EiffelLKF"},"content":"    public void setPersonWithRecords(Person person) {","lastModifiedDate":"2022-10-11"},{"lineNumber":154,"author":{"gitId":"EiffelLKF"},"content":"        personWithRecords.setDisplayedPerson(person, this.addressBook);","lastModifiedDate":"2022-10-11"},{"lineNumber":155,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":156,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":157,"author":{"gitId":"EiffelLKF"},"content":"    @Override","lastModifiedDate":"2022-10-10"},{"lineNumber":158,"author":{"gitId":"EiffelLKF"},"content":"    public void addRecord(Record record) {","lastModifiedDate":"2022-10-10"},{"lineNumber":159,"author":{"gitId":"EiffelLKF"},"content":"        personWithRecords.addRecord(record);","lastModifiedDate":"2022-10-10"},{"lineNumber":160,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":161,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":162,"author":{"gitId":"EiffelLKF"},"content":"    @Override","lastModifiedDate":"2022-10-10"},{"lineNumber":163,"author":{"gitId":"EiffelLKF"},"content":"    public boolean hasRecord(Record record) {","lastModifiedDate":"2022-10-10"},{"lineNumber":164,"author":{"gitId":"EiffelLKF"},"content":"        return personWithRecords.hasRecord(record);","lastModifiedDate":"2022-10-10"},{"lineNumber":165,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":166,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":167,"author":{"gitId":"EiffelLKF"},"content":"    @Override","lastModifiedDate":"2022-10-11"},{"lineNumber":168,"author":{"gitId":"EiffelLKF"},"content":"    public void deleteRecord(Record record) {","lastModifiedDate":"2022-10-11"},{"lineNumber":169,"author":{"gitId":"EiffelLKF"},"content":"        personWithRecords.deleteRecord(record);","lastModifiedDate":"2022-10-11"},{"lineNumber":170,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":171,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":172,"author":{"gitId":"EiffelLKF"},"content":"    @Override","lastModifiedDate":"2022-10-11"},{"lineNumber":173,"author":{"gitId":"EiffelLKF"},"content":"    public void clearRecords() {","lastModifiedDate":"2022-10-11"},{"lineNumber":174,"author":{"gitId":"EiffelLKF"},"content":"        personWithRecords.clearRecords();","lastModifiedDate":"2022-10-11"},{"lineNumber":175,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":176,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":180,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2018-01-10"},{"lineNumber":181,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":182,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        return filteredPersons;","lastModifiedDate":"2018-12-09"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":194,"author":{"gitId":"LJXSean"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Record List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-10-08"},{"lineNumber":195,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":196,"author":{"gitId":"LJXSean"},"content":"    /**","lastModifiedDate":"2022-10-08"},{"lineNumber":197,"author":{"gitId":"LJXSean"},"content":"     * Returns an unmodifiable view of the list of {@code Record} backed by the internal list of","lastModifiedDate":"2022-10-08"},{"lineNumber":198,"author":{"gitId":"LJXSean"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2022-10-08"},{"lineNumber":199,"author":{"gitId":"LJXSean"},"content":"     */","lastModifiedDate":"2022-10-08"},{"lineNumber":200,"author":{"gitId":"LJXSean"},"content":"    @Override","lastModifiedDate":"2022-10-08"},{"lineNumber":201,"author":{"gitId":"LJXSean"},"content":"    public ObservableList\u003cRecord\u003e getFilteredRecordList() {","lastModifiedDate":"2022-10-08"},{"lineNumber":202,"author":{"gitId":"LJXSean"},"content":"        return filteredRecords;","lastModifiedDate":"2022-10-08"},{"lineNumber":203,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":204,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":205,"author":{"gitId":"LJXSean"},"content":"    @Override","lastModifiedDate":"2022-10-08"},{"lineNumber":206,"author":{"gitId":"LJXSean"},"content":"    public void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate) {","lastModifiedDate":"2022-10-08"},{"lineNumber":207,"author":{"gitId":"LJXSean"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2022-10-08"},{"lineNumber":208,"author":{"gitId":"LJXSean"},"content":"        filteredRecords.setPredicate(predicate);","lastModifiedDate":"2022-10-08"},{"lineNumber":209,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":210,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":211,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":212,"author":{"gitId":"anthonyhoth"},"content":"    @Override","lastModifiedDate":"2022-10-10"},{"lineNumber":213,"author":{"gitId":"hanwenlai"},"content":"    public void setFilteredRecordList(Person person) {","lastModifiedDate":"2022-10-10"},{"lineNumber":214,"author":{"gitId":"EiffelLKF"},"content":"        setPersonWithRecords(person);","lastModifiedDate":"2022-10-11"},{"lineNumber":215,"author":{"gitId":"EiffelLKF"},"content":"        filteredRecords \u003d new FilteredList\u003c\u003e(personWithRecords.getUnmodifiableRecords());","lastModifiedDate":"2022-10-11"},{"lineNumber":216,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":217,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":227,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)","lastModifiedDate":"2019-01-25"},{"lineNumber":233,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)","lastModifiedDate":"2018-11-27"},{"lineNumber":234,"author":{"gitId":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);","lastModifiedDate":"2019-01-25"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":237,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"anthonyhoth":1,"hanwenlai":2,"LJXSean":22,"EiffelLKF":61,"-":151}},{"path":"src/main/java/seedu/address/model/person/DisplayedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"EiffelLKF"},"content":"package seedu.address.model.person;","lastModifiedDate":"2022-10-11"},{"lineNumber":2,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":3,"author":{"gitId":"EiffelLKF"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-10-11"},{"lineNumber":4,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":5,"author":{"gitId":"EiffelLKF"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-10-11"},{"lineNumber":6,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2022-10-11"},{"lineNumber":7,"author":{"gitId":"EiffelLKF"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2022-10-11"},{"lineNumber":8,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":9,"author":{"gitId":"EiffelLKF"},"content":"/**","lastModifiedDate":"2022-10-11"},{"lineNumber":10,"author":{"gitId":"EiffelLKF"},"content":" * Represents person whose records are being displayed.","lastModifiedDate":"2022-10-11"},{"lineNumber":11,"author":{"gitId":"EiffelLKF"},"content":" */","lastModifiedDate":"2022-10-11"},{"lineNumber":12,"author":{"gitId":"EiffelLKF"},"content":"public class DisplayedPerson {","lastModifiedDate":"2022-10-11"},{"lineNumber":13,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":14,"author":{"gitId":"EiffelLKF"},"content":"    /** Person to be displayed */","lastModifiedDate":"2022-10-11"},{"lineNumber":15,"author":{"gitId":"EiffelLKF"},"content":"    private Person person;","lastModifiedDate":"2022-10-11"},{"lineNumber":16,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":17,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-11"},{"lineNumber":18,"author":{"gitId":"EiffelLKF"},"content":"     * Constructor for DisplayedPerson","lastModifiedDate":"2022-10-11"},{"lineNumber":19,"author":{"gitId":"EiffelLKF"},"content":"     * @param person person to be displayed.","lastModifiedDate":"2022-10-11"},{"lineNumber":20,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-11"},{"lineNumber":21,"author":{"gitId":"EiffelLKF"},"content":"    public DisplayedPerson(Person person) {","lastModifiedDate":"2022-10-11"},{"lineNumber":22,"author":{"gitId":"EiffelLKF"},"content":"        requireAllNonNull(person);","lastModifiedDate":"2022-10-11"},{"lineNumber":23,"author":{"gitId":"EiffelLKF"},"content":"        this.person \u003d person;","lastModifiedDate":"2022-10-11"},{"lineNumber":24,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":25,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":26,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-11"},{"lineNumber":27,"author":{"gitId":"EiffelLKF"},"content":"     * Set the person displayed to the input person parameter.","lastModifiedDate":"2022-10-11"},{"lineNumber":28,"author":{"gitId":"EiffelLKF"},"content":"     *","lastModifiedDate":"2022-10-11"},{"lineNumber":29,"author":{"gitId":"EiffelLKF"},"content":"     * @param person New person to be displayed.","lastModifiedDate":"2022-10-11"},{"lineNumber":30,"author":{"gitId":"EiffelLKF"},"content":"     * @param addressBook Addressbook from which the new person originated from.","lastModifiedDate":"2022-10-11"},{"lineNumber":31,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-11"},{"lineNumber":32,"author":{"gitId":"EiffelLKF"},"content":"    public void setDisplayedPerson(Person person, AddressBook addressBook) {","lastModifiedDate":"2022-10-11"},{"lineNumber":33,"author":{"gitId":"EiffelLKF"},"content":"        requireAllNonNull(person, addressBook);","lastModifiedDate":"2022-10-11"},{"lineNumber":34,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":35,"author":{"gitId":"EiffelLKF"},"content":"        if (!addressBook.hasPerson(person)) {","lastModifiedDate":"2022-10-11"},{"lineNumber":36,"author":{"gitId":"EiffelLKF"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2022-10-11"},{"lineNumber":37,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-11"},{"lineNumber":38,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":39,"author":{"gitId":"EiffelLKF"},"content":"        setPerson(person);","lastModifiedDate":"2022-10-11"},{"lineNumber":40,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":41,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":42,"author":{"gitId":"EiffelLKF"},"content":"    private void setPerson(Person toSet) {","lastModifiedDate":"2022-10-11"},{"lineNumber":43,"author":{"gitId":"EiffelLKF"},"content":"        this.person \u003d toSet;","lastModifiedDate":"2022-10-11"},{"lineNumber":44,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":45,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":46,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-11"},{"lineNumber":47,"author":{"gitId":"EiffelLKF"},"content":"     * Adds a record to the record list.","lastModifiedDate":"2022-10-11"},{"lineNumber":48,"author":{"gitId":"EiffelLKF"},"content":"     * The record must not already exist in the record list.","lastModifiedDate":"2022-10-11"},{"lineNumber":49,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-11"},{"lineNumber":50,"author":{"gitId":"EiffelLKF"},"content":"    public void addRecord(Record record) {","lastModifiedDate":"2022-10-11"},{"lineNumber":51,"author":{"gitId":"EiffelLKF"},"content":"        person.addRecord(record);","lastModifiedDate":"2022-10-11"},{"lineNumber":52,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":53,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":54,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-11"},{"lineNumber":55,"author":{"gitId":"EiffelLKF"},"content":"     * Returns true if a record with the same identity as {@code record} exists in the record list.","lastModifiedDate":"2022-10-11"},{"lineNumber":56,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-11"},{"lineNumber":57,"author":{"gitId":"EiffelLKF"},"content":"    public boolean hasRecord(Record record) {","lastModifiedDate":"2022-10-11"},{"lineNumber":58,"author":{"gitId":"EiffelLKF"},"content":"        return person.hasRecord(record);","lastModifiedDate":"2022-10-11"},{"lineNumber":59,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":60,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":61,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-11"},{"lineNumber":62,"author":{"gitId":"EiffelLKF"},"content":"     * Deletes a record from the record list.","lastModifiedDate":"2022-10-11"},{"lineNumber":63,"author":{"gitId":"EiffelLKF"},"content":"     * The record must already exist in the record list.","lastModifiedDate":"2022-10-11"},{"lineNumber":64,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-11"},{"lineNumber":65,"author":{"gitId":"EiffelLKF"},"content":"    public void deleteRecord(Record record) {","lastModifiedDate":"2022-10-11"},{"lineNumber":66,"author":{"gitId":"EiffelLKF"},"content":"        person.deleteRecord(record);","lastModifiedDate":"2022-10-11"},{"lineNumber":67,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":68,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":69,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-11"},{"lineNumber":70,"author":{"gitId":"EiffelLKF"},"content":"     * Clears the contents of the record list.","lastModifiedDate":"2022-10-11"},{"lineNumber":71,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-11"},{"lineNumber":72,"author":{"gitId":"EiffelLKF"},"content":"    public void clearRecords() {","lastModifiedDate":"2022-10-11"},{"lineNumber":73,"author":{"gitId":"EiffelLKF"},"content":"        person.clearRecords();","lastModifiedDate":"2022-10-11"},{"lineNumber":74,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":75,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":76,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-11"},{"lineNumber":77,"author":{"gitId":"EiffelLKF"},"content":"     * Retrieve unmodifiable list of records","lastModifiedDate":"2022-10-11"},{"lineNumber":78,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-11"},{"lineNumber":79,"author":{"gitId":"EiffelLKF"},"content":"    public ObservableList\u003cRecord\u003e getUnmodifiableRecords() {","lastModifiedDate":"2022-10-11"},{"lineNumber":80,"author":{"gitId":"EiffelLKF"},"content":"        return person.getUnmodifiableRecords();","lastModifiedDate":"2022-10-11"},{"lineNumber":81,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":82,"author":{"gitId":"EiffelLKF"},"content":"}","lastModifiedDate":"2022-10-11"}],"authorContributionMap":{"EiffelLKF":82}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"EiffelLKF"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"EiffelLKF"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-10-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"EiffelLKF"},"content":"    // Default Fields","lastModifiedDate":"2022-10-11"},{"lineNumber":21,"author":{"gitId":"EiffelLKF"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2022-10-11"},{"lineNumber":22,"author":{"gitId":"EiffelLKF"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2022-10-11"},{"lineNumber":23,"author":{"gitId":"EiffelLKF"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2022-10-11"},{"lineNumber":24,"author":{"gitId":"EiffelLKF"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2022-10-11"},{"lineNumber":25,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":34,"author":{"gitId":"anthonyhoth"},"content":"    private final RecordList records;","lastModifiedDate":"2022-10-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"anthonyhoth"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, RecordList records) {","lastModifiedDate":"2022-10-10"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);","lastModifiedDate":"2017-05-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":46,"author":{"gitId":"anthonyhoth"},"content":"        this.records \u003d records;","lastModifiedDate":"2022-10-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":65,"author":{"gitId":"marclzh"},"content":"    public RecordList getRecordList() {","lastModifiedDate":"2022-10-04"},{"lineNumber":66,"author":{"gitId":"anthonyhoth"},"content":"        return records;","lastModifiedDate":"2022-10-10"},{"lineNumber":67,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":68,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name.","lastModifiedDate":"2020-12-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());","lastModifiedDate":"2020-12-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":90,"author":{"gitId":"anthonyhoth"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d Record List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-10-10"},{"lineNumber":91,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":92,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":93,"author":{"gitId":"EiffelLKF"},"content":"     * Returns true if a record with the same identity as {@code record} exists in the record list.","lastModifiedDate":"2022-10-10"},{"lineNumber":94,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":95,"author":{"gitId":"EiffelLKF"},"content":"    public boolean hasRecord(Record record) {","lastModifiedDate":"2022-10-10"},{"lineNumber":96,"author":{"gitId":"EiffelLKF"},"content":"        requireNonNull(record);","lastModifiedDate":"2022-10-10"},{"lineNumber":97,"author":{"gitId":"EiffelLKF"},"content":"        return records.contains(record);","lastModifiedDate":"2022-10-10"},{"lineNumber":98,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":99,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":100,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":101,"author":{"gitId":"EiffelLKF"},"content":"     * Adds a record to the record list.","lastModifiedDate":"2022-10-10"},{"lineNumber":102,"author":{"gitId":"EiffelLKF"},"content":"     * The record must not already exist in the record list.","lastModifiedDate":"2022-10-10"},{"lineNumber":103,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":104,"author":{"gitId":"EiffelLKF"},"content":"    public void addRecord(Record r) {","lastModifiedDate":"2022-10-10"},{"lineNumber":105,"author":{"gitId":"EiffelLKF"},"content":"        records.add(r);","lastModifiedDate":"2022-10-10"},{"lineNumber":106,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":107,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":108,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-11"},{"lineNumber":109,"author":{"gitId":"EiffelLKF"},"content":"     * Deletes a record from the record list.","lastModifiedDate":"2022-10-11"},{"lineNumber":110,"author":{"gitId":"EiffelLKF"},"content":"     * The record must already exist in the record list.","lastModifiedDate":"2022-10-11"},{"lineNumber":111,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-11"},{"lineNumber":112,"author":{"gitId":"EiffelLKF"},"content":"    public void deleteRecord(Record record) {","lastModifiedDate":"2022-10-11"},{"lineNumber":113,"author":{"gitId":"EiffelLKF"},"content":"        records.delete(record);","lastModifiedDate":"2022-10-11"},{"lineNumber":114,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":115,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":116,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-11"},{"lineNumber":117,"author":{"gitId":"EiffelLKF"},"content":"     * Replaces the contents of the record list with {@code records}.","lastModifiedDate":"2022-10-11"},{"lineNumber":118,"author":{"gitId":"EiffelLKF"},"content":"     * {@code records} must not contain duplicate persons.","lastModifiedDate":"2022-10-11"},{"lineNumber":119,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-11"},{"lineNumber":120,"author":{"gitId":"EiffelLKF"},"content":"    public void setRecords(RecordList records) {","lastModifiedDate":"2022-10-11"},{"lineNumber":121,"author":{"gitId":"EiffelLKF"},"content":"        this.records.setRecordList(records);","lastModifiedDate":"2022-10-11"},{"lineNumber":122,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":123,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":124,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":125,"author":{"gitId":"marclzh"},"content":"     * Clears the contents of the record list.","lastModifiedDate":"2022-10-10"},{"lineNumber":126,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":127,"author":{"gitId":"marclzh"},"content":"    public void clearRecords() {","lastModifiedDate":"2022-10-10"},{"lineNumber":128,"author":{"gitId":"marclzh"},"content":"        records.clearRecords();","lastModifiedDate":"2022-10-10"},{"lineNumber":129,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":130,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":131,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-11"},{"lineNumber":132,"author":{"gitId":"EiffelLKF"},"content":"     * Retrieve unmodifiable list of records","lastModifiedDate":"2022-10-11"},{"lineNumber":133,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-11"},{"lineNumber":134,"author":{"gitId":"EiffelLKF"},"content":"    public ObservableList\u003cRecord\u003e getUnmodifiableRecords() {","lastModifiedDate":"2022-10-11"},{"lineNumber":135,"author":{"gitId":"EiffelLKF"},"content":"        return records.asUnmodifiableObservableList();","lastModifiedDate":"2022-10-11"},{"lineNumber":136,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":137,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":138,"author":{"gitId":"EiffelLKF"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-10-11"},{"lineNumber":139,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())","lastModifiedDate":"2018-08-14"},{"lineNumber":156,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())","lastModifiedDate":"2018-08-14"},{"lineNumber":157,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())","lastModifiedDate":"2018-08-14"},{"lineNumber":158,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())","lastModifiedDate":"2018-08-14"},{"lineNumber":159,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags());","lastModifiedDate":"2018-08-14"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);","lastModifiedDate":"2016-08-24"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        builder.append(getName())","lastModifiedDate":"2018-01-10"},{"lineNumber":172,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                .append(getPhone())","lastModifiedDate":"2018-01-10"},{"lineNumber":174,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":175,"author":{"gitId":"-"},"content":"                .append(getEmail())","lastModifiedDate":"2018-01-10"},{"lineNumber":176,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":177,"author":{"gitId":"marclzh"},"content":"                .append(getAddress())","lastModifiedDate":"2022-10-04"},{"lineNumber":178,"author":{"gitId":"marclzh"},"content":"                .append(\"; Record Count: \")","lastModifiedDate":"2022-10-04"},{"lineNumber":179,"author":{"gitId":"marclzh"},"content":"                .append(getRecordList());","lastModifiedDate":"2022-10-04"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();","lastModifiedDate":"2020-12-11"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {","lastModifiedDate":"2020-12-11"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");","lastModifiedDate":"2020-12-11"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);","lastModifiedDate":"2020-12-11"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-11"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":189,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"anthonyhoth":6,"marclzh":13,"EiffelLKF":49,"-":121}},{"path":"src/main/java/seedu/address/model/person/Record.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package seedu.address.model.person;","lastModifiedDate":"2022-10-04"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-04"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATE_FORMAT;","lastModifiedDate":"2022-10-04"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-10-04"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-04"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-10-04"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-10-04"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"/**","lastModifiedDate":"2022-10-04"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":" * Represents a single record in the record list of a Person object.","lastModifiedDate":"2022-10-04"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":" */","lastModifiedDate":"2022-10-04"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"public class Record {","lastModifiedDate":"2022-10-04"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"    public static final DateTimeFormatter DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");","lastModifiedDate":"2022-10-04"},{"lineNumber":17,"author":{"gitId":"LJXSean"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Record date should be in the following format: \"","lastModifiedDate":"2022-10-09"},{"lineNumber":18,"author":{"gitId":"EiffelLKF"},"content":"            + \"DD-MM-YYYY HHmm\";","lastModifiedDate":"2022-10-11"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"    /* Data Fields */","lastModifiedDate":"2022-10-04"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"    public final String record;","lastModifiedDate":"2022-10-04"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"    private final LocalDateTime recordDate;","lastModifiedDate":"2022-10-04"},{"lineNumber":22,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":24,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-04"},{"lineNumber":25,"author":{"gitId":"marclzh"},"content":"     * Constructs a record.","lastModifiedDate":"2022-10-04"},{"lineNumber":26,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-10-04"},{"lineNumber":27,"author":{"gitId":"marclzh"},"content":"     * @param recordDate Date that the record was made.","lastModifiedDate":"2022-10-04"},{"lineNumber":28,"author":{"gitId":"marclzh"},"content":"     * @param record     Contents of the record.","lastModifiedDate":"2022-10-04"},{"lineNumber":29,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-04"},{"lineNumber":30,"author":{"gitId":"LJXSean"},"content":"    public Record(String recordDate, String record) {","lastModifiedDate":"2022-10-08"},{"lineNumber":31,"author":{"gitId":"marclzh"},"content":"        requireNonNull(recordDate);","lastModifiedDate":"2022-10-04"},{"lineNumber":32,"author":{"gitId":"marclzh"},"content":"        requireNonNull(record);","lastModifiedDate":"2022-10-04"},{"lineNumber":33,"author":{"gitId":"marclzh"},"content":"        checkArgument(isValidDate(recordDate), MESSAGE_INVALID_DATE_FORMAT);","lastModifiedDate":"2022-10-04"},{"lineNumber":34,"author":{"gitId":"marclzh"},"content":"        this.recordDate \u003d LocalDateTime.parse(recordDate, DATE_FORMAT);","lastModifiedDate":"2022-10-04"},{"lineNumber":35,"author":{"gitId":"marclzh"},"content":"        // record field not checked since any record input can be valid.","lastModifiedDate":"2022-10-04"},{"lineNumber":36,"author":{"gitId":"marclzh"},"content":"        this.record \u003d record;","lastModifiedDate":"2022-10-04"},{"lineNumber":37,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":38,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":39,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-04"},{"lineNumber":40,"author":{"gitId":"marclzh"},"content":"     * Returns true if date is valid.","lastModifiedDate":"2022-10-04"},{"lineNumber":41,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-10-04"},{"lineNumber":42,"author":{"gitId":"marclzh"},"content":"     * @param testDate Date to be tested.","lastModifiedDate":"2022-10-04"},{"lineNumber":43,"author":{"gitId":"marclzh"},"content":"     * @return True if valid.","lastModifiedDate":"2022-10-04"},{"lineNumber":44,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-04"},{"lineNumber":45,"author":{"gitId":"LJXSean"},"content":"    public static boolean isValidDate(String testDate) {","lastModifiedDate":"2022-10-09"},{"lineNumber":46,"author":{"gitId":"marclzh"},"content":"        try {","lastModifiedDate":"2022-10-04"},{"lineNumber":47,"author":{"gitId":"marclzh"},"content":"            LocalDateTime.parse(testDate, DATE_FORMAT);","lastModifiedDate":"2022-10-04"},{"lineNumber":48,"author":{"gitId":"marclzh"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-10-04"},{"lineNumber":49,"author":{"gitId":"marclzh"},"content":"            return false;","lastModifiedDate":"2022-10-04"},{"lineNumber":50,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-10-04"},{"lineNumber":51,"author":{"gitId":"marclzh"},"content":"        return true;","lastModifiedDate":"2022-10-04"},{"lineNumber":52,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":53,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":54,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-04"},{"lineNumber":55,"author":{"gitId":"marclzh"},"content":"     * Record date getter.","lastModifiedDate":"2022-10-04"},{"lineNumber":56,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-10-04"},{"lineNumber":57,"author":{"gitId":"marclzh"},"content":"     * @return The record date.","lastModifiedDate":"2022-10-04"},{"lineNumber":58,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-04"},{"lineNumber":59,"author":{"gitId":"LJXSean"},"content":"    public String getRecordDate() {","lastModifiedDate":"2022-10-09"},{"lineNumber":60,"author":{"gitId":"LJXSean"},"content":"        return recordDate.format(DATE_FORMAT);","lastModifiedDate":"2022-10-09"},{"lineNumber":61,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":62,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":63,"author":{"gitId":"marclzh"},"content":"    @Override","lastModifiedDate":"2022-10-04"},{"lineNumber":64,"author":{"gitId":"marclzh"},"content":"    public String toString() {","lastModifiedDate":"2022-10-04"},{"lineNumber":65,"author":{"gitId":"marclzh"},"content":"        return recordDate.format(DATE_FORMAT) + \": \" + record;","lastModifiedDate":"2022-10-04"},{"lineNumber":66,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":67,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":68,"author":{"gitId":"marclzh"},"content":"    @Override","lastModifiedDate":"2022-10-04"},{"lineNumber":69,"author":{"gitId":"marclzh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-04"},{"lineNumber":70,"author":{"gitId":"marclzh"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-04"},{"lineNumber":71,"author":{"gitId":"marclzh"},"content":"                || (other instanceof Record // instanceof handles nulls","lastModifiedDate":"2022-10-04"},{"lineNumber":72,"author":{"gitId":"marclzh"},"content":"                \u0026\u0026 recordDate.equals(((Record) other).recordDate)","lastModifiedDate":"2022-10-04"},{"lineNumber":73,"author":{"gitId":"marclzh"},"content":"                \u0026\u0026 record.equals((((Record) other).record))); // state check","lastModifiedDate":"2022-10-04"},{"lineNumber":74,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":75,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":76,"author":{"gitId":"marclzh"},"content":"    /* todo figure out what this should be */","lastModifiedDate":"2022-10-04"},{"lineNumber":77,"author":{"gitId":"marclzh"},"content":"    @Override","lastModifiedDate":"2022-10-04"},{"lineNumber":78,"author":{"gitId":"marclzh"},"content":"    public int hashCode() {","lastModifiedDate":"2022-10-04"},{"lineNumber":79,"author":{"gitId":"marclzh"},"content":"        return record.hashCode();","lastModifiedDate":"2022-10-04"},{"lineNumber":80,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":81,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-10-04"}],"authorContributionMap":{"marclzh":74,"LJXSean":6,"EiffelLKF":1}},{"path":"src/main/java/seedu/address/model/person/RecordContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LJXSean"},"content":"package seedu.address.model.person;","lastModifiedDate":"2022-10-08"},{"lineNumber":2,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":3,"author":{"gitId":"LJXSean"},"content":"import java.util.List;","lastModifiedDate":"2022-10-08"},{"lineNumber":4,"author":{"gitId":"LJXSean"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-08"},{"lineNumber":5,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":6,"author":{"gitId":"LJXSean"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2022-10-08"},{"lineNumber":7,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":8,"author":{"gitId":"LJXSean"},"content":"/**","lastModifiedDate":"2022-10-08"},{"lineNumber":9,"author":{"gitId":"LJXSean"},"content":" * Tests that a {@code Record}\u0027s {@code record} matches any of the keywords given.","lastModifiedDate":"2022-10-08"},{"lineNumber":10,"author":{"gitId":"LJXSean"},"content":" */","lastModifiedDate":"2022-10-08"},{"lineNumber":11,"author":{"gitId":"LJXSean"},"content":"public class RecordContainsKeywordsPredicate implements Predicate\u003cRecord\u003e {","lastModifiedDate":"2022-10-08"},{"lineNumber":12,"author":{"gitId":"LJXSean"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2022-10-08"},{"lineNumber":13,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":14,"author":{"gitId":"LJXSean"},"content":"    public RecordContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2022-10-08"},{"lineNumber":15,"author":{"gitId":"LJXSean"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2022-10-08"},{"lineNumber":16,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":17,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":18,"author":{"gitId":"LJXSean"},"content":"    @Override","lastModifiedDate":"2022-10-08"},{"lineNumber":19,"author":{"gitId":"LJXSean"},"content":"    public boolean test(Record record) {","lastModifiedDate":"2022-10-08"},{"lineNumber":20,"author":{"gitId":"LJXSean"},"content":"        return keywords.stream()","lastModifiedDate":"2022-10-08"},{"lineNumber":21,"author":{"gitId":"LJXSean"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(record.record, keyword));","lastModifiedDate":"2022-10-08"},{"lineNumber":22,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":23,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":24,"author":{"gitId":"LJXSean"},"content":"    @Override","lastModifiedDate":"2022-10-08"},{"lineNumber":25,"author":{"gitId":"LJXSean"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-08"},{"lineNumber":26,"author":{"gitId":"LJXSean"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-08"},{"lineNumber":27,"author":{"gitId":"LJXSean"},"content":"                || (other instanceof RecordContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2022-10-08"},{"lineNumber":28,"author":{"gitId":"LJXSean"},"content":"                \u0026\u0026 keywords.equals(((RecordContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2022-10-08"},{"lineNumber":29,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":30,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":31,"author":{"gitId":"LJXSean"},"content":"}","lastModifiedDate":"2022-10-08"}],"authorContributionMap":{"LJXSean":31}},{"path":"src/main/java/seedu/address/model/person/RecordList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package seedu.address.model.person;","lastModifiedDate":"2022-10-04"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":3,"author":{"gitId":"EiffelLKF"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-10"},{"lineNumber":4,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":5,"author":{"gitId":"LJXSean"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2022-10-08"},{"lineNumber":6,"author":{"gitId":"LJXSean"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-10-08"},{"lineNumber":7,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"/**","lastModifiedDate":"2022-10-04"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":" * Represents a record list in the address book.","lastModifiedDate":"2022-10-04"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":" */","lastModifiedDate":"2022-10-04"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"public class RecordList {","lastModifiedDate":"2022-10-04"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"    /* Record List variables */","lastModifiedDate":"2022-10-04"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"    // count of the record list should be accessed through the ArrayList#size() method.","lastModifiedDate":"2022-10-04"},{"lineNumber":14,"author":{"gitId":"LJXSean"},"content":"    private final ObservableList\u003cRecord\u003e recordList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2022-10-08"},{"lineNumber":15,"author":{"gitId":"LJXSean"},"content":"    private final ObservableList\u003cRecord\u003e internalUnmodifiableRecordList \u003d","lastModifiedDate":"2022-10-08"},{"lineNumber":16,"author":{"gitId":"LJXSean"},"content":"            FXCollections.unmodifiableObservableList(recordList);","lastModifiedDate":"2022-10-08"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":18,"author":{"gitId":"hanwenlai"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":19,"author":{"gitId":"hanwenlai"},"content":"     * Adds a record to the RecordList.","lastModifiedDate":"2022-10-10"},{"lineNumber":20,"author":{"gitId":"hanwenlai"},"content":"     *","lastModifiedDate":"2022-10-10"},{"lineNumber":21,"author":{"gitId":"hanwenlai"},"content":"     * @param toAdd Record to add.","lastModifiedDate":"2022-10-10"},{"lineNumber":22,"author":{"gitId":"hanwenlai"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":23,"author":{"gitId":"hanwenlai"},"content":"    public void add(Record toAdd) {","lastModifiedDate":"2022-10-10"},{"lineNumber":24,"author":{"gitId":"hanwenlai"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2022-10-10"},{"lineNumber":25,"author":{"gitId":"hanwenlai"},"content":"        recordList.add(toAdd);","lastModifiedDate":"2022-10-10"},{"lineNumber":26,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":27,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":28,"author":{"gitId":"EiffelLKF"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":29,"author":{"gitId":"EiffelLKF"},"content":"     * Returns true if the list contains an equivalent record as the given argument.","lastModifiedDate":"2022-10-10"},{"lineNumber":30,"author":{"gitId":"EiffelLKF"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":31,"author":{"gitId":"EiffelLKF"},"content":"    public boolean contains(Record toCheck) {","lastModifiedDate":"2022-10-10"},{"lineNumber":32,"author":{"gitId":"EiffelLKF"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2022-10-10"},{"lineNumber":33,"author":{"gitId":"EiffelLKF"},"content":"        return recordList.stream().anyMatch(toCheck::equals);","lastModifiedDate":"2022-10-10"},{"lineNumber":34,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":35,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":36,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-04"},{"lineNumber":37,"author":{"gitId":"marclzh"},"content":"     * Getter for list of records.","lastModifiedDate":"2022-10-04"},{"lineNumber":38,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-10-04"},{"lineNumber":39,"author":{"gitId":"marclzh"},"content":"     * @return List of records.","lastModifiedDate":"2022-10-04"},{"lineNumber":40,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-04"},{"lineNumber":41,"author":{"gitId":"hanwenlai"},"content":"    public ObservableList\u003cRecord\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2022-10-10"},{"lineNumber":42,"author":{"gitId":"LJXSean"},"content":"        return internalUnmodifiableRecordList;","lastModifiedDate":"2022-10-08"},{"lineNumber":43,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":44,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":45,"author":{"gitId":"EiffelLKF"},"content":"    public void setRecordList(RecordList replacement) {","lastModifiedDate":"2022-10-10"},{"lineNumber":46,"author":{"gitId":"EiffelLKF"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2022-10-10"},{"lineNumber":47,"author":{"gitId":"EiffelLKF"},"content":"        recordList.setAll(replacement.recordList);","lastModifiedDate":"2022-10-10"},{"lineNumber":48,"author":{"gitId":"EiffelLKF"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":49,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":50,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-04"},{"lineNumber":51,"author":{"gitId":"marclzh"},"content":"     * Getter for size of list.","lastModifiedDate":"2022-10-04"},{"lineNumber":52,"author":{"gitId":"marclzh"},"content":"     *","lastModifiedDate":"2022-10-04"},{"lineNumber":53,"author":{"gitId":"marclzh"},"content":"     * @return Size of list.","lastModifiedDate":"2022-10-04"},{"lineNumber":54,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-04"},{"lineNumber":55,"author":{"gitId":"marclzh"},"content":"    public int getRecordListCount() {","lastModifiedDate":"2022-10-04"},{"lineNumber":56,"author":{"gitId":"marclzh"},"content":"        return this.recordList.size();","lastModifiedDate":"2022-10-04"},{"lineNumber":57,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":58,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":59,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-10"},{"lineNumber":60,"author":{"gitId":"marclzh"},"content":"     * Clears the record list.","lastModifiedDate":"2022-10-10"},{"lineNumber":61,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-10"},{"lineNumber":62,"author":{"gitId":"marclzh"},"content":"    public void clearRecords() {","lastModifiedDate":"2022-10-10"},{"lineNumber":63,"author":{"gitId":"marclzh"},"content":"        this.recordList.clear();","lastModifiedDate":"2022-10-10"},{"lineNumber":64,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":65,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":66,"author":{"gitId":"marclzh"},"content":"    @Override","lastModifiedDate":"2022-10-04"},{"lineNumber":67,"author":{"gitId":"marclzh"},"content":"    public String toString() {","lastModifiedDate":"2022-10-04"},{"lineNumber":68,"author":{"gitId":"marclzh"},"content":"        return \"Number of Records: \" + recordList.size();","lastModifiedDate":"2022-10-04"},{"lineNumber":69,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":70,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":71,"author":{"gitId":"marclzh"},"content":"    @Override","lastModifiedDate":"2022-10-04"},{"lineNumber":72,"author":{"gitId":"marclzh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-04"},{"lineNumber":73,"author":{"gitId":"marclzh"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-04"},{"lineNumber":74,"author":{"gitId":"marclzh"},"content":"                || (other instanceof RecordList // instanceof handles nulls","lastModifiedDate":"2022-10-04"},{"lineNumber":75,"author":{"gitId":"marclzh"},"content":"                \u0026\u0026 recordList.equals(((RecordList) other).recordList)); // state check","lastModifiedDate":"2022-10-04"},{"lineNumber":76,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":77,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":78,"author":{"gitId":"anthonyhoth"},"content":"    public void delete(Record record) {","lastModifiedDate":"2022-10-10"},{"lineNumber":79,"author":{"gitId":"anthonyhoth"},"content":"        recordList.remove(record);","lastModifiedDate":"2022-10-10"},{"lineNumber":80,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":81,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":82,"author":{"gitId":"marclzh"},"content":"    @Override","lastModifiedDate":"2022-10-04"},{"lineNumber":83,"author":{"gitId":"marclzh"},"content":"    public int hashCode() {","lastModifiedDate":"2022-10-04"},{"lineNumber":84,"author":{"gitId":"marclzh"},"content":"        return recordList.hashCode();","lastModifiedDate":"2022-10-04"},{"lineNumber":85,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":86,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-10-04"}],"authorContributionMap":{"anthonyhoth":2,"marclzh":49,"hanwenlai":11,"LJXSean":9,"EiffelLKF":15}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;","lastModifiedDate":"2016-12-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2016-12-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2016-12-20"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2016-12-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2016-12-20"},{"lineNumber":14,"author":{"gitId":"hanwenlai"},"content":"import seedu.address.model.person.Record;","lastModifiedDate":"2022-10-10"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"import seedu.address.model.person.RecordList;","lastModifiedDate":"2022-10-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-14"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":22,"author":{"gitId":"hanwenlai"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {","lastModifiedDate":"2016-12-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return new Person[] {","lastModifiedDate":"2016-12-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":27,"author":{"gitId":"hanwenlai"},"content":"                getTagSet(\"friends\"), getSampleRecordList()),","lastModifiedDate":"2022-10-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":30,"author":{"gitId":"hanwenlai"},"content":"                getTagSet(\"colleagues\", \"friends\"), getSampleRecordList()),","lastModifiedDate":"2022-10-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":33,"author":{"gitId":"hanwenlai"},"content":"                getTagSet(\"neighbours\"), getSampleRecordList()),","lastModifiedDate":"2022-10-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":36,"author":{"gitId":"hanwenlai"},"content":"                getTagSet(\"family\"), getSampleRecordList()),","lastModifiedDate":"2022-10-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":39,"author":{"gitId":"hanwenlai"},"content":"                getTagSet(\"classmates\"), getSampleRecordList()),","lastModifiedDate":"2022-10-10"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":42,"author":{"gitId":"hanwenlai"},"content":"                getTagSet(\"colleagues\"), getSampleRecordList())","lastModifiedDate":"2022-10-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {","lastModifiedDate":"2016-12-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();","lastModifiedDate":"2017-04-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {","lastModifiedDate":"2016-12-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);","lastModifiedDate":"2017-04-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {","lastModifiedDate":"2017-05-30"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                .map(Tag::new)","lastModifiedDate":"2018-01-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":63,"author":{"gitId":"hanwenlai"},"content":"    public static RecordList getSampleRecordList() {","lastModifiedDate":"2022-10-10"},{"lineNumber":64,"author":{"gitId":"hanwenlai"},"content":"        RecordList sampleRecordList \u003d new RecordList();","lastModifiedDate":"2022-10-10"},{"lineNumber":65,"author":{"gitId":"hanwenlai"},"content":"        sampleRecordList.add(new Record(\"05-06-2022 1200\", \"tested positive for covid-19\"));","lastModifiedDate":"2022-10-10"},{"lineNumber":66,"author":{"gitId":"hanwenlai"},"content":"        sampleRecordList.add(new Record(\"06-06-2010 1600\", \"tested positive for H1N1\"));","lastModifiedDate":"2022-10-10"},{"lineNumber":67,"author":{"gitId":"hanwenlai"},"content":"        sampleRecordList.add(new Record(\"20-02-2002 0200\", \"tested positive for SARS\"));","lastModifiedDate":"2022-10-10"},{"lineNumber":68,"author":{"gitId":"hanwenlai"},"content":"        return sampleRecordList;","lastModifiedDate":"2022-10-10"},{"lineNumber":69,"author":{"gitId":"hanwenlai"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"marclzh":1,"hanwenlai":15,"-":54}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"import seedu.address.model.person.RecordList;","lastModifiedDate":"2022-10-04"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {","lastModifiedDate":"2018-12-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final String address;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"LJXSean"},"content":"    private final List\u003cJsonAdaptedRecord\u003e recordList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                             @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"marclzh"},"content":"                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,","lastModifiedDate":"2022-10-04"},{"lineNumber":42,"author":{"gitId":"LJXSean"},"content":"                             @JsonProperty(\"recordList\") List\u003cJsonAdaptedRecord\u003e recordList) {","lastModifiedDate":"2022-10-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":48,"author":{"gitId":"LJXSean"},"content":"        if (recordList !\u003d null) {","lastModifiedDate":"2022-10-09"},{"lineNumber":49,"author":{"gitId":"LJXSean"},"content":"            this.recordList.addAll(recordList);","lastModifiedDate":"2022-10-09"},{"lineNumber":50,"author":{"gitId":"LJXSean"},"content":"        }","lastModifiedDate":"2022-10-09"},{"lineNumber":51,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"hanwenlai"},"content":"        recordList.addAll(source.getRecordList().asUnmodifiableObservableList().stream()","lastModifiedDate":"2022-10-10"},{"lineNumber":66,"author":{"gitId":"LJXSean"},"content":"                .map(JsonAdaptedRecord::new)","lastModifiedDate":"2022-10-09"},{"lineNumber":67,"author":{"gitId":"LJXSean"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2022-10-09"},{"lineNumber":68,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"LJXSean"},"content":"        final RecordList modelRecordList \u003d new RecordList();","lastModifiedDate":"2022-10-09"},{"lineNumber":86,"author":{"gitId":"LJXSean"},"content":"        for (JsonAdaptedRecord record : recordList) {","lastModifiedDate":"2022-10-09"},{"lineNumber":87,"author":{"gitId":"LJXSean"},"content":"            modelRecordList.add(record.toModelType());","lastModifiedDate":"2022-10-09"},{"lineNumber":88,"author":{"gitId":"LJXSean"},"content":"        }","lastModifiedDate":"2022-10-09"},{"lineNumber":89,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2018-08-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":123,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":124,"author":{"gitId":"marclzh"},"content":"        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags, modelRecordList);","lastModifiedDate":"2022-10-04"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"marclzh":5,"hanwenlai":1,"LJXSean":14,"-":107}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedRecord.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LJXSean"},"content":"package seedu.address.storage;","lastModifiedDate":"2022-10-09"},{"lineNumber":2,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":3,"author":{"gitId":"LJXSean"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2022-10-09"},{"lineNumber":4,"author":{"gitId":"LJXSean"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2022-10-09"},{"lineNumber":5,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":6,"author":{"gitId":"LJXSean"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2022-10-09"},{"lineNumber":7,"author":{"gitId":"LJXSean"},"content":"import seedu.address.model.person.Record;","lastModifiedDate":"2022-10-09"},{"lineNumber":8,"author":{"gitId":"LJXSean"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2022-10-09"},{"lineNumber":9,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":10,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":11,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":12,"author":{"gitId":"LJXSean"},"content":"/**","lastModifiedDate":"2022-10-09"},{"lineNumber":13,"author":{"gitId":"LJXSean"},"content":" * Jackson-friendly version of {@link Tag}.","lastModifiedDate":"2022-10-09"},{"lineNumber":14,"author":{"gitId":"LJXSean"},"content":" */","lastModifiedDate":"2022-10-09"},{"lineNumber":15,"author":{"gitId":"LJXSean"},"content":"class JsonAdaptedRecord {","lastModifiedDate":"2022-10-09"},{"lineNumber":16,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":17,"author":{"gitId":"LJXSean"},"content":"    private final String record;","lastModifiedDate":"2022-10-09"},{"lineNumber":18,"author":{"gitId":"LJXSean"},"content":"    private final String recordDate;","lastModifiedDate":"2022-10-09"},{"lineNumber":19,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":20,"author":{"gitId":"LJXSean"},"content":"    /**","lastModifiedDate":"2022-10-09"},{"lineNumber":21,"author":{"gitId":"LJXSean"},"content":"     * Constructs a {@code JsonAdaptedRecord} with the given {@code Record details}.","lastModifiedDate":"2022-10-09"},{"lineNumber":22,"author":{"gitId":"LJXSean"},"content":"     */","lastModifiedDate":"2022-10-09"},{"lineNumber":23,"author":{"gitId":"LJXSean"},"content":"    @JsonCreator","lastModifiedDate":"2022-10-09"},{"lineNumber":24,"author":{"gitId":"LJXSean"},"content":"    public JsonAdaptedRecord(@JsonProperty(\"recordDate\") String recordDate, @JsonProperty(\"record\") String record) {","lastModifiedDate":"2022-10-12"},{"lineNumber":25,"author":{"gitId":"LJXSean"},"content":"        this.record \u003d record;","lastModifiedDate":"2022-10-09"},{"lineNumber":26,"author":{"gitId":"LJXSean"},"content":"        this.recordDate \u003d recordDate;","lastModifiedDate":"2022-10-09"},{"lineNumber":27,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":28,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":29,"author":{"gitId":"LJXSean"},"content":"    /**","lastModifiedDate":"2022-10-09"},{"lineNumber":30,"author":{"gitId":"LJXSean"},"content":"     * Converts a given {@code Record} into this class for Jackson use.","lastModifiedDate":"2022-10-09"},{"lineNumber":31,"author":{"gitId":"LJXSean"},"content":"     */","lastModifiedDate":"2022-10-09"},{"lineNumber":32,"author":{"gitId":"LJXSean"},"content":"    public JsonAdaptedRecord(Record source) {","lastModifiedDate":"2022-10-09"},{"lineNumber":33,"author":{"gitId":"LJXSean"},"content":"        this.record \u003d source.record;","lastModifiedDate":"2022-10-09"},{"lineNumber":34,"author":{"gitId":"LJXSean"},"content":"        this.recordDate \u003d source.getRecordDate();","lastModifiedDate":"2022-10-09"},{"lineNumber":35,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":36,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":37,"author":{"gitId":"LJXSean"},"content":"    /**","lastModifiedDate":"2022-10-09"},{"lineNumber":38,"author":{"gitId":"LJXSean"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object.","lastModifiedDate":"2022-10-09"},{"lineNumber":39,"author":{"gitId":"LJXSean"},"content":"     *","lastModifiedDate":"2022-10-09"},{"lineNumber":40,"author":{"gitId":"LJXSean"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag.","lastModifiedDate":"2022-10-09"},{"lineNumber":41,"author":{"gitId":"LJXSean"},"content":"     */","lastModifiedDate":"2022-10-09"},{"lineNumber":42,"author":{"gitId":"LJXSean"},"content":"    public Record toModelType() throws IllegalValueException {","lastModifiedDate":"2022-10-09"},{"lineNumber":43,"author":{"gitId":"LJXSean"},"content":"        if (!Record.isValidDate(recordDate)) {","lastModifiedDate":"2022-10-09"},{"lineNumber":44,"author":{"gitId":"LJXSean"},"content":"            throw new IllegalValueException(Record.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-09"},{"lineNumber":45,"author":{"gitId":"LJXSean"},"content":"        }","lastModifiedDate":"2022-10-09"},{"lineNumber":46,"author":{"gitId":"LJXSean"},"content":"        return new Record(recordDate, record);","lastModifiedDate":"2022-10-09"},{"lineNumber":47,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":48,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":49,"author":{"gitId":"LJXSean"},"content":"}","lastModifiedDate":"2022-10-09"}],"authorContributionMap":{"LJXSean":49}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2016-09-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-06-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"LJXSean"},"content":"    private RecordListPanel recordListPanel;","lastModifiedDate":"2022-10-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"LJXSean"},"content":"    @FXML","lastModifiedDate":"2022-10-08"},{"lineNumber":49,"author":{"gitId":"LJXSean"},"content":"    private StackPane recordListPanelPlaceholder;","lastModifiedDate":"2022-10-08"},{"lineNumber":50,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":113,"author":{"gitId":"LJXSean"},"content":"    void showPersonList() {","lastModifiedDate":"2022-10-08"},{"lineNumber":114,"author":{"gitId":"LJXSean"},"content":"        recordListPanel.getRoot().setVisible(false);","lastModifiedDate":"2022-10-08"},{"lineNumber":115,"author":{"gitId":"LJXSean"},"content":"        personListPanel.getRoot().setVisible(true);","lastModifiedDate":"2022-10-08"},{"lineNumber":116,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":117,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":118,"author":{"gitId":"LJXSean"},"content":"    void showRecordList() {","lastModifiedDate":"2022-10-08"},{"lineNumber":119,"author":{"gitId":"LJXSean"},"content":"        recordListPanel.getRoot().setVisible(true);","lastModifiedDate":"2022-10-08"},{"lineNumber":120,"author":{"gitId":"LJXSean"},"content":"        personListPanel.getRoot().setVisible(false);","lastModifiedDate":"2022-10-08"},{"lineNumber":121,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":122,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":123,"author":{"gitId":"LJXSean"},"content":"    void updateRecordList() {","lastModifiedDate":"2022-10-10"},{"lineNumber":124,"author":{"gitId":"LJXSean"},"content":"        personListPanelPlaceholder.getChildren().remove(recordListPanel.getRoot());","lastModifiedDate":"2022-10-10"},{"lineNumber":125,"author":{"gitId":"LJXSean"},"content":"        recordListPanel \u003d new RecordListPanel(logic.getFilteredRecordList());","lastModifiedDate":"2022-10-10"},{"lineNumber":126,"author":{"gitId":"LJXSean"},"content":"        personListPanelPlaceholder.getChildren().add(recordListPanel.getRoot());","lastModifiedDate":"2022-10-10"},{"lineNumber":127,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":132,"author":{"gitId":"LJXSean"},"content":"        recordListPanel \u003d new RecordListPanel(logic.getFilteredRecordList());","lastModifiedDate":"2022-10-08"},{"lineNumber":133,"author":{"gitId":"LJXSean"},"content":"        personListPanelPlaceholder.getChildren().add(recordListPanel.getRoot());","lastModifiedDate":"2022-10-08"},{"lineNumber":134,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());","lastModifiedDate":"2019-01-25"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2019-01-25"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":177,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":178,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {","lastModifiedDate":"2016-08-25"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        return personListPanel;","lastModifiedDate":"2018-08-14"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-25"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":193,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":194,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":195,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)","lastModifiedDate":"2018-12-09"},{"lineNumber":196,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":204,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":208,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":211,"author":{"gitId":"LJXSean"},"content":"            // Controls which list to display","lastModifiedDate":"2022-10-08"},{"lineNumber":212,"author":{"gitId":"LJXSean"},"content":"            if (commandResult.isShowRecords()) {","lastModifiedDate":"2022-10-09"},{"lineNumber":213,"author":{"gitId":"LJXSean"},"content":"                updateRecordList();","lastModifiedDate":"2022-10-10"},{"lineNumber":214,"author":{"gitId":"LJXSean"},"content":"                showRecordList();","lastModifiedDate":"2022-10-08"},{"lineNumber":215,"author":{"gitId":"LJXSean"},"content":"            } else {","lastModifiedDate":"2022-10-08"},{"lineNumber":216,"author":{"gitId":"LJXSean"},"content":"                showPersonList();","lastModifiedDate":"2022-10-08"},{"lineNumber":217,"author":{"gitId":"LJXSean"},"content":"            }","lastModifiedDate":"2022-10-08"},{"lineNumber":218,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":221,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":226,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"LJXSean":30,"-":196}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;","lastModifiedDate":"2019-01-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-01-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";","lastModifiedDate":"2016-09-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public final Person person;","lastModifiedDate":"2018-01-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label phone;","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label address;","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label email;","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private FlowPane tags;","lastModifiedDate":"2016-12-18"},{"lineNumber":43,"author":{"gitId":"marclzh"},"content":"    @FXML","lastModifiedDate":"2022-10-04"},{"lineNumber":44,"author":{"gitId":"marclzh"},"content":"    private Label recordList;","lastModifiedDate":"2022-10-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2020-05-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2018-01-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.person \u003d person;","lastModifiedDate":"2017-07-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);","lastModifiedDate":"2017-12-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        address.setText(person.getAddress().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":57,"author":{"gitId":"marclzh"},"content":"        recordList.setText(person.getRecordList().toString());","lastModifiedDate":"2022-10-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        person.getTags().stream()","lastModifiedDate":"2019-01-02"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2019-01-02"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));","lastModifiedDate":"2019-01-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-07-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-07-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-07-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-07-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-07-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {","lastModifiedDate":"2017-07-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-07-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-07-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;","lastModifiedDate":"2017-07-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2017-07-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);","lastModifiedDate":"2017-07-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"marclzh":3,"-":77}},{"path":"src/main/java/seedu/address/ui/RecordCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LJXSean"},"content":"package seedu.address.ui;","lastModifiedDate":"2022-10-08"},{"lineNumber":2,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":3,"author":{"gitId":"LJXSean"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-10-08"},{"lineNumber":4,"author":{"gitId":"LJXSean"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2022-10-08"},{"lineNumber":5,"author":{"gitId":"LJXSean"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2022-10-08"},{"lineNumber":6,"author":{"gitId":"LJXSean"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2022-10-08"},{"lineNumber":7,"author":{"gitId":"LJXSean"},"content":"import seedu.address.model.person.Record;","lastModifiedDate":"2022-10-08"},{"lineNumber":8,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":9,"author":{"gitId":"LJXSean"},"content":"/**","lastModifiedDate":"2022-10-08"},{"lineNumber":10,"author":{"gitId":"LJXSean"},"content":" * An UI component that displays information of a {@code Record}.","lastModifiedDate":"2022-10-08"},{"lineNumber":11,"author":{"gitId":"LJXSean"},"content":" */","lastModifiedDate":"2022-10-08"},{"lineNumber":12,"author":{"gitId":"LJXSean"},"content":"public class RecordCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2022-10-08"},{"lineNumber":13,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":14,"author":{"gitId":"LJXSean"},"content":"    private static final String FXML \u003d \"RecordListCard.fxml\";","lastModifiedDate":"2022-10-08"},{"lineNumber":15,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":16,"author":{"gitId":"LJXSean"},"content":"    /**","lastModifiedDate":"2022-10-08"},{"lineNumber":17,"author":{"gitId":"LJXSean"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2022-10-08"},{"lineNumber":18,"author":{"gitId":"LJXSean"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2022-10-08"},{"lineNumber":19,"author":{"gitId":"LJXSean"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2022-10-08"},{"lineNumber":20,"author":{"gitId":"LJXSean"},"content":"     *","lastModifiedDate":"2022-10-08"},{"lineNumber":21,"author":{"gitId":"LJXSean"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":22,"author":{"gitId":"LJXSean"},"content":"     */","lastModifiedDate":"2022-10-08"},{"lineNumber":23,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":24,"author":{"gitId":"LJXSean"},"content":"    public final Record record;","lastModifiedDate":"2022-10-08"},{"lineNumber":25,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":26,"author":{"gitId":"LJXSean"},"content":"    @FXML","lastModifiedDate":"2022-10-08"},{"lineNumber":27,"author":{"gitId":"LJXSean"},"content":"    private HBox cardPane;","lastModifiedDate":"2022-10-08"},{"lineNumber":28,"author":{"gitId":"LJXSean"},"content":"    @FXML","lastModifiedDate":"2022-10-08"},{"lineNumber":29,"author":{"gitId":"LJXSean"},"content":"    private Label id;","lastModifiedDate":"2022-10-08"},{"lineNumber":30,"author":{"gitId":"LJXSean"},"content":"    @FXML","lastModifiedDate":"2022-10-08"},{"lineNumber":31,"author":{"gitId":"LJXSean"},"content":"    private Label recordText;","lastModifiedDate":"2022-10-08"},{"lineNumber":32,"author":{"gitId":"LJXSean"},"content":"    @FXML","lastModifiedDate":"2022-10-08"},{"lineNumber":33,"author":{"gitId":"LJXSean"},"content":"    private Label date;","lastModifiedDate":"2022-10-08"},{"lineNumber":34,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":35,"author":{"gitId":"LJXSean"},"content":"    /**","lastModifiedDate":"2022-10-08"},{"lineNumber":36,"author":{"gitId":"LJXSean"},"content":"     * Creates a {@code RecordCode} with the given {@code Record} and index to display.","lastModifiedDate":"2022-10-08"},{"lineNumber":37,"author":{"gitId":"LJXSean"},"content":"     */","lastModifiedDate":"2022-10-08"},{"lineNumber":38,"author":{"gitId":"LJXSean"},"content":"    public RecordCard(Record record, int displayedIndex) {","lastModifiedDate":"2022-10-08"},{"lineNumber":39,"author":{"gitId":"LJXSean"},"content":"        super(FXML);","lastModifiedDate":"2022-10-08"},{"lineNumber":40,"author":{"gitId":"LJXSean"},"content":"        this.record \u003d record;","lastModifiedDate":"2022-10-08"},{"lineNumber":41,"author":{"gitId":"LJXSean"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2022-10-08"},{"lineNumber":42,"author":{"gitId":"LJXSean"},"content":"        recordText.setText(record.record);","lastModifiedDate":"2022-10-08"},{"lineNumber":43,"author":{"gitId":"LJXSean"},"content":"        date.setText(record.getRecordDate());","lastModifiedDate":"2022-10-09"},{"lineNumber":44,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":45,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":46,"author":{"gitId":"LJXSean"},"content":"    @Override","lastModifiedDate":"2022-10-08"},{"lineNumber":47,"author":{"gitId":"LJXSean"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-08"},{"lineNumber":48,"author":{"gitId":"LJXSean"},"content":"        // short circuit if same object","lastModifiedDate":"2022-10-08"},{"lineNumber":49,"author":{"gitId":"LJXSean"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-08"},{"lineNumber":50,"author":{"gitId":"LJXSean"},"content":"            return true;","lastModifiedDate":"2022-10-08"},{"lineNumber":51,"author":{"gitId":"LJXSean"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":52,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":53,"author":{"gitId":"LJXSean"},"content":"        // instanceof handles nulls","lastModifiedDate":"2022-10-08"},{"lineNumber":54,"author":{"gitId":"LJXSean"},"content":"        if (!(other instanceof RecordCard)) {","lastModifiedDate":"2022-10-08"},{"lineNumber":55,"author":{"gitId":"LJXSean"},"content":"            return false;","lastModifiedDate":"2022-10-08"},{"lineNumber":56,"author":{"gitId":"LJXSean"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":57,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":58,"author":{"gitId":"LJXSean"},"content":"        // state check","lastModifiedDate":"2022-10-08"},{"lineNumber":59,"author":{"gitId":"LJXSean"},"content":"        RecordCard card \u003d (RecordCard) other;","lastModifiedDate":"2022-10-08"},{"lineNumber":60,"author":{"gitId":"LJXSean"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2022-10-08"},{"lineNumber":61,"author":{"gitId":"LJXSean"},"content":"                \u0026\u0026 record.equals(card.record);","lastModifiedDate":"2022-10-08"},{"lineNumber":62,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":63,"author":{"gitId":"LJXSean"},"content":"}","lastModifiedDate":"2022-10-08"}],"authorContributionMap":{"LJXSean":63}},{"path":"src/main/java/seedu/address/ui/RecordListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LJXSean"},"content":"package seedu.address.ui;","lastModifiedDate":"2022-10-08"},{"lineNumber":2,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":3,"author":{"gitId":"LJXSean"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2022-10-08"},{"lineNumber":4,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":5,"author":{"gitId":"LJXSean"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-10-08"},{"lineNumber":6,"author":{"gitId":"LJXSean"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-10-08"},{"lineNumber":7,"author":{"gitId":"LJXSean"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2022-10-08"},{"lineNumber":8,"author":{"gitId":"LJXSean"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2022-10-08"},{"lineNumber":9,"author":{"gitId":"LJXSean"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2022-10-08"},{"lineNumber":10,"author":{"gitId":"LJXSean"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2022-10-08"},{"lineNumber":11,"author":{"gitId":"LJXSean"},"content":"import seedu.address.model.person.Record;","lastModifiedDate":"2022-10-08"},{"lineNumber":12,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":13,"author":{"gitId":"LJXSean"},"content":"/**","lastModifiedDate":"2022-10-08"},{"lineNumber":14,"author":{"gitId":"LJXSean"},"content":" * Panel containing the list of Records.","lastModifiedDate":"2022-10-08"},{"lineNumber":15,"author":{"gitId":"LJXSean"},"content":" */","lastModifiedDate":"2022-10-08"},{"lineNumber":16,"author":{"gitId":"LJXSean"},"content":"public class RecordListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2022-10-08"},{"lineNumber":17,"author":{"gitId":"LJXSean"},"content":"    private static final String FXML \u003d \"RecordListPanel.fxml\";","lastModifiedDate":"2022-10-08"},{"lineNumber":18,"author":{"gitId":"LJXSean"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(RecordListPanel.class);","lastModifiedDate":"2022-10-08"},{"lineNumber":19,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":20,"author":{"gitId":"LJXSean"},"content":"    @FXML","lastModifiedDate":"2022-10-08"},{"lineNumber":21,"author":{"gitId":"LJXSean"},"content":"    private ListView\u003cRecord\u003e recordListView;","lastModifiedDate":"2022-10-08"},{"lineNumber":22,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":23,"author":{"gitId":"LJXSean"},"content":"    /**","lastModifiedDate":"2022-10-08"},{"lineNumber":24,"author":{"gitId":"LJXSean"},"content":"     * Creates a {@code RecordListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2022-10-08"},{"lineNumber":25,"author":{"gitId":"LJXSean"},"content":"     */","lastModifiedDate":"2022-10-08"},{"lineNumber":26,"author":{"gitId":"LJXSean"},"content":"    public RecordListPanel(ObservableList\u003cRecord\u003e recordList) {","lastModifiedDate":"2022-10-08"},{"lineNumber":27,"author":{"gitId":"LJXSean"},"content":"        super(FXML);","lastModifiedDate":"2022-10-08"},{"lineNumber":28,"author":{"gitId":"LJXSean"},"content":"        recordListView.setItems(recordList);","lastModifiedDate":"2022-10-08"},{"lineNumber":29,"author":{"gitId":"EiffelLKF"},"content":"        recordListView.setCellFactory(listView -\u003e new RecordListViewCell());","lastModifiedDate":"2022-10-10"},{"lineNumber":30,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":31,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":32,"author":{"gitId":"LJXSean"},"content":"    /**","lastModifiedDate":"2022-10-08"},{"lineNumber":33,"author":{"gitId":"LJXSean"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Record} using a {@code RecordCard}.","lastModifiedDate":"2022-10-08"},{"lineNumber":34,"author":{"gitId":"LJXSean"},"content":"     */","lastModifiedDate":"2022-10-08"},{"lineNumber":35,"author":{"gitId":"EiffelLKF"},"content":"    class RecordListViewCell extends ListCell\u003cRecord\u003e {","lastModifiedDate":"2022-10-10"},{"lineNumber":36,"author":{"gitId":"LJXSean"},"content":"        @Override","lastModifiedDate":"2022-10-08"},{"lineNumber":37,"author":{"gitId":"LJXSean"},"content":"        protected void updateItem(Record record, boolean empty) {","lastModifiedDate":"2022-10-08"},{"lineNumber":38,"author":{"gitId":"LJXSean"},"content":"            super.updateItem(record, empty);","lastModifiedDate":"2022-10-08"},{"lineNumber":39,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":40,"author":{"gitId":"LJXSean"},"content":"            if (empty || record \u003d\u003d null) {","lastModifiedDate":"2022-10-08"},{"lineNumber":41,"author":{"gitId":"LJXSean"},"content":"                setGraphic(null);","lastModifiedDate":"2022-10-08"},{"lineNumber":42,"author":{"gitId":"LJXSean"},"content":"                setText(null);","lastModifiedDate":"2022-10-08"},{"lineNumber":43,"author":{"gitId":"LJXSean"},"content":"            } else {","lastModifiedDate":"2022-10-08"},{"lineNumber":44,"author":{"gitId":"LJXSean"},"content":"                setGraphic(new RecordCard(record, getIndex() + 1).getRoot());","lastModifiedDate":"2022-10-08"},{"lineNumber":45,"author":{"gitId":"LJXSean"},"content":"            }","lastModifiedDate":"2022-10-08"},{"lineNumber":46,"author":{"gitId":"LJXSean"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":47,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":48,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":49,"author":{"gitId":"LJXSean"},"content":"}","lastModifiedDate":"2022-10-08"}],"authorContributionMap":{"LJXSean":47,"EiffelLKF":2}},{"path":"src/main/java/seedu/address/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Platform;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;","lastModifiedDate":"2016-08-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.MainApp;","lastModifiedDate":"2016-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The manager of the UI component.","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";","lastModifiedDate":"2017-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/OmniHealth_logo.png\";","lastModifiedDate":"2022-10-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        //Set the application icon.","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));","lastModifiedDate":"2016-08-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {","lastModifiedDate":"2016-08-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);","lastModifiedDate":"2016-08-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters.","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                                               String contentText) {","lastModifiedDate":"2016-08-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);","lastModifiedDate":"2016-08-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");","lastModifiedDate":"2016-08-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        alert.setTitle(title);","lastModifiedDate":"2016-08-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);","lastModifiedDate":"2016-08-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);","lastModifiedDate":"2016-10-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        alert.showAndWait();","lastModifiedDate":"2016-08-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {","lastModifiedDate":"2016-09-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());","lastModifiedDate":"2016-08-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        Platform.exit();","lastModifiedDate":"2016-08-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        System.exit(1);","lastModifiedDate":"2016-08-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"marclzh":1,"-":87}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2017-11-29"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"         title\u003d\"OmniHealth\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e","lastModifiedDate":"2022-10-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"    \u003cImage url\u003d\"@/images/OmniHealth_logo.png\" /\u003e","lastModifiedDate":"2022-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e","lastModifiedDate":"2016-08-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2017-06-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\"","lastModifiedDate":"2017-05-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2019-01-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2017-06-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"marclzh":2,"-":58}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"marclzh"},"content":"      \u003cLabel fx:id\u003d\"recordList\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$recordCount\" /\u003e","lastModifiedDate":"2022-10-04"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"marclzh":1,"-":36}},{"path":"src/main/resources/view/RecordListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LJXSean"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":2,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":3,"author":{"gitId":"LJXSean"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":4,"author":{"gitId":"LJXSean"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":5,"author":{"gitId":"LJXSean"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":6,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":7,"author":{"gitId":"LJXSean"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":8,"author":{"gitId":"LJXSean"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":9,"author":{"gitId":"LJXSean"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":10,"author":{"gitId":"LJXSean"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":11,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":12,"author":{"gitId":"LJXSean"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":13,"author":{"gitId":"LJXSean"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":14,"author":{"gitId":"LJXSean"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":15,"author":{"gitId":"LJXSean"},"content":"        \u003ccolumnConstraints\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":16,"author":{"gitId":"LJXSean"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":17,"author":{"gitId":"LJXSean"},"content":"        \u003c/columnConstraints\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":18,"author":{"gitId":"LJXSean"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":19,"author":{"gitId":"LJXSean"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":20,"author":{"gitId":"LJXSean"},"content":"                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":21,"author":{"gitId":"LJXSean"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":22,"author":{"gitId":"LJXSean"},"content":"            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":23,"author":{"gitId":"LJXSean"},"content":"                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":24,"author":{"gitId":"LJXSean"},"content":"                    \u003cminWidth\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":25,"author":{"gitId":"LJXSean"},"content":"                        \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":26,"author":{"gitId":"LJXSean"},"content":"                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":27,"author":{"gitId":"LJXSean"},"content":"                    \u003c/minWidth\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":28,"author":{"gitId":"LJXSean"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":29,"author":{"gitId":"LJXSean"},"content":"                \u003cLabel fx:id\u003d\"date\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":30,"author":{"gitId":"LJXSean"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":31,"author":{"gitId":"LJXSean"},"content":"            \u003cLabel fx:id\u003d\"recordText\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":32,"author":{"gitId":"LJXSean"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":33,"author":{"gitId":"LJXSean"},"content":"    \u003c/GridPane\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":34,"author":{"gitId":"LJXSean"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2022-10-08"}],"authorContributionMap":{"LJXSean":34}},{"path":"src/main/resources/view/RecordListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"LJXSean"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":2,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":3,"author":{"gitId":"LJXSean"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":4,"author":{"gitId":"LJXSean"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":5,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":6,"author":{"gitId":"LJXSean"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":7,"author":{"gitId":"LJXSean"},"content":"    \u003cListView fx:id\u003d\"recordListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":8,"author":{"gitId":"LJXSean"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2022-10-08"}],"authorContributionMap":{"LJXSean":8}},{"path":"src/test/java/seedu/address/commons/util/AppUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2016-09-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class AppUtilTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public void getImage_exitingImage() {","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"        assertNotNull(AppUtil.getImage(\"/images/OmniHealth_logo.png\"));","lastModifiedDate":"2022-10-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void checkArgument_true_nothingHappens() {","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true);","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true, \"\");","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String errorMessage \u003d \"error message\";","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"marclzh":1,"-":35}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-05-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-05-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-12"},{"lineNumber":24,"author":{"gitId":"LJXSean"},"content":"import seedu.address.model.person.Record;","lastModifiedDate":"2022-10-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class AddCommandTest {","lastModifiedDate":"2017-05-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);","lastModifiedDate":"2019-01-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);","lastModifiedDate":"2017-05-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2019-05-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);","lastModifiedDate":"2017-06-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2018-11-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-12"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2018-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":142,"author":{"gitId":"EiffelLKF"},"content":"        @Override","lastModifiedDate":"2022-10-10"},{"lineNumber":143,"author":{"gitId":"EiffelLKF"},"content":"        public boolean hasRecord(Record record) {","lastModifiedDate":"2022-10-10"},{"lineNumber":144,"author":{"gitId":"EiffelLKF"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-10"},{"lineNumber":145,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-10"},{"lineNumber":146,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":147,"author":{"gitId":"EiffelLKF"},"content":"        @Override","lastModifiedDate":"2022-10-10"},{"lineNumber":148,"author":{"gitId":"EiffelLKF"},"content":"        public void addRecord(Record record) {","lastModifiedDate":"2022-10-10"},{"lineNumber":149,"author":{"gitId":"EiffelLKF"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-10"},{"lineNumber":150,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-10"},{"lineNumber":151,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":161,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":162,"author":{"gitId":"anthonyhoth"},"content":"        @Override","lastModifiedDate":"2022-10-10"},{"lineNumber":163,"author":{"gitId":"anthonyhoth"},"content":"        public void deleteRecord(Record record) {","lastModifiedDate":"2022-10-10"},{"lineNumber":164,"author":{"gitId":"anthonyhoth"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-10"},{"lineNumber":165,"author":{"gitId":"anthonyhoth"},"content":"        }","lastModifiedDate":"2022-10-10"},{"lineNumber":166,"author":{"gitId":"anthonyhoth"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":167,"author":{"gitId":"LJXSean"},"content":"        @Override","lastModifiedDate":"2022-10-08"},{"lineNumber":168,"author":{"gitId":"LJXSean"},"content":"        public ObservableList\u003cRecord\u003e getFilteredRecordList() {","lastModifiedDate":"2022-10-08"},{"lineNumber":169,"author":{"gitId":"LJXSean"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-08"},{"lineNumber":170,"author":{"gitId":"LJXSean"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":171,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":172,"author":{"gitId":"LJXSean"},"content":"        @Override","lastModifiedDate":"2022-10-08"},{"lineNumber":173,"author":{"gitId":"LJXSean"},"content":"        public void updateFilteredRecordList(Predicate\u003cRecord\u003e predicate) {","lastModifiedDate":"2022-10-08"},{"lineNumber":174,"author":{"gitId":"LJXSean"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-08"},{"lineNumber":175,"author":{"gitId":"LJXSean"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":176,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":177,"author":{"gitId":"marclzh"},"content":"        @Override","lastModifiedDate":"2022-10-10"},{"lineNumber":178,"author":{"gitId":"marclzh"},"content":"        public void clearRecords() {","lastModifiedDate":"2022-10-10"},{"lineNumber":179,"author":{"gitId":"marclzh"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-10"},{"lineNumber":180,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-10-10"},{"lineNumber":181,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":182,"author":{"gitId":"EiffelLKF"},"content":"        @Override","lastModifiedDate":"2022-10-11"},{"lineNumber":183,"author":{"gitId":"hanwenlai"},"content":"        public void setFilteredRecordList(Person person) {","lastModifiedDate":"2022-10-10"},{"lineNumber":184,"author":{"gitId":"hanwenlai"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-10"},{"lineNumber":185,"author":{"gitId":"hanwenlai"},"content":"        }","lastModifiedDate":"2022-10-10"},{"lineNumber":186,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":187,"author":{"gitId":"EiffelLKF"},"content":"        @Override","lastModifiedDate":"2022-10-11"},{"lineNumber":188,"author":{"gitId":"EiffelLKF"},"content":"        public void setRecordListDisplayed(boolean b) {","lastModifiedDate":"2022-10-11"},{"lineNumber":189,"author":{"gitId":"EiffelLKF"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-11"},{"lineNumber":190,"author":{"gitId":"EiffelLKF"},"content":"        };","lastModifiedDate":"2022-10-11"},{"lineNumber":191,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":192,"author":{"gitId":"EiffelLKF"},"content":"        @Override","lastModifiedDate":"2022-10-11"},{"lineNumber":193,"author":{"gitId":"EiffelLKF"},"content":"        public boolean isRecordListDisplayed() {","lastModifiedDate":"2022-10-11"},{"lineNumber":194,"author":{"gitId":"EiffelLKF"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-11"},{"lineNumber":195,"author":{"gitId":"EiffelLKF"},"content":"        }","lastModifiedDate":"2022-10-11"},{"lineNumber":196,"author":{"gitId":"EiffelLKF"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":197,"author":{"gitId":"EiffelLKF"},"content":"        @Override","lastModifiedDate":"2022-10-11"},{"lineNumber":198,"author":{"gitId":"EiffelLKF"},"content":"        public void setPersonWithRecords(Person person) {","lastModifiedDate":"2022-10-11"},{"lineNumber":199,"author":{"gitId":"EiffelLKF"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-11"},{"lineNumber":200,"author":{"gitId":"EiffelLKF"},"content":"        };","lastModifiedDate":"2022-10-11"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":204,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":205,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2018-08-07"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2018-08-07"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2018-08-07"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":222,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":223,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2017-05-12"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":229,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":230,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-08"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":236,"author":{"gitId":"-"},"content":"            personsAdded.add(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-04"},{"lineNumber":241,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2017-05-04"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":244,"author":{"gitId":"EiffelLKF"},"content":"        @Override","lastModifiedDate":"2022-10-11"},{"lineNumber":245,"author":{"gitId":"EiffelLKF"},"content":"        public boolean isRecordListDisplayed() {","lastModifiedDate":"2022-10-11"},{"lineNumber":246,"author":{"gitId":"EiffelLKF"},"content":"            return false;","lastModifiedDate":"2022-10-11"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":250,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-10-11"}],"authorContributionMap":{"anthonyhoth":5,"marclzh":6,"hanwenlai":3,"LJXSean":11,"EiffelLKF":29,"-":196}},{"path":"src/test/java/seedu/address/logic/commands/ClearRecordCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"marclzh"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-12"},{"lineNumber":2,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":3,"author":{"gitId":"marclzh"},"content":"import static seedu.address.logic.commands.Command.MESSAGE_RECORD_COMMAND_PREREQUISITE;","lastModifiedDate":"2022-10-12"},{"lineNumber":4,"author":{"gitId":"marclzh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-10-12"},{"lineNumber":5,"author":{"gitId":"marclzh"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-12"},{"lineNumber":6,"author":{"gitId":"marclzh"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2022-10-12"},{"lineNumber":7,"author":{"gitId":"marclzh"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2022-10-12"},{"lineNumber":8,"author":{"gitId":"marclzh"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-12"},{"lineNumber":9,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":10,"author":{"gitId":"marclzh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-12"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-12"},{"lineNumber":13,"author":{"gitId":"marclzh"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-10-12"},{"lineNumber":14,"author":{"gitId":"marclzh"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-10-12"},{"lineNumber":15,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":16,"author":{"gitId":"marclzh"},"content":"class ClearRecordCommandTest {","lastModifiedDate":"2022-10-12"},{"lineNumber":17,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":18,"author":{"gitId":"marclzh"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":19,"author":{"gitId":"marclzh"},"content":"    public void execute_clearEmptyRecordsWithoutListing_failure() {","lastModifiedDate":"2022-10-12"},{"lineNumber":20,"author":{"gitId":"marclzh"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2022-10-12"},{"lineNumber":21,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":22,"author":{"gitId":"marclzh"},"content":"        assertCommandFailure(new ClearRecordCommand(), model, MESSAGE_RECORD_COMMAND_PREREQUISITE);","lastModifiedDate":"2022-10-12"},{"lineNumber":23,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":24,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":25,"author":{"gitId":"marclzh"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":26,"author":{"gitId":"marclzh"},"content":"    public void execute_clearRecordsWithoutListing_failure() {","lastModifiedDate":"2022-10-12"},{"lineNumber":27,"author":{"gitId":"marclzh"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-12"},{"lineNumber":28,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":29,"author":{"gitId":"marclzh"},"content":"        assertCommandFailure(new ClearRecordCommand(), model, MESSAGE_RECORD_COMMAND_PREREQUISITE);","lastModifiedDate":"2022-10-12"},{"lineNumber":30,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":31,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":32,"author":{"gitId":"marclzh"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":33,"author":{"gitId":"marclzh"},"content":"    public void execute_clearRecords_success() {","lastModifiedDate":"2022-10-12"},{"lineNumber":34,"author":{"gitId":"marclzh"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-12"},{"lineNumber":35,"author":{"gitId":"marclzh"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-12"},{"lineNumber":36,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":37,"author":{"gitId":"marclzh"},"content":"        model.setFilteredRecordList(BENSON);","lastModifiedDate":"2022-10-12"},{"lineNumber":38,"author":{"gitId":"marclzh"},"content":"        model.setRecordListDisplayed(true);","lastModifiedDate":"2022-10-12"},{"lineNumber":39,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":40,"author":{"gitId":"marclzh"},"content":"        expectedModel.setFilteredRecordList(BENSON);","lastModifiedDate":"2022-10-12"},{"lineNumber":41,"author":{"gitId":"marclzh"},"content":"        expectedModel.setRecordListDisplayed(true);","lastModifiedDate":"2022-10-12"},{"lineNumber":42,"author":{"gitId":"marclzh"},"content":"        expectedModel.clearRecords();","lastModifiedDate":"2022-10-12"},{"lineNumber":43,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":44,"author":{"gitId":"marclzh"},"content":"        assertCommandSuccess(new ClearRecordCommand(), model, ClearRecordCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2022-10-12"},{"lineNumber":45,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":46,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":47,"author":{"gitId":"marclzh"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":48,"author":{"gitId":"marclzh"},"content":"    public void execute_clearRecordsEmptyRecords_success() {","lastModifiedDate":"2022-10-12"},{"lineNumber":49,"author":{"gitId":"marclzh"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-12"},{"lineNumber":50,"author":{"gitId":"marclzh"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-12"},{"lineNumber":51,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":52,"author":{"gitId":"marclzh"},"content":"        model.setFilteredRecordList(ALICE);","lastModifiedDate":"2022-10-12"},{"lineNumber":53,"author":{"gitId":"marclzh"},"content":"        model.setRecordListDisplayed(true);","lastModifiedDate":"2022-10-12"},{"lineNumber":54,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":55,"author":{"gitId":"marclzh"},"content":"        expectedModel.setFilteredRecordList(ALICE);","lastModifiedDate":"2022-10-12"},{"lineNumber":56,"author":{"gitId":"marclzh"},"content":"        expectedModel.setRecordListDisplayed(true);","lastModifiedDate":"2022-10-12"},{"lineNumber":57,"author":{"gitId":"marclzh"},"content":"        expectedModel.clearRecords();","lastModifiedDate":"2022-10-12"},{"lineNumber":58,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":59,"author":{"gitId":"marclzh"},"content":"        assertCommandSuccess(new ClearRecordCommand(), model, ClearRecordCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2022-10-12"},{"lineNumber":60,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":61,"author":{"gitId":"marclzh"},"content":"}","lastModifiedDate":"2022-10-12"}],"authorContributionMap":{"marclzh":61}},{"path":"src/test/java/seedu/address/logic/commands/FindRecordCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"LJXSean"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-12"},{"lineNumber":2,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":3,"author":{"gitId":"LJXSean"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-10-12"},{"lineNumber":4,"author":{"gitId":"LJXSean"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-12"},{"lineNumber":5,"author":{"gitId":"LJXSean"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-12"},{"lineNumber":6,"author":{"gitId":"LJXSean"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_RECORDS_LISTED_OVERVIEW;","lastModifiedDate":"2022-10-12"},{"lineNumber":7,"author":{"gitId":"LJXSean"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-12"},{"lineNumber":8,"author":{"gitId":"LJXSean"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2022-10-12"},{"lineNumber":9,"author":{"gitId":"LJXSean"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-12"},{"lineNumber":10,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":11,"author":{"gitId":"LJXSean"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-12"},{"lineNumber":12,"author":{"gitId":"LJXSean"},"content":"import java.util.Collections;","lastModifiedDate":"2022-10-12"},{"lineNumber":13,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":14,"author":{"gitId":"LJXSean"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-12"},{"lineNumber":15,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":16,"author":{"gitId":"LJXSean"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-12"},{"lineNumber":17,"author":{"gitId":"LJXSean"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-10-12"},{"lineNumber":18,"author":{"gitId":"LJXSean"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-10-12"},{"lineNumber":19,"author":{"gitId":"LJXSean"},"content":"import seedu.address.model.person.RecordContainsKeywordsPredicate;","lastModifiedDate":"2022-10-12"},{"lineNumber":20,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":21,"author":{"gitId":"LJXSean"},"content":"/**","lastModifiedDate":"2022-10-12"},{"lineNumber":22,"author":{"gitId":"LJXSean"},"content":" * Contains integration tests (interaction with the Model) for {@code FindRecordCommand}.","lastModifiedDate":"2022-10-12"},{"lineNumber":23,"author":{"gitId":"LJXSean"},"content":" */","lastModifiedDate":"2022-10-12"},{"lineNumber":24,"author":{"gitId":"LJXSean"},"content":"public class FindRecordCommandTest {","lastModifiedDate":"2022-10-12"},{"lineNumber":25,"author":{"gitId":"LJXSean"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-12"},{"lineNumber":26,"author":{"gitId":"LJXSean"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-12"},{"lineNumber":27,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":28,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":29,"author":{"gitId":"LJXSean"},"content":"    public void equals() {","lastModifiedDate":"2022-10-12"},{"lineNumber":30,"author":{"gitId":"LJXSean"},"content":"        RecordContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2022-10-12"},{"lineNumber":31,"author":{"gitId":"LJXSean"},"content":"                new RecordContainsKeywordsPredicate(Collections.singletonList(\"Covid-19\"));","lastModifiedDate":"2022-10-12"},{"lineNumber":32,"author":{"gitId":"LJXSean"},"content":"        RecordContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2022-10-12"},{"lineNumber":33,"author":{"gitId":"LJXSean"},"content":"                new RecordContainsKeywordsPredicate(Collections.singletonList(\"cold\"));","lastModifiedDate":"2022-10-12"},{"lineNumber":34,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":35,"author":{"gitId":"LJXSean"},"content":"        FindRecordCommand findFirstCommand \u003d new FindRecordCommand(firstPredicate);","lastModifiedDate":"2022-10-12"},{"lineNumber":36,"author":{"gitId":"LJXSean"},"content":"        FindRecordCommand findSecondCommand \u003d new FindRecordCommand(secondPredicate);","lastModifiedDate":"2022-10-12"},{"lineNumber":37,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":38,"author":{"gitId":"LJXSean"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-10-12"},{"lineNumber":39,"author":{"gitId":"LJXSean"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2022-10-12"},{"lineNumber":40,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":41,"author":{"gitId":"LJXSean"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-10-12"},{"lineNumber":42,"author":{"gitId":"LJXSean"},"content":"        FindRecordCommand findFirstCommandCopy \u003d new FindRecordCommand(firstPredicate);","lastModifiedDate":"2022-10-12"},{"lineNumber":43,"author":{"gitId":"LJXSean"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2022-10-12"},{"lineNumber":44,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":45,"author":{"gitId":"LJXSean"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2022-10-12"},{"lineNumber":46,"author":{"gitId":"LJXSean"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2022-10-12"},{"lineNumber":47,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":48,"author":{"gitId":"LJXSean"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-10-12"},{"lineNumber":49,"author":{"gitId":"LJXSean"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2022-10-12"},{"lineNumber":50,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":51,"author":{"gitId":"LJXSean"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2022-10-12"},{"lineNumber":52,"author":{"gitId":"LJXSean"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2022-10-12"},{"lineNumber":53,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":54,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":55,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":56,"author":{"gitId":"LJXSean"},"content":"    public void execute_zeroKeywords_noRecordFound() {","lastModifiedDate":"2022-10-12"},{"lineNumber":57,"author":{"gitId":"LJXSean"},"content":"        prepareModel();","lastModifiedDate":"2022-10-12"},{"lineNumber":58,"author":{"gitId":"LJXSean"},"content":"        String expectedMessage \u003d String.format(MESSAGE_RECORDS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2022-10-12"},{"lineNumber":59,"author":{"gitId":"LJXSean"},"content":"        RecordContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2022-10-12"},{"lineNumber":60,"author":{"gitId":"LJXSean"},"content":"        FindRecordCommand command \u003d new FindRecordCommand(predicate);","lastModifiedDate":"2022-10-12"},{"lineNumber":61,"author":{"gitId":"LJXSean"},"content":"        expectedModel.updateFilteredRecordList(predicate);","lastModifiedDate":"2022-10-12"},{"lineNumber":62,"author":{"gitId":"LJXSean"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-12"},{"lineNumber":63,"author":{"gitId":"LJXSean"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredRecordList());","lastModifiedDate":"2022-10-12"},{"lineNumber":64,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":65,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":66,"author":{"gitId":"marclzh"},"content":"    /*","lastModifiedDate":"2022-10-12"},{"lineNumber":67,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":68,"author":{"gitId":"LJXSean"},"content":"    public void execute_multipleKeywords_multipleRecordsFound() {","lastModifiedDate":"2022-10-12"},{"lineNumber":69,"author":{"gitId":"LJXSean"},"content":"        prepareModel();","lastModifiedDate":"2022-10-12"},{"lineNumber":70,"author":{"gitId":"LJXSean"},"content":"        String expectedMessage \u003d String.format(MESSAGE_RECORDS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2022-10-12"},{"lineNumber":71,"author":{"gitId":"LJXSean"},"content":"        RecordContainsKeywordsPredicate predicate \u003d preparePredicate(\"Cold Covid-19 SARS\");","lastModifiedDate":"2022-10-12"},{"lineNumber":72,"author":{"gitId":"LJXSean"},"content":"        FindRecordCommand command \u003d new FindRecordCommand(predicate);","lastModifiedDate":"2022-10-12"},{"lineNumber":73,"author":{"gitId":"LJXSean"},"content":"        expectedModel.updateFilteredRecordList(predicate);","lastModifiedDate":"2022-10-12"},{"lineNumber":74,"author":{"gitId":"LJXSean"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-12"},{"lineNumber":75,"author":{"gitId":"LJXSean"},"content":"        assertEquals(Arrays.asList(RECORD1, RECORD2, RECORD3), model.getFilteredRecordList());","lastModifiedDate":"2022-10-12"},{"lineNumber":76,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":77,"author":{"gitId":"marclzh"},"content":"    */","lastModifiedDate":"2022-10-12"},{"lineNumber":78,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":79,"author":{"gitId":"LJXSean"},"content":"    /**","lastModifiedDate":"2022-10-12"},{"lineNumber":80,"author":{"gitId":"LJXSean"},"content":"     * Parses {@code userInput} into a {@code RecordContainsKeywordsPredicate}.","lastModifiedDate":"2022-10-12"},{"lineNumber":81,"author":{"gitId":"LJXSean"},"content":"     */","lastModifiedDate":"2022-10-12"},{"lineNumber":82,"author":{"gitId":"LJXSean"},"content":"    private RecordContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2022-10-12"},{"lineNumber":83,"author":{"gitId":"LJXSean"},"content":"        return new RecordContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2022-10-12"},{"lineNumber":84,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":85,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":86,"author":{"gitId":"LJXSean"},"content":"    private void prepareModel() {","lastModifiedDate":"2022-10-12"},{"lineNumber":87,"author":{"gitId":"LJXSean"},"content":"        model.setFilteredRecordList(BENSON);","lastModifiedDate":"2022-10-12"},{"lineNumber":88,"author":{"gitId":"LJXSean"},"content":"        model.setRecordListDisplayed(true);","lastModifiedDate":"2022-10-12"},{"lineNumber":89,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":90,"author":{"gitId":"LJXSean"},"content":"}","lastModifiedDate":"2022-10-12"}],"authorContributionMap":{"marclzh":2,"LJXSean":88}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-06-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-06-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"LJXSean"},"content":"import seedu.address.logic.commands.FindRecordCommand;","lastModifiedDate":"2022-10-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-27"},{"lineNumber":29,"author":{"gitId":"LJXSean"},"content":"import seedu.address.model.person.RecordContainsKeywordsPredicate;","lastModifiedDate":"2022-10-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;","lastModifiedDate":"2017-06-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {","lastModifiedDate":"2017-07-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();","lastModifiedDate":"2017-07-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2018-03-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2017-06-12"},{"lineNumber":79,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":80,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":81,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":82,"author":{"gitId":"LJXSean"},"content":"    public void parseCommand_findR() throws Exception {","lastModifiedDate":"2022-10-12"},{"lineNumber":83,"author":{"gitId":"LJXSean"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2022-10-12"},{"lineNumber":84,"author":{"gitId":"LJXSean"},"content":"        FindRecordCommand command \u003d (FindRecordCommand) parser.parseCommand(","lastModifiedDate":"2022-10-12"},{"lineNumber":85,"author":{"gitId":"LJXSean"},"content":"                FindRecordCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2022-10-12"},{"lineNumber":86,"author":{"gitId":"LJXSean"},"content":"        assertEquals(new FindRecordCommand(new RecordContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2022-10-12"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"LJXSean":10,"-":101}},{"path":"src/test/java/seedu/address/logic/parser/FindRecordCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"LJXSean"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-12"},{"lineNumber":2,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":3,"author":{"gitId":"LJXSean"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-12"},{"lineNumber":4,"author":{"gitId":"LJXSean"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-10-12"},{"lineNumber":5,"author":{"gitId":"LJXSean"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-10-12"},{"lineNumber":6,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":7,"author":{"gitId":"LJXSean"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-12"},{"lineNumber":8,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":9,"author":{"gitId":"LJXSean"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-12"},{"lineNumber":10,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":11,"author":{"gitId":"LJXSean"},"content":"import seedu.address.logic.commands.FindRecordCommand;","lastModifiedDate":"2022-10-12"},{"lineNumber":12,"author":{"gitId":"LJXSean"},"content":"import seedu.address.model.person.RecordContainsKeywordsPredicate;","lastModifiedDate":"2022-10-12"},{"lineNumber":13,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":14,"author":{"gitId":"LJXSean"},"content":"public class FindRecordCommandParserTest {","lastModifiedDate":"2022-10-12"},{"lineNumber":15,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":16,"author":{"gitId":"LJXSean"},"content":"    private FindRecordCommandParser parser \u003d new FindRecordCommandParser();","lastModifiedDate":"2022-10-12"},{"lineNumber":17,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":18,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":19,"author":{"gitId":"LJXSean"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2022-10-12"},{"lineNumber":20,"author":{"gitId":"LJXSean"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2022-10-12"},{"lineNumber":21,"author":{"gitId":"LJXSean"},"content":"                FindRecordCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-12"},{"lineNumber":22,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":23,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":24,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":25,"author":{"gitId":"LJXSean"},"content":"    public void parse_validArgs_returnsFindRecordCommand() {","lastModifiedDate":"2022-10-12"},{"lineNumber":26,"author":{"gitId":"LJXSean"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2022-10-12"},{"lineNumber":27,"author":{"gitId":"LJXSean"},"content":"        FindRecordCommand expectedFindRecordCommand \u003d","lastModifiedDate":"2022-10-12"},{"lineNumber":28,"author":{"gitId":"LJXSean"},"content":"                new FindRecordCommand(new RecordContainsKeywordsPredicate(Arrays.asList(\"flu\", \"cold\")));","lastModifiedDate":"2022-10-12"},{"lineNumber":29,"author":{"gitId":"LJXSean"},"content":"        assertParseSuccess(parser, \"flu cold\", expectedFindRecordCommand);","lastModifiedDate":"2022-10-12"},{"lineNumber":30,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":31,"author":{"gitId":"LJXSean"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2022-10-12"},{"lineNumber":32,"author":{"gitId":"LJXSean"},"content":"        assertParseSuccess(parser, \" \\n flu \\n \\t cold  \\t\", expectedFindRecordCommand);","lastModifiedDate":"2022-10-12"},{"lineNumber":33,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":34,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":35,"author":{"gitId":"LJXSean"},"content":"}","lastModifiedDate":"2022-10-12"}],"authorContributionMap":{"LJXSean":35}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2017-05-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2017-07-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;","lastModifiedDate":"2017-05-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2018-12-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":96,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":97,"author":{"gitId":"LJXSean"},"content":"    public void getFilteredRecordList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2022-10-12"},{"lineNumber":98,"author":{"gitId":"LJXSean"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredRecordList().remove(0));","lastModifiedDate":"2022-10-12"},{"lineNumber":99,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":100,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();","lastModifiedDate":"2017-07-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2018-08-06"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2017-05-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-19"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2017-06-12"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2018-08-09"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));","lastModifiedDate":"2018-11-27"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"LJXSean":5,"-":132}},{"path":"src/test/java/seedu/address/model/person/RecordContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"LJXSean"},"content":"package seedu.address.model.person;","lastModifiedDate":"2022-10-12"},{"lineNumber":2,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":3,"author":{"gitId":"LJXSean"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-12"},{"lineNumber":4,"author":{"gitId":"LJXSean"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-12"},{"lineNumber":5,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":6,"author":{"gitId":"LJXSean"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-12"},{"lineNumber":7,"author":{"gitId":"LJXSean"},"content":"import java.util.Collections;","lastModifiedDate":"2022-10-12"},{"lineNumber":8,"author":{"gitId":"LJXSean"},"content":"import java.util.List;","lastModifiedDate":"2022-10-12"},{"lineNumber":9,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":10,"author":{"gitId":"LJXSean"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-12"},{"lineNumber":11,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":12,"author":{"gitId":"LJXSean"},"content":"public class RecordContainsKeywordsPredicateTest {","lastModifiedDate":"2022-10-12"},{"lineNumber":13,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":14,"author":{"gitId":"LJXSean"},"content":"    private Record recordWithKeywords \u003d new Record(\"10-10-2000 1400\", \"Covid-19 Flu SARS\");","lastModifiedDate":"2022-10-12"},{"lineNumber":15,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":16,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":17,"author":{"gitId":"LJXSean"},"content":"    public void equals() {","lastModifiedDate":"2022-10-12"},{"lineNumber":18,"author":{"gitId":"LJXSean"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2022-10-12"},{"lineNumber":19,"author":{"gitId":"LJXSean"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2022-10-12"},{"lineNumber":20,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":21,"author":{"gitId":"LJXSean"},"content":"        RecordContainsKeywordsPredicate firstPredicate \u003d new RecordContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2022-10-12"},{"lineNumber":22,"author":{"gitId":"LJXSean"},"content":"        RecordContainsKeywordsPredicate secondPredicate \u003d new RecordContainsKeywordsPredicate(","lastModifiedDate":"2022-10-12"},{"lineNumber":23,"author":{"gitId":"LJXSean"},"content":"                secondPredicateKeywordList);","lastModifiedDate":"2022-10-12"},{"lineNumber":24,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":25,"author":{"gitId":"LJXSean"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-10-12"},{"lineNumber":26,"author":{"gitId":"LJXSean"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2022-10-12"},{"lineNumber":27,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":28,"author":{"gitId":"LJXSean"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-10-12"},{"lineNumber":29,"author":{"gitId":"LJXSean"},"content":"        RecordContainsKeywordsPredicate firstPredicateCopy \u003d new RecordContainsKeywordsPredicate(","lastModifiedDate":"2022-10-12"},{"lineNumber":30,"author":{"gitId":"LJXSean"},"content":"                firstPredicateKeywordList);","lastModifiedDate":"2022-10-12"},{"lineNumber":31,"author":{"gitId":"LJXSean"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2022-10-12"},{"lineNumber":32,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":33,"author":{"gitId":"LJXSean"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2022-10-12"},{"lineNumber":34,"author":{"gitId":"LJXSean"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2022-10-12"},{"lineNumber":35,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":36,"author":{"gitId":"LJXSean"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-10-12"},{"lineNumber":37,"author":{"gitId":"LJXSean"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2022-10-12"},{"lineNumber":38,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":39,"author":{"gitId":"LJXSean"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2022-10-12"},{"lineNumber":40,"author":{"gitId":"LJXSean"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2022-10-12"},{"lineNumber":41,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":42,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":43,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":44,"author":{"gitId":"LJXSean"},"content":"    public void test_recordContainsKeywords_returnsTrue() {","lastModifiedDate":"2022-10-12"},{"lineNumber":45,"author":{"gitId":"LJXSean"},"content":"        // One keyword","lastModifiedDate":"2022-10-12"},{"lineNumber":46,"author":{"gitId":"LJXSean"},"content":"        RecordContainsKeywordsPredicate predicate \u003d new RecordContainsKeywordsPredicate(","lastModifiedDate":"2022-10-12"},{"lineNumber":47,"author":{"gitId":"LJXSean"},"content":"                Collections.singletonList(\"Flu\"));","lastModifiedDate":"2022-10-12"},{"lineNumber":48,"author":{"gitId":"LJXSean"},"content":"        assertTrue(predicate.test(recordWithKeywords));","lastModifiedDate":"2022-10-12"},{"lineNumber":49,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":50,"author":{"gitId":"LJXSean"},"content":"        // Multiple keywords","lastModifiedDate":"2022-10-12"},{"lineNumber":51,"author":{"gitId":"LJXSean"},"content":"        predicate \u003d new RecordContainsKeywordsPredicate(Arrays.asList(\"Covid-19\", \"Flu\"));","lastModifiedDate":"2022-10-12"},{"lineNumber":52,"author":{"gitId":"LJXSean"},"content":"        assertTrue(predicate.test(recordWithKeywords));","lastModifiedDate":"2022-10-12"},{"lineNumber":53,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":54,"author":{"gitId":"LJXSean"},"content":"        // Only one matching keyword","lastModifiedDate":"2022-10-12"},{"lineNumber":55,"author":{"gitId":"LJXSean"},"content":"        predicate \u003d new RecordContainsKeywordsPredicate(Arrays.asList(\"Covid-19\", \"H1N1\"));","lastModifiedDate":"2022-10-12"},{"lineNumber":56,"author":{"gitId":"LJXSean"},"content":"        assertTrue(predicate.test(recordWithKeywords));","lastModifiedDate":"2022-10-12"},{"lineNumber":57,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":58,"author":{"gitId":"LJXSean"},"content":"        // Mixed-case keywords","lastModifiedDate":"2022-10-12"},{"lineNumber":59,"author":{"gitId":"LJXSean"},"content":"        predicate \u003d new RecordContainsKeywordsPredicate(Arrays.asList(\"cOVid-19\", \"h1n1\"));","lastModifiedDate":"2022-10-12"},{"lineNumber":60,"author":{"gitId":"LJXSean"},"content":"        assertTrue(predicate.test(recordWithKeywords));","lastModifiedDate":"2022-10-12"},{"lineNumber":61,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":62,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":63,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":64,"author":{"gitId":"LJXSean"},"content":"    public void test_recordDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2022-10-12"},{"lineNumber":65,"author":{"gitId":"LJXSean"},"content":"        // Zero keywords","lastModifiedDate":"2022-10-12"},{"lineNumber":66,"author":{"gitId":"LJXSean"},"content":"        RecordContainsKeywordsPredicate predicate \u003d new RecordContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2022-10-12"},{"lineNumber":67,"author":{"gitId":"LJXSean"},"content":"        assertFalse(predicate.test(recordWithKeywords));","lastModifiedDate":"2022-10-12"},{"lineNumber":68,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":69,"author":{"gitId":"LJXSean"},"content":"        // Non-matching keyword","lastModifiedDate":"2022-10-12"},{"lineNumber":70,"author":{"gitId":"LJXSean"},"content":"        predicate \u003d new RecordContainsKeywordsPredicate(Arrays.asList(\"Carol\"));","lastModifiedDate":"2022-10-12"},{"lineNumber":71,"author":{"gitId":"LJXSean"},"content":"        assertFalse(predicate.test(recordWithKeywords));","lastModifiedDate":"2022-10-12"},{"lineNumber":72,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":73,"author":{"gitId":"LJXSean"},"content":"}","lastModifiedDate":"2022-10-12"}],"authorContributionMap":{"LJXSean":73}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"LJXSean"},"content":"import seedu.address.model.person.Record;","lastModifiedDate":"2022-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"LJXSean"},"content":"    private static final String INVALID_RECORDDATE \u003d \"10102000 1430\";","lastModifiedDate":"2022-10-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"hanwenlai"},"content":"    private static final List\u003cJsonAdaptedRecord\u003e VALID_RECORDLIST \u003d BENSON.getRecordList()","lastModifiedDate":"2022-10-10"},{"lineNumber":34,"author":{"gitId":"hanwenlai"},"content":"            .asUnmodifiableObservableList().stream()","lastModifiedDate":"2022-10-10"},{"lineNumber":35,"author":{"gitId":"LJXSean"},"content":"            .map(JsonAdaptedRecord::new)","lastModifiedDate":"2022-10-09"},{"lineNumber":36,"author":{"gitId":"LJXSean"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2022-10-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"marclzh"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2022-10-04"},{"lineNumber":51,"author":{"gitId":"marclzh"},"content":"                        VALID_ADDRESS, VALID_TAGS, VALID_RECORDLIST);","lastModifiedDate":"2022-10-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"marclzh"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2022-10-04"},{"lineNumber":59,"author":{"gitId":"marclzh"},"content":"                VALID_ADDRESS, VALID_TAGS, VALID_RECORDLIST);","lastModifiedDate":"2022-10-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"marclzh"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2022-10-04"},{"lineNumber":68,"author":{"gitId":"marclzh"},"content":"                        VALID_ADDRESS, VALID_TAGS, VALID_RECORDLIST);","lastModifiedDate":"2022-10-04"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"marclzh"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL,","lastModifiedDate":"2022-10-04"},{"lineNumber":76,"author":{"gitId":"marclzh"},"content":"                VALID_ADDRESS, VALID_TAGS, VALID_RECORDLIST);","lastModifiedDate":"2022-10-04"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"marclzh"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL,","lastModifiedDate":"2022-10-04"},{"lineNumber":85,"author":{"gitId":"marclzh"},"content":"                        VALID_ADDRESS, VALID_TAGS, VALID_RECORDLIST);","lastModifiedDate":"2022-10-04"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"marclzh"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null,","lastModifiedDate":"2022-10-04"},{"lineNumber":93,"author":{"gitId":"marclzh"},"content":"                VALID_ADDRESS, VALID_TAGS, VALID_RECORDLIST);","lastModifiedDate":"2022-10-04"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"marclzh"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2022-10-04"},{"lineNumber":102,"author":{"gitId":"marclzh"},"content":"                        INVALID_ADDRESS, VALID_TAGS, VALID_RECORDLIST);","lastModifiedDate":"2022-10-04"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"marclzh"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE,","lastModifiedDate":"2022-10-04"},{"lineNumber":110,"author":{"gitId":"marclzh"},"content":"                VALID_EMAIL, null, VALID_TAGS, VALID_RECORDLIST);","lastModifiedDate":"2022-10-04"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"LJXSean"},"content":"    @Test","lastModifiedDate":"2022-10-12"},{"lineNumber":116,"author":{"gitId":"LJXSean"},"content":"    public void toModelType_invalidRecords_throwsIllegalValueException() {","lastModifiedDate":"2022-10-12"},{"lineNumber":117,"author":{"gitId":"LJXSean"},"content":"        List\u003cJsonAdaptedRecord\u003e invalidRecords \u003d new ArrayList\u003c\u003e(VALID_RECORDLIST);","lastModifiedDate":"2022-10-12"},{"lineNumber":118,"author":{"gitId":"LJXSean"},"content":"        invalidRecords.add(new JsonAdaptedRecord(INVALID_RECORDDATE, \"Covid-19\"));","lastModifiedDate":"2022-10-12"},{"lineNumber":119,"author":{"gitId":"LJXSean"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2022-10-12"},{"lineNumber":120,"author":{"gitId":"LJXSean"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2022-10-12"},{"lineNumber":121,"author":{"gitId":"LJXSean"},"content":"                        VALID_ADDRESS, VALID_TAGS, invalidRecords);","lastModifiedDate":"2022-10-12"},{"lineNumber":122,"author":{"gitId":"LJXSean"},"content":"        String expectedMessage \u003d Record.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2022-10-12"},{"lineNumber":123,"author":{"gitId":"LJXSean"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2022-10-12"},{"lineNumber":124,"author":{"gitId":"LJXSean"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":125,"author":{"gitId":"LJXSean"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2018-08-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":131,"author":{"gitId":"marclzh"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,","lastModifiedDate":"2022-10-04"},{"lineNumber":132,"author":{"gitId":"marclzh"},"content":"                        VALID_ADDRESS, invalidTags, VALID_RECORDLIST);","lastModifiedDate":"2022-10-04"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":136,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"marclzh":18,"hanwenlai":2,"LJXSean":15,"-":101}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-01-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-01-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-04-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-01-18"},{"lineNumber":11,"author":{"gitId":"marclzh"},"content":"import seedu.address.model.person.Record;","lastModifiedDate":"2022-10-12"},{"lineNumber":12,"author":{"gitId":"marclzh"},"content":"import seedu.address.model.person.RecordList;","lastModifiedDate":"2022-10-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-04-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2017-04-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Address address;","lastModifiedDate":"2017-12-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-12-20"},{"lineNumber":31,"author":{"gitId":"marclzh"},"content":"    private RecordList recordList;","lastModifiedDate":"2022-10-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":42,"author":{"gitId":"marclzh"},"content":"        recordList \u003d new RecordList();","lastModifiedDate":"2022-10-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2017-12-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();","lastModifiedDate":"2017-12-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());","lastModifiedDate":"2017-12-20"},{"lineNumber":54,"author":{"gitId":"marclzh"},"content":"        recordList \u003d personToCopy.getRecordList();","lastModifiedDate":"2022-10-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":73,"author":{"gitId":"marclzh"},"content":"    /**","lastModifiedDate":"2022-10-04"},{"lineNumber":74,"author":{"gitId":"marclzh"},"content":"     * Sets the {@code RecordList} of the {@code Person} that we are building.","lastModifiedDate":"2022-10-12"},{"lineNumber":75,"author":{"gitId":"marclzh"},"content":"     */","lastModifiedDate":"2022-10-04"},{"lineNumber":76,"author":{"gitId":"marclzh"},"content":"    public PersonBuilder withRecordList(Record ... records) {","lastModifiedDate":"2022-10-12"},{"lineNumber":77,"author":{"gitId":"marclzh"},"content":"        for (Record record : records) {","lastModifiedDate":"2022-10-12"},{"lineNumber":78,"author":{"gitId":"marclzh"},"content":"            this.recordList.add(record);","lastModifiedDate":"2022-10-12"},{"lineNumber":79,"author":{"gitId":"marclzh"},"content":"        }","lastModifiedDate":"2022-10-12"},{"lineNumber":80,"author":{"gitId":"marclzh"},"content":"        return this;","lastModifiedDate":"2022-10-04"},{"lineNumber":81,"author":{"gitId":"marclzh"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":82,"author":{"gitId":"marclzh"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2017-12-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public Person build() {","lastModifiedDate":"2017-04-05"},{"lineNumber":108,"author":{"gitId":"marclzh"},"content":"        return new Person(name, phone, email, address, tags, recordList);","lastModifiedDate":"2022-10-04"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":111,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"marclzh":16,"-":95}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-08-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-08-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":20,"author":{"gitId":"LJXSean"},"content":"import seedu.address.model.person.Record;","lastModifiedDate":"2022-10-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":27,"author":{"gitId":"LJXSean"},"content":"    public static final Record RECORD1 \u003d new Record(\"10-10-2011 1400\", \"Covid-19\");","lastModifiedDate":"2022-10-12"},{"lineNumber":28,"author":{"gitId":"LJXSean"},"content":"    public static final Record RECORD2 \u003d new Record(\"10-10-2010 1400\", \"Cold\");","lastModifiedDate":"2022-10-12"},{"lineNumber":29,"author":{"gitId":"LJXSean"},"content":"    public static final Record RECORD3 \u003d new Record(\"10-10-2020 1400\", \"SARS\");","lastModifiedDate":"2022-10-12"},{"lineNumber":30,"author":{"gitId":"LJXSean"},"content":"    public static final Record EMPTY_RECORD \u003d new Record(\"10-10-2020 1400\", \"SARS\");","lastModifiedDate":"2022-10-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2018-01-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            .withPhone(\"94351253\")","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .withTags(\"friends\").build();","lastModifiedDate":"2022-10-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2018-01-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")","lastModifiedDate":"2017-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")","lastModifiedDate":"2017-04-05"},{"lineNumber":38,"author":{"gitId":"LJXSean"},"content":"            .withTags(\"owesMoney\", \"friends\").withRecordList(RECORD1, RECORD2, RECORD3).build();","lastModifiedDate":"2022-10-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")","lastModifiedDate":"2018-01-10"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")","lastModifiedDate":"2018-01-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();","lastModifiedDate":"2018-03-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")","lastModifiedDate":"2018-01-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")","lastModifiedDate":"2018-01-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")","lastModifiedDate":"2018-01-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")","lastModifiedDate":"2018-01-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")","lastModifiedDate":"2018-01-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2018-01-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2018-01-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)","lastModifiedDate":"2017-09-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            .build();","lastModifiedDate":"2017-09-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation","lastModifiedDate":"2017-07-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2017-08-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2017-08-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2017-08-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2018-01-10"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            ab.addPerson(person);","lastModifiedDate":"2017-08-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {","lastModifiedDate":"2018-01-10"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2017-08-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"LJXSean":6,"-":75}}]
