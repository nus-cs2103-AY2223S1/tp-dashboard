[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"shenyih0ng"},"content":"# `CLIMods` [![Java CI](https://github.com/AY2223S1-CS2103-F14-1/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2223S1-CS2103-F14-1/tp/actions/workflows/gradle.yml) [![pages-build-deployment](https://github.com/AY2223S1-CS2103-F14-1/tp/actions/workflows/pages/pages-build-deployment/badge.svg)](https://github.com/AY2223S1-CS2103-F14-1/tp/actions/workflows/pages/pages-build-deployment)","lastModifiedDate":"2022-09-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"shenyih0ng"},"content":"[![codecov](https://codecov.io/gh/AY2223S1-CS2103-F14-1/tp/branch/master/graph/badge.svg?token\u003dRICOOYUUM4)](https://codecov.io/gh/AY2223S1-CS2103-F14-1/tp)","lastModifiedDate":"2022-09-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"shenyih0ng"},"content":"![UI Mockup](docs/images/Ui.png)","lastModifiedDate":"2022-09-25"},{"lineNumber":6,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-09-25"},{"lineNumber":7,"author":{"gitId":"shenyih0ng"},"content":"`CLIMods` is a native desktop application for NUS students to explore, manage and plan academic","lastModifiedDate":"2022-09-17"},{"lineNumber":8,"author":{"gitId":"shenyih0ng"},"content":"modules that they are interested in taking. It is primarily optimised for the use via a Command Line","lastModifiedDate":"2022-09-17"},{"lineNumber":9,"author":{"gitId":"shenyih0ng"},"content":"Interface (CLI) while still providing the benefits of a Graphical User Interface (GUI). Power users","lastModifiedDate":"2022-09-17"},{"lineNumber":10,"author":{"gitId":"shenyih0ng"},"content":"of the command line/terminal will be able to plan and manage their modules much faster than doing it","lastModifiedDate":"2022-09-17"},{"lineNumber":11,"author":{"gitId":"shenyih0ng"},"content":"on [nusmods.com](https://nusmods.com).","lastModifiedDate":"2022-09-17"},{"lineNumber":12,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-09-25"},{"lineNumber":13,"author":{"gitId":"shenyih0ng"},"content":"\u003e This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2022-09-25"}],"authorContributionMap":{"-":2,"shenyih0ng":11}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"mainClassName \u003d \u0027seedu.address.Main\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-04-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"shenyih0ng"},"content":"checkstyleMain {","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"shenyih0ng"},"content":"    exclude(\"**/org/openapitools/client/**\")","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"shenyih0ng"},"content":"}","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        html.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        xml.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":50,"author":{"gitId":"shenyih0ng"},"content":"    String jacksonVersion \u003d \u00272.13.0\u0027","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":65,"author":{"gitId":"shenyih0ng"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-core\u0027, version: jacksonVersion","lastModifiedDate":"2022-10-03"},{"lineNumber":66,"author":{"gitId":"shenyih0ng"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: jacksonVersion","lastModifiedDate":"2022-10-03"},{"lineNumber":67,"author":{"gitId":"shenyih0ng"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-annotations\u0027, version: jacksonVersion","lastModifiedDate":"2022-10-03"},{"lineNumber":68,"author":{"gitId":"shenyih0ng"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: jacksonVersion","lastModifiedDate":"2022-10-03"},{"lineNumber":69,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":70,"author":{"gitId":"shenyih0ng"},"content":"    implementation group: \u0027com.google.code.findbugs\u0027, name: \u0027jsr305\u0027, version: \u00273.0.2\u0027","lastModifiedDate":"2022-10-03"},{"lineNumber":71,"author":{"gitId":"shenyih0ng"},"content":"    implementation group: \u0027io.swagger\u0027, name: \u0027swagger-annotations\u0027, version: \u00271.5.22\u0027","lastModifiedDate":"2022-10-03"},{"lineNumber":72,"author":{"gitId":"shenyih0ng"},"content":"    implementation group: \u0027jakarta.annotation\u0027, name: \u0027jakarta.annotation-api\u0027, version: \u00271.3.5\u0027","lastModifiedDate":"2022-10-03"},{"lineNumber":73,"author":{"gitId":"shenyih0ng"},"content":"    implementation group: \u0027org.openapitools\u0027, name: \u0027jackson-databind-nullable\u0027, version: \u00270.2.1\u0027","lastModifiedDate":"2022-10-03"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    archiveFileName \u003d \u0027addressbook.jar\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"-":70,"shenyih0ng":14}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"shenyih0ng"},"content":"You can reach us at the email `climods[at]comp.nus.edu.sg`","lastModifiedDate":"2022-09-20"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"huzaifa1712"},"content":"### Huzaifa Raghav","lastModifiedDate":"2022-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"huzaifa1712"},"content":"\u003cimg src\u003d\"images/huzaifa1712.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"huzaifa1712"},"content":"[[github](https://github.com/huzaifa1712)]","lastModifiedDate":"2022-09-25"},{"lineNumber":17,"author":{"gitId":"huzaifa1712"},"content":"[[portfolio](team/huzaifa1712.md)]","lastModifiedDate":"2022-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"huzaifa1712"},"content":"* Role: Developer","lastModifiedDate":"2022-09-25"},{"lineNumber":20,"author":{"gitId":"huzaifa1712"},"content":"* Responsibilities: ","lastModifiedDate":"2022-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"zupey"},"content":"### Linus Lee","lastModifiedDate":"2022-09-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"zupey"},"content":"\u003cimg src\u003d\"images/zupey.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-09-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"zupey"},"content":"[[github](http://github.com/zupey)]","lastModifiedDate":"2022-09-21"},{"lineNumber":27,"author":{"gitId":"zupey"},"content":"[[portfolio](team/zupey.md)]","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"zupey"},"content":"* Role: Developer","lastModifiedDate":"2022-09-21"},{"lineNumber":30,"author":{"gitId":"zupey"},"content":"* Responsibilities: Coder","lastModifiedDate":"2022-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"SeekSaveServe"},"content":"### Pei Cheng Yi  ","lastModifiedDate":"2022-09-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"huzaifa1712"},"content":"\u003cimg src\u003d\"images/seeksaveserve.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"SeekSaveServe"},"content":"[[github](http://github.com/SeekSaveServe)] [[portfolio](team/seeksaveserve.md)]","lastModifiedDate":"2022-10-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"* Responsibilities: Data","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"shenyih0ng"},"content":"### Shen Yi Hong","lastModifiedDate":"2022-09-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"shenyih0ng"},"content":"\u003cimg src\u003d\"images/shenyih0ng.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-09-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"shenyih0ng"},"content":"[[github](http://github.com/shenyih0ng)]","lastModifiedDate":"2022-09-20"},{"lineNumber":46,"author":{"gitId":"shenyih0ng"},"content":"[[portfolio](team/shenyih0ng.md)]","lastModifiedDate":"2022-09-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"shenyih0ng"},"content":"* Responsibilities:","lastModifiedDate":"2022-09-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"sarrrdin"},"content":"### Chew Hong Jin","lastModifiedDate":"2022-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"sarrrdin"},"content":"\u003cimg src\u003d\"images/sarrrdin.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"sarrrdin"},"content":"[[github](https://github.com/sarrrdin]","lastModifiedDate":"2022-09-21"},{"lineNumber":56,"author":{"gitId":"sarrrdin"},"content":"[[portfolio](team/ChewHongJin.md)]","lastModifiedDate":"2022-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"sarrrdin"},"content":"* Responsibilities: UX","lastModifiedDate":"2022-09-21"}],"authorContributionMap":{"SeekSaveServe":2,"sarrrdin":5,"huzaifa1712":7,"zupey":6,"-":33,"shenyih0ng":6}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* {list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well}","lastModifiedDate":"2021-07-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2021-07-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-07-31"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":83,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":84,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":85,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"**API** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2021-07-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `AddCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to add a person).","lastModifiedDate":"2021-07-31"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2021-07-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2021-07-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-07-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique tag, instead of each `Person` needing their own `Tag` objects.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/BetterModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"* can save both address book data and user preference data in json format, and read them back into corresponding objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/CommitActivityDiagram.png\" width\u003d\"250\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":247,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":248,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":249,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":250,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"sarrrdin"},"content":"**Product scope**","lastModifiedDate":"2022-09-29"},{"lineNumber":258,"author":{"gitId":"sarrrdin"},"content":"* Provides updated information and data based on curriculum and module schedule based on NUSMods.","lastModifiedDate":"2022-09-29"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"sarrrdin"},"content":"* has a plan to map, plan and organize a timetable that has over 1000 potential modules to fill up with.","lastModifiedDate":"2022-09-29"},{"lineNumber":263,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"* can type fast","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions","lastModifiedDate":"2020-05-26"},{"lineNumber":266,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"**Value proposition**: manage contacts faster than a typical mouse/GUI driven app","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"sarrrdin"},"content":"Link to Most Updated User Stories:","lastModifiedDate":"2022-09-30"},{"lineNumber":273,"author":{"gitId":"sarrrdin"},"content":"[Click here](https://github.com/orgs/AY2223S1-CS2103-F14-1/projects/2)","lastModifiedDate":"2022-09-30"},{"lineNumber":274,"author":{"gitId":"sarrrdin"},"content":"","lastModifiedDate":"2022-09-30"},{"lineNumber":275,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"| Priority | As a …​                                                  | I want to …​                                                               | So that I can…​                                                           |","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"sarrrdin"},"content":"| -------- |----------------------------------------------------------|----------------------------------------------------------------------------|---------------------------------------------------------------------------|","lastModifiedDate":"2022-09-29"},{"lineNumber":279,"author":{"gitId":"sarrrdin"},"content":"| `* * *`  | student                                                  | see usage instructions                                                     | refer to instructions when I forget the commands                          |","lastModifiedDate":"2022-09-29"},{"lineNumber":280,"author":{"gitId":"sarrrdin"},"content":"| `* * *`  | student                                                  | add modules to my timetable                                                | edit and organize my timetable                                            |","lastModifiedDate":"2022-09-29"},{"lineNumber":281,"author":{"gitId":"sarrrdin"},"content":"| `* * *`  | NUS student who is not too proficient in CLI             | easily adapt and learn the functions and commands the application has      | use the application efficiently                                           |","lastModifiedDate":"2022-09-29"},{"lineNumber":282,"author":{"gitId":"sarrrdin"},"content":"| `* * *`  | student                                                  | delete a module                                                            | remove modules that I no longer need                                      |","lastModifiedDate":"2022-09-29"},{"lineNumber":283,"author":{"gitId":"sarrrdin"},"content":"| `* * *`  | student                                                  | search a module by name                                                    | locate details of the module without having to go through the entire list |","lastModifiedDate":"2022-09-29"},{"lineNumber":284,"author":{"gitId":"sarrrdin"},"content":"| `* * *`  | student                                                  | view pre-requisites for a class, and what class is a pre-requisite         | plan my studies appropriately                                             |","lastModifiedDate":"2022-09-29"},{"lineNumber":285,"author":{"gitId":"sarrrdin"},"content":"| `* * *`  | student                                                  | search for and add classes from NUSMods to my schedule                     | have the most up to date information on my schedule                       |","lastModifiedDate":"2022-09-29"},{"lineNumber":286,"author":{"gitId":"sarrrdin"},"content":"| `* * *`  | student interested in CLI apps                           | have most/all key features to be accessible by just the keyboard           | harness the full potential of CLI apps                                    |","lastModifiedDate":"2022-09-29"},{"lineNumber":287,"author":{"gitId":"sarrrdin"},"content":"| `* * *`  | forgetful student                                        | easily access my weekly/daily schedule (time, venue and details of lesson) | attend my lessons punctually                                              |","lastModifiedDate":"2022-09-29"},{"lineNumber":288,"author":{"gitId":"sarrrdin"},"content":"| `* * *`  | student that work in areas with poor internet connection | access the features in CLIMods                                             | still use CLIMods                                                         |","lastModifiedDate":"2022-09-29"},{"lineNumber":289,"author":{"gitId":"sarrrdin"},"content":"| `* * *`  | student (non freshman)                                   | track and add modules I have taken                                         | keep track of my progress in University                                   |","lastModifiedDate":"2022-09-29"},{"lineNumber":290,"author":{"gitId":"sarrrdin"},"content":"| `* * *`  | student                                                  | know what modules are offered in NUS                                       | find modules to do to fulfill my graduation requirement                   |","lastModifiedDate":"2022-09-29"},{"lineNumber":291,"author":{"gitId":"sarrrdin"},"content":"| `* *`    | potential user exploring CLIMods                         | have a tutorial or detailed documentation on features of app               | easily adapt and use the app proficiently                                 |","lastModifiedDate":"2022-09-29"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"sarrrdin"},"content":"(For all use cases below, the **System** is the `CLIMods` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2022-09-30"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"sarrrdin"},"content":"**Use case: Find a module**","lastModifiedDate":"2022-09-29"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":302,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":303,"author":{"gitId":"sarrrdin"},"content":"1.  User requests to find a module","lastModifiedDate":"2022-09-29"},{"lineNumber":304,"author":{"gitId":"sarrrdin"},"content":"2.  CLIMods requests for details of the module to find","lastModifiedDate":"2022-09-30"},{"lineNumber":305,"author":{"gitId":"sarrrdin"},"content":"3.  User enters the requested details","lastModifiedDate":"2022-09-29"},{"lineNumber":306,"author":{"gitId":"sarrrdin"},"content":"4.  CLIMods finds and display details of the module","lastModifiedDate":"2022-09-30"},{"lineNumber":307,"author":{"gitId":"sarrrdin"},"content":"","lastModifiedDate":"2022-09-29"},{"lineNumber":308,"author":{"gitId":"sarrrdin"},"content":"    Use case ends.","lastModifiedDate":"2022-09-29"},{"lineNumber":309,"author":{"gitId":"sarrrdin"},"content":"","lastModifiedDate":"2022-09-29"},{"lineNumber":310,"author":{"gitId":"sarrrdin"},"content":"**Extensions**","lastModifiedDate":"2022-09-29"},{"lineNumber":311,"author":{"gitId":"sarrrdin"},"content":"","lastModifiedDate":"2022-09-29"},{"lineNumber":312,"author":{"gitId":"sarrrdin"},"content":"* 3a. The given module request is invalid.","lastModifiedDate":"2022-09-29"},{"lineNumber":313,"author":{"gitId":"sarrrdin"},"content":"","lastModifiedDate":"2022-09-29"},{"lineNumber":314,"author":{"gitId":"sarrrdin"},"content":"    * 3a1. CLIMods shows an error message where module does not exist.","lastModifiedDate":"2022-09-30"},{"lineNumber":315,"author":{"gitId":"sarrrdin"},"content":"","lastModifiedDate":"2022-09-29"},{"lineNumber":316,"author":{"gitId":"sarrrdin"},"content":"* 3b. The user\u0027s command is invalid.","lastModifiedDate":"2022-09-29"},{"lineNumber":317,"author":{"gitId":"sarrrdin"},"content":"","lastModifiedDate":"2022-09-29"},{"lineNumber":318,"author":{"gitId":"sarrrdin"},"content":"    * 3a1. CLIMods shows an error message where command is non-existent.","lastModifiedDate":"2022-09-30"},{"lineNumber":319,"author":{"gitId":"sarrrdin"},"content":"","lastModifiedDate":"2022-09-29"},{"lineNumber":320,"author":{"gitId":"sarrrdin"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2022-09-29"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-29"},{"lineNumber":322,"author":{"gitId":"sarrrdin"},"content":"**Use case: Add a module**","lastModifiedDate":"2022-09-29"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-29"},{"lineNumber":324,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2022-09-29"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-29"},{"lineNumber":326,"author":{"gitId":"sarrrdin"},"content":"1.  User requests to add a module","lastModifiedDate":"2022-09-29"},{"lineNumber":327,"author":{"gitId":"sarrrdin"},"content":"2.  CLIMods requests for details of the module to add","lastModifiedDate":"2022-09-30"},{"lineNumber":328,"author":{"gitId":"sarrrdin"},"content":"3.  User enters the requested details","lastModifiedDate":"2022-09-29"},{"lineNumber":329,"author":{"gitId":"sarrrdin"},"content":"4.  CLIMods adds the module","lastModifiedDate":"2022-09-30"},{"lineNumber":330,"author":{"gitId":"sarrrdin"},"content":"","lastModifiedDate":"2022-09-29"},{"lineNumber":331,"author":{"gitId":"sarrrdin"},"content":"    Use case ends.","lastModifiedDate":"2022-09-29"},{"lineNumber":332,"author":{"gitId":"sarrrdin"},"content":"","lastModifiedDate":"2022-09-29"},{"lineNumber":333,"author":{"gitId":"sarrrdin"},"content":"**Extensions**","lastModifiedDate":"2022-09-29"},{"lineNumber":334,"author":{"gitId":"sarrrdin"},"content":"","lastModifiedDate":"2022-09-29"},{"lineNumber":335,"author":{"gitId":"sarrrdin"},"content":"* 3a. The given module request is invalid.","lastModifiedDate":"2022-09-29"},{"lineNumber":336,"author":{"gitId":"sarrrdin"},"content":"","lastModifiedDate":"2022-09-29"},{"lineNumber":337,"author":{"gitId":"sarrrdin"},"content":"    * 3a1. CLIMods shows an error message where module does not exist.","lastModifiedDate":"2022-09-30"},{"lineNumber":338,"author":{"gitId":"sarrrdin"},"content":"","lastModifiedDate":"2022-09-29"},{"lineNumber":339,"author":{"gitId":"sarrrdin"},"content":"* 3b. The user\u0027s command is invalid.","lastModifiedDate":"2022-09-29"},{"lineNumber":340,"author":{"gitId":"sarrrdin"},"content":"","lastModifiedDate":"2022-09-29"},{"lineNumber":341,"author":{"gitId":"sarrrdin"},"content":"    * 3a1. CLIMods shows an error message where command is non-existent.","lastModifiedDate":"2022-09-30"},{"lineNumber":342,"author":{"gitId":"sarrrdin"},"content":"  ","lastModifiedDate":"2022-09-29"},{"lineNumber":343,"author":{"gitId":"sarrrdin"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2022-09-29"},{"lineNumber":344,"author":{"gitId":"sarrrdin"},"content":"","lastModifiedDate":"2022-09-29"},{"lineNumber":345,"author":{"gitId":"sarrrdin"},"content":"**Use case: Delete a module**","lastModifiedDate":"2022-09-29"},{"lineNumber":346,"author":{"gitId":"sarrrdin"},"content":"","lastModifiedDate":"2022-09-29"},{"lineNumber":347,"author":{"gitId":"sarrrdin"},"content":"**MSS**","lastModifiedDate":"2022-09-29"},{"lineNumber":348,"author":{"gitId":"sarrrdin"},"content":"","lastModifiedDate":"2022-09-29"},{"lineNumber":349,"author":{"gitId":"sarrrdin"},"content":"1.  User requests to list modules","lastModifiedDate":"2022-09-29"},{"lineNumber":350,"author":{"gitId":"sarrrdin"},"content":"2.  CLIMods shows a list of modules","lastModifiedDate":"2022-09-30"},{"lineNumber":351,"author":{"gitId":"sarrrdin"},"content":"3.  User requests to delete a specific module in the list","lastModifiedDate":"2022-09-29"},{"lineNumber":352,"author":{"gitId":"sarrrdin"},"content":"4.  CLIMods deletes the module","lastModifiedDate":"2022-09-30"},{"lineNumber":353,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":354,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":355,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":356,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":357,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":358,"author":{"gitId":"-"},"content":"* 2a. The list is empty.","lastModifiedDate":"2020-05-23"},{"lineNumber":359,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":360,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":361,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":362,"author":{"gitId":"sarrrdin"},"content":"* 3a. The given name is invalid.","lastModifiedDate":"2022-09-29"},{"lineNumber":363,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":364,"author":{"gitId":"sarrrdin"},"content":"    * 3a1. CLIMods shows an error message.","lastModifiedDate":"2022-09-30"},{"lineNumber":365,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":366,"author":{"gitId":"-"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2020-05-23"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":368,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":369,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":370,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":372,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":373,"author":{"gitId":"sarrrdin"},"content":"2.  Should be able to hold up to 1000 modules without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2022-09-29"},{"lineNumber":374,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":375,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":376,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":377,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":378,"author":{"gitId":"sarrrdin"},"content":"* **Student**: The person who uses the app","lastModifiedDate":"2022-09-29"},{"lineNumber":379,"author":{"gitId":"sarrrdin"},"content":"* **Module(s)**: The modules/class to be taken by the students","lastModifiedDate":"2022-09-29"},{"lineNumber":380,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":381,"author":{"gitId":"sarrrdin"},"content":"*{More to be added}*","lastModifiedDate":"2022-09-29"},{"lineNumber":382,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":383,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":385,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":387,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":389,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":390,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":391,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":392,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":393,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":394,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":395,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":396,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":397,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":398,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":399,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":400,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":401,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":402,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":403,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":404,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":405,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":406,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":407,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":408,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":409,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":410,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":411,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":412,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":413,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":414,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":415,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":416,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":417,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":418,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":419,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":420,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":421,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":422,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":423,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":424,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":425,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":426,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":427,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":428,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":429,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":430,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":431,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":432,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":433,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":434,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"sarrrdin":74,"-":360}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"shenyih0ng"},"content":"layout: page ","lastModifiedDate":"2022-09-28"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2022-09-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"shenyih0ng"},"content":"`CLIMods` is a native desktop application for NUS students to explore, manage and plan academic","lastModifiedDate":"2022-09-26"},{"lineNumber":7,"author":{"gitId":"shenyih0ng"},"content":"modules that they are interested in taking. It is primarily optimised for the use via a Command Line","lastModifiedDate":"2022-09-26"},{"lineNumber":8,"author":{"gitId":"shenyih0ng"},"content":"Interface (CLI) while still providing the benefits of a Graphical User Interface (GUI). Power users","lastModifiedDate":"2022-09-26"},{"lineNumber":9,"author":{"gitId":"shenyih0ng"},"content":"of the command line/terminal will be able to plan and manage their modules much faster than doing it","lastModifiedDate":"2022-09-26"},{"lineNumber":10,"author":{"gitId":"shenyih0ng"},"content":"on [nusmods.com](https://www.nusmods.com).","lastModifiedDate":"2022-09-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"shenyih0ng"},"content":"* Table of Contents ","lastModifiedDate":"2022-09-28"},{"lineNumber":13,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2022-09-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"shenyih0ng"},"content":"2. Download the latest `climods.jar`","lastModifiedDate":"2022-09-26"},{"lineNumber":22,"author":{"gitId":"shenyih0ng"},"content":"   from [here](https://github.com/AY2223S1-CS2103-F14-1/tp/releases).","lastModifiedDate":"2022-09-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"shenyih0ng"},"content":"3. Copy the file to the folder you want to use as the _home folder_ for your `CLIMods`.","lastModifiedDate":"2022-09-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"shenyih0ng"},"content":"4. Double-click the file to start the app. The GUI similar to the below should appear in a few","lastModifiedDate":"2022-09-26"},{"lineNumber":27,"author":{"gitId":"shenyih0ng"},"content":"   seconds.\u003cbr\u003e","lastModifiedDate":"2022-09-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"shenyih0ng"},"content":"5. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and","lastModifiedDate":"2022-09-26"},{"lineNumber":31,"author":{"gitId":"shenyih0ng"},"content":"   pressing Enter will open the help window.","lastModifiedDate":"2022-09-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"shenyih0ng"},"content":"6. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2022-09-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"shenyih0ng"},"content":"### User Manual: `help`","lastModifiedDate":"2022-09-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"shenyih0ng"},"content":"Format: `help [COMMAND-NAME]`","lastModifiedDate":"2022-09-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"shenyih0ng"},"content":"Optional Arguments:","lastModifiedDate":"2022-09-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"shenyih0ng"},"content":"- `COMMAND-NAME`","lastModifiedDate":"2022-09-26"},{"lineNumber":46,"author":{"gitId":"shenyih0ng"},"content":"    - If not supplied, `help` returns the list of all commands available","lastModifiedDate":"2022-09-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"shenyih0ng"},"content":"Provides the user manual for the given command and an explanation on the associated faculty/module","lastModifiedDate":"2022-09-26"},{"lineNumber":49,"author":{"gitId":"shenyih0ng"},"content":"prefix and optional arguments.","lastModifiedDate":"2022-09-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"shenyih0ng"},"content":"### Listing modules: `ls`","lastModifiedDate":"2022-09-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"shenyih0ng"},"content":"Format: `ls [FACULTY-PREFIX] [--user]`","lastModifiedDate":"2022-09-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"shenyih0ng"},"content":"Optional Arguments:","lastModifiedDate":"2022-09-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"shenyih0ng"},"content":"- `FACULTY-PREFIX`","lastModifiedDate":"2022-09-26"},{"lineNumber":58,"author":{"gitId":"shenyih0ng"},"content":"  - e.g. `CS`, `CEG`","lastModifiedDate":"2022-09-26"},{"lineNumber":59,"author":{"gitId":"shenyih0ng"},"content":"- `--user`","lastModifiedDate":"2022-09-26"},{"lineNumber":60,"author":{"gitId":"shenyih0ng"},"content":"  - A flag that narrows the list of modules to user\u0027s own list of chosen modules","lastModifiedDate":"2022-09-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"shenyih0ng"},"content":"Shows the entire list of modules offered by NUS with the option to also filter it by faculty (via","lastModifiedDate":"2022-09-26"},{"lineNumber":63,"author":{"gitId":"shenyih0ng"},"content":"module prefix e.g. CS, CEG).","lastModifiedDate":"2022-09-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"shenyih0ng"},"content":"### Searching for modules: `find`","lastModifiedDate":"2022-09-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"shenyih0ng"},"content":"Format: `find KEYWORD`","lastModifiedDate":"2022-09-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"shenyih0ng"},"content":"Required Arguments:","lastModifiedDate":"2022-09-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"shenyih0ng"},"content":"- `KEYWORD`","lastModifiedDate":"2022-09-26"},{"lineNumber":72,"author":{"gitId":"shenyih0ng"},"content":"  - Any keyword to search against the list of modules","lastModifiedDate":"2022-09-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"shenyih0ng"},"content":"Search for a (list of) module in the entire list of modules offered by NUS.","lastModifiedDate":"2022-09-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"shenyih0ng"},"content":"### View module details: `view`","lastModifiedDate":"2022-09-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"shenyih0ng"},"content":"Format: `view MODULE-CODE`","lastModifiedDate":"2022-09-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"shenyih0ng"},"content":"Required Arguments:","lastModifiedDate":"2022-09-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"shenyih0ng"},"content":"- `MODULE-CODE`","lastModifiedDate":"2022-09-26"},{"lineNumber":83,"author":{"gitId":"shenyih0ng"},"content":"  - e.g. `CS2103`","lastModifiedDate":"2022-09-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"shenyih0ng"},"content":"View full details (e.g. description, workload) of a module via its module code.","lastModifiedDate":"2022-09-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"shenyih0ng"},"content":"### Add modules to user list: `add`","lastModifiedDate":"2022-09-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"shenyih0ng"},"content":"Format: `add MODULE-CODE`","lastModifiedDate":"2022-09-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"shenyih0ng"},"content":"Required Arguments:","lastModifiedDate":"2022-09-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"shenyih0ng"},"content":"- `MODULE-CODE`","lastModifiedDate":"2022-09-26"},{"lineNumber":94,"author":{"gitId":"shenyih0ng"},"content":"    - e.g. `CS2103`","lastModifiedDate":"2022-09-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"shenyih0ng"},"content":"Add a module to the user\u0027s own list of modules.","lastModifiedDate":"2022-09-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"shenyih0ng"},"content":"### Delete a module from user list: `rm`","lastModifiedDate":"2022-09-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"shenyih0ng"},"content":"Format: `rm MODULE-CODE`","lastModifiedDate":"2022-09-26"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"shenyih0ng"},"content":"Required Arguments:","lastModifiedDate":"2022-09-26"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"shenyih0ng"},"content":"- `MODULE-CODE`","lastModifiedDate":"2022-09-26"},{"lineNumber":105,"author":{"gitId":"shenyih0ng"},"content":"    - e.g. `CS2103`","lastModifiedDate":"2022-09-26"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"shenyih0ng"},"content":"Delete a module to the user\u0027s own list of modules.","lastModifiedDate":"2022-09-26"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"### Exiting the program: `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"shenyih0ng"},"content":"Exits the program","lastModifiedDate":"2022-09-26"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"Action | Format, Examples","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"--------|------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"shenyih0ng"},"content":"**help** | `help [COMMAND-NAME]`\u003cbr\u003e e.g. `help find`","lastModifiedDate":"2022-09-26"},{"lineNumber":122,"author":{"gitId":"shenyih0ng"},"content":"**ls** | `ls [FACULTY-PREFIX] [--user]`\u003cbr\u003e e.g. `ls`, `ls CS`, `ls MA --user`","lastModifiedDate":"2022-09-26"},{"lineNumber":123,"author":{"gitId":"shenyih0ng"},"content":"**find** | `find KEYWORD`\u003cbr\u003e e.g. `find compilers`","lastModifiedDate":"2022-09-26"},{"lineNumber":124,"author":{"gitId":"shenyih0ng"},"content":"**view** | `view MODULE-CODE`\u003cbr\u003e e.g. `view CS2103`","lastModifiedDate":"2022-09-26"},{"lineNumber":125,"author":{"gitId":"shenyih0ng"},"content":"**add** | `add MODULE-CODE`\u003cbr\u003e e.g. `add CS2103`","lastModifiedDate":"2022-09-26"},{"lineNumber":126,"author":{"gitId":"shenyih0ng"},"content":"**rm** | `rm MODULE-CODE`\u003cbr\u003e e.g. `rm CS2103`","lastModifiedDate":"2022-09-26"},{"lineNumber":127,"author":{"gitId":"shenyih0ng"},"content":"**exit** | `exit`","lastModifiedDate":"2022-09-26"}],"authorContributionMap":{"-":64,"shenyih0ng":63}},{"path":"docs/_sass/minima/_base.scss","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"html {","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  font-size: $base-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Reset some basic elements","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"body, h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"p, blockquote, pre, hr,","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"dl, dd, ol, ul, figure {","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  margin: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  padding: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Basic styling","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"body {","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  font: $base-font-weight #{$base-font-size}/#{$base-line-height} $base-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  background-color: $background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  -webkit-text-size-adjust: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  -webkit-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     -moz-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"       -o-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  font-kerning: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  display: flex;","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  min-height: 100vh;","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  flex-direction: column;","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  overflow-wrap: break-word;","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * Set `margin-bottom` to maintain vertical rhythm","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"p, blockquote, pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"ul, ol, dl, figure,","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"%vertical-rhythm {","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"hr {","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  margin-top: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":" * `main` element","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"main {","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  display: block; /* Default value of `display` of `main` element is \u0027inline\u0027 in IE 11. */","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":" * Images","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"img {","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  max-width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  vertical-align: middle;","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":" * Figures","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"figure \u003e img {","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"figcaption {","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  font-size: $small-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":" * Lists","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"ul, ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  margin-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"li {","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  \u003e ul,","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  \u003e ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":" * Headings","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6 {","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  font-weight: $base-font-weight;","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":" * Links","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"a {","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  color: $link-base-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"  \u0026:visited {","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    color: $link-visited-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  .social-media-list \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    .username {","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":" * Blockquotes","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"blockquote {","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  color: $brand-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  border-left: 4px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"  @include relative-font-size(1.125);","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  font-style: italic;","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  \u003e :last-child {","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"  i, em {","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    font-style: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * Code formatting","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"  font-family: $code-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  font-size: 0.9375em;","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"  border: 1px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"  background-color: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"  padding: 1px 5px;","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"pre {","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"  padding: 8px 12px;","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"  overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"  \u003e code {","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    border: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    padding-right: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    padding-left: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":".highlight {","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"  background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"  @extend %vertical-rhythm;","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"  .highlighter-rouge \u0026 {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":" * Wrapper","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":".wrapper {","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"  max-width: calc(#{$content-width} - (#{$spacing-unit}));","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"  margin-right: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"  margin-left: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"  padding-right: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"  @extend %clearfix;","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"  @media screen and (min-width: $on-large) {","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    max-width: calc(#{$content-width} - (#{$spacing-unit} * 2));","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    padding-right: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    padding-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":" * Clearfix","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"%clearfix:after {","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"  content: \"\";","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"  display: table;","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"  clear: both;","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":" * Icons","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":".orange {","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  color: #f66a0a;","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":".grey {","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"  color: #828282;","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":" * Tables","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"table {","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"  text-align: $table-text-align;","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"  color: $table-text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  border-collapse: collapse;","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"  border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  tr {","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    \u0026:nth-child(even) {","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"      background-color: $table-zebra-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"  th, td {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    padding: ($spacing-unit / 3) ($spacing-unit / 2);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"  th {","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    background-color: $table-header-bg-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    border: 1px solid $table-header-border;","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"  td {","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"  @include media-query($on-laptop) {","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -webkit-overflow-scrolling: touch;","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"            -ms-overflow-style: -ms-autohiding-scrollbar;","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-11"},{"lineNumber":274,"author":{"gitId":"-"},"content":"@media print {","lastModifiedDate":"2021-01-12"},{"lineNumber":275,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-11"},{"lineNumber":276,"author":{"gitId":"-"},"content":"  * Prevents page break from cutting through content when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":277,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-11"},{"lineNumber":278,"author":{"gitId":"-"},"content":"  body {","lastModifiedDate":"2021-01-11"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2021-01-11"},{"lineNumber":280,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":281,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-12"},{"lineNumber":282,"author":{"gitId":"-"},"content":"  * Replaces the top navigation menu with the project name when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":283,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-12"},{"lineNumber":284,"author":{"gitId":"-"},"content":"  .site-header .wrapper {","lastModifiedDate":"2021-01-12"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    display: none;","lastModifiedDate":"2021-01-12"},{"lineNumber":286,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":287,"author":{"gitId":"-"},"content":"  .site-header {","lastModifiedDate":"2021-01-12"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    text-align: center;","lastModifiedDate":"2021-01-12"},{"lineNumber":289,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":290,"author":{"gitId":"-"},"content":"  .site-header:before {","lastModifiedDate":"2021-01-12"},{"lineNumber":291,"author":{"gitId":"shenyih0ng"},"content":"    content: \"CLIMods\";","lastModifiedDate":"2022-09-25"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    font-size: 32px;","lastModifiedDate":"2021-01-12"},{"lineNumber":293,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":294,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-01-12"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-12"}],"authorContributionMap":{"-":294,"shenyih0ng":1}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"shenyih0ng"},"content":"title: CLIMods","lastModifiedDate":"2022-09-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"shenyih0ng"},"content":"[![codecov](https://codecov.io/gh/AY2223S1-CS2103-F14-1/tp/branch/master/graph/badge.svg?token\u003dRICOOYUUM4)](https://codecov.io/gh/AY2223S1-CS2103-F14-1/tp)","lastModifiedDate":"2022-09-25"},{"lineNumber":7,"author":{"gitId":"shenyih0ng"},"content":"[![Java CI](https://github.com/AY2223S1-CS2103-F14-1/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2223S1-CS2103-F14-1/tp/actions/workflows/gradle.yml) ","lastModifiedDate":"2022-09-25"},{"lineNumber":8,"author":{"gitId":"shenyih0ng"},"content":"[![pages-build-deployment](https://github.com/AY2223S1-CS2103-F14-1/tp/actions/workflows/pages/pages-build-deployment/badge.svg)](https://github.com/AY2223S1-CS2103-F14-1/tp/actions/workflows/pages/pages-build-deployment)","lastModifiedDate":"2022-09-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"shenyih0ng"},"content":"**`CLIMods` is a desktop application for exploring and managing your NUS academic modules.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface).","lastModifiedDate":"2022-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"shenyih0ng"},"content":"* If you are interested in using `CLIMods`, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start).","lastModifiedDate":"2022-09-25"},{"lineNumber":15,"author":{"gitId":"shenyih0ng"},"content":"* If you are interested about developing `CLIMods`, the [**Developer Guide**](DeveloperGuide.html) is a good place to start.","lastModifiedDate":"2022-09-25"}],"authorContributionMap":{"-":8,"shenyih0ng":7}},{"path":"docs/team/huzaifa1712.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"huzaifa1712"},"content":"---","lastModifiedDate":"2022-09-25"},{"lineNumber":2,"author":{"gitId":"huzaifa1712"},"content":"layout: page","lastModifiedDate":"2022-09-25"},{"lineNumber":3,"author":{"gitId":"huzaifa1712"},"content":"title: Huzaifa Raghav\u0027s Project Portfolio Page","lastModifiedDate":"2022-09-25"},{"lineNumber":4,"author":{"gitId":"huzaifa1712"},"content":"---","lastModifiedDate":"2022-09-25"},{"lineNumber":5,"author":{"gitId":"huzaifa1712"},"content":"","lastModifiedDate":"2022-09-25"},{"lineNumber":6,"author":{"gitId":"huzaifa1712"},"content":"### Project: `CLIMods`","lastModifiedDate":"2022-09-25"},{"lineNumber":7,"author":{"gitId":"huzaifa1712"},"content":"","lastModifiedDate":"2022-09-25"},{"lineNumber":8,"author":{"gitId":"huzaifa1712"},"content":"`CLIMods` is a native desktop application for NUS students to explore, manage and plan academic","lastModifiedDate":"2022-09-25"},{"lineNumber":9,"author":{"gitId":"huzaifa1712"},"content":"modules that they are interested in taking. Power users of the command line/terminal will be able to","lastModifiedDate":"2022-09-25"},{"lineNumber":10,"author":{"gitId":"huzaifa1712"},"content":"plan and manage their modules much faster than doing it on [nusmods.com](https://nusmods.com).","lastModifiedDate":"2022-09-25"},{"lineNumber":11,"author":{"gitId":"huzaifa1712"},"content":"","lastModifiedDate":"2022-09-25"},{"lineNumber":12,"author":{"gitId":"huzaifa1712"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-09-25"},{"lineNumber":13,"author":{"gitId":"huzaifa1712"},"content":"","lastModifiedDate":"2022-09-25"},{"lineNumber":14,"author":{"gitId":"huzaifa1712"},"content":"_To be added soon_","lastModifiedDate":"2022-09-25"}],"authorContributionMap":{"huzaifa1712":14}},{"path":"docs/team/sarrrdin.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"sarrrdin"},"content":"---","lastModifiedDate":"2022-09-21"},{"lineNumber":2,"author":{"gitId":"sarrrdin"},"content":"layout: page","lastModifiedDate":"2022-09-21"},{"lineNumber":3,"author":{"gitId":"sarrrdin"},"content":"title: Chew Hong Jin\u0027s Project Portfolio Page","lastModifiedDate":"2022-09-21"},{"lineNumber":4,"author":{"gitId":"sarrrdin"},"content":"---","lastModifiedDate":"2022-09-21"},{"lineNumber":5,"author":{"gitId":"sarrrdin"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":6,"author":{"gitId":"sarrrdin"},"content":"### Project: `CLIMods`","lastModifiedDate":"2022-09-21"},{"lineNumber":7,"author":{"gitId":"sarrrdin"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":8,"author":{"gitId":"sarrrdin"},"content":"`CLIMods` is a desktop application that allows students to plan out their timetable with the use of a Command Line","lastModifiedDate":"2022-09-21"},{"lineNumber":9,"author":{"gitId":"sarrrdin"},"content":"Interface. `CLIMods` allows users to manage their modules much faster than doing it on the common website","lastModifiedDate":"2022-09-21"},{"lineNumber":10,"author":{"gitId":"sarrrdin"},"content":"that most NUS students use [nusmods.com](https://nusmods.com).","lastModifiedDate":"2022-09-21"},{"lineNumber":11,"author":{"gitId":"sarrrdin"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":12,"author":{"gitId":"sarrrdin"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-09-21"}],"authorContributionMap":{"sarrrdin":12}},{"path":"docs/team/seeksaveserve.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"SeekSaveServe"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":2,"author":{"gitId":"SeekSaveServe"},"content":"layout: page","lastModifiedDate":"2022-09-20"},{"lineNumber":3,"author":{"gitId":"SeekSaveServe"},"content":"title: Pei Cheng Yi\u0027s Project Portfolio Page","lastModifiedDate":"2022-09-20"},{"lineNumber":4,"author":{"gitId":"SeekSaveServe"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":5,"author":{"gitId":"SeekSaveServe"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":6,"author":{"gitId":"SeekSaveServe"},"content":"### Project: CLIMods","lastModifiedDate":"2022-10-01"},{"lineNumber":7,"author":{"gitId":"SeekSaveServe"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":8,"author":{"gitId":"SeekSaveServe"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":9,"author":{"gitId":"SeekSaveServe"},"content":"`CLIMods` is a native desktop application for NUS students to explore, manage and plan academic","lastModifiedDate":"2022-10-01"},{"lineNumber":10,"author":{"gitId":"SeekSaveServe"},"content":"modules that they are interested in taking. Power users of the command line/terminal will be able to","lastModifiedDate":"2022-10-01"},{"lineNumber":11,"author":{"gitId":"SeekSaveServe"},"content":"plan and manage their modules much faster than doing it on [nusmods.com](https://nusmods.com).","lastModifiedDate":"2022-10-01"},{"lineNumber":12,"author":{"gitId":"SeekSaveServe"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":13,"author":{"gitId":"SeekSaveServe"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-09-20"},{"lineNumber":14,"author":{"gitId":"SeekSaveServe"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":15,"author":{"gitId":"SeekSaveServe"},"content":"_To be updated soon_","lastModifiedDate":"2022-10-01"},{"lineNumber":16,"author":{"gitId":"SeekSaveServe"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":17,"author":{"gitId":"SeekSaveServe"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":18,"author":{"gitId":"SeekSaveServe"},"content":"* **New Feature**: ","lastModifiedDate":"2022-10-01"},{"lineNumber":19,"author":{"gitId":"SeekSaveServe"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":20,"author":{"gitId":"SeekSaveServe"},"content":"  * What it does: ","lastModifiedDate":"2022-10-01"},{"lineNumber":21,"author":{"gitId":"SeekSaveServe"},"content":"  * Justification: ","lastModifiedDate":"2022-10-01"},{"lineNumber":22,"author":{"gitId":"SeekSaveServe"},"content":"  * Highlights:","lastModifiedDate":"2022-10-01"},{"lineNumber":23,"author":{"gitId":"SeekSaveServe"},"content":"  * Credits: ","lastModifiedDate":"2022-10-01"},{"lineNumber":24,"author":{"gitId":"SeekSaveServe"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":25,"author":{"gitId":"SeekSaveServe"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2022-09-20"},{"lineNumber":26,"author":{"gitId":"SeekSaveServe"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":27,"author":{"gitId":"SeekSaveServe"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":28,"author":{"gitId":"SeekSaveServe"},"content":"* **Project management**:","lastModifiedDate":"2022-09-20"},{"lineNumber":29,"author":{"gitId":"SeekSaveServe"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":30,"author":{"gitId":"SeekSaveServe"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2022-09-20"},{"lineNumber":31,"author":{"gitId":"SeekSaveServe"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":32,"author":{"gitId":"SeekSaveServe"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":33,"author":{"gitId":"SeekSaveServe"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2022-09-20"},{"lineNumber":34,"author":{"gitId":"SeekSaveServe"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":35,"author":{"gitId":"SeekSaveServe"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2022-09-20"},{"lineNumber":36,"author":{"gitId":"SeekSaveServe"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":37,"author":{"gitId":"SeekSaveServe"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2022-09-20"},{"lineNumber":38,"author":{"gitId":"SeekSaveServe"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":39,"author":{"gitId":"SeekSaveServe"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":40,"author":{"gitId":"SeekSaveServe"},"content":"* **Documentation**:","lastModifiedDate":"2022-09-20"},{"lineNumber":41,"author":{"gitId":"SeekSaveServe"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":42,"author":{"gitId":"SeekSaveServe"},"content":"  * User Guide:","lastModifiedDate":"2022-09-20"},{"lineNumber":43,"author":{"gitId":"SeekSaveServe"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":44,"author":{"gitId":"SeekSaveServe"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2022-09-20"},{"lineNumber":45,"author":{"gitId":"SeekSaveServe"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":46,"author":{"gitId":"SeekSaveServe"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2022-09-20"},{"lineNumber":47,"author":{"gitId":"SeekSaveServe"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":48,"author":{"gitId":"SeekSaveServe"},"content":"  * Developer Guide:","lastModifiedDate":"2022-09-20"},{"lineNumber":49,"author":{"gitId":"SeekSaveServe"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":50,"author":{"gitId":"SeekSaveServe"},"content":"    * Added implementation details of the `delete` feature.","lastModifiedDate":"2022-09-20"},{"lineNumber":51,"author":{"gitId":"SeekSaveServe"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":52,"author":{"gitId":"SeekSaveServe"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":53,"author":{"gitId":"SeekSaveServe"},"content":"* **Community**:","lastModifiedDate":"2022-09-20"},{"lineNumber":54,"author":{"gitId":"SeekSaveServe"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":55,"author":{"gitId":"SeekSaveServe"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2022-09-20"},{"lineNumber":56,"author":{"gitId":"SeekSaveServe"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":57,"author":{"gitId":"SeekSaveServe"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2022-09-20"},{"lineNumber":58,"author":{"gitId":"SeekSaveServe"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":59,"author":{"gitId":"SeekSaveServe"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2022-09-20"},{"lineNumber":60,"author":{"gitId":"SeekSaveServe"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":61,"author":{"gitId":"SeekSaveServe"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2022-09-20"},{"lineNumber":62,"author":{"gitId":"SeekSaveServe"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":63,"author":{"gitId":"SeekSaveServe"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":64,"author":{"gitId":"SeekSaveServe"},"content":"* **Tools**:","lastModifiedDate":"2022-09-20"},{"lineNumber":65,"author":{"gitId":"SeekSaveServe"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":66,"author":{"gitId":"SeekSaveServe"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2022-09-20"},{"lineNumber":67,"author":{"gitId":"SeekSaveServe"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":68,"author":{"gitId":"SeekSaveServe"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2022-09-20"},{"lineNumber":69,"author":{"gitId":"SeekSaveServe"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":70,"author":{"gitId":"SeekSaveServe"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":71,"author":{"gitId":"SeekSaveServe"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2022-09-20"}],"authorContributionMap":{"SeekSaveServe":71}},{"path":"docs/team/shenyih0ng.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"shenyih0ng"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":2,"author":{"gitId":"shenyih0ng"},"content":"layout: page","lastModifiedDate":"2022-09-20"},{"lineNumber":3,"author":{"gitId":"shenyih0ng"},"content":"title: Shen Yi Hong\u0027s Project Portfolio Page","lastModifiedDate":"2022-09-20"},{"lineNumber":4,"author":{"gitId":"shenyih0ng"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":5,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":6,"author":{"gitId":"shenyih0ng"},"content":"### Project: `CLIMods`","lastModifiedDate":"2022-09-20"},{"lineNumber":7,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":8,"author":{"gitId":"shenyih0ng"},"content":"`CLIMods` is a native desktop application for NUS students to explore, manage and plan academic","lastModifiedDate":"2022-09-20"},{"lineNumber":9,"author":{"gitId":"shenyih0ng"},"content":"modules that they are interested in taking. Power users of the command line/terminal will be able to","lastModifiedDate":"2022-09-20"},{"lineNumber":10,"author":{"gitId":"shenyih0ng"},"content":"plan and manage their modules much faster than doing it on [nusmods.com](https://nusmods.com).","lastModifiedDate":"2022-09-20"},{"lineNumber":11,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":12,"author":{"gitId":"shenyih0ng"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-09-20"},{"lineNumber":13,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":14,"author":{"gitId":"shenyih0ng"},"content":"_To be added soon_","lastModifiedDate":"2022-09-20"}],"authorContributionMap":{"shenyih0ng":14}},{"path":"docs/team/zupey.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"zupey"},"content":"---","lastModifiedDate":"2022-09-21"},{"lineNumber":2,"author":{"gitId":"zupey"},"content":"layout: page","lastModifiedDate":"2022-09-21"},{"lineNumber":3,"author":{"gitId":"zupey"},"content":"title: Linus Lee\u0027s Project Portfolio Page","lastModifiedDate":"2022-09-21"},{"lineNumber":4,"author":{"gitId":"zupey"},"content":"---","lastModifiedDate":"2022-09-21"},{"lineNumber":5,"author":{"gitId":"zupey"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":6,"author":{"gitId":"zupey"},"content":"### Project: `CLIMods`","lastModifiedDate":"2022-09-21"},{"lineNumber":7,"author":{"gitId":"zupey"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":8,"author":{"gitId":"zupey"},"content":"`CLIMods` is a native desktop application for NUS students to explore, manage and plan academic","lastModifiedDate":"2022-09-21"},{"lineNumber":9,"author":{"gitId":"zupey"},"content":"modules that they are interested in taking. Power users of the command line/terminal will be able to","lastModifiedDate":"2022-09-21"},{"lineNumber":10,"author":{"gitId":"zupey"},"content":"plan and manage their modules much faster than doing it on [nusmods.com](https://nusmods.com).","lastModifiedDate":"2022-09-21"},{"lineNumber":11,"author":{"gitId":"zupey"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":12,"author":{"gitId":"zupey"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-09-21"},{"lineNumber":13,"author":{"gitId":"zupey"},"content":"","lastModifiedDate":"2022-09-21"},{"lineNumber":14,"author":{"gitId":"zupey"},"content":"_To be added soon_","lastModifiedDate":"2022-09-21"}],"authorContributionMap":{"zupey":14}},{"path":"src/main/java/org/openapitools/client/ApiClient.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"shenyih0ng"},"content":"/*","lastModifiedDate":"2022-10-03"},{"lineNumber":2,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API contains data used to render \u003chttps://nusmods.com\u003e. It includes data on modules offered by NUS and their timetables, as well as information on the locations the classes take place in. You are welcome to use and experiment with the data, which is extracted from official APIs provided by the Registrar\u0027s Office.  The API consists of static JSON files scraped daily from the school\u0027s APIs. This means it only partially follow REST conventions, and all resources are read only. All successful responses will return JSON, and all endpoints end in `.json`.  The shape of the data returned by these endpoints are designed for NUSMods in mind. If you have any questions or find that you need the data in other shapes for other purposes, feel free to reach out to us:  - **Telegram**: \u003chttps://telegram.me/nusmods\u003e - **Mailing list**: \u003cnusmods@googlegroups.com\u003e (for security related issues please email \u003cmods@nusmods.com\u003e instead)  ## Fetching data  Any HTTP client can be used to fetch data from the API. HTTPS is preferred, but the server will also respond to HTTP requests. The server supports HTTP 1.1 as well as HTTP 2 over HTTPS, and supports gzip compression.  The API has no authentication, and is not rate limited. While the server can respond to a large number of requests simultaneously, we request that you be polite with resource usage so as not to disrupt nusmods.com, which relies on the same API server. In general there is no need to fetch data from the API more than once per day, as that is the frequency at which we update the data.  [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) headers are enabled on all endpoints, so client-side JavaScript can use also use the API.  ## TypeScript types  Since the NUSMods is written in TypeScript, typings are available in the source for the scraper. These may be easier to read than the documentation generated by Swagger.  - Module types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/modules.ts\u003e - Venue types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/venues.ts\u003e  ## Data  Below are some notes about the data returned from the API. Feel free to talk to us or create an issue if any of it is not clear.  ### Module data  Module endpoints return information on modules offered by NUS. Most of the module data is self-explanatory, but some of the data are more complex and is explained here.  #### Lessons  Each lesson in a timetable has a lesson type `lessonType` and class number `ClassNo`. Every student must take one of each lesson type offered by the module. For example, this module offers two tutorials and one lecture. That means the student must attend the lecture, and can choose one of the two tutorials to attend.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"01\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1100\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"COM1-0207\\\"     },     {       \\\"classNo\\\": \\\"02\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Friday\\\",       \\\"startTime\\\": \\\"0900\\\",       \\\"endTime\\\": \\\"1000\\\",       \\\"venue\\\": \\\"COM1-0209\\\"     }   ] } ```  Each lesson has a `classNo` key. There can be multiple lessons of the same type and class number, in which case students must attend both. In this example, students can choose to attend either lecture group 1 on Tuesdays and Wednesdays, or lecture group 2 on Mondays and Wednesdays.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1400\\\",       \\\"endTime\\\": \\\"1500\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Monday\\\",       \\\"startTime\\\": \\\"1000\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1500\\\",       \\\"endTime\\\": \\\"1600\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     }   ] } ```  #### Lesson Weeks  The `weeks` key on lessons can return data in one of two forms.  Weeks is usually a sorted array of numbers. In this case it represents the school weeks the lesson occurs on, from 1 to 13.  Some classes have lessons outside of the school timetable. In this case a `WeekRange` object is returned. The object will always contain a `start` and `end` key representing the start and end date of lessons. The example below has classes every week from 17th Jan to 18th April.  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-04-18\\\" } ```  Optionally it can also include `weekInterval`, a positive integer describing the number of weeks between each lesson, and `weeks`, an array of positive integers describing the weeks on which the lesson will fall, with week 1 being the starting date. If these are not present you can assume lessons will occur every week.  The following example has lessons on 17th Jan (week 1), 24th Jan (week 2), 7th Feb (week 4) and 21st Feb (week 6).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-21\\\",   \\\"weeks\\\": [1, 2, 4, 6] } ```  The following example has lessons on 17th Jan (week 1), 31st Jan (week 3), 14th Feb (week 5) and 28th Feb (week 7).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-28\\\",   \\\"weekInterval\\\": 2 } ```  #### Workload  The `workload` key can return data in one of two forms.  Workload is usually a **5-tuple of numbers**, describing the estimated number of hours per week the student is expected to put in for the module for **lectures, tutorials, laboratory, projects/fieldwork, and preparatory work** respectively. For example, a workload of `[2, 1, 1, 3, 3]` means the student should spend every week  - 2 hours in lectures - 1 hour in tutorials - 1 hour at the lab - 3 hours doing project work - 3 hours preparing for classes  Each module credit represents 2.5 hours of work each week, so the standard 4 MC module represents 10 hours of work each week. Module credit may not be integers.  Note that this is only an estimate, and may be outdated or differ significantly in reality. Some modules also incorrectly lists the **total** workload hours instead of weekly, so very large values may show up.  This value is parsed from a string provided by the school, and occasionally this field will contain unusual values which cannot be parsed. In this case this field will contain the original **string** instead, which should be displayed as-is to the user.  #### Prerequisite, corequisite and preclusions  These three keys determine whether a student can take a module.  **Prerequisites** are requirements you have to meet before you can take a module. These are usually in the form of other modules (see prerequisite tree below for a machine readable format), but can also be things like \u0027taken A-level H2 math\u0027 or \u002770 MCs and above\u0027.  **Preclusions** refer to modules or requirements that cannot be taken if this module is taken, and vice versa. These are usually modules whose content overlaps significantly with this module, and can usually be used to replace each other to fulfill prerequisites.  **Corequisites** are modules that must be taken together with this module in the same semester. This usually refer to twined modules - modules which have linked syllabuses.  #### Prerequisite Tree  The `prereqTree` key is return on the individual module endpoint (`/modules/{moduleCode`). Not all modules have prerequisites, and some have prerequisites that cannot be properly represented as a tree, in which case this key will not appear.  This describes the prerequisites that need to be fulfilled before this module can be taken. The data structure is recursive and represents a tree.  ```json {   \\\"and\\\": [     \\\"CS1231\\\",     {       \\\"or\\\": [\\\"CS1010S\\\", \\\"CS1010X\\\"]     }   ] } ```  In the example, this module requires CS1231 and either CS1010S or CS1010X. This can be visualized as  ```            ┌ CS1231 ── all of ─┤            │         ┌ CS1010            └ one of ─┤                      └ CS1010X ```  The module information also contains the inverse of this, that is, modules whose requirements are fulfilled by this module (taking this module will allow you to take these modules in the following semester). The data is found on the `fulfillRequirements` key as an array of module codes.  ### Venue data  Venue data is simply the module timetable restructured to show the lessons happening at each classroom.  The venue list endpoint returns a list of all locations that are used in the semester. Note that this is not a comprehensive list of locations, but rather just a list of venues that appears in module lessons.  The venue information endpoint returns the full class and occupancy information about a venue. The `classes` key contains a list of lessons similar to the `timetable` key in module data, but without a `venue` key and with `moduleCode`.","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"shenyih0ng"},"content":" * The version of the OpenAPI document: 2.0.0","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"shenyih0ng"},"content":" * Contact: nusmods@googlegroups.com","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"shenyih0ng"},"content":" * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"shenyih0ng"},"content":" * https://openapi-generator.tech","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"shenyih0ng"},"content":" * Do not edit the class manually.","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"shenyih0ng"},"content":"package org.openapitools.client;","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonInclude;","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.jackson.nullable.JsonNullableModule;","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"shenyih0ng"},"content":"import java.io.InputStream;","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"shenyih0ng"},"content":"import java.net.URI;","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"shenyih0ng"},"content":"import java.net.URLEncoder;","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"shenyih0ng"},"content":"import java.net.http.HttpClient;","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"shenyih0ng"},"content":"import java.net.http.HttpConnectTimeoutException;","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"shenyih0ng"},"content":"import java.net.http.HttpRequest;","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"shenyih0ng"},"content":"import java.net.http.HttpResponse;","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"shenyih0ng"},"content":"import java.time.Duration;","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"shenyih0ng"},"content":"import java.time.OffsetDateTime;","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"shenyih0ng"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Collection;","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Collections;","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"shenyih0ng"},"content":"import java.util.List;","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"shenyih0ng"},"content":"import java.util.StringJoiner;","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"shenyih0ng"},"content":"import java.util.function.Consumer;","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"shenyih0ng"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"shenyih0ng"},"content":"import static java.nio.charset.StandardCharsets.UTF_8;","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"shenyih0ng"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"shenyih0ng"},"content":" * Configuration and utility class for API clients.","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"shenyih0ng"},"content":" * \u003cp\u003eThis class can be constructed and modified, then used to instantiate the","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"shenyih0ng"},"content":" * various API classes. The API classes use the settings in this class to","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"shenyih0ng"},"content":" * configure themselves, but otherwise do not store a link to this class.\u003c/p\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"shenyih0ng"},"content":" * \u003cp\u003eThis class is mutable and not synchronized, so it is not thread-safe.","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"shenyih0ng"},"content":" * The API classes generated from this are immutable and thread-safe.\u003c/p\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"shenyih0ng"},"content":" * \u003cp\u003eThe setter methods of this class return the current object to facilitate","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"shenyih0ng"},"content":" * a fluent style of configuration.\u003c/p\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"shenyih0ng"},"content":"@javax.annotation.processing.Generated(value \u003d \"org.openapitools.codegen.languages.JavaClientCodegen\", date \u003d \"2022-10-03T22:22:26.802458+08:00[Asia/Singapore]\")","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"shenyih0ng"},"content":"public class ApiClient {","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"shenyih0ng"},"content":"  private HttpClient.Builder builder;","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"shenyih0ng"},"content":"  private ObjectMapper mapper;","lastModifiedDate":"2022-10-03"},{"lineNumber":59,"author":{"gitId":"shenyih0ng"},"content":"  private String scheme;","lastModifiedDate":"2022-10-03"},{"lineNumber":60,"author":{"gitId":"shenyih0ng"},"content":"  private String host;","lastModifiedDate":"2022-10-03"},{"lineNumber":61,"author":{"gitId":"shenyih0ng"},"content":"  private int port;","lastModifiedDate":"2022-10-03"},{"lineNumber":62,"author":{"gitId":"shenyih0ng"},"content":"  private String basePath;","lastModifiedDate":"2022-10-03"},{"lineNumber":63,"author":{"gitId":"shenyih0ng"},"content":"  private Consumer\u003cHttpRequest.Builder\u003e interceptor;","lastModifiedDate":"2022-10-03"},{"lineNumber":64,"author":{"gitId":"shenyih0ng"},"content":"  private Consumer\u003cHttpResponse\u003cInputStream\u003e\u003e responseInterceptor;","lastModifiedDate":"2022-10-03"},{"lineNumber":65,"author":{"gitId":"shenyih0ng"},"content":"  private Consumer\u003cHttpResponse\u003cString\u003e\u003e asyncResponseInterceptor;","lastModifiedDate":"2022-10-03"},{"lineNumber":66,"author":{"gitId":"shenyih0ng"},"content":"  private Duration readTimeout;","lastModifiedDate":"2022-10-03"},{"lineNumber":67,"author":{"gitId":"shenyih0ng"},"content":"  private Duration connectTimeout;","lastModifiedDate":"2022-10-03"},{"lineNumber":68,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":69,"author":{"gitId":"shenyih0ng"},"content":"  private static String valueToString(Object value) {","lastModifiedDate":"2022-10-03"},{"lineNumber":70,"author":{"gitId":"shenyih0ng"},"content":"    if (value \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":71,"author":{"gitId":"shenyih0ng"},"content":"      return \"\";","lastModifiedDate":"2022-10-03"},{"lineNumber":72,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":73,"author":{"gitId":"shenyih0ng"},"content":"    if (value instanceof OffsetDateTime) {","lastModifiedDate":"2022-10-03"},{"lineNumber":74,"author":{"gitId":"shenyih0ng"},"content":"      return ((OffsetDateTime) value).format(DateTimeFormatter.ISO_OFFSET_DATE_TIME);","lastModifiedDate":"2022-10-03"},{"lineNumber":75,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":76,"author":{"gitId":"shenyih0ng"},"content":"    return value.toString();","lastModifiedDate":"2022-10-03"},{"lineNumber":77,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":78,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":79,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":80,"author":{"gitId":"shenyih0ng"},"content":"   * URL encode a string in the UTF-8 encoding.","lastModifiedDate":"2022-10-03"},{"lineNumber":81,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":82,"author":{"gitId":"shenyih0ng"},"content":"   * @param s String to encode.","lastModifiedDate":"2022-10-03"},{"lineNumber":83,"author":{"gitId":"shenyih0ng"},"content":"   * @return URL-encoded representation of the input string.","lastModifiedDate":"2022-10-03"},{"lineNumber":84,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":85,"author":{"gitId":"shenyih0ng"},"content":"  public static String urlEncode(String s) {","lastModifiedDate":"2022-10-03"},{"lineNumber":86,"author":{"gitId":"shenyih0ng"},"content":"    return URLEncoder.encode(s, UTF_8).replaceAll(\"\\\\+\", \"%20\");","lastModifiedDate":"2022-10-03"},{"lineNumber":87,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":88,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":89,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":90,"author":{"gitId":"shenyih0ng"},"content":"   * Convert a URL query name/value parameter to a list of encoded {@link Pair}","lastModifiedDate":"2022-10-03"},{"lineNumber":91,"author":{"gitId":"shenyih0ng"},"content":"   * objects.","lastModifiedDate":"2022-10-03"},{"lineNumber":92,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":93,"author":{"gitId":"shenyih0ng"},"content":"   * \u003cp\u003eThe value can be null, in which case an empty list is returned.\u003c/p\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":94,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":95,"author":{"gitId":"shenyih0ng"},"content":"   * @param name The query name parameter.","lastModifiedDate":"2022-10-03"},{"lineNumber":96,"author":{"gitId":"shenyih0ng"},"content":"   * @param value The query value, which may not be a collection but may be","lastModifiedDate":"2022-10-03"},{"lineNumber":97,"author":{"gitId":"shenyih0ng"},"content":"   *              null.","lastModifiedDate":"2022-10-03"},{"lineNumber":98,"author":{"gitId":"shenyih0ng"},"content":"   * @return A singleton list of the {@link Pair} objects representing the input","lastModifiedDate":"2022-10-03"},{"lineNumber":99,"author":{"gitId":"shenyih0ng"},"content":"   * parameters, which is encoded for use in a URL. If the value is null, an","lastModifiedDate":"2022-10-03"},{"lineNumber":100,"author":{"gitId":"shenyih0ng"},"content":"   * empty list is returned.","lastModifiedDate":"2022-10-03"},{"lineNumber":101,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":102,"author":{"gitId":"shenyih0ng"},"content":"  public static List\u003cPair\u003e parameterToPairs(String name, Object value) {","lastModifiedDate":"2022-10-03"},{"lineNumber":103,"author":{"gitId":"shenyih0ng"},"content":"    if (name \u003d\u003d null || name.isEmpty() || value \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":104,"author":{"gitId":"shenyih0ng"},"content":"      return Collections.emptyList();","lastModifiedDate":"2022-10-03"},{"lineNumber":105,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":106,"author":{"gitId":"shenyih0ng"},"content":"    return Collections.singletonList(new Pair(urlEncode(name), urlEncode(valueToString(value))));","lastModifiedDate":"2022-10-03"},{"lineNumber":107,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":108,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":109,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":110,"author":{"gitId":"shenyih0ng"},"content":"   * Convert a URL query name/collection parameter to a list of encoded","lastModifiedDate":"2022-10-03"},{"lineNumber":111,"author":{"gitId":"shenyih0ng"},"content":"   * {@link Pair} objects.","lastModifiedDate":"2022-10-03"},{"lineNumber":112,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":113,"author":{"gitId":"shenyih0ng"},"content":"   * @param collectionFormat The swagger collectionFormat string (csv, tsv, etc).","lastModifiedDate":"2022-10-03"},{"lineNumber":114,"author":{"gitId":"shenyih0ng"},"content":"   * @param name The query name parameter.","lastModifiedDate":"2022-10-03"},{"lineNumber":115,"author":{"gitId":"shenyih0ng"},"content":"   * @param values A collection of values for the given query name, which may be","lastModifiedDate":"2022-10-03"},{"lineNumber":116,"author":{"gitId":"shenyih0ng"},"content":"   *               null.","lastModifiedDate":"2022-10-03"},{"lineNumber":117,"author":{"gitId":"shenyih0ng"},"content":"   * @return A list of {@link Pair} objects representing the input parameters,","lastModifiedDate":"2022-10-03"},{"lineNumber":118,"author":{"gitId":"shenyih0ng"},"content":"   * which is encoded for use in a URL. If the values collection is null, an","lastModifiedDate":"2022-10-03"},{"lineNumber":119,"author":{"gitId":"shenyih0ng"},"content":"   * empty list is returned.","lastModifiedDate":"2022-10-03"},{"lineNumber":120,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":121,"author":{"gitId":"shenyih0ng"},"content":"  public static List\u003cPair\u003e parameterToPairs(","lastModifiedDate":"2022-10-03"},{"lineNumber":122,"author":{"gitId":"shenyih0ng"},"content":"      String collectionFormat, String name, Collection\u003c?\u003e values) {","lastModifiedDate":"2022-10-03"},{"lineNumber":123,"author":{"gitId":"shenyih0ng"},"content":"    if (name \u003d\u003d null || name.isEmpty() || values \u003d\u003d null || values.isEmpty()) {","lastModifiedDate":"2022-10-03"},{"lineNumber":124,"author":{"gitId":"shenyih0ng"},"content":"      return Collections.emptyList();","lastModifiedDate":"2022-10-03"},{"lineNumber":125,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":126,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":127,"author":{"gitId":"shenyih0ng"},"content":"    // get the collection format (default: csv)","lastModifiedDate":"2022-10-03"},{"lineNumber":128,"author":{"gitId":"shenyih0ng"},"content":"    String format \u003d collectionFormat \u003d\u003d null || collectionFormat.isEmpty() ? \"csv\" : collectionFormat;","lastModifiedDate":"2022-10-03"},{"lineNumber":129,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":130,"author":{"gitId":"shenyih0ng"},"content":"    // create the params based on the collection format","lastModifiedDate":"2022-10-03"},{"lineNumber":131,"author":{"gitId":"shenyih0ng"},"content":"    if (\"multi\".equals(format)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":132,"author":{"gitId":"shenyih0ng"},"content":"      return values.stream()","lastModifiedDate":"2022-10-03"},{"lineNumber":133,"author":{"gitId":"shenyih0ng"},"content":"          .map(value -\u003e new Pair(urlEncode(name), urlEncode(valueToString(value))))","lastModifiedDate":"2022-10-03"},{"lineNumber":134,"author":{"gitId":"shenyih0ng"},"content":"          .collect(Collectors.toList());","lastModifiedDate":"2022-10-03"},{"lineNumber":135,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":136,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":137,"author":{"gitId":"shenyih0ng"},"content":"    String delimiter;","lastModifiedDate":"2022-10-03"},{"lineNumber":138,"author":{"gitId":"shenyih0ng"},"content":"    switch(format) {","lastModifiedDate":"2022-10-03"},{"lineNumber":139,"author":{"gitId":"shenyih0ng"},"content":"      case \"csv\":","lastModifiedDate":"2022-10-03"},{"lineNumber":140,"author":{"gitId":"shenyih0ng"},"content":"        delimiter \u003d urlEncode(\",\");","lastModifiedDate":"2022-10-03"},{"lineNumber":141,"author":{"gitId":"shenyih0ng"},"content":"        break;","lastModifiedDate":"2022-10-03"},{"lineNumber":142,"author":{"gitId":"shenyih0ng"},"content":"      case \"ssv\":","lastModifiedDate":"2022-10-03"},{"lineNumber":143,"author":{"gitId":"shenyih0ng"},"content":"        delimiter \u003d urlEncode(\" \");","lastModifiedDate":"2022-10-03"},{"lineNumber":144,"author":{"gitId":"shenyih0ng"},"content":"        break;","lastModifiedDate":"2022-10-03"},{"lineNumber":145,"author":{"gitId":"shenyih0ng"},"content":"      case \"tsv\":","lastModifiedDate":"2022-10-03"},{"lineNumber":146,"author":{"gitId":"shenyih0ng"},"content":"        delimiter \u003d urlEncode(\"\\t\");","lastModifiedDate":"2022-10-03"},{"lineNumber":147,"author":{"gitId":"shenyih0ng"},"content":"        break;","lastModifiedDate":"2022-10-03"},{"lineNumber":148,"author":{"gitId":"shenyih0ng"},"content":"      case \"pipes\":","lastModifiedDate":"2022-10-03"},{"lineNumber":149,"author":{"gitId":"shenyih0ng"},"content":"        delimiter \u003d urlEncode(\"|\");","lastModifiedDate":"2022-10-03"},{"lineNumber":150,"author":{"gitId":"shenyih0ng"},"content":"        break;","lastModifiedDate":"2022-10-03"},{"lineNumber":151,"author":{"gitId":"shenyih0ng"},"content":"      default:","lastModifiedDate":"2022-10-03"},{"lineNumber":152,"author":{"gitId":"shenyih0ng"},"content":"        throw new IllegalArgumentException(\"Illegal collection format: \" + collectionFormat);","lastModifiedDate":"2022-10-03"},{"lineNumber":153,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":154,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":155,"author":{"gitId":"shenyih0ng"},"content":"    StringJoiner joiner \u003d new StringJoiner(delimiter);","lastModifiedDate":"2022-10-03"},{"lineNumber":156,"author":{"gitId":"shenyih0ng"},"content":"    for (Object value : values) {","lastModifiedDate":"2022-10-03"},{"lineNumber":157,"author":{"gitId":"shenyih0ng"},"content":"      joiner.add(urlEncode(valueToString(value)));","lastModifiedDate":"2022-10-03"},{"lineNumber":158,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":159,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":160,"author":{"gitId":"shenyih0ng"},"content":"    return Collections.singletonList(new Pair(urlEncode(name), joiner.toString()));","lastModifiedDate":"2022-10-03"},{"lineNumber":161,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":162,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":163,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":164,"author":{"gitId":"shenyih0ng"},"content":"   * Create an instance of ApiClient.","lastModifiedDate":"2022-10-03"},{"lineNumber":165,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":166,"author":{"gitId":"shenyih0ng"},"content":"  public ApiClient() {","lastModifiedDate":"2022-10-03"},{"lineNumber":167,"author":{"gitId":"shenyih0ng"},"content":"    this.builder \u003d createDefaultHttpClientBuilder();","lastModifiedDate":"2022-10-03"},{"lineNumber":168,"author":{"gitId":"shenyih0ng"},"content":"    this.mapper \u003d createDefaultObjectMapper();","lastModifiedDate":"2022-10-03"},{"lineNumber":169,"author":{"gitId":"shenyih0ng"},"content":"    updateBaseUri(getDefaultBaseUri());","lastModifiedDate":"2022-10-03"},{"lineNumber":170,"author":{"gitId":"shenyih0ng"},"content":"    interceptor \u003d null;","lastModifiedDate":"2022-10-03"},{"lineNumber":171,"author":{"gitId":"shenyih0ng"},"content":"    readTimeout \u003d null;","lastModifiedDate":"2022-10-03"},{"lineNumber":172,"author":{"gitId":"shenyih0ng"},"content":"    connectTimeout \u003d null;","lastModifiedDate":"2022-10-03"},{"lineNumber":173,"author":{"gitId":"shenyih0ng"},"content":"    responseInterceptor \u003d null;","lastModifiedDate":"2022-10-03"},{"lineNumber":174,"author":{"gitId":"shenyih0ng"},"content":"    asyncResponseInterceptor \u003d null;","lastModifiedDate":"2022-10-03"},{"lineNumber":175,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":176,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":177,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":178,"author":{"gitId":"shenyih0ng"},"content":"   * Create an instance of ApiClient.","lastModifiedDate":"2022-10-03"},{"lineNumber":179,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":180,"author":{"gitId":"shenyih0ng"},"content":"   * @param builder Http client builder.","lastModifiedDate":"2022-10-03"},{"lineNumber":181,"author":{"gitId":"shenyih0ng"},"content":"   * @param mapper Object mapper.","lastModifiedDate":"2022-10-03"},{"lineNumber":182,"author":{"gitId":"shenyih0ng"},"content":"   * @param baseUri Base URI","lastModifiedDate":"2022-10-03"},{"lineNumber":183,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":184,"author":{"gitId":"shenyih0ng"},"content":"  public ApiClient(HttpClient.Builder builder, ObjectMapper mapper, String baseUri) {","lastModifiedDate":"2022-10-03"},{"lineNumber":185,"author":{"gitId":"shenyih0ng"},"content":"    this.builder \u003d builder;","lastModifiedDate":"2022-10-03"},{"lineNumber":186,"author":{"gitId":"shenyih0ng"},"content":"    this.mapper \u003d mapper;","lastModifiedDate":"2022-10-03"},{"lineNumber":187,"author":{"gitId":"shenyih0ng"},"content":"    updateBaseUri(baseUri !\u003d null ? baseUri : getDefaultBaseUri());","lastModifiedDate":"2022-10-03"},{"lineNumber":188,"author":{"gitId":"shenyih0ng"},"content":"    interceptor \u003d null;","lastModifiedDate":"2022-10-03"},{"lineNumber":189,"author":{"gitId":"shenyih0ng"},"content":"    readTimeout \u003d null;","lastModifiedDate":"2022-10-03"},{"lineNumber":190,"author":{"gitId":"shenyih0ng"},"content":"    connectTimeout \u003d null;","lastModifiedDate":"2022-10-03"},{"lineNumber":191,"author":{"gitId":"shenyih0ng"},"content":"    responseInterceptor \u003d null;","lastModifiedDate":"2022-10-03"},{"lineNumber":192,"author":{"gitId":"shenyih0ng"},"content":"    asyncResponseInterceptor \u003d null;","lastModifiedDate":"2022-10-03"},{"lineNumber":193,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":194,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":195,"author":{"gitId":"shenyih0ng"},"content":"  protected ObjectMapper createDefaultObjectMapper() {","lastModifiedDate":"2022-10-03"},{"lineNumber":196,"author":{"gitId":"shenyih0ng"},"content":"    ObjectMapper mapper \u003d new ObjectMapper();","lastModifiedDate":"2022-10-03"},{"lineNumber":197,"author":{"gitId":"shenyih0ng"},"content":"    mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);","lastModifiedDate":"2022-10-03"},{"lineNumber":198,"author":{"gitId":"shenyih0ng"},"content":"    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);","lastModifiedDate":"2022-10-03"},{"lineNumber":199,"author":{"gitId":"shenyih0ng"},"content":"    mapper.configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false);","lastModifiedDate":"2022-10-03"},{"lineNumber":200,"author":{"gitId":"shenyih0ng"},"content":"    mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);","lastModifiedDate":"2022-10-03"},{"lineNumber":201,"author":{"gitId":"shenyih0ng"},"content":"    mapper.enable(SerializationFeature.WRITE_ENUMS_USING_TO_STRING);","lastModifiedDate":"2022-10-03"},{"lineNumber":202,"author":{"gitId":"shenyih0ng"},"content":"    mapper.enable(DeserializationFeature.READ_ENUMS_USING_TO_STRING);","lastModifiedDate":"2022-10-03"},{"lineNumber":203,"author":{"gitId":"shenyih0ng"},"content":"    mapper.disable(DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE);","lastModifiedDate":"2022-10-03"},{"lineNumber":204,"author":{"gitId":"shenyih0ng"},"content":"    mapper.registerModule(new JavaTimeModule());","lastModifiedDate":"2022-10-03"},{"lineNumber":205,"author":{"gitId":"shenyih0ng"},"content":"    mapper.registerModule(new JsonNullableModule());","lastModifiedDate":"2022-10-03"},{"lineNumber":206,"author":{"gitId":"shenyih0ng"},"content":"    return mapper;","lastModifiedDate":"2022-10-03"},{"lineNumber":207,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":208,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":209,"author":{"gitId":"shenyih0ng"},"content":"  protected String getDefaultBaseUri() {","lastModifiedDate":"2022-10-03"},{"lineNumber":210,"author":{"gitId":"shenyih0ng"},"content":"    return \"https://api.nusmods.com/v2\";","lastModifiedDate":"2022-10-03"},{"lineNumber":211,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":212,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":213,"author":{"gitId":"shenyih0ng"},"content":"  protected HttpClient.Builder createDefaultHttpClientBuilder() {","lastModifiedDate":"2022-10-03"},{"lineNumber":214,"author":{"gitId":"shenyih0ng"},"content":"    return HttpClient.newBuilder();","lastModifiedDate":"2022-10-03"},{"lineNumber":215,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":216,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":217,"author":{"gitId":"shenyih0ng"},"content":"  public void updateBaseUri(String baseUri) {","lastModifiedDate":"2022-10-03"},{"lineNumber":218,"author":{"gitId":"shenyih0ng"},"content":"    URI uri \u003d URI.create(baseUri);","lastModifiedDate":"2022-10-03"},{"lineNumber":219,"author":{"gitId":"shenyih0ng"},"content":"    scheme \u003d uri.getScheme();","lastModifiedDate":"2022-10-03"},{"lineNumber":220,"author":{"gitId":"shenyih0ng"},"content":"    host \u003d uri.getHost();","lastModifiedDate":"2022-10-03"},{"lineNumber":221,"author":{"gitId":"shenyih0ng"},"content":"    port \u003d uri.getPort();","lastModifiedDate":"2022-10-03"},{"lineNumber":222,"author":{"gitId":"shenyih0ng"},"content":"    basePath \u003d uri.getRawPath();","lastModifiedDate":"2022-10-03"},{"lineNumber":223,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":224,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":225,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":226,"author":{"gitId":"shenyih0ng"},"content":"   * Set a custom {@link HttpClient.Builder} object to use when creating the","lastModifiedDate":"2022-10-03"},{"lineNumber":227,"author":{"gitId":"shenyih0ng"},"content":"   * {@link HttpClient} that is used by the API client.","lastModifiedDate":"2022-10-03"},{"lineNumber":228,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":229,"author":{"gitId":"shenyih0ng"},"content":"   * @param builder Custom client builder.","lastModifiedDate":"2022-10-03"},{"lineNumber":230,"author":{"gitId":"shenyih0ng"},"content":"   * @return This object.","lastModifiedDate":"2022-10-03"},{"lineNumber":231,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":232,"author":{"gitId":"shenyih0ng"},"content":"  public ApiClient setHttpClientBuilder(HttpClient.Builder builder) {","lastModifiedDate":"2022-10-03"},{"lineNumber":233,"author":{"gitId":"shenyih0ng"},"content":"    this.builder \u003d builder;","lastModifiedDate":"2022-10-03"},{"lineNumber":234,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":235,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":236,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":237,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":238,"author":{"gitId":"shenyih0ng"},"content":"   * Get an {@link HttpClient} based on the current {@link HttpClient.Builder}.","lastModifiedDate":"2022-10-03"},{"lineNumber":239,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":240,"author":{"gitId":"shenyih0ng"},"content":"   * \u003cp\u003eThe returned object is immutable and thread-safe.\u003c/p\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":241,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":242,"author":{"gitId":"shenyih0ng"},"content":"   * @return The HTTP client.","lastModifiedDate":"2022-10-03"},{"lineNumber":243,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":244,"author":{"gitId":"shenyih0ng"},"content":"  public HttpClient getHttpClient() {","lastModifiedDate":"2022-10-03"},{"lineNumber":245,"author":{"gitId":"shenyih0ng"},"content":"    return builder.build();","lastModifiedDate":"2022-10-03"},{"lineNumber":246,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":247,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":248,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":249,"author":{"gitId":"shenyih0ng"},"content":"   * Set a custom {@link ObjectMapper} to serialize and deserialize the request","lastModifiedDate":"2022-10-03"},{"lineNumber":250,"author":{"gitId":"shenyih0ng"},"content":"   * and response bodies.","lastModifiedDate":"2022-10-03"},{"lineNumber":251,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":252,"author":{"gitId":"shenyih0ng"},"content":"   * @param mapper Custom object mapper.","lastModifiedDate":"2022-10-03"},{"lineNumber":253,"author":{"gitId":"shenyih0ng"},"content":"   * @return This object.","lastModifiedDate":"2022-10-03"},{"lineNumber":254,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":255,"author":{"gitId":"shenyih0ng"},"content":"  public ApiClient setObjectMapper(ObjectMapper mapper) {","lastModifiedDate":"2022-10-03"},{"lineNumber":256,"author":{"gitId":"shenyih0ng"},"content":"    this.mapper \u003d mapper;","lastModifiedDate":"2022-10-03"},{"lineNumber":257,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":258,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":259,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":260,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":261,"author":{"gitId":"shenyih0ng"},"content":"   * Get a copy of the current {@link ObjectMapper}.","lastModifiedDate":"2022-10-03"},{"lineNumber":262,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":263,"author":{"gitId":"shenyih0ng"},"content":"   * @return A copy of the current object mapper.","lastModifiedDate":"2022-10-03"},{"lineNumber":264,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":265,"author":{"gitId":"shenyih0ng"},"content":"  public ObjectMapper getObjectMapper() {","lastModifiedDate":"2022-10-03"},{"lineNumber":266,"author":{"gitId":"shenyih0ng"},"content":"    return mapper.copy();","lastModifiedDate":"2022-10-03"},{"lineNumber":267,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":268,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":269,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":270,"author":{"gitId":"shenyih0ng"},"content":"   * Set a custom host name for the target service.","lastModifiedDate":"2022-10-03"},{"lineNumber":271,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":272,"author":{"gitId":"shenyih0ng"},"content":"   * @param host The host name of the target service.","lastModifiedDate":"2022-10-03"},{"lineNumber":273,"author":{"gitId":"shenyih0ng"},"content":"   * @return This object.","lastModifiedDate":"2022-10-03"},{"lineNumber":274,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":275,"author":{"gitId":"shenyih0ng"},"content":"  public ApiClient setHost(String host) {","lastModifiedDate":"2022-10-03"},{"lineNumber":276,"author":{"gitId":"shenyih0ng"},"content":"    this.host \u003d host;","lastModifiedDate":"2022-10-03"},{"lineNumber":277,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":278,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":279,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":280,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":281,"author":{"gitId":"shenyih0ng"},"content":"   * Set a custom port number for the target service.","lastModifiedDate":"2022-10-03"},{"lineNumber":282,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":283,"author":{"gitId":"shenyih0ng"},"content":"   * @param port The port of the target service. Set this to -1 to reset the","lastModifiedDate":"2022-10-03"},{"lineNumber":284,"author":{"gitId":"shenyih0ng"},"content":"   *             value to the default for the scheme.","lastModifiedDate":"2022-10-03"},{"lineNumber":285,"author":{"gitId":"shenyih0ng"},"content":"   * @return This object.","lastModifiedDate":"2022-10-03"},{"lineNumber":286,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":287,"author":{"gitId":"shenyih0ng"},"content":"  public ApiClient setPort(int port) {","lastModifiedDate":"2022-10-03"},{"lineNumber":288,"author":{"gitId":"shenyih0ng"},"content":"    this.port \u003d port;","lastModifiedDate":"2022-10-03"},{"lineNumber":289,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":290,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":291,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":292,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":293,"author":{"gitId":"shenyih0ng"},"content":"   * Set a custom base path for the target service, for example \u0027/v2\u0027.","lastModifiedDate":"2022-10-03"},{"lineNumber":294,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":295,"author":{"gitId":"shenyih0ng"},"content":"   * @param basePath The base path against which the rest of the path is","lastModifiedDate":"2022-10-03"},{"lineNumber":296,"author":{"gitId":"shenyih0ng"},"content":"   *                 resolved.","lastModifiedDate":"2022-10-03"},{"lineNumber":297,"author":{"gitId":"shenyih0ng"},"content":"   * @return This object.","lastModifiedDate":"2022-10-03"},{"lineNumber":298,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":299,"author":{"gitId":"shenyih0ng"},"content":"  public ApiClient setBasePath(String basePath) {","lastModifiedDate":"2022-10-03"},{"lineNumber":300,"author":{"gitId":"shenyih0ng"},"content":"    this.basePath \u003d basePath;","lastModifiedDate":"2022-10-03"},{"lineNumber":301,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":302,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":303,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":304,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":305,"author":{"gitId":"shenyih0ng"},"content":"   * Get the base URI to resolve the endpoint paths against.","lastModifiedDate":"2022-10-03"},{"lineNumber":306,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":307,"author":{"gitId":"shenyih0ng"},"content":"   * @return The complete base URI that the rest of the API parameters are","lastModifiedDate":"2022-10-03"},{"lineNumber":308,"author":{"gitId":"shenyih0ng"},"content":"   * resolved against.","lastModifiedDate":"2022-10-03"},{"lineNumber":309,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":310,"author":{"gitId":"shenyih0ng"},"content":"  public String getBaseUri() {","lastModifiedDate":"2022-10-03"},{"lineNumber":311,"author":{"gitId":"shenyih0ng"},"content":"    return scheme + \"://\" + host + (port \u003d\u003d -1 ? \"\" : \":\" + port) + basePath;","lastModifiedDate":"2022-10-03"},{"lineNumber":312,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":313,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":314,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":315,"author":{"gitId":"shenyih0ng"},"content":"   * Set a custom scheme for the target service, for example \u0027https\u0027.","lastModifiedDate":"2022-10-03"},{"lineNumber":316,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":317,"author":{"gitId":"shenyih0ng"},"content":"   * @param scheme The scheme of the target service","lastModifiedDate":"2022-10-03"},{"lineNumber":318,"author":{"gitId":"shenyih0ng"},"content":"   * @return This object.","lastModifiedDate":"2022-10-03"},{"lineNumber":319,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":320,"author":{"gitId":"shenyih0ng"},"content":"  public ApiClient setScheme(String scheme){","lastModifiedDate":"2022-10-03"},{"lineNumber":321,"author":{"gitId":"shenyih0ng"},"content":"    this.scheme \u003d scheme;","lastModifiedDate":"2022-10-03"},{"lineNumber":322,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":323,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":324,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":325,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":326,"author":{"gitId":"shenyih0ng"},"content":"   * Set a custom request interceptor.","lastModifiedDate":"2022-10-03"},{"lineNumber":327,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":328,"author":{"gitId":"shenyih0ng"},"content":"   * \u003cp\u003eA request interceptor is a mechanism for altering each request before it","lastModifiedDate":"2022-10-03"},{"lineNumber":329,"author":{"gitId":"shenyih0ng"},"content":"   * is sent. After the request has been fully configured but not yet built, the","lastModifiedDate":"2022-10-03"},{"lineNumber":330,"author":{"gitId":"shenyih0ng"},"content":"   * request builder is passed into this function for further modification,","lastModifiedDate":"2022-10-03"},{"lineNumber":331,"author":{"gitId":"shenyih0ng"},"content":"   * after which it is sent out.\u003c/p\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":332,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":333,"author":{"gitId":"shenyih0ng"},"content":"   * \u003cp\u003eThis is useful for altering the requests in a custom manner, such as","lastModifiedDate":"2022-10-03"},{"lineNumber":334,"author":{"gitId":"shenyih0ng"},"content":"   * adding headers. It could also be used for logging and monitoring.\u003c/p\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":335,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":336,"author":{"gitId":"shenyih0ng"},"content":"   * @param interceptor A function invoked before creating each request. A value","lastModifiedDate":"2022-10-03"},{"lineNumber":337,"author":{"gitId":"shenyih0ng"},"content":"   *                    of null resets the interceptor to a no-op.","lastModifiedDate":"2022-10-03"},{"lineNumber":338,"author":{"gitId":"shenyih0ng"},"content":"   * @return This object.","lastModifiedDate":"2022-10-03"},{"lineNumber":339,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":340,"author":{"gitId":"shenyih0ng"},"content":"  public ApiClient setRequestInterceptor(Consumer\u003cHttpRequest.Builder\u003e interceptor) {","lastModifiedDate":"2022-10-03"},{"lineNumber":341,"author":{"gitId":"shenyih0ng"},"content":"    this.interceptor \u003d interceptor;","lastModifiedDate":"2022-10-03"},{"lineNumber":342,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":343,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":344,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":345,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":346,"author":{"gitId":"shenyih0ng"},"content":"   * Get the custom interceptor.","lastModifiedDate":"2022-10-03"},{"lineNumber":347,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":348,"author":{"gitId":"shenyih0ng"},"content":"   * @return The custom interceptor that was set, or null if there isn\u0027t any.","lastModifiedDate":"2022-10-03"},{"lineNumber":349,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":350,"author":{"gitId":"shenyih0ng"},"content":"  public Consumer\u003cHttpRequest.Builder\u003e getRequestInterceptor() {","lastModifiedDate":"2022-10-03"},{"lineNumber":351,"author":{"gitId":"shenyih0ng"},"content":"    return interceptor;","lastModifiedDate":"2022-10-03"},{"lineNumber":352,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":353,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":354,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":355,"author":{"gitId":"shenyih0ng"},"content":"   * Set a custom response interceptor.","lastModifiedDate":"2022-10-03"},{"lineNumber":356,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":357,"author":{"gitId":"shenyih0ng"},"content":"   * \u003cp\u003eThis is useful for logging, monitoring or extraction of header variables\u003c/p\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":358,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":359,"author":{"gitId":"shenyih0ng"},"content":"   * @param interceptor A function invoked before creating each request. A value","lastModifiedDate":"2022-10-03"},{"lineNumber":360,"author":{"gitId":"shenyih0ng"},"content":"   *                    of null resets the interceptor to a no-op.","lastModifiedDate":"2022-10-03"},{"lineNumber":361,"author":{"gitId":"shenyih0ng"},"content":"   * @return This object.","lastModifiedDate":"2022-10-03"},{"lineNumber":362,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":363,"author":{"gitId":"shenyih0ng"},"content":"  public ApiClient setResponseInterceptor(Consumer\u003cHttpResponse\u003cInputStream\u003e\u003e interceptor) {","lastModifiedDate":"2022-10-03"},{"lineNumber":364,"author":{"gitId":"shenyih0ng"},"content":"    this.responseInterceptor \u003d interceptor;","lastModifiedDate":"2022-10-03"},{"lineNumber":365,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":366,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":367,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":368,"author":{"gitId":"shenyih0ng"},"content":" /**","lastModifiedDate":"2022-10-03"},{"lineNumber":369,"author":{"gitId":"shenyih0ng"},"content":"   * Get the custom response interceptor.","lastModifiedDate":"2022-10-03"},{"lineNumber":370,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":371,"author":{"gitId":"shenyih0ng"},"content":"   * @return The custom interceptor that was set, or null if there isn\u0027t any.","lastModifiedDate":"2022-10-03"},{"lineNumber":372,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":373,"author":{"gitId":"shenyih0ng"},"content":"  public Consumer\u003cHttpResponse\u003cInputStream\u003e\u003e getResponseInterceptor() {","lastModifiedDate":"2022-10-03"},{"lineNumber":374,"author":{"gitId":"shenyih0ng"},"content":"    return responseInterceptor;","lastModifiedDate":"2022-10-03"},{"lineNumber":375,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":376,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":377,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":378,"author":{"gitId":"shenyih0ng"},"content":"   * Set a custom async response interceptor. Use this interceptor when asyncNative is set to \u0027true\u0027.","lastModifiedDate":"2022-10-03"},{"lineNumber":379,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":380,"author":{"gitId":"shenyih0ng"},"content":"   * \u003cp\u003eThis is useful for logging, monitoring or extraction of header variables\u003c/p\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":381,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":382,"author":{"gitId":"shenyih0ng"},"content":"   * @param interceptor A function invoked before creating each request. A value","lastModifiedDate":"2022-10-03"},{"lineNumber":383,"author":{"gitId":"shenyih0ng"},"content":"   *                    of null resets the interceptor to a no-op.","lastModifiedDate":"2022-10-03"},{"lineNumber":384,"author":{"gitId":"shenyih0ng"},"content":"   * @return This object.","lastModifiedDate":"2022-10-03"},{"lineNumber":385,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":386,"author":{"gitId":"shenyih0ng"},"content":"  public ApiClient setAsyncResponseInterceptor(Consumer\u003cHttpResponse\u003cString\u003e\u003e interceptor) {","lastModifiedDate":"2022-10-03"},{"lineNumber":387,"author":{"gitId":"shenyih0ng"},"content":"    this.asyncResponseInterceptor \u003d interceptor;","lastModifiedDate":"2022-10-03"},{"lineNumber":388,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":389,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":390,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":391,"author":{"gitId":"shenyih0ng"},"content":" /**","lastModifiedDate":"2022-10-03"},{"lineNumber":392,"author":{"gitId":"shenyih0ng"},"content":"   * Get the custom async response interceptor. Use this interceptor when asyncNative is set to \u0027true\u0027.","lastModifiedDate":"2022-10-03"},{"lineNumber":393,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":394,"author":{"gitId":"shenyih0ng"},"content":"   * @return The custom interceptor that was set, or null if there isn\u0027t any.","lastModifiedDate":"2022-10-03"},{"lineNumber":395,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":396,"author":{"gitId":"shenyih0ng"},"content":"  public Consumer\u003cHttpResponse\u003cString\u003e\u003e getAsyncResponseInterceptor() {","lastModifiedDate":"2022-10-03"},{"lineNumber":397,"author":{"gitId":"shenyih0ng"},"content":"    return asyncResponseInterceptor;","lastModifiedDate":"2022-10-03"},{"lineNumber":398,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":399,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":400,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":401,"author":{"gitId":"shenyih0ng"},"content":"   * Set the read timeout for the http client.","lastModifiedDate":"2022-10-03"},{"lineNumber":402,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":403,"author":{"gitId":"shenyih0ng"},"content":"   * \u003cp\u003eThis is the value used by default for each request, though it can be","lastModifiedDate":"2022-10-03"},{"lineNumber":404,"author":{"gitId":"shenyih0ng"},"content":"   * overridden on a per-request basis with a request interceptor.\u003c/p\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":405,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":406,"author":{"gitId":"shenyih0ng"},"content":"   * @param readTimeout The read timeout used by default by the http client.","lastModifiedDate":"2022-10-03"},{"lineNumber":407,"author":{"gitId":"shenyih0ng"},"content":"   *                    Setting this value to null resets the timeout to an","lastModifiedDate":"2022-10-03"},{"lineNumber":408,"author":{"gitId":"shenyih0ng"},"content":"   *                    effectively infinite value.","lastModifiedDate":"2022-10-03"},{"lineNumber":409,"author":{"gitId":"shenyih0ng"},"content":"   * @return This object.","lastModifiedDate":"2022-10-03"},{"lineNumber":410,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":411,"author":{"gitId":"shenyih0ng"},"content":"  public ApiClient setReadTimeout(Duration readTimeout) {","lastModifiedDate":"2022-10-03"},{"lineNumber":412,"author":{"gitId":"shenyih0ng"},"content":"    this.readTimeout \u003d readTimeout;","lastModifiedDate":"2022-10-03"},{"lineNumber":413,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":414,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":415,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":416,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":417,"author":{"gitId":"shenyih0ng"},"content":"   * Get the read timeout that was set.","lastModifiedDate":"2022-10-03"},{"lineNumber":418,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":419,"author":{"gitId":"shenyih0ng"},"content":"   * @return The read timeout, or null if no timeout was set. Null represents","lastModifiedDate":"2022-10-03"},{"lineNumber":420,"author":{"gitId":"shenyih0ng"},"content":"   * an infinite wait time.","lastModifiedDate":"2022-10-03"},{"lineNumber":421,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":422,"author":{"gitId":"shenyih0ng"},"content":"  public Duration getReadTimeout() {","lastModifiedDate":"2022-10-03"},{"lineNumber":423,"author":{"gitId":"shenyih0ng"},"content":"    return readTimeout;","lastModifiedDate":"2022-10-03"},{"lineNumber":424,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":425,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":426,"author":{"gitId":"shenyih0ng"},"content":"   * Sets the connect timeout (in milliseconds) for the http client.","lastModifiedDate":"2022-10-03"},{"lineNumber":427,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":428,"author":{"gitId":"shenyih0ng"},"content":"   * \u003cp\u003e In the case where a new connection needs to be established, if","lastModifiedDate":"2022-10-03"},{"lineNumber":429,"author":{"gitId":"shenyih0ng"},"content":"   * the connection cannot be established within the given {@code","lastModifiedDate":"2022-10-03"},{"lineNumber":430,"author":{"gitId":"shenyih0ng"},"content":"   * duration}, then {@link HttpClient#send(HttpRequest,BodyHandler)","lastModifiedDate":"2022-10-03"},{"lineNumber":431,"author":{"gitId":"shenyih0ng"},"content":"   * HttpClient::send} throws an {@link HttpConnectTimeoutException}, or","lastModifiedDate":"2022-10-03"},{"lineNumber":432,"author":{"gitId":"shenyih0ng"},"content":"   * {@link HttpClient#sendAsync(HttpRequest,BodyHandler)","lastModifiedDate":"2022-10-03"},{"lineNumber":433,"author":{"gitId":"shenyih0ng"},"content":"   * HttpClient::sendAsync} completes exceptionally with an","lastModifiedDate":"2022-10-03"},{"lineNumber":434,"author":{"gitId":"shenyih0ng"},"content":"   * {@code HttpConnectTimeoutException}. If a new connection does not","lastModifiedDate":"2022-10-03"},{"lineNumber":435,"author":{"gitId":"shenyih0ng"},"content":"   * need to be established, for example if a connection can be reused","lastModifiedDate":"2022-10-03"},{"lineNumber":436,"author":{"gitId":"shenyih0ng"},"content":"   * from a previous request, then this timeout duration has no effect.","lastModifiedDate":"2022-10-03"},{"lineNumber":437,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":438,"author":{"gitId":"shenyih0ng"},"content":"   * @param connectTimeout connection timeout in milliseconds","lastModifiedDate":"2022-10-03"},{"lineNumber":439,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":440,"author":{"gitId":"shenyih0ng"},"content":"   * @return This object.","lastModifiedDate":"2022-10-03"},{"lineNumber":441,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":442,"author":{"gitId":"shenyih0ng"},"content":"  public ApiClient setConnectTimeout(Duration connectTimeout) {","lastModifiedDate":"2022-10-03"},{"lineNumber":443,"author":{"gitId":"shenyih0ng"},"content":"    this.connectTimeout \u003d connectTimeout;","lastModifiedDate":"2022-10-03"},{"lineNumber":444,"author":{"gitId":"shenyih0ng"},"content":"    this.builder.connectTimeout(connectTimeout);","lastModifiedDate":"2022-10-03"},{"lineNumber":445,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":446,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":447,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":448,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":449,"author":{"gitId":"shenyih0ng"},"content":"   * Get connection timeout (in milliseconds).","lastModifiedDate":"2022-10-03"},{"lineNumber":450,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":451,"author":{"gitId":"shenyih0ng"},"content":"   * @return Timeout in milliseconds","lastModifiedDate":"2022-10-03"},{"lineNumber":452,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":453,"author":{"gitId":"shenyih0ng"},"content":"  public Duration getConnectTimeout() {","lastModifiedDate":"2022-10-03"},{"lineNumber":454,"author":{"gitId":"shenyih0ng"},"content":"    return connectTimeout;","lastModifiedDate":"2022-10-03"},{"lineNumber":455,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":456,"author":{"gitId":"shenyih0ng"},"content":"}","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"shenyih0ng":456}},{"path":"src/main/java/org/openapitools/client/ApiException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"shenyih0ng"},"content":"/*","lastModifiedDate":"2022-10-03"},{"lineNumber":2,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API contains data used to render \u003chttps://nusmods.com\u003e. It includes data on modules offered by NUS and their timetables, as well as information on the locations the classes take place in. You are welcome to use and experiment with the data, which is extracted from official APIs provided by the Registrar\u0027s Office.  The API consists of static JSON files scraped daily from the school\u0027s APIs. This means it only partially follow REST conventions, and all resources are read only. All successful responses will return JSON, and all endpoints end in `.json`.  The shape of the data returned by these endpoints are designed for NUSMods in mind. If you have any questions or find that you need the data in other shapes for other purposes, feel free to reach out to us:  - **Telegram**: \u003chttps://telegram.me/nusmods\u003e - **Mailing list**: \u003cnusmods@googlegroups.com\u003e (for security related issues please email \u003cmods@nusmods.com\u003e instead)  ## Fetching data  Any HTTP client can be used to fetch data from the API. HTTPS is preferred, but the server will also respond to HTTP requests. The server supports HTTP 1.1 as well as HTTP 2 over HTTPS, and supports gzip compression.  The API has no authentication, and is not rate limited. While the server can respond to a large number of requests simultaneously, we request that you be polite with resource usage so as not to disrupt nusmods.com, which relies on the same API server. In general there is no need to fetch data from the API more than once per day, as that is the frequency at which we update the data.  [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) headers are enabled on all endpoints, so client-side JavaScript can use also use the API.  ## TypeScript types  Since the NUSMods is written in TypeScript, typings are available in the source for the scraper. These may be easier to read than the documentation generated by Swagger.  - Module types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/modules.ts\u003e - Venue types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/venues.ts\u003e  ## Data  Below are some notes about the data returned from the API. Feel free to talk to us or create an issue if any of it is not clear.  ### Module data  Module endpoints return information on modules offered by NUS. Most of the module data is self-explanatory, but some of the data are more complex and is explained here.  #### Lessons  Each lesson in a timetable has a lesson type `lessonType` and class number `ClassNo`. Every student must take one of each lesson type offered by the module. For example, this module offers two tutorials and one lecture. That means the student must attend the lecture, and can choose one of the two tutorials to attend.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"01\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1100\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"COM1-0207\\\"     },     {       \\\"classNo\\\": \\\"02\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Friday\\\",       \\\"startTime\\\": \\\"0900\\\",       \\\"endTime\\\": \\\"1000\\\",       \\\"venue\\\": \\\"COM1-0209\\\"     }   ] } ```  Each lesson has a `classNo` key. There can be multiple lessons of the same type and class number, in which case students must attend both. In this example, students can choose to attend either lecture group 1 on Tuesdays and Wednesdays, or lecture group 2 on Mondays and Wednesdays.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1400\\\",       \\\"endTime\\\": \\\"1500\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Monday\\\",       \\\"startTime\\\": \\\"1000\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1500\\\",       \\\"endTime\\\": \\\"1600\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     }   ] } ```  #### Lesson Weeks  The `weeks` key on lessons can return data in one of two forms.  Weeks is usually a sorted array of numbers. In this case it represents the school weeks the lesson occurs on, from 1 to 13.  Some classes have lessons outside of the school timetable. In this case a `WeekRange` object is returned. The object will always contain a `start` and `end` key representing the start and end date of lessons. The example below has classes every week from 17th Jan to 18th April.  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-04-18\\\" } ```  Optionally it can also include `weekInterval`, a positive integer describing the number of weeks between each lesson, and `weeks`, an array of positive integers describing the weeks on which the lesson will fall, with week 1 being the starting date. If these are not present you can assume lessons will occur every week.  The following example has lessons on 17th Jan (week 1), 24th Jan (week 2), 7th Feb (week 4) and 21st Feb (week 6).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-21\\\",   \\\"weeks\\\": [1, 2, 4, 6] } ```  The following example has lessons on 17th Jan (week 1), 31st Jan (week 3), 14th Feb (week 5) and 28th Feb (week 7).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-28\\\",   \\\"weekInterval\\\": 2 } ```  #### Workload  The `workload` key can return data in one of two forms.  Workload is usually a **5-tuple of numbers**, describing the estimated number of hours per week the student is expected to put in for the module for **lectures, tutorials, laboratory, projects/fieldwork, and preparatory work** respectively. For example, a workload of `[2, 1, 1, 3, 3]` means the student should spend every week  - 2 hours in lectures - 1 hour in tutorials - 1 hour at the lab - 3 hours doing project work - 3 hours preparing for classes  Each module credit represents 2.5 hours of work each week, so the standard 4 MC module represents 10 hours of work each week. Module credit may not be integers.  Note that this is only an estimate, and may be outdated or differ significantly in reality. Some modules also incorrectly lists the **total** workload hours instead of weekly, so very large values may show up.  This value is parsed from a string provided by the school, and occasionally this field will contain unusual values which cannot be parsed. In this case this field will contain the original **string** instead, which should be displayed as-is to the user.  #### Prerequisite, corequisite and preclusions  These three keys determine whether a student can take a module.  **Prerequisites** are requirements you have to meet before you can take a module. These are usually in the form of other modules (see prerequisite tree below for a machine readable format), but can also be things like \u0027taken A-level H2 math\u0027 or \u002770 MCs and above\u0027.  **Preclusions** refer to modules or requirements that cannot be taken if this module is taken, and vice versa. These are usually modules whose content overlaps significantly with this module, and can usually be used to replace each other to fulfill prerequisites.  **Corequisites** are modules that must be taken together with this module in the same semester. This usually refer to twined modules - modules which have linked syllabuses.  #### Prerequisite Tree  The `prereqTree` key is return on the individual module endpoint (`/modules/{moduleCode`). Not all modules have prerequisites, and some have prerequisites that cannot be properly represented as a tree, in which case this key will not appear.  This describes the prerequisites that need to be fulfilled before this module can be taken. The data structure is recursive and represents a tree.  ```json {   \\\"and\\\": [     \\\"CS1231\\\",     {       \\\"or\\\": [\\\"CS1010S\\\", \\\"CS1010X\\\"]     }   ] } ```  In the example, this module requires CS1231 and either CS1010S or CS1010X. This can be visualized as  ```            ┌ CS1231 ── all of ─┤            │         ┌ CS1010            └ one of ─┤                      └ CS1010X ```  The module information also contains the inverse of this, that is, modules whose requirements are fulfilled by this module (taking this module will allow you to take these modules in the following semester). The data is found on the `fulfillRequirements` key as an array of module codes.  ### Venue data  Venue data is simply the module timetable restructured to show the lessons happening at each classroom.  The venue list endpoint returns a list of all locations that are used in the semester. Note that this is not a comprehensive list of locations, but rather just a list of venues that appears in module lessons.  The venue information endpoint returns the full class and occupancy information about a venue. The `classes` key contains a list of lessons similar to the `timetable` key in module data, but without a `venue` key and with `moduleCode`.","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"shenyih0ng"},"content":" * The version of the OpenAPI document: 2.0.0","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"shenyih0ng"},"content":" * Contact: nusmods@googlegroups.com","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"shenyih0ng"},"content":" * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"shenyih0ng"},"content":" * https://openapi-generator.tech","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"shenyih0ng"},"content":" * Do not edit the class manually.","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"shenyih0ng"},"content":"package org.openapitools.client;","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"shenyih0ng"},"content":"import java.net.http.HttpHeaders;","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"shenyih0ng"},"content":"@javax.annotation.processing.Generated(value \u003d \"org.openapitools.codegen.languages.JavaClientCodegen\", date \u003d \"2022-10-03T22:22:26.802458+08:00[Asia/Singapore]\")","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"shenyih0ng"},"content":"public class ApiException extends Exception {","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"shenyih0ng"},"content":"    private int code \u003d 0;","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"shenyih0ng"},"content":"    private HttpHeaders responseHeaders \u003d null;","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"shenyih0ng"},"content":"    private String responseBody \u003d null;","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"shenyih0ng"},"content":"    public ApiException() {}","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"shenyih0ng"},"content":"    public ApiException(Throwable throwable) {","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"shenyih0ng"},"content":"        super(throwable);","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"shenyih0ng"},"content":"    public ApiException(String message) {","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"shenyih0ng"},"content":"        super(message);","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"shenyih0ng"},"content":"    public ApiException(String message, Throwable throwable, int code, HttpHeaders responseHeaders, String responseBody) {","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"shenyih0ng"},"content":"        super(message, throwable);","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"shenyih0ng"},"content":"        this.code \u003d code;","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"shenyih0ng"},"content":"        this.responseHeaders \u003d responseHeaders;","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"shenyih0ng"},"content":"        this.responseBody \u003d responseBody;","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"shenyih0ng"},"content":"    public ApiException(String message, int code, HttpHeaders responseHeaders, String responseBody) {","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"shenyih0ng"},"content":"        this(message, (Throwable) null, code, responseHeaders, responseBody);","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"shenyih0ng"},"content":"    public ApiException(String message, Throwable throwable, int code, HttpHeaders responseHeaders) {","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"shenyih0ng"},"content":"        this(message, throwable, code, responseHeaders, null);","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"shenyih0ng"},"content":"    public ApiException(int code, HttpHeaders responseHeaders, String responseBody) {","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"shenyih0ng"},"content":"        this((String) null, (Throwable) null, code, responseHeaders, responseBody);","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"shenyih0ng"},"content":"    public ApiException(int code, String message) {","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"shenyih0ng"},"content":"        super(message);","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"shenyih0ng"},"content":"        this.code \u003d code;","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"shenyih0ng"},"content":"    public ApiException(int code, String message, HttpHeaders responseHeaders, String responseBody) {","lastModifiedDate":"2022-10-03"},{"lineNumber":59,"author":{"gitId":"shenyih0ng"},"content":"        this(code, message);","lastModifiedDate":"2022-10-03"},{"lineNumber":60,"author":{"gitId":"shenyih0ng"},"content":"        this.responseHeaders \u003d responseHeaders;","lastModifiedDate":"2022-10-03"},{"lineNumber":61,"author":{"gitId":"shenyih0ng"},"content":"        this.responseBody \u003d responseBody;","lastModifiedDate":"2022-10-03"},{"lineNumber":62,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":63,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":64,"author":{"gitId":"shenyih0ng"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":65,"author":{"gitId":"shenyih0ng"},"content":"     * Get the HTTP status code.","lastModifiedDate":"2022-10-03"},{"lineNumber":66,"author":{"gitId":"shenyih0ng"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":67,"author":{"gitId":"shenyih0ng"},"content":"     * @return HTTP status code","lastModifiedDate":"2022-10-03"},{"lineNumber":68,"author":{"gitId":"shenyih0ng"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":69,"author":{"gitId":"shenyih0ng"},"content":"    public int getCode() {","lastModifiedDate":"2022-10-03"},{"lineNumber":70,"author":{"gitId":"shenyih0ng"},"content":"        return code;","lastModifiedDate":"2022-10-03"},{"lineNumber":71,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":72,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":73,"author":{"gitId":"shenyih0ng"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":74,"author":{"gitId":"shenyih0ng"},"content":"     * Get the HTTP response headers.","lastModifiedDate":"2022-10-03"},{"lineNumber":75,"author":{"gitId":"shenyih0ng"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":76,"author":{"gitId":"shenyih0ng"},"content":"     * @return Headers as an HttpHeaders object","lastModifiedDate":"2022-10-03"},{"lineNumber":77,"author":{"gitId":"shenyih0ng"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":78,"author":{"gitId":"shenyih0ng"},"content":"    public HttpHeaders getResponseHeaders() {","lastModifiedDate":"2022-10-03"},{"lineNumber":79,"author":{"gitId":"shenyih0ng"},"content":"        return responseHeaders;","lastModifiedDate":"2022-10-03"},{"lineNumber":80,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":81,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":82,"author":{"gitId":"shenyih0ng"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":83,"author":{"gitId":"shenyih0ng"},"content":"     * Get the HTTP response body.","lastModifiedDate":"2022-10-03"},{"lineNumber":84,"author":{"gitId":"shenyih0ng"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":85,"author":{"gitId":"shenyih0ng"},"content":"     * @return Response body in the form of string","lastModifiedDate":"2022-10-03"},{"lineNumber":86,"author":{"gitId":"shenyih0ng"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":87,"author":{"gitId":"shenyih0ng"},"content":"    public String getResponseBody() {","lastModifiedDate":"2022-10-03"},{"lineNumber":88,"author":{"gitId":"shenyih0ng"},"content":"        return responseBody;","lastModifiedDate":"2022-10-03"},{"lineNumber":89,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":90,"author":{"gitId":"shenyih0ng"},"content":"}","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"shenyih0ng":90}},{"path":"src/main/java/org/openapitools/client/ApiResponse.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"shenyih0ng"},"content":"/*","lastModifiedDate":"2022-10-03"},{"lineNumber":2,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API contains data used to render \u003chttps://nusmods.com\u003e. It includes data on modules offered by NUS and their timetables, as well as information on the locations the classes take place in. You are welcome to use and experiment with the data, which is extracted from official APIs provided by the Registrar\u0027s Office.  The API consists of static JSON files scraped daily from the school\u0027s APIs. This means it only partially follow REST conventions, and all resources are read only. All successful responses will return JSON, and all endpoints end in `.json`.  The shape of the data returned by these endpoints are designed for NUSMods in mind. If you have any questions or find that you need the data in other shapes for other purposes, feel free to reach out to us:  - **Telegram**: \u003chttps://telegram.me/nusmods\u003e - **Mailing list**: \u003cnusmods@googlegroups.com\u003e (for security related issues please email \u003cmods@nusmods.com\u003e instead)  ## Fetching data  Any HTTP client can be used to fetch data from the API. HTTPS is preferred, but the server will also respond to HTTP requests. The server supports HTTP 1.1 as well as HTTP 2 over HTTPS, and supports gzip compression.  The API has no authentication, and is not rate limited. While the server can respond to a large number of requests simultaneously, we request that you be polite with resource usage so as not to disrupt nusmods.com, which relies on the same API server. In general there is no need to fetch data from the API more than once per day, as that is the frequency at which we update the data.  [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) headers are enabled on all endpoints, so client-side JavaScript can use also use the API.  ## TypeScript types  Since the NUSMods is written in TypeScript, typings are available in the source for the scraper. These may be easier to read than the documentation generated by Swagger.  - Module types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/modules.ts\u003e - Venue types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/venues.ts\u003e  ## Data  Below are some notes about the data returned from the API. Feel free to talk to us or create an issue if any of it is not clear.  ### Module data  Module endpoints return information on modules offered by NUS. Most of the module data is self-explanatory, but some of the data are more complex and is explained here.  #### Lessons  Each lesson in a timetable has a lesson type `lessonType` and class number `ClassNo`. Every student must take one of each lesson type offered by the module. For example, this module offers two tutorials and one lecture. That means the student must attend the lecture, and can choose one of the two tutorials to attend.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"01\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1100\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"COM1-0207\\\"     },     {       \\\"classNo\\\": \\\"02\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Friday\\\",       \\\"startTime\\\": \\\"0900\\\",       \\\"endTime\\\": \\\"1000\\\",       \\\"venue\\\": \\\"COM1-0209\\\"     }   ] } ```  Each lesson has a `classNo` key. There can be multiple lessons of the same type and class number, in which case students must attend both. In this example, students can choose to attend either lecture group 1 on Tuesdays and Wednesdays, or lecture group 2 on Mondays and Wednesdays.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1400\\\",       \\\"endTime\\\": \\\"1500\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Monday\\\",       \\\"startTime\\\": \\\"1000\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1500\\\",       \\\"endTime\\\": \\\"1600\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     }   ] } ```  #### Lesson Weeks  The `weeks` key on lessons can return data in one of two forms.  Weeks is usually a sorted array of numbers. In this case it represents the school weeks the lesson occurs on, from 1 to 13.  Some classes have lessons outside of the school timetable. In this case a `WeekRange` object is returned. The object will always contain a `start` and `end` key representing the start and end date of lessons. The example below has classes every week from 17th Jan to 18th April.  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-04-18\\\" } ```  Optionally it can also include `weekInterval`, a positive integer describing the number of weeks between each lesson, and `weeks`, an array of positive integers describing the weeks on which the lesson will fall, with week 1 being the starting date. If these are not present you can assume lessons will occur every week.  The following example has lessons on 17th Jan (week 1), 24th Jan (week 2), 7th Feb (week 4) and 21st Feb (week 6).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-21\\\",   \\\"weeks\\\": [1, 2, 4, 6] } ```  The following example has lessons on 17th Jan (week 1), 31st Jan (week 3), 14th Feb (week 5) and 28th Feb (week 7).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-28\\\",   \\\"weekInterval\\\": 2 } ```  #### Workload  The `workload` key can return data in one of two forms.  Workload is usually a **5-tuple of numbers**, describing the estimated number of hours per week the student is expected to put in for the module for **lectures, tutorials, laboratory, projects/fieldwork, and preparatory work** respectively. For example, a workload of `[2, 1, 1, 3, 3]` means the student should spend every week  - 2 hours in lectures - 1 hour in tutorials - 1 hour at the lab - 3 hours doing project work - 3 hours preparing for classes  Each module credit represents 2.5 hours of work each week, so the standard 4 MC module represents 10 hours of work each week. Module credit may not be integers.  Note that this is only an estimate, and may be outdated or differ significantly in reality. Some modules also incorrectly lists the **total** workload hours instead of weekly, so very large values may show up.  This value is parsed from a string provided by the school, and occasionally this field will contain unusual values which cannot be parsed. In this case this field will contain the original **string** instead, which should be displayed as-is to the user.  #### Prerequisite, corequisite and preclusions  These three keys determine whether a student can take a module.  **Prerequisites** are requirements you have to meet before you can take a module. These are usually in the form of other modules (see prerequisite tree below for a machine readable format), but can also be things like \u0027taken A-level H2 math\u0027 or \u002770 MCs and above\u0027.  **Preclusions** refer to modules or requirements that cannot be taken if this module is taken, and vice versa. These are usually modules whose content overlaps significantly with this module, and can usually be used to replace each other to fulfill prerequisites.  **Corequisites** are modules that must be taken together with this module in the same semester. This usually refer to twined modules - modules which have linked syllabuses.  #### Prerequisite Tree  The `prereqTree` key is return on the individual module endpoint (`/modules/{moduleCode`). Not all modules have prerequisites, and some have prerequisites that cannot be properly represented as a tree, in which case this key will not appear.  This describes the prerequisites that need to be fulfilled before this module can be taken. The data structure is recursive and represents a tree.  ```json {   \\\"and\\\": [     \\\"CS1231\\\",     {       \\\"or\\\": [\\\"CS1010S\\\", \\\"CS1010X\\\"]     }   ] } ```  In the example, this module requires CS1231 and either CS1010S or CS1010X. This can be visualized as  ```            ┌ CS1231 ── all of ─┤            │         ┌ CS1010            └ one of ─┤                      └ CS1010X ```  The module information also contains the inverse of this, that is, modules whose requirements are fulfilled by this module (taking this module will allow you to take these modules in the following semester). The data is found on the `fulfillRequirements` key as an array of module codes.  ### Venue data  Venue data is simply the module timetable restructured to show the lessons happening at each classroom.  The venue list endpoint returns a list of all locations that are used in the semester. Note that this is not a comprehensive list of locations, but rather just a list of venues that appears in module lessons.  The venue information endpoint returns the full class and occupancy information about a venue. The `classes` key contains a list of lessons similar to the `timetable` key in module data, but without a `venue` key and with `moduleCode`.","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"shenyih0ng"},"content":" * The version of the OpenAPI document: 2.0.0","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"shenyih0ng"},"content":" * Contact: nusmods@googlegroups.com","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"shenyih0ng"},"content":" * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"shenyih0ng"},"content":" * https://openapi-generator.tech","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"shenyih0ng"},"content":" * Do not edit the class manually.","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"shenyih0ng"},"content":"package org.openapitools.client;","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"shenyih0ng"},"content":"import java.util.List;","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Map;","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"shenyih0ng"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"shenyih0ng"},"content":" * API response returned by API call.","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"shenyih0ng"},"content":" * @param \u003cT\u003e The type of data that is deserialized from response body","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"shenyih0ng"},"content":"public class ApiResponse\u003cT\u003e {","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"shenyih0ng"},"content":"    final private int statusCode;","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"shenyih0ng"},"content":"    final private Map\u003cString, List\u003cString\u003e\u003e headers;","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"shenyih0ng"},"content":"    final private T data;","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"shenyih0ng"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"shenyih0ng"},"content":"     * @param statusCode The status code of HTTP response","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"shenyih0ng"},"content":"     * @param headers The headers of HTTP response","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"shenyih0ng"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"shenyih0ng"},"content":"    public ApiResponse(int statusCode, Map\u003cString, List\u003cString\u003e\u003e headers) {","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"shenyih0ng"},"content":"        this(statusCode, headers, null);","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"shenyih0ng"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"shenyih0ng"},"content":"     * @param statusCode The status code of HTTP response","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"shenyih0ng"},"content":"     * @param headers The headers of HTTP response","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"shenyih0ng"},"content":"     * @param data The object deserialized from response bod","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"shenyih0ng"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"shenyih0ng"},"content":"    public ApiResponse(int statusCode, Map\u003cString, List\u003cString\u003e\u003e headers, T data) {","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"shenyih0ng"},"content":"        this.statusCode \u003d statusCode;","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"shenyih0ng"},"content":"        this.headers \u003d headers;","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"shenyih0ng"},"content":"        this.data \u003d data;","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"shenyih0ng"},"content":"    public int getStatusCode() {","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"shenyih0ng"},"content":"        return statusCode;","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"shenyih0ng"},"content":"    public Map\u003cString, List\u003cString\u003e\u003e getHeaders() {","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"shenyih0ng"},"content":"        return headers;","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"shenyih0ng"},"content":"    public T getData() {","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"shenyih0ng"},"content":"        return data;","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":59,"author":{"gitId":"shenyih0ng"},"content":"}","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"shenyih0ng":59}},{"path":"src/main/java/org/openapitools/client/Configuration.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"shenyih0ng"},"content":"/*","lastModifiedDate":"2022-10-03"},{"lineNumber":2,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API contains data used to render \u003chttps://nusmods.com\u003e. It includes data on modules offered by NUS and their timetables, as well as information on the locations the classes take place in. You are welcome to use and experiment with the data, which is extracted from official APIs provided by the Registrar\u0027s Office.  The API consists of static JSON files scraped daily from the school\u0027s APIs. This means it only partially follow REST conventions, and all resources are read only. All successful responses will return JSON, and all endpoints end in `.json`.  The shape of the data returned by these endpoints are designed for NUSMods in mind. If you have any questions or find that you need the data in other shapes for other purposes, feel free to reach out to us:  - **Telegram**: \u003chttps://telegram.me/nusmods\u003e - **Mailing list**: \u003cnusmods@googlegroups.com\u003e (for security related issues please email \u003cmods@nusmods.com\u003e instead)  ## Fetching data  Any HTTP client can be used to fetch data from the API. HTTPS is preferred, but the server will also respond to HTTP requests. The server supports HTTP 1.1 as well as HTTP 2 over HTTPS, and supports gzip compression.  The API has no authentication, and is not rate limited. While the server can respond to a large number of requests simultaneously, we request that you be polite with resource usage so as not to disrupt nusmods.com, which relies on the same API server. In general there is no need to fetch data from the API more than once per day, as that is the frequency at which we update the data.  [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) headers are enabled on all endpoints, so client-side JavaScript can use also use the API.  ## TypeScript types  Since the NUSMods is written in TypeScript, typings are available in the source for the scraper. These may be easier to read than the documentation generated by Swagger.  - Module types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/modules.ts\u003e - Venue types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/venues.ts\u003e  ## Data  Below are some notes about the data returned from the API. Feel free to talk to us or create an issue if any of it is not clear.  ### Module data  Module endpoints return information on modules offered by NUS. Most of the module data is self-explanatory, but some of the data are more complex and is explained here.  #### Lessons  Each lesson in a timetable has a lesson type `lessonType` and class number `ClassNo`. Every student must take one of each lesson type offered by the module. For example, this module offers two tutorials and one lecture. That means the student must attend the lecture, and can choose one of the two tutorials to attend.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"01\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1100\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"COM1-0207\\\"     },     {       \\\"classNo\\\": \\\"02\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Friday\\\",       \\\"startTime\\\": \\\"0900\\\",       \\\"endTime\\\": \\\"1000\\\",       \\\"venue\\\": \\\"COM1-0209\\\"     }   ] } ```  Each lesson has a `classNo` key. There can be multiple lessons of the same type and class number, in which case students must attend both. In this example, students can choose to attend either lecture group 1 on Tuesdays and Wednesdays, or lecture group 2 on Mondays and Wednesdays.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1400\\\",       \\\"endTime\\\": \\\"1500\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Monday\\\",       \\\"startTime\\\": \\\"1000\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1500\\\",       \\\"endTime\\\": \\\"1600\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     }   ] } ```  #### Lesson Weeks  The `weeks` key on lessons can return data in one of two forms.  Weeks is usually a sorted array of numbers. In this case it represents the school weeks the lesson occurs on, from 1 to 13.  Some classes have lessons outside of the school timetable. In this case a `WeekRange` object is returned. The object will always contain a `start` and `end` key representing the start and end date of lessons. The example below has classes every week from 17th Jan to 18th April.  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-04-18\\\" } ```  Optionally it can also include `weekInterval`, a positive integer describing the number of weeks between each lesson, and `weeks`, an array of positive integers describing the weeks on which the lesson will fall, with week 1 being the starting date. If these are not present you can assume lessons will occur every week.  The following example has lessons on 17th Jan (week 1), 24th Jan (week 2), 7th Feb (week 4) and 21st Feb (week 6).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-21\\\",   \\\"weeks\\\": [1, 2, 4, 6] } ```  The following example has lessons on 17th Jan (week 1), 31st Jan (week 3), 14th Feb (week 5) and 28th Feb (week 7).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-28\\\",   \\\"weekInterval\\\": 2 } ```  #### Workload  The `workload` key can return data in one of two forms.  Workload is usually a **5-tuple of numbers**, describing the estimated number of hours per week the student is expected to put in for the module for **lectures, tutorials, laboratory, projects/fieldwork, and preparatory work** respectively. For example, a workload of `[2, 1, 1, 3, 3]` means the student should spend every week  - 2 hours in lectures - 1 hour in tutorials - 1 hour at the lab - 3 hours doing project work - 3 hours preparing for classes  Each module credit represents 2.5 hours of work each week, so the standard 4 MC module represents 10 hours of work each week. Module credit may not be integers.  Note that this is only an estimate, and may be outdated or differ significantly in reality. Some modules also incorrectly lists the **total** workload hours instead of weekly, so very large values may show up.  This value is parsed from a string provided by the school, and occasionally this field will contain unusual values which cannot be parsed. In this case this field will contain the original **string** instead, which should be displayed as-is to the user.  #### Prerequisite, corequisite and preclusions  These three keys determine whether a student can take a module.  **Prerequisites** are requirements you have to meet before you can take a module. These are usually in the form of other modules (see prerequisite tree below for a machine readable format), but can also be things like \u0027taken A-level H2 math\u0027 or \u002770 MCs and above\u0027.  **Preclusions** refer to modules or requirements that cannot be taken if this module is taken, and vice versa. These are usually modules whose content overlaps significantly with this module, and can usually be used to replace each other to fulfill prerequisites.  **Corequisites** are modules that must be taken together with this module in the same semester. This usually refer to twined modules - modules which have linked syllabuses.  #### Prerequisite Tree  The `prereqTree` key is return on the individual module endpoint (`/modules/{moduleCode`). Not all modules have prerequisites, and some have prerequisites that cannot be properly represented as a tree, in which case this key will not appear.  This describes the prerequisites that need to be fulfilled before this module can be taken. The data structure is recursive and represents a tree.  ```json {   \\\"and\\\": [     \\\"CS1231\\\",     {       \\\"or\\\": [\\\"CS1010S\\\", \\\"CS1010X\\\"]     }   ] } ```  In the example, this module requires CS1231 and either CS1010S or CS1010X. This can be visualized as  ```            ┌ CS1231 ── all of ─┤            │         ┌ CS1010            └ one of ─┤                      └ CS1010X ```  The module information also contains the inverse of this, that is, modules whose requirements are fulfilled by this module (taking this module will allow you to take these modules in the following semester). The data is found on the `fulfillRequirements` key as an array of module codes.  ### Venue data  Venue data is simply the module timetable restructured to show the lessons happening at each classroom.  The venue list endpoint returns a list of all locations that are used in the semester. Note that this is not a comprehensive list of locations, but rather just a list of venues that appears in module lessons.  The venue information endpoint returns the full class and occupancy information about a venue. The `classes` key contains a list of lessons similar to the `timetable` key in module data, but without a `venue` key and with `moduleCode`.","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"shenyih0ng"},"content":" * The version of the OpenAPI document: 2.0.0","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"shenyih0ng"},"content":" * Contact: nusmods@googlegroups.com","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"shenyih0ng"},"content":" * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"shenyih0ng"},"content":" * https://openapi-generator.tech","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"shenyih0ng"},"content":" * Do not edit the class manually.","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"shenyih0ng"},"content":"package org.openapitools.client;","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"shenyih0ng"},"content":"@javax.annotation.processing.Generated(value \u003d \"org.openapitools.codegen.languages.JavaClientCodegen\", date \u003d \"2022-10-03T22:22:26.802458+08:00[Asia/Singapore]\")","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"shenyih0ng"},"content":"public class Configuration {","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"shenyih0ng"},"content":"    private static ApiClient defaultApiClient \u003d new ApiClient();","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"shenyih0ng"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"shenyih0ng"},"content":"     * Get the default API client, which would be used when creating API","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"shenyih0ng"},"content":"     * instances without providing an API client.","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"shenyih0ng"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"shenyih0ng"},"content":"     * @return Default API client","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"shenyih0ng"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"shenyih0ng"},"content":"    public static ApiClient getDefaultApiClient() {","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"shenyih0ng"},"content":"        return defaultApiClient;","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"shenyih0ng"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"shenyih0ng"},"content":"     * Set the default API client, which would be used when creating API","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"shenyih0ng"},"content":"     * instances without providing an API client.","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"shenyih0ng"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"shenyih0ng"},"content":"     * @param apiClient API client","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"shenyih0ng"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"shenyih0ng"},"content":"    public static void setDefaultApiClient(ApiClient apiClient) {","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"shenyih0ng"},"content":"        defaultApiClient \u003d apiClient;","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"shenyih0ng"},"content":"}","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"shenyih0ng":39}},{"path":"src/main/java/org/openapitools/client/JSON.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"shenyih0ng"},"content":"package org.openapitools.client;","lastModifiedDate":"2022-10-03"},{"lineNumber":2,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.*;","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.databind.*;","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.jackson.nullable.JsonNullableModule;","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.client.model.*;","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"shenyih0ng"},"content":"import java.text.DateFormat;","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"shenyih0ng"},"content":"import java.util.HashMap;","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"shenyih0ng"},"content":"import java.util.HashSet;","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Map;","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Set;","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"shenyih0ng"},"content":"@javax.annotation.processing.Generated(value \u003d \"org.openapitools.codegen.languages.JavaClientCodegen\", date \u003d \"2022-10-03T22:22:26.802458+08:00[Asia/Singapore]\")","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"shenyih0ng"},"content":"public class JSON {","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"shenyih0ng"},"content":"  private ObjectMapper mapper;","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"shenyih0ng"},"content":"  public JSON() {","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"shenyih0ng"},"content":"    mapper \u003d new ObjectMapper();","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"shenyih0ng"},"content":"    mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"shenyih0ng"},"content":"    mapper.configure(MapperFeature.ALLOW_COERCION_OF_SCALARS, false);","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"shenyih0ng"},"content":"    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true);","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"shenyih0ng"},"content":"    mapper.configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, true);","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"shenyih0ng"},"content":"    mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"shenyih0ng"},"content":"    mapper.enable(SerializationFeature.WRITE_ENUMS_USING_TO_STRING);","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"shenyih0ng"},"content":"    mapper.enable(DeserializationFeature.READ_ENUMS_USING_TO_STRING);","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"shenyih0ng"},"content":"    mapper.setDateFormat(new RFC3339DateFormat());","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"shenyih0ng"},"content":"    mapper.registerModule(new JavaTimeModule());","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"shenyih0ng"},"content":"    JsonNullableModule jnm \u003d new JsonNullableModule();","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"shenyih0ng"},"content":"    mapper.registerModule(jnm);","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"shenyih0ng"},"content":"   * Set the date format for JSON (de)serialization with Date properties.","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"shenyih0ng"},"content":"   * @param dateFormat Date format","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"shenyih0ng"},"content":"  public void setDateFormat(DateFormat dateFormat) {","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"shenyih0ng"},"content":"    mapper.setDateFormat(dateFormat);","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"shenyih0ng"},"content":"   * Get the object mapper","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"shenyih0ng"},"content":"   * @return object mapper","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"shenyih0ng"},"content":"  public ObjectMapper getMapper() { return mapper; }","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"shenyih0ng"},"content":"   * Returns the target model class that should be used to deserialize the input data.","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"shenyih0ng"},"content":"   * The discriminator mappings are used to determine the target model class.","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"shenyih0ng"},"content":"   * @param node The input data.","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"shenyih0ng"},"content":"   * @param modelClass The class that contains the discriminator mappings.","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"shenyih0ng"},"content":"   * @return the target model class.","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":59,"author":{"gitId":"shenyih0ng"},"content":"  public static Class\u003c?\u003e getClassForElement(JsonNode node, Class\u003c?\u003e modelClass) {","lastModifiedDate":"2022-10-03"},{"lineNumber":60,"author":{"gitId":"shenyih0ng"},"content":"    ClassDiscriminatorMapping cdm \u003d modelDiscriminators.get(modelClass);","lastModifiedDate":"2022-10-03"},{"lineNumber":61,"author":{"gitId":"shenyih0ng"},"content":"    if (cdm !\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":62,"author":{"gitId":"shenyih0ng"},"content":"      return cdm.getClassForElement(node, new HashSet\u003cClass\u003c?\u003e\u003e());","lastModifiedDate":"2022-10-03"},{"lineNumber":63,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":64,"author":{"gitId":"shenyih0ng"},"content":"    return null;","lastModifiedDate":"2022-10-03"},{"lineNumber":65,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":66,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":67,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":68,"author":{"gitId":"shenyih0ng"},"content":"   * Helper class to register the discriminator mappings.","lastModifiedDate":"2022-10-03"},{"lineNumber":69,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":70,"author":{"gitId":"shenyih0ng"},"content":"  private static class ClassDiscriminatorMapping {","lastModifiedDate":"2022-10-03"},{"lineNumber":71,"author":{"gitId":"shenyih0ng"},"content":"    // The model class name.","lastModifiedDate":"2022-10-03"},{"lineNumber":72,"author":{"gitId":"shenyih0ng"},"content":"    Class\u003c?\u003e modelClass;","lastModifiedDate":"2022-10-03"},{"lineNumber":73,"author":{"gitId":"shenyih0ng"},"content":"    // The name of the discriminator property.","lastModifiedDate":"2022-10-03"},{"lineNumber":74,"author":{"gitId":"shenyih0ng"},"content":"    String discriminatorName;","lastModifiedDate":"2022-10-03"},{"lineNumber":75,"author":{"gitId":"shenyih0ng"},"content":"    // The discriminator mappings for a model class.","lastModifiedDate":"2022-10-03"},{"lineNumber":76,"author":{"gitId":"shenyih0ng"},"content":"    Map\u003cString, Class\u003c?\u003e\u003e discriminatorMappings;","lastModifiedDate":"2022-10-03"},{"lineNumber":77,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":78,"author":{"gitId":"shenyih0ng"},"content":"    // Constructs a new class discriminator.","lastModifiedDate":"2022-10-03"},{"lineNumber":79,"author":{"gitId":"shenyih0ng"},"content":"    ClassDiscriminatorMapping(Class\u003c?\u003e cls, String propertyName, Map\u003cString, Class\u003c?\u003e\u003e mappings) {","lastModifiedDate":"2022-10-03"},{"lineNumber":80,"author":{"gitId":"shenyih0ng"},"content":"      modelClass \u003d cls;","lastModifiedDate":"2022-10-03"},{"lineNumber":81,"author":{"gitId":"shenyih0ng"},"content":"      discriminatorName \u003d propertyName;","lastModifiedDate":"2022-10-03"},{"lineNumber":82,"author":{"gitId":"shenyih0ng"},"content":"      discriminatorMappings \u003d new HashMap\u003cString, Class\u003c?\u003e\u003e();","lastModifiedDate":"2022-10-03"},{"lineNumber":83,"author":{"gitId":"shenyih0ng"},"content":"      if (mappings !\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":84,"author":{"gitId":"shenyih0ng"},"content":"        discriminatorMappings.putAll(mappings);","lastModifiedDate":"2022-10-03"},{"lineNumber":85,"author":{"gitId":"shenyih0ng"},"content":"      }","lastModifiedDate":"2022-10-03"},{"lineNumber":86,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":87,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":88,"author":{"gitId":"shenyih0ng"},"content":"    // Return the name of the discriminator property for this model class.","lastModifiedDate":"2022-10-03"},{"lineNumber":89,"author":{"gitId":"shenyih0ng"},"content":"    String getDiscriminatorPropertyName() {","lastModifiedDate":"2022-10-03"},{"lineNumber":90,"author":{"gitId":"shenyih0ng"},"content":"      return discriminatorName;","lastModifiedDate":"2022-10-03"},{"lineNumber":91,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":92,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":93,"author":{"gitId":"shenyih0ng"},"content":"    // Return the discriminator value or null if the discriminator is not","lastModifiedDate":"2022-10-03"},{"lineNumber":94,"author":{"gitId":"shenyih0ng"},"content":"    // present in the payload.","lastModifiedDate":"2022-10-03"},{"lineNumber":95,"author":{"gitId":"shenyih0ng"},"content":"    String getDiscriminatorValue(JsonNode node) {","lastModifiedDate":"2022-10-03"},{"lineNumber":96,"author":{"gitId":"shenyih0ng"},"content":"      // Determine the value of the discriminator property in the input data.","lastModifiedDate":"2022-10-03"},{"lineNumber":97,"author":{"gitId":"shenyih0ng"},"content":"      if (discriminatorName !\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":98,"author":{"gitId":"shenyih0ng"},"content":"        // Get the value of the discriminator property, if present in the input payload.","lastModifiedDate":"2022-10-03"},{"lineNumber":99,"author":{"gitId":"shenyih0ng"},"content":"        node \u003d node.get(discriminatorName);","lastModifiedDate":"2022-10-03"},{"lineNumber":100,"author":{"gitId":"shenyih0ng"},"content":"        if (node !\u003d null \u0026\u0026 node.isValueNode()) {","lastModifiedDate":"2022-10-03"},{"lineNumber":101,"author":{"gitId":"shenyih0ng"},"content":"          String discrValue \u003d node.asText();","lastModifiedDate":"2022-10-03"},{"lineNumber":102,"author":{"gitId":"shenyih0ng"},"content":"          if (discrValue !\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":103,"author":{"gitId":"shenyih0ng"},"content":"            return discrValue;","lastModifiedDate":"2022-10-03"},{"lineNumber":104,"author":{"gitId":"shenyih0ng"},"content":"          }","lastModifiedDate":"2022-10-03"},{"lineNumber":105,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":106,"author":{"gitId":"shenyih0ng"},"content":"      }","lastModifiedDate":"2022-10-03"},{"lineNumber":107,"author":{"gitId":"shenyih0ng"},"content":"      return null;","lastModifiedDate":"2022-10-03"},{"lineNumber":108,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":109,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":110,"author":{"gitId":"shenyih0ng"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":111,"author":{"gitId":"shenyih0ng"},"content":"     * Returns the target model class that should be used to deserialize the input data.","lastModifiedDate":"2022-10-03"},{"lineNumber":112,"author":{"gitId":"shenyih0ng"},"content":"     * This function can be invoked for anyOf/oneOf composed models with discriminator mappings.","lastModifiedDate":"2022-10-03"},{"lineNumber":113,"author":{"gitId":"shenyih0ng"},"content":"     * The discriminator mappings are used to determine the target model class.","lastModifiedDate":"2022-10-03"},{"lineNumber":114,"author":{"gitId":"shenyih0ng"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":115,"author":{"gitId":"shenyih0ng"},"content":"     * @param node The input data.","lastModifiedDate":"2022-10-03"},{"lineNumber":116,"author":{"gitId":"shenyih0ng"},"content":"     * @param visitedClasses The set of classes that have already been visited.","lastModifiedDate":"2022-10-03"},{"lineNumber":117,"author":{"gitId":"shenyih0ng"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":118,"author":{"gitId":"shenyih0ng"},"content":"     * @return the target model class.","lastModifiedDate":"2022-10-03"},{"lineNumber":119,"author":{"gitId":"shenyih0ng"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":120,"author":{"gitId":"shenyih0ng"},"content":"    Class\u003c?\u003e getClassForElement(JsonNode node, Set\u003cClass\u003c?\u003e\u003e visitedClasses) {","lastModifiedDate":"2022-10-03"},{"lineNumber":121,"author":{"gitId":"shenyih0ng"},"content":"      if (visitedClasses.contains(modelClass)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":122,"author":{"gitId":"shenyih0ng"},"content":"        // Class has already been visited.","lastModifiedDate":"2022-10-03"},{"lineNumber":123,"author":{"gitId":"shenyih0ng"},"content":"        return null;","lastModifiedDate":"2022-10-03"},{"lineNumber":124,"author":{"gitId":"shenyih0ng"},"content":"      }","lastModifiedDate":"2022-10-03"},{"lineNumber":125,"author":{"gitId":"shenyih0ng"},"content":"      // Determine the value of the discriminator property in the input data.","lastModifiedDate":"2022-10-03"},{"lineNumber":126,"author":{"gitId":"shenyih0ng"},"content":"      String discrValue \u003d getDiscriminatorValue(node);","lastModifiedDate":"2022-10-03"},{"lineNumber":127,"author":{"gitId":"shenyih0ng"},"content":"      if (discrValue \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":128,"author":{"gitId":"shenyih0ng"},"content":"        return null;","lastModifiedDate":"2022-10-03"},{"lineNumber":129,"author":{"gitId":"shenyih0ng"},"content":"      }","lastModifiedDate":"2022-10-03"},{"lineNumber":130,"author":{"gitId":"shenyih0ng"},"content":"      Class\u003c?\u003e cls \u003d discriminatorMappings.get(discrValue);","lastModifiedDate":"2022-10-03"},{"lineNumber":131,"author":{"gitId":"shenyih0ng"},"content":"      // It may not be sufficient to return this cls directly because that target class","lastModifiedDate":"2022-10-03"},{"lineNumber":132,"author":{"gitId":"shenyih0ng"},"content":"      // may itself be a composed schema, possibly with its own discriminator.","lastModifiedDate":"2022-10-03"},{"lineNumber":133,"author":{"gitId":"shenyih0ng"},"content":"      visitedClasses.add(modelClass);","lastModifiedDate":"2022-10-03"},{"lineNumber":134,"author":{"gitId":"shenyih0ng"},"content":"      for (Class\u003c?\u003e childClass : discriminatorMappings.values()) {","lastModifiedDate":"2022-10-03"},{"lineNumber":135,"author":{"gitId":"shenyih0ng"},"content":"        ClassDiscriminatorMapping childCdm \u003d modelDiscriminators.get(childClass);","lastModifiedDate":"2022-10-03"},{"lineNumber":136,"author":{"gitId":"shenyih0ng"},"content":"        if (childCdm \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":137,"author":{"gitId":"shenyih0ng"},"content":"          continue;","lastModifiedDate":"2022-10-03"},{"lineNumber":138,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":139,"author":{"gitId":"shenyih0ng"},"content":"        if (!discriminatorName.equals(childCdm.discriminatorName)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":140,"author":{"gitId":"shenyih0ng"},"content":"          discrValue \u003d getDiscriminatorValue(node);","lastModifiedDate":"2022-10-03"},{"lineNumber":141,"author":{"gitId":"shenyih0ng"},"content":"          if (discrValue \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":142,"author":{"gitId":"shenyih0ng"},"content":"            continue;","lastModifiedDate":"2022-10-03"},{"lineNumber":143,"author":{"gitId":"shenyih0ng"},"content":"          }","lastModifiedDate":"2022-10-03"},{"lineNumber":144,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":145,"author":{"gitId":"shenyih0ng"},"content":"        if (childCdm !\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":146,"author":{"gitId":"shenyih0ng"},"content":"          // Recursively traverse the discriminator mappings.","lastModifiedDate":"2022-10-03"},{"lineNumber":147,"author":{"gitId":"shenyih0ng"},"content":"          Class\u003c?\u003e childDiscr \u003d childCdm.getClassForElement(node, visitedClasses);","lastModifiedDate":"2022-10-03"},{"lineNumber":148,"author":{"gitId":"shenyih0ng"},"content":"          if (childDiscr !\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":149,"author":{"gitId":"shenyih0ng"},"content":"            return childDiscr;","lastModifiedDate":"2022-10-03"},{"lineNumber":150,"author":{"gitId":"shenyih0ng"},"content":"          }","lastModifiedDate":"2022-10-03"},{"lineNumber":151,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":152,"author":{"gitId":"shenyih0ng"},"content":"      }","lastModifiedDate":"2022-10-03"},{"lineNumber":153,"author":{"gitId":"shenyih0ng"},"content":"      return cls;","lastModifiedDate":"2022-10-03"},{"lineNumber":154,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":155,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":156,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":157,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":158,"author":{"gitId":"shenyih0ng"},"content":"   * Returns true if inst is an instance of modelClass in the OpenAPI model hierarchy.","lastModifiedDate":"2022-10-03"},{"lineNumber":159,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":160,"author":{"gitId":"shenyih0ng"},"content":"   * The Java class hierarchy is not implemented the same way as the OpenAPI model hierarchy,","lastModifiedDate":"2022-10-03"},{"lineNumber":161,"author":{"gitId":"shenyih0ng"},"content":"   * so it\u0027s not possible to use the instanceof keyword.","lastModifiedDate":"2022-10-03"},{"lineNumber":162,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":163,"author":{"gitId":"shenyih0ng"},"content":"   * @param modelClass A OpenAPI model class.","lastModifiedDate":"2022-10-03"},{"lineNumber":164,"author":{"gitId":"shenyih0ng"},"content":"   * @param inst The instance object.","lastModifiedDate":"2022-10-03"},{"lineNumber":165,"author":{"gitId":"shenyih0ng"},"content":"   * @param visitedClasses The set of classes that have already been visited.","lastModifiedDate":"2022-10-03"},{"lineNumber":166,"author":{"gitId":"shenyih0ng"},"content":"   *","lastModifiedDate":"2022-10-03"},{"lineNumber":167,"author":{"gitId":"shenyih0ng"},"content":"   * @return true if inst is an instance of modelClass in the OpenAPI model hierarchy.","lastModifiedDate":"2022-10-03"},{"lineNumber":168,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":169,"author":{"gitId":"shenyih0ng"},"content":"  public static boolean isInstanceOf(Class\u003c?\u003e modelClass, Object inst, Set\u003cClass\u003c?\u003e\u003e visitedClasses) {","lastModifiedDate":"2022-10-03"},{"lineNumber":170,"author":{"gitId":"shenyih0ng"},"content":"    if (modelClass.isInstance(inst)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":171,"author":{"gitId":"shenyih0ng"},"content":"      // This handles the \u0027allOf\u0027 use case with single parent inheritance.","lastModifiedDate":"2022-10-03"},{"lineNumber":172,"author":{"gitId":"shenyih0ng"},"content":"      return true;","lastModifiedDate":"2022-10-03"},{"lineNumber":173,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":174,"author":{"gitId":"shenyih0ng"},"content":"    if (visitedClasses.contains(modelClass)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":175,"author":{"gitId":"shenyih0ng"},"content":"      // This is to prevent infinite recursion when the composed schemas have","lastModifiedDate":"2022-10-03"},{"lineNumber":176,"author":{"gitId":"shenyih0ng"},"content":"      // a circular dependency.","lastModifiedDate":"2022-10-03"},{"lineNumber":177,"author":{"gitId":"shenyih0ng"},"content":"      return false;","lastModifiedDate":"2022-10-03"},{"lineNumber":178,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":179,"author":{"gitId":"shenyih0ng"},"content":"    visitedClasses.add(modelClass);","lastModifiedDate":"2022-10-03"},{"lineNumber":180,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":181,"author":{"gitId":"shenyih0ng"},"content":"    // Traverse the oneOf/anyOf composed schemas.","lastModifiedDate":"2022-10-03"},{"lineNumber":182,"author":{"gitId":"shenyih0ng"},"content":"    Map\u003cString, Class\u003c?\u003e\u003e descendants \u003d modelDescendants.get(modelClass);","lastModifiedDate":"2022-10-03"},{"lineNumber":183,"author":{"gitId":"shenyih0ng"},"content":"    if (descendants !\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":184,"author":{"gitId":"shenyih0ng"},"content":"      for (Class\u003c?\u003e childType : descendants.values()) {","lastModifiedDate":"2022-10-03"},{"lineNumber":185,"author":{"gitId":"shenyih0ng"},"content":"        if (isInstanceOf(childType, inst, visitedClasses)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":186,"author":{"gitId":"shenyih0ng"},"content":"          return true;","lastModifiedDate":"2022-10-03"},{"lineNumber":187,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":188,"author":{"gitId":"shenyih0ng"},"content":"      }","lastModifiedDate":"2022-10-03"},{"lineNumber":189,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":190,"author":{"gitId":"shenyih0ng"},"content":"    return false;","lastModifiedDate":"2022-10-03"},{"lineNumber":191,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":192,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":193,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":194,"author":{"gitId":"shenyih0ng"},"content":"   * A map of discriminators for all model classes.","lastModifiedDate":"2022-10-03"},{"lineNumber":195,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":196,"author":{"gitId":"shenyih0ng"},"content":"  private static Map\u003cClass\u003c?\u003e, ClassDiscriminatorMapping\u003e modelDiscriminators \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2022-10-03"},{"lineNumber":197,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":198,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":199,"author":{"gitId":"shenyih0ng"},"content":"   * A map of oneOf/anyOf descendants for each model class.","lastModifiedDate":"2022-10-03"},{"lineNumber":200,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":201,"author":{"gitId":"shenyih0ng"},"content":"  private static Map\u003cClass\u003c?\u003e, Map\u003cString, Class\u003c?\u003e\u003e\u003e modelDescendants \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2022-10-03"},{"lineNumber":202,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":203,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":204,"author":{"gitId":"shenyih0ng"},"content":"    * Register a model class discriminator.","lastModifiedDate":"2022-10-03"},{"lineNumber":205,"author":{"gitId":"shenyih0ng"},"content":"    *","lastModifiedDate":"2022-10-03"},{"lineNumber":206,"author":{"gitId":"shenyih0ng"},"content":"    * @param modelClass the model class","lastModifiedDate":"2022-10-03"},{"lineNumber":207,"author":{"gitId":"shenyih0ng"},"content":"    * @param discriminatorPropertyName the name of the discriminator property","lastModifiedDate":"2022-10-03"},{"lineNumber":208,"author":{"gitId":"shenyih0ng"},"content":"    * @param mappings a map with the discriminator mappings.","lastModifiedDate":"2022-10-03"},{"lineNumber":209,"author":{"gitId":"shenyih0ng"},"content":"    */","lastModifiedDate":"2022-10-03"},{"lineNumber":210,"author":{"gitId":"shenyih0ng"},"content":"  public static void registerDiscriminator(Class\u003c?\u003e modelClass, String discriminatorPropertyName, Map\u003cString, Class\u003c?\u003e\u003e mappings) {","lastModifiedDate":"2022-10-03"},{"lineNumber":211,"author":{"gitId":"shenyih0ng"},"content":"    ClassDiscriminatorMapping m \u003d new ClassDiscriminatorMapping(modelClass, discriminatorPropertyName, mappings);","lastModifiedDate":"2022-10-03"},{"lineNumber":212,"author":{"gitId":"shenyih0ng"},"content":"    modelDiscriminators.put(modelClass, m);","lastModifiedDate":"2022-10-03"},{"lineNumber":213,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":214,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":215,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":216,"author":{"gitId":"shenyih0ng"},"content":"    * Register the oneOf/anyOf descendants of the modelClass.","lastModifiedDate":"2022-10-03"},{"lineNumber":217,"author":{"gitId":"shenyih0ng"},"content":"    *","lastModifiedDate":"2022-10-03"},{"lineNumber":218,"author":{"gitId":"shenyih0ng"},"content":"    * @param modelClass the model class","lastModifiedDate":"2022-10-03"},{"lineNumber":219,"author":{"gitId":"shenyih0ng"},"content":"    * @param descendants a map of oneOf/anyOf descendants.","lastModifiedDate":"2022-10-03"},{"lineNumber":220,"author":{"gitId":"shenyih0ng"},"content":"    */","lastModifiedDate":"2022-10-03"},{"lineNumber":221,"author":{"gitId":"shenyih0ng"},"content":"  public static void registerDescendants(Class\u003c?\u003e modelClass, Map\u003cString, Class\u003c?\u003e\u003e descendants) {","lastModifiedDate":"2022-10-03"},{"lineNumber":222,"author":{"gitId":"shenyih0ng"},"content":"    modelDescendants.put(modelClass, descendants);","lastModifiedDate":"2022-10-03"},{"lineNumber":223,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":224,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":225,"author":{"gitId":"shenyih0ng"},"content":"  private static JSON json;","lastModifiedDate":"2022-10-03"},{"lineNumber":226,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":227,"author":{"gitId":"shenyih0ng"},"content":"  static {","lastModifiedDate":"2022-10-03"},{"lineNumber":228,"author":{"gitId":"shenyih0ng"},"content":"    json \u003d new JSON();","lastModifiedDate":"2022-10-03"},{"lineNumber":229,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":230,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":231,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":232,"author":{"gitId":"shenyih0ng"},"content":"    * Get the default JSON instance.","lastModifiedDate":"2022-10-03"},{"lineNumber":233,"author":{"gitId":"shenyih0ng"},"content":"    *","lastModifiedDate":"2022-10-03"},{"lineNumber":234,"author":{"gitId":"shenyih0ng"},"content":"    * @return the default JSON instance","lastModifiedDate":"2022-10-03"},{"lineNumber":235,"author":{"gitId":"shenyih0ng"},"content":"    */","lastModifiedDate":"2022-10-03"},{"lineNumber":236,"author":{"gitId":"shenyih0ng"},"content":"  public static JSON getDefault() {","lastModifiedDate":"2022-10-03"},{"lineNumber":237,"author":{"gitId":"shenyih0ng"},"content":"    return json;","lastModifiedDate":"2022-10-03"},{"lineNumber":238,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":239,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":240,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":241,"author":{"gitId":"shenyih0ng"},"content":"    * Set the default JSON instance.","lastModifiedDate":"2022-10-03"},{"lineNumber":242,"author":{"gitId":"shenyih0ng"},"content":"    *","lastModifiedDate":"2022-10-03"},{"lineNumber":243,"author":{"gitId":"shenyih0ng"},"content":"    * @param json JSON instance to be used","lastModifiedDate":"2022-10-03"},{"lineNumber":244,"author":{"gitId":"shenyih0ng"},"content":"    */","lastModifiedDate":"2022-10-03"},{"lineNumber":245,"author":{"gitId":"shenyih0ng"},"content":"  public static void setDefault(JSON json) {","lastModifiedDate":"2022-10-03"},{"lineNumber":246,"author":{"gitId":"shenyih0ng"},"content":"    JSON.json \u003d json;","lastModifiedDate":"2022-10-03"},{"lineNumber":247,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":248,"author":{"gitId":"shenyih0ng"},"content":"}","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"shenyih0ng":248}},{"path":"src/main/java/org/openapitools/client/Pair.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"shenyih0ng"},"content":"/*","lastModifiedDate":"2022-10-03"},{"lineNumber":2,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API contains data used to render \u003chttps://nusmods.com\u003e. It includes data on modules offered by NUS and their timetables, as well as information on the locations the classes take place in. You are welcome to use and experiment with the data, which is extracted from official APIs provided by the Registrar\u0027s Office.  The API consists of static JSON files scraped daily from the school\u0027s APIs. This means it only partially follow REST conventions, and all resources are read only. All successful responses will return JSON, and all endpoints end in `.json`.  The shape of the data returned by these endpoints are designed for NUSMods in mind. If you have any questions or find that you need the data in other shapes for other purposes, feel free to reach out to us:  - **Telegram**: \u003chttps://telegram.me/nusmods\u003e - **Mailing list**: \u003cnusmods@googlegroups.com\u003e (for security related issues please email \u003cmods@nusmods.com\u003e instead)  ## Fetching data  Any HTTP client can be used to fetch data from the API. HTTPS is preferred, but the server will also respond to HTTP requests. The server supports HTTP 1.1 as well as HTTP 2 over HTTPS, and supports gzip compression.  The API has no authentication, and is not rate limited. While the server can respond to a large number of requests simultaneously, we request that you be polite with resource usage so as not to disrupt nusmods.com, which relies on the same API server. In general there is no need to fetch data from the API more than once per day, as that is the frequency at which we update the data.  [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) headers are enabled on all endpoints, so client-side JavaScript can use also use the API.  ## TypeScript types  Since the NUSMods is written in TypeScript, typings are available in the source for the scraper. These may be easier to read than the documentation generated by Swagger.  - Module types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/modules.ts\u003e - Venue types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/venues.ts\u003e  ## Data  Below are some notes about the data returned from the API. Feel free to talk to us or create an issue if any of it is not clear.  ### Module data  Module endpoints return information on modules offered by NUS. Most of the module data is self-explanatory, but some of the data are more complex and is explained here.  #### Lessons  Each lesson in a timetable has a lesson type `lessonType` and class number `ClassNo`. Every student must take one of each lesson type offered by the module. For example, this module offers two tutorials and one lecture. That means the student must attend the lecture, and can choose one of the two tutorials to attend.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"01\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1100\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"COM1-0207\\\"     },     {       \\\"classNo\\\": \\\"02\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Friday\\\",       \\\"startTime\\\": \\\"0900\\\",       \\\"endTime\\\": \\\"1000\\\",       \\\"venue\\\": \\\"COM1-0209\\\"     }   ] } ```  Each lesson has a `classNo` key. There can be multiple lessons of the same type and class number, in which case students must attend both. In this example, students can choose to attend either lecture group 1 on Tuesdays and Wednesdays, or lecture group 2 on Mondays and Wednesdays.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1400\\\",       \\\"endTime\\\": \\\"1500\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Monday\\\",       \\\"startTime\\\": \\\"1000\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1500\\\",       \\\"endTime\\\": \\\"1600\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     }   ] } ```  #### Lesson Weeks  The `weeks` key on lessons can return data in one of two forms.  Weeks is usually a sorted array of numbers. In this case it represents the school weeks the lesson occurs on, from 1 to 13.  Some classes have lessons outside of the school timetable. In this case a `WeekRange` object is returned. The object will always contain a `start` and `end` key representing the start and end date of lessons. The example below has classes every week from 17th Jan to 18th April.  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-04-18\\\" } ```  Optionally it can also include `weekInterval`, a positive integer describing the number of weeks between each lesson, and `weeks`, an array of positive integers describing the weeks on which the lesson will fall, with week 1 being the starting date. If these are not present you can assume lessons will occur every week.  The following example has lessons on 17th Jan (week 1), 24th Jan (week 2), 7th Feb (week 4) and 21st Feb (week 6).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-21\\\",   \\\"weeks\\\": [1, 2, 4, 6] } ```  The following example has lessons on 17th Jan (week 1), 31st Jan (week 3), 14th Feb (week 5) and 28th Feb (week 7).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-28\\\",   \\\"weekInterval\\\": 2 } ```  #### Workload  The `workload` key can return data in one of two forms.  Workload is usually a **5-tuple of numbers**, describing the estimated number of hours per week the student is expected to put in for the module for **lectures, tutorials, laboratory, projects/fieldwork, and preparatory work** respectively. For example, a workload of `[2, 1, 1, 3, 3]` means the student should spend every week  - 2 hours in lectures - 1 hour in tutorials - 1 hour at the lab - 3 hours doing project work - 3 hours preparing for classes  Each module credit represents 2.5 hours of work each week, so the standard 4 MC module represents 10 hours of work each week. Module credit may not be integers.  Note that this is only an estimate, and may be outdated or differ significantly in reality. Some modules also incorrectly lists the **total** workload hours instead of weekly, so very large values may show up.  This value is parsed from a string provided by the school, and occasionally this field will contain unusual values which cannot be parsed. In this case this field will contain the original **string** instead, which should be displayed as-is to the user.  #### Prerequisite, corequisite and preclusions  These three keys determine whether a student can take a module.  **Prerequisites** are requirements you have to meet before you can take a module. These are usually in the form of other modules (see prerequisite tree below for a machine readable format), but can also be things like \u0027taken A-level H2 math\u0027 or \u002770 MCs and above\u0027.  **Preclusions** refer to modules or requirements that cannot be taken if this module is taken, and vice versa. These are usually modules whose content overlaps significantly with this module, and can usually be used to replace each other to fulfill prerequisites.  **Corequisites** are modules that must be taken together with this module in the same semester. This usually refer to twined modules - modules which have linked syllabuses.  #### Prerequisite Tree  The `prereqTree` key is return on the individual module endpoint (`/modules/{moduleCode`). Not all modules have prerequisites, and some have prerequisites that cannot be properly represented as a tree, in which case this key will not appear.  This describes the prerequisites that need to be fulfilled before this module can be taken. The data structure is recursive and represents a tree.  ```json {   \\\"and\\\": [     \\\"CS1231\\\",     {       \\\"or\\\": [\\\"CS1010S\\\", \\\"CS1010X\\\"]     }   ] } ```  In the example, this module requires CS1231 and either CS1010S or CS1010X. This can be visualized as  ```            ┌ CS1231 ── all of ─┤            │         ┌ CS1010            └ one of ─┤                      └ CS1010X ```  The module information also contains the inverse of this, that is, modules whose requirements are fulfilled by this module (taking this module will allow you to take these modules in the following semester). The data is found on the `fulfillRequirements` key as an array of module codes.  ### Venue data  Venue data is simply the module timetable restructured to show the lessons happening at each classroom.  The venue list endpoint returns a list of all locations that are used in the semester. Note that this is not a comprehensive list of locations, but rather just a list of venues that appears in module lessons.  The venue information endpoint returns the full class and occupancy information about a venue. The `classes` key contains a list of lessons similar to the `timetable` key in module data, but without a `venue` key and with `moduleCode`.","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"shenyih0ng"},"content":" * The version of the OpenAPI document: 2.0.0","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"shenyih0ng"},"content":" * Contact: nusmods@googlegroups.com","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"shenyih0ng"},"content":" * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"shenyih0ng"},"content":" * https://openapi-generator.tech","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"shenyih0ng"},"content":" * Do not edit the class manually.","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"shenyih0ng"},"content":"package org.openapitools.client;","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"shenyih0ng"},"content":"@javax.annotation.processing.Generated(value \u003d \"org.openapitools.codegen.languages.JavaClientCodegen\", date \u003d \"2022-10-03T22:22:26.802458+08:00[Asia/Singapore]\")","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"shenyih0ng"},"content":"public class Pair {","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"shenyih0ng"},"content":"    private String name \u003d \"\";","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"shenyih0ng"},"content":"    private String value \u003d \"\";","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"shenyih0ng"},"content":"    public Pair (String name, String value) {","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"shenyih0ng"},"content":"        setName(name);","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"shenyih0ng"},"content":"        setValue(value);","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"shenyih0ng"},"content":"    private void setName(String name) {","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"shenyih0ng"},"content":"        if (!isValidString(name)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"shenyih0ng"},"content":"            return;","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"shenyih0ng"},"content":"        this.name \u003d name;","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"shenyih0ng"},"content":"    private void setValue(String value) {","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"shenyih0ng"},"content":"        if (!isValidString(value)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"shenyih0ng"},"content":"            return;","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"shenyih0ng"},"content":"        this.value \u003d value;","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"shenyih0ng"},"content":"    public String getName() {","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"shenyih0ng"},"content":"        return this.name;","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"shenyih0ng"},"content":"    public String getValue() {","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"shenyih0ng"},"content":"        return this.value;","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"shenyih0ng"},"content":"    private boolean isValidString(String arg) {","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"shenyih0ng"},"content":"        if (arg \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"shenyih0ng"},"content":"            return false;","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"shenyih0ng"},"content":"        return true;","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"shenyih0ng"},"content":"}","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"shenyih0ng":57}},{"path":"src/main/java/org/openapitools/client/RFC3339DateFormat.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"shenyih0ng"},"content":"/*","lastModifiedDate":"2022-10-03"},{"lineNumber":2,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API contains data used to render \u003chttps://nusmods.com\u003e. It includes data on modules offered by NUS and their timetables, as well as information on the locations the classes take place in. You are welcome to use and experiment with the data, which is extracted from official APIs provided by the Registrar\u0027s Office.  The API consists of static JSON files scraped daily from the school\u0027s APIs. This means it only partially follow REST conventions, and all resources are read only. All successful responses will return JSON, and all endpoints end in `.json`.  The shape of the data returned by these endpoints are designed for NUSMods in mind. If you have any questions or find that you need the data in other shapes for other purposes, feel free to reach out to us:  - **Telegram**: \u003chttps://telegram.me/nusmods\u003e - **Mailing list**: \u003cnusmods@googlegroups.com\u003e (for security related issues please email \u003cmods@nusmods.com\u003e instead)  ## Fetching data  Any HTTP client can be used to fetch data from the API. HTTPS is preferred, but the server will also respond to HTTP requests. The server supports HTTP 1.1 as well as HTTP 2 over HTTPS, and supports gzip compression.  The API has no authentication, and is not rate limited. While the server can respond to a large number of requests simultaneously, we request that you be polite with resource usage so as not to disrupt nusmods.com, which relies on the same API server. In general there is no need to fetch data from the API more than once per day, as that is the frequency at which we update the data.  [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) headers are enabled on all endpoints, so client-side JavaScript can use also use the API.  ## TypeScript types  Since the NUSMods is written in TypeScript, typings are available in the source for the scraper. These may be easier to read than the documentation generated by Swagger.  - Module types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/modules.ts\u003e - Venue types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/venues.ts\u003e  ## Data  Below are some notes about the data returned from the API. Feel free to talk to us or create an issue if any of it is not clear.  ### Module data  Module endpoints return information on modules offered by NUS. Most of the module data is self-explanatory, but some of the data are more complex and is explained here.  #### Lessons  Each lesson in a timetable has a lesson type `lessonType` and class number `ClassNo`. Every student must take one of each lesson type offered by the module. For example, this module offers two tutorials and one lecture. That means the student must attend the lecture, and can choose one of the two tutorials to attend.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"01\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1100\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"COM1-0207\\\"     },     {       \\\"classNo\\\": \\\"02\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Friday\\\",       \\\"startTime\\\": \\\"0900\\\",       \\\"endTime\\\": \\\"1000\\\",       \\\"venue\\\": \\\"COM1-0209\\\"     }   ] } ```  Each lesson has a `classNo` key. There can be multiple lessons of the same type and class number, in which case students must attend both. In this example, students can choose to attend either lecture group 1 on Tuesdays and Wednesdays, or lecture group 2 on Mondays and Wednesdays.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1400\\\",       \\\"endTime\\\": \\\"1500\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Monday\\\",       \\\"startTime\\\": \\\"1000\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1500\\\",       \\\"endTime\\\": \\\"1600\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     }   ] } ```  #### Lesson Weeks  The `weeks` key on lessons can return data in one of two forms.  Weeks is usually a sorted array of numbers. In this case it represents the school weeks the lesson occurs on, from 1 to 13.  Some classes have lessons outside of the school timetable. In this case a `WeekRange` object is returned. The object will always contain a `start` and `end` key representing the start and end date of lessons. The example below has classes every week from 17th Jan to 18th April.  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-04-18\\\" } ```  Optionally it can also include `weekInterval`, a positive integer describing the number of weeks between each lesson, and `weeks`, an array of positive integers describing the weeks on which the lesson will fall, with week 1 being the starting date. If these are not present you can assume lessons will occur every week.  The following example has lessons on 17th Jan (week 1), 24th Jan (week 2), 7th Feb (week 4) and 21st Feb (week 6).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-21\\\",   \\\"weeks\\\": [1, 2, 4, 6] } ```  The following example has lessons on 17th Jan (week 1), 31st Jan (week 3), 14th Feb (week 5) and 28th Feb (week 7).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-28\\\",   \\\"weekInterval\\\": 2 } ```  #### Workload  The `workload` key can return data in one of two forms.  Workload is usually a **5-tuple of numbers**, describing the estimated number of hours per week the student is expected to put in for the module for **lectures, tutorials, laboratory, projects/fieldwork, and preparatory work** respectively. For example, a workload of `[2, 1, 1, 3, 3]` means the student should spend every week  - 2 hours in lectures - 1 hour in tutorials - 1 hour at the lab - 3 hours doing project work - 3 hours preparing for classes  Each module credit represents 2.5 hours of work each week, so the standard 4 MC module represents 10 hours of work each week. Module credit may not be integers.  Note that this is only an estimate, and may be outdated or differ significantly in reality. Some modules also incorrectly lists the **total** workload hours instead of weekly, so very large values may show up.  This value is parsed from a string provided by the school, and occasionally this field will contain unusual values which cannot be parsed. In this case this field will contain the original **string** instead, which should be displayed as-is to the user.  #### Prerequisite, corequisite and preclusions  These three keys determine whether a student can take a module.  **Prerequisites** are requirements you have to meet before you can take a module. These are usually in the form of other modules (see prerequisite tree below for a machine readable format), but can also be things like \u0027taken A-level H2 math\u0027 or \u002770 MCs and above\u0027.  **Preclusions** refer to modules or requirements that cannot be taken if this module is taken, and vice versa. These are usually modules whose content overlaps significantly with this module, and can usually be used to replace each other to fulfill prerequisites.  **Corequisites** are modules that must be taken together with this module in the same semester. This usually refer to twined modules - modules which have linked syllabuses.  #### Prerequisite Tree  The `prereqTree` key is return on the individual module endpoint (`/modules/{moduleCode`). Not all modules have prerequisites, and some have prerequisites that cannot be properly represented as a tree, in which case this key will not appear.  This describes the prerequisites that need to be fulfilled before this module can be taken. The data structure is recursive and represents a tree.  ```json {   \\\"and\\\": [     \\\"CS1231\\\",     {       \\\"or\\\": [\\\"CS1010S\\\", \\\"CS1010X\\\"]     }   ] } ```  In the example, this module requires CS1231 and either CS1010S or CS1010X. This can be visualized as  ```            ┌ CS1231 ── all of ─┤            │         ┌ CS1010            └ one of ─┤                      └ CS1010X ```  The module information also contains the inverse of this, that is, modules whose requirements are fulfilled by this module (taking this module will allow you to take these modules in the following semester). The data is found on the `fulfillRequirements` key as an array of module codes.  ### Venue data  Venue data is simply the module timetable restructured to show the lessons happening at each classroom.  The venue list endpoint returns a list of all locations that are used in the semester. Note that this is not a comprehensive list of locations, but rather just a list of venues that appears in module lessons.  The venue information endpoint returns the full class and occupancy information about a venue. The `classes` key contains a list of lessons similar to the `timetable` key in module data, but without a `venue` key and with `moduleCode`.","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"shenyih0ng"},"content":" * The version of the OpenAPI document: 2.0.0","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"shenyih0ng"},"content":" * Contact: nusmods@googlegroups.com","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"shenyih0ng"},"content":" * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"shenyih0ng"},"content":" * https://openapi-generator.tech","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"shenyih0ng"},"content":" * Do not edit the class manually.","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"shenyih0ng"},"content":"package org.openapitools.client;","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.databind.util.StdDateFormat;","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"shenyih0ng"},"content":"import java.text.DateFormat;","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"shenyih0ng"},"content":"import java.text.FieldPosition;","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"shenyih0ng"},"content":"import java.text.ParsePosition;","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Date;","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"shenyih0ng"},"content":"import java.text.DecimalFormat;","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"shenyih0ng"},"content":"import java.util.GregorianCalendar;","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"shenyih0ng"},"content":"import java.util.TimeZone;","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"shenyih0ng"},"content":"public class RFC3339DateFormat extends DateFormat {","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"shenyih0ng"},"content":"  private static final long serialVersionUID \u003d 1L;","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"shenyih0ng"},"content":"  private static final TimeZone TIMEZONE_Z \u003d TimeZone.getTimeZone(\"UTC\");","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"shenyih0ng"},"content":"  private final StdDateFormat fmt \u003d new StdDateFormat()","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"shenyih0ng"},"content":"          .withTimeZone(TIMEZONE_Z)","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"shenyih0ng"},"content":"          .withColonInTimeZone(true);","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"shenyih0ng"},"content":"  public RFC3339DateFormat() {","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"shenyih0ng"},"content":"    this.calendar \u003d new GregorianCalendar();","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"shenyih0ng"},"content":"    this.numberFormat \u003d new DecimalFormat();","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"shenyih0ng"},"content":"  public Date parse(String source) {","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"shenyih0ng"},"content":"    return parse(source, new ParsePosition(0));","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"shenyih0ng"},"content":"  public Date parse(String source, ParsePosition pos) {","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"shenyih0ng"},"content":"    return fmt.parse(source, pos);","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"shenyih0ng"},"content":"  public StringBuffer format(Date date, StringBuffer toAppendTo, FieldPosition fieldPosition) {","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"shenyih0ng"},"content":"    return fmt.format(date, toAppendTo, fieldPosition);","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"shenyih0ng"},"content":"  public Object clone() {","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"shenyih0ng"},"content":"    return super.clone();","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"shenyih0ng"},"content":"}","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"shenyih0ng":57}},{"path":"src/main/java/org/openapitools/client/ServerConfiguration.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"shenyih0ng"},"content":"package org.openapitools.client;","lastModifiedDate":"2022-10-03"},{"lineNumber":2,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Map;","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"shenyih0ng"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"shenyih0ng"},"content":" * Representing a Server configuration.","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"shenyih0ng"},"content":"public class ServerConfiguration {","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"shenyih0ng"},"content":"    public String URL;","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"shenyih0ng"},"content":"    public String description;","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"shenyih0ng"},"content":"    public Map\u003cString, ServerVariable\u003e variables;","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"shenyih0ng"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"shenyih0ng"},"content":"     * @param URL A URL to the target host.","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"shenyih0ng"},"content":"     * @param description A description of the host designated by the URL.","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"shenyih0ng"},"content":"     * @param variables A map between a variable name and its value. The value is used for substitution in the server\u0027s URL template.","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"shenyih0ng"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"shenyih0ng"},"content":"    public ServerConfiguration(String URL, String description, Map\u003cString, ServerVariable\u003e variables) {","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"shenyih0ng"},"content":"        this.URL \u003d URL;","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"shenyih0ng"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"shenyih0ng"},"content":"        this.variables \u003d variables;","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"shenyih0ng"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"shenyih0ng"},"content":"     * Format URL template using given variables.","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"shenyih0ng"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"shenyih0ng"},"content":"     * @param variables A map between a variable name and its value.","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"shenyih0ng"},"content":"     * @return Formatted URL.","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"shenyih0ng"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"shenyih0ng"},"content":"    public String URL(Map\u003cString, String\u003e variables) {","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"shenyih0ng"},"content":"        String url \u003d this.URL;","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"shenyih0ng"},"content":"        // go through variables and replace placeholders","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"shenyih0ng"},"content":"        for (Map.Entry\u003cString, ServerVariable\u003e variable: this.variables.entrySet()) {","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"shenyih0ng"},"content":"            String name \u003d variable.getKey();","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"shenyih0ng"},"content":"            ServerVariable serverVariable \u003d variable.getValue();","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"shenyih0ng"},"content":"            String value \u003d serverVariable.defaultValue;","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"shenyih0ng"},"content":"            if (variables !\u003d null \u0026\u0026 variables.containsKey(name)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"shenyih0ng"},"content":"                value \u003d variables.get(name);","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"shenyih0ng"},"content":"                if (serverVariable.enumValues.size() \u003e 0 \u0026\u0026 !serverVariable.enumValues.contains(value)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"shenyih0ng"},"content":"                    throw new IllegalArgumentException(\"The variable \" + name + \" in the server URL has invalid value \" + value + \".\");","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"shenyih0ng"},"content":"                }","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"shenyih0ng"},"content":"            }","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"shenyih0ng"},"content":"            url \u003d url.replaceAll(\"\\\\{\" + name + \"\\\\}\", value);","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"shenyih0ng"},"content":"        return url;","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"shenyih0ng"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"shenyih0ng"},"content":"     * Format URL template using default server variables.","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"shenyih0ng"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"shenyih0ng"},"content":"     * @return Formatted URL.","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"shenyih0ng"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"shenyih0ng"},"content":"    public String URL() {","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"shenyih0ng"},"content":"        return URL(null);","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"shenyih0ng"},"content":"}","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"shenyih0ng":58}},{"path":"src/main/java/org/openapitools/client/ServerVariable.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"shenyih0ng"},"content":"package org.openapitools.client;","lastModifiedDate":"2022-10-03"},{"lineNumber":2,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"shenyih0ng"},"content":"import java.util.HashSet;","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"shenyih0ng"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"shenyih0ng"},"content":" * Representing a Server Variable for server URL template substitution.","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"shenyih0ng"},"content":"public class ServerVariable {","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"shenyih0ng"},"content":"    public String description;","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"shenyih0ng"},"content":"    public String defaultValue;","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"shenyih0ng"},"content":"    public HashSet\u003cString\u003e enumValues \u003d null;","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"shenyih0ng"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"shenyih0ng"},"content":"     * @param description A description for the server variable.","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"shenyih0ng"},"content":"     * @param defaultValue The default value to use for substitution.","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"shenyih0ng"},"content":"     * @param enumValues An enumeration of string values to be used if the substitution options are from a limited set.","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"shenyih0ng"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"shenyih0ng"},"content":"    public ServerVariable(String description, String defaultValue, HashSet\u003cString\u003e enumValues) {","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"shenyih0ng"},"content":"        this.description \u003d description;","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"shenyih0ng"},"content":"        this.defaultValue \u003d defaultValue;","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"shenyih0ng"},"content":"        this.enumValues \u003d enumValues;","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"shenyih0ng"},"content":"}","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"shenyih0ng":23}},{"path":"src/main/java/org/openapitools/client/api/ModulesApi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"shenyih0ng"},"content":"/*","lastModifiedDate":"2022-10-03"},{"lineNumber":2,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API contains data used to render \u003chttps://nusmods.com\u003e. It includes data on modules offered by NUS and their timetables, as well as information on the locations the classes take place in. You are welcome to use and experiment with the data, which is extracted from official APIs provided by the Registrar\u0027s Office.  The API consists of static JSON files scraped daily from the school\u0027s APIs. This means it only partially follow REST conventions, and all resources are read only. All successful responses will return JSON, and all endpoints end in `.json`.  The shape of the data returned by these endpoints are designed for NUSMods in mind. If you have any questions or find that you need the data in other shapes for other purposes, feel free to reach out to us:  - **Telegram**: \u003chttps://telegram.me/nusmods\u003e - **Mailing list**: \u003cnusmods@googlegroups.com\u003e (for security related issues please email \u003cmods@nusmods.com\u003e instead)  ## Fetching data  Any HTTP client can be used to fetch data from the API. HTTPS is preferred, but the server will also respond to HTTP requests. The server supports HTTP 1.1 as well as HTTP 2 over HTTPS, and supports gzip compression.  The API has no authentication, and is not rate limited. While the server can respond to a large number of requests simultaneously, we request that you be polite with resource usage so as not to disrupt nusmods.com, which relies on the same API server. In general there is no need to fetch data from the API more than once per day, as that is the frequency at which we update the data.  [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) headers are enabled on all endpoints, so client-side JavaScript can use also use the API.  ## TypeScript types  Since the NUSMods is written in TypeScript, typings are available in the source for the scraper. These may be easier to read than the documentation generated by Swagger.  - Module types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/modules.ts\u003e - Venue types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/venues.ts\u003e  ## Data  Below are some notes about the data returned from the API. Feel free to talk to us or create an issue if any of it is not clear.  ### Module data  Module endpoints return information on modules offered by NUS. Most of the module data is self-explanatory, but some of the data are more complex and is explained here.  #### Lessons  Each lesson in a timetable has a lesson type `lessonType` and class number `ClassNo`. Every student must take one of each lesson type offered by the module. For example, this module offers two tutorials and one lecture. That means the student must attend the lecture, and can choose one of the two tutorials to attend.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"01\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1100\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"COM1-0207\\\"     },     {       \\\"classNo\\\": \\\"02\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Friday\\\",       \\\"startTime\\\": \\\"0900\\\",       \\\"endTime\\\": \\\"1000\\\",       \\\"venue\\\": \\\"COM1-0209\\\"     }   ] } ```  Each lesson has a `classNo` key. There can be multiple lessons of the same type and class number, in which case students must attend both. In this example, students can choose to attend either lecture group 1 on Tuesdays and Wednesdays, or lecture group 2 on Mondays and Wednesdays.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1400\\\",       \\\"endTime\\\": \\\"1500\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Monday\\\",       \\\"startTime\\\": \\\"1000\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1500\\\",       \\\"endTime\\\": \\\"1600\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     }   ] } ```  #### Lesson Weeks  The `weeks` key on lessons can return data in one of two forms.  Weeks is usually a sorted array of numbers. In this case it represents the school weeks the lesson occurs on, from 1 to 13.  Some classes have lessons outside of the school timetable. In this case a `WeekRange` object is returned. The object will always contain a `start` and `end` key representing the start and end date of lessons. The example below has classes every week from 17th Jan to 18th April.  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-04-18\\\" } ```  Optionally it can also include `weekInterval`, a positive integer describing the number of weeks between each lesson, and `weeks`, an array of positive integers describing the weeks on which the lesson will fall, with week 1 being the starting date. If these are not present you can assume lessons will occur every week.  The following example has lessons on 17th Jan (week 1), 24th Jan (week 2), 7th Feb (week 4) and 21st Feb (week 6).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-21\\\",   \\\"weeks\\\": [1, 2, 4, 6] } ```  The following example has lessons on 17th Jan (week 1), 31st Jan (week 3), 14th Feb (week 5) and 28th Feb (week 7).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-28\\\",   \\\"weekInterval\\\": 2 } ```  #### Workload  The `workload` key can return data in one of two forms.  Workload is usually a **5-tuple of numbers**, describing the estimated number of hours per week the student is expected to put in for the module for **lectures, tutorials, laboratory, projects/fieldwork, and preparatory work** respectively. For example, a workload of `[2, 1, 1, 3, 3]` means the student should spend every week  - 2 hours in lectures - 1 hour in tutorials - 1 hour at the lab - 3 hours doing project work - 3 hours preparing for classes  Each module credit represents 2.5 hours of work each week, so the standard 4 MC module represents 10 hours of work each week. Module credit may not be integers.  Note that this is only an estimate, and may be outdated or differ significantly in reality. Some modules also incorrectly lists the **total** workload hours instead of weekly, so very large values may show up.  This value is parsed from a string provided by the school, and occasionally this field will contain unusual values which cannot be parsed. In this case this field will contain the original **string** instead, which should be displayed as-is to the user.  #### Prerequisite, corequisite and preclusions  These three keys determine whether a student can take a module.  **Prerequisites** are requirements you have to meet before you can take a module. These are usually in the form of other modules (see prerequisite tree below for a machine readable format), but can also be things like \u0027taken A-level H2 math\u0027 or \u002770 MCs and above\u0027.  **Preclusions** refer to modules or requirements that cannot be taken if this module is taken, and vice versa. These are usually modules whose content overlaps significantly with this module, and can usually be used to replace each other to fulfill prerequisites.  **Corequisites** are modules that must be taken together with this module in the same semester. This usually refer to twined modules - modules which have linked syllabuses.  #### Prerequisite Tree  The `prereqTree` key is return on the individual module endpoint (`/modules/{moduleCode`). Not all modules have prerequisites, and some have prerequisites that cannot be properly represented as a tree, in which case this key will not appear.  This describes the prerequisites that need to be fulfilled before this module can be taken. The data structure is recursive and represents a tree.  ```json {   \\\"and\\\": [     \\\"CS1231\\\",     {       \\\"or\\\": [\\\"CS1010S\\\", \\\"CS1010X\\\"]     }   ] } ```  In the example, this module requires CS1231 and either CS1010S or CS1010X. This can be visualized as  ```            ┌ CS1231 ── all of ─┤            │         ┌ CS1010            └ one of ─┤                      └ CS1010X ```  The module information also contains the inverse of this, that is, modules whose requirements are fulfilled by this module (taking this module will allow you to take these modules in the following semester). The data is found on the `fulfillRequirements` key as an array of module codes.  ### Venue data  Venue data is simply the module timetable restructured to show the lessons happening at each classroom.  The venue list endpoint returns a list of all locations that are used in the semester. Note that this is not a comprehensive list of locations, but rather just a list of venues that appears in module lessons.  The venue information endpoint returns the full class and occupancy information about a venue. The `classes` key contains a list of lessons similar to the `timetable` key in module data, but without a `venue` key and with `moduleCode`.","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"shenyih0ng"},"content":" * The version of the OpenAPI document: 2.0.0","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"shenyih0ng"},"content":" * Contact: nusmods@googlegroups.com","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"shenyih0ng"},"content":" * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"shenyih0ng"},"content":" * https://openapi-generator.tech","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"shenyih0ng"},"content":" * Do not edit the class manually.","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"shenyih0ng"},"content":"package org.openapitools.client.api;","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.client.ApiClient;","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.client.ApiException;","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.client.ApiResponse;","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.client.Pair;","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.client.model.Module;","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.client.model.ModuleCondensed;","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.client.model.ModuleInformation;","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.core.type.TypeReference;","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"shenyih0ng"},"content":"import java.io.IOException;","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"shenyih0ng"},"content":"import java.io.InputStream;","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"shenyih0ng"},"content":"import java.net.URI;","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"shenyih0ng"},"content":"import java.net.http.HttpClient;","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"shenyih0ng"},"content":"import java.net.http.HttpRequest;","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"shenyih0ng"},"content":"import java.net.http.HttpResponse;","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"shenyih0ng"},"content":"import java.time.Duration;","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"shenyih0ng"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"shenyih0ng"},"content":"import java.util.StringJoiner;","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"shenyih0ng"},"content":"import java.util.List;","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Map;","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Set;","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"shenyih0ng"},"content":"import java.util.function.Consumer;","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"shenyih0ng"},"content":"@javax.annotation.processing.Generated(value \u003d \"org.openapitools.codegen.languages.JavaClientCodegen\", date \u003d \"2022-10-03T22:22:26.802458+08:00[Asia/Singapore]\")","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"shenyih0ng"},"content":"public class ModulesApi {","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"shenyih0ng"},"content":"  private final HttpClient memberVarHttpClient;","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"shenyih0ng"},"content":"  private final ObjectMapper memberVarObjectMapper;","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"shenyih0ng"},"content":"  private final String memberVarBaseUri;","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"shenyih0ng"},"content":"  private final Consumer\u003cHttpRequest.Builder\u003e memberVarInterceptor;","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"shenyih0ng"},"content":"  private final Duration memberVarReadTimeout;","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"shenyih0ng"},"content":"  private final Consumer\u003cHttpResponse\u003cInputStream\u003e\u003e memberVarResponseInterceptor;","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"shenyih0ng"},"content":"  private final Consumer\u003cHttpResponse\u003cString\u003e\u003e memberVarAsyncResponseInterceptor;","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"shenyih0ng"},"content":"  public ModulesApi() {","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"shenyih0ng"},"content":"    this(new ApiClient());","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"shenyih0ng"},"content":"  public ModulesApi(ApiClient apiClient) {","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"shenyih0ng"},"content":"    memberVarHttpClient \u003d apiClient.getHttpClient();","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"shenyih0ng"},"content":"    memberVarObjectMapper \u003d apiClient.getObjectMapper();","lastModifiedDate":"2022-10-03"},{"lineNumber":59,"author":{"gitId":"shenyih0ng"},"content":"    memberVarBaseUri \u003d apiClient.getBaseUri();","lastModifiedDate":"2022-10-03"},{"lineNumber":60,"author":{"gitId":"shenyih0ng"},"content":"    memberVarInterceptor \u003d apiClient.getRequestInterceptor();","lastModifiedDate":"2022-10-03"},{"lineNumber":61,"author":{"gitId":"shenyih0ng"},"content":"    memberVarReadTimeout \u003d apiClient.getReadTimeout();","lastModifiedDate":"2022-10-03"},{"lineNumber":62,"author":{"gitId":"shenyih0ng"},"content":"    memberVarResponseInterceptor \u003d apiClient.getResponseInterceptor();","lastModifiedDate":"2022-10-03"},{"lineNumber":63,"author":{"gitId":"shenyih0ng"},"content":"    memberVarAsyncResponseInterceptor \u003d apiClient.getAsyncResponseInterceptor();","lastModifiedDate":"2022-10-03"},{"lineNumber":64,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":65,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":66,"author":{"gitId":"shenyih0ng"},"content":"  protected ApiException getApiException(String operationId, HttpResponse\u003cInputStream\u003e response) throws IOException {","lastModifiedDate":"2022-10-03"},{"lineNumber":67,"author":{"gitId":"shenyih0ng"},"content":"    String body \u003d response.body() \u003d\u003d null ? null : new String(response.body().readAllBytes());","lastModifiedDate":"2022-10-03"},{"lineNumber":68,"author":{"gitId":"shenyih0ng"},"content":"    String message \u003d formatExceptionMessage(operationId, response.statusCode(), body);","lastModifiedDate":"2022-10-03"},{"lineNumber":69,"author":{"gitId":"shenyih0ng"},"content":"    return new ApiException(response.statusCode(), message, response.headers(), body);","lastModifiedDate":"2022-10-03"},{"lineNumber":70,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":71,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":72,"author":{"gitId":"shenyih0ng"},"content":"  private String formatExceptionMessage(String operationId, int statusCode, String body) {","lastModifiedDate":"2022-10-03"},{"lineNumber":73,"author":{"gitId":"shenyih0ng"},"content":"    if (body \u003d\u003d null || body.isEmpty()) {","lastModifiedDate":"2022-10-03"},{"lineNumber":74,"author":{"gitId":"shenyih0ng"},"content":"      body \u003d \"[no body]\";","lastModifiedDate":"2022-10-03"},{"lineNumber":75,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":76,"author":{"gitId":"shenyih0ng"},"content":"    return operationId + \" call failed with: \" + statusCode + \" - \" + body;","lastModifiedDate":"2022-10-03"},{"lineNumber":77,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":78,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":79,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":80,"author":{"gitId":"shenyih0ng"},"content":"   * Get detailed information about all modules","lastModifiedDate":"2022-10-03"},{"lineNumber":81,"author":{"gitId":"shenyih0ng"},"content":"   * Get all information about modules except for timetable and prereq tree in a year. This is compact enough to be loaded and filtered in browsers without lag and is useful for faceted search and detailed module listing.  NUSMods feeds this information into an Elasticsearch search server for the detailed module search page.","lastModifiedDate":"2022-10-03"},{"lineNumber":82,"author":{"gitId":"shenyih0ng"},"content":"   * @param acadYear academic year, with the slash (/) replaced by a dash (required)","lastModifiedDate":"2022-10-03"},{"lineNumber":83,"author":{"gitId":"shenyih0ng"},"content":"   * @return List\u0026lt;ModuleInformation\u0026gt;","lastModifiedDate":"2022-10-03"},{"lineNumber":84,"author":{"gitId":"shenyih0ng"},"content":"   * @throws ApiException if fails to make API call","lastModifiedDate":"2022-10-03"},{"lineNumber":85,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":86,"author":{"gitId":"shenyih0ng"},"content":"  public List\u003cModuleInformation\u003e acadYearModuleInfoJsonGet(String acadYear) throws ApiException {","lastModifiedDate":"2022-10-03"},{"lineNumber":87,"author":{"gitId":"shenyih0ng"},"content":"    ApiResponse\u003cList\u003cModuleInformation\u003e\u003e localVarResponse \u003d acadYearModuleInfoJsonGetWithHttpInfo(acadYear);","lastModifiedDate":"2022-10-03"},{"lineNumber":88,"author":{"gitId":"shenyih0ng"},"content":"    return localVarResponse.getData();","lastModifiedDate":"2022-10-03"},{"lineNumber":89,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":90,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":91,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":92,"author":{"gitId":"shenyih0ng"},"content":"   * Get detailed information about all modules","lastModifiedDate":"2022-10-03"},{"lineNumber":93,"author":{"gitId":"shenyih0ng"},"content":"   * Get all information about modules except for timetable and prereq tree in a year. This is compact enough to be loaded and filtered in browsers without lag and is useful for faceted search and detailed module listing.  NUSMods feeds this information into an Elasticsearch search server for the detailed module search page.","lastModifiedDate":"2022-10-03"},{"lineNumber":94,"author":{"gitId":"shenyih0ng"},"content":"   * @param acadYear academic year, with the slash (/) replaced by a dash (required)","lastModifiedDate":"2022-10-03"},{"lineNumber":95,"author":{"gitId":"shenyih0ng"},"content":"   * @return ApiResponse\u0026lt;List\u0026lt;ModuleInformation\u0026gt;\u0026gt;","lastModifiedDate":"2022-10-03"},{"lineNumber":96,"author":{"gitId":"shenyih0ng"},"content":"   * @throws ApiException if fails to make API call","lastModifiedDate":"2022-10-03"},{"lineNumber":97,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":98,"author":{"gitId":"shenyih0ng"},"content":"  public ApiResponse\u003cList\u003cModuleInformation\u003e\u003e acadYearModuleInfoJsonGetWithHttpInfo(String acadYear) throws ApiException {","lastModifiedDate":"2022-10-03"},{"lineNumber":99,"author":{"gitId":"shenyih0ng"},"content":"    HttpRequest.Builder localVarRequestBuilder \u003d acadYearModuleInfoJsonGetRequestBuilder(acadYear);","lastModifiedDate":"2022-10-03"},{"lineNumber":100,"author":{"gitId":"shenyih0ng"},"content":"    try {","lastModifiedDate":"2022-10-03"},{"lineNumber":101,"author":{"gitId":"shenyih0ng"},"content":"      HttpResponse\u003cInputStream\u003e localVarResponse \u003d memberVarHttpClient.send(","lastModifiedDate":"2022-10-03"},{"lineNumber":102,"author":{"gitId":"shenyih0ng"},"content":"          localVarRequestBuilder.build(),","lastModifiedDate":"2022-10-03"},{"lineNumber":103,"author":{"gitId":"shenyih0ng"},"content":"          HttpResponse.BodyHandlers.ofInputStream());","lastModifiedDate":"2022-10-03"},{"lineNumber":104,"author":{"gitId":"shenyih0ng"},"content":"      if (memberVarResponseInterceptor !\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":105,"author":{"gitId":"shenyih0ng"},"content":"        memberVarResponseInterceptor.accept(localVarResponse);","lastModifiedDate":"2022-10-03"},{"lineNumber":106,"author":{"gitId":"shenyih0ng"},"content":"      }","lastModifiedDate":"2022-10-03"},{"lineNumber":107,"author":{"gitId":"shenyih0ng"},"content":"      try {","lastModifiedDate":"2022-10-03"},{"lineNumber":108,"author":{"gitId":"shenyih0ng"},"content":"        if (localVarResponse.statusCode()/ 100 !\u003d 2) {","lastModifiedDate":"2022-10-03"},{"lineNumber":109,"author":{"gitId":"shenyih0ng"},"content":"          throw getApiException(\"acadYearModuleInfoJsonGet\", localVarResponse);","lastModifiedDate":"2022-10-03"},{"lineNumber":110,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":111,"author":{"gitId":"shenyih0ng"},"content":"        return new ApiResponse\u003cList\u003cModuleInformation\u003e\u003e(","lastModifiedDate":"2022-10-03"},{"lineNumber":112,"author":{"gitId":"shenyih0ng"},"content":"          localVarResponse.statusCode(),","lastModifiedDate":"2022-10-03"},{"lineNumber":113,"author":{"gitId":"shenyih0ng"},"content":"          localVarResponse.headers().map(),","lastModifiedDate":"2022-10-03"},{"lineNumber":114,"author":{"gitId":"shenyih0ng"},"content":"          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference\u003cList\u003cModuleInformation\u003e\u003e() {}) // closes the InputStream","lastModifiedDate":"2022-10-03"},{"lineNumber":115,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":116,"author":{"gitId":"shenyih0ng"},"content":"        );","lastModifiedDate":"2022-10-03"},{"lineNumber":117,"author":{"gitId":"shenyih0ng"},"content":"      } finally {","lastModifiedDate":"2022-10-03"},{"lineNumber":118,"author":{"gitId":"shenyih0ng"},"content":"      }","lastModifiedDate":"2022-10-03"},{"lineNumber":119,"author":{"gitId":"shenyih0ng"},"content":"    } catch (IOException e) {","lastModifiedDate":"2022-10-03"},{"lineNumber":120,"author":{"gitId":"shenyih0ng"},"content":"      throw new ApiException(e);","lastModifiedDate":"2022-10-03"},{"lineNumber":121,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":122,"author":{"gitId":"shenyih0ng"},"content":"    catch (InterruptedException e) {","lastModifiedDate":"2022-10-03"},{"lineNumber":123,"author":{"gitId":"shenyih0ng"},"content":"      Thread.currentThread().interrupt();","lastModifiedDate":"2022-10-03"},{"lineNumber":124,"author":{"gitId":"shenyih0ng"},"content":"      throw new ApiException(e);","lastModifiedDate":"2022-10-03"},{"lineNumber":125,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":126,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":127,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":128,"author":{"gitId":"shenyih0ng"},"content":"  private HttpRequest.Builder acadYearModuleInfoJsonGetRequestBuilder(String acadYear) throws ApiException {","lastModifiedDate":"2022-10-03"},{"lineNumber":129,"author":{"gitId":"shenyih0ng"},"content":"    // verify the required parameter \u0027acadYear\u0027 is set","lastModifiedDate":"2022-10-03"},{"lineNumber":130,"author":{"gitId":"shenyih0ng"},"content":"    if (acadYear \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":131,"author":{"gitId":"shenyih0ng"},"content":"      throw new ApiException(400, \"Missing the required parameter \u0027acadYear\u0027 when calling acadYearModuleInfoJsonGet\");","lastModifiedDate":"2022-10-03"},{"lineNumber":132,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":133,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":134,"author":{"gitId":"shenyih0ng"},"content":"    HttpRequest.Builder localVarRequestBuilder \u003d HttpRequest.newBuilder();","lastModifiedDate":"2022-10-03"},{"lineNumber":135,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":136,"author":{"gitId":"shenyih0ng"},"content":"    String localVarPath \u003d \"/{acadYear}/moduleInfo.json\"","lastModifiedDate":"2022-10-03"},{"lineNumber":137,"author":{"gitId":"shenyih0ng"},"content":"        .replace(\"{acadYear}\", ApiClient.urlEncode(acadYear.toString()));","lastModifiedDate":"2022-10-03"},{"lineNumber":138,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":139,"author":{"gitId":"shenyih0ng"},"content":"    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));","lastModifiedDate":"2022-10-03"},{"lineNumber":140,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":141,"author":{"gitId":"shenyih0ng"},"content":"    localVarRequestBuilder.header(\"Accept\", \"application/json\");","lastModifiedDate":"2022-10-03"},{"lineNumber":142,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":143,"author":{"gitId":"shenyih0ng"},"content":"    localVarRequestBuilder.method(\"GET\", HttpRequest.BodyPublishers.noBody());","lastModifiedDate":"2022-10-03"},{"lineNumber":144,"author":{"gitId":"shenyih0ng"},"content":"    if (memberVarReadTimeout !\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":145,"author":{"gitId":"shenyih0ng"},"content":"      localVarRequestBuilder.timeout(memberVarReadTimeout);","lastModifiedDate":"2022-10-03"},{"lineNumber":146,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":147,"author":{"gitId":"shenyih0ng"},"content":"    if (memberVarInterceptor !\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":148,"author":{"gitId":"shenyih0ng"},"content":"      memberVarInterceptor.accept(localVarRequestBuilder);","lastModifiedDate":"2022-10-03"},{"lineNumber":149,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":150,"author":{"gitId":"shenyih0ng"},"content":"    return localVarRequestBuilder;","lastModifiedDate":"2022-10-03"},{"lineNumber":151,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":152,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":153,"author":{"gitId":"shenyih0ng"},"content":"   * Get detailed information about all modules","lastModifiedDate":"2022-10-03"},{"lineNumber":154,"author":{"gitId":"shenyih0ng"},"content":"   * Get all information about modules except for timetable and prereq tree in a year. This is compact enough to be loaded and filtered in browsers without lag and is useful for faceted search and detailed module listing.  In AY2018/2019, NUSMods used this information for the detailed module search page. This endpoint will no longer be present starting in AY2019/2020. Please use the moduleInfo.json endpoint instead, which contains modules which are not offered in the specified academic year, but is otherwise identical to this endpoint.","lastModifiedDate":"2022-10-03"},{"lineNumber":155,"author":{"gitId":"shenyih0ng"},"content":"   * @param acadYear academic year, with the slash (/) replaced by a dash (required)","lastModifiedDate":"2022-10-03"},{"lineNumber":156,"author":{"gitId":"shenyih0ng"},"content":"   * @return List\u0026lt;ModuleInformation\u0026gt;","lastModifiedDate":"2022-10-03"},{"lineNumber":157,"author":{"gitId":"shenyih0ng"},"content":"   * @throws ApiException if fails to make API call","lastModifiedDate":"2022-10-03"},{"lineNumber":158,"author":{"gitId":"shenyih0ng"},"content":"   * @deprecated","lastModifiedDate":"2022-10-03"},{"lineNumber":159,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":160,"author":{"gitId":"shenyih0ng"},"content":"  @Deprecated","lastModifiedDate":"2022-10-03"},{"lineNumber":161,"author":{"gitId":"shenyih0ng"},"content":"  public List\u003cModuleInformation\u003e acadYearModuleInformationJsonGet(String acadYear) throws ApiException {","lastModifiedDate":"2022-10-03"},{"lineNumber":162,"author":{"gitId":"shenyih0ng"},"content":"    ApiResponse\u003cList\u003cModuleInformation\u003e\u003e localVarResponse \u003d acadYearModuleInformationJsonGetWithHttpInfo(acadYear);","lastModifiedDate":"2022-10-03"},{"lineNumber":163,"author":{"gitId":"shenyih0ng"},"content":"    return localVarResponse.getData();","lastModifiedDate":"2022-10-03"},{"lineNumber":164,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":165,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":166,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":167,"author":{"gitId":"shenyih0ng"},"content":"   * Get detailed information about all modules","lastModifiedDate":"2022-10-03"},{"lineNumber":168,"author":{"gitId":"shenyih0ng"},"content":"   * Get all information about modules except for timetable and prereq tree in a year. This is compact enough to be loaded and filtered in browsers without lag and is useful for faceted search and detailed module listing.  In AY2018/2019, NUSMods used this information for the detailed module search page. This endpoint will no longer be present starting in AY2019/2020. Please use the moduleInfo.json endpoint instead, which contains modules which are not offered in the specified academic year, but is otherwise identical to this endpoint.","lastModifiedDate":"2022-10-03"},{"lineNumber":169,"author":{"gitId":"shenyih0ng"},"content":"   * @param acadYear academic year, with the slash (/) replaced by a dash (required)","lastModifiedDate":"2022-10-03"},{"lineNumber":170,"author":{"gitId":"shenyih0ng"},"content":"   * @return ApiResponse\u0026lt;List\u0026lt;ModuleInformation\u0026gt;\u0026gt;","lastModifiedDate":"2022-10-03"},{"lineNumber":171,"author":{"gitId":"shenyih0ng"},"content":"   * @throws ApiException if fails to make API call","lastModifiedDate":"2022-10-03"},{"lineNumber":172,"author":{"gitId":"shenyih0ng"},"content":"   * @deprecated","lastModifiedDate":"2022-10-03"},{"lineNumber":173,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":174,"author":{"gitId":"shenyih0ng"},"content":"  @Deprecated","lastModifiedDate":"2022-10-03"},{"lineNumber":175,"author":{"gitId":"shenyih0ng"},"content":"  public ApiResponse\u003cList\u003cModuleInformation\u003e\u003e acadYearModuleInformationJsonGetWithHttpInfo(String acadYear) throws ApiException {","lastModifiedDate":"2022-10-03"},{"lineNumber":176,"author":{"gitId":"shenyih0ng"},"content":"    HttpRequest.Builder localVarRequestBuilder \u003d acadYearModuleInformationJsonGetRequestBuilder(acadYear);","lastModifiedDate":"2022-10-03"},{"lineNumber":177,"author":{"gitId":"shenyih0ng"},"content":"    try {","lastModifiedDate":"2022-10-03"},{"lineNumber":178,"author":{"gitId":"shenyih0ng"},"content":"      HttpResponse\u003cInputStream\u003e localVarResponse \u003d memberVarHttpClient.send(","lastModifiedDate":"2022-10-03"},{"lineNumber":179,"author":{"gitId":"shenyih0ng"},"content":"          localVarRequestBuilder.build(),","lastModifiedDate":"2022-10-03"},{"lineNumber":180,"author":{"gitId":"shenyih0ng"},"content":"          HttpResponse.BodyHandlers.ofInputStream());","lastModifiedDate":"2022-10-03"},{"lineNumber":181,"author":{"gitId":"shenyih0ng"},"content":"      if (memberVarResponseInterceptor !\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":182,"author":{"gitId":"shenyih0ng"},"content":"        memberVarResponseInterceptor.accept(localVarResponse);","lastModifiedDate":"2022-10-03"},{"lineNumber":183,"author":{"gitId":"shenyih0ng"},"content":"      }","lastModifiedDate":"2022-10-03"},{"lineNumber":184,"author":{"gitId":"shenyih0ng"},"content":"      try {","lastModifiedDate":"2022-10-03"},{"lineNumber":185,"author":{"gitId":"shenyih0ng"},"content":"        if (localVarResponse.statusCode()/ 100 !\u003d 2) {","lastModifiedDate":"2022-10-03"},{"lineNumber":186,"author":{"gitId":"shenyih0ng"},"content":"          throw getApiException(\"acadYearModuleInformationJsonGet\", localVarResponse);","lastModifiedDate":"2022-10-03"},{"lineNumber":187,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":188,"author":{"gitId":"shenyih0ng"},"content":"        return new ApiResponse\u003cList\u003cModuleInformation\u003e\u003e(","lastModifiedDate":"2022-10-03"},{"lineNumber":189,"author":{"gitId":"shenyih0ng"},"content":"          localVarResponse.statusCode(),","lastModifiedDate":"2022-10-03"},{"lineNumber":190,"author":{"gitId":"shenyih0ng"},"content":"          localVarResponse.headers().map(),","lastModifiedDate":"2022-10-03"},{"lineNumber":191,"author":{"gitId":"shenyih0ng"},"content":"          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference\u003cList\u003cModuleInformation\u003e\u003e() {}) // closes the InputStream","lastModifiedDate":"2022-10-03"},{"lineNumber":192,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":193,"author":{"gitId":"shenyih0ng"},"content":"        );","lastModifiedDate":"2022-10-03"},{"lineNumber":194,"author":{"gitId":"shenyih0ng"},"content":"      } finally {","lastModifiedDate":"2022-10-03"},{"lineNumber":195,"author":{"gitId":"shenyih0ng"},"content":"      }","lastModifiedDate":"2022-10-03"},{"lineNumber":196,"author":{"gitId":"shenyih0ng"},"content":"    } catch (IOException e) {","lastModifiedDate":"2022-10-03"},{"lineNumber":197,"author":{"gitId":"shenyih0ng"},"content":"      throw new ApiException(e);","lastModifiedDate":"2022-10-03"},{"lineNumber":198,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":199,"author":{"gitId":"shenyih0ng"},"content":"    catch (InterruptedException e) {","lastModifiedDate":"2022-10-03"},{"lineNumber":200,"author":{"gitId":"shenyih0ng"},"content":"      Thread.currentThread().interrupt();","lastModifiedDate":"2022-10-03"},{"lineNumber":201,"author":{"gitId":"shenyih0ng"},"content":"      throw new ApiException(e);","lastModifiedDate":"2022-10-03"},{"lineNumber":202,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":203,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":204,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":205,"author":{"gitId":"shenyih0ng"},"content":"  private HttpRequest.Builder acadYearModuleInformationJsonGetRequestBuilder(String acadYear) throws ApiException {","lastModifiedDate":"2022-10-03"},{"lineNumber":206,"author":{"gitId":"shenyih0ng"},"content":"    // verify the required parameter \u0027acadYear\u0027 is set","lastModifiedDate":"2022-10-03"},{"lineNumber":207,"author":{"gitId":"shenyih0ng"},"content":"    if (acadYear \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":208,"author":{"gitId":"shenyih0ng"},"content":"      throw new ApiException(400, \"Missing the required parameter \u0027acadYear\u0027 when calling acadYearModuleInformationJsonGet\");","lastModifiedDate":"2022-10-03"},{"lineNumber":209,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":210,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":211,"author":{"gitId":"shenyih0ng"},"content":"    HttpRequest.Builder localVarRequestBuilder \u003d HttpRequest.newBuilder();","lastModifiedDate":"2022-10-03"},{"lineNumber":212,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":213,"author":{"gitId":"shenyih0ng"},"content":"    String localVarPath \u003d \"/{acadYear}/moduleInformation.json\"","lastModifiedDate":"2022-10-03"},{"lineNumber":214,"author":{"gitId":"shenyih0ng"},"content":"        .replace(\"{acadYear}\", ApiClient.urlEncode(acadYear.toString()));","lastModifiedDate":"2022-10-03"},{"lineNumber":215,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":216,"author":{"gitId":"shenyih0ng"},"content":"    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));","lastModifiedDate":"2022-10-03"},{"lineNumber":217,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":218,"author":{"gitId":"shenyih0ng"},"content":"    localVarRequestBuilder.header(\"Accept\", \"application/json\");","lastModifiedDate":"2022-10-03"},{"lineNumber":219,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":220,"author":{"gitId":"shenyih0ng"},"content":"    localVarRequestBuilder.method(\"GET\", HttpRequest.BodyPublishers.noBody());","lastModifiedDate":"2022-10-03"},{"lineNumber":221,"author":{"gitId":"shenyih0ng"},"content":"    if (memberVarReadTimeout !\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":222,"author":{"gitId":"shenyih0ng"},"content":"      localVarRequestBuilder.timeout(memberVarReadTimeout);","lastModifiedDate":"2022-10-03"},{"lineNumber":223,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":224,"author":{"gitId":"shenyih0ng"},"content":"    if (memberVarInterceptor !\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":225,"author":{"gitId":"shenyih0ng"},"content":"      memberVarInterceptor.accept(localVarRequestBuilder);","lastModifiedDate":"2022-10-03"},{"lineNumber":226,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":227,"author":{"gitId":"shenyih0ng"},"content":"    return localVarRequestBuilder;","lastModifiedDate":"2022-10-03"},{"lineNumber":228,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":229,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":230,"author":{"gitId":"shenyih0ng"},"content":"   * Get summaries of all modules","lastModifiedDate":"2022-10-03"},{"lineNumber":231,"author":{"gitId":"shenyih0ng"},"content":"   * Get the module code, title and semesters which the module is available in for all modules in a year. This is useful for tasks that only require a minimal set of information, such as simple search, autocompleting module code and titles, and checking if a module code is valid.  NUSMods uses this information to validate module codes and for searching.","lastModifiedDate":"2022-10-03"},{"lineNumber":232,"author":{"gitId":"shenyih0ng"},"content":"   * @param acadYear academic year, with the slash (/) replaced by a dash (required)","lastModifiedDate":"2022-10-03"},{"lineNumber":233,"author":{"gitId":"shenyih0ng"},"content":"   * @return List\u0026lt;ModuleCondensed\u0026gt;","lastModifiedDate":"2022-10-03"},{"lineNumber":234,"author":{"gitId":"shenyih0ng"},"content":"   * @throws ApiException if fails to make API call","lastModifiedDate":"2022-10-03"},{"lineNumber":235,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":236,"author":{"gitId":"shenyih0ng"},"content":"  public List\u003cModuleCondensed\u003e acadYearModuleListJsonGet(String acadYear) throws ApiException {","lastModifiedDate":"2022-10-03"},{"lineNumber":237,"author":{"gitId":"shenyih0ng"},"content":"    ApiResponse\u003cList\u003cModuleCondensed\u003e\u003e localVarResponse \u003d acadYearModuleListJsonGetWithHttpInfo(acadYear);","lastModifiedDate":"2022-10-03"},{"lineNumber":238,"author":{"gitId":"shenyih0ng"},"content":"    return localVarResponse.getData();","lastModifiedDate":"2022-10-03"},{"lineNumber":239,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":240,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":241,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":242,"author":{"gitId":"shenyih0ng"},"content":"   * Get summaries of all modules","lastModifiedDate":"2022-10-03"},{"lineNumber":243,"author":{"gitId":"shenyih0ng"},"content":"   * Get the module code, title and semesters which the module is available in for all modules in a year. This is useful for tasks that only require a minimal set of information, such as simple search, autocompleting module code and titles, and checking if a module code is valid.  NUSMods uses this information to validate module codes and for searching.","lastModifiedDate":"2022-10-03"},{"lineNumber":244,"author":{"gitId":"shenyih0ng"},"content":"   * @param acadYear academic year, with the slash (/) replaced by a dash (required)","lastModifiedDate":"2022-10-03"},{"lineNumber":245,"author":{"gitId":"shenyih0ng"},"content":"   * @return ApiResponse\u0026lt;List\u0026lt;ModuleCondensed\u0026gt;\u0026gt;","lastModifiedDate":"2022-10-03"},{"lineNumber":246,"author":{"gitId":"shenyih0ng"},"content":"   * @throws ApiException if fails to make API call","lastModifiedDate":"2022-10-03"},{"lineNumber":247,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":248,"author":{"gitId":"shenyih0ng"},"content":"  public ApiResponse\u003cList\u003cModuleCondensed\u003e\u003e acadYearModuleListJsonGetWithHttpInfo(String acadYear) throws ApiException {","lastModifiedDate":"2022-10-03"},{"lineNumber":249,"author":{"gitId":"shenyih0ng"},"content":"    HttpRequest.Builder localVarRequestBuilder \u003d acadYearModuleListJsonGetRequestBuilder(acadYear);","lastModifiedDate":"2022-10-03"},{"lineNumber":250,"author":{"gitId":"shenyih0ng"},"content":"    try {","lastModifiedDate":"2022-10-03"},{"lineNumber":251,"author":{"gitId":"shenyih0ng"},"content":"      HttpResponse\u003cInputStream\u003e localVarResponse \u003d memberVarHttpClient.send(","lastModifiedDate":"2022-10-03"},{"lineNumber":252,"author":{"gitId":"shenyih0ng"},"content":"          localVarRequestBuilder.build(),","lastModifiedDate":"2022-10-03"},{"lineNumber":253,"author":{"gitId":"shenyih0ng"},"content":"          HttpResponse.BodyHandlers.ofInputStream());","lastModifiedDate":"2022-10-03"},{"lineNumber":254,"author":{"gitId":"shenyih0ng"},"content":"      if (memberVarResponseInterceptor !\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":255,"author":{"gitId":"shenyih0ng"},"content":"        memberVarResponseInterceptor.accept(localVarResponse);","lastModifiedDate":"2022-10-03"},{"lineNumber":256,"author":{"gitId":"shenyih0ng"},"content":"      }","lastModifiedDate":"2022-10-03"},{"lineNumber":257,"author":{"gitId":"shenyih0ng"},"content":"      try {","lastModifiedDate":"2022-10-03"},{"lineNumber":258,"author":{"gitId":"shenyih0ng"},"content":"        if (localVarResponse.statusCode()/ 100 !\u003d 2) {","lastModifiedDate":"2022-10-03"},{"lineNumber":259,"author":{"gitId":"shenyih0ng"},"content":"          throw getApiException(\"acadYearModuleListJsonGet\", localVarResponse);","lastModifiedDate":"2022-10-03"},{"lineNumber":260,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":261,"author":{"gitId":"shenyih0ng"},"content":"        return new ApiResponse\u003cList\u003cModuleCondensed\u003e\u003e(","lastModifiedDate":"2022-10-03"},{"lineNumber":262,"author":{"gitId":"shenyih0ng"},"content":"          localVarResponse.statusCode(),","lastModifiedDate":"2022-10-03"},{"lineNumber":263,"author":{"gitId":"shenyih0ng"},"content":"          localVarResponse.headers().map(),","lastModifiedDate":"2022-10-03"},{"lineNumber":264,"author":{"gitId":"shenyih0ng"},"content":"          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference\u003cList\u003cModuleCondensed\u003e\u003e() {}) // closes the InputStream","lastModifiedDate":"2022-10-03"},{"lineNumber":265,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":266,"author":{"gitId":"shenyih0ng"},"content":"        );","lastModifiedDate":"2022-10-03"},{"lineNumber":267,"author":{"gitId":"shenyih0ng"},"content":"      } finally {","lastModifiedDate":"2022-10-03"},{"lineNumber":268,"author":{"gitId":"shenyih0ng"},"content":"      }","lastModifiedDate":"2022-10-03"},{"lineNumber":269,"author":{"gitId":"shenyih0ng"},"content":"    } catch (IOException e) {","lastModifiedDate":"2022-10-03"},{"lineNumber":270,"author":{"gitId":"shenyih0ng"},"content":"      throw new ApiException(e);","lastModifiedDate":"2022-10-03"},{"lineNumber":271,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":272,"author":{"gitId":"shenyih0ng"},"content":"    catch (InterruptedException e) {","lastModifiedDate":"2022-10-03"},{"lineNumber":273,"author":{"gitId":"shenyih0ng"},"content":"      Thread.currentThread().interrupt();","lastModifiedDate":"2022-10-03"},{"lineNumber":274,"author":{"gitId":"shenyih0ng"},"content":"      throw new ApiException(e);","lastModifiedDate":"2022-10-03"},{"lineNumber":275,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":276,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":277,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":278,"author":{"gitId":"shenyih0ng"},"content":"  private HttpRequest.Builder acadYearModuleListJsonGetRequestBuilder(String acadYear) throws ApiException {","lastModifiedDate":"2022-10-03"},{"lineNumber":279,"author":{"gitId":"shenyih0ng"},"content":"    // verify the required parameter \u0027acadYear\u0027 is set","lastModifiedDate":"2022-10-03"},{"lineNumber":280,"author":{"gitId":"shenyih0ng"},"content":"    if (acadYear \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":281,"author":{"gitId":"shenyih0ng"},"content":"      throw new ApiException(400, \"Missing the required parameter \u0027acadYear\u0027 when calling acadYearModuleListJsonGet\");","lastModifiedDate":"2022-10-03"},{"lineNumber":282,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":283,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":284,"author":{"gitId":"shenyih0ng"},"content":"    HttpRequest.Builder localVarRequestBuilder \u003d HttpRequest.newBuilder();","lastModifiedDate":"2022-10-03"},{"lineNumber":285,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":286,"author":{"gitId":"shenyih0ng"},"content":"    String localVarPath \u003d \"/{acadYear}/moduleList.json\"","lastModifiedDate":"2022-10-03"},{"lineNumber":287,"author":{"gitId":"shenyih0ng"},"content":"        .replace(\"{acadYear}\", ApiClient.urlEncode(acadYear.toString()));","lastModifiedDate":"2022-10-03"},{"lineNumber":288,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":289,"author":{"gitId":"shenyih0ng"},"content":"    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));","lastModifiedDate":"2022-10-03"},{"lineNumber":290,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":291,"author":{"gitId":"shenyih0ng"},"content":"    localVarRequestBuilder.header(\"Accept\", \"application/json\");","lastModifiedDate":"2022-10-03"},{"lineNumber":292,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":293,"author":{"gitId":"shenyih0ng"},"content":"    localVarRequestBuilder.method(\"GET\", HttpRequest.BodyPublishers.noBody());","lastModifiedDate":"2022-10-03"},{"lineNumber":294,"author":{"gitId":"shenyih0ng"},"content":"    if (memberVarReadTimeout !\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":295,"author":{"gitId":"shenyih0ng"},"content":"      localVarRequestBuilder.timeout(memberVarReadTimeout);","lastModifiedDate":"2022-10-03"},{"lineNumber":296,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":297,"author":{"gitId":"shenyih0ng"},"content":"    if (memberVarInterceptor !\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":298,"author":{"gitId":"shenyih0ng"},"content":"      memberVarInterceptor.accept(localVarRequestBuilder);","lastModifiedDate":"2022-10-03"},{"lineNumber":299,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":300,"author":{"gitId":"shenyih0ng"},"content":"    return localVarRequestBuilder;","lastModifiedDate":"2022-10-03"},{"lineNumber":301,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":302,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":303,"author":{"gitId":"shenyih0ng"},"content":"   * Get all information about a specific module","lastModifiedDate":"2022-10-03"},{"lineNumber":304,"author":{"gitId":"shenyih0ng"},"content":"   * Get all information available for a specific module including prerequite tree and timetable.  NUSMods uses this on the module information page.","lastModifiedDate":"2022-10-03"},{"lineNumber":305,"author":{"gitId":"shenyih0ng"},"content":"   * @param acadYear academic year, with the slash (/) replaced by a dash (required)","lastModifiedDate":"2022-10-03"},{"lineNumber":306,"author":{"gitId":"shenyih0ng"},"content":"   * @param moduleCode module code (required)","lastModifiedDate":"2022-10-03"},{"lineNumber":307,"author":{"gitId":"shenyih0ng"},"content":"   * @return Module","lastModifiedDate":"2022-10-03"},{"lineNumber":308,"author":{"gitId":"shenyih0ng"},"content":"   * @throws ApiException if fails to make API call","lastModifiedDate":"2022-10-03"},{"lineNumber":309,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":310,"author":{"gitId":"shenyih0ng"},"content":"  public Module acadYearModulesModuleCodeJsonGet(String acadYear, String moduleCode) throws ApiException {","lastModifiedDate":"2022-10-03"},{"lineNumber":311,"author":{"gitId":"shenyih0ng"},"content":"    ApiResponse\u003cModule\u003e localVarResponse \u003d acadYearModulesModuleCodeJsonGetWithHttpInfo(acadYear, moduleCode);","lastModifiedDate":"2022-10-03"},{"lineNumber":312,"author":{"gitId":"shenyih0ng"},"content":"    return localVarResponse.getData();","lastModifiedDate":"2022-10-03"},{"lineNumber":313,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":314,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":315,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":316,"author":{"gitId":"shenyih0ng"},"content":"   * Get all information about a specific module","lastModifiedDate":"2022-10-03"},{"lineNumber":317,"author":{"gitId":"shenyih0ng"},"content":"   * Get all information available for a specific module including prerequite tree and timetable.  NUSMods uses this on the module information page.","lastModifiedDate":"2022-10-03"},{"lineNumber":318,"author":{"gitId":"shenyih0ng"},"content":"   * @param acadYear academic year, with the slash (/) replaced by a dash (required)","lastModifiedDate":"2022-10-03"},{"lineNumber":319,"author":{"gitId":"shenyih0ng"},"content":"   * @param moduleCode module code (required)","lastModifiedDate":"2022-10-03"},{"lineNumber":320,"author":{"gitId":"shenyih0ng"},"content":"   * @return ApiResponse\u0026lt;Module\u0026gt;","lastModifiedDate":"2022-10-03"},{"lineNumber":321,"author":{"gitId":"shenyih0ng"},"content":"   * @throws ApiException if fails to make API call","lastModifiedDate":"2022-10-03"},{"lineNumber":322,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":323,"author":{"gitId":"shenyih0ng"},"content":"  public ApiResponse\u003cModule\u003e acadYearModulesModuleCodeJsonGetWithHttpInfo(String acadYear, String moduleCode) throws ApiException {","lastModifiedDate":"2022-10-03"},{"lineNumber":324,"author":{"gitId":"shenyih0ng"},"content":"    HttpRequest.Builder localVarRequestBuilder \u003d acadYearModulesModuleCodeJsonGetRequestBuilder(acadYear, moduleCode);","lastModifiedDate":"2022-10-03"},{"lineNumber":325,"author":{"gitId":"shenyih0ng"},"content":"    try {","lastModifiedDate":"2022-10-03"},{"lineNumber":326,"author":{"gitId":"shenyih0ng"},"content":"      HttpResponse\u003cInputStream\u003e localVarResponse \u003d memberVarHttpClient.send(","lastModifiedDate":"2022-10-03"},{"lineNumber":327,"author":{"gitId":"shenyih0ng"},"content":"          localVarRequestBuilder.build(),","lastModifiedDate":"2022-10-03"},{"lineNumber":328,"author":{"gitId":"shenyih0ng"},"content":"          HttpResponse.BodyHandlers.ofInputStream());","lastModifiedDate":"2022-10-03"},{"lineNumber":329,"author":{"gitId":"shenyih0ng"},"content":"      if (memberVarResponseInterceptor !\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":330,"author":{"gitId":"shenyih0ng"},"content":"        memberVarResponseInterceptor.accept(localVarResponse);","lastModifiedDate":"2022-10-03"},{"lineNumber":331,"author":{"gitId":"shenyih0ng"},"content":"      }","lastModifiedDate":"2022-10-03"},{"lineNumber":332,"author":{"gitId":"shenyih0ng"},"content":"      try {","lastModifiedDate":"2022-10-03"},{"lineNumber":333,"author":{"gitId":"shenyih0ng"},"content":"        if (localVarResponse.statusCode()/ 100 !\u003d 2) {","lastModifiedDate":"2022-10-03"},{"lineNumber":334,"author":{"gitId":"shenyih0ng"},"content":"          throw getApiException(\"acadYearModulesModuleCodeJsonGet\", localVarResponse);","lastModifiedDate":"2022-10-03"},{"lineNumber":335,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":336,"author":{"gitId":"shenyih0ng"},"content":"        return new ApiResponse\u003cModule\u003e(","lastModifiedDate":"2022-10-03"},{"lineNumber":337,"author":{"gitId":"shenyih0ng"},"content":"          localVarResponse.statusCode(),","lastModifiedDate":"2022-10-03"},{"lineNumber":338,"author":{"gitId":"shenyih0ng"},"content":"          localVarResponse.headers().map(),","lastModifiedDate":"2022-10-03"},{"lineNumber":339,"author":{"gitId":"shenyih0ng"},"content":"          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference\u003cModule\u003e() {}) // closes the InputStream","lastModifiedDate":"2022-10-03"},{"lineNumber":340,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":341,"author":{"gitId":"shenyih0ng"},"content":"        );","lastModifiedDate":"2022-10-03"},{"lineNumber":342,"author":{"gitId":"shenyih0ng"},"content":"      } finally {","lastModifiedDate":"2022-10-03"},{"lineNumber":343,"author":{"gitId":"shenyih0ng"},"content":"      }","lastModifiedDate":"2022-10-03"},{"lineNumber":344,"author":{"gitId":"shenyih0ng"},"content":"    } catch (IOException e) {","lastModifiedDate":"2022-10-03"},{"lineNumber":345,"author":{"gitId":"shenyih0ng"},"content":"      throw new ApiException(e);","lastModifiedDate":"2022-10-03"},{"lineNumber":346,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":347,"author":{"gitId":"shenyih0ng"},"content":"    catch (InterruptedException e) {","lastModifiedDate":"2022-10-03"},{"lineNumber":348,"author":{"gitId":"shenyih0ng"},"content":"      Thread.currentThread().interrupt();","lastModifiedDate":"2022-10-03"},{"lineNumber":349,"author":{"gitId":"shenyih0ng"},"content":"      throw new ApiException(e);","lastModifiedDate":"2022-10-03"},{"lineNumber":350,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":351,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":352,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":353,"author":{"gitId":"shenyih0ng"},"content":"  private HttpRequest.Builder acadYearModulesModuleCodeJsonGetRequestBuilder(String acadYear, String moduleCode) throws ApiException {","lastModifiedDate":"2022-10-03"},{"lineNumber":354,"author":{"gitId":"shenyih0ng"},"content":"    // verify the required parameter \u0027acadYear\u0027 is set","lastModifiedDate":"2022-10-03"},{"lineNumber":355,"author":{"gitId":"shenyih0ng"},"content":"    if (acadYear \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":356,"author":{"gitId":"shenyih0ng"},"content":"      throw new ApiException(400, \"Missing the required parameter \u0027acadYear\u0027 when calling acadYearModulesModuleCodeJsonGet\");","lastModifiedDate":"2022-10-03"},{"lineNumber":357,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":358,"author":{"gitId":"shenyih0ng"},"content":"    // verify the required parameter \u0027moduleCode\u0027 is set","lastModifiedDate":"2022-10-03"},{"lineNumber":359,"author":{"gitId":"shenyih0ng"},"content":"    if (moduleCode \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":360,"author":{"gitId":"shenyih0ng"},"content":"      throw new ApiException(400, \"Missing the required parameter \u0027moduleCode\u0027 when calling acadYearModulesModuleCodeJsonGet\");","lastModifiedDate":"2022-10-03"},{"lineNumber":361,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":362,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":363,"author":{"gitId":"shenyih0ng"},"content":"    HttpRequest.Builder localVarRequestBuilder \u003d HttpRequest.newBuilder();","lastModifiedDate":"2022-10-03"},{"lineNumber":364,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":365,"author":{"gitId":"shenyih0ng"},"content":"    String localVarPath \u003d \"/{acadYear}/modules/{moduleCode}.json\"","lastModifiedDate":"2022-10-03"},{"lineNumber":366,"author":{"gitId":"shenyih0ng"},"content":"        .replace(\"{acadYear}\", ApiClient.urlEncode(acadYear.toString()))","lastModifiedDate":"2022-10-03"},{"lineNumber":367,"author":{"gitId":"shenyih0ng"},"content":"        .replace(\"{moduleCode}\", ApiClient.urlEncode(moduleCode.toString()));","lastModifiedDate":"2022-10-03"},{"lineNumber":368,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":369,"author":{"gitId":"shenyih0ng"},"content":"    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));","lastModifiedDate":"2022-10-03"},{"lineNumber":370,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":371,"author":{"gitId":"shenyih0ng"},"content":"    localVarRequestBuilder.header(\"Accept\", \"application/json\");","lastModifiedDate":"2022-10-03"},{"lineNumber":372,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":373,"author":{"gitId":"shenyih0ng"},"content":"    localVarRequestBuilder.method(\"GET\", HttpRequest.BodyPublishers.noBody());","lastModifiedDate":"2022-10-03"},{"lineNumber":374,"author":{"gitId":"shenyih0ng"},"content":"    if (memberVarReadTimeout !\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":375,"author":{"gitId":"shenyih0ng"},"content":"      localVarRequestBuilder.timeout(memberVarReadTimeout);","lastModifiedDate":"2022-10-03"},{"lineNumber":376,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":377,"author":{"gitId":"shenyih0ng"},"content":"    if (memberVarInterceptor !\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":378,"author":{"gitId":"shenyih0ng"},"content":"      memberVarInterceptor.accept(localVarRequestBuilder);","lastModifiedDate":"2022-10-03"},{"lineNumber":379,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":380,"author":{"gitId":"shenyih0ng"},"content":"    return localVarRequestBuilder;","lastModifiedDate":"2022-10-03"},{"lineNumber":381,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":382,"author":{"gitId":"shenyih0ng"},"content":"}","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"shenyih0ng":382}},{"path":"src/main/java/org/openapitools/client/api/VenuesApi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"shenyih0ng"},"content":"/*","lastModifiedDate":"2022-10-03"},{"lineNumber":2,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API contains data used to render \u003chttps://nusmods.com\u003e. It includes data on modules offered by NUS and their timetables, as well as information on the locations the classes take place in. You are welcome to use and experiment with the data, which is extracted from official APIs provided by the Registrar\u0027s Office.  The API consists of static JSON files scraped daily from the school\u0027s APIs. This means it only partially follow REST conventions, and all resources are read only. All successful responses will return JSON, and all endpoints end in `.json`.  The shape of the data returned by these endpoints are designed for NUSMods in mind. If you have any questions or find that you need the data in other shapes for other purposes, feel free to reach out to us:  - **Telegram**: \u003chttps://telegram.me/nusmods\u003e - **Mailing list**: \u003cnusmods@googlegroups.com\u003e (for security related issues please email \u003cmods@nusmods.com\u003e instead)  ## Fetching data  Any HTTP client can be used to fetch data from the API. HTTPS is preferred, but the server will also respond to HTTP requests. The server supports HTTP 1.1 as well as HTTP 2 over HTTPS, and supports gzip compression.  The API has no authentication, and is not rate limited. While the server can respond to a large number of requests simultaneously, we request that you be polite with resource usage so as not to disrupt nusmods.com, which relies on the same API server. In general there is no need to fetch data from the API more than once per day, as that is the frequency at which we update the data.  [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) headers are enabled on all endpoints, so client-side JavaScript can use also use the API.  ## TypeScript types  Since the NUSMods is written in TypeScript, typings are available in the source for the scraper. These may be easier to read than the documentation generated by Swagger.  - Module types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/modules.ts\u003e - Venue types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/venues.ts\u003e  ## Data  Below are some notes about the data returned from the API. Feel free to talk to us or create an issue if any of it is not clear.  ### Module data  Module endpoints return information on modules offered by NUS. Most of the module data is self-explanatory, but some of the data are more complex and is explained here.  #### Lessons  Each lesson in a timetable has a lesson type `lessonType` and class number `ClassNo`. Every student must take one of each lesson type offered by the module. For example, this module offers two tutorials and one lecture. That means the student must attend the lecture, and can choose one of the two tutorials to attend.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"01\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1100\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"COM1-0207\\\"     },     {       \\\"classNo\\\": \\\"02\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Friday\\\",       \\\"startTime\\\": \\\"0900\\\",       \\\"endTime\\\": \\\"1000\\\",       \\\"venue\\\": \\\"COM1-0209\\\"     }   ] } ```  Each lesson has a `classNo` key. There can be multiple lessons of the same type and class number, in which case students must attend both. In this example, students can choose to attend either lecture group 1 on Tuesdays and Wednesdays, or lecture group 2 on Mondays and Wednesdays.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1400\\\",       \\\"endTime\\\": \\\"1500\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Monday\\\",       \\\"startTime\\\": \\\"1000\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1500\\\",       \\\"endTime\\\": \\\"1600\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     }   ] } ```  #### Lesson Weeks  The `weeks` key on lessons can return data in one of two forms.  Weeks is usually a sorted array of numbers. In this case it represents the school weeks the lesson occurs on, from 1 to 13.  Some classes have lessons outside of the school timetable. In this case a `WeekRange` object is returned. The object will always contain a `start` and `end` key representing the start and end date of lessons. The example below has classes every week from 17th Jan to 18th April.  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-04-18\\\" } ```  Optionally it can also include `weekInterval`, a positive integer describing the number of weeks between each lesson, and `weeks`, an array of positive integers describing the weeks on which the lesson will fall, with week 1 being the starting date. If these are not present you can assume lessons will occur every week.  The following example has lessons on 17th Jan (week 1), 24th Jan (week 2), 7th Feb (week 4) and 21st Feb (week 6).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-21\\\",   \\\"weeks\\\": [1, 2, 4, 6] } ```  The following example has lessons on 17th Jan (week 1), 31st Jan (week 3), 14th Feb (week 5) and 28th Feb (week 7).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-28\\\",   \\\"weekInterval\\\": 2 } ```  #### Workload  The `workload` key can return data in one of two forms.  Workload is usually a **5-tuple of numbers**, describing the estimated number of hours per week the student is expected to put in for the module for **lectures, tutorials, laboratory, projects/fieldwork, and preparatory work** respectively. For example, a workload of `[2, 1, 1, 3, 3]` means the student should spend every week  - 2 hours in lectures - 1 hour in tutorials - 1 hour at the lab - 3 hours doing project work - 3 hours preparing for classes  Each module credit represents 2.5 hours of work each week, so the standard 4 MC module represents 10 hours of work each week. Module credit may not be integers.  Note that this is only an estimate, and may be outdated or differ significantly in reality. Some modules also incorrectly lists the **total** workload hours instead of weekly, so very large values may show up.  This value is parsed from a string provided by the school, and occasionally this field will contain unusual values which cannot be parsed. In this case this field will contain the original **string** instead, which should be displayed as-is to the user.  #### Prerequisite, corequisite and preclusions  These three keys determine whether a student can take a module.  **Prerequisites** are requirements you have to meet before you can take a module. These are usually in the form of other modules (see prerequisite tree below for a machine readable format), but can also be things like \u0027taken A-level H2 math\u0027 or \u002770 MCs and above\u0027.  **Preclusions** refer to modules or requirements that cannot be taken if this module is taken, and vice versa. These are usually modules whose content overlaps significantly with this module, and can usually be used to replace each other to fulfill prerequisites.  **Corequisites** are modules that must be taken together with this module in the same semester. This usually refer to twined modules - modules which have linked syllabuses.  #### Prerequisite Tree  The `prereqTree` key is return on the individual module endpoint (`/modules/{moduleCode`). Not all modules have prerequisites, and some have prerequisites that cannot be properly represented as a tree, in which case this key will not appear.  This describes the prerequisites that need to be fulfilled before this module can be taken. The data structure is recursive and represents a tree.  ```json {   \\\"and\\\": [     \\\"CS1231\\\",     {       \\\"or\\\": [\\\"CS1010S\\\", \\\"CS1010X\\\"]     }   ] } ```  In the example, this module requires CS1231 and either CS1010S or CS1010X. This can be visualized as  ```            ┌ CS1231 ── all of ─┤            │         ┌ CS1010            └ one of ─┤                      └ CS1010X ```  The module information also contains the inverse of this, that is, modules whose requirements are fulfilled by this module (taking this module will allow you to take these modules in the following semester). The data is found on the `fulfillRequirements` key as an array of module codes.  ### Venue data  Venue data is simply the module timetable restructured to show the lessons happening at each classroom.  The venue list endpoint returns a list of all locations that are used in the semester. Note that this is not a comprehensive list of locations, but rather just a list of venues that appears in module lessons.  The venue information endpoint returns the full class and occupancy information about a venue. The `classes` key contains a list of lessons similar to the `timetable` key in module data, but without a `venue` key and with `moduleCode`.","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"shenyih0ng"},"content":" * The version of the OpenAPI document: 2.0.0","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"shenyih0ng"},"content":" * Contact: nusmods@googlegroups.com","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"shenyih0ng"},"content":" * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"shenyih0ng"},"content":" * https://openapi-generator.tech","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"shenyih0ng"},"content":" * Do not edit the class manually.","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"shenyih0ng"},"content":"package org.openapitools.client.api;","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.client.ApiClient;","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.client.ApiException;","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.client.ApiResponse;","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.client.Pair;","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"shenyih0ng"},"content":"import java.math.BigDecimal;","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.client.model.VenueInformation;","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.core.type.TypeReference;","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"shenyih0ng"},"content":"import java.io.IOException;","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"shenyih0ng"},"content":"import java.io.InputStream;","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"shenyih0ng"},"content":"import java.net.URI;","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"shenyih0ng"},"content":"import java.net.http.HttpClient;","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"shenyih0ng"},"content":"import java.net.http.HttpRequest;","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"shenyih0ng"},"content":"import java.net.http.HttpResponse;","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"shenyih0ng"},"content":"import java.time.Duration;","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"shenyih0ng"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"shenyih0ng"},"content":"import java.util.StringJoiner;","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"shenyih0ng"},"content":"import java.util.List;","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Map;","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Set;","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"shenyih0ng"},"content":"import java.util.function.Consumer;","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"shenyih0ng"},"content":"@javax.annotation.processing.Generated(value \u003d \"org.openapitools.codegen.languages.JavaClientCodegen\", date \u003d \"2022-10-03T22:22:26.802458+08:00[Asia/Singapore]\")","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"shenyih0ng"},"content":"public class VenuesApi {","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"shenyih0ng"},"content":"  private final HttpClient memberVarHttpClient;","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"shenyih0ng"},"content":"  private final ObjectMapper memberVarObjectMapper;","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"shenyih0ng"},"content":"  private final String memberVarBaseUri;","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"shenyih0ng"},"content":"  private final Consumer\u003cHttpRequest.Builder\u003e memberVarInterceptor;","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"shenyih0ng"},"content":"  private final Duration memberVarReadTimeout;","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"shenyih0ng"},"content":"  private final Consumer\u003cHttpResponse\u003cInputStream\u003e\u003e memberVarResponseInterceptor;","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"shenyih0ng"},"content":"  private final Consumer\u003cHttpResponse\u003cString\u003e\u003e memberVarAsyncResponseInterceptor;","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"shenyih0ng"},"content":"  public VenuesApi() {","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"shenyih0ng"},"content":"    this(new ApiClient());","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"shenyih0ng"},"content":"  public VenuesApi(ApiClient apiClient) {","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"shenyih0ng"},"content":"    memberVarHttpClient \u003d apiClient.getHttpClient();","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"shenyih0ng"},"content":"    memberVarObjectMapper \u003d apiClient.getObjectMapper();","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"shenyih0ng"},"content":"    memberVarBaseUri \u003d apiClient.getBaseUri();","lastModifiedDate":"2022-10-03"},{"lineNumber":59,"author":{"gitId":"shenyih0ng"},"content":"    memberVarInterceptor \u003d apiClient.getRequestInterceptor();","lastModifiedDate":"2022-10-03"},{"lineNumber":60,"author":{"gitId":"shenyih0ng"},"content":"    memberVarReadTimeout \u003d apiClient.getReadTimeout();","lastModifiedDate":"2022-10-03"},{"lineNumber":61,"author":{"gitId":"shenyih0ng"},"content":"    memberVarResponseInterceptor \u003d apiClient.getResponseInterceptor();","lastModifiedDate":"2022-10-03"},{"lineNumber":62,"author":{"gitId":"shenyih0ng"},"content":"    memberVarAsyncResponseInterceptor \u003d apiClient.getAsyncResponseInterceptor();","lastModifiedDate":"2022-10-03"},{"lineNumber":63,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":64,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":65,"author":{"gitId":"shenyih0ng"},"content":"  protected ApiException getApiException(String operationId, HttpResponse\u003cInputStream\u003e response) throws IOException {","lastModifiedDate":"2022-10-03"},{"lineNumber":66,"author":{"gitId":"shenyih0ng"},"content":"    String body \u003d response.body() \u003d\u003d null ? null : new String(response.body().readAllBytes());","lastModifiedDate":"2022-10-03"},{"lineNumber":67,"author":{"gitId":"shenyih0ng"},"content":"    String message \u003d formatExceptionMessage(operationId, response.statusCode(), body);","lastModifiedDate":"2022-10-03"},{"lineNumber":68,"author":{"gitId":"shenyih0ng"},"content":"    return new ApiException(response.statusCode(), message, response.headers(), body);","lastModifiedDate":"2022-10-03"},{"lineNumber":69,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":70,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":71,"author":{"gitId":"shenyih0ng"},"content":"  private String formatExceptionMessage(String operationId, int statusCode, String body) {","lastModifiedDate":"2022-10-03"},{"lineNumber":72,"author":{"gitId":"shenyih0ng"},"content":"    if (body \u003d\u003d null || body.isEmpty()) {","lastModifiedDate":"2022-10-03"},{"lineNumber":73,"author":{"gitId":"shenyih0ng"},"content":"      body \u003d \"[no body]\";","lastModifiedDate":"2022-10-03"},{"lineNumber":74,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":75,"author":{"gitId":"shenyih0ng"},"content":"    return operationId + \" call failed with: \" + statusCode + \" - \" + body;","lastModifiedDate":"2022-10-03"},{"lineNumber":76,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":77,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":78,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":79,"author":{"gitId":"shenyih0ng"},"content":"   * Get detailed information on all venues","lastModifiedDate":"2022-10-03"},{"lineNumber":80,"author":{"gitId":"shenyih0ng"},"content":"   * Get detailed venue information including classes and occupancy for every venue. This is useful for displaying a timetable of the given venue as well as for checking if a venue is occupied at any given time.","lastModifiedDate":"2022-10-03"},{"lineNumber":81,"author":{"gitId":"shenyih0ng"},"content":"   * @param acadYear academic year, with the slash (/) replaced by a dash (required)","lastModifiedDate":"2022-10-03"},{"lineNumber":82,"author":{"gitId":"shenyih0ng"},"content":"   * @param semester semester, with 1 and 2 representing semester 1 and 2, and 3, 4 representing special term 1 and 2 (required)","lastModifiedDate":"2022-10-03"},{"lineNumber":83,"author":{"gitId":"shenyih0ng"},"content":"   * @return Map\u0026lt;String, List\u0026lt;VenueInformation\u0026gt;\u0026gt;","lastModifiedDate":"2022-10-03"},{"lineNumber":84,"author":{"gitId":"shenyih0ng"},"content":"   * @throws ApiException if fails to make API call","lastModifiedDate":"2022-10-03"},{"lineNumber":85,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":86,"author":{"gitId":"shenyih0ng"},"content":"  public Map\u003cString, List\u003cVenueInformation\u003e\u003e acadYearSemestersSemesterVenueInformationJsonGet(String acadYear, BigDecimal semester) throws ApiException {","lastModifiedDate":"2022-10-03"},{"lineNumber":87,"author":{"gitId":"shenyih0ng"},"content":"    ApiResponse\u003cMap\u003cString, List\u003cVenueInformation\u003e\u003e\u003e localVarResponse \u003d acadYearSemestersSemesterVenueInformationJsonGetWithHttpInfo(acadYear, semester);","lastModifiedDate":"2022-10-03"},{"lineNumber":88,"author":{"gitId":"shenyih0ng"},"content":"    return localVarResponse.getData();","lastModifiedDate":"2022-10-03"},{"lineNumber":89,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":90,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":91,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":92,"author":{"gitId":"shenyih0ng"},"content":"   * Get detailed information on all venues","lastModifiedDate":"2022-10-03"},{"lineNumber":93,"author":{"gitId":"shenyih0ng"},"content":"   * Get detailed venue information including classes and occupancy for every venue. This is useful for displaying a timetable of the given venue as well as for checking if a venue is occupied at any given time.","lastModifiedDate":"2022-10-03"},{"lineNumber":94,"author":{"gitId":"shenyih0ng"},"content":"   * @param acadYear academic year, with the slash (/) replaced by a dash (required)","lastModifiedDate":"2022-10-03"},{"lineNumber":95,"author":{"gitId":"shenyih0ng"},"content":"   * @param semester semester, with 1 and 2 representing semester 1 and 2, and 3, 4 representing special term 1 and 2 (required)","lastModifiedDate":"2022-10-03"},{"lineNumber":96,"author":{"gitId":"shenyih0ng"},"content":"   * @return ApiResponse\u0026lt;Map\u0026lt;String, List\u0026lt;VenueInformation\u0026gt;\u0026gt;\u0026gt;","lastModifiedDate":"2022-10-03"},{"lineNumber":97,"author":{"gitId":"shenyih0ng"},"content":"   * @throws ApiException if fails to make API call","lastModifiedDate":"2022-10-03"},{"lineNumber":98,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":99,"author":{"gitId":"shenyih0ng"},"content":"  public ApiResponse\u003cMap\u003cString, List\u003cVenueInformation\u003e\u003e\u003e acadYearSemestersSemesterVenueInformationJsonGetWithHttpInfo(String acadYear, BigDecimal semester) throws ApiException {","lastModifiedDate":"2022-10-03"},{"lineNumber":100,"author":{"gitId":"shenyih0ng"},"content":"    HttpRequest.Builder localVarRequestBuilder \u003d acadYearSemestersSemesterVenueInformationJsonGetRequestBuilder(acadYear, semester);","lastModifiedDate":"2022-10-03"},{"lineNumber":101,"author":{"gitId":"shenyih0ng"},"content":"    try {","lastModifiedDate":"2022-10-03"},{"lineNumber":102,"author":{"gitId":"shenyih0ng"},"content":"      HttpResponse\u003cInputStream\u003e localVarResponse \u003d memberVarHttpClient.send(","lastModifiedDate":"2022-10-03"},{"lineNumber":103,"author":{"gitId":"shenyih0ng"},"content":"          localVarRequestBuilder.build(),","lastModifiedDate":"2022-10-03"},{"lineNumber":104,"author":{"gitId":"shenyih0ng"},"content":"          HttpResponse.BodyHandlers.ofInputStream());","lastModifiedDate":"2022-10-03"},{"lineNumber":105,"author":{"gitId":"shenyih0ng"},"content":"      if (memberVarResponseInterceptor !\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":106,"author":{"gitId":"shenyih0ng"},"content":"        memberVarResponseInterceptor.accept(localVarResponse);","lastModifiedDate":"2022-10-03"},{"lineNumber":107,"author":{"gitId":"shenyih0ng"},"content":"      }","lastModifiedDate":"2022-10-03"},{"lineNumber":108,"author":{"gitId":"shenyih0ng"},"content":"      try {","lastModifiedDate":"2022-10-03"},{"lineNumber":109,"author":{"gitId":"shenyih0ng"},"content":"        if (localVarResponse.statusCode()/ 100 !\u003d 2) {","lastModifiedDate":"2022-10-03"},{"lineNumber":110,"author":{"gitId":"shenyih0ng"},"content":"          throw getApiException(\"acadYearSemestersSemesterVenueInformationJsonGet\", localVarResponse);","lastModifiedDate":"2022-10-03"},{"lineNumber":111,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":112,"author":{"gitId":"shenyih0ng"},"content":"        return new ApiResponse\u003cMap\u003cString, List\u003cVenueInformation\u003e\u003e\u003e(","lastModifiedDate":"2022-10-03"},{"lineNumber":113,"author":{"gitId":"shenyih0ng"},"content":"          localVarResponse.statusCode(),","lastModifiedDate":"2022-10-03"},{"lineNumber":114,"author":{"gitId":"shenyih0ng"},"content":"          localVarResponse.headers().map(),","lastModifiedDate":"2022-10-03"},{"lineNumber":115,"author":{"gitId":"shenyih0ng"},"content":"          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference\u003cMap\u003cString, List\u003cVenueInformation\u003e\u003e\u003e() {}) // closes the InputStream","lastModifiedDate":"2022-10-03"},{"lineNumber":116,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":117,"author":{"gitId":"shenyih0ng"},"content":"        );","lastModifiedDate":"2022-10-03"},{"lineNumber":118,"author":{"gitId":"shenyih0ng"},"content":"      } finally {","lastModifiedDate":"2022-10-03"},{"lineNumber":119,"author":{"gitId":"shenyih0ng"},"content":"      }","lastModifiedDate":"2022-10-03"},{"lineNumber":120,"author":{"gitId":"shenyih0ng"},"content":"    } catch (IOException e) {","lastModifiedDate":"2022-10-03"},{"lineNumber":121,"author":{"gitId":"shenyih0ng"},"content":"      throw new ApiException(e);","lastModifiedDate":"2022-10-03"},{"lineNumber":122,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":123,"author":{"gitId":"shenyih0ng"},"content":"    catch (InterruptedException e) {","lastModifiedDate":"2022-10-03"},{"lineNumber":124,"author":{"gitId":"shenyih0ng"},"content":"      Thread.currentThread().interrupt();","lastModifiedDate":"2022-10-03"},{"lineNumber":125,"author":{"gitId":"shenyih0ng"},"content":"      throw new ApiException(e);","lastModifiedDate":"2022-10-03"},{"lineNumber":126,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":127,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":128,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":129,"author":{"gitId":"shenyih0ng"},"content":"  private HttpRequest.Builder acadYearSemestersSemesterVenueInformationJsonGetRequestBuilder(String acadYear, BigDecimal semester) throws ApiException {","lastModifiedDate":"2022-10-03"},{"lineNumber":130,"author":{"gitId":"shenyih0ng"},"content":"    // verify the required parameter \u0027acadYear\u0027 is set","lastModifiedDate":"2022-10-03"},{"lineNumber":131,"author":{"gitId":"shenyih0ng"},"content":"    if (acadYear \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":132,"author":{"gitId":"shenyih0ng"},"content":"      throw new ApiException(400, \"Missing the required parameter \u0027acadYear\u0027 when calling acadYearSemestersSemesterVenueInformationJsonGet\");","lastModifiedDate":"2022-10-03"},{"lineNumber":133,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":134,"author":{"gitId":"shenyih0ng"},"content":"    // verify the required parameter \u0027semester\u0027 is set","lastModifiedDate":"2022-10-03"},{"lineNumber":135,"author":{"gitId":"shenyih0ng"},"content":"    if (semester \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":136,"author":{"gitId":"shenyih0ng"},"content":"      throw new ApiException(400, \"Missing the required parameter \u0027semester\u0027 when calling acadYearSemestersSemesterVenueInformationJsonGet\");","lastModifiedDate":"2022-10-03"},{"lineNumber":137,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":138,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":139,"author":{"gitId":"shenyih0ng"},"content":"    HttpRequest.Builder localVarRequestBuilder \u003d HttpRequest.newBuilder();","lastModifiedDate":"2022-10-03"},{"lineNumber":140,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":141,"author":{"gitId":"shenyih0ng"},"content":"    String localVarPath \u003d \"/{acadYear}/semesters/{semester}/venueInformation.json\"","lastModifiedDate":"2022-10-03"},{"lineNumber":142,"author":{"gitId":"shenyih0ng"},"content":"        .replace(\"{acadYear}\", ApiClient.urlEncode(acadYear.toString()))","lastModifiedDate":"2022-10-03"},{"lineNumber":143,"author":{"gitId":"shenyih0ng"},"content":"        .replace(\"{semester}\", ApiClient.urlEncode(semester.toString()));","lastModifiedDate":"2022-10-03"},{"lineNumber":144,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":145,"author":{"gitId":"shenyih0ng"},"content":"    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));","lastModifiedDate":"2022-10-03"},{"lineNumber":146,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":147,"author":{"gitId":"shenyih0ng"},"content":"    localVarRequestBuilder.header(\"Accept\", \"application/json\");","lastModifiedDate":"2022-10-03"},{"lineNumber":148,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":149,"author":{"gitId":"shenyih0ng"},"content":"    localVarRequestBuilder.method(\"GET\", HttpRequest.BodyPublishers.noBody());","lastModifiedDate":"2022-10-03"},{"lineNumber":150,"author":{"gitId":"shenyih0ng"},"content":"    if (memberVarReadTimeout !\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":151,"author":{"gitId":"shenyih0ng"},"content":"      localVarRequestBuilder.timeout(memberVarReadTimeout);","lastModifiedDate":"2022-10-03"},{"lineNumber":152,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":153,"author":{"gitId":"shenyih0ng"},"content":"    if (memberVarInterceptor !\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":154,"author":{"gitId":"shenyih0ng"},"content":"      memberVarInterceptor.accept(localVarRequestBuilder);","lastModifiedDate":"2022-10-03"},{"lineNumber":155,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":156,"author":{"gitId":"shenyih0ng"},"content":"    return localVarRequestBuilder;","lastModifiedDate":"2022-10-03"},{"lineNumber":157,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":158,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":159,"author":{"gitId":"shenyih0ng"},"content":"   * Get a list of all venues","lastModifiedDate":"2022-10-03"},{"lineNumber":160,"author":{"gitId":"shenyih0ng"},"content":"   * Get a list of all venues, including lecture theatres, seminar rooms, laboratories, etc. used in the given semester\u0026#39;s classes. This endpoint only returns an array of names, and is useful for searching and autocompletion.","lastModifiedDate":"2022-10-03"},{"lineNumber":161,"author":{"gitId":"shenyih0ng"},"content":"   * @param acadYear academic year, with the slash (/) replaced by a dash (required)","lastModifiedDate":"2022-10-03"},{"lineNumber":162,"author":{"gitId":"shenyih0ng"},"content":"   * @param semester semester, with 1 and 2 representing semester 1 and 2, and 3, 4 representing special term 1 and 2 (required)","lastModifiedDate":"2022-10-03"},{"lineNumber":163,"author":{"gitId":"shenyih0ng"},"content":"   * @return List\u0026lt;String\u0026gt;","lastModifiedDate":"2022-10-03"},{"lineNumber":164,"author":{"gitId":"shenyih0ng"},"content":"   * @throws ApiException if fails to make API call","lastModifiedDate":"2022-10-03"},{"lineNumber":165,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":166,"author":{"gitId":"shenyih0ng"},"content":"  public List\u003cString\u003e acadYearSemestersSemesterVenuesJsonGet(String acadYear, BigDecimal semester) throws ApiException {","lastModifiedDate":"2022-10-03"},{"lineNumber":167,"author":{"gitId":"shenyih0ng"},"content":"    ApiResponse\u003cList\u003cString\u003e\u003e localVarResponse \u003d acadYearSemestersSemesterVenuesJsonGetWithHttpInfo(acadYear, semester);","lastModifiedDate":"2022-10-03"},{"lineNumber":168,"author":{"gitId":"shenyih0ng"},"content":"    return localVarResponse.getData();","lastModifiedDate":"2022-10-03"},{"lineNumber":169,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":170,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":171,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":172,"author":{"gitId":"shenyih0ng"},"content":"   * Get a list of all venues","lastModifiedDate":"2022-10-03"},{"lineNumber":173,"author":{"gitId":"shenyih0ng"},"content":"   * Get a list of all venues, including lecture theatres, seminar rooms, laboratories, etc. used in the given semester\u0026#39;s classes. This endpoint only returns an array of names, and is useful for searching and autocompletion.","lastModifiedDate":"2022-10-03"},{"lineNumber":174,"author":{"gitId":"shenyih0ng"},"content":"   * @param acadYear academic year, with the slash (/) replaced by a dash (required)","lastModifiedDate":"2022-10-03"},{"lineNumber":175,"author":{"gitId":"shenyih0ng"},"content":"   * @param semester semester, with 1 and 2 representing semester 1 and 2, and 3, 4 representing special term 1 and 2 (required)","lastModifiedDate":"2022-10-03"},{"lineNumber":176,"author":{"gitId":"shenyih0ng"},"content":"   * @return ApiResponse\u0026lt;List\u0026lt;String\u0026gt;\u0026gt;","lastModifiedDate":"2022-10-03"},{"lineNumber":177,"author":{"gitId":"shenyih0ng"},"content":"   * @throws ApiException if fails to make API call","lastModifiedDate":"2022-10-03"},{"lineNumber":178,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":179,"author":{"gitId":"shenyih0ng"},"content":"  public ApiResponse\u003cList\u003cString\u003e\u003e acadYearSemestersSemesterVenuesJsonGetWithHttpInfo(String acadYear, BigDecimal semester) throws ApiException {","lastModifiedDate":"2022-10-03"},{"lineNumber":180,"author":{"gitId":"shenyih0ng"},"content":"    HttpRequest.Builder localVarRequestBuilder \u003d acadYearSemestersSemesterVenuesJsonGetRequestBuilder(acadYear, semester);","lastModifiedDate":"2022-10-03"},{"lineNumber":181,"author":{"gitId":"shenyih0ng"},"content":"    try {","lastModifiedDate":"2022-10-03"},{"lineNumber":182,"author":{"gitId":"shenyih0ng"},"content":"      HttpResponse\u003cInputStream\u003e localVarResponse \u003d memberVarHttpClient.send(","lastModifiedDate":"2022-10-03"},{"lineNumber":183,"author":{"gitId":"shenyih0ng"},"content":"          localVarRequestBuilder.build(),","lastModifiedDate":"2022-10-03"},{"lineNumber":184,"author":{"gitId":"shenyih0ng"},"content":"          HttpResponse.BodyHandlers.ofInputStream());","lastModifiedDate":"2022-10-03"},{"lineNumber":185,"author":{"gitId":"shenyih0ng"},"content":"      if (memberVarResponseInterceptor !\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":186,"author":{"gitId":"shenyih0ng"},"content":"        memberVarResponseInterceptor.accept(localVarResponse);","lastModifiedDate":"2022-10-03"},{"lineNumber":187,"author":{"gitId":"shenyih0ng"},"content":"      }","lastModifiedDate":"2022-10-03"},{"lineNumber":188,"author":{"gitId":"shenyih0ng"},"content":"      try {","lastModifiedDate":"2022-10-03"},{"lineNumber":189,"author":{"gitId":"shenyih0ng"},"content":"        if (localVarResponse.statusCode()/ 100 !\u003d 2) {","lastModifiedDate":"2022-10-03"},{"lineNumber":190,"author":{"gitId":"shenyih0ng"},"content":"          throw getApiException(\"acadYearSemestersSemesterVenuesJsonGet\", localVarResponse);","lastModifiedDate":"2022-10-03"},{"lineNumber":191,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":192,"author":{"gitId":"shenyih0ng"},"content":"        return new ApiResponse\u003cList\u003cString\u003e\u003e(","lastModifiedDate":"2022-10-03"},{"lineNumber":193,"author":{"gitId":"shenyih0ng"},"content":"          localVarResponse.statusCode(),","lastModifiedDate":"2022-10-03"},{"lineNumber":194,"author":{"gitId":"shenyih0ng"},"content":"          localVarResponse.headers().map(),","lastModifiedDate":"2022-10-03"},{"lineNumber":195,"author":{"gitId":"shenyih0ng"},"content":"          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference\u003cList\u003cString\u003e\u003e() {}) // closes the InputStream","lastModifiedDate":"2022-10-03"},{"lineNumber":196,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":197,"author":{"gitId":"shenyih0ng"},"content":"        );","lastModifiedDate":"2022-10-03"},{"lineNumber":198,"author":{"gitId":"shenyih0ng"},"content":"      } finally {","lastModifiedDate":"2022-10-03"},{"lineNumber":199,"author":{"gitId":"shenyih0ng"},"content":"      }","lastModifiedDate":"2022-10-03"},{"lineNumber":200,"author":{"gitId":"shenyih0ng"},"content":"    } catch (IOException e) {","lastModifiedDate":"2022-10-03"},{"lineNumber":201,"author":{"gitId":"shenyih0ng"},"content":"      throw new ApiException(e);","lastModifiedDate":"2022-10-03"},{"lineNumber":202,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":203,"author":{"gitId":"shenyih0ng"},"content":"    catch (InterruptedException e) {","lastModifiedDate":"2022-10-03"},{"lineNumber":204,"author":{"gitId":"shenyih0ng"},"content":"      Thread.currentThread().interrupt();","lastModifiedDate":"2022-10-03"},{"lineNumber":205,"author":{"gitId":"shenyih0ng"},"content":"      throw new ApiException(e);","lastModifiedDate":"2022-10-03"},{"lineNumber":206,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":207,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":208,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":209,"author":{"gitId":"shenyih0ng"},"content":"  private HttpRequest.Builder acadYearSemestersSemesterVenuesJsonGetRequestBuilder(String acadYear, BigDecimal semester) throws ApiException {","lastModifiedDate":"2022-10-03"},{"lineNumber":210,"author":{"gitId":"shenyih0ng"},"content":"    // verify the required parameter \u0027acadYear\u0027 is set","lastModifiedDate":"2022-10-03"},{"lineNumber":211,"author":{"gitId":"shenyih0ng"},"content":"    if (acadYear \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":212,"author":{"gitId":"shenyih0ng"},"content":"      throw new ApiException(400, \"Missing the required parameter \u0027acadYear\u0027 when calling acadYearSemestersSemesterVenuesJsonGet\");","lastModifiedDate":"2022-10-03"},{"lineNumber":213,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":214,"author":{"gitId":"shenyih0ng"},"content":"    // verify the required parameter \u0027semester\u0027 is set","lastModifiedDate":"2022-10-03"},{"lineNumber":215,"author":{"gitId":"shenyih0ng"},"content":"    if (semester \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":216,"author":{"gitId":"shenyih0ng"},"content":"      throw new ApiException(400, \"Missing the required parameter \u0027semester\u0027 when calling acadYearSemestersSemesterVenuesJsonGet\");","lastModifiedDate":"2022-10-03"},{"lineNumber":217,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":218,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":219,"author":{"gitId":"shenyih0ng"},"content":"    HttpRequest.Builder localVarRequestBuilder \u003d HttpRequest.newBuilder();","lastModifiedDate":"2022-10-03"},{"lineNumber":220,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":221,"author":{"gitId":"shenyih0ng"},"content":"    String localVarPath \u003d \"/{acadYear}/semesters/{semester}/venues.json\"","lastModifiedDate":"2022-10-03"},{"lineNumber":222,"author":{"gitId":"shenyih0ng"},"content":"        .replace(\"{acadYear}\", ApiClient.urlEncode(acadYear.toString()))","lastModifiedDate":"2022-10-03"},{"lineNumber":223,"author":{"gitId":"shenyih0ng"},"content":"        .replace(\"{semester}\", ApiClient.urlEncode(semester.toString()));","lastModifiedDate":"2022-10-03"},{"lineNumber":224,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":225,"author":{"gitId":"shenyih0ng"},"content":"    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));","lastModifiedDate":"2022-10-03"},{"lineNumber":226,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":227,"author":{"gitId":"shenyih0ng"},"content":"    localVarRequestBuilder.header(\"Accept\", \"application/json\");","lastModifiedDate":"2022-10-03"},{"lineNumber":228,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":229,"author":{"gitId":"shenyih0ng"},"content":"    localVarRequestBuilder.method(\"GET\", HttpRequest.BodyPublishers.noBody());","lastModifiedDate":"2022-10-03"},{"lineNumber":230,"author":{"gitId":"shenyih0ng"},"content":"    if (memberVarReadTimeout !\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":231,"author":{"gitId":"shenyih0ng"},"content":"      localVarRequestBuilder.timeout(memberVarReadTimeout);","lastModifiedDate":"2022-10-03"},{"lineNumber":232,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":233,"author":{"gitId":"shenyih0ng"},"content":"    if (memberVarInterceptor !\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":234,"author":{"gitId":"shenyih0ng"},"content":"      memberVarInterceptor.accept(localVarRequestBuilder);","lastModifiedDate":"2022-10-03"},{"lineNumber":235,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":236,"author":{"gitId":"shenyih0ng"},"content":"    return localVarRequestBuilder;","lastModifiedDate":"2022-10-03"},{"lineNumber":237,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":238,"author":{"gitId":"shenyih0ng"},"content":"}","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"shenyih0ng":238}},{"path":"src/main/java/org/openapitools/client/model/AbstractOpenApiSchema.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"shenyih0ng"},"content":"/*","lastModifiedDate":"2022-10-03"},{"lineNumber":2,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API contains data used to render \u003chttps://nusmods.com\u003e. It includes data on modules offered by NUS and their timetables, as well as information on the locations the classes take place in. You are welcome to use and experiment with the data, which is extracted from official APIs provided by the Registrar\u0027s Office.  The API consists of static JSON files scraped daily from the school\u0027s APIs. This means it only partially follow REST conventions, and all resources are read only. All successful responses will return JSON, and all endpoints end in `.json`.  The shape of the data returned by these endpoints are designed for NUSMods in mind. If you have any questions or find that you need the data in other shapes for other purposes, feel free to reach out to us:  - **Telegram**: \u003chttps://telegram.me/nusmods\u003e - **Mailing list**: \u003cnusmods@googlegroups.com\u003e (for security related issues please email \u003cmods@nusmods.com\u003e instead)  ## Fetching data  Any HTTP client can be used to fetch data from the API. HTTPS is preferred, but the server will also respond to HTTP requests. The server supports HTTP 1.1 as well as HTTP 2 over HTTPS, and supports gzip compression.  The API has no authentication, and is not rate limited. While the server can respond to a large number of requests simultaneously, we request that you be polite with resource usage so as not to disrupt nusmods.com, which relies on the same API server. In general there is no need to fetch data from the API more than once per day, as that is the frequency at which we update the data.  [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) headers are enabled on all endpoints, so client-side JavaScript can use also use the API.  ## TypeScript types  Since the NUSMods is written in TypeScript, typings are available in the source for the scraper. These may be easier to read than the documentation generated by Swagger.  - Module types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/modules.ts\u003e - Venue types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/venues.ts\u003e  ## Data  Below are some notes about the data returned from the API. Feel free to talk to us or create an issue if any of it is not clear.  ### Module data  Module endpoints return information on modules offered by NUS. Most of the module data is self-explanatory, but some of the data are more complex and is explained here.  #### Lessons  Each lesson in a timetable has a lesson type `lessonType` and class number `ClassNo`. Every student must take one of each lesson type offered by the module. For example, this module offers two tutorials and one lecture. That means the student must attend the lecture, and can choose one of the two tutorials to attend.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"01\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1100\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"COM1-0207\\\"     },     {       \\\"classNo\\\": \\\"02\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Friday\\\",       \\\"startTime\\\": \\\"0900\\\",       \\\"endTime\\\": \\\"1000\\\",       \\\"venue\\\": \\\"COM1-0209\\\"     }   ] } ```  Each lesson has a `classNo` key. There can be multiple lessons of the same type and class number, in which case students must attend both. In this example, students can choose to attend either lecture group 1 on Tuesdays and Wednesdays, or lecture group 2 on Mondays and Wednesdays.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1400\\\",       \\\"endTime\\\": \\\"1500\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Monday\\\",       \\\"startTime\\\": \\\"1000\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1500\\\",       \\\"endTime\\\": \\\"1600\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     }   ] } ```  #### Lesson Weeks  The `weeks` key on lessons can return data in one of two forms.  Weeks is usually a sorted array of numbers. In this case it represents the school weeks the lesson occurs on, from 1 to 13.  Some classes have lessons outside of the school timetable. In this case a `WeekRange` object is returned. The object will always contain a `start` and `end` key representing the start and end date of lessons. The example below has classes every week from 17th Jan to 18th April.  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-04-18\\\" } ```  Optionally it can also include `weekInterval`, a positive integer describing the number of weeks between each lesson, and `weeks`, an array of positive integers describing the weeks on which the lesson will fall, with week 1 being the starting date. If these are not present you can assume lessons will occur every week.  The following example has lessons on 17th Jan (week 1), 24th Jan (week 2), 7th Feb (week 4) and 21st Feb (week 6).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-21\\\",   \\\"weeks\\\": [1, 2, 4, 6] } ```  The following example has lessons on 17th Jan (week 1), 31st Jan (week 3), 14th Feb (week 5) and 28th Feb (week 7).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-28\\\",   \\\"weekInterval\\\": 2 } ```  #### Workload  The `workload` key can return data in one of two forms.  Workload is usually a **5-tuple of numbers**, describing the estimated number of hours per week the student is expected to put in for the module for **lectures, tutorials, laboratory, projects/fieldwork, and preparatory work** respectively. For example, a workload of `[2, 1, 1, 3, 3]` means the student should spend every week  - 2 hours in lectures - 1 hour in tutorials - 1 hour at the lab - 3 hours doing project work - 3 hours preparing for classes  Each module credit represents 2.5 hours of work each week, so the standard 4 MC module represents 10 hours of work each week. Module credit may not be integers.  Note that this is only an estimate, and may be outdated or differ significantly in reality. Some modules also incorrectly lists the **total** workload hours instead of weekly, so very large values may show up.  This value is parsed from a string provided by the school, and occasionally this field will contain unusual values which cannot be parsed. In this case this field will contain the original **string** instead, which should be displayed as-is to the user.  #### Prerequisite, corequisite and preclusions  These three keys determine whether a student can take a module.  **Prerequisites** are requirements you have to meet before you can take a module. These are usually in the form of other modules (see prerequisite tree below for a machine readable format), but can also be things like \u0027taken A-level H2 math\u0027 or \u002770 MCs and above\u0027.  **Preclusions** refer to modules or requirements that cannot be taken if this module is taken, and vice versa. These are usually modules whose content overlaps significantly with this module, and can usually be used to replace each other to fulfill prerequisites.  **Corequisites** are modules that must be taken together with this module in the same semester. This usually refer to twined modules - modules which have linked syllabuses.  #### Prerequisite Tree  The `prereqTree` key is return on the individual module endpoint (`/modules/{moduleCode`). Not all modules have prerequisites, and some have prerequisites that cannot be properly represented as a tree, in which case this key will not appear.  This describes the prerequisites that need to be fulfilled before this module can be taken. The data structure is recursive and represents a tree.  ```json {   \\\"and\\\": [     \\\"CS1231\\\",     {       \\\"or\\\": [\\\"CS1010S\\\", \\\"CS1010X\\\"]     }   ] } ```  In the example, this module requires CS1231 and either CS1010S or CS1010X. This can be visualized as  ```            ┌ CS1231 ── all of ─┤            │         ┌ CS1010            └ one of ─┤                      └ CS1010X ```  The module information also contains the inverse of this, that is, modules whose requirements are fulfilled by this module (taking this module will allow you to take these modules in the following semester). The data is found on the `fulfillRequirements` key as an array of module codes.  ### Venue data  Venue data is simply the module timetable restructured to show the lessons happening at each classroom.  The venue list endpoint returns a list of all locations that are used in the semester. Note that this is not a comprehensive list of locations, but rather just a list of venues that appears in module lessons.  The venue information endpoint returns the full class and occupancy information about a venue. The `classes` key contains a list of lessons similar to the `timetable` key in module data, but without a `venue` key and with `moduleCode`.","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"shenyih0ng"},"content":" * The version of the OpenAPI document: 2.0.0","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"shenyih0ng"},"content":" * Contact: nusmods@googlegroups.com","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"shenyih0ng"},"content":" * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"shenyih0ng"},"content":" * https://openapi-generator.tech","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"shenyih0ng"},"content":" * Do not edit the class manually.","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"shenyih0ng"},"content":"package org.openapitools.client.model;","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.client.ApiException;","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Objects;","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"shenyih0ng"},"content":"import java.lang.reflect.Type;","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Map;","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"shenyih0ng"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"shenyih0ng"},"content":" * Abstract class for oneOf,anyOf schemas defined in OpenAPI spec","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"shenyih0ng"},"content":"@javax.annotation.processing.Generated(value \u003d \"org.openapitools.codegen.languages.JavaClientCodegen\", date \u003d \"2022-10-03T22:22:26.802458+08:00[Asia/Singapore]\")","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"shenyih0ng"},"content":"public abstract class AbstractOpenApiSchema {","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"shenyih0ng"},"content":"    // store the actual instance of the schema/object","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"shenyih0ng"},"content":"    private Object instance;","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"shenyih0ng"},"content":"    // is nullable","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"shenyih0ng"},"content":"    private Boolean isNullable;","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"shenyih0ng"},"content":"    // schema type (e.g. oneOf, anyOf)","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"shenyih0ng"},"content":"    private final String schemaType;","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"shenyih0ng"},"content":"    public AbstractOpenApiSchema(String schemaType, Boolean isNullable) {","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"shenyih0ng"},"content":"        this.schemaType \u003d schemaType;","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"shenyih0ng"},"content":"        this.isNullable \u003d isNullable;","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"shenyih0ng"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"shenyih0ng"},"content":"     * Get the list of oneOf/anyOf composed schemas allowed to be stored in this object","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"shenyih0ng"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"shenyih0ng"},"content":"     * @return an instance of the actual schema/object","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"shenyih0ng"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"shenyih0ng"},"content":"    public abstract Map\u003cString, Class\u003c?\u003e\u003e getSchemas();","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"shenyih0ng"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"shenyih0ng"},"content":"     * Get the actual instance","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"shenyih0ng"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"shenyih0ng"},"content":"     * @return an instance of the actual schema/object","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"shenyih0ng"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"shenyih0ng"},"content":"    @JsonValue","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"shenyih0ng"},"content":"    public Object getActualInstance() {return instance;}","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"shenyih0ng"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":59,"author":{"gitId":"shenyih0ng"},"content":"     * Set the actual instance","lastModifiedDate":"2022-10-03"},{"lineNumber":60,"author":{"gitId":"shenyih0ng"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":61,"author":{"gitId":"shenyih0ng"},"content":"     * @param instance the actual instance of the schema/object","lastModifiedDate":"2022-10-03"},{"lineNumber":62,"author":{"gitId":"shenyih0ng"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":63,"author":{"gitId":"shenyih0ng"},"content":"    public void setActualInstance(Object instance) {this.instance \u003d instance;}","lastModifiedDate":"2022-10-03"},{"lineNumber":64,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":65,"author":{"gitId":"shenyih0ng"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":66,"author":{"gitId":"shenyih0ng"},"content":"     * Get the instant recursively when the schemas defined in oneOf/anyof happen to be oneOf/anyOf schema as well","lastModifiedDate":"2022-10-03"},{"lineNumber":67,"author":{"gitId":"shenyih0ng"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":68,"author":{"gitId":"shenyih0ng"},"content":"     * @return an instance of the actual schema/object","lastModifiedDate":"2022-10-03"},{"lineNumber":69,"author":{"gitId":"shenyih0ng"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":70,"author":{"gitId":"shenyih0ng"},"content":"    public Object getActualInstanceRecursively() {","lastModifiedDate":"2022-10-03"},{"lineNumber":71,"author":{"gitId":"shenyih0ng"},"content":"        return getActualInstanceRecursively(this);","lastModifiedDate":"2022-10-03"},{"lineNumber":72,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":73,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":74,"author":{"gitId":"shenyih0ng"},"content":"    private Object getActualInstanceRecursively(AbstractOpenApiSchema object) {","lastModifiedDate":"2022-10-03"},{"lineNumber":75,"author":{"gitId":"shenyih0ng"},"content":"        if (object.getActualInstance() \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":76,"author":{"gitId":"shenyih0ng"},"content":"            return null;","lastModifiedDate":"2022-10-03"},{"lineNumber":77,"author":{"gitId":"shenyih0ng"},"content":"        } else if (object.getActualInstance() instanceof AbstractOpenApiSchema) {","lastModifiedDate":"2022-10-03"},{"lineNumber":78,"author":{"gitId":"shenyih0ng"},"content":"            return getActualInstanceRecursively((AbstractOpenApiSchema)object.getActualInstance());","lastModifiedDate":"2022-10-03"},{"lineNumber":79,"author":{"gitId":"shenyih0ng"},"content":"        } else {","lastModifiedDate":"2022-10-03"},{"lineNumber":80,"author":{"gitId":"shenyih0ng"},"content":"            return object.getActualInstance();","lastModifiedDate":"2022-10-03"},{"lineNumber":81,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":82,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":83,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":84,"author":{"gitId":"shenyih0ng"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":85,"author":{"gitId":"shenyih0ng"},"content":"     * Get the schema type (e.g. anyOf, oneOf)","lastModifiedDate":"2022-10-03"},{"lineNumber":86,"author":{"gitId":"shenyih0ng"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":87,"author":{"gitId":"shenyih0ng"},"content":"     * @return the schema type","lastModifiedDate":"2022-10-03"},{"lineNumber":88,"author":{"gitId":"shenyih0ng"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":89,"author":{"gitId":"shenyih0ng"},"content":"    public String getSchemaType() {","lastModifiedDate":"2022-10-03"},{"lineNumber":90,"author":{"gitId":"shenyih0ng"},"content":"        return schemaType;","lastModifiedDate":"2022-10-03"},{"lineNumber":91,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":92,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":93,"author":{"gitId":"shenyih0ng"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":94,"author":{"gitId":"shenyih0ng"},"content":"    public String toString() {","lastModifiedDate":"2022-10-03"},{"lineNumber":95,"author":{"gitId":"shenyih0ng"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2022-10-03"},{"lineNumber":96,"author":{"gitId":"shenyih0ng"},"content":"        sb.append(\"class \").append(getClass()).append(\" {\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":97,"author":{"gitId":"shenyih0ng"},"content":"        sb.append(\"    instance: \").append(toIndentedString(instance)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":98,"author":{"gitId":"shenyih0ng"},"content":"        sb.append(\"    isNullable: \").append(toIndentedString(isNullable)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":99,"author":{"gitId":"shenyih0ng"},"content":"        sb.append(\"    schemaType: \").append(toIndentedString(schemaType)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":100,"author":{"gitId":"shenyih0ng"},"content":"        sb.append(\"}\");","lastModifiedDate":"2022-10-03"},{"lineNumber":101,"author":{"gitId":"shenyih0ng"},"content":"        return sb.toString();","lastModifiedDate":"2022-10-03"},{"lineNumber":102,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":103,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":104,"author":{"gitId":"shenyih0ng"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":105,"author":{"gitId":"shenyih0ng"},"content":"     * Convert the given object to string with each line indented by 4 spaces","lastModifiedDate":"2022-10-03"},{"lineNumber":106,"author":{"gitId":"shenyih0ng"},"content":"     * (except the first line).","lastModifiedDate":"2022-10-03"},{"lineNumber":107,"author":{"gitId":"shenyih0ng"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":108,"author":{"gitId":"shenyih0ng"},"content":"    private String toIndentedString(Object o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":109,"author":{"gitId":"shenyih0ng"},"content":"        if (o \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":110,"author":{"gitId":"shenyih0ng"},"content":"            return \"null\";","lastModifiedDate":"2022-10-03"},{"lineNumber":111,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":112,"author":{"gitId":"shenyih0ng"},"content":"        return o.toString().replace(\"\\n\", \"\\n    \");","lastModifiedDate":"2022-10-03"},{"lineNumber":113,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":114,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":115,"author":{"gitId":"shenyih0ng"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":116,"author":{"gitId":"shenyih0ng"},"content":"        if (this \u003d\u003d o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":117,"author":{"gitId":"shenyih0ng"},"content":"            return true;","lastModifiedDate":"2022-10-03"},{"lineNumber":118,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":119,"author":{"gitId":"shenyih0ng"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {","lastModifiedDate":"2022-10-03"},{"lineNumber":120,"author":{"gitId":"shenyih0ng"},"content":"            return false;","lastModifiedDate":"2022-10-03"},{"lineNumber":121,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":122,"author":{"gitId":"shenyih0ng"},"content":"        AbstractOpenApiSchema a \u003d (AbstractOpenApiSchema) o;","lastModifiedDate":"2022-10-03"},{"lineNumber":123,"author":{"gitId":"shenyih0ng"},"content":"        return Objects.equals(this.instance, a.instance) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":124,"author":{"gitId":"shenyih0ng"},"content":"            Objects.equals(this.isNullable, a.isNullable) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":125,"author":{"gitId":"shenyih0ng"},"content":"            Objects.equals(this.schemaType, a.schemaType);","lastModifiedDate":"2022-10-03"},{"lineNumber":126,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":127,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":128,"author":{"gitId":"shenyih0ng"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":129,"author":{"gitId":"shenyih0ng"},"content":"    public int hashCode() {","lastModifiedDate":"2022-10-03"},{"lineNumber":130,"author":{"gitId":"shenyih0ng"},"content":"        return Objects.hash(instance, isNullable, schemaType);","lastModifiedDate":"2022-10-03"},{"lineNumber":131,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":132,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":133,"author":{"gitId":"shenyih0ng"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":134,"author":{"gitId":"shenyih0ng"},"content":"     * Is nullable","lastModifiedDate":"2022-10-03"},{"lineNumber":135,"author":{"gitId":"shenyih0ng"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":136,"author":{"gitId":"shenyih0ng"},"content":"     * @return true if it\u0027s nullable","lastModifiedDate":"2022-10-03"},{"lineNumber":137,"author":{"gitId":"shenyih0ng"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":138,"author":{"gitId":"shenyih0ng"},"content":"    public Boolean isNullable() {","lastModifiedDate":"2022-10-03"},{"lineNumber":139,"author":{"gitId":"shenyih0ng"},"content":"        if (Boolean.TRUE.equals(isNullable)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":140,"author":{"gitId":"shenyih0ng"},"content":"            return Boolean.TRUE;","lastModifiedDate":"2022-10-03"},{"lineNumber":141,"author":{"gitId":"shenyih0ng"},"content":"        } else {","lastModifiedDate":"2022-10-03"},{"lineNumber":142,"author":{"gitId":"shenyih0ng"},"content":"            return Boolean.FALSE;","lastModifiedDate":"2022-10-03"},{"lineNumber":143,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":144,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":145,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":146,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":147,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":148,"author":{"gitId":"shenyih0ng"},"content":"}","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"shenyih0ng":148}},{"path":"src/main/java/org/openapitools/client/model/Lesson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"shenyih0ng"},"content":"/*","lastModifiedDate":"2022-10-03"},{"lineNumber":2,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API contains data used to render \u003chttps://nusmods.com\u003e. It includes data on modules offered by NUS and their timetables, as well as information on the locations the classes take place in. You are welcome to use and experiment with the data, which is extracted from official APIs provided by the Registrar\u0027s Office.  The API consists of static JSON files scraped daily from the school\u0027s APIs. This means it only partially follow REST conventions, and all resources are read only. All successful responses will return JSON, and all endpoints end in `.json`.  The shape of the data returned by these endpoints are designed for NUSMods in mind. If you have any questions or find that you need the data in other shapes for other purposes, feel free to reach out to us:  - **Telegram**: \u003chttps://telegram.me/nusmods\u003e - **Mailing list**: \u003cnusmods@googlegroups.com\u003e (for security related issues please email \u003cmods@nusmods.com\u003e instead)  ## Fetching data  Any HTTP client can be used to fetch data from the API. HTTPS is preferred, but the server will also respond to HTTP requests. The server supports HTTP 1.1 as well as HTTP 2 over HTTPS, and supports gzip compression.  The API has no authentication, and is not rate limited. While the server can respond to a large number of requests simultaneously, we request that you be polite with resource usage so as not to disrupt nusmods.com, which relies on the same API server. In general there is no need to fetch data from the API more than once per day, as that is the frequency at which we update the data.  [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) headers are enabled on all endpoints, so client-side JavaScript can use also use the API.  ## TypeScript types  Since the NUSMods is written in TypeScript, typings are available in the source for the scraper. These may be easier to read than the documentation generated by Swagger.  - Module types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/modules.ts\u003e - Venue types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/venues.ts\u003e  ## Data  Below are some notes about the data returned from the API. Feel free to talk to us or create an issue if any of it is not clear.  ### Module data  Module endpoints return information on modules offered by NUS. Most of the module data is self-explanatory, but some of the data are more complex and is explained here.  #### Lessons  Each lesson in a timetable has a lesson type `lessonType` and class number `ClassNo`. Every student must take one of each lesson type offered by the module. For example, this module offers two tutorials and one lecture. That means the student must attend the lecture, and can choose one of the two tutorials to attend.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"01\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1100\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"COM1-0207\\\"     },     {       \\\"classNo\\\": \\\"02\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Friday\\\",       \\\"startTime\\\": \\\"0900\\\",       \\\"endTime\\\": \\\"1000\\\",       \\\"venue\\\": \\\"COM1-0209\\\"     }   ] } ```  Each lesson has a `classNo` key. There can be multiple lessons of the same type and class number, in which case students must attend both. In this example, students can choose to attend either lecture group 1 on Tuesdays and Wednesdays, or lecture group 2 on Mondays and Wednesdays.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1400\\\",       \\\"endTime\\\": \\\"1500\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Monday\\\",       \\\"startTime\\\": \\\"1000\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1500\\\",       \\\"endTime\\\": \\\"1600\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     }   ] } ```  #### Lesson Weeks  The `weeks` key on lessons can return data in one of two forms.  Weeks is usually a sorted array of numbers. In this case it represents the school weeks the lesson occurs on, from 1 to 13.  Some classes have lessons outside of the school timetable. In this case a `WeekRange` object is returned. The object will always contain a `start` and `end` key representing the start and end date of lessons. The example below has classes every week from 17th Jan to 18th April.  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-04-18\\\" } ```  Optionally it can also include `weekInterval`, a positive integer describing the number of weeks between each lesson, and `weeks`, an array of positive integers describing the weeks on which the lesson will fall, with week 1 being the starting date. If these are not present you can assume lessons will occur every week.  The following example has lessons on 17th Jan (week 1), 24th Jan (week 2), 7th Feb (week 4) and 21st Feb (week 6).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-21\\\",   \\\"weeks\\\": [1, 2, 4, 6] } ```  The following example has lessons on 17th Jan (week 1), 31st Jan (week 3), 14th Feb (week 5) and 28th Feb (week 7).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-28\\\",   \\\"weekInterval\\\": 2 } ```  #### Workload  The `workload` key can return data in one of two forms.  Workload is usually a **5-tuple of numbers**, describing the estimated number of hours per week the student is expected to put in for the module for **lectures, tutorials, laboratory, projects/fieldwork, and preparatory work** respectively. For example, a workload of `[2, 1, 1, 3, 3]` means the student should spend every week  - 2 hours in lectures - 1 hour in tutorials - 1 hour at the lab - 3 hours doing project work - 3 hours preparing for classes  Each module credit represents 2.5 hours of work each week, so the standard 4 MC module represents 10 hours of work each week. Module credit may not be integers.  Note that this is only an estimate, and may be outdated or differ significantly in reality. Some modules also incorrectly lists the **total** workload hours instead of weekly, so very large values may show up.  This value is parsed from a string provided by the school, and occasionally this field will contain unusual values which cannot be parsed. In this case this field will contain the original **string** instead, which should be displayed as-is to the user.  #### Prerequisite, corequisite and preclusions  These three keys determine whether a student can take a module.  **Prerequisites** are requirements you have to meet before you can take a module. These are usually in the form of other modules (see prerequisite tree below for a machine readable format), but can also be things like \u0027taken A-level H2 math\u0027 or \u002770 MCs and above\u0027.  **Preclusions** refer to modules or requirements that cannot be taken if this module is taken, and vice versa. These are usually modules whose content overlaps significantly with this module, and can usually be used to replace each other to fulfill prerequisites.  **Corequisites** are modules that must be taken together with this module in the same semester. This usually refer to twined modules - modules which have linked syllabuses.  #### Prerequisite Tree  The `prereqTree` key is return on the individual module endpoint (`/modules/{moduleCode`). Not all modules have prerequisites, and some have prerequisites that cannot be properly represented as a tree, in which case this key will not appear.  This describes the prerequisites that need to be fulfilled before this module can be taken. The data structure is recursive and represents a tree.  ```json {   \\\"and\\\": [     \\\"CS1231\\\",     {       \\\"or\\\": [\\\"CS1010S\\\", \\\"CS1010X\\\"]     }   ] } ```  In the example, this module requires CS1231 and either CS1010S or CS1010X. This can be visualized as  ```            ┌ CS1231 ── all of ─┤            │         ┌ CS1010            └ one of ─┤                      └ CS1010X ```  The module information also contains the inverse of this, that is, modules whose requirements are fulfilled by this module (taking this module will allow you to take these modules in the following semester). The data is found on the `fulfillRequirements` key as an array of module codes.  ### Venue data  Venue data is simply the module timetable restructured to show the lessons happening at each classroom.  The venue list endpoint returns a list of all locations that are used in the semester. Note that this is not a comprehensive list of locations, but rather just a list of venues that appears in module lessons.  The venue information endpoint returns the full class and occupancy information about a venue. The `classes` key contains a list of lessons similar to the `timetable` key in module data, but without a `venue` key and with `moduleCode`.","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"shenyih0ng"},"content":" * The version of the OpenAPI document: 2.0.0","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"shenyih0ng"},"content":" * Contact: nusmods@googlegroups.com","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"shenyih0ng"},"content":" * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"shenyih0ng"},"content":" * https://openapi-generator.tech","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"shenyih0ng"},"content":" * Do not edit the class manually.","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"shenyih0ng"},"content":"package org.openapitools.client.model;","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Objects;","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Map;","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"shenyih0ng"},"content":"import java.util.HashMap;","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonInclude;","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonTypeName;","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"shenyih0ng"},"content":"import io.swagger.annotations.ApiModel;","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"shenyih0ng"},"content":"import io.swagger.annotations.ApiModelProperty;","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"shenyih0ng"},"content":"import java.math.BigDecimal;","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.client.model.LessonWeeks;","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonPropertyOrder;","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"shenyih0ng"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"shenyih0ng"},"content":" * Lesson","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"shenyih0ng"},"content":"@JsonPropertyOrder({","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"shenyih0ng"},"content":"  Lesson.JSON_PROPERTY_CLASS_NO,","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"shenyih0ng"},"content":"  Lesson.JSON_PROPERTY_START_TIME,","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"shenyih0ng"},"content":"  Lesson.JSON_PROPERTY_END_TIME,","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"shenyih0ng"},"content":"  Lesson.JSON_PROPERTY_WEEKS,","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"shenyih0ng"},"content":"  Lesson.JSON_PROPERTY_VENUE,","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"shenyih0ng"},"content":"  Lesson.JSON_PROPERTY_DAY,","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"shenyih0ng"},"content":"  Lesson.JSON_PROPERTY_LESSON_TYPE,","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"shenyih0ng"},"content":"  Lesson.JSON_PROPERTY_SIZE","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"shenyih0ng"},"content":"})","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"shenyih0ng"},"content":"@javax.annotation.processing.Generated(value \u003d \"org.openapitools.codegen.languages.JavaClientCodegen\", date \u003d \"2022-10-03T22:22:26.802458+08:00[Asia/Singapore]\")","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"shenyih0ng"},"content":"public class Lesson {","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_CLASS_NO \u003d \"classNo\";","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"shenyih0ng"},"content":"  private String classNo;","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_START_TIME \u003d \"startTime\";","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"shenyih0ng"},"content":"  private String startTime;","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_END_TIME \u003d \"endTime\";","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"shenyih0ng"},"content":"  private String endTime;","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_WEEKS \u003d \"weeks\";","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"shenyih0ng"},"content":"  private LessonWeeks weeks;","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":59,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_VENUE \u003d \"venue\";","lastModifiedDate":"2022-10-03"},{"lineNumber":60,"author":{"gitId":"shenyih0ng"},"content":"  private String venue;","lastModifiedDate":"2022-10-03"},{"lineNumber":61,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":62,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_DAY \u003d \"day\";","lastModifiedDate":"2022-10-03"},{"lineNumber":63,"author":{"gitId":"shenyih0ng"},"content":"  private String day;","lastModifiedDate":"2022-10-03"},{"lineNumber":64,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":65,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_LESSON_TYPE \u003d \"lessonType\";","lastModifiedDate":"2022-10-03"},{"lineNumber":66,"author":{"gitId":"shenyih0ng"},"content":"  private String lessonType;","lastModifiedDate":"2022-10-03"},{"lineNumber":67,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":68,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_SIZE \u003d \"size\";","lastModifiedDate":"2022-10-03"},{"lineNumber":69,"author":{"gitId":"shenyih0ng"},"content":"  private BigDecimal size;","lastModifiedDate":"2022-10-03"},{"lineNumber":70,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":71,"author":{"gitId":"shenyih0ng"},"content":"  public Lesson() {","lastModifiedDate":"2022-10-03"},{"lineNumber":72,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":73,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":74,"author":{"gitId":"shenyih0ng"},"content":"  public Lesson classNo(String classNo) {","lastModifiedDate":"2022-10-03"},{"lineNumber":75,"author":{"gitId":"shenyih0ng"},"content":"    this.classNo \u003d classNo;","lastModifiedDate":"2022-10-03"},{"lineNumber":76,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":77,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":78,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":79,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":80,"author":{"gitId":"shenyih0ng"},"content":"   * Get classNo","lastModifiedDate":"2022-10-03"},{"lineNumber":81,"author":{"gitId":"shenyih0ng"},"content":"   * @return classNo","lastModifiedDate":"2022-10-03"},{"lineNumber":82,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":83,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":84,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"08\", required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":85,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_CLASS_NO)","lastModifiedDate":"2022-10-03"},{"lineNumber":86,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":87,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":88,"author":{"gitId":"shenyih0ng"},"content":"  public String getClassNo() {","lastModifiedDate":"2022-10-03"},{"lineNumber":89,"author":{"gitId":"shenyih0ng"},"content":"    return classNo;","lastModifiedDate":"2022-10-03"},{"lineNumber":90,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":91,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":92,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":93,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_CLASS_NO)","lastModifiedDate":"2022-10-03"},{"lineNumber":94,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":95,"author":{"gitId":"shenyih0ng"},"content":"  public void setClassNo(String classNo) {","lastModifiedDate":"2022-10-03"},{"lineNumber":96,"author":{"gitId":"shenyih0ng"},"content":"    this.classNo \u003d classNo;","lastModifiedDate":"2022-10-03"},{"lineNumber":97,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":98,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":99,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":100,"author":{"gitId":"shenyih0ng"},"content":"  public Lesson startTime(String startTime) {","lastModifiedDate":"2022-10-03"},{"lineNumber":101,"author":{"gitId":"shenyih0ng"},"content":"    this.startTime \u003d startTime;","lastModifiedDate":"2022-10-03"},{"lineNumber":102,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":103,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":104,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":105,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":106,"author":{"gitId":"shenyih0ng"},"content":"   * Get startTime","lastModifiedDate":"2022-10-03"},{"lineNumber":107,"author":{"gitId":"shenyih0ng"},"content":"   * @return startTime","lastModifiedDate":"2022-10-03"},{"lineNumber":108,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":109,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":110,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"1100\", required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":111,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_START_TIME)","lastModifiedDate":"2022-10-03"},{"lineNumber":112,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":113,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":114,"author":{"gitId":"shenyih0ng"},"content":"  public String getStartTime() {","lastModifiedDate":"2022-10-03"},{"lineNumber":115,"author":{"gitId":"shenyih0ng"},"content":"    return startTime;","lastModifiedDate":"2022-10-03"},{"lineNumber":116,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":117,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":118,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":119,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_START_TIME)","lastModifiedDate":"2022-10-03"},{"lineNumber":120,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":121,"author":{"gitId":"shenyih0ng"},"content":"  public void setStartTime(String startTime) {","lastModifiedDate":"2022-10-03"},{"lineNumber":122,"author":{"gitId":"shenyih0ng"},"content":"    this.startTime \u003d startTime;","lastModifiedDate":"2022-10-03"},{"lineNumber":123,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":124,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":125,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":126,"author":{"gitId":"shenyih0ng"},"content":"  public Lesson endTime(String endTime) {","lastModifiedDate":"2022-10-03"},{"lineNumber":127,"author":{"gitId":"shenyih0ng"},"content":"    this.endTime \u003d endTime;","lastModifiedDate":"2022-10-03"},{"lineNumber":128,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":129,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":130,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":131,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":132,"author":{"gitId":"shenyih0ng"},"content":"   * Get endTime","lastModifiedDate":"2022-10-03"},{"lineNumber":133,"author":{"gitId":"shenyih0ng"},"content":"   * @return endTime","lastModifiedDate":"2022-10-03"},{"lineNumber":134,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":135,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":136,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"1200\", required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":137,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_END_TIME)","lastModifiedDate":"2022-10-03"},{"lineNumber":138,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":139,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":140,"author":{"gitId":"shenyih0ng"},"content":"  public String getEndTime() {","lastModifiedDate":"2022-10-03"},{"lineNumber":141,"author":{"gitId":"shenyih0ng"},"content":"    return endTime;","lastModifiedDate":"2022-10-03"},{"lineNumber":142,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":143,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":144,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":145,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_END_TIME)","lastModifiedDate":"2022-10-03"},{"lineNumber":146,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":147,"author":{"gitId":"shenyih0ng"},"content":"  public void setEndTime(String endTime) {","lastModifiedDate":"2022-10-03"},{"lineNumber":148,"author":{"gitId":"shenyih0ng"},"content":"    this.endTime \u003d endTime;","lastModifiedDate":"2022-10-03"},{"lineNumber":149,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":150,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":151,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":152,"author":{"gitId":"shenyih0ng"},"content":"  public Lesson weeks(LessonWeeks weeks) {","lastModifiedDate":"2022-10-03"},{"lineNumber":153,"author":{"gitId":"shenyih0ng"},"content":"    this.weeks \u003d weeks;","lastModifiedDate":"2022-10-03"},{"lineNumber":154,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":155,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":156,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":157,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":158,"author":{"gitId":"shenyih0ng"},"content":"   * Get weeks","lastModifiedDate":"2022-10-03"},{"lineNumber":159,"author":{"gitId":"shenyih0ng"},"content":"   * @return weeks","lastModifiedDate":"2022-10-03"},{"lineNumber":160,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":161,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":162,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":163,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_WEEKS)","lastModifiedDate":"2022-10-03"},{"lineNumber":164,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":165,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":166,"author":{"gitId":"shenyih0ng"},"content":"  public LessonWeeks getWeeks() {","lastModifiedDate":"2022-10-03"},{"lineNumber":167,"author":{"gitId":"shenyih0ng"},"content":"    return weeks;","lastModifiedDate":"2022-10-03"},{"lineNumber":168,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":169,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":170,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":171,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_WEEKS)","lastModifiedDate":"2022-10-03"},{"lineNumber":172,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":173,"author":{"gitId":"shenyih0ng"},"content":"  public void setWeeks(LessonWeeks weeks) {","lastModifiedDate":"2022-10-03"},{"lineNumber":174,"author":{"gitId":"shenyih0ng"},"content":"    this.weeks \u003d weeks;","lastModifiedDate":"2022-10-03"},{"lineNumber":175,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":176,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":177,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":178,"author":{"gitId":"shenyih0ng"},"content":"  public Lesson venue(String venue) {","lastModifiedDate":"2022-10-03"},{"lineNumber":179,"author":{"gitId":"shenyih0ng"},"content":"    this.venue \u003d venue;","lastModifiedDate":"2022-10-03"},{"lineNumber":180,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":181,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":182,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":183,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":184,"author":{"gitId":"shenyih0ng"},"content":"   * Get venue","lastModifiedDate":"2022-10-03"},{"lineNumber":185,"author":{"gitId":"shenyih0ng"},"content":"   * @return venue","lastModifiedDate":"2022-10-03"},{"lineNumber":186,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":187,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":188,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"COM1-0208\", required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":189,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_VENUE)","lastModifiedDate":"2022-10-03"},{"lineNumber":190,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":191,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":192,"author":{"gitId":"shenyih0ng"},"content":"  public String getVenue() {","lastModifiedDate":"2022-10-03"},{"lineNumber":193,"author":{"gitId":"shenyih0ng"},"content":"    return venue;","lastModifiedDate":"2022-10-03"},{"lineNumber":194,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":195,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":196,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":197,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_VENUE)","lastModifiedDate":"2022-10-03"},{"lineNumber":198,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":199,"author":{"gitId":"shenyih0ng"},"content":"  public void setVenue(String venue) {","lastModifiedDate":"2022-10-03"},{"lineNumber":200,"author":{"gitId":"shenyih0ng"},"content":"    this.venue \u003d venue;","lastModifiedDate":"2022-10-03"},{"lineNumber":201,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":202,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":203,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":204,"author":{"gitId":"shenyih0ng"},"content":"  public Lesson day(String day) {","lastModifiedDate":"2022-10-03"},{"lineNumber":205,"author":{"gitId":"shenyih0ng"},"content":"    this.day \u003d day;","lastModifiedDate":"2022-10-03"},{"lineNumber":206,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":207,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":208,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":209,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":210,"author":{"gitId":"shenyih0ng"},"content":"   * Get day","lastModifiedDate":"2022-10-03"},{"lineNumber":211,"author":{"gitId":"shenyih0ng"},"content":"   * @return day","lastModifiedDate":"2022-10-03"},{"lineNumber":212,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":213,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nullable","lastModifiedDate":"2022-10-03"},{"lineNumber":214,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"Friday\", value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":215,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_DAY)","lastModifiedDate":"2022-10-03"},{"lineNumber":216,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":217,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":218,"author":{"gitId":"shenyih0ng"},"content":"  public String getDay() {","lastModifiedDate":"2022-10-03"},{"lineNumber":219,"author":{"gitId":"shenyih0ng"},"content":"    return day;","lastModifiedDate":"2022-10-03"},{"lineNumber":220,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":221,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":222,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":223,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_DAY)","lastModifiedDate":"2022-10-03"},{"lineNumber":224,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":225,"author":{"gitId":"shenyih0ng"},"content":"  public void setDay(String day) {","lastModifiedDate":"2022-10-03"},{"lineNumber":226,"author":{"gitId":"shenyih0ng"},"content":"    this.day \u003d day;","lastModifiedDate":"2022-10-03"},{"lineNumber":227,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":228,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":229,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":230,"author":{"gitId":"shenyih0ng"},"content":"  public Lesson lessonType(String lessonType) {","lastModifiedDate":"2022-10-03"},{"lineNumber":231,"author":{"gitId":"shenyih0ng"},"content":"    this.lessonType \u003d lessonType;","lastModifiedDate":"2022-10-03"},{"lineNumber":232,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":233,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":234,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":235,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":236,"author":{"gitId":"shenyih0ng"},"content":"   * Get lessonType","lastModifiedDate":"2022-10-03"},{"lineNumber":237,"author":{"gitId":"shenyih0ng"},"content":"   * @return lessonType","lastModifiedDate":"2022-10-03"},{"lineNumber":238,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":239,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":240,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"Tutorial\", required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":241,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_LESSON_TYPE)","lastModifiedDate":"2022-10-03"},{"lineNumber":242,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":243,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":244,"author":{"gitId":"shenyih0ng"},"content":"  public String getLessonType() {","lastModifiedDate":"2022-10-03"},{"lineNumber":245,"author":{"gitId":"shenyih0ng"},"content":"    return lessonType;","lastModifiedDate":"2022-10-03"},{"lineNumber":246,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":247,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":248,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":249,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_LESSON_TYPE)","lastModifiedDate":"2022-10-03"},{"lineNumber":250,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":251,"author":{"gitId":"shenyih0ng"},"content":"  public void setLessonType(String lessonType) {","lastModifiedDate":"2022-10-03"},{"lineNumber":252,"author":{"gitId":"shenyih0ng"},"content":"    this.lessonType \u003d lessonType;","lastModifiedDate":"2022-10-03"},{"lineNumber":253,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":254,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":255,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":256,"author":{"gitId":"shenyih0ng"},"content":"  public Lesson size(BigDecimal size) {","lastModifiedDate":"2022-10-03"},{"lineNumber":257,"author":{"gitId":"shenyih0ng"},"content":"    this.size \u003d size;","lastModifiedDate":"2022-10-03"},{"lineNumber":258,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":259,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":260,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":261,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":262,"author":{"gitId":"shenyih0ng"},"content":"   * Get size","lastModifiedDate":"2022-10-03"},{"lineNumber":263,"author":{"gitId":"shenyih0ng"},"content":"   * @return size","lastModifiedDate":"2022-10-03"},{"lineNumber":264,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":265,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nullable","lastModifiedDate":"2022-10-03"},{"lineNumber":266,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"30\", value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":267,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_SIZE)","lastModifiedDate":"2022-10-03"},{"lineNumber":268,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":269,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":270,"author":{"gitId":"shenyih0ng"},"content":"  public BigDecimal getSize() {","lastModifiedDate":"2022-10-03"},{"lineNumber":271,"author":{"gitId":"shenyih0ng"},"content":"    return size;","lastModifiedDate":"2022-10-03"},{"lineNumber":272,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":273,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":274,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":275,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_SIZE)","lastModifiedDate":"2022-10-03"},{"lineNumber":276,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":277,"author":{"gitId":"shenyih0ng"},"content":"  public void setSize(BigDecimal size) {","lastModifiedDate":"2022-10-03"},{"lineNumber":278,"author":{"gitId":"shenyih0ng"},"content":"    this.size \u003d size;","lastModifiedDate":"2022-10-03"},{"lineNumber":279,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":280,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":281,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":282,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":283,"author":{"gitId":"shenyih0ng"},"content":"   * Return true if this Lesson object is equal to o.","lastModifiedDate":"2022-10-03"},{"lineNumber":284,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":285,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":286,"author":{"gitId":"shenyih0ng"},"content":"  public boolean equals(Object o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":287,"author":{"gitId":"shenyih0ng"},"content":"    if (this \u003d\u003d o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":288,"author":{"gitId":"shenyih0ng"},"content":"      return true;","lastModifiedDate":"2022-10-03"},{"lineNumber":289,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":290,"author":{"gitId":"shenyih0ng"},"content":"    if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {","lastModifiedDate":"2022-10-03"},{"lineNumber":291,"author":{"gitId":"shenyih0ng"},"content":"      return false;","lastModifiedDate":"2022-10-03"},{"lineNumber":292,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":293,"author":{"gitId":"shenyih0ng"},"content":"    Lesson lesson \u003d (Lesson) o;","lastModifiedDate":"2022-10-03"},{"lineNumber":294,"author":{"gitId":"shenyih0ng"},"content":"    return Objects.equals(this.classNo, lesson.classNo) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":295,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.startTime, lesson.startTime) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":296,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.endTime, lesson.endTime) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":297,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.weeks, lesson.weeks) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":298,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.venue, lesson.venue) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":299,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.day, lesson.day) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":300,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.lessonType, lesson.lessonType) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":301,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.size, lesson.size);","lastModifiedDate":"2022-10-03"},{"lineNumber":302,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":303,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":304,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":305,"author":{"gitId":"shenyih0ng"},"content":"  public int hashCode() {","lastModifiedDate":"2022-10-03"},{"lineNumber":306,"author":{"gitId":"shenyih0ng"},"content":"    return Objects.hash(classNo, startTime, endTime, weeks, venue, day, lessonType, size);","lastModifiedDate":"2022-10-03"},{"lineNumber":307,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":308,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":309,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":310,"author":{"gitId":"shenyih0ng"},"content":"  public String toString() {","lastModifiedDate":"2022-10-03"},{"lineNumber":311,"author":{"gitId":"shenyih0ng"},"content":"    StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2022-10-03"},{"lineNumber":312,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"class Lesson {\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":313,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    classNo: \").append(toIndentedString(classNo)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":314,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    startTime: \").append(toIndentedString(startTime)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":315,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    endTime: \").append(toIndentedString(endTime)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":316,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    weeks: \").append(toIndentedString(weeks)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":317,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    venue: \").append(toIndentedString(venue)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":318,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    day: \").append(toIndentedString(day)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":319,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    lessonType: \").append(toIndentedString(lessonType)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":320,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    size: \").append(toIndentedString(size)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":321,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"}\");","lastModifiedDate":"2022-10-03"},{"lineNumber":322,"author":{"gitId":"shenyih0ng"},"content":"    return sb.toString();","lastModifiedDate":"2022-10-03"},{"lineNumber":323,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":324,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":325,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":326,"author":{"gitId":"shenyih0ng"},"content":"   * Convert the given object to string with each line indented by 4 spaces","lastModifiedDate":"2022-10-03"},{"lineNumber":327,"author":{"gitId":"shenyih0ng"},"content":"   * (except the first line).","lastModifiedDate":"2022-10-03"},{"lineNumber":328,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":329,"author":{"gitId":"shenyih0ng"},"content":"  private String toIndentedString(Object o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":330,"author":{"gitId":"shenyih0ng"},"content":"    if (o \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":331,"author":{"gitId":"shenyih0ng"},"content":"      return \"null\";","lastModifiedDate":"2022-10-03"},{"lineNumber":332,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":333,"author":{"gitId":"shenyih0ng"},"content":"    return o.toString().replace(\"\\n\", \"\\n    \");","lastModifiedDate":"2022-10-03"},{"lineNumber":334,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":335,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":336,"author":{"gitId":"shenyih0ng"},"content":"}","lastModifiedDate":"2022-10-03"},{"lineNumber":337,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"shenyih0ng":337}},{"path":"src/main/java/org/openapitools/client/model/LessonWeeks.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"shenyih0ng"},"content":"/*","lastModifiedDate":"2022-10-03"},{"lineNumber":2,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API contains data used to render \u003chttps://nusmods.com\u003e. It includes data on modules offered by NUS and their timetables, as well as information on the locations the classes take place in. You are welcome to use and experiment with the data, which is extracted from official APIs provided by the Registrar\u0027s Office.  The API consists of static JSON files scraped daily from the school\u0027s APIs. This means it only partially follow REST conventions, and all resources are read only. All successful responses will return JSON, and all endpoints end in `.json`.  The shape of the data returned by these endpoints are designed for NUSMods in mind. If you have any questions or find that you need the data in other shapes for other purposes, feel free to reach out to us:  - **Telegram**: \u003chttps://telegram.me/nusmods\u003e - **Mailing list**: \u003cnusmods@googlegroups.com\u003e (for security related issues please email \u003cmods@nusmods.com\u003e instead)  ## Fetching data  Any HTTP client can be used to fetch data from the API. HTTPS is preferred, but the server will also respond to HTTP requests. The server supports HTTP 1.1 as well as HTTP 2 over HTTPS, and supports gzip compression.  The API has no authentication, and is not rate limited. While the server can respond to a large number of requests simultaneously, we request that you be polite with resource usage so as not to disrupt nusmods.com, which relies on the same API server. In general there is no need to fetch data from the API more than once per day, as that is the frequency at which we update the data.  [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) headers are enabled on all endpoints, so client-side JavaScript can use also use the API.  ## TypeScript types  Since the NUSMods is written in TypeScript, typings are available in the source for the scraper. These may be easier to read than the documentation generated by Swagger.  - Module types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/modules.ts\u003e - Venue types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/venues.ts\u003e  ## Data  Below are some notes about the data returned from the API. Feel free to talk to us or create an issue if any of it is not clear.  ### Module data  Module endpoints return information on modules offered by NUS. Most of the module data is self-explanatory, but some of the data are more complex and is explained here.  #### Lessons  Each lesson in a timetable has a lesson type `lessonType` and class number `ClassNo`. Every student must take one of each lesson type offered by the module. For example, this module offers two tutorials and one lecture. That means the student must attend the lecture, and can choose one of the two tutorials to attend.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"01\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1100\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"COM1-0207\\\"     },     {       \\\"classNo\\\": \\\"02\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Friday\\\",       \\\"startTime\\\": \\\"0900\\\",       \\\"endTime\\\": \\\"1000\\\",       \\\"venue\\\": \\\"COM1-0209\\\"     }   ] } ```  Each lesson has a `classNo` key. There can be multiple lessons of the same type and class number, in which case students must attend both. In this example, students can choose to attend either lecture group 1 on Tuesdays and Wednesdays, or lecture group 2 on Mondays and Wednesdays.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1400\\\",       \\\"endTime\\\": \\\"1500\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Monday\\\",       \\\"startTime\\\": \\\"1000\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1500\\\",       \\\"endTime\\\": \\\"1600\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     }   ] } ```  #### Lesson Weeks  The `weeks` key on lessons can return data in one of two forms.  Weeks is usually a sorted array of numbers. In this case it represents the school weeks the lesson occurs on, from 1 to 13.  Some classes have lessons outside of the school timetable. In this case a `WeekRange` object is returned. The object will always contain a `start` and `end` key representing the start and end date of lessons. The example below has classes every week from 17th Jan to 18th April.  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-04-18\\\" } ```  Optionally it can also include `weekInterval`, a positive integer describing the number of weeks between each lesson, and `weeks`, an array of positive integers describing the weeks on which the lesson will fall, with week 1 being the starting date. If these are not present you can assume lessons will occur every week.  The following example has lessons on 17th Jan (week 1), 24th Jan (week 2), 7th Feb (week 4) and 21st Feb (week 6).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-21\\\",   \\\"weeks\\\": [1, 2, 4, 6] } ```  The following example has lessons on 17th Jan (week 1), 31st Jan (week 3), 14th Feb (week 5) and 28th Feb (week 7).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-28\\\",   \\\"weekInterval\\\": 2 } ```  #### Workload  The `workload` key can return data in one of two forms.  Workload is usually a **5-tuple of numbers**, describing the estimated number of hours per week the student is expected to put in for the module for **lectures, tutorials, laboratory, projects/fieldwork, and preparatory work** respectively. For example, a workload of `[2, 1, 1, 3, 3]` means the student should spend every week  - 2 hours in lectures - 1 hour in tutorials - 1 hour at the lab - 3 hours doing project work - 3 hours preparing for classes  Each module credit represents 2.5 hours of work each week, so the standard 4 MC module represents 10 hours of work each week. Module credit may not be integers.  Note that this is only an estimate, and may be outdated or differ significantly in reality. Some modules also incorrectly lists the **total** workload hours instead of weekly, so very large values may show up.  This value is parsed from a string provided by the school, and occasionally this field will contain unusual values which cannot be parsed. In this case this field will contain the original **string** instead, which should be displayed as-is to the user.  #### Prerequisite, corequisite and preclusions  These three keys determine whether a student can take a module.  **Prerequisites** are requirements you have to meet before you can take a module. These are usually in the form of other modules (see prerequisite tree below for a machine readable format), but can also be things like \u0027taken A-level H2 math\u0027 or \u002770 MCs and above\u0027.  **Preclusions** refer to modules or requirements that cannot be taken if this module is taken, and vice versa. These are usually modules whose content overlaps significantly with this module, and can usually be used to replace each other to fulfill prerequisites.  **Corequisites** are modules that must be taken together with this module in the same semester. This usually refer to twined modules - modules which have linked syllabuses.  #### Prerequisite Tree  The `prereqTree` key is return on the individual module endpoint (`/modules/{moduleCode`). Not all modules have prerequisites, and some have prerequisites that cannot be properly represented as a tree, in which case this key will not appear.  This describes the prerequisites that need to be fulfilled before this module can be taken. The data structure is recursive and represents a tree.  ```json {   \\\"and\\\": [     \\\"CS1231\\\",     {       \\\"or\\\": [\\\"CS1010S\\\", \\\"CS1010X\\\"]     }   ] } ```  In the example, this module requires CS1231 and either CS1010S or CS1010X. This can be visualized as  ```            ┌ CS1231 ── all of ─┤            │         ┌ CS1010            └ one of ─┤                      └ CS1010X ```  The module information also contains the inverse of this, that is, modules whose requirements are fulfilled by this module (taking this module will allow you to take these modules in the following semester). The data is found on the `fulfillRequirements` key as an array of module codes.  ### Venue data  Venue data is simply the module timetable restructured to show the lessons happening at each classroom.  The venue list endpoint returns a list of all locations that are used in the semester. Note that this is not a comprehensive list of locations, but rather just a list of venues that appears in module lessons.  The venue information endpoint returns the full class and occupancy information about a venue. The `classes` key contains a list of lessons similar to the `timetable` key in module data, but without a `venue` key and with `moduleCode`.","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"shenyih0ng"},"content":" * The version of the OpenAPI document: 2.0.0","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"shenyih0ng"},"content":" * Contact: nusmods@googlegroups.com","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"shenyih0ng"},"content":" * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"shenyih0ng"},"content":" * https://openapi-generator.tech","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"shenyih0ng"},"content":" * Do not edit the class manually.","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"shenyih0ng"},"content":"package org.openapitools.client.model;","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Objects;","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Map;","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"shenyih0ng"},"content":"import java.util.HashMap;","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonInclude;","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonTypeName;","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"shenyih0ng"},"content":"import io.swagger.annotations.ApiModel;","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"shenyih0ng"},"content":"import io.swagger.annotations.ApiModelProperty;","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"shenyih0ng"},"content":"import java.math.BigDecimal;","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"shenyih0ng"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"shenyih0ng"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"shenyih0ng"},"content":"import java.util.List;","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.client.model.WeekRange;","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonPropertyOrder;","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.core.type.TypeReference;","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"shenyih0ng"},"content":"import java.io.IOException;","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"shenyih0ng"},"content":"import java.util.logging.Level;","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"shenyih0ng"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"shenyih0ng"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Collections;","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"shenyih0ng"},"content":"import java.util.HashSet;","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.core.JsonGenerator;","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.core.JsonParser;","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.core.JsonToken;","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.databind.JsonMappingException;","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.databind.JsonNode;","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.databind.MapperFeature;","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.databind.SerializerProvider;","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.databind.annotation.JsonDeserialize;","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.databind.annotation.JsonSerialize;","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.databind.deser.std.StdDeserializer;","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.databind.ser.std.StdSerializer;","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.client.JSON;","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"shenyih0ng"},"content":"@javax.annotation.processing.Generated(value \u003d \"org.openapitools.codegen.languages.JavaClientCodegen\", date \u003d \"2022-10-03T22:22:26.802458+08:00[Asia/Singapore]\")","lastModifiedDate":"2022-10-03"},{"lineNumber":59,"author":{"gitId":"shenyih0ng"},"content":"@JsonDeserialize(using \u003d LessonWeeks.LessonWeeksDeserializer.class)","lastModifiedDate":"2022-10-03"},{"lineNumber":60,"author":{"gitId":"shenyih0ng"},"content":"@JsonSerialize(using \u003d LessonWeeks.LessonWeeksSerializer.class)","lastModifiedDate":"2022-10-03"},{"lineNumber":61,"author":{"gitId":"shenyih0ng"},"content":"public class LessonWeeks extends AbstractOpenApiSchema {","lastModifiedDate":"2022-10-03"},{"lineNumber":62,"author":{"gitId":"shenyih0ng"},"content":"    private static final Logger log \u003d Logger.getLogger(LessonWeeks.class.getName());","lastModifiedDate":"2022-10-03"},{"lineNumber":63,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":64,"author":{"gitId":"shenyih0ng"},"content":"    public static class LessonWeeksSerializer extends StdSerializer\u003cLessonWeeks\u003e {","lastModifiedDate":"2022-10-03"},{"lineNumber":65,"author":{"gitId":"shenyih0ng"},"content":"        public LessonWeeksSerializer(Class\u003cLessonWeeks\u003e t) {","lastModifiedDate":"2022-10-03"},{"lineNumber":66,"author":{"gitId":"shenyih0ng"},"content":"            super(t);","lastModifiedDate":"2022-10-03"},{"lineNumber":67,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":68,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":69,"author":{"gitId":"shenyih0ng"},"content":"        public LessonWeeksSerializer() {","lastModifiedDate":"2022-10-03"},{"lineNumber":70,"author":{"gitId":"shenyih0ng"},"content":"            this(null);","lastModifiedDate":"2022-10-03"},{"lineNumber":71,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":72,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":73,"author":{"gitId":"shenyih0ng"},"content":"        @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":74,"author":{"gitId":"shenyih0ng"},"content":"        public void serialize(LessonWeeks value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {","lastModifiedDate":"2022-10-03"},{"lineNumber":75,"author":{"gitId":"shenyih0ng"},"content":"            jgen.writeObject(value.getActualInstance());","lastModifiedDate":"2022-10-03"},{"lineNumber":76,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":77,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":78,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":79,"author":{"gitId":"shenyih0ng"},"content":"    public static class LessonWeeksDeserializer extends StdDeserializer\u003cLessonWeeks\u003e {","lastModifiedDate":"2022-10-03"},{"lineNumber":80,"author":{"gitId":"shenyih0ng"},"content":"        public LessonWeeksDeserializer() {","lastModifiedDate":"2022-10-03"},{"lineNumber":81,"author":{"gitId":"shenyih0ng"},"content":"            this(LessonWeeks.class);","lastModifiedDate":"2022-10-03"},{"lineNumber":82,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":83,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":84,"author":{"gitId":"shenyih0ng"},"content":"        public LessonWeeksDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2022-10-03"},{"lineNumber":85,"author":{"gitId":"shenyih0ng"},"content":"            super(vc);","lastModifiedDate":"2022-10-03"},{"lineNumber":86,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":87,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":88,"author":{"gitId":"shenyih0ng"},"content":"        @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":89,"author":{"gitId":"shenyih0ng"},"content":"        public LessonWeeks deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {","lastModifiedDate":"2022-10-03"},{"lineNumber":90,"author":{"gitId":"shenyih0ng"},"content":"            JsonNode tree \u003d jp.readValueAsTree();","lastModifiedDate":"2022-10-03"},{"lineNumber":91,"author":{"gitId":"shenyih0ng"},"content":"            Object deserialized \u003d null;","lastModifiedDate":"2022-10-03"},{"lineNumber":92,"author":{"gitId":"shenyih0ng"},"content":"            boolean typeCoercion \u003d ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);","lastModifiedDate":"2022-10-03"},{"lineNumber":93,"author":{"gitId":"shenyih0ng"},"content":"            int match \u003d 0;","lastModifiedDate":"2022-10-03"},{"lineNumber":94,"author":{"gitId":"shenyih0ng"},"content":"            JsonToken token \u003d tree.traverse(jp.getCodec()).nextToken();","lastModifiedDate":"2022-10-03"},{"lineNumber":95,"author":{"gitId":"shenyih0ng"},"content":"            // deserialize List\u003cBigDecimal\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":96,"author":{"gitId":"shenyih0ng"},"content":"            try {","lastModifiedDate":"2022-10-03"},{"lineNumber":97,"author":{"gitId":"shenyih0ng"},"content":"                boolean attemptParsing \u003d true;","lastModifiedDate":"2022-10-03"},{"lineNumber":98,"author":{"gitId":"shenyih0ng"},"content":"                if (attemptParsing) {","lastModifiedDate":"2022-10-03"},{"lineNumber":99,"author":{"gitId":"shenyih0ng"},"content":"                    deserialized \u003d tree.traverse(jp.getCodec()).readValueAs(List.class);","lastModifiedDate":"2022-10-03"},{"lineNumber":100,"author":{"gitId":"shenyih0ng"},"content":"                    match++;","lastModifiedDate":"2022-10-03"},{"lineNumber":101,"author":{"gitId":"shenyih0ng"},"content":"                    log.log(Level.FINER, \"Input data matches schema \u0027List\u003cBigDecimal\u003e\u0027\");","lastModifiedDate":"2022-10-03"},{"lineNumber":102,"author":{"gitId":"shenyih0ng"},"content":"                }","lastModifiedDate":"2022-10-03"},{"lineNumber":103,"author":{"gitId":"shenyih0ng"},"content":"            } catch (Exception e) {","lastModifiedDate":"2022-10-03"},{"lineNumber":104,"author":{"gitId":"shenyih0ng"},"content":"                // deserialization failed, continue","lastModifiedDate":"2022-10-03"},{"lineNumber":105,"author":{"gitId":"shenyih0ng"},"content":"                log.log(Level.FINER, \"Input data does not match schema \u0027List\u003cBigDecimal\u003e\u0027\", e);","lastModifiedDate":"2022-10-03"},{"lineNumber":106,"author":{"gitId":"shenyih0ng"},"content":"            }","lastModifiedDate":"2022-10-03"},{"lineNumber":107,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":108,"author":{"gitId":"shenyih0ng"},"content":"            // deserialize WeekRange","lastModifiedDate":"2022-10-03"},{"lineNumber":109,"author":{"gitId":"shenyih0ng"},"content":"            try {","lastModifiedDate":"2022-10-03"},{"lineNumber":110,"author":{"gitId":"shenyih0ng"},"content":"                boolean attemptParsing \u003d true;","lastModifiedDate":"2022-10-03"},{"lineNumber":111,"author":{"gitId":"shenyih0ng"},"content":"                // ensure that we respect type coercion as set on the client ObjectMapper","lastModifiedDate":"2022-10-03"},{"lineNumber":112,"author":{"gitId":"shenyih0ng"},"content":"                if (WeekRange.class.equals(Integer.class) || WeekRange.class.equals(Long.class) || WeekRange.class.equals(Float.class) || WeekRange.class.equals(Double.class) || WeekRange.class.equals(Boolean.class) || WeekRange.class.equals(String.class)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":113,"author":{"gitId":"shenyih0ng"},"content":"                    attemptParsing \u003d typeCoercion;","lastModifiedDate":"2022-10-03"},{"lineNumber":114,"author":{"gitId":"shenyih0ng"},"content":"                    if (!attemptParsing) {","lastModifiedDate":"2022-10-03"},{"lineNumber":115,"author":{"gitId":"shenyih0ng"},"content":"                        attemptParsing |\u003d ((WeekRange.class.equals(Integer.class) || WeekRange.class.equals(Long.class)) \u0026\u0026 token \u003d\u003d JsonToken.VALUE_NUMBER_INT);","lastModifiedDate":"2022-10-03"},{"lineNumber":116,"author":{"gitId":"shenyih0ng"},"content":"                        attemptParsing |\u003d ((WeekRange.class.equals(Float.class) || WeekRange.class.equals(Double.class)) \u0026\u0026 token \u003d\u003d JsonToken.VALUE_NUMBER_FLOAT);","lastModifiedDate":"2022-10-03"},{"lineNumber":117,"author":{"gitId":"shenyih0ng"},"content":"                        attemptParsing |\u003d (WeekRange.class.equals(Boolean.class) \u0026\u0026 (token \u003d\u003d JsonToken.VALUE_FALSE || token \u003d\u003d JsonToken.VALUE_TRUE));","lastModifiedDate":"2022-10-03"},{"lineNumber":118,"author":{"gitId":"shenyih0ng"},"content":"                        attemptParsing |\u003d (WeekRange.class.equals(String.class) \u0026\u0026 token \u003d\u003d JsonToken.VALUE_STRING);","lastModifiedDate":"2022-10-03"},{"lineNumber":119,"author":{"gitId":"shenyih0ng"},"content":"                    }","lastModifiedDate":"2022-10-03"},{"lineNumber":120,"author":{"gitId":"shenyih0ng"},"content":"                }","lastModifiedDate":"2022-10-03"},{"lineNumber":121,"author":{"gitId":"shenyih0ng"},"content":"                if (attemptParsing) {","lastModifiedDate":"2022-10-03"},{"lineNumber":122,"author":{"gitId":"shenyih0ng"},"content":"                    deserialized \u003d tree.traverse(jp.getCodec()).readValueAs(WeekRange.class);","lastModifiedDate":"2022-10-03"},{"lineNumber":123,"author":{"gitId":"shenyih0ng"},"content":"                    // TODO: there is no validation against JSON schema constraints","lastModifiedDate":"2022-10-03"},{"lineNumber":124,"author":{"gitId":"shenyih0ng"},"content":"                    // (min, max, enum, pattern...), this does not perform a strict JSON","lastModifiedDate":"2022-10-03"},{"lineNumber":125,"author":{"gitId":"shenyih0ng"},"content":"                    // validation, which means the \u0027match\u0027 count may be higher than it should be.","lastModifiedDate":"2022-10-03"},{"lineNumber":126,"author":{"gitId":"shenyih0ng"},"content":"                    match++;","lastModifiedDate":"2022-10-03"},{"lineNumber":127,"author":{"gitId":"shenyih0ng"},"content":"                    log.log(Level.FINER, \"Input data matches schema \u0027WeekRange\u0027\");","lastModifiedDate":"2022-10-03"},{"lineNumber":128,"author":{"gitId":"shenyih0ng"},"content":"                }","lastModifiedDate":"2022-10-03"},{"lineNumber":129,"author":{"gitId":"shenyih0ng"},"content":"            } catch (Exception e) {","lastModifiedDate":"2022-10-03"},{"lineNumber":130,"author":{"gitId":"shenyih0ng"},"content":"                // deserialization failed, continue","lastModifiedDate":"2022-10-03"},{"lineNumber":131,"author":{"gitId":"shenyih0ng"},"content":"                log.log(Level.FINER, \"Input data does not match schema \u0027WeekRange\u0027\", e);","lastModifiedDate":"2022-10-03"},{"lineNumber":132,"author":{"gitId":"shenyih0ng"},"content":"            }","lastModifiedDate":"2022-10-03"},{"lineNumber":133,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":134,"author":{"gitId":"shenyih0ng"},"content":"            if (match \u003d\u003d 1) {","lastModifiedDate":"2022-10-03"},{"lineNumber":135,"author":{"gitId":"shenyih0ng"},"content":"                LessonWeeks ret \u003d new LessonWeeks();","lastModifiedDate":"2022-10-03"},{"lineNumber":136,"author":{"gitId":"shenyih0ng"},"content":"                ret.setActualInstance(deserialized);","lastModifiedDate":"2022-10-03"},{"lineNumber":137,"author":{"gitId":"shenyih0ng"},"content":"                return ret;","lastModifiedDate":"2022-10-03"},{"lineNumber":138,"author":{"gitId":"shenyih0ng"},"content":"            }","lastModifiedDate":"2022-10-03"},{"lineNumber":139,"author":{"gitId":"shenyih0ng"},"content":"            throw new IOException(String.format(\"Failed deserialization for LessonWeeks: %d classes match result, expected 1\", match));","lastModifiedDate":"2022-10-03"},{"lineNumber":140,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":141,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":142,"author":{"gitId":"shenyih0ng"},"content":"        /**","lastModifiedDate":"2022-10-03"},{"lineNumber":143,"author":{"gitId":"shenyih0ng"},"content":"         * Handle deserialization of the \u0027null\u0027 value.","lastModifiedDate":"2022-10-03"},{"lineNumber":144,"author":{"gitId":"shenyih0ng"},"content":"         */","lastModifiedDate":"2022-10-03"},{"lineNumber":145,"author":{"gitId":"shenyih0ng"},"content":"        @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":146,"author":{"gitId":"shenyih0ng"},"content":"        public LessonWeeks getNullValue(DeserializationContext ctxt) throws JsonMappingException {","lastModifiedDate":"2022-10-03"},{"lineNumber":147,"author":{"gitId":"shenyih0ng"},"content":"            throw new JsonMappingException(ctxt.getParser(), \"LessonWeeks cannot be null\");","lastModifiedDate":"2022-10-03"},{"lineNumber":148,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":149,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":150,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":151,"author":{"gitId":"shenyih0ng"},"content":"    // store a list of schema names defined in oneOf","lastModifiedDate":"2022-10-03"},{"lineNumber":152,"author":{"gitId":"shenyih0ng"},"content":"    public static final Map\u003cString, Class\u003c?\u003e\u003e schemas \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2022-10-03"},{"lineNumber":153,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":154,"author":{"gitId":"shenyih0ng"},"content":"    public LessonWeeks() {","lastModifiedDate":"2022-10-03"},{"lineNumber":155,"author":{"gitId":"shenyih0ng"},"content":"        super(\"oneOf\", Boolean.FALSE);","lastModifiedDate":"2022-10-03"},{"lineNumber":156,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":157,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":158,"author":{"gitId":"shenyih0ng"},"content":"    public LessonWeeks(List\u003cBigDecimal\u003e o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":159,"author":{"gitId":"shenyih0ng"},"content":"        super(\"oneOf\", Boolean.FALSE);","lastModifiedDate":"2022-10-03"},{"lineNumber":160,"author":{"gitId":"shenyih0ng"},"content":"        setActualInstance(o);","lastModifiedDate":"2022-10-03"},{"lineNumber":161,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":162,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":163,"author":{"gitId":"shenyih0ng"},"content":"    public LessonWeeks(WeekRange o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":164,"author":{"gitId":"shenyih0ng"},"content":"        super(\"oneOf\", Boolean.FALSE);","lastModifiedDate":"2022-10-03"},{"lineNumber":165,"author":{"gitId":"shenyih0ng"},"content":"        setActualInstance(o);","lastModifiedDate":"2022-10-03"},{"lineNumber":166,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":167,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":168,"author":{"gitId":"shenyih0ng"},"content":"    static {","lastModifiedDate":"2022-10-03"},{"lineNumber":169,"author":{"gitId":"shenyih0ng"},"content":"        schemas.put(\"List\u003cBigDecimal\u003e\", List.class);","lastModifiedDate":"2022-10-03"},{"lineNumber":170,"author":{"gitId":"shenyih0ng"},"content":"        schemas.put(\"WeekRange\", WeekRange.class);","lastModifiedDate":"2022-10-03"},{"lineNumber":171,"author":{"gitId":"shenyih0ng"},"content":"        JSON.registerDescendants(LessonWeeks.class, Collections.unmodifiableMap(schemas));","lastModifiedDate":"2022-10-03"},{"lineNumber":172,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":173,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":174,"author":{"gitId":"shenyih0ng"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":175,"author":{"gitId":"shenyih0ng"},"content":"    public Map\u003cString, Class\u003c?\u003e\u003e getSchemas() {","lastModifiedDate":"2022-10-03"},{"lineNumber":176,"author":{"gitId":"shenyih0ng"},"content":"        return LessonWeeks.schemas;","lastModifiedDate":"2022-10-03"},{"lineNumber":177,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":178,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":179,"author":{"gitId":"shenyih0ng"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":180,"author":{"gitId":"shenyih0ng"},"content":"     * Set the instance that matches the oneOf child schema, check","lastModifiedDate":"2022-10-03"},{"lineNumber":181,"author":{"gitId":"shenyih0ng"},"content":"     * the instance parameter is valid against the oneOf child schemas:","lastModifiedDate":"2022-10-03"},{"lineNumber":182,"author":{"gitId":"shenyih0ng"},"content":"     * List\u003cBigDecimal\u003e, WeekRange","lastModifiedDate":"2022-10-03"},{"lineNumber":183,"author":{"gitId":"shenyih0ng"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":184,"author":{"gitId":"shenyih0ng"},"content":"     * It could be an instance of the \u0027oneOf\u0027 schemas.","lastModifiedDate":"2022-10-03"},{"lineNumber":185,"author":{"gitId":"shenyih0ng"},"content":"     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).","lastModifiedDate":"2022-10-03"},{"lineNumber":186,"author":{"gitId":"shenyih0ng"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":187,"author":{"gitId":"shenyih0ng"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":188,"author":{"gitId":"shenyih0ng"},"content":"    public void setActualInstance(Object instance) {","lastModifiedDate":"2022-10-03"},{"lineNumber":189,"author":{"gitId":"shenyih0ng"},"content":"        if (JSON.isInstanceOf(List.class, instance, new HashSet\u003cClass\u003c?\u003e\u003e())) {","lastModifiedDate":"2022-10-03"},{"lineNumber":190,"author":{"gitId":"shenyih0ng"},"content":"            super.setActualInstance(instance);","lastModifiedDate":"2022-10-03"},{"lineNumber":191,"author":{"gitId":"shenyih0ng"},"content":"            return;","lastModifiedDate":"2022-10-03"},{"lineNumber":192,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":193,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":194,"author":{"gitId":"shenyih0ng"},"content":"        if (JSON.isInstanceOf(WeekRange.class, instance, new HashSet\u003cClass\u003c?\u003e\u003e())) {","lastModifiedDate":"2022-10-03"},{"lineNumber":195,"author":{"gitId":"shenyih0ng"},"content":"            super.setActualInstance(instance);","lastModifiedDate":"2022-10-03"},{"lineNumber":196,"author":{"gitId":"shenyih0ng"},"content":"            return;","lastModifiedDate":"2022-10-03"},{"lineNumber":197,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":198,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":199,"author":{"gitId":"shenyih0ng"},"content":"        throw new RuntimeException(\"Invalid instance type. Must be List\u003cBigDecimal\u003e, WeekRange\");","lastModifiedDate":"2022-10-03"},{"lineNumber":200,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":201,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":202,"author":{"gitId":"shenyih0ng"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":203,"author":{"gitId":"shenyih0ng"},"content":"     * Get the actual instance, which can be the following:","lastModifiedDate":"2022-10-03"},{"lineNumber":204,"author":{"gitId":"shenyih0ng"},"content":"     * List\u003cBigDecimal\u003e, WeekRange","lastModifiedDate":"2022-10-03"},{"lineNumber":205,"author":{"gitId":"shenyih0ng"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":206,"author":{"gitId":"shenyih0ng"},"content":"     * @return The actual instance (List\u003cBigDecimal\u003e, WeekRange)","lastModifiedDate":"2022-10-03"},{"lineNumber":207,"author":{"gitId":"shenyih0ng"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":208,"author":{"gitId":"shenyih0ng"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":209,"author":{"gitId":"shenyih0ng"},"content":"    public Object getActualInstance() {","lastModifiedDate":"2022-10-03"},{"lineNumber":210,"author":{"gitId":"shenyih0ng"},"content":"        return super.getActualInstance();","lastModifiedDate":"2022-10-03"},{"lineNumber":211,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":212,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":213,"author":{"gitId":"shenyih0ng"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":214,"author":{"gitId":"shenyih0ng"},"content":"     * Get the actual instance of `List\u003cBigDecimal\u003e`. If the actual instance is not `List\u003cBigDecimal\u003e`,","lastModifiedDate":"2022-10-03"},{"lineNumber":215,"author":{"gitId":"shenyih0ng"},"content":"     * the ClassCastException will be thrown.","lastModifiedDate":"2022-10-03"},{"lineNumber":216,"author":{"gitId":"shenyih0ng"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":217,"author":{"gitId":"shenyih0ng"},"content":"     * @return The actual instance of `List\u003cBigDecimal\u003e`","lastModifiedDate":"2022-10-03"},{"lineNumber":218,"author":{"gitId":"shenyih0ng"},"content":"     * @throws ClassCastException if the instance is not `List\u003cBigDecimal\u003e`","lastModifiedDate":"2022-10-03"},{"lineNumber":219,"author":{"gitId":"shenyih0ng"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":220,"author":{"gitId":"shenyih0ng"},"content":"    public List\u003cBigDecimal\u003e getList() throws ClassCastException {","lastModifiedDate":"2022-10-03"},{"lineNumber":221,"author":{"gitId":"shenyih0ng"},"content":"        return (List\u003cBigDecimal\u003e)super.getActualInstance();","lastModifiedDate":"2022-10-03"},{"lineNumber":222,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":223,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":224,"author":{"gitId":"shenyih0ng"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":225,"author":{"gitId":"shenyih0ng"},"content":"     * Get the actual instance of `WeekRange`. If the actual instance is not `WeekRange`,","lastModifiedDate":"2022-10-03"},{"lineNumber":226,"author":{"gitId":"shenyih0ng"},"content":"     * the ClassCastException will be thrown.","lastModifiedDate":"2022-10-03"},{"lineNumber":227,"author":{"gitId":"shenyih0ng"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":228,"author":{"gitId":"shenyih0ng"},"content":"     * @return The actual instance of `WeekRange`","lastModifiedDate":"2022-10-03"},{"lineNumber":229,"author":{"gitId":"shenyih0ng"},"content":"     * @throws ClassCastException if the instance is not `WeekRange`","lastModifiedDate":"2022-10-03"},{"lineNumber":230,"author":{"gitId":"shenyih0ng"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":231,"author":{"gitId":"shenyih0ng"},"content":"    public WeekRange getWeekRange() throws ClassCastException {","lastModifiedDate":"2022-10-03"},{"lineNumber":232,"author":{"gitId":"shenyih0ng"},"content":"        return (WeekRange)super.getActualInstance();","lastModifiedDate":"2022-10-03"},{"lineNumber":233,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":234,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":235,"author":{"gitId":"shenyih0ng"},"content":"}","lastModifiedDate":"2022-10-03"},{"lineNumber":236,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"shenyih0ng":236}},{"path":"src/main/java/org/openapitools/client/model/Module.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"shenyih0ng"},"content":"/*","lastModifiedDate":"2022-10-03"},{"lineNumber":2,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API contains data used to render \u003chttps://nusmods.com\u003e. It includes data on modules offered by NUS and their timetables, as well as information on the locations the classes take place in. You are welcome to use and experiment with the data, which is extracted from official APIs provided by the Registrar\u0027s Office.  The API consists of static JSON files scraped daily from the school\u0027s APIs. This means it only partially follow REST conventions, and all resources are read only. All successful responses will return JSON, and all endpoints end in `.json`.  The shape of the data returned by these endpoints are designed for NUSMods in mind. If you have any questions or find that you need the data in other shapes for other purposes, feel free to reach out to us:  - **Telegram**: \u003chttps://telegram.me/nusmods\u003e - **Mailing list**: \u003cnusmods@googlegroups.com\u003e (for security related issues please email \u003cmods@nusmods.com\u003e instead)  ## Fetching data  Any HTTP client can be used to fetch data from the API. HTTPS is preferred, but the server will also respond to HTTP requests. The server supports HTTP 1.1 as well as HTTP 2 over HTTPS, and supports gzip compression.  The API has no authentication, and is not rate limited. While the server can respond to a large number of requests simultaneously, we request that you be polite with resource usage so as not to disrupt nusmods.com, which relies on the same API server. In general there is no need to fetch data from the API more than once per day, as that is the frequency at which we update the data.  [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) headers are enabled on all endpoints, so client-side JavaScript can use also use the API.  ## TypeScript types  Since the NUSMods is written in TypeScript, typings are available in the source for the scraper. These may be easier to read than the documentation generated by Swagger.  - Module types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/modules.ts\u003e - Venue types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/venues.ts\u003e  ## Data  Below are some notes about the data returned from the API. Feel free to talk to us or create an issue if any of it is not clear.  ### Module data  Module endpoints return information on modules offered by NUS. Most of the module data is self-explanatory, but some of the data are more complex and is explained here.  #### Lessons  Each lesson in a timetable has a lesson type `lessonType` and class number `ClassNo`. Every student must take one of each lesson type offered by the module. For example, this module offers two tutorials and one lecture. That means the student must attend the lecture, and can choose one of the two tutorials to attend.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"01\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1100\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"COM1-0207\\\"     },     {       \\\"classNo\\\": \\\"02\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Friday\\\",       \\\"startTime\\\": \\\"0900\\\",       \\\"endTime\\\": \\\"1000\\\",       \\\"venue\\\": \\\"COM1-0209\\\"     }   ] } ```  Each lesson has a `classNo` key. There can be multiple lessons of the same type and class number, in which case students must attend both. In this example, students can choose to attend either lecture group 1 on Tuesdays and Wednesdays, or lecture group 2 on Mondays and Wednesdays.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1400\\\",       \\\"endTime\\\": \\\"1500\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Monday\\\",       \\\"startTime\\\": \\\"1000\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1500\\\",       \\\"endTime\\\": \\\"1600\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     }   ] } ```  #### Lesson Weeks  The `weeks` key on lessons can return data in one of two forms.  Weeks is usually a sorted array of numbers. In this case it represents the school weeks the lesson occurs on, from 1 to 13.  Some classes have lessons outside of the school timetable. In this case a `WeekRange` object is returned. The object will always contain a `start` and `end` key representing the start and end date of lessons. The example below has classes every week from 17th Jan to 18th April.  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-04-18\\\" } ```  Optionally it can also include `weekInterval`, a positive integer describing the number of weeks between each lesson, and `weeks`, an array of positive integers describing the weeks on which the lesson will fall, with week 1 being the starting date. If these are not present you can assume lessons will occur every week.  The following example has lessons on 17th Jan (week 1), 24th Jan (week 2), 7th Feb (week 4) and 21st Feb (week 6).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-21\\\",   \\\"weeks\\\": [1, 2, 4, 6] } ```  The following example has lessons on 17th Jan (week 1), 31st Jan (week 3), 14th Feb (week 5) and 28th Feb (week 7).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-28\\\",   \\\"weekInterval\\\": 2 } ```  #### Workload  The `workload` key can return data in one of two forms.  Workload is usually a **5-tuple of numbers**, describing the estimated number of hours per week the student is expected to put in for the module for **lectures, tutorials, laboratory, projects/fieldwork, and preparatory work** respectively. For example, a workload of `[2, 1, 1, 3, 3]` means the student should spend every week  - 2 hours in lectures - 1 hour in tutorials - 1 hour at the lab - 3 hours doing project work - 3 hours preparing for classes  Each module credit represents 2.5 hours of work each week, so the standard 4 MC module represents 10 hours of work each week. Module credit may not be integers.  Note that this is only an estimate, and may be outdated or differ significantly in reality. Some modules also incorrectly lists the **total** workload hours instead of weekly, so very large values may show up.  This value is parsed from a string provided by the school, and occasionally this field will contain unusual values which cannot be parsed. In this case this field will contain the original **string** instead, which should be displayed as-is to the user.  #### Prerequisite, corequisite and preclusions  These three keys determine whether a student can take a module.  **Prerequisites** are requirements you have to meet before you can take a module. These are usually in the form of other modules (see prerequisite tree below for a machine readable format), but can also be things like \u0027taken A-level H2 math\u0027 or \u002770 MCs and above\u0027.  **Preclusions** refer to modules or requirements that cannot be taken if this module is taken, and vice versa. These are usually modules whose content overlaps significantly with this module, and can usually be used to replace each other to fulfill prerequisites.  **Corequisites** are modules that must be taken together with this module in the same semester. This usually refer to twined modules - modules which have linked syllabuses.  #### Prerequisite Tree  The `prereqTree` key is return on the individual module endpoint (`/modules/{moduleCode`). Not all modules have prerequisites, and some have prerequisites that cannot be properly represented as a tree, in which case this key will not appear.  This describes the prerequisites that need to be fulfilled before this module can be taken. The data structure is recursive and represents a tree.  ```json {   \\\"and\\\": [     \\\"CS1231\\\",     {       \\\"or\\\": [\\\"CS1010S\\\", \\\"CS1010X\\\"]     }   ] } ```  In the example, this module requires CS1231 and either CS1010S or CS1010X. This can be visualized as  ```            ┌ CS1231 ── all of ─┤            │         ┌ CS1010            └ one of ─┤                      └ CS1010X ```  The module information also contains the inverse of this, that is, modules whose requirements are fulfilled by this module (taking this module will allow you to take these modules in the following semester). The data is found on the `fulfillRequirements` key as an array of module codes.  ### Venue data  Venue data is simply the module timetable restructured to show the lessons happening at each classroom.  The venue list endpoint returns a list of all locations that are used in the semester. Note that this is not a comprehensive list of locations, but rather just a list of venues that appears in module lessons.  The venue information endpoint returns the full class and occupancy information about a venue. The `classes` key contains a list of lessons similar to the `timetable` key in module data, but without a `venue` key and with `moduleCode`.","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"shenyih0ng"},"content":" * The version of the OpenAPI document: 2.0.0","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"shenyih0ng"},"content":" * Contact: nusmods@googlegroups.com","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"shenyih0ng"},"content":" * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"shenyih0ng"},"content":" * https://openapi-generator.tech","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"shenyih0ng"},"content":" * Do not edit the class manually.","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"shenyih0ng"},"content":"package org.openapitools.client.model;","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Objects;","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Map;","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"shenyih0ng"},"content":"import java.util.HashMap;","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonInclude;","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonTypeName;","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"shenyih0ng"},"content":"import io.swagger.annotations.ApiModel;","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"shenyih0ng"},"content":"import io.swagger.annotations.ApiModelProperty;","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"shenyih0ng"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"shenyih0ng"},"content":"import java.util.List;","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.client.model.PrereqTree;","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.client.model.SemesterData;","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.client.model.Workload;","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonPropertyOrder;","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"shenyih0ng"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"shenyih0ng"},"content":" * Module","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"shenyih0ng"},"content":"@JsonPropertyOrder({","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"shenyih0ng"},"content":"  Module.JSON_PROPERTY_ACAD_YEAR,","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"shenyih0ng"},"content":"  Module.JSON_PROPERTY_PRECLUSION,","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"shenyih0ng"},"content":"  Module.JSON_PROPERTY_DESCRIPTION,","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"shenyih0ng"},"content":"  Module.JSON_PROPERTY_TITLE,","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"shenyih0ng"},"content":"  Module.JSON_PROPERTY_DEPARTMENT,","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"shenyih0ng"},"content":"  Module.JSON_PROPERTY_FACULTY,","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"shenyih0ng"},"content":"  Module.JSON_PROPERTY_WORKLOAD,","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"shenyih0ng"},"content":"  Module.JSON_PROPERTY_PREREQUISITE,","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"shenyih0ng"},"content":"  Module.JSON_PROPERTY_MODULE_CREDIT,","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"shenyih0ng"},"content":"  Module.JSON_PROPERTY_MODULE_CODE,","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"shenyih0ng"},"content":"  Module.JSON_PROPERTY_SEMESTER_DATA,","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"shenyih0ng"},"content":"  Module.JSON_PROPERTY_PREREQ_TREE,","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"shenyih0ng"},"content":"  Module.JSON_PROPERTY_FULFILL_REQUIREMENTS","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"shenyih0ng"},"content":"})","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"shenyih0ng"},"content":"@javax.annotation.processing.Generated(value \u003d \"org.openapitools.codegen.languages.JavaClientCodegen\", date \u003d \"2022-10-03T22:22:26.802458+08:00[Asia/Singapore]\")","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"shenyih0ng"},"content":"public class Module {","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_ACAD_YEAR \u003d \"acadYear\";","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"shenyih0ng"},"content":"  private String acadYear;","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_PRECLUSION \u003d \"preclusion\";","lastModifiedDate":"2022-10-03"},{"lineNumber":59,"author":{"gitId":"shenyih0ng"},"content":"  private String preclusion;","lastModifiedDate":"2022-10-03"},{"lineNumber":60,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":61,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_DESCRIPTION \u003d \"description\";","lastModifiedDate":"2022-10-03"},{"lineNumber":62,"author":{"gitId":"shenyih0ng"},"content":"  private String description;","lastModifiedDate":"2022-10-03"},{"lineNumber":63,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":64,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_TITLE \u003d \"title\";","lastModifiedDate":"2022-10-03"},{"lineNumber":65,"author":{"gitId":"shenyih0ng"},"content":"  private String title;","lastModifiedDate":"2022-10-03"},{"lineNumber":66,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":67,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_DEPARTMENT \u003d \"department\";","lastModifiedDate":"2022-10-03"},{"lineNumber":68,"author":{"gitId":"shenyih0ng"},"content":"  private String department;","lastModifiedDate":"2022-10-03"},{"lineNumber":69,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":70,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_FACULTY \u003d \"faculty\";","lastModifiedDate":"2022-10-03"},{"lineNumber":71,"author":{"gitId":"shenyih0ng"},"content":"  private String faculty;","lastModifiedDate":"2022-10-03"},{"lineNumber":72,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":73,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_WORKLOAD \u003d \"workload\";","lastModifiedDate":"2022-10-03"},{"lineNumber":74,"author":{"gitId":"shenyih0ng"},"content":"  private Workload workload;","lastModifiedDate":"2022-10-03"},{"lineNumber":75,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":76,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_PREREQUISITE \u003d \"prerequisite\";","lastModifiedDate":"2022-10-03"},{"lineNumber":77,"author":{"gitId":"shenyih0ng"},"content":"  private String prerequisite;","lastModifiedDate":"2022-10-03"},{"lineNumber":78,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":79,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_MODULE_CREDIT \u003d \"moduleCredit\";","lastModifiedDate":"2022-10-03"},{"lineNumber":80,"author":{"gitId":"shenyih0ng"},"content":"  private String moduleCredit;","lastModifiedDate":"2022-10-03"},{"lineNumber":81,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":82,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_MODULE_CODE \u003d \"moduleCode\";","lastModifiedDate":"2022-10-03"},{"lineNumber":83,"author":{"gitId":"shenyih0ng"},"content":"  private String moduleCode;","lastModifiedDate":"2022-10-03"},{"lineNumber":84,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":85,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_SEMESTER_DATA \u003d \"semesterData\";","lastModifiedDate":"2022-10-03"},{"lineNumber":86,"author":{"gitId":"shenyih0ng"},"content":"  private List\u003cSemesterData\u003e semesterData \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-03"},{"lineNumber":87,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":88,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_PREREQ_TREE \u003d \"prereqTree\";","lastModifiedDate":"2022-10-03"},{"lineNumber":89,"author":{"gitId":"shenyih0ng"},"content":"  private PrereqTree prereqTree;","lastModifiedDate":"2022-10-03"},{"lineNumber":90,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":91,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_FULFILL_REQUIREMENTS \u003d \"fulfillRequirements\";","lastModifiedDate":"2022-10-03"},{"lineNumber":92,"author":{"gitId":"shenyih0ng"},"content":"  private List\u003cString\u003e fulfillRequirements \u003d null;","lastModifiedDate":"2022-10-03"},{"lineNumber":93,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":94,"author":{"gitId":"shenyih0ng"},"content":"  public Module() {","lastModifiedDate":"2022-10-03"},{"lineNumber":95,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":96,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":97,"author":{"gitId":"shenyih0ng"},"content":"  public Module acadYear(String acadYear) {","lastModifiedDate":"2022-10-03"},{"lineNumber":98,"author":{"gitId":"shenyih0ng"},"content":"    this.acadYear \u003d acadYear;","lastModifiedDate":"2022-10-03"},{"lineNumber":99,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":100,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":101,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":102,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":103,"author":{"gitId":"shenyih0ng"},"content":"   * Get acadYear","lastModifiedDate":"2022-10-03"},{"lineNumber":104,"author":{"gitId":"shenyih0ng"},"content":"   * @return acadYear","lastModifiedDate":"2022-10-03"},{"lineNumber":105,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":106,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":107,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"2018/2019\", required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":108,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_ACAD_YEAR)","lastModifiedDate":"2022-10-03"},{"lineNumber":109,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":110,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":111,"author":{"gitId":"shenyih0ng"},"content":"  public String getAcadYear() {","lastModifiedDate":"2022-10-03"},{"lineNumber":112,"author":{"gitId":"shenyih0ng"},"content":"    return acadYear;","lastModifiedDate":"2022-10-03"},{"lineNumber":113,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":114,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":115,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":116,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_ACAD_YEAR)","lastModifiedDate":"2022-10-03"},{"lineNumber":117,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":118,"author":{"gitId":"shenyih0ng"},"content":"  public void setAcadYear(String acadYear) {","lastModifiedDate":"2022-10-03"},{"lineNumber":119,"author":{"gitId":"shenyih0ng"},"content":"    this.acadYear \u003d acadYear;","lastModifiedDate":"2022-10-03"},{"lineNumber":120,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":121,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":122,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":123,"author":{"gitId":"shenyih0ng"},"content":"  public Module preclusion(String preclusion) {","lastModifiedDate":"2022-10-03"},{"lineNumber":124,"author":{"gitId":"shenyih0ng"},"content":"    this.preclusion \u003d preclusion;","lastModifiedDate":"2022-10-03"},{"lineNumber":125,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":126,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":127,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":128,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":129,"author":{"gitId":"shenyih0ng"},"content":"   * Get preclusion","lastModifiedDate":"2022-10-03"},{"lineNumber":130,"author":{"gitId":"shenyih0ng"},"content":"   * @return preclusion","lastModifiedDate":"2022-10-03"},{"lineNumber":131,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":132,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nullable","lastModifiedDate":"2022-10-03"},{"lineNumber":133,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"CS1104 or Students from department of ECE\", value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":134,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_PRECLUSION)","lastModifiedDate":"2022-10-03"},{"lineNumber":135,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":136,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":137,"author":{"gitId":"shenyih0ng"},"content":"  public String getPreclusion() {","lastModifiedDate":"2022-10-03"},{"lineNumber":138,"author":{"gitId":"shenyih0ng"},"content":"    return preclusion;","lastModifiedDate":"2022-10-03"},{"lineNumber":139,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":140,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":141,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":142,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_PRECLUSION)","lastModifiedDate":"2022-10-03"},{"lineNumber":143,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":144,"author":{"gitId":"shenyih0ng"},"content":"  public void setPreclusion(String preclusion) {","lastModifiedDate":"2022-10-03"},{"lineNumber":145,"author":{"gitId":"shenyih0ng"},"content":"    this.preclusion \u003d preclusion;","lastModifiedDate":"2022-10-03"},{"lineNumber":146,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":147,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":148,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":149,"author":{"gitId":"shenyih0ng"},"content":"  public Module description(String description) {","lastModifiedDate":"2022-10-03"},{"lineNumber":150,"author":{"gitId":"shenyih0ng"},"content":"    this.description \u003d description;","lastModifiedDate":"2022-10-03"},{"lineNumber":151,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":152,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":153,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":154,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":155,"author":{"gitId":"shenyih0ng"},"content":"   * Get description","lastModifiedDate":"2022-10-03"},{"lineNumber":156,"author":{"gitId":"shenyih0ng"},"content":"   * @return description","lastModifiedDate":"2022-10-03"},{"lineNumber":157,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":158,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":159,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"The objective of this module is to familiarise students with the fundamentals of computing devices. Through this module students will understand the basics of data representation, and how the various parts of a computer work, separately and with each other. This allows students to understand the issues in computing devices, and how these issues affect the implementation of solutions. Topics covered include data representation systems, combinational and sequential circuit design techniques, assembly language, processor execution cycles, pipelining, memory hierarchy and input/output systems.\", required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":160,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_DESCRIPTION)","lastModifiedDate":"2022-10-03"},{"lineNumber":161,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":162,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":163,"author":{"gitId":"shenyih0ng"},"content":"  public String getDescription() {","lastModifiedDate":"2022-10-03"},{"lineNumber":164,"author":{"gitId":"shenyih0ng"},"content":"    return description;","lastModifiedDate":"2022-10-03"},{"lineNumber":165,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":166,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":167,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":168,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_DESCRIPTION)","lastModifiedDate":"2022-10-03"},{"lineNumber":169,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":170,"author":{"gitId":"shenyih0ng"},"content":"  public void setDescription(String description) {","lastModifiedDate":"2022-10-03"},{"lineNumber":171,"author":{"gitId":"shenyih0ng"},"content":"    this.description \u003d description;","lastModifiedDate":"2022-10-03"},{"lineNumber":172,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":173,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":174,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":175,"author":{"gitId":"shenyih0ng"},"content":"  public Module title(String title) {","lastModifiedDate":"2022-10-03"},{"lineNumber":176,"author":{"gitId":"shenyih0ng"},"content":"    this.title \u003d title;","lastModifiedDate":"2022-10-03"},{"lineNumber":177,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":178,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":179,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":180,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":181,"author":{"gitId":"shenyih0ng"},"content":"   * Get title","lastModifiedDate":"2022-10-03"},{"lineNumber":182,"author":{"gitId":"shenyih0ng"},"content":"   * @return title","lastModifiedDate":"2022-10-03"},{"lineNumber":183,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":184,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":185,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"Computer Organisation\", required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":186,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_TITLE)","lastModifiedDate":"2022-10-03"},{"lineNumber":187,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":188,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":189,"author":{"gitId":"shenyih0ng"},"content":"  public String getTitle() {","lastModifiedDate":"2022-10-03"},{"lineNumber":190,"author":{"gitId":"shenyih0ng"},"content":"    return title;","lastModifiedDate":"2022-10-03"},{"lineNumber":191,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":192,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":193,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":194,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_TITLE)","lastModifiedDate":"2022-10-03"},{"lineNumber":195,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":196,"author":{"gitId":"shenyih0ng"},"content":"  public void setTitle(String title) {","lastModifiedDate":"2022-10-03"},{"lineNumber":197,"author":{"gitId":"shenyih0ng"},"content":"    this.title \u003d title;","lastModifiedDate":"2022-10-03"},{"lineNumber":198,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":199,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":200,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":201,"author":{"gitId":"shenyih0ng"},"content":"  public Module department(String department) {","lastModifiedDate":"2022-10-03"},{"lineNumber":202,"author":{"gitId":"shenyih0ng"},"content":"    this.department \u003d department;","lastModifiedDate":"2022-10-03"},{"lineNumber":203,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":204,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":205,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":206,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":207,"author":{"gitId":"shenyih0ng"},"content":"   * Get department","lastModifiedDate":"2022-10-03"},{"lineNumber":208,"author":{"gitId":"shenyih0ng"},"content":"   * @return department","lastModifiedDate":"2022-10-03"},{"lineNumber":209,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":210,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":211,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"Computer Science\", required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":212,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_DEPARTMENT)","lastModifiedDate":"2022-10-03"},{"lineNumber":213,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":214,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":215,"author":{"gitId":"shenyih0ng"},"content":"  public String getDepartment() {","lastModifiedDate":"2022-10-03"},{"lineNumber":216,"author":{"gitId":"shenyih0ng"},"content":"    return department;","lastModifiedDate":"2022-10-03"},{"lineNumber":217,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":218,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":219,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":220,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_DEPARTMENT)","lastModifiedDate":"2022-10-03"},{"lineNumber":221,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":222,"author":{"gitId":"shenyih0ng"},"content":"  public void setDepartment(String department) {","lastModifiedDate":"2022-10-03"},{"lineNumber":223,"author":{"gitId":"shenyih0ng"},"content":"    this.department \u003d department;","lastModifiedDate":"2022-10-03"},{"lineNumber":224,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":225,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":226,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":227,"author":{"gitId":"shenyih0ng"},"content":"  public Module faculty(String faculty) {","lastModifiedDate":"2022-10-03"},{"lineNumber":228,"author":{"gitId":"shenyih0ng"},"content":"    this.faculty \u003d faculty;","lastModifiedDate":"2022-10-03"},{"lineNumber":229,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":230,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":231,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":232,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":233,"author":{"gitId":"shenyih0ng"},"content":"   * Get faculty","lastModifiedDate":"2022-10-03"},{"lineNumber":234,"author":{"gitId":"shenyih0ng"},"content":"   * @return faculty","lastModifiedDate":"2022-10-03"},{"lineNumber":235,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":236,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":237,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"Computing\", required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":238,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_FACULTY)","lastModifiedDate":"2022-10-03"},{"lineNumber":239,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":240,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":241,"author":{"gitId":"shenyih0ng"},"content":"  public String getFaculty() {","lastModifiedDate":"2022-10-03"},{"lineNumber":242,"author":{"gitId":"shenyih0ng"},"content":"    return faculty;","lastModifiedDate":"2022-10-03"},{"lineNumber":243,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":244,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":245,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":246,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_FACULTY)","lastModifiedDate":"2022-10-03"},{"lineNumber":247,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":248,"author":{"gitId":"shenyih0ng"},"content":"  public void setFaculty(String faculty) {","lastModifiedDate":"2022-10-03"},{"lineNumber":249,"author":{"gitId":"shenyih0ng"},"content":"    this.faculty \u003d faculty;","lastModifiedDate":"2022-10-03"},{"lineNumber":250,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":251,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":252,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":253,"author":{"gitId":"shenyih0ng"},"content":"  public Module workload(Workload workload) {","lastModifiedDate":"2022-10-03"},{"lineNumber":254,"author":{"gitId":"shenyih0ng"},"content":"    this.workload \u003d workload;","lastModifiedDate":"2022-10-03"},{"lineNumber":255,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":256,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":257,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":258,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":259,"author":{"gitId":"shenyih0ng"},"content":"   * Get workload","lastModifiedDate":"2022-10-03"},{"lineNumber":260,"author":{"gitId":"shenyih0ng"},"content":"   * @return workload","lastModifiedDate":"2022-10-03"},{"lineNumber":261,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":262,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":263,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":264,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_WORKLOAD)","lastModifiedDate":"2022-10-03"},{"lineNumber":265,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":266,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":267,"author":{"gitId":"shenyih0ng"},"content":"  public Workload getWorkload() {","lastModifiedDate":"2022-10-03"},{"lineNumber":268,"author":{"gitId":"shenyih0ng"},"content":"    return workload;","lastModifiedDate":"2022-10-03"},{"lineNumber":269,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":270,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":271,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":272,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_WORKLOAD)","lastModifiedDate":"2022-10-03"},{"lineNumber":273,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":274,"author":{"gitId":"shenyih0ng"},"content":"  public void setWorkload(Workload workload) {","lastModifiedDate":"2022-10-03"},{"lineNumber":275,"author":{"gitId":"shenyih0ng"},"content":"    this.workload \u003d workload;","lastModifiedDate":"2022-10-03"},{"lineNumber":276,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":277,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":278,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":279,"author":{"gitId":"shenyih0ng"},"content":"  public Module prerequisite(String prerequisite) {","lastModifiedDate":"2022-10-03"},{"lineNumber":280,"author":{"gitId":"shenyih0ng"},"content":"    this.prerequisite \u003d prerequisite;","lastModifiedDate":"2022-10-03"},{"lineNumber":281,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":282,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":283,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":284,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":285,"author":{"gitId":"shenyih0ng"},"content":"   * Get prerequisite","lastModifiedDate":"2022-10-03"},{"lineNumber":286,"author":{"gitId":"shenyih0ng"},"content":"   * @return prerequisite","lastModifiedDate":"2022-10-03"},{"lineNumber":287,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":288,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nullable","lastModifiedDate":"2022-10-03"},{"lineNumber":289,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"CS1010 or its equivalent\", value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":290,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_PREREQUISITE)","lastModifiedDate":"2022-10-03"},{"lineNumber":291,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":292,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":293,"author":{"gitId":"shenyih0ng"},"content":"  public String getPrerequisite() {","lastModifiedDate":"2022-10-03"},{"lineNumber":294,"author":{"gitId":"shenyih0ng"},"content":"    return prerequisite;","lastModifiedDate":"2022-10-03"},{"lineNumber":295,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":296,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":297,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":298,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_PREREQUISITE)","lastModifiedDate":"2022-10-03"},{"lineNumber":299,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":300,"author":{"gitId":"shenyih0ng"},"content":"  public void setPrerequisite(String prerequisite) {","lastModifiedDate":"2022-10-03"},{"lineNumber":301,"author":{"gitId":"shenyih0ng"},"content":"    this.prerequisite \u003d prerequisite;","lastModifiedDate":"2022-10-03"},{"lineNumber":302,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":303,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":304,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":305,"author":{"gitId":"shenyih0ng"},"content":"  public Module moduleCredit(String moduleCredit) {","lastModifiedDate":"2022-10-03"},{"lineNumber":306,"author":{"gitId":"shenyih0ng"},"content":"    this.moduleCredit \u003d moduleCredit;","lastModifiedDate":"2022-10-03"},{"lineNumber":307,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":308,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":309,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":310,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":311,"author":{"gitId":"shenyih0ng"},"content":"   * Get moduleCredit","lastModifiedDate":"2022-10-03"},{"lineNumber":312,"author":{"gitId":"shenyih0ng"},"content":"   * @return moduleCredit","lastModifiedDate":"2022-10-03"},{"lineNumber":313,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":314,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":315,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"4\", required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":316,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_MODULE_CREDIT)","lastModifiedDate":"2022-10-03"},{"lineNumber":317,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":318,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":319,"author":{"gitId":"shenyih0ng"},"content":"  public String getModuleCredit() {","lastModifiedDate":"2022-10-03"},{"lineNumber":320,"author":{"gitId":"shenyih0ng"},"content":"    return moduleCredit;","lastModifiedDate":"2022-10-03"},{"lineNumber":321,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":322,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":323,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":324,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_MODULE_CREDIT)","lastModifiedDate":"2022-10-03"},{"lineNumber":325,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":326,"author":{"gitId":"shenyih0ng"},"content":"  public void setModuleCredit(String moduleCredit) {","lastModifiedDate":"2022-10-03"},{"lineNumber":327,"author":{"gitId":"shenyih0ng"},"content":"    this.moduleCredit \u003d moduleCredit;","lastModifiedDate":"2022-10-03"},{"lineNumber":328,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":329,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":330,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":331,"author":{"gitId":"shenyih0ng"},"content":"  public Module moduleCode(String moduleCode) {","lastModifiedDate":"2022-10-03"},{"lineNumber":332,"author":{"gitId":"shenyih0ng"},"content":"    this.moduleCode \u003d moduleCode;","lastModifiedDate":"2022-10-03"},{"lineNumber":333,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":334,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":335,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":336,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":337,"author":{"gitId":"shenyih0ng"},"content":"   * Get moduleCode","lastModifiedDate":"2022-10-03"},{"lineNumber":338,"author":{"gitId":"shenyih0ng"},"content":"   * @return moduleCode","lastModifiedDate":"2022-10-03"},{"lineNumber":339,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":340,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":341,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"CS2100\", required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":342,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_MODULE_CODE)","lastModifiedDate":"2022-10-03"},{"lineNumber":343,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":344,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":345,"author":{"gitId":"shenyih0ng"},"content":"  public String getModuleCode() {","lastModifiedDate":"2022-10-03"},{"lineNumber":346,"author":{"gitId":"shenyih0ng"},"content":"    return moduleCode;","lastModifiedDate":"2022-10-03"},{"lineNumber":347,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":348,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":349,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":350,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_MODULE_CODE)","lastModifiedDate":"2022-10-03"},{"lineNumber":351,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":352,"author":{"gitId":"shenyih0ng"},"content":"  public void setModuleCode(String moduleCode) {","lastModifiedDate":"2022-10-03"},{"lineNumber":353,"author":{"gitId":"shenyih0ng"},"content":"    this.moduleCode \u003d moduleCode;","lastModifiedDate":"2022-10-03"},{"lineNumber":354,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":355,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":356,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":357,"author":{"gitId":"shenyih0ng"},"content":"  public Module semesterData(List\u003cSemesterData\u003e semesterData) {","lastModifiedDate":"2022-10-03"},{"lineNumber":358,"author":{"gitId":"shenyih0ng"},"content":"    this.semesterData \u003d semesterData;","lastModifiedDate":"2022-10-03"},{"lineNumber":359,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":360,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":361,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":362,"author":{"gitId":"shenyih0ng"},"content":"  public Module addSemesterDataItem(SemesterData semesterDataItem) {","lastModifiedDate":"2022-10-03"},{"lineNumber":363,"author":{"gitId":"shenyih0ng"},"content":"    this.semesterData.add(semesterDataItem);","lastModifiedDate":"2022-10-03"},{"lineNumber":364,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":365,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":366,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":367,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":368,"author":{"gitId":"shenyih0ng"},"content":"   * Get semesterData","lastModifiedDate":"2022-10-03"},{"lineNumber":369,"author":{"gitId":"shenyih0ng"},"content":"   * @return semesterData","lastModifiedDate":"2022-10-03"},{"lineNumber":370,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":371,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":372,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":373,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_SEMESTER_DATA)","lastModifiedDate":"2022-10-03"},{"lineNumber":374,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":375,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":376,"author":{"gitId":"shenyih0ng"},"content":"  public List\u003cSemesterData\u003e getSemesterData() {","lastModifiedDate":"2022-10-03"},{"lineNumber":377,"author":{"gitId":"shenyih0ng"},"content":"    return semesterData;","lastModifiedDate":"2022-10-03"},{"lineNumber":378,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":379,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":380,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":381,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_SEMESTER_DATA)","lastModifiedDate":"2022-10-03"},{"lineNumber":382,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":383,"author":{"gitId":"shenyih0ng"},"content":"  public void setSemesterData(List\u003cSemesterData\u003e semesterData) {","lastModifiedDate":"2022-10-03"},{"lineNumber":384,"author":{"gitId":"shenyih0ng"},"content":"    this.semesterData \u003d semesterData;","lastModifiedDate":"2022-10-03"},{"lineNumber":385,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":386,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":387,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":388,"author":{"gitId":"shenyih0ng"},"content":"  public Module prereqTree(PrereqTree prereqTree) {","lastModifiedDate":"2022-10-03"},{"lineNumber":389,"author":{"gitId":"shenyih0ng"},"content":"    this.prereqTree \u003d prereqTree;","lastModifiedDate":"2022-10-03"},{"lineNumber":390,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":391,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":392,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":393,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":394,"author":{"gitId":"shenyih0ng"},"content":"   * Get prereqTree","lastModifiedDate":"2022-10-03"},{"lineNumber":395,"author":{"gitId":"shenyih0ng"},"content":"   * @return prereqTree","lastModifiedDate":"2022-10-03"},{"lineNumber":396,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":397,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nullable","lastModifiedDate":"2022-10-03"},{"lineNumber":398,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":399,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_PREREQ_TREE)","lastModifiedDate":"2022-10-03"},{"lineNumber":400,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":401,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":402,"author":{"gitId":"shenyih0ng"},"content":"  public PrereqTree getPrereqTree() {","lastModifiedDate":"2022-10-03"},{"lineNumber":403,"author":{"gitId":"shenyih0ng"},"content":"    return prereqTree;","lastModifiedDate":"2022-10-03"},{"lineNumber":404,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":405,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":406,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":407,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_PREREQ_TREE)","lastModifiedDate":"2022-10-03"},{"lineNumber":408,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":409,"author":{"gitId":"shenyih0ng"},"content":"  public void setPrereqTree(PrereqTree prereqTree) {","lastModifiedDate":"2022-10-03"},{"lineNumber":410,"author":{"gitId":"shenyih0ng"},"content":"    this.prereqTree \u003d prereqTree;","lastModifiedDate":"2022-10-03"},{"lineNumber":411,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":412,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":413,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":414,"author":{"gitId":"shenyih0ng"},"content":"  public Module fulfillRequirements(List\u003cString\u003e fulfillRequirements) {","lastModifiedDate":"2022-10-03"},{"lineNumber":415,"author":{"gitId":"shenyih0ng"},"content":"    this.fulfillRequirements \u003d fulfillRequirements;","lastModifiedDate":"2022-10-03"},{"lineNumber":416,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":417,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":418,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":419,"author":{"gitId":"shenyih0ng"},"content":"  public Module addFulfillRequirementsItem(String fulfillRequirementsItem) {","lastModifiedDate":"2022-10-03"},{"lineNumber":420,"author":{"gitId":"shenyih0ng"},"content":"    if (this.fulfillRequirements \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":421,"author":{"gitId":"shenyih0ng"},"content":"      this.fulfillRequirements \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-03"},{"lineNumber":422,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":423,"author":{"gitId":"shenyih0ng"},"content":"    this.fulfillRequirements.add(fulfillRequirementsItem);","lastModifiedDate":"2022-10-03"},{"lineNumber":424,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":425,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":426,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":427,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":428,"author":{"gitId":"shenyih0ng"},"content":"   * Get fulfillRequirements","lastModifiedDate":"2022-10-03"},{"lineNumber":429,"author":{"gitId":"shenyih0ng"},"content":"   * @return fulfillRequirements","lastModifiedDate":"2022-10-03"},{"lineNumber":430,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":431,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nullable","lastModifiedDate":"2022-10-03"},{"lineNumber":432,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"[\\\"CS2106\\\",\\\"CS3210\\\"]\", value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":433,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_FULFILL_REQUIREMENTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":434,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":435,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":436,"author":{"gitId":"shenyih0ng"},"content":"  public List\u003cString\u003e getFulfillRequirements() {","lastModifiedDate":"2022-10-03"},{"lineNumber":437,"author":{"gitId":"shenyih0ng"},"content":"    return fulfillRequirements;","lastModifiedDate":"2022-10-03"},{"lineNumber":438,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":439,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":440,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":441,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_FULFILL_REQUIREMENTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":442,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":443,"author":{"gitId":"shenyih0ng"},"content":"  public void setFulfillRequirements(List\u003cString\u003e fulfillRequirements) {","lastModifiedDate":"2022-10-03"},{"lineNumber":444,"author":{"gitId":"shenyih0ng"},"content":"    this.fulfillRequirements \u003d fulfillRequirements;","lastModifiedDate":"2022-10-03"},{"lineNumber":445,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":446,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":447,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":448,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":449,"author":{"gitId":"shenyih0ng"},"content":"   * Return true if this Module object is equal to o.","lastModifiedDate":"2022-10-03"},{"lineNumber":450,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":451,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":452,"author":{"gitId":"shenyih0ng"},"content":"  public boolean equals(Object o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":453,"author":{"gitId":"shenyih0ng"},"content":"    if (this \u003d\u003d o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":454,"author":{"gitId":"shenyih0ng"},"content":"      return true;","lastModifiedDate":"2022-10-03"},{"lineNumber":455,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":456,"author":{"gitId":"shenyih0ng"},"content":"    if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {","lastModifiedDate":"2022-10-03"},{"lineNumber":457,"author":{"gitId":"shenyih0ng"},"content":"      return false;","lastModifiedDate":"2022-10-03"},{"lineNumber":458,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":459,"author":{"gitId":"shenyih0ng"},"content":"    Module module \u003d (Module) o;","lastModifiedDate":"2022-10-03"},{"lineNumber":460,"author":{"gitId":"shenyih0ng"},"content":"    return Objects.equals(this.acadYear, module.acadYear) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":461,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.preclusion, module.preclusion) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":462,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.description, module.description) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":463,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.title, module.title) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":464,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.department, module.department) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":465,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.faculty, module.faculty) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":466,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.workload, module.workload) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":467,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.prerequisite, module.prerequisite) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":468,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.moduleCredit, module.moduleCredit) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":469,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.moduleCode, module.moduleCode) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":470,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.semesterData, module.semesterData) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":471,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.prereqTree, module.prereqTree) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":472,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.fulfillRequirements, module.fulfillRequirements);","lastModifiedDate":"2022-10-03"},{"lineNumber":473,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":474,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":475,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":476,"author":{"gitId":"shenyih0ng"},"content":"  public int hashCode() {","lastModifiedDate":"2022-10-03"},{"lineNumber":477,"author":{"gitId":"shenyih0ng"},"content":"    return Objects.hash(acadYear, preclusion, description, title, department, faculty, workload, prerequisite, moduleCredit, moduleCode, semesterData, prereqTree, fulfillRequirements);","lastModifiedDate":"2022-10-03"},{"lineNumber":478,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":479,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":480,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":481,"author":{"gitId":"shenyih0ng"},"content":"  public String toString() {","lastModifiedDate":"2022-10-03"},{"lineNumber":482,"author":{"gitId":"shenyih0ng"},"content":"    StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2022-10-03"},{"lineNumber":483,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"class Module {\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":484,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    acadYear: \").append(toIndentedString(acadYear)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":485,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    preclusion: \").append(toIndentedString(preclusion)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":486,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    description: \").append(toIndentedString(description)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":487,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    title: \").append(toIndentedString(title)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":488,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    department: \").append(toIndentedString(department)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":489,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    faculty: \").append(toIndentedString(faculty)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":490,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    workload: \").append(toIndentedString(workload)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":491,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    prerequisite: \").append(toIndentedString(prerequisite)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":492,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    moduleCredit: \").append(toIndentedString(moduleCredit)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":493,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    moduleCode: \").append(toIndentedString(moduleCode)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":494,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    semesterData: \").append(toIndentedString(semesterData)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":495,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    prereqTree: \").append(toIndentedString(prereqTree)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":496,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    fulfillRequirements: \").append(toIndentedString(fulfillRequirements)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":497,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"}\");","lastModifiedDate":"2022-10-03"},{"lineNumber":498,"author":{"gitId":"shenyih0ng"},"content":"    return sb.toString();","lastModifiedDate":"2022-10-03"},{"lineNumber":499,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":500,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":501,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":502,"author":{"gitId":"shenyih0ng"},"content":"   * Convert the given object to string with each line indented by 4 spaces","lastModifiedDate":"2022-10-03"},{"lineNumber":503,"author":{"gitId":"shenyih0ng"},"content":"   * (except the first line).","lastModifiedDate":"2022-10-03"},{"lineNumber":504,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":505,"author":{"gitId":"shenyih0ng"},"content":"  private String toIndentedString(Object o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":506,"author":{"gitId":"shenyih0ng"},"content":"    if (o \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":507,"author":{"gitId":"shenyih0ng"},"content":"      return \"null\";","lastModifiedDate":"2022-10-03"},{"lineNumber":508,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":509,"author":{"gitId":"shenyih0ng"},"content":"    return o.toString().replace(\"\\n\", \"\\n    \");","lastModifiedDate":"2022-10-03"},{"lineNumber":510,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":511,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":512,"author":{"gitId":"shenyih0ng"},"content":"}","lastModifiedDate":"2022-10-03"},{"lineNumber":513,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"shenyih0ng":513}},{"path":"src/main/java/org/openapitools/client/model/ModuleCondensed.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"shenyih0ng"},"content":"/*","lastModifiedDate":"2022-10-03"},{"lineNumber":2,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API contains data used to render \u003chttps://nusmods.com\u003e. It includes data on modules offered by NUS and their timetables, as well as information on the locations the classes take place in. You are welcome to use and experiment with the data, which is extracted from official APIs provided by the Registrar\u0027s Office.  The API consists of static JSON files scraped daily from the school\u0027s APIs. This means it only partially follow REST conventions, and all resources are read only. All successful responses will return JSON, and all endpoints end in `.json`.  The shape of the data returned by these endpoints are designed for NUSMods in mind. If you have any questions or find that you need the data in other shapes for other purposes, feel free to reach out to us:  - **Telegram**: \u003chttps://telegram.me/nusmods\u003e - **Mailing list**: \u003cnusmods@googlegroups.com\u003e (for security related issues please email \u003cmods@nusmods.com\u003e instead)  ## Fetching data  Any HTTP client can be used to fetch data from the API. HTTPS is preferred, but the server will also respond to HTTP requests. The server supports HTTP 1.1 as well as HTTP 2 over HTTPS, and supports gzip compression.  The API has no authentication, and is not rate limited. While the server can respond to a large number of requests simultaneously, we request that you be polite with resource usage so as not to disrupt nusmods.com, which relies on the same API server. In general there is no need to fetch data from the API more than once per day, as that is the frequency at which we update the data.  [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) headers are enabled on all endpoints, so client-side JavaScript can use also use the API.  ## TypeScript types  Since the NUSMods is written in TypeScript, typings are available in the source for the scraper. These may be easier to read than the documentation generated by Swagger.  - Module types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/modules.ts\u003e - Venue types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/venues.ts\u003e  ## Data  Below are some notes about the data returned from the API. Feel free to talk to us or create an issue if any of it is not clear.  ### Module data  Module endpoints return information on modules offered by NUS. Most of the module data is self-explanatory, but some of the data are more complex and is explained here.  #### Lessons  Each lesson in a timetable has a lesson type `lessonType` and class number `ClassNo`. Every student must take one of each lesson type offered by the module. For example, this module offers two tutorials and one lecture. That means the student must attend the lecture, and can choose one of the two tutorials to attend.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"01\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1100\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"COM1-0207\\\"     },     {       \\\"classNo\\\": \\\"02\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Friday\\\",       \\\"startTime\\\": \\\"0900\\\",       \\\"endTime\\\": \\\"1000\\\",       \\\"venue\\\": \\\"COM1-0209\\\"     }   ] } ```  Each lesson has a `classNo` key. There can be multiple lessons of the same type and class number, in which case students must attend both. In this example, students can choose to attend either lecture group 1 on Tuesdays and Wednesdays, or lecture group 2 on Mondays and Wednesdays.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1400\\\",       \\\"endTime\\\": \\\"1500\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Monday\\\",       \\\"startTime\\\": \\\"1000\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1500\\\",       \\\"endTime\\\": \\\"1600\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     }   ] } ```  #### Lesson Weeks  The `weeks` key on lessons can return data in one of two forms.  Weeks is usually a sorted array of numbers. In this case it represents the school weeks the lesson occurs on, from 1 to 13.  Some classes have lessons outside of the school timetable. In this case a `WeekRange` object is returned. The object will always contain a `start` and `end` key representing the start and end date of lessons. The example below has classes every week from 17th Jan to 18th April.  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-04-18\\\" } ```  Optionally it can also include `weekInterval`, a positive integer describing the number of weeks between each lesson, and `weeks`, an array of positive integers describing the weeks on which the lesson will fall, with week 1 being the starting date. If these are not present you can assume lessons will occur every week.  The following example has lessons on 17th Jan (week 1), 24th Jan (week 2), 7th Feb (week 4) and 21st Feb (week 6).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-21\\\",   \\\"weeks\\\": [1, 2, 4, 6] } ```  The following example has lessons on 17th Jan (week 1), 31st Jan (week 3), 14th Feb (week 5) and 28th Feb (week 7).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-28\\\",   \\\"weekInterval\\\": 2 } ```  #### Workload  The `workload` key can return data in one of two forms.  Workload is usually a **5-tuple of numbers**, describing the estimated number of hours per week the student is expected to put in for the module for **lectures, tutorials, laboratory, projects/fieldwork, and preparatory work** respectively. For example, a workload of `[2, 1, 1, 3, 3]` means the student should spend every week  - 2 hours in lectures - 1 hour in tutorials - 1 hour at the lab - 3 hours doing project work - 3 hours preparing for classes  Each module credit represents 2.5 hours of work each week, so the standard 4 MC module represents 10 hours of work each week. Module credit may not be integers.  Note that this is only an estimate, and may be outdated or differ significantly in reality. Some modules also incorrectly lists the **total** workload hours instead of weekly, so very large values may show up.  This value is parsed from a string provided by the school, and occasionally this field will contain unusual values which cannot be parsed. In this case this field will contain the original **string** instead, which should be displayed as-is to the user.  #### Prerequisite, corequisite and preclusions  These three keys determine whether a student can take a module.  **Prerequisites** are requirements you have to meet before you can take a module. These are usually in the form of other modules (see prerequisite tree below for a machine readable format), but can also be things like \u0027taken A-level H2 math\u0027 or \u002770 MCs and above\u0027.  **Preclusions** refer to modules or requirements that cannot be taken if this module is taken, and vice versa. These are usually modules whose content overlaps significantly with this module, and can usually be used to replace each other to fulfill prerequisites.  **Corequisites** are modules that must be taken together with this module in the same semester. This usually refer to twined modules - modules which have linked syllabuses.  #### Prerequisite Tree  The `prereqTree` key is return on the individual module endpoint (`/modules/{moduleCode`). Not all modules have prerequisites, and some have prerequisites that cannot be properly represented as a tree, in which case this key will not appear.  This describes the prerequisites that need to be fulfilled before this module can be taken. The data structure is recursive and represents a tree.  ```json {   \\\"and\\\": [     \\\"CS1231\\\",     {       \\\"or\\\": [\\\"CS1010S\\\", \\\"CS1010X\\\"]     }   ] } ```  In the example, this module requires CS1231 and either CS1010S or CS1010X. This can be visualized as  ```            ┌ CS1231 ── all of ─┤            │         ┌ CS1010            └ one of ─┤                      └ CS1010X ```  The module information also contains the inverse of this, that is, modules whose requirements are fulfilled by this module (taking this module will allow you to take these modules in the following semester). The data is found on the `fulfillRequirements` key as an array of module codes.  ### Venue data  Venue data is simply the module timetable restructured to show the lessons happening at each classroom.  The venue list endpoint returns a list of all locations that are used in the semester. Note that this is not a comprehensive list of locations, but rather just a list of venues that appears in module lessons.  The venue information endpoint returns the full class and occupancy information about a venue. The `classes` key contains a list of lessons similar to the `timetable` key in module data, but without a `venue` key and with `moduleCode`.","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"shenyih0ng"},"content":" * The version of the OpenAPI document: 2.0.0","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"shenyih0ng"},"content":" * Contact: nusmods@googlegroups.com","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"shenyih0ng"},"content":" * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"shenyih0ng"},"content":" * https://openapi-generator.tech","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"shenyih0ng"},"content":" * Do not edit the class manually.","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"shenyih0ng"},"content":"package org.openapitools.client.model;","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Objects;","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Map;","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"shenyih0ng"},"content":"import java.util.HashMap;","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonInclude;","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonTypeName;","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"shenyih0ng"},"content":"import io.swagger.annotations.ApiModel;","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"shenyih0ng"},"content":"import io.swagger.annotations.ApiModelProperty;","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"shenyih0ng"},"content":"import java.math.BigDecimal;","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"shenyih0ng"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"shenyih0ng"},"content":"import java.util.List;","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonPropertyOrder;","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"shenyih0ng"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"shenyih0ng"},"content":" * ModuleCondensed","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"shenyih0ng"},"content":"@JsonPropertyOrder({","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"shenyih0ng"},"content":"  ModuleCondensed.JSON_PROPERTY_MODULE_CODE,","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"shenyih0ng"},"content":"  ModuleCondensed.JSON_PROPERTY_TITLE,","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"shenyih0ng"},"content":"  ModuleCondensed.JSON_PROPERTY_SEMESTERS","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"shenyih0ng"},"content":"})","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"shenyih0ng"},"content":"@javax.annotation.processing.Generated(value \u003d \"org.openapitools.codegen.languages.JavaClientCodegen\", date \u003d \"2022-10-03T22:22:26.802458+08:00[Asia/Singapore]\")","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"shenyih0ng"},"content":"public class ModuleCondensed {","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_MODULE_CODE \u003d \"moduleCode\";","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"shenyih0ng"},"content":"  private String moduleCode;","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_TITLE \u003d \"title\";","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"shenyih0ng"},"content":"  private String title;","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"shenyih0ng"},"content":"   * Gets or Sets semesters","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"shenyih0ng"},"content":"  public enum SemestersEnum {","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"shenyih0ng"},"content":"    NUMBER_1(new BigDecimal(\"1\")),","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"shenyih0ng"},"content":"    NUMBER_2(new BigDecimal(\"2\")),","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"shenyih0ng"},"content":"    NUMBER_3(new BigDecimal(\"3\")),","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":59,"author":{"gitId":"shenyih0ng"},"content":"    NUMBER_4(new BigDecimal(\"4\"));","lastModifiedDate":"2022-10-03"},{"lineNumber":60,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":61,"author":{"gitId":"shenyih0ng"},"content":"    private BigDecimal value;","lastModifiedDate":"2022-10-03"},{"lineNumber":62,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":63,"author":{"gitId":"shenyih0ng"},"content":"    SemestersEnum(BigDecimal value) {","lastModifiedDate":"2022-10-03"},{"lineNumber":64,"author":{"gitId":"shenyih0ng"},"content":"      this.value \u003d value;","lastModifiedDate":"2022-10-03"},{"lineNumber":65,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":66,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":67,"author":{"gitId":"shenyih0ng"},"content":"    @JsonValue","lastModifiedDate":"2022-10-03"},{"lineNumber":68,"author":{"gitId":"shenyih0ng"},"content":"    public BigDecimal getValue() {","lastModifiedDate":"2022-10-03"},{"lineNumber":69,"author":{"gitId":"shenyih0ng"},"content":"      return value;","lastModifiedDate":"2022-10-03"},{"lineNumber":70,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":71,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":72,"author":{"gitId":"shenyih0ng"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":73,"author":{"gitId":"shenyih0ng"},"content":"    public String toString() {","lastModifiedDate":"2022-10-03"},{"lineNumber":74,"author":{"gitId":"shenyih0ng"},"content":"      return String.valueOf(value);","lastModifiedDate":"2022-10-03"},{"lineNumber":75,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":76,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":77,"author":{"gitId":"shenyih0ng"},"content":"    @JsonCreator","lastModifiedDate":"2022-10-03"},{"lineNumber":78,"author":{"gitId":"shenyih0ng"},"content":"    public static SemestersEnum fromValue(BigDecimal value) {","lastModifiedDate":"2022-10-03"},{"lineNumber":79,"author":{"gitId":"shenyih0ng"},"content":"      for (SemestersEnum b : SemestersEnum.values()) {","lastModifiedDate":"2022-10-03"},{"lineNumber":80,"author":{"gitId":"shenyih0ng"},"content":"        if (b.value.equals(value)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":81,"author":{"gitId":"shenyih0ng"},"content":"          return b;","lastModifiedDate":"2022-10-03"},{"lineNumber":82,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":83,"author":{"gitId":"shenyih0ng"},"content":"      }","lastModifiedDate":"2022-10-03"},{"lineNumber":84,"author":{"gitId":"shenyih0ng"},"content":"      throw new IllegalArgumentException(\"Unexpected value \u0027\" + value + \"\u0027\");","lastModifiedDate":"2022-10-03"},{"lineNumber":85,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":86,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":87,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":88,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_SEMESTERS \u003d \"semesters\";","lastModifiedDate":"2022-10-03"},{"lineNumber":89,"author":{"gitId":"shenyih0ng"},"content":"  private List\u003cSemestersEnum\u003e semesters \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-03"},{"lineNumber":90,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":91,"author":{"gitId":"shenyih0ng"},"content":"  public ModuleCondensed() {","lastModifiedDate":"2022-10-03"},{"lineNumber":92,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":93,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":94,"author":{"gitId":"shenyih0ng"},"content":"  public ModuleCondensed moduleCode(String moduleCode) {","lastModifiedDate":"2022-10-03"},{"lineNumber":95,"author":{"gitId":"shenyih0ng"},"content":"    this.moduleCode \u003d moduleCode;","lastModifiedDate":"2022-10-03"},{"lineNumber":96,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":97,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":98,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":99,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":100,"author":{"gitId":"shenyih0ng"},"content":"   * Get moduleCode","lastModifiedDate":"2022-10-03"},{"lineNumber":101,"author":{"gitId":"shenyih0ng"},"content":"   * @return moduleCode","lastModifiedDate":"2022-10-03"},{"lineNumber":102,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":103,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":104,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"EL1101E\", required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":105,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_MODULE_CODE)","lastModifiedDate":"2022-10-03"},{"lineNumber":106,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":107,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":108,"author":{"gitId":"shenyih0ng"},"content":"  public String getModuleCode() {","lastModifiedDate":"2022-10-03"},{"lineNumber":109,"author":{"gitId":"shenyih0ng"},"content":"    return moduleCode;","lastModifiedDate":"2022-10-03"},{"lineNumber":110,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":111,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":112,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":113,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_MODULE_CODE)","lastModifiedDate":"2022-10-03"},{"lineNumber":114,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":115,"author":{"gitId":"shenyih0ng"},"content":"  public void setModuleCode(String moduleCode) {","lastModifiedDate":"2022-10-03"},{"lineNumber":116,"author":{"gitId":"shenyih0ng"},"content":"    this.moduleCode \u003d moduleCode;","lastModifiedDate":"2022-10-03"},{"lineNumber":117,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":118,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":119,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":120,"author":{"gitId":"shenyih0ng"},"content":"  public ModuleCondensed title(String title) {","lastModifiedDate":"2022-10-03"},{"lineNumber":121,"author":{"gitId":"shenyih0ng"},"content":"    this.title \u003d title;","lastModifiedDate":"2022-10-03"},{"lineNumber":122,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":123,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":124,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":125,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":126,"author":{"gitId":"shenyih0ng"},"content":"   * Get title","lastModifiedDate":"2022-10-03"},{"lineNumber":127,"author":{"gitId":"shenyih0ng"},"content":"   * @return title","lastModifiedDate":"2022-10-03"},{"lineNumber":128,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":129,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":130,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"The Nature of Language\", required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":131,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_TITLE)","lastModifiedDate":"2022-10-03"},{"lineNumber":132,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":133,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":134,"author":{"gitId":"shenyih0ng"},"content":"  public String getTitle() {","lastModifiedDate":"2022-10-03"},{"lineNumber":135,"author":{"gitId":"shenyih0ng"},"content":"    return title;","lastModifiedDate":"2022-10-03"},{"lineNumber":136,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":137,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":138,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":139,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_TITLE)","lastModifiedDate":"2022-10-03"},{"lineNumber":140,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":141,"author":{"gitId":"shenyih0ng"},"content":"  public void setTitle(String title) {","lastModifiedDate":"2022-10-03"},{"lineNumber":142,"author":{"gitId":"shenyih0ng"},"content":"    this.title \u003d title;","lastModifiedDate":"2022-10-03"},{"lineNumber":143,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":144,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":145,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":146,"author":{"gitId":"shenyih0ng"},"content":"  public ModuleCondensed semesters(List\u003cSemestersEnum\u003e semesters) {","lastModifiedDate":"2022-10-03"},{"lineNumber":147,"author":{"gitId":"shenyih0ng"},"content":"    this.semesters \u003d semesters;","lastModifiedDate":"2022-10-03"},{"lineNumber":148,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":149,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":150,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":151,"author":{"gitId":"shenyih0ng"},"content":"  public ModuleCondensed addSemestersItem(SemestersEnum semestersItem) {","lastModifiedDate":"2022-10-03"},{"lineNumber":152,"author":{"gitId":"shenyih0ng"},"content":"    this.semesters.add(semestersItem);","lastModifiedDate":"2022-10-03"},{"lineNumber":153,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":154,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":155,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":156,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":157,"author":{"gitId":"shenyih0ng"},"content":"   * Get semesters","lastModifiedDate":"2022-10-03"},{"lineNumber":158,"author":{"gitId":"shenyih0ng"},"content":"   * @return semesters","lastModifiedDate":"2022-10-03"},{"lineNumber":159,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":160,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":161,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"[1,2]\", required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":162,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_SEMESTERS)","lastModifiedDate":"2022-10-03"},{"lineNumber":163,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":164,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":165,"author":{"gitId":"shenyih0ng"},"content":"  public List\u003cSemestersEnum\u003e getSemesters() {","lastModifiedDate":"2022-10-03"},{"lineNumber":166,"author":{"gitId":"shenyih0ng"},"content":"    return semesters;","lastModifiedDate":"2022-10-03"},{"lineNumber":167,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":168,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":169,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":170,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_SEMESTERS)","lastModifiedDate":"2022-10-03"},{"lineNumber":171,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":172,"author":{"gitId":"shenyih0ng"},"content":"  public void setSemesters(List\u003cSemestersEnum\u003e semesters) {","lastModifiedDate":"2022-10-03"},{"lineNumber":173,"author":{"gitId":"shenyih0ng"},"content":"    this.semesters \u003d semesters;","lastModifiedDate":"2022-10-03"},{"lineNumber":174,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":175,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":176,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":177,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":178,"author":{"gitId":"shenyih0ng"},"content":"   * Return true if this ModuleCondensed object is equal to o.","lastModifiedDate":"2022-10-03"},{"lineNumber":179,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":180,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":181,"author":{"gitId":"shenyih0ng"},"content":"  public boolean equals(Object o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":182,"author":{"gitId":"shenyih0ng"},"content":"    if (this \u003d\u003d o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":183,"author":{"gitId":"shenyih0ng"},"content":"      return true;","lastModifiedDate":"2022-10-03"},{"lineNumber":184,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":185,"author":{"gitId":"shenyih0ng"},"content":"    if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {","lastModifiedDate":"2022-10-03"},{"lineNumber":186,"author":{"gitId":"shenyih0ng"},"content":"      return false;","lastModifiedDate":"2022-10-03"},{"lineNumber":187,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":188,"author":{"gitId":"shenyih0ng"},"content":"    ModuleCondensed moduleCondensed \u003d (ModuleCondensed) o;","lastModifiedDate":"2022-10-03"},{"lineNumber":189,"author":{"gitId":"shenyih0ng"},"content":"    return Objects.equals(this.moduleCode, moduleCondensed.moduleCode) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":190,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.title, moduleCondensed.title) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":191,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.semesters, moduleCondensed.semesters);","lastModifiedDate":"2022-10-03"},{"lineNumber":192,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":193,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":194,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":195,"author":{"gitId":"shenyih0ng"},"content":"  public int hashCode() {","lastModifiedDate":"2022-10-03"},{"lineNumber":196,"author":{"gitId":"shenyih0ng"},"content":"    return Objects.hash(moduleCode, title, semesters);","lastModifiedDate":"2022-10-03"},{"lineNumber":197,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":198,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":199,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":200,"author":{"gitId":"shenyih0ng"},"content":"  public String toString() {","lastModifiedDate":"2022-10-03"},{"lineNumber":201,"author":{"gitId":"shenyih0ng"},"content":"    StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2022-10-03"},{"lineNumber":202,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"class ModuleCondensed {\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":203,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    moduleCode: \").append(toIndentedString(moduleCode)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":204,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    title: \").append(toIndentedString(title)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":205,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    semesters: \").append(toIndentedString(semesters)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":206,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"}\");","lastModifiedDate":"2022-10-03"},{"lineNumber":207,"author":{"gitId":"shenyih0ng"},"content":"    return sb.toString();","lastModifiedDate":"2022-10-03"},{"lineNumber":208,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":209,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":210,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":211,"author":{"gitId":"shenyih0ng"},"content":"   * Convert the given object to string with each line indented by 4 spaces","lastModifiedDate":"2022-10-03"},{"lineNumber":212,"author":{"gitId":"shenyih0ng"},"content":"   * (except the first line).","lastModifiedDate":"2022-10-03"},{"lineNumber":213,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":214,"author":{"gitId":"shenyih0ng"},"content":"  private String toIndentedString(Object o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":215,"author":{"gitId":"shenyih0ng"},"content":"    if (o \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":216,"author":{"gitId":"shenyih0ng"},"content":"      return \"null\";","lastModifiedDate":"2022-10-03"},{"lineNumber":217,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":218,"author":{"gitId":"shenyih0ng"},"content":"    return o.toString().replace(\"\\n\", \"\\n    \");","lastModifiedDate":"2022-10-03"},{"lineNumber":219,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":220,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":221,"author":{"gitId":"shenyih0ng"},"content":"}","lastModifiedDate":"2022-10-03"},{"lineNumber":222,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"shenyih0ng":222}},{"path":"src/main/java/org/openapitools/client/model/ModuleInformation.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"shenyih0ng"},"content":"/*","lastModifiedDate":"2022-10-03"},{"lineNumber":2,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API contains data used to render \u003chttps://nusmods.com\u003e. It includes data on modules offered by NUS and their timetables, as well as information on the locations the classes take place in. You are welcome to use and experiment with the data, which is extracted from official APIs provided by the Registrar\u0027s Office.  The API consists of static JSON files scraped daily from the school\u0027s APIs. This means it only partially follow REST conventions, and all resources are read only. All successful responses will return JSON, and all endpoints end in `.json`.  The shape of the data returned by these endpoints are designed for NUSMods in mind. If you have any questions or find that you need the data in other shapes for other purposes, feel free to reach out to us:  - **Telegram**: \u003chttps://telegram.me/nusmods\u003e - **Mailing list**: \u003cnusmods@googlegroups.com\u003e (for security related issues please email \u003cmods@nusmods.com\u003e instead)  ## Fetching data  Any HTTP client can be used to fetch data from the API. HTTPS is preferred, but the server will also respond to HTTP requests. The server supports HTTP 1.1 as well as HTTP 2 over HTTPS, and supports gzip compression.  The API has no authentication, and is not rate limited. While the server can respond to a large number of requests simultaneously, we request that you be polite with resource usage so as not to disrupt nusmods.com, which relies on the same API server. In general there is no need to fetch data from the API more than once per day, as that is the frequency at which we update the data.  [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) headers are enabled on all endpoints, so client-side JavaScript can use also use the API.  ## TypeScript types  Since the NUSMods is written in TypeScript, typings are available in the source for the scraper. These may be easier to read than the documentation generated by Swagger.  - Module types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/modules.ts\u003e - Venue types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/venues.ts\u003e  ## Data  Below are some notes about the data returned from the API. Feel free to talk to us or create an issue if any of it is not clear.  ### Module data  Module endpoints return information on modules offered by NUS. Most of the module data is self-explanatory, but some of the data are more complex and is explained here.  #### Lessons  Each lesson in a timetable has a lesson type `lessonType` and class number `ClassNo`. Every student must take one of each lesson type offered by the module. For example, this module offers two tutorials and one lecture. That means the student must attend the lecture, and can choose one of the two tutorials to attend.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"01\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1100\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"COM1-0207\\\"     },     {       \\\"classNo\\\": \\\"02\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Friday\\\",       \\\"startTime\\\": \\\"0900\\\",       \\\"endTime\\\": \\\"1000\\\",       \\\"venue\\\": \\\"COM1-0209\\\"     }   ] } ```  Each lesson has a `classNo` key. There can be multiple lessons of the same type and class number, in which case students must attend both. In this example, students can choose to attend either lecture group 1 on Tuesdays and Wednesdays, or lecture group 2 on Mondays and Wednesdays.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1400\\\",       \\\"endTime\\\": \\\"1500\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Monday\\\",       \\\"startTime\\\": \\\"1000\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1500\\\",       \\\"endTime\\\": \\\"1600\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     }   ] } ```  #### Lesson Weeks  The `weeks` key on lessons can return data in one of two forms.  Weeks is usually a sorted array of numbers. In this case it represents the school weeks the lesson occurs on, from 1 to 13.  Some classes have lessons outside of the school timetable. In this case a `WeekRange` object is returned. The object will always contain a `start` and `end` key representing the start and end date of lessons. The example below has classes every week from 17th Jan to 18th April.  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-04-18\\\" } ```  Optionally it can also include `weekInterval`, a positive integer describing the number of weeks between each lesson, and `weeks`, an array of positive integers describing the weeks on which the lesson will fall, with week 1 being the starting date. If these are not present you can assume lessons will occur every week.  The following example has lessons on 17th Jan (week 1), 24th Jan (week 2), 7th Feb (week 4) and 21st Feb (week 6).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-21\\\",   \\\"weeks\\\": [1, 2, 4, 6] } ```  The following example has lessons on 17th Jan (week 1), 31st Jan (week 3), 14th Feb (week 5) and 28th Feb (week 7).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-28\\\",   \\\"weekInterval\\\": 2 } ```  #### Workload  The `workload` key can return data in one of two forms.  Workload is usually a **5-tuple of numbers**, describing the estimated number of hours per week the student is expected to put in for the module for **lectures, tutorials, laboratory, projects/fieldwork, and preparatory work** respectively. For example, a workload of `[2, 1, 1, 3, 3]` means the student should spend every week  - 2 hours in lectures - 1 hour in tutorials - 1 hour at the lab - 3 hours doing project work - 3 hours preparing for classes  Each module credit represents 2.5 hours of work each week, so the standard 4 MC module represents 10 hours of work each week. Module credit may not be integers.  Note that this is only an estimate, and may be outdated or differ significantly in reality. Some modules also incorrectly lists the **total** workload hours instead of weekly, so very large values may show up.  This value is parsed from a string provided by the school, and occasionally this field will contain unusual values which cannot be parsed. In this case this field will contain the original **string** instead, which should be displayed as-is to the user.  #### Prerequisite, corequisite and preclusions  These three keys determine whether a student can take a module.  **Prerequisites** are requirements you have to meet before you can take a module. These are usually in the form of other modules (see prerequisite tree below for a machine readable format), but can also be things like \u0027taken A-level H2 math\u0027 or \u002770 MCs and above\u0027.  **Preclusions** refer to modules or requirements that cannot be taken if this module is taken, and vice versa. These are usually modules whose content overlaps significantly with this module, and can usually be used to replace each other to fulfill prerequisites.  **Corequisites** are modules that must be taken together with this module in the same semester. This usually refer to twined modules - modules which have linked syllabuses.  #### Prerequisite Tree  The `prereqTree` key is return on the individual module endpoint (`/modules/{moduleCode`). Not all modules have prerequisites, and some have prerequisites that cannot be properly represented as a tree, in which case this key will not appear.  This describes the prerequisites that need to be fulfilled before this module can be taken. The data structure is recursive and represents a tree.  ```json {   \\\"and\\\": [     \\\"CS1231\\\",     {       \\\"or\\\": [\\\"CS1010S\\\", \\\"CS1010X\\\"]     }   ] } ```  In the example, this module requires CS1231 and either CS1010S or CS1010X. This can be visualized as  ```            ┌ CS1231 ── all of ─┤            │         ┌ CS1010            └ one of ─┤                      └ CS1010X ```  The module information also contains the inverse of this, that is, modules whose requirements are fulfilled by this module (taking this module will allow you to take these modules in the following semester). The data is found on the `fulfillRequirements` key as an array of module codes.  ### Venue data  Venue data is simply the module timetable restructured to show the lessons happening at each classroom.  The venue list endpoint returns a list of all locations that are used in the semester. Note that this is not a comprehensive list of locations, but rather just a list of venues that appears in module lessons.  The venue information endpoint returns the full class and occupancy information about a venue. The `classes` key contains a list of lessons similar to the `timetable` key in module data, but without a `venue` key and with `moduleCode`.","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"shenyih0ng"},"content":" * The version of the OpenAPI document: 2.0.0","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"shenyih0ng"},"content":" * Contact: nusmods@googlegroups.com","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"shenyih0ng"},"content":" * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"shenyih0ng"},"content":" * https://openapi-generator.tech","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"shenyih0ng"},"content":" * Do not edit the class manually.","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"shenyih0ng"},"content":"package org.openapitools.client.model;","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Objects;","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Map;","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"shenyih0ng"},"content":"import java.util.HashMap;","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonInclude;","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonTypeName;","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"shenyih0ng"},"content":"import io.swagger.annotations.ApiModel;","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"shenyih0ng"},"content":"import io.swagger.annotations.ApiModelProperty;","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"shenyih0ng"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"shenyih0ng"},"content":"import java.util.List;","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.client.model.ModuleInformationSemesterDataInner;","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.client.model.Workload;","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonPropertyOrder;","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"shenyih0ng"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"shenyih0ng"},"content":" * ModuleInformation","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"shenyih0ng"},"content":"@JsonPropertyOrder({","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"shenyih0ng"},"content":"  ModuleInformation.JSON_PROPERTY_MODULE_CODE,","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"shenyih0ng"},"content":"  ModuleInformation.JSON_PROPERTY_TITLE,","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"shenyih0ng"},"content":"  ModuleInformation.JSON_PROPERTY_DESCRIPTION,","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"shenyih0ng"},"content":"  ModuleInformation.JSON_PROPERTY_MODULE_CREDIT,","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"shenyih0ng"},"content":"  ModuleInformation.JSON_PROPERTY_DEPARTMENT,","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"shenyih0ng"},"content":"  ModuleInformation.JSON_PROPERTY_FACULTY,","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"shenyih0ng"},"content":"  ModuleInformation.JSON_PROPERTY_WORKLOAD,","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"shenyih0ng"},"content":"  ModuleInformation.JSON_PROPERTY_PREREQUISITE,","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"shenyih0ng"},"content":"  ModuleInformation.JSON_PROPERTY_PRECLUSION,","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"shenyih0ng"},"content":"  ModuleInformation.JSON_PROPERTY_COREQUISITE,","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"shenyih0ng"},"content":"  ModuleInformation.JSON_PROPERTY_SEMESTER_DATA","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"shenyih0ng"},"content":"})","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"shenyih0ng"},"content":"@javax.annotation.processing.Generated(value \u003d \"org.openapitools.codegen.languages.JavaClientCodegen\", date \u003d \"2022-10-03T22:22:26.802458+08:00[Asia/Singapore]\")","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"shenyih0ng"},"content":"public class ModuleInformation {","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_MODULE_CODE \u003d \"moduleCode\";","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"shenyih0ng"},"content":"  private String moduleCode;","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_TITLE \u003d \"title\";","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"shenyih0ng"},"content":"  private String title;","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_DESCRIPTION \u003d \"description\";","lastModifiedDate":"2022-10-03"},{"lineNumber":59,"author":{"gitId":"shenyih0ng"},"content":"  private String description;","lastModifiedDate":"2022-10-03"},{"lineNumber":60,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":61,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_MODULE_CREDIT \u003d \"moduleCredit\";","lastModifiedDate":"2022-10-03"},{"lineNumber":62,"author":{"gitId":"shenyih0ng"},"content":"  private String moduleCredit;","lastModifiedDate":"2022-10-03"},{"lineNumber":63,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":64,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_DEPARTMENT \u003d \"department\";","lastModifiedDate":"2022-10-03"},{"lineNumber":65,"author":{"gitId":"shenyih0ng"},"content":"  private String department;","lastModifiedDate":"2022-10-03"},{"lineNumber":66,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":67,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_FACULTY \u003d \"faculty\";","lastModifiedDate":"2022-10-03"},{"lineNumber":68,"author":{"gitId":"shenyih0ng"},"content":"  private String faculty;","lastModifiedDate":"2022-10-03"},{"lineNumber":69,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":70,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_WORKLOAD \u003d \"workload\";","lastModifiedDate":"2022-10-03"},{"lineNumber":71,"author":{"gitId":"shenyih0ng"},"content":"  private Workload workload;","lastModifiedDate":"2022-10-03"},{"lineNumber":72,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":73,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_PREREQUISITE \u003d \"prerequisite\";","lastModifiedDate":"2022-10-03"},{"lineNumber":74,"author":{"gitId":"shenyih0ng"},"content":"  private String prerequisite;","lastModifiedDate":"2022-10-03"},{"lineNumber":75,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":76,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_PRECLUSION \u003d \"preclusion\";","lastModifiedDate":"2022-10-03"},{"lineNumber":77,"author":{"gitId":"shenyih0ng"},"content":"  private String preclusion;","lastModifiedDate":"2022-10-03"},{"lineNumber":78,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":79,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_COREQUISITE \u003d \"corequisite\";","lastModifiedDate":"2022-10-03"},{"lineNumber":80,"author":{"gitId":"shenyih0ng"},"content":"  private String corequisite;","lastModifiedDate":"2022-10-03"},{"lineNumber":81,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":82,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_SEMESTER_DATA \u003d \"semesterData\";","lastModifiedDate":"2022-10-03"},{"lineNumber":83,"author":{"gitId":"shenyih0ng"},"content":"  private List\u003cModuleInformationSemesterDataInner\u003e semesterData \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-03"},{"lineNumber":84,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":85,"author":{"gitId":"shenyih0ng"},"content":"  public ModuleInformation() {","lastModifiedDate":"2022-10-03"},{"lineNumber":86,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":87,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":88,"author":{"gitId":"shenyih0ng"},"content":"  public ModuleInformation moduleCode(String moduleCode) {","lastModifiedDate":"2022-10-03"},{"lineNumber":89,"author":{"gitId":"shenyih0ng"},"content":"    this.moduleCode \u003d moduleCode;","lastModifiedDate":"2022-10-03"},{"lineNumber":90,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":91,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":92,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":93,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":94,"author":{"gitId":"shenyih0ng"},"content":"   * Get moduleCode","lastModifiedDate":"2022-10-03"},{"lineNumber":95,"author":{"gitId":"shenyih0ng"},"content":"   * @return moduleCode","lastModifiedDate":"2022-10-03"},{"lineNumber":96,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":97,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":98,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"CS2100\", required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":99,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_MODULE_CODE)","lastModifiedDate":"2022-10-03"},{"lineNumber":100,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":101,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":102,"author":{"gitId":"shenyih0ng"},"content":"  public String getModuleCode() {","lastModifiedDate":"2022-10-03"},{"lineNumber":103,"author":{"gitId":"shenyih0ng"},"content":"    return moduleCode;","lastModifiedDate":"2022-10-03"},{"lineNumber":104,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":105,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":106,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":107,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_MODULE_CODE)","lastModifiedDate":"2022-10-03"},{"lineNumber":108,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":109,"author":{"gitId":"shenyih0ng"},"content":"  public void setModuleCode(String moduleCode) {","lastModifiedDate":"2022-10-03"},{"lineNumber":110,"author":{"gitId":"shenyih0ng"},"content":"    this.moduleCode \u003d moduleCode;","lastModifiedDate":"2022-10-03"},{"lineNumber":111,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":112,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":113,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":114,"author":{"gitId":"shenyih0ng"},"content":"  public ModuleInformation title(String title) {","lastModifiedDate":"2022-10-03"},{"lineNumber":115,"author":{"gitId":"shenyih0ng"},"content":"    this.title \u003d title;","lastModifiedDate":"2022-10-03"},{"lineNumber":116,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":117,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":118,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":119,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":120,"author":{"gitId":"shenyih0ng"},"content":"   * Get title","lastModifiedDate":"2022-10-03"},{"lineNumber":121,"author":{"gitId":"shenyih0ng"},"content":"   * @return title","lastModifiedDate":"2022-10-03"},{"lineNumber":122,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":123,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":124,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"Computer Organisation\", required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":125,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_TITLE)","lastModifiedDate":"2022-10-03"},{"lineNumber":126,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":127,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":128,"author":{"gitId":"shenyih0ng"},"content":"  public String getTitle() {","lastModifiedDate":"2022-10-03"},{"lineNumber":129,"author":{"gitId":"shenyih0ng"},"content":"    return title;","lastModifiedDate":"2022-10-03"},{"lineNumber":130,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":131,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":132,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":133,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_TITLE)","lastModifiedDate":"2022-10-03"},{"lineNumber":134,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":135,"author":{"gitId":"shenyih0ng"},"content":"  public void setTitle(String title) {","lastModifiedDate":"2022-10-03"},{"lineNumber":136,"author":{"gitId":"shenyih0ng"},"content":"    this.title \u003d title;","lastModifiedDate":"2022-10-03"},{"lineNumber":137,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":138,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":139,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":140,"author":{"gitId":"shenyih0ng"},"content":"  public ModuleInformation description(String description) {","lastModifiedDate":"2022-10-03"},{"lineNumber":141,"author":{"gitId":"shenyih0ng"},"content":"    this.description \u003d description;","lastModifiedDate":"2022-10-03"},{"lineNumber":142,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":143,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":144,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":145,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":146,"author":{"gitId":"shenyih0ng"},"content":"   * Get description","lastModifiedDate":"2022-10-03"},{"lineNumber":147,"author":{"gitId":"shenyih0ng"},"content":"   * @return description","lastModifiedDate":"2022-10-03"},{"lineNumber":148,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":149,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":150,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"The objective of this module is to familiarise students with the fundamentals of computing devices. Through this module students will understand the basics of data representation, and how the various parts of a computer work, separately and with each other. This allows students to understand the issues in computing devices, and how these issues affect the implementation of solutions. Topics covered include data representation systems, combinational and sequential circuit design techniques, assembly language, processor execution cycles, pipelining, memory hierarchy and input/output systems.\", required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":151,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_DESCRIPTION)","lastModifiedDate":"2022-10-03"},{"lineNumber":152,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":153,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":154,"author":{"gitId":"shenyih0ng"},"content":"  public String getDescription() {","lastModifiedDate":"2022-10-03"},{"lineNumber":155,"author":{"gitId":"shenyih0ng"},"content":"    return description;","lastModifiedDate":"2022-10-03"},{"lineNumber":156,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":157,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":158,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":159,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_DESCRIPTION)","lastModifiedDate":"2022-10-03"},{"lineNumber":160,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":161,"author":{"gitId":"shenyih0ng"},"content":"  public void setDescription(String description) {","lastModifiedDate":"2022-10-03"},{"lineNumber":162,"author":{"gitId":"shenyih0ng"},"content":"    this.description \u003d description;","lastModifiedDate":"2022-10-03"},{"lineNumber":163,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":164,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":165,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":166,"author":{"gitId":"shenyih0ng"},"content":"  public ModuleInformation moduleCredit(String moduleCredit) {","lastModifiedDate":"2022-10-03"},{"lineNumber":167,"author":{"gitId":"shenyih0ng"},"content":"    this.moduleCredit \u003d moduleCredit;","lastModifiedDate":"2022-10-03"},{"lineNumber":168,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":169,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":170,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":171,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":172,"author":{"gitId":"shenyih0ng"},"content":"   * Get moduleCredit","lastModifiedDate":"2022-10-03"},{"lineNumber":173,"author":{"gitId":"shenyih0ng"},"content":"   * @return moduleCredit","lastModifiedDate":"2022-10-03"},{"lineNumber":174,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":175,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":176,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"4\", required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":177,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_MODULE_CREDIT)","lastModifiedDate":"2022-10-03"},{"lineNumber":178,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":179,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":180,"author":{"gitId":"shenyih0ng"},"content":"  public String getModuleCredit() {","lastModifiedDate":"2022-10-03"},{"lineNumber":181,"author":{"gitId":"shenyih0ng"},"content":"    return moduleCredit;","lastModifiedDate":"2022-10-03"},{"lineNumber":182,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":183,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":184,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":185,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_MODULE_CREDIT)","lastModifiedDate":"2022-10-03"},{"lineNumber":186,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":187,"author":{"gitId":"shenyih0ng"},"content":"  public void setModuleCredit(String moduleCredit) {","lastModifiedDate":"2022-10-03"},{"lineNumber":188,"author":{"gitId":"shenyih0ng"},"content":"    this.moduleCredit \u003d moduleCredit;","lastModifiedDate":"2022-10-03"},{"lineNumber":189,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":190,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":191,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":192,"author":{"gitId":"shenyih0ng"},"content":"  public ModuleInformation department(String department) {","lastModifiedDate":"2022-10-03"},{"lineNumber":193,"author":{"gitId":"shenyih0ng"},"content":"    this.department \u003d department;","lastModifiedDate":"2022-10-03"},{"lineNumber":194,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":195,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":196,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":197,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":198,"author":{"gitId":"shenyih0ng"},"content":"   * Get department","lastModifiedDate":"2022-10-03"},{"lineNumber":199,"author":{"gitId":"shenyih0ng"},"content":"   * @return department","lastModifiedDate":"2022-10-03"},{"lineNumber":200,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":201,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":202,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"Computer Science\", required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":203,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_DEPARTMENT)","lastModifiedDate":"2022-10-03"},{"lineNumber":204,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":205,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":206,"author":{"gitId":"shenyih0ng"},"content":"  public String getDepartment() {","lastModifiedDate":"2022-10-03"},{"lineNumber":207,"author":{"gitId":"shenyih0ng"},"content":"    return department;","lastModifiedDate":"2022-10-03"},{"lineNumber":208,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":209,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":210,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":211,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_DEPARTMENT)","lastModifiedDate":"2022-10-03"},{"lineNumber":212,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":213,"author":{"gitId":"shenyih0ng"},"content":"  public void setDepartment(String department) {","lastModifiedDate":"2022-10-03"},{"lineNumber":214,"author":{"gitId":"shenyih0ng"},"content":"    this.department \u003d department;","lastModifiedDate":"2022-10-03"},{"lineNumber":215,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":216,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":217,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":218,"author":{"gitId":"shenyih0ng"},"content":"  public ModuleInformation faculty(String faculty) {","lastModifiedDate":"2022-10-03"},{"lineNumber":219,"author":{"gitId":"shenyih0ng"},"content":"    this.faculty \u003d faculty;","lastModifiedDate":"2022-10-03"},{"lineNumber":220,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":221,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":222,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":223,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":224,"author":{"gitId":"shenyih0ng"},"content":"   * Get faculty","lastModifiedDate":"2022-10-03"},{"lineNumber":225,"author":{"gitId":"shenyih0ng"},"content":"   * @return faculty","lastModifiedDate":"2022-10-03"},{"lineNumber":226,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":227,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":228,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"Computing\", required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":229,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_FACULTY)","lastModifiedDate":"2022-10-03"},{"lineNumber":230,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":231,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":232,"author":{"gitId":"shenyih0ng"},"content":"  public String getFaculty() {","lastModifiedDate":"2022-10-03"},{"lineNumber":233,"author":{"gitId":"shenyih0ng"},"content":"    return faculty;","lastModifiedDate":"2022-10-03"},{"lineNumber":234,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":235,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":236,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":237,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_FACULTY)","lastModifiedDate":"2022-10-03"},{"lineNumber":238,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":239,"author":{"gitId":"shenyih0ng"},"content":"  public void setFaculty(String faculty) {","lastModifiedDate":"2022-10-03"},{"lineNumber":240,"author":{"gitId":"shenyih0ng"},"content":"    this.faculty \u003d faculty;","lastModifiedDate":"2022-10-03"},{"lineNumber":241,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":242,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":243,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":244,"author":{"gitId":"shenyih0ng"},"content":"  public ModuleInformation workload(Workload workload) {","lastModifiedDate":"2022-10-03"},{"lineNumber":245,"author":{"gitId":"shenyih0ng"},"content":"    this.workload \u003d workload;","lastModifiedDate":"2022-10-03"},{"lineNumber":246,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":247,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":248,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":249,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":250,"author":{"gitId":"shenyih0ng"},"content":"   * Get workload","lastModifiedDate":"2022-10-03"},{"lineNumber":251,"author":{"gitId":"shenyih0ng"},"content":"   * @return workload","lastModifiedDate":"2022-10-03"},{"lineNumber":252,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":253,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":254,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":255,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_WORKLOAD)","lastModifiedDate":"2022-10-03"},{"lineNumber":256,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":257,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":258,"author":{"gitId":"shenyih0ng"},"content":"  public Workload getWorkload() {","lastModifiedDate":"2022-10-03"},{"lineNumber":259,"author":{"gitId":"shenyih0ng"},"content":"    return workload;","lastModifiedDate":"2022-10-03"},{"lineNumber":260,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":261,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":262,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":263,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_WORKLOAD)","lastModifiedDate":"2022-10-03"},{"lineNumber":264,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":265,"author":{"gitId":"shenyih0ng"},"content":"  public void setWorkload(Workload workload) {","lastModifiedDate":"2022-10-03"},{"lineNumber":266,"author":{"gitId":"shenyih0ng"},"content":"    this.workload \u003d workload;","lastModifiedDate":"2022-10-03"},{"lineNumber":267,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":268,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":269,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":270,"author":{"gitId":"shenyih0ng"},"content":"  public ModuleInformation prerequisite(String prerequisite) {","lastModifiedDate":"2022-10-03"},{"lineNumber":271,"author":{"gitId":"shenyih0ng"},"content":"    this.prerequisite \u003d prerequisite;","lastModifiedDate":"2022-10-03"},{"lineNumber":272,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":273,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":274,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":275,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":276,"author":{"gitId":"shenyih0ng"},"content":"   * Get prerequisite","lastModifiedDate":"2022-10-03"},{"lineNumber":277,"author":{"gitId":"shenyih0ng"},"content":"   * @return prerequisite","lastModifiedDate":"2022-10-03"},{"lineNumber":278,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":279,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nullable","lastModifiedDate":"2022-10-03"},{"lineNumber":280,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"CS1010 or its equivalent\", value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":281,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_PREREQUISITE)","lastModifiedDate":"2022-10-03"},{"lineNumber":282,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":283,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":284,"author":{"gitId":"shenyih0ng"},"content":"  public String getPrerequisite() {","lastModifiedDate":"2022-10-03"},{"lineNumber":285,"author":{"gitId":"shenyih0ng"},"content":"    return prerequisite;","lastModifiedDate":"2022-10-03"},{"lineNumber":286,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":287,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":288,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":289,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_PREREQUISITE)","lastModifiedDate":"2022-10-03"},{"lineNumber":290,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":291,"author":{"gitId":"shenyih0ng"},"content":"  public void setPrerequisite(String prerequisite) {","lastModifiedDate":"2022-10-03"},{"lineNumber":292,"author":{"gitId":"shenyih0ng"},"content":"    this.prerequisite \u003d prerequisite;","lastModifiedDate":"2022-10-03"},{"lineNumber":293,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":294,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":295,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":296,"author":{"gitId":"shenyih0ng"},"content":"  public ModuleInformation preclusion(String preclusion) {","lastModifiedDate":"2022-10-03"},{"lineNumber":297,"author":{"gitId":"shenyih0ng"},"content":"    this.preclusion \u003d preclusion;","lastModifiedDate":"2022-10-03"},{"lineNumber":298,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":299,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":300,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":301,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":302,"author":{"gitId":"shenyih0ng"},"content":"   * Get preclusion","lastModifiedDate":"2022-10-03"},{"lineNumber":303,"author":{"gitId":"shenyih0ng"},"content":"   * @return preclusion","lastModifiedDate":"2022-10-03"},{"lineNumber":304,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":305,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nullable","lastModifiedDate":"2022-10-03"},{"lineNumber":306,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"CS1104 or Students from department of ECE\", value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":307,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_PRECLUSION)","lastModifiedDate":"2022-10-03"},{"lineNumber":308,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":309,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":310,"author":{"gitId":"shenyih0ng"},"content":"  public String getPreclusion() {","lastModifiedDate":"2022-10-03"},{"lineNumber":311,"author":{"gitId":"shenyih0ng"},"content":"    return preclusion;","lastModifiedDate":"2022-10-03"},{"lineNumber":312,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":313,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":314,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":315,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_PRECLUSION)","lastModifiedDate":"2022-10-03"},{"lineNumber":316,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":317,"author":{"gitId":"shenyih0ng"},"content":"  public void setPreclusion(String preclusion) {","lastModifiedDate":"2022-10-03"},{"lineNumber":318,"author":{"gitId":"shenyih0ng"},"content":"    this.preclusion \u003d preclusion;","lastModifiedDate":"2022-10-03"},{"lineNumber":319,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":320,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":321,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":322,"author":{"gitId":"shenyih0ng"},"content":"  public ModuleInformation corequisite(String corequisite) {","lastModifiedDate":"2022-10-03"},{"lineNumber":323,"author":{"gitId":"shenyih0ng"},"content":"    this.corequisite \u003d corequisite;","lastModifiedDate":"2022-10-03"},{"lineNumber":324,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":325,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":326,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":327,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":328,"author":{"gitId":"shenyih0ng"},"content":"   * Get corequisite","lastModifiedDate":"2022-10-03"},{"lineNumber":329,"author":{"gitId":"shenyih0ng"},"content":"   * @return corequisite","lastModifiedDate":"2022-10-03"},{"lineNumber":330,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":331,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nullable","lastModifiedDate":"2022-10-03"},{"lineNumber":332,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"Students must take CS2101 in the same semester as this module\", value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":333,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_COREQUISITE)","lastModifiedDate":"2022-10-03"},{"lineNumber":334,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":335,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":336,"author":{"gitId":"shenyih0ng"},"content":"  public String getCorequisite() {","lastModifiedDate":"2022-10-03"},{"lineNumber":337,"author":{"gitId":"shenyih0ng"},"content":"    return corequisite;","lastModifiedDate":"2022-10-03"},{"lineNumber":338,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":339,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":340,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":341,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_COREQUISITE)","lastModifiedDate":"2022-10-03"},{"lineNumber":342,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":343,"author":{"gitId":"shenyih0ng"},"content":"  public void setCorequisite(String corequisite) {","lastModifiedDate":"2022-10-03"},{"lineNumber":344,"author":{"gitId":"shenyih0ng"},"content":"    this.corequisite \u003d corequisite;","lastModifiedDate":"2022-10-03"},{"lineNumber":345,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":346,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":347,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":348,"author":{"gitId":"shenyih0ng"},"content":"  public ModuleInformation semesterData(List\u003cModuleInformationSemesterDataInner\u003e semesterData) {","lastModifiedDate":"2022-10-03"},{"lineNumber":349,"author":{"gitId":"shenyih0ng"},"content":"    this.semesterData \u003d semesterData;","lastModifiedDate":"2022-10-03"},{"lineNumber":350,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":351,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":352,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":353,"author":{"gitId":"shenyih0ng"},"content":"  public ModuleInformation addSemesterDataItem(ModuleInformationSemesterDataInner semesterDataItem) {","lastModifiedDate":"2022-10-03"},{"lineNumber":354,"author":{"gitId":"shenyih0ng"},"content":"    this.semesterData.add(semesterDataItem);","lastModifiedDate":"2022-10-03"},{"lineNumber":355,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":356,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":357,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":358,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":359,"author":{"gitId":"shenyih0ng"},"content":"   * Get semesterData","lastModifiedDate":"2022-10-03"},{"lineNumber":360,"author":{"gitId":"shenyih0ng"},"content":"   * @return semesterData","lastModifiedDate":"2022-10-03"},{"lineNumber":361,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":362,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":363,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":364,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_SEMESTER_DATA)","lastModifiedDate":"2022-10-03"},{"lineNumber":365,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":366,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":367,"author":{"gitId":"shenyih0ng"},"content":"  public List\u003cModuleInformationSemesterDataInner\u003e getSemesterData() {","lastModifiedDate":"2022-10-03"},{"lineNumber":368,"author":{"gitId":"shenyih0ng"},"content":"    return semesterData;","lastModifiedDate":"2022-10-03"},{"lineNumber":369,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":370,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":371,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":372,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_SEMESTER_DATA)","lastModifiedDate":"2022-10-03"},{"lineNumber":373,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":374,"author":{"gitId":"shenyih0ng"},"content":"  public void setSemesterData(List\u003cModuleInformationSemesterDataInner\u003e semesterData) {","lastModifiedDate":"2022-10-03"},{"lineNumber":375,"author":{"gitId":"shenyih0ng"},"content":"    this.semesterData \u003d semesterData;","lastModifiedDate":"2022-10-03"},{"lineNumber":376,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":377,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":378,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":379,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":380,"author":{"gitId":"shenyih0ng"},"content":"   * Return true if this ModuleInformation object is equal to o.","lastModifiedDate":"2022-10-03"},{"lineNumber":381,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":382,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":383,"author":{"gitId":"shenyih0ng"},"content":"  public boolean equals(Object o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":384,"author":{"gitId":"shenyih0ng"},"content":"    if (this \u003d\u003d o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":385,"author":{"gitId":"shenyih0ng"},"content":"      return true;","lastModifiedDate":"2022-10-03"},{"lineNumber":386,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":387,"author":{"gitId":"shenyih0ng"},"content":"    if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {","lastModifiedDate":"2022-10-03"},{"lineNumber":388,"author":{"gitId":"shenyih0ng"},"content":"      return false;","lastModifiedDate":"2022-10-03"},{"lineNumber":389,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":390,"author":{"gitId":"shenyih0ng"},"content":"    ModuleInformation moduleInformation \u003d (ModuleInformation) o;","lastModifiedDate":"2022-10-03"},{"lineNumber":391,"author":{"gitId":"shenyih0ng"},"content":"    return Objects.equals(this.moduleCode, moduleInformation.moduleCode) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":392,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.title, moduleInformation.title) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":393,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.description, moduleInformation.description) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":394,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.moduleCredit, moduleInformation.moduleCredit) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":395,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.department, moduleInformation.department) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":396,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.faculty, moduleInformation.faculty) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":397,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.workload, moduleInformation.workload) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":398,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.prerequisite, moduleInformation.prerequisite) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":399,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.preclusion, moduleInformation.preclusion) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":400,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.corequisite, moduleInformation.corequisite) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":401,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.semesterData, moduleInformation.semesterData);","lastModifiedDate":"2022-10-03"},{"lineNumber":402,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":403,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":404,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":405,"author":{"gitId":"shenyih0ng"},"content":"  public int hashCode() {","lastModifiedDate":"2022-10-03"},{"lineNumber":406,"author":{"gitId":"shenyih0ng"},"content":"    return Objects.hash(moduleCode, title, description, moduleCredit, department, faculty, workload, prerequisite, preclusion, corequisite, semesterData);","lastModifiedDate":"2022-10-03"},{"lineNumber":407,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":408,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":409,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":410,"author":{"gitId":"shenyih0ng"},"content":"  public String toString() {","lastModifiedDate":"2022-10-03"},{"lineNumber":411,"author":{"gitId":"shenyih0ng"},"content":"    StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2022-10-03"},{"lineNumber":412,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"class ModuleInformation {\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":413,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    moduleCode: \").append(toIndentedString(moduleCode)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":414,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    title: \").append(toIndentedString(title)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":415,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    description: \").append(toIndentedString(description)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":416,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    moduleCredit: \").append(toIndentedString(moduleCredit)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":417,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    department: \").append(toIndentedString(department)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":418,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    faculty: \").append(toIndentedString(faculty)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":419,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    workload: \").append(toIndentedString(workload)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":420,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    prerequisite: \").append(toIndentedString(prerequisite)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":421,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    preclusion: \").append(toIndentedString(preclusion)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":422,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    corequisite: \").append(toIndentedString(corequisite)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":423,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    semesterData: \").append(toIndentedString(semesterData)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":424,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"}\");","lastModifiedDate":"2022-10-03"},{"lineNumber":425,"author":{"gitId":"shenyih0ng"},"content":"    return sb.toString();","lastModifiedDate":"2022-10-03"},{"lineNumber":426,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":427,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":428,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":429,"author":{"gitId":"shenyih0ng"},"content":"   * Convert the given object to string with each line indented by 4 spaces","lastModifiedDate":"2022-10-03"},{"lineNumber":430,"author":{"gitId":"shenyih0ng"},"content":"   * (except the first line).","lastModifiedDate":"2022-10-03"},{"lineNumber":431,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":432,"author":{"gitId":"shenyih0ng"},"content":"  private String toIndentedString(Object o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":433,"author":{"gitId":"shenyih0ng"},"content":"    if (o \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":434,"author":{"gitId":"shenyih0ng"},"content":"      return \"null\";","lastModifiedDate":"2022-10-03"},{"lineNumber":435,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":436,"author":{"gitId":"shenyih0ng"},"content":"    return o.toString().replace(\"\\n\", \"\\n    \");","lastModifiedDate":"2022-10-03"},{"lineNumber":437,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":438,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":439,"author":{"gitId":"shenyih0ng"},"content":"}","lastModifiedDate":"2022-10-03"},{"lineNumber":440,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"shenyih0ng":440}},{"path":"src/main/java/org/openapitools/client/model/ModuleInformationSemesterDataInner.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"shenyih0ng"},"content":"/*","lastModifiedDate":"2022-10-03"},{"lineNumber":2,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API contains data used to render \u003chttps://nusmods.com\u003e. It includes data on modules offered by NUS and their timetables, as well as information on the locations the classes take place in. You are welcome to use and experiment with the data, which is extracted from official APIs provided by the Registrar\u0027s Office.  The API consists of static JSON files scraped daily from the school\u0027s APIs. This means it only partially follow REST conventions, and all resources are read only. All successful responses will return JSON, and all endpoints end in `.json`.  The shape of the data returned by these endpoints are designed for NUSMods in mind. If you have any questions or find that you need the data in other shapes for other purposes, feel free to reach out to us:  - **Telegram**: \u003chttps://telegram.me/nusmods\u003e - **Mailing list**: \u003cnusmods@googlegroups.com\u003e (for security related issues please email \u003cmods@nusmods.com\u003e instead)  ## Fetching data  Any HTTP client can be used to fetch data from the API. HTTPS is preferred, but the server will also respond to HTTP requests. The server supports HTTP 1.1 as well as HTTP 2 over HTTPS, and supports gzip compression.  The API has no authentication, and is not rate limited. While the server can respond to a large number of requests simultaneously, we request that you be polite with resource usage so as not to disrupt nusmods.com, which relies on the same API server. In general there is no need to fetch data from the API more than once per day, as that is the frequency at which we update the data.  [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) headers are enabled on all endpoints, so client-side JavaScript can use also use the API.  ## TypeScript types  Since the NUSMods is written in TypeScript, typings are available in the source for the scraper. These may be easier to read than the documentation generated by Swagger.  - Module types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/modules.ts\u003e - Venue types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/venues.ts\u003e  ## Data  Below are some notes about the data returned from the API. Feel free to talk to us or create an issue if any of it is not clear.  ### Module data  Module endpoints return information on modules offered by NUS. Most of the module data is self-explanatory, but some of the data are more complex and is explained here.  #### Lessons  Each lesson in a timetable has a lesson type `lessonType` and class number `ClassNo`. Every student must take one of each lesson type offered by the module. For example, this module offers two tutorials and one lecture. That means the student must attend the lecture, and can choose one of the two tutorials to attend.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"01\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1100\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"COM1-0207\\\"     },     {       \\\"classNo\\\": \\\"02\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Friday\\\",       \\\"startTime\\\": \\\"0900\\\",       \\\"endTime\\\": \\\"1000\\\",       \\\"venue\\\": \\\"COM1-0209\\\"     }   ] } ```  Each lesson has a `classNo` key. There can be multiple lessons of the same type and class number, in which case students must attend both. In this example, students can choose to attend either lecture group 1 on Tuesdays and Wednesdays, or lecture group 2 on Mondays and Wednesdays.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1400\\\",       \\\"endTime\\\": \\\"1500\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Monday\\\",       \\\"startTime\\\": \\\"1000\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1500\\\",       \\\"endTime\\\": \\\"1600\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     }   ] } ```  #### Lesson Weeks  The `weeks` key on lessons can return data in one of two forms.  Weeks is usually a sorted array of numbers. In this case it represents the school weeks the lesson occurs on, from 1 to 13.  Some classes have lessons outside of the school timetable. In this case a `WeekRange` object is returned. The object will always contain a `start` and `end` key representing the start and end date of lessons. The example below has classes every week from 17th Jan to 18th April.  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-04-18\\\" } ```  Optionally it can also include `weekInterval`, a positive integer describing the number of weeks between each lesson, and `weeks`, an array of positive integers describing the weeks on which the lesson will fall, with week 1 being the starting date. If these are not present you can assume lessons will occur every week.  The following example has lessons on 17th Jan (week 1), 24th Jan (week 2), 7th Feb (week 4) and 21st Feb (week 6).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-21\\\",   \\\"weeks\\\": [1, 2, 4, 6] } ```  The following example has lessons on 17th Jan (week 1), 31st Jan (week 3), 14th Feb (week 5) and 28th Feb (week 7).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-28\\\",   \\\"weekInterval\\\": 2 } ```  #### Workload  The `workload` key can return data in one of two forms.  Workload is usually a **5-tuple of numbers**, describing the estimated number of hours per week the student is expected to put in for the module for **lectures, tutorials, laboratory, projects/fieldwork, and preparatory work** respectively. For example, a workload of `[2, 1, 1, 3, 3]` means the student should spend every week  - 2 hours in lectures - 1 hour in tutorials - 1 hour at the lab - 3 hours doing project work - 3 hours preparing for classes  Each module credit represents 2.5 hours of work each week, so the standard 4 MC module represents 10 hours of work each week. Module credit may not be integers.  Note that this is only an estimate, and may be outdated or differ significantly in reality. Some modules also incorrectly lists the **total** workload hours instead of weekly, so very large values may show up.  This value is parsed from a string provided by the school, and occasionally this field will contain unusual values which cannot be parsed. In this case this field will contain the original **string** instead, which should be displayed as-is to the user.  #### Prerequisite, corequisite and preclusions  These three keys determine whether a student can take a module.  **Prerequisites** are requirements you have to meet before you can take a module. These are usually in the form of other modules (see prerequisite tree below for a machine readable format), but can also be things like \u0027taken A-level H2 math\u0027 or \u002770 MCs and above\u0027.  **Preclusions** refer to modules or requirements that cannot be taken if this module is taken, and vice versa. These are usually modules whose content overlaps significantly with this module, and can usually be used to replace each other to fulfill prerequisites.  **Corequisites** are modules that must be taken together with this module in the same semester. This usually refer to twined modules - modules which have linked syllabuses.  #### Prerequisite Tree  The `prereqTree` key is return on the individual module endpoint (`/modules/{moduleCode`). Not all modules have prerequisites, and some have prerequisites that cannot be properly represented as a tree, in which case this key will not appear.  This describes the prerequisites that need to be fulfilled before this module can be taken. The data structure is recursive and represents a tree.  ```json {   \\\"and\\\": [     \\\"CS1231\\\",     {       \\\"or\\\": [\\\"CS1010S\\\", \\\"CS1010X\\\"]     }   ] } ```  In the example, this module requires CS1231 and either CS1010S or CS1010X. This can be visualized as  ```            ┌ CS1231 ── all of ─┤            │         ┌ CS1010            └ one of ─┤                      └ CS1010X ```  The module information also contains the inverse of this, that is, modules whose requirements are fulfilled by this module (taking this module will allow you to take these modules in the following semester). The data is found on the `fulfillRequirements` key as an array of module codes.  ### Venue data  Venue data is simply the module timetable restructured to show the lessons happening at each classroom.  The venue list endpoint returns a list of all locations that are used in the semester. Note that this is not a comprehensive list of locations, but rather just a list of venues that appears in module lessons.  The venue information endpoint returns the full class and occupancy information about a venue. The `classes` key contains a list of lessons similar to the `timetable` key in module data, but without a `venue` key and with `moduleCode`.","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"shenyih0ng"},"content":" * The version of the OpenAPI document: 2.0.0","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"shenyih0ng"},"content":" * Contact: nusmods@googlegroups.com","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"shenyih0ng"},"content":" * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"shenyih0ng"},"content":" * https://openapi-generator.tech","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"shenyih0ng"},"content":" * Do not edit the class manually.","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"shenyih0ng"},"content":"package org.openapitools.client.model;","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Objects;","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Map;","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"shenyih0ng"},"content":"import java.util.HashMap;","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonInclude;","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonTypeName;","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"shenyih0ng"},"content":"import io.swagger.annotations.ApiModel;","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"shenyih0ng"},"content":"import io.swagger.annotations.ApiModelProperty;","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"shenyih0ng"},"content":"import java.math.BigDecimal;","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"shenyih0ng"},"content":"import java.time.OffsetDateTime;","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonPropertyOrder;","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"shenyih0ng"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"shenyih0ng"},"content":" * ModuleInformationSemesterDataInner","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"shenyih0ng"},"content":"@JsonPropertyOrder({","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"shenyih0ng"},"content":"  ModuleInformationSemesterDataInner.JSON_PROPERTY_SEMESTER,","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"shenyih0ng"},"content":"  ModuleInformationSemesterDataInner.JSON_PROPERTY_EXAM_DATE,","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"shenyih0ng"},"content":"  ModuleInformationSemesterDataInner.JSON_PROPERTY_EXAM_DURATION","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"shenyih0ng"},"content":"})","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"shenyih0ng"},"content":"@javax.annotation.processing.Generated(value \u003d \"org.openapitools.codegen.languages.JavaClientCodegen\", date \u003d \"2022-10-03T22:22:26.802458+08:00[Asia/Singapore]\")","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"shenyih0ng"},"content":"public class ModuleInformationSemesterDataInner {","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_SEMESTER \u003d \"semester\";","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"shenyih0ng"},"content":"  private BigDecimal semester;","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_EXAM_DATE \u003d \"examDate\";","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"shenyih0ng"},"content":"  private OffsetDateTime examDate;","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_EXAM_DURATION \u003d \"examDuration\";","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"shenyih0ng"},"content":"  private BigDecimal examDuration;","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"shenyih0ng"},"content":"  public ModuleInformationSemesterDataInner() {","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"shenyih0ng"},"content":"  public ModuleInformationSemesterDataInner semester(BigDecimal semester) {","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"shenyih0ng"},"content":"    this.semester \u003d semester;","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":59,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":60,"author":{"gitId":"shenyih0ng"},"content":"   * Get semester","lastModifiedDate":"2022-10-03"},{"lineNumber":61,"author":{"gitId":"shenyih0ng"},"content":"   * @return semester","lastModifiedDate":"2022-10-03"},{"lineNumber":62,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":63,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nullable","lastModifiedDate":"2022-10-03"},{"lineNumber":64,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"1\", value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":65,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_SEMESTER)","lastModifiedDate":"2022-10-03"},{"lineNumber":66,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":67,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":68,"author":{"gitId":"shenyih0ng"},"content":"  public BigDecimal getSemester() {","lastModifiedDate":"2022-10-03"},{"lineNumber":69,"author":{"gitId":"shenyih0ng"},"content":"    return semester;","lastModifiedDate":"2022-10-03"},{"lineNumber":70,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":71,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":72,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":73,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_SEMESTER)","lastModifiedDate":"2022-10-03"},{"lineNumber":74,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":75,"author":{"gitId":"shenyih0ng"},"content":"  public void setSemester(BigDecimal semester) {","lastModifiedDate":"2022-10-03"},{"lineNumber":76,"author":{"gitId":"shenyih0ng"},"content":"    this.semester \u003d semester;","lastModifiedDate":"2022-10-03"},{"lineNumber":77,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":78,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":79,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":80,"author":{"gitId":"shenyih0ng"},"content":"  public ModuleInformationSemesterDataInner examDate(OffsetDateTime examDate) {","lastModifiedDate":"2022-10-03"},{"lineNumber":81,"author":{"gitId":"shenyih0ng"},"content":"    this.examDate \u003d examDate;","lastModifiedDate":"2022-10-03"},{"lineNumber":82,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":83,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":84,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":85,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":86,"author":{"gitId":"shenyih0ng"},"content":"   * Get examDate","lastModifiedDate":"2022-10-03"},{"lineNumber":87,"author":{"gitId":"shenyih0ng"},"content":"   * @return examDate","lastModifiedDate":"2022-10-03"},{"lineNumber":88,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":89,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nullable","lastModifiedDate":"2022-10-03"},{"lineNumber":90,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"2018-11-27T09:00Z\", value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":91,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_EXAM_DATE)","lastModifiedDate":"2022-10-03"},{"lineNumber":92,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":93,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":94,"author":{"gitId":"shenyih0ng"},"content":"  public OffsetDateTime getExamDate() {","lastModifiedDate":"2022-10-03"},{"lineNumber":95,"author":{"gitId":"shenyih0ng"},"content":"    return examDate;","lastModifiedDate":"2022-10-03"},{"lineNumber":96,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":97,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":98,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":99,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_EXAM_DATE)","lastModifiedDate":"2022-10-03"},{"lineNumber":100,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":101,"author":{"gitId":"shenyih0ng"},"content":"  public void setExamDate(OffsetDateTime examDate) {","lastModifiedDate":"2022-10-03"},{"lineNumber":102,"author":{"gitId":"shenyih0ng"},"content":"    this.examDate \u003d examDate;","lastModifiedDate":"2022-10-03"},{"lineNumber":103,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":104,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":105,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":106,"author":{"gitId":"shenyih0ng"},"content":"  public ModuleInformationSemesterDataInner examDuration(BigDecimal examDuration) {","lastModifiedDate":"2022-10-03"},{"lineNumber":107,"author":{"gitId":"shenyih0ng"},"content":"    this.examDuration \u003d examDuration;","lastModifiedDate":"2022-10-03"},{"lineNumber":108,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":109,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":110,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":111,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":112,"author":{"gitId":"shenyih0ng"},"content":"   * Duration of the exam in minutes","lastModifiedDate":"2022-10-03"},{"lineNumber":113,"author":{"gitId":"shenyih0ng"},"content":"   * @return examDuration","lastModifiedDate":"2022-10-03"},{"lineNumber":114,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":115,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nullable","lastModifiedDate":"2022-10-03"},{"lineNumber":116,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"120\", value \u003d \"Duration of the exam in minutes\")","lastModifiedDate":"2022-10-03"},{"lineNumber":117,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_EXAM_DURATION)","lastModifiedDate":"2022-10-03"},{"lineNumber":118,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":119,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":120,"author":{"gitId":"shenyih0ng"},"content":"  public BigDecimal getExamDuration() {","lastModifiedDate":"2022-10-03"},{"lineNumber":121,"author":{"gitId":"shenyih0ng"},"content":"    return examDuration;","lastModifiedDate":"2022-10-03"},{"lineNumber":122,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":123,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":124,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":125,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_EXAM_DURATION)","lastModifiedDate":"2022-10-03"},{"lineNumber":126,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":127,"author":{"gitId":"shenyih0ng"},"content":"  public void setExamDuration(BigDecimal examDuration) {","lastModifiedDate":"2022-10-03"},{"lineNumber":128,"author":{"gitId":"shenyih0ng"},"content":"    this.examDuration \u003d examDuration;","lastModifiedDate":"2022-10-03"},{"lineNumber":129,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":130,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":131,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":132,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":133,"author":{"gitId":"shenyih0ng"},"content":"   * Return true if this ModuleInformation_semesterData_inner object is equal to o.","lastModifiedDate":"2022-10-03"},{"lineNumber":134,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":135,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":136,"author":{"gitId":"shenyih0ng"},"content":"  public boolean equals(Object o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":137,"author":{"gitId":"shenyih0ng"},"content":"    if (this \u003d\u003d o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":138,"author":{"gitId":"shenyih0ng"},"content":"      return true;","lastModifiedDate":"2022-10-03"},{"lineNumber":139,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":140,"author":{"gitId":"shenyih0ng"},"content":"    if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {","lastModifiedDate":"2022-10-03"},{"lineNumber":141,"author":{"gitId":"shenyih0ng"},"content":"      return false;","lastModifiedDate":"2022-10-03"},{"lineNumber":142,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":143,"author":{"gitId":"shenyih0ng"},"content":"    ModuleInformationSemesterDataInner moduleInformationSemesterDataInner \u003d (ModuleInformationSemesterDataInner) o;","lastModifiedDate":"2022-10-03"},{"lineNumber":144,"author":{"gitId":"shenyih0ng"},"content":"    return Objects.equals(this.semester, moduleInformationSemesterDataInner.semester) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":145,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.examDate, moduleInformationSemesterDataInner.examDate) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":146,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.examDuration, moduleInformationSemesterDataInner.examDuration);","lastModifiedDate":"2022-10-03"},{"lineNumber":147,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":148,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":149,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":150,"author":{"gitId":"shenyih0ng"},"content":"  public int hashCode() {","lastModifiedDate":"2022-10-03"},{"lineNumber":151,"author":{"gitId":"shenyih0ng"},"content":"    return Objects.hash(semester, examDate, examDuration);","lastModifiedDate":"2022-10-03"},{"lineNumber":152,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":153,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":154,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":155,"author":{"gitId":"shenyih0ng"},"content":"  public String toString() {","lastModifiedDate":"2022-10-03"},{"lineNumber":156,"author":{"gitId":"shenyih0ng"},"content":"    StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2022-10-03"},{"lineNumber":157,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"class ModuleInformationSemesterDataInner {\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":158,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    semester: \").append(toIndentedString(semester)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":159,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    examDate: \").append(toIndentedString(examDate)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":160,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    examDuration: \").append(toIndentedString(examDuration)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":161,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"}\");","lastModifiedDate":"2022-10-03"},{"lineNumber":162,"author":{"gitId":"shenyih0ng"},"content":"    return sb.toString();","lastModifiedDate":"2022-10-03"},{"lineNumber":163,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":164,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":165,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":166,"author":{"gitId":"shenyih0ng"},"content":"   * Convert the given object to string with each line indented by 4 spaces","lastModifiedDate":"2022-10-03"},{"lineNumber":167,"author":{"gitId":"shenyih0ng"},"content":"   * (except the first line).","lastModifiedDate":"2022-10-03"},{"lineNumber":168,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":169,"author":{"gitId":"shenyih0ng"},"content":"  private String toIndentedString(Object o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":170,"author":{"gitId":"shenyih0ng"},"content":"    if (o \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":171,"author":{"gitId":"shenyih0ng"},"content":"      return \"null\";","lastModifiedDate":"2022-10-03"},{"lineNumber":172,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":173,"author":{"gitId":"shenyih0ng"},"content":"    return o.toString().replace(\"\\n\", \"\\n    \");","lastModifiedDate":"2022-10-03"},{"lineNumber":174,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":175,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":176,"author":{"gitId":"shenyih0ng"},"content":"}","lastModifiedDate":"2022-10-03"},{"lineNumber":177,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"shenyih0ng":177}},{"path":"src/main/java/org/openapitools/client/model/PrereqTree.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"shenyih0ng"},"content":"/*","lastModifiedDate":"2022-10-03"},{"lineNumber":2,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API contains data used to render \u003chttps://nusmods.com\u003e. It includes data on modules offered by NUS and their timetables, as well as information on the locations the classes take place in. You are welcome to use and experiment with the data, which is extracted from official APIs provided by the Registrar\u0027s Office.  The API consists of static JSON files scraped daily from the school\u0027s APIs. This means it only partially follow REST conventions, and all resources are read only. All successful responses will return JSON, and all endpoints end in `.json`.  The shape of the data returned by these endpoints are designed for NUSMods in mind. If you have any questions or find that you need the data in other shapes for other purposes, feel free to reach out to us:  - **Telegram**: \u003chttps://telegram.me/nusmods\u003e - **Mailing list**: \u003cnusmods@googlegroups.com\u003e (for security related issues please email \u003cmods@nusmods.com\u003e instead)  ## Fetching data  Any HTTP client can be used to fetch data from the API. HTTPS is preferred, but the server will also respond to HTTP requests. The server supports HTTP 1.1 as well as HTTP 2 over HTTPS, and supports gzip compression.  The API has no authentication, and is not rate limited. While the server can respond to a large number of requests simultaneously, we request that you be polite with resource usage so as not to disrupt nusmods.com, which relies on the same API server. In general there is no need to fetch data from the API more than once per day, as that is the frequency at which we update the data.  [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) headers are enabled on all endpoints, so client-side JavaScript can use also use the API.  ## TypeScript types  Since the NUSMods is written in TypeScript, typings are available in the source for the scraper. These may be easier to read than the documentation generated by Swagger.  - Module types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/modules.ts\u003e - Venue types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/venues.ts\u003e  ## Data  Below are some notes about the data returned from the API. Feel free to talk to us or create an issue if any of it is not clear.  ### Module data  Module endpoints return information on modules offered by NUS. Most of the module data is self-explanatory, but some of the data are more complex and is explained here.  #### Lessons  Each lesson in a timetable has a lesson type `lessonType` and class number `ClassNo`. Every student must take one of each lesson type offered by the module. For example, this module offers two tutorials and one lecture. That means the student must attend the lecture, and can choose one of the two tutorials to attend.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"01\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1100\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"COM1-0207\\\"     },     {       \\\"classNo\\\": \\\"02\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Friday\\\",       \\\"startTime\\\": \\\"0900\\\",       \\\"endTime\\\": \\\"1000\\\",       \\\"venue\\\": \\\"COM1-0209\\\"     }   ] } ```  Each lesson has a `classNo` key. There can be multiple lessons of the same type and class number, in which case students must attend both. In this example, students can choose to attend either lecture group 1 on Tuesdays and Wednesdays, or lecture group 2 on Mondays and Wednesdays.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1400\\\",       \\\"endTime\\\": \\\"1500\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Monday\\\",       \\\"startTime\\\": \\\"1000\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1500\\\",       \\\"endTime\\\": \\\"1600\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     }   ] } ```  #### Lesson Weeks  The `weeks` key on lessons can return data in one of two forms.  Weeks is usually a sorted array of numbers. In this case it represents the school weeks the lesson occurs on, from 1 to 13.  Some classes have lessons outside of the school timetable. In this case a `WeekRange` object is returned. The object will always contain a `start` and `end` key representing the start and end date of lessons. The example below has classes every week from 17th Jan to 18th April.  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-04-18\\\" } ```  Optionally it can also include `weekInterval`, a positive integer describing the number of weeks between each lesson, and `weeks`, an array of positive integers describing the weeks on which the lesson will fall, with week 1 being the starting date. If these are not present you can assume lessons will occur every week.  The following example has lessons on 17th Jan (week 1), 24th Jan (week 2), 7th Feb (week 4) and 21st Feb (week 6).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-21\\\",   \\\"weeks\\\": [1, 2, 4, 6] } ```  The following example has lessons on 17th Jan (week 1), 31st Jan (week 3), 14th Feb (week 5) and 28th Feb (week 7).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-28\\\",   \\\"weekInterval\\\": 2 } ```  #### Workload  The `workload` key can return data in one of two forms.  Workload is usually a **5-tuple of numbers**, describing the estimated number of hours per week the student is expected to put in for the module for **lectures, tutorials, laboratory, projects/fieldwork, and preparatory work** respectively. For example, a workload of `[2, 1, 1, 3, 3]` means the student should spend every week  - 2 hours in lectures - 1 hour in tutorials - 1 hour at the lab - 3 hours doing project work - 3 hours preparing for classes  Each module credit represents 2.5 hours of work each week, so the standard 4 MC module represents 10 hours of work each week. Module credit may not be integers.  Note that this is only an estimate, and may be outdated or differ significantly in reality. Some modules also incorrectly lists the **total** workload hours instead of weekly, so very large values may show up.  This value is parsed from a string provided by the school, and occasionally this field will contain unusual values which cannot be parsed. In this case this field will contain the original **string** instead, which should be displayed as-is to the user.  #### Prerequisite, corequisite and preclusions  These three keys determine whether a student can take a module.  **Prerequisites** are requirements you have to meet before you can take a module. These are usually in the form of other modules (see prerequisite tree below for a machine readable format), but can also be things like \u0027taken A-level H2 math\u0027 or \u002770 MCs and above\u0027.  **Preclusions** refer to modules or requirements that cannot be taken if this module is taken, and vice versa. These are usually modules whose content overlaps significantly with this module, and can usually be used to replace each other to fulfill prerequisites.  **Corequisites** are modules that must be taken together with this module in the same semester. This usually refer to twined modules - modules which have linked syllabuses.  #### Prerequisite Tree  The `prereqTree` key is return on the individual module endpoint (`/modules/{moduleCode`). Not all modules have prerequisites, and some have prerequisites that cannot be properly represented as a tree, in which case this key will not appear.  This describes the prerequisites that need to be fulfilled before this module can be taken. The data structure is recursive and represents a tree.  ```json {   \\\"and\\\": [     \\\"CS1231\\\",     {       \\\"or\\\": [\\\"CS1010S\\\", \\\"CS1010X\\\"]     }   ] } ```  In the example, this module requires CS1231 and either CS1010S or CS1010X. This can be visualized as  ```            ┌ CS1231 ── all of ─┤            │         ┌ CS1010            └ one of ─┤                      └ CS1010X ```  The module information also contains the inverse of this, that is, modules whose requirements are fulfilled by this module (taking this module will allow you to take these modules in the following semester). The data is found on the `fulfillRequirements` key as an array of module codes.  ### Venue data  Venue data is simply the module timetable restructured to show the lessons happening at each classroom.  The venue list endpoint returns a list of all locations that are used in the semester. Note that this is not a comprehensive list of locations, but rather just a list of venues that appears in module lessons.  The venue information endpoint returns the full class and occupancy information about a venue. The `classes` key contains a list of lessons similar to the `timetable` key in module data, but without a `venue` key and with `moduleCode`.","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"shenyih0ng"},"content":" * The version of the OpenAPI document: 2.0.0","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"shenyih0ng"},"content":" * Contact: nusmods@googlegroups.com","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"shenyih0ng"},"content":" * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"shenyih0ng"},"content":" * https://openapi-generator.tech","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"shenyih0ng"},"content":" * Do not edit the class manually.","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"shenyih0ng"},"content":"package org.openapitools.client.model;","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Objects;","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Map;","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"shenyih0ng"},"content":"import java.util.HashMap;","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonInclude;","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonTypeName;","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"shenyih0ng"},"content":"import io.swagger.annotations.ApiModel;","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"shenyih0ng"},"content":"import io.swagger.annotations.ApiModelProperty;","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"shenyih0ng"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"shenyih0ng"},"content":"import java.util.List;","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.client.model.PrereqTreeOneOf;","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.client.model.PrereqTreeOneOf1;","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonPropertyOrder;","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.core.type.TypeReference;","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"shenyih0ng"},"content":"import java.io.IOException;","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"shenyih0ng"},"content":"import java.util.logging.Level;","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"shenyih0ng"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"shenyih0ng"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Collections;","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"shenyih0ng"},"content":"import java.util.HashSet;","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.core.JsonGenerator;","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.core.JsonParser;","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.core.JsonToken;","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.databind.JsonMappingException;","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.databind.JsonNode;","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.databind.MapperFeature;","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.databind.SerializerProvider;","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.databind.annotation.JsonDeserialize;","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.databind.annotation.JsonSerialize;","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.databind.deser.std.StdDeserializer;","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.databind.ser.std.StdSerializer;","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.client.JSON;","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"shenyih0ng"},"content":"@javax.annotation.processing.Generated(value \u003d \"org.openapitools.codegen.languages.JavaClientCodegen\", date \u003d \"2022-10-03T22:22:26.802458+08:00[Asia/Singapore]\")","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"shenyih0ng"},"content":"@JsonDeserialize(using \u003d PrereqTree.PrereqTreeDeserializer.class)","lastModifiedDate":"2022-10-03"},{"lineNumber":59,"author":{"gitId":"shenyih0ng"},"content":"@JsonSerialize(using \u003d PrereqTree.PrereqTreeSerializer.class)","lastModifiedDate":"2022-10-03"},{"lineNumber":60,"author":{"gitId":"shenyih0ng"},"content":"public class PrereqTree extends AbstractOpenApiSchema {","lastModifiedDate":"2022-10-03"},{"lineNumber":61,"author":{"gitId":"shenyih0ng"},"content":"    private static final Logger log \u003d Logger.getLogger(PrereqTree.class.getName());","lastModifiedDate":"2022-10-03"},{"lineNumber":62,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":63,"author":{"gitId":"shenyih0ng"},"content":"    public static class PrereqTreeSerializer extends StdSerializer\u003cPrereqTree\u003e {","lastModifiedDate":"2022-10-03"},{"lineNumber":64,"author":{"gitId":"shenyih0ng"},"content":"        public PrereqTreeSerializer(Class\u003cPrereqTree\u003e t) {","lastModifiedDate":"2022-10-03"},{"lineNumber":65,"author":{"gitId":"shenyih0ng"},"content":"            super(t);","lastModifiedDate":"2022-10-03"},{"lineNumber":66,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":67,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":68,"author":{"gitId":"shenyih0ng"},"content":"        public PrereqTreeSerializer() {","lastModifiedDate":"2022-10-03"},{"lineNumber":69,"author":{"gitId":"shenyih0ng"},"content":"            this(null);","lastModifiedDate":"2022-10-03"},{"lineNumber":70,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":71,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":72,"author":{"gitId":"shenyih0ng"},"content":"        @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":73,"author":{"gitId":"shenyih0ng"},"content":"        public void serialize(PrereqTree value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {","lastModifiedDate":"2022-10-03"},{"lineNumber":74,"author":{"gitId":"shenyih0ng"},"content":"            jgen.writeObject(value.getActualInstance());","lastModifiedDate":"2022-10-03"},{"lineNumber":75,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":76,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":77,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":78,"author":{"gitId":"shenyih0ng"},"content":"    public static class PrereqTreeDeserializer extends StdDeserializer\u003cPrereqTree\u003e {","lastModifiedDate":"2022-10-03"},{"lineNumber":79,"author":{"gitId":"shenyih0ng"},"content":"        public PrereqTreeDeserializer() {","lastModifiedDate":"2022-10-03"},{"lineNumber":80,"author":{"gitId":"shenyih0ng"},"content":"            this(PrereqTree.class);","lastModifiedDate":"2022-10-03"},{"lineNumber":81,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":82,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":83,"author":{"gitId":"shenyih0ng"},"content":"        public PrereqTreeDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2022-10-03"},{"lineNumber":84,"author":{"gitId":"shenyih0ng"},"content":"            super(vc);","lastModifiedDate":"2022-10-03"},{"lineNumber":85,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":86,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":87,"author":{"gitId":"shenyih0ng"},"content":"        @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":88,"author":{"gitId":"shenyih0ng"},"content":"        public PrereqTree deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {","lastModifiedDate":"2022-10-03"},{"lineNumber":89,"author":{"gitId":"shenyih0ng"},"content":"            JsonNode tree \u003d jp.readValueAsTree();","lastModifiedDate":"2022-10-03"},{"lineNumber":90,"author":{"gitId":"shenyih0ng"},"content":"            Object deserialized \u003d null;","lastModifiedDate":"2022-10-03"},{"lineNumber":91,"author":{"gitId":"shenyih0ng"},"content":"            boolean typeCoercion \u003d ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);","lastModifiedDate":"2022-10-03"},{"lineNumber":92,"author":{"gitId":"shenyih0ng"},"content":"            int match \u003d 0;","lastModifiedDate":"2022-10-03"},{"lineNumber":93,"author":{"gitId":"shenyih0ng"},"content":"            JsonToken token \u003d tree.traverse(jp.getCodec()).nextToken();","lastModifiedDate":"2022-10-03"},{"lineNumber":94,"author":{"gitId":"shenyih0ng"},"content":"            // deserialize PrereqTreeOneOf","lastModifiedDate":"2022-10-03"},{"lineNumber":95,"author":{"gitId":"shenyih0ng"},"content":"            try {","lastModifiedDate":"2022-10-03"},{"lineNumber":96,"author":{"gitId":"shenyih0ng"},"content":"                boolean attemptParsing \u003d true;","lastModifiedDate":"2022-10-03"},{"lineNumber":97,"author":{"gitId":"shenyih0ng"},"content":"                // ensure that we respect type coercion as set on the client ObjectMapper","lastModifiedDate":"2022-10-03"},{"lineNumber":98,"author":{"gitId":"shenyih0ng"},"content":"                if (PrereqTreeOneOf.class.equals(Integer.class) || PrereqTreeOneOf.class.equals(Long.class) || PrereqTreeOneOf.class.equals(Float.class) || PrereqTreeOneOf.class.equals(Double.class) || PrereqTreeOneOf.class.equals(Boolean.class) || PrereqTreeOneOf.class.equals(String.class)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":99,"author":{"gitId":"shenyih0ng"},"content":"                    attemptParsing \u003d typeCoercion;","lastModifiedDate":"2022-10-03"},{"lineNumber":100,"author":{"gitId":"shenyih0ng"},"content":"                    if (!attemptParsing) {","lastModifiedDate":"2022-10-03"},{"lineNumber":101,"author":{"gitId":"shenyih0ng"},"content":"                        attemptParsing |\u003d ((PrereqTreeOneOf.class.equals(Integer.class) || PrereqTreeOneOf.class.equals(Long.class)) \u0026\u0026 token \u003d\u003d JsonToken.VALUE_NUMBER_INT);","lastModifiedDate":"2022-10-03"},{"lineNumber":102,"author":{"gitId":"shenyih0ng"},"content":"                        attemptParsing |\u003d ((PrereqTreeOneOf.class.equals(Float.class) || PrereqTreeOneOf.class.equals(Double.class)) \u0026\u0026 token \u003d\u003d JsonToken.VALUE_NUMBER_FLOAT);","lastModifiedDate":"2022-10-03"},{"lineNumber":103,"author":{"gitId":"shenyih0ng"},"content":"                        attemptParsing |\u003d (PrereqTreeOneOf.class.equals(Boolean.class) \u0026\u0026 (token \u003d\u003d JsonToken.VALUE_FALSE || token \u003d\u003d JsonToken.VALUE_TRUE));","lastModifiedDate":"2022-10-03"},{"lineNumber":104,"author":{"gitId":"shenyih0ng"},"content":"                        attemptParsing |\u003d (PrereqTreeOneOf.class.equals(String.class) \u0026\u0026 token \u003d\u003d JsonToken.VALUE_STRING);","lastModifiedDate":"2022-10-03"},{"lineNumber":105,"author":{"gitId":"shenyih0ng"},"content":"                    }","lastModifiedDate":"2022-10-03"},{"lineNumber":106,"author":{"gitId":"shenyih0ng"},"content":"                }","lastModifiedDate":"2022-10-03"},{"lineNumber":107,"author":{"gitId":"shenyih0ng"},"content":"                if (attemptParsing) {","lastModifiedDate":"2022-10-03"},{"lineNumber":108,"author":{"gitId":"shenyih0ng"},"content":"                    deserialized \u003d tree.traverse(jp.getCodec()).readValueAs(PrereqTreeOneOf.class);","lastModifiedDate":"2022-10-03"},{"lineNumber":109,"author":{"gitId":"shenyih0ng"},"content":"                    // TODO: there is no validation against JSON schema constraints","lastModifiedDate":"2022-10-03"},{"lineNumber":110,"author":{"gitId":"shenyih0ng"},"content":"                    // (min, max, enum, pattern...), this does not perform a strict JSON","lastModifiedDate":"2022-10-03"},{"lineNumber":111,"author":{"gitId":"shenyih0ng"},"content":"                    // validation, which means the \u0027match\u0027 count may be higher than it should be.","lastModifiedDate":"2022-10-03"},{"lineNumber":112,"author":{"gitId":"shenyih0ng"},"content":"                    match++;","lastModifiedDate":"2022-10-03"},{"lineNumber":113,"author":{"gitId":"shenyih0ng"},"content":"                    log.log(Level.FINER, \"Input data matches schema \u0027PrereqTreeOneOf\u0027\");","lastModifiedDate":"2022-10-03"},{"lineNumber":114,"author":{"gitId":"shenyih0ng"},"content":"                }","lastModifiedDate":"2022-10-03"},{"lineNumber":115,"author":{"gitId":"shenyih0ng"},"content":"            } catch (Exception e) {","lastModifiedDate":"2022-10-03"},{"lineNumber":116,"author":{"gitId":"shenyih0ng"},"content":"                // deserialization failed, continue","lastModifiedDate":"2022-10-03"},{"lineNumber":117,"author":{"gitId":"shenyih0ng"},"content":"                log.log(Level.FINER, \"Input data does not match schema \u0027PrereqTreeOneOf\u0027\", e);","lastModifiedDate":"2022-10-03"},{"lineNumber":118,"author":{"gitId":"shenyih0ng"},"content":"            }","lastModifiedDate":"2022-10-03"},{"lineNumber":119,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":120,"author":{"gitId":"shenyih0ng"},"content":"            // deserialize PrereqTreeOneOf1","lastModifiedDate":"2022-10-03"},{"lineNumber":121,"author":{"gitId":"shenyih0ng"},"content":"            try {","lastModifiedDate":"2022-10-03"},{"lineNumber":122,"author":{"gitId":"shenyih0ng"},"content":"                boolean attemptParsing \u003d true;","lastModifiedDate":"2022-10-03"},{"lineNumber":123,"author":{"gitId":"shenyih0ng"},"content":"                // ensure that we respect type coercion as set on the client ObjectMapper","lastModifiedDate":"2022-10-03"},{"lineNumber":124,"author":{"gitId":"shenyih0ng"},"content":"                if (PrereqTreeOneOf1.class.equals(Integer.class) || PrereqTreeOneOf1.class.equals(Long.class) || PrereqTreeOneOf1.class.equals(Float.class) || PrereqTreeOneOf1.class.equals(Double.class) || PrereqTreeOneOf1.class.equals(Boolean.class) || PrereqTreeOneOf1.class.equals(String.class)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":125,"author":{"gitId":"shenyih0ng"},"content":"                    attemptParsing \u003d typeCoercion;","lastModifiedDate":"2022-10-03"},{"lineNumber":126,"author":{"gitId":"shenyih0ng"},"content":"                    if (!attemptParsing) {","lastModifiedDate":"2022-10-03"},{"lineNumber":127,"author":{"gitId":"shenyih0ng"},"content":"                        attemptParsing |\u003d ((PrereqTreeOneOf1.class.equals(Integer.class) || PrereqTreeOneOf1.class.equals(Long.class)) \u0026\u0026 token \u003d\u003d JsonToken.VALUE_NUMBER_INT);","lastModifiedDate":"2022-10-03"},{"lineNumber":128,"author":{"gitId":"shenyih0ng"},"content":"                        attemptParsing |\u003d ((PrereqTreeOneOf1.class.equals(Float.class) || PrereqTreeOneOf1.class.equals(Double.class)) \u0026\u0026 token \u003d\u003d JsonToken.VALUE_NUMBER_FLOAT);","lastModifiedDate":"2022-10-03"},{"lineNumber":129,"author":{"gitId":"shenyih0ng"},"content":"                        attemptParsing |\u003d (PrereqTreeOneOf1.class.equals(Boolean.class) \u0026\u0026 (token \u003d\u003d JsonToken.VALUE_FALSE || token \u003d\u003d JsonToken.VALUE_TRUE));","lastModifiedDate":"2022-10-03"},{"lineNumber":130,"author":{"gitId":"shenyih0ng"},"content":"                        attemptParsing |\u003d (PrereqTreeOneOf1.class.equals(String.class) \u0026\u0026 token \u003d\u003d JsonToken.VALUE_STRING);","lastModifiedDate":"2022-10-03"},{"lineNumber":131,"author":{"gitId":"shenyih0ng"},"content":"                    }","lastModifiedDate":"2022-10-03"},{"lineNumber":132,"author":{"gitId":"shenyih0ng"},"content":"                }","lastModifiedDate":"2022-10-03"},{"lineNumber":133,"author":{"gitId":"shenyih0ng"},"content":"                if (attemptParsing) {","lastModifiedDate":"2022-10-03"},{"lineNumber":134,"author":{"gitId":"shenyih0ng"},"content":"                    deserialized \u003d tree.traverse(jp.getCodec()).readValueAs(PrereqTreeOneOf1.class);","lastModifiedDate":"2022-10-03"},{"lineNumber":135,"author":{"gitId":"shenyih0ng"},"content":"                    // TODO: there is no validation against JSON schema constraints","lastModifiedDate":"2022-10-03"},{"lineNumber":136,"author":{"gitId":"shenyih0ng"},"content":"                    // (min, max, enum, pattern...), this does not perform a strict JSON","lastModifiedDate":"2022-10-03"},{"lineNumber":137,"author":{"gitId":"shenyih0ng"},"content":"                    // validation, which means the \u0027match\u0027 count may be higher than it should be.","lastModifiedDate":"2022-10-03"},{"lineNumber":138,"author":{"gitId":"shenyih0ng"},"content":"                    match++;","lastModifiedDate":"2022-10-03"},{"lineNumber":139,"author":{"gitId":"shenyih0ng"},"content":"                    log.log(Level.FINER, \"Input data matches schema \u0027PrereqTreeOneOf1\u0027\");","lastModifiedDate":"2022-10-03"},{"lineNumber":140,"author":{"gitId":"shenyih0ng"},"content":"                }","lastModifiedDate":"2022-10-03"},{"lineNumber":141,"author":{"gitId":"shenyih0ng"},"content":"            } catch (Exception e) {","lastModifiedDate":"2022-10-03"},{"lineNumber":142,"author":{"gitId":"shenyih0ng"},"content":"                // deserialization failed, continue","lastModifiedDate":"2022-10-03"},{"lineNumber":143,"author":{"gitId":"shenyih0ng"},"content":"                log.log(Level.FINER, \"Input data does not match schema \u0027PrereqTreeOneOf1\u0027\", e);","lastModifiedDate":"2022-10-03"},{"lineNumber":144,"author":{"gitId":"shenyih0ng"},"content":"            }","lastModifiedDate":"2022-10-03"},{"lineNumber":145,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":146,"author":{"gitId":"shenyih0ng"},"content":"            // deserialize String","lastModifiedDate":"2022-10-03"},{"lineNumber":147,"author":{"gitId":"shenyih0ng"},"content":"            try {","lastModifiedDate":"2022-10-03"},{"lineNumber":148,"author":{"gitId":"shenyih0ng"},"content":"                boolean attemptParsing \u003d true;","lastModifiedDate":"2022-10-03"},{"lineNumber":149,"author":{"gitId":"shenyih0ng"},"content":"                // ensure that we respect type coercion as set on the client ObjectMapper","lastModifiedDate":"2022-10-03"},{"lineNumber":150,"author":{"gitId":"shenyih0ng"},"content":"                if (String.class.equals(Integer.class) || String.class.equals(Long.class) || String.class.equals(Float.class) || String.class.equals(Double.class) || String.class.equals(Boolean.class) || String.class.equals(String.class)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":151,"author":{"gitId":"shenyih0ng"},"content":"                    attemptParsing \u003d typeCoercion;","lastModifiedDate":"2022-10-03"},{"lineNumber":152,"author":{"gitId":"shenyih0ng"},"content":"                    if (!attemptParsing) {","lastModifiedDate":"2022-10-03"},{"lineNumber":153,"author":{"gitId":"shenyih0ng"},"content":"                        attemptParsing |\u003d ((String.class.equals(Integer.class) || String.class.equals(Long.class)) \u0026\u0026 token \u003d\u003d JsonToken.VALUE_NUMBER_INT);","lastModifiedDate":"2022-10-03"},{"lineNumber":154,"author":{"gitId":"shenyih0ng"},"content":"                        attemptParsing |\u003d ((String.class.equals(Float.class) || String.class.equals(Double.class)) \u0026\u0026 token \u003d\u003d JsonToken.VALUE_NUMBER_FLOAT);","lastModifiedDate":"2022-10-03"},{"lineNumber":155,"author":{"gitId":"shenyih0ng"},"content":"                        attemptParsing |\u003d (String.class.equals(Boolean.class) \u0026\u0026 (token \u003d\u003d JsonToken.VALUE_FALSE || token \u003d\u003d JsonToken.VALUE_TRUE));","lastModifiedDate":"2022-10-03"},{"lineNumber":156,"author":{"gitId":"shenyih0ng"},"content":"                        attemptParsing |\u003d (String.class.equals(String.class) \u0026\u0026 token \u003d\u003d JsonToken.VALUE_STRING);","lastModifiedDate":"2022-10-03"},{"lineNumber":157,"author":{"gitId":"shenyih0ng"},"content":"                    }","lastModifiedDate":"2022-10-03"},{"lineNumber":158,"author":{"gitId":"shenyih0ng"},"content":"                }","lastModifiedDate":"2022-10-03"},{"lineNumber":159,"author":{"gitId":"shenyih0ng"},"content":"                if (attemptParsing) {","lastModifiedDate":"2022-10-03"},{"lineNumber":160,"author":{"gitId":"shenyih0ng"},"content":"                    deserialized \u003d tree.traverse(jp.getCodec()).readValueAs(String.class);","lastModifiedDate":"2022-10-03"},{"lineNumber":161,"author":{"gitId":"shenyih0ng"},"content":"                    // TODO: there is no validation against JSON schema constraints","lastModifiedDate":"2022-10-03"},{"lineNumber":162,"author":{"gitId":"shenyih0ng"},"content":"                    // (min, max, enum, pattern...), this does not perform a strict JSON","lastModifiedDate":"2022-10-03"},{"lineNumber":163,"author":{"gitId":"shenyih0ng"},"content":"                    // validation, which means the \u0027match\u0027 count may be higher than it should be.","lastModifiedDate":"2022-10-03"},{"lineNumber":164,"author":{"gitId":"shenyih0ng"},"content":"                    match++;","lastModifiedDate":"2022-10-03"},{"lineNumber":165,"author":{"gitId":"shenyih0ng"},"content":"                    log.log(Level.FINER, \"Input data matches schema \u0027String\u0027\");","lastModifiedDate":"2022-10-03"},{"lineNumber":166,"author":{"gitId":"shenyih0ng"},"content":"                }","lastModifiedDate":"2022-10-03"},{"lineNumber":167,"author":{"gitId":"shenyih0ng"},"content":"            } catch (Exception e) {","lastModifiedDate":"2022-10-03"},{"lineNumber":168,"author":{"gitId":"shenyih0ng"},"content":"                // deserialization failed, continue","lastModifiedDate":"2022-10-03"},{"lineNumber":169,"author":{"gitId":"shenyih0ng"},"content":"                log.log(Level.FINER, \"Input data does not match schema \u0027String\u0027\", e);","lastModifiedDate":"2022-10-03"},{"lineNumber":170,"author":{"gitId":"shenyih0ng"},"content":"            }","lastModifiedDate":"2022-10-03"},{"lineNumber":171,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":172,"author":{"gitId":"shenyih0ng"},"content":"            if (match \u003d\u003d 1) {","lastModifiedDate":"2022-10-03"},{"lineNumber":173,"author":{"gitId":"shenyih0ng"},"content":"                PrereqTree ret \u003d new PrereqTree();","lastModifiedDate":"2022-10-03"},{"lineNumber":174,"author":{"gitId":"shenyih0ng"},"content":"                ret.setActualInstance(deserialized);","lastModifiedDate":"2022-10-03"},{"lineNumber":175,"author":{"gitId":"shenyih0ng"},"content":"                return ret;","lastModifiedDate":"2022-10-03"},{"lineNumber":176,"author":{"gitId":"shenyih0ng"},"content":"            }","lastModifiedDate":"2022-10-03"},{"lineNumber":177,"author":{"gitId":"shenyih0ng"},"content":"            throw new IOException(String.format(\"Failed deserialization for PrereqTree: %d classes match result, expected 1\", match));","lastModifiedDate":"2022-10-03"},{"lineNumber":178,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":179,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":180,"author":{"gitId":"shenyih0ng"},"content":"        /**","lastModifiedDate":"2022-10-03"},{"lineNumber":181,"author":{"gitId":"shenyih0ng"},"content":"         * Handle deserialization of the \u0027null\u0027 value.","lastModifiedDate":"2022-10-03"},{"lineNumber":182,"author":{"gitId":"shenyih0ng"},"content":"         */","lastModifiedDate":"2022-10-03"},{"lineNumber":183,"author":{"gitId":"shenyih0ng"},"content":"        @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":184,"author":{"gitId":"shenyih0ng"},"content":"        public PrereqTree getNullValue(DeserializationContext ctxt) throws JsonMappingException {","lastModifiedDate":"2022-10-03"},{"lineNumber":185,"author":{"gitId":"shenyih0ng"},"content":"            throw new JsonMappingException(ctxt.getParser(), \"PrereqTree cannot be null\");","lastModifiedDate":"2022-10-03"},{"lineNumber":186,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":187,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":188,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":189,"author":{"gitId":"shenyih0ng"},"content":"    // store a list of schema names defined in oneOf","lastModifiedDate":"2022-10-03"},{"lineNumber":190,"author":{"gitId":"shenyih0ng"},"content":"    public static final Map\u003cString, Class\u003c?\u003e\u003e schemas \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2022-10-03"},{"lineNumber":191,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":192,"author":{"gitId":"shenyih0ng"},"content":"    public PrereqTree() {","lastModifiedDate":"2022-10-03"},{"lineNumber":193,"author":{"gitId":"shenyih0ng"},"content":"        super(\"oneOf\", Boolean.FALSE);","lastModifiedDate":"2022-10-03"},{"lineNumber":194,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":195,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":196,"author":{"gitId":"shenyih0ng"},"content":"    public PrereqTree(PrereqTreeOneOf o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":197,"author":{"gitId":"shenyih0ng"},"content":"        super(\"oneOf\", Boolean.FALSE);","lastModifiedDate":"2022-10-03"},{"lineNumber":198,"author":{"gitId":"shenyih0ng"},"content":"        setActualInstance(o);","lastModifiedDate":"2022-10-03"},{"lineNumber":199,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":200,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":201,"author":{"gitId":"shenyih0ng"},"content":"    public PrereqTree(PrereqTreeOneOf1 o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":202,"author":{"gitId":"shenyih0ng"},"content":"        super(\"oneOf\", Boolean.FALSE);","lastModifiedDate":"2022-10-03"},{"lineNumber":203,"author":{"gitId":"shenyih0ng"},"content":"        setActualInstance(o);","lastModifiedDate":"2022-10-03"},{"lineNumber":204,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":205,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":206,"author":{"gitId":"shenyih0ng"},"content":"    public PrereqTree(String o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":207,"author":{"gitId":"shenyih0ng"},"content":"        super(\"oneOf\", Boolean.FALSE);","lastModifiedDate":"2022-10-03"},{"lineNumber":208,"author":{"gitId":"shenyih0ng"},"content":"        setActualInstance(o);","lastModifiedDate":"2022-10-03"},{"lineNumber":209,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":210,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":211,"author":{"gitId":"shenyih0ng"},"content":"    static {","lastModifiedDate":"2022-10-03"},{"lineNumber":212,"author":{"gitId":"shenyih0ng"},"content":"        schemas.put(\"PrereqTreeOneOf\", PrereqTreeOneOf.class);","lastModifiedDate":"2022-10-03"},{"lineNumber":213,"author":{"gitId":"shenyih0ng"},"content":"        schemas.put(\"PrereqTreeOneOf1\", PrereqTreeOneOf1.class);","lastModifiedDate":"2022-10-03"},{"lineNumber":214,"author":{"gitId":"shenyih0ng"},"content":"        schemas.put(\"String\", String.class);","lastModifiedDate":"2022-10-03"},{"lineNumber":215,"author":{"gitId":"shenyih0ng"},"content":"        JSON.registerDescendants(PrereqTree.class, Collections.unmodifiableMap(schemas));","lastModifiedDate":"2022-10-03"},{"lineNumber":216,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":217,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":218,"author":{"gitId":"shenyih0ng"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":219,"author":{"gitId":"shenyih0ng"},"content":"    public Map\u003cString, Class\u003c?\u003e\u003e getSchemas() {","lastModifiedDate":"2022-10-03"},{"lineNumber":220,"author":{"gitId":"shenyih0ng"},"content":"        return PrereqTree.schemas;","lastModifiedDate":"2022-10-03"},{"lineNumber":221,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":222,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":223,"author":{"gitId":"shenyih0ng"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":224,"author":{"gitId":"shenyih0ng"},"content":"     * Set the instance that matches the oneOf child schema, check","lastModifiedDate":"2022-10-03"},{"lineNumber":225,"author":{"gitId":"shenyih0ng"},"content":"     * the instance parameter is valid against the oneOf child schemas:","lastModifiedDate":"2022-10-03"},{"lineNumber":226,"author":{"gitId":"shenyih0ng"},"content":"     * PrereqTreeOneOf, PrereqTreeOneOf1, String","lastModifiedDate":"2022-10-03"},{"lineNumber":227,"author":{"gitId":"shenyih0ng"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":228,"author":{"gitId":"shenyih0ng"},"content":"     * It could be an instance of the \u0027oneOf\u0027 schemas.","lastModifiedDate":"2022-10-03"},{"lineNumber":229,"author":{"gitId":"shenyih0ng"},"content":"     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).","lastModifiedDate":"2022-10-03"},{"lineNumber":230,"author":{"gitId":"shenyih0ng"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":231,"author":{"gitId":"shenyih0ng"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":232,"author":{"gitId":"shenyih0ng"},"content":"    public void setActualInstance(Object instance) {","lastModifiedDate":"2022-10-03"},{"lineNumber":233,"author":{"gitId":"shenyih0ng"},"content":"        if (JSON.isInstanceOf(PrereqTreeOneOf.class, instance, new HashSet\u003cClass\u003c?\u003e\u003e())) {","lastModifiedDate":"2022-10-03"},{"lineNumber":234,"author":{"gitId":"shenyih0ng"},"content":"            super.setActualInstance(instance);","lastModifiedDate":"2022-10-03"},{"lineNumber":235,"author":{"gitId":"shenyih0ng"},"content":"            return;","lastModifiedDate":"2022-10-03"},{"lineNumber":236,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":237,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":238,"author":{"gitId":"shenyih0ng"},"content":"        if (JSON.isInstanceOf(PrereqTreeOneOf1.class, instance, new HashSet\u003cClass\u003c?\u003e\u003e())) {","lastModifiedDate":"2022-10-03"},{"lineNumber":239,"author":{"gitId":"shenyih0ng"},"content":"            super.setActualInstance(instance);","lastModifiedDate":"2022-10-03"},{"lineNumber":240,"author":{"gitId":"shenyih0ng"},"content":"            return;","lastModifiedDate":"2022-10-03"},{"lineNumber":241,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":242,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":243,"author":{"gitId":"shenyih0ng"},"content":"        if (JSON.isInstanceOf(String.class, instance, new HashSet\u003cClass\u003c?\u003e\u003e())) {","lastModifiedDate":"2022-10-03"},{"lineNumber":244,"author":{"gitId":"shenyih0ng"},"content":"            super.setActualInstance(instance);","lastModifiedDate":"2022-10-03"},{"lineNumber":245,"author":{"gitId":"shenyih0ng"},"content":"            return;","lastModifiedDate":"2022-10-03"},{"lineNumber":246,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":247,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":248,"author":{"gitId":"shenyih0ng"},"content":"        throw new RuntimeException(\"Invalid instance type. Must be PrereqTreeOneOf, PrereqTreeOneOf1, String\");","lastModifiedDate":"2022-10-03"},{"lineNumber":249,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":250,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":251,"author":{"gitId":"shenyih0ng"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":252,"author":{"gitId":"shenyih0ng"},"content":"     * Get the actual instance, which can be the following:","lastModifiedDate":"2022-10-03"},{"lineNumber":253,"author":{"gitId":"shenyih0ng"},"content":"     * PrereqTreeOneOf, PrereqTreeOneOf1, String","lastModifiedDate":"2022-10-03"},{"lineNumber":254,"author":{"gitId":"shenyih0ng"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":255,"author":{"gitId":"shenyih0ng"},"content":"     * @return The actual instance (PrereqTreeOneOf, PrereqTreeOneOf1, String)","lastModifiedDate":"2022-10-03"},{"lineNumber":256,"author":{"gitId":"shenyih0ng"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":257,"author":{"gitId":"shenyih0ng"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":258,"author":{"gitId":"shenyih0ng"},"content":"    public Object getActualInstance() {","lastModifiedDate":"2022-10-03"},{"lineNumber":259,"author":{"gitId":"shenyih0ng"},"content":"        return super.getActualInstance();","lastModifiedDate":"2022-10-03"},{"lineNumber":260,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":261,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":262,"author":{"gitId":"shenyih0ng"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":263,"author":{"gitId":"shenyih0ng"},"content":"     * Get the actual instance of `PrereqTreeOneOf`. If the actual instance is not `PrereqTreeOneOf`,","lastModifiedDate":"2022-10-03"},{"lineNumber":264,"author":{"gitId":"shenyih0ng"},"content":"     * the ClassCastException will be thrown.","lastModifiedDate":"2022-10-03"},{"lineNumber":265,"author":{"gitId":"shenyih0ng"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":266,"author":{"gitId":"shenyih0ng"},"content":"     * @return The actual instance of `PrereqTreeOneOf`","lastModifiedDate":"2022-10-03"},{"lineNumber":267,"author":{"gitId":"shenyih0ng"},"content":"     * @throws ClassCastException if the instance is not `PrereqTreeOneOf`","lastModifiedDate":"2022-10-03"},{"lineNumber":268,"author":{"gitId":"shenyih0ng"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":269,"author":{"gitId":"shenyih0ng"},"content":"    public PrereqTreeOneOf getPrereqTreeOneOf() throws ClassCastException {","lastModifiedDate":"2022-10-03"},{"lineNumber":270,"author":{"gitId":"shenyih0ng"},"content":"        return (PrereqTreeOneOf)super.getActualInstance();","lastModifiedDate":"2022-10-03"},{"lineNumber":271,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":272,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":273,"author":{"gitId":"shenyih0ng"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":274,"author":{"gitId":"shenyih0ng"},"content":"     * Get the actual instance of `PrereqTreeOneOf1`. If the actual instance is not `PrereqTreeOneOf1`,","lastModifiedDate":"2022-10-03"},{"lineNumber":275,"author":{"gitId":"shenyih0ng"},"content":"     * the ClassCastException will be thrown.","lastModifiedDate":"2022-10-03"},{"lineNumber":276,"author":{"gitId":"shenyih0ng"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":277,"author":{"gitId":"shenyih0ng"},"content":"     * @return The actual instance of `PrereqTreeOneOf1`","lastModifiedDate":"2022-10-03"},{"lineNumber":278,"author":{"gitId":"shenyih0ng"},"content":"     * @throws ClassCastException if the instance is not `PrereqTreeOneOf1`","lastModifiedDate":"2022-10-03"},{"lineNumber":279,"author":{"gitId":"shenyih0ng"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":280,"author":{"gitId":"shenyih0ng"},"content":"    public PrereqTreeOneOf1 getPrereqTreeOneOf1() throws ClassCastException {","lastModifiedDate":"2022-10-03"},{"lineNumber":281,"author":{"gitId":"shenyih0ng"},"content":"        return (PrereqTreeOneOf1)super.getActualInstance();","lastModifiedDate":"2022-10-03"},{"lineNumber":282,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":283,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":284,"author":{"gitId":"shenyih0ng"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":285,"author":{"gitId":"shenyih0ng"},"content":"     * Get the actual instance of `String`. If the actual instance is not `String`,","lastModifiedDate":"2022-10-03"},{"lineNumber":286,"author":{"gitId":"shenyih0ng"},"content":"     * the ClassCastException will be thrown.","lastModifiedDate":"2022-10-03"},{"lineNumber":287,"author":{"gitId":"shenyih0ng"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":288,"author":{"gitId":"shenyih0ng"},"content":"     * @return The actual instance of `String`","lastModifiedDate":"2022-10-03"},{"lineNumber":289,"author":{"gitId":"shenyih0ng"},"content":"     * @throws ClassCastException if the instance is not `String`","lastModifiedDate":"2022-10-03"},{"lineNumber":290,"author":{"gitId":"shenyih0ng"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":291,"author":{"gitId":"shenyih0ng"},"content":"    public String getString() throws ClassCastException {","lastModifiedDate":"2022-10-03"},{"lineNumber":292,"author":{"gitId":"shenyih0ng"},"content":"        return (String)super.getActualInstance();","lastModifiedDate":"2022-10-03"},{"lineNumber":293,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":294,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":295,"author":{"gitId":"shenyih0ng"},"content":"}","lastModifiedDate":"2022-10-03"},{"lineNumber":296,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"shenyih0ng":296}},{"path":"src/main/java/org/openapitools/client/model/PrereqTreeOneOf.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"shenyih0ng"},"content":"/*","lastModifiedDate":"2022-10-03"},{"lineNumber":2,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API contains data used to render \u003chttps://nusmods.com\u003e. It includes data on modules offered by NUS and their timetables, as well as information on the locations the classes take place in. You are welcome to use and experiment with the data, which is extracted from official APIs provided by the Registrar\u0027s Office.  The API consists of static JSON files scraped daily from the school\u0027s APIs. This means it only partially follow REST conventions, and all resources are read only. All successful responses will return JSON, and all endpoints end in `.json`.  The shape of the data returned by these endpoints are designed for NUSMods in mind. If you have any questions or find that you need the data in other shapes for other purposes, feel free to reach out to us:  - **Telegram**: \u003chttps://telegram.me/nusmods\u003e - **Mailing list**: \u003cnusmods@googlegroups.com\u003e (for security related issues please email \u003cmods@nusmods.com\u003e instead)  ## Fetching data  Any HTTP client can be used to fetch data from the API. HTTPS is preferred, but the server will also respond to HTTP requests. The server supports HTTP 1.1 as well as HTTP 2 over HTTPS, and supports gzip compression.  The API has no authentication, and is not rate limited. While the server can respond to a large number of requests simultaneously, we request that you be polite with resource usage so as not to disrupt nusmods.com, which relies on the same API server. In general there is no need to fetch data from the API more than once per day, as that is the frequency at which we update the data.  [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) headers are enabled on all endpoints, so client-side JavaScript can use also use the API.  ## TypeScript types  Since the NUSMods is written in TypeScript, typings are available in the source for the scraper. These may be easier to read than the documentation generated by Swagger.  - Module types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/modules.ts\u003e - Venue types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/venues.ts\u003e  ## Data  Below are some notes about the data returned from the API. Feel free to talk to us or create an issue if any of it is not clear.  ### Module data  Module endpoints return information on modules offered by NUS. Most of the module data is self-explanatory, but some of the data are more complex and is explained here.  #### Lessons  Each lesson in a timetable has a lesson type `lessonType` and class number `ClassNo`. Every student must take one of each lesson type offered by the module. For example, this module offers two tutorials and one lecture. That means the student must attend the lecture, and can choose one of the two tutorials to attend.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"01\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1100\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"COM1-0207\\\"     },     {       \\\"classNo\\\": \\\"02\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Friday\\\",       \\\"startTime\\\": \\\"0900\\\",       \\\"endTime\\\": \\\"1000\\\",       \\\"venue\\\": \\\"COM1-0209\\\"     }   ] } ```  Each lesson has a `classNo` key. There can be multiple lessons of the same type and class number, in which case students must attend both. In this example, students can choose to attend either lecture group 1 on Tuesdays and Wednesdays, or lecture group 2 on Mondays and Wednesdays.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1400\\\",       \\\"endTime\\\": \\\"1500\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Monday\\\",       \\\"startTime\\\": \\\"1000\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1500\\\",       \\\"endTime\\\": \\\"1600\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     }   ] } ```  #### Lesson Weeks  The `weeks` key on lessons can return data in one of two forms.  Weeks is usually a sorted array of numbers. In this case it represents the school weeks the lesson occurs on, from 1 to 13.  Some classes have lessons outside of the school timetable. In this case a `WeekRange` object is returned. The object will always contain a `start` and `end` key representing the start and end date of lessons. The example below has classes every week from 17th Jan to 18th April.  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-04-18\\\" } ```  Optionally it can also include `weekInterval`, a positive integer describing the number of weeks between each lesson, and `weeks`, an array of positive integers describing the weeks on which the lesson will fall, with week 1 being the starting date. If these are not present you can assume lessons will occur every week.  The following example has lessons on 17th Jan (week 1), 24th Jan (week 2), 7th Feb (week 4) and 21st Feb (week 6).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-21\\\",   \\\"weeks\\\": [1, 2, 4, 6] } ```  The following example has lessons on 17th Jan (week 1), 31st Jan (week 3), 14th Feb (week 5) and 28th Feb (week 7).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-28\\\",   \\\"weekInterval\\\": 2 } ```  #### Workload  The `workload` key can return data in one of two forms.  Workload is usually a **5-tuple of numbers**, describing the estimated number of hours per week the student is expected to put in for the module for **lectures, tutorials, laboratory, projects/fieldwork, and preparatory work** respectively. For example, a workload of `[2, 1, 1, 3, 3]` means the student should spend every week  - 2 hours in lectures - 1 hour in tutorials - 1 hour at the lab - 3 hours doing project work - 3 hours preparing for classes  Each module credit represents 2.5 hours of work each week, so the standard 4 MC module represents 10 hours of work each week. Module credit may not be integers.  Note that this is only an estimate, and may be outdated or differ significantly in reality. Some modules also incorrectly lists the **total** workload hours instead of weekly, so very large values may show up.  This value is parsed from a string provided by the school, and occasionally this field will contain unusual values which cannot be parsed. In this case this field will contain the original **string** instead, which should be displayed as-is to the user.  #### Prerequisite, corequisite and preclusions  These three keys determine whether a student can take a module.  **Prerequisites** are requirements you have to meet before you can take a module. These are usually in the form of other modules (see prerequisite tree below for a machine readable format), but can also be things like \u0027taken A-level H2 math\u0027 or \u002770 MCs and above\u0027.  **Preclusions** refer to modules or requirements that cannot be taken if this module is taken, and vice versa. These are usually modules whose content overlaps significantly with this module, and can usually be used to replace each other to fulfill prerequisites.  **Corequisites** are modules that must be taken together with this module in the same semester. This usually refer to twined modules - modules which have linked syllabuses.  #### Prerequisite Tree  The `prereqTree` key is return on the individual module endpoint (`/modules/{moduleCode`). Not all modules have prerequisites, and some have prerequisites that cannot be properly represented as a tree, in which case this key will not appear.  This describes the prerequisites that need to be fulfilled before this module can be taken. The data structure is recursive and represents a tree.  ```json {   \\\"and\\\": [     \\\"CS1231\\\",     {       \\\"or\\\": [\\\"CS1010S\\\", \\\"CS1010X\\\"]     }   ] } ```  In the example, this module requires CS1231 and either CS1010S or CS1010X. This can be visualized as  ```            ┌ CS1231 ── all of ─┤            │         ┌ CS1010            └ one of ─┤                      └ CS1010X ```  The module information also contains the inverse of this, that is, modules whose requirements are fulfilled by this module (taking this module will allow you to take these modules in the following semester). The data is found on the `fulfillRequirements` key as an array of module codes.  ### Venue data  Venue data is simply the module timetable restructured to show the lessons happening at each classroom.  The venue list endpoint returns a list of all locations that are used in the semester. Note that this is not a comprehensive list of locations, but rather just a list of venues that appears in module lessons.  The venue information endpoint returns the full class and occupancy information about a venue. The `classes` key contains a list of lessons similar to the `timetable` key in module data, but without a `venue` key and with `moduleCode`.","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"shenyih0ng"},"content":" * The version of the OpenAPI document: 2.0.0","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"shenyih0ng"},"content":" * Contact: nusmods@googlegroups.com","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"shenyih0ng"},"content":" * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"shenyih0ng"},"content":" * https://openapi-generator.tech","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"shenyih0ng"},"content":" * Do not edit the class manually.","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"shenyih0ng"},"content":"package org.openapitools.client.model;","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Objects;","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Map;","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"shenyih0ng"},"content":"import java.util.HashMap;","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonInclude;","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonTypeName;","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"shenyih0ng"},"content":"import io.swagger.annotations.ApiModel;","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"shenyih0ng"},"content":"import io.swagger.annotations.ApiModelProperty;","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"shenyih0ng"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"shenyih0ng"},"content":"import java.util.List;","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.client.model.PrereqTree;","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonPropertyOrder;","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"shenyih0ng"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"shenyih0ng"},"content":" * PrereqTreeOneOf","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"shenyih0ng"},"content":"@JsonPropertyOrder({","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"shenyih0ng"},"content":"  PrereqTreeOneOf.JSON_PROPERTY_OR","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"shenyih0ng"},"content":"})","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"shenyih0ng"},"content":"@javax.annotation.processing.Generated(value \u003d \"org.openapitools.codegen.languages.JavaClientCodegen\", date \u003d \"2022-10-03T22:22:26.802458+08:00[Asia/Singapore]\")","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"shenyih0ng"},"content":"public class PrereqTreeOneOf {","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_OR \u003d \"or\";","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"shenyih0ng"},"content":"  private List\u003cPrereqTree\u003e or \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"shenyih0ng"},"content":"  public PrereqTreeOneOf() {","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"shenyih0ng"},"content":"  public PrereqTreeOneOf or(List\u003cPrereqTree\u003e or) {","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"shenyih0ng"},"content":"    this.or \u003d or;","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"shenyih0ng"},"content":"  public PrereqTreeOneOf addOrItem(PrereqTree orItem) {","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"shenyih0ng"},"content":"    this.or.add(orItem);","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"shenyih0ng"},"content":"   * Get or","lastModifiedDate":"2022-10-03"},{"lineNumber":59,"author":{"gitId":"shenyih0ng"},"content":"   * @return or","lastModifiedDate":"2022-10-03"},{"lineNumber":60,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":61,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":62,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":63,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_OR)","lastModifiedDate":"2022-10-03"},{"lineNumber":64,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":65,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":66,"author":{"gitId":"shenyih0ng"},"content":"  public List\u003cPrereqTree\u003e getOr() {","lastModifiedDate":"2022-10-03"},{"lineNumber":67,"author":{"gitId":"shenyih0ng"},"content":"    return or;","lastModifiedDate":"2022-10-03"},{"lineNumber":68,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":69,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":70,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":71,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_OR)","lastModifiedDate":"2022-10-03"},{"lineNumber":72,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":73,"author":{"gitId":"shenyih0ng"},"content":"  public void setOr(List\u003cPrereqTree\u003e or) {","lastModifiedDate":"2022-10-03"},{"lineNumber":74,"author":{"gitId":"shenyih0ng"},"content":"    this.or \u003d or;","lastModifiedDate":"2022-10-03"},{"lineNumber":75,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":76,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":77,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":78,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":79,"author":{"gitId":"shenyih0ng"},"content":"   * Return true if this PrereqTree_oneOf object is equal to o.","lastModifiedDate":"2022-10-03"},{"lineNumber":80,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":81,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":82,"author":{"gitId":"shenyih0ng"},"content":"  public boolean equals(Object o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":83,"author":{"gitId":"shenyih0ng"},"content":"    if (this \u003d\u003d o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":84,"author":{"gitId":"shenyih0ng"},"content":"      return true;","lastModifiedDate":"2022-10-03"},{"lineNumber":85,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":86,"author":{"gitId":"shenyih0ng"},"content":"    if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {","lastModifiedDate":"2022-10-03"},{"lineNumber":87,"author":{"gitId":"shenyih0ng"},"content":"      return false;","lastModifiedDate":"2022-10-03"},{"lineNumber":88,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":89,"author":{"gitId":"shenyih0ng"},"content":"    PrereqTreeOneOf prereqTreeOneOf \u003d (PrereqTreeOneOf) o;","lastModifiedDate":"2022-10-03"},{"lineNumber":90,"author":{"gitId":"shenyih0ng"},"content":"    return Objects.equals(this.or, prereqTreeOneOf.or);","lastModifiedDate":"2022-10-03"},{"lineNumber":91,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":92,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":93,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":94,"author":{"gitId":"shenyih0ng"},"content":"  public int hashCode() {","lastModifiedDate":"2022-10-03"},{"lineNumber":95,"author":{"gitId":"shenyih0ng"},"content":"    return Objects.hash(or);","lastModifiedDate":"2022-10-03"},{"lineNumber":96,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":97,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":98,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":99,"author":{"gitId":"shenyih0ng"},"content":"  public String toString() {","lastModifiedDate":"2022-10-03"},{"lineNumber":100,"author":{"gitId":"shenyih0ng"},"content":"    StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2022-10-03"},{"lineNumber":101,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"class PrereqTreeOneOf {\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":102,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    or: \").append(toIndentedString(or)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":103,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"}\");","lastModifiedDate":"2022-10-03"},{"lineNumber":104,"author":{"gitId":"shenyih0ng"},"content":"    return sb.toString();","lastModifiedDate":"2022-10-03"},{"lineNumber":105,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":106,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":107,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":108,"author":{"gitId":"shenyih0ng"},"content":"   * Convert the given object to string with each line indented by 4 spaces","lastModifiedDate":"2022-10-03"},{"lineNumber":109,"author":{"gitId":"shenyih0ng"},"content":"   * (except the first line).","lastModifiedDate":"2022-10-03"},{"lineNumber":110,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":111,"author":{"gitId":"shenyih0ng"},"content":"  private String toIndentedString(Object o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":112,"author":{"gitId":"shenyih0ng"},"content":"    if (o \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":113,"author":{"gitId":"shenyih0ng"},"content":"      return \"null\";","lastModifiedDate":"2022-10-03"},{"lineNumber":114,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":115,"author":{"gitId":"shenyih0ng"},"content":"    return o.toString().replace(\"\\n\", \"\\n    \");","lastModifiedDate":"2022-10-03"},{"lineNumber":116,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":117,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":118,"author":{"gitId":"shenyih0ng"},"content":"}","lastModifiedDate":"2022-10-03"},{"lineNumber":119,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"shenyih0ng":119}},{"path":"src/main/java/org/openapitools/client/model/PrereqTreeOneOf1.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"shenyih0ng"},"content":"/*","lastModifiedDate":"2022-10-03"},{"lineNumber":2,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API contains data used to render \u003chttps://nusmods.com\u003e. It includes data on modules offered by NUS and their timetables, as well as information on the locations the classes take place in. You are welcome to use and experiment with the data, which is extracted from official APIs provided by the Registrar\u0027s Office.  The API consists of static JSON files scraped daily from the school\u0027s APIs. This means it only partially follow REST conventions, and all resources are read only. All successful responses will return JSON, and all endpoints end in `.json`.  The shape of the data returned by these endpoints are designed for NUSMods in mind. If you have any questions or find that you need the data in other shapes for other purposes, feel free to reach out to us:  - **Telegram**: \u003chttps://telegram.me/nusmods\u003e - **Mailing list**: \u003cnusmods@googlegroups.com\u003e (for security related issues please email \u003cmods@nusmods.com\u003e instead)  ## Fetching data  Any HTTP client can be used to fetch data from the API. HTTPS is preferred, but the server will also respond to HTTP requests. The server supports HTTP 1.1 as well as HTTP 2 over HTTPS, and supports gzip compression.  The API has no authentication, and is not rate limited. While the server can respond to a large number of requests simultaneously, we request that you be polite with resource usage so as not to disrupt nusmods.com, which relies on the same API server. In general there is no need to fetch data from the API more than once per day, as that is the frequency at which we update the data.  [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) headers are enabled on all endpoints, so client-side JavaScript can use also use the API.  ## TypeScript types  Since the NUSMods is written in TypeScript, typings are available in the source for the scraper. These may be easier to read than the documentation generated by Swagger.  - Module types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/modules.ts\u003e - Venue types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/venues.ts\u003e  ## Data  Below are some notes about the data returned from the API. Feel free to talk to us or create an issue if any of it is not clear.  ### Module data  Module endpoints return information on modules offered by NUS. Most of the module data is self-explanatory, but some of the data are more complex and is explained here.  #### Lessons  Each lesson in a timetable has a lesson type `lessonType` and class number `ClassNo`. Every student must take one of each lesson type offered by the module. For example, this module offers two tutorials and one lecture. That means the student must attend the lecture, and can choose one of the two tutorials to attend.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"01\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1100\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"COM1-0207\\\"     },     {       \\\"classNo\\\": \\\"02\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Friday\\\",       \\\"startTime\\\": \\\"0900\\\",       \\\"endTime\\\": \\\"1000\\\",       \\\"venue\\\": \\\"COM1-0209\\\"     }   ] } ```  Each lesson has a `classNo` key. There can be multiple lessons of the same type and class number, in which case students must attend both. In this example, students can choose to attend either lecture group 1 on Tuesdays and Wednesdays, or lecture group 2 on Mondays and Wednesdays.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1400\\\",       \\\"endTime\\\": \\\"1500\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Monday\\\",       \\\"startTime\\\": \\\"1000\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1500\\\",       \\\"endTime\\\": \\\"1600\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     }   ] } ```  #### Lesson Weeks  The `weeks` key on lessons can return data in one of two forms.  Weeks is usually a sorted array of numbers. In this case it represents the school weeks the lesson occurs on, from 1 to 13.  Some classes have lessons outside of the school timetable. In this case a `WeekRange` object is returned. The object will always contain a `start` and `end` key representing the start and end date of lessons. The example below has classes every week from 17th Jan to 18th April.  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-04-18\\\" } ```  Optionally it can also include `weekInterval`, a positive integer describing the number of weeks between each lesson, and `weeks`, an array of positive integers describing the weeks on which the lesson will fall, with week 1 being the starting date. If these are not present you can assume lessons will occur every week.  The following example has lessons on 17th Jan (week 1), 24th Jan (week 2), 7th Feb (week 4) and 21st Feb (week 6).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-21\\\",   \\\"weeks\\\": [1, 2, 4, 6] } ```  The following example has lessons on 17th Jan (week 1), 31st Jan (week 3), 14th Feb (week 5) and 28th Feb (week 7).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-28\\\",   \\\"weekInterval\\\": 2 } ```  #### Workload  The `workload` key can return data in one of two forms.  Workload is usually a **5-tuple of numbers**, describing the estimated number of hours per week the student is expected to put in for the module for **lectures, tutorials, laboratory, projects/fieldwork, and preparatory work** respectively. For example, a workload of `[2, 1, 1, 3, 3]` means the student should spend every week  - 2 hours in lectures - 1 hour in tutorials - 1 hour at the lab - 3 hours doing project work - 3 hours preparing for classes  Each module credit represents 2.5 hours of work each week, so the standard 4 MC module represents 10 hours of work each week. Module credit may not be integers.  Note that this is only an estimate, and may be outdated or differ significantly in reality. Some modules also incorrectly lists the **total** workload hours instead of weekly, so very large values may show up.  This value is parsed from a string provided by the school, and occasionally this field will contain unusual values which cannot be parsed. In this case this field will contain the original **string** instead, which should be displayed as-is to the user.  #### Prerequisite, corequisite and preclusions  These three keys determine whether a student can take a module.  **Prerequisites** are requirements you have to meet before you can take a module. These are usually in the form of other modules (see prerequisite tree below for a machine readable format), but can also be things like \u0027taken A-level H2 math\u0027 or \u002770 MCs and above\u0027.  **Preclusions** refer to modules or requirements that cannot be taken if this module is taken, and vice versa. These are usually modules whose content overlaps significantly with this module, and can usually be used to replace each other to fulfill prerequisites.  **Corequisites** are modules that must be taken together with this module in the same semester. This usually refer to twined modules - modules which have linked syllabuses.  #### Prerequisite Tree  The `prereqTree` key is return on the individual module endpoint (`/modules/{moduleCode`). Not all modules have prerequisites, and some have prerequisites that cannot be properly represented as a tree, in which case this key will not appear.  This describes the prerequisites that need to be fulfilled before this module can be taken. The data structure is recursive and represents a tree.  ```json {   \\\"and\\\": [     \\\"CS1231\\\",     {       \\\"or\\\": [\\\"CS1010S\\\", \\\"CS1010X\\\"]     }   ] } ```  In the example, this module requires CS1231 and either CS1010S or CS1010X. This can be visualized as  ```            ┌ CS1231 ── all of ─┤            │         ┌ CS1010            └ one of ─┤                      └ CS1010X ```  The module information also contains the inverse of this, that is, modules whose requirements are fulfilled by this module (taking this module will allow you to take these modules in the following semester). The data is found on the `fulfillRequirements` key as an array of module codes.  ### Venue data  Venue data is simply the module timetable restructured to show the lessons happening at each classroom.  The venue list endpoint returns a list of all locations that are used in the semester. Note that this is not a comprehensive list of locations, but rather just a list of venues that appears in module lessons.  The venue information endpoint returns the full class and occupancy information about a venue. The `classes` key contains a list of lessons similar to the `timetable` key in module data, but without a `venue` key and with `moduleCode`.","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"shenyih0ng"},"content":" * The version of the OpenAPI document: 2.0.0","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"shenyih0ng"},"content":" * Contact: nusmods@googlegroups.com","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"shenyih0ng"},"content":" * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"shenyih0ng"},"content":" * https://openapi-generator.tech","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"shenyih0ng"},"content":" * Do not edit the class manually.","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"shenyih0ng"},"content":"package org.openapitools.client.model;","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Objects;","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Map;","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"shenyih0ng"},"content":"import java.util.HashMap;","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonInclude;","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonTypeName;","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"shenyih0ng"},"content":"import io.swagger.annotations.ApiModel;","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"shenyih0ng"},"content":"import io.swagger.annotations.ApiModelProperty;","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"shenyih0ng"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"shenyih0ng"},"content":"import java.util.List;","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.client.model.PrereqTree;","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonPropertyOrder;","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"shenyih0ng"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"shenyih0ng"},"content":" * PrereqTreeOneOf1","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"shenyih0ng"},"content":"@JsonPropertyOrder({","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"shenyih0ng"},"content":"  PrereqTreeOneOf1.JSON_PROPERTY_AND","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"shenyih0ng"},"content":"})","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"shenyih0ng"},"content":"@javax.annotation.processing.Generated(value \u003d \"org.openapitools.codegen.languages.JavaClientCodegen\", date \u003d \"2022-10-03T22:22:26.802458+08:00[Asia/Singapore]\")","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"shenyih0ng"},"content":"public class PrereqTreeOneOf1 {","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_AND \u003d \"and\";","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"shenyih0ng"},"content":"  private List\u003cPrereqTree\u003e and \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"shenyih0ng"},"content":"  public PrereqTreeOneOf1() {","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"shenyih0ng"},"content":"  public PrereqTreeOneOf1 and(List\u003cPrereqTree\u003e and) {","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"shenyih0ng"},"content":"    this.and \u003d and;","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"shenyih0ng"},"content":"  public PrereqTreeOneOf1 addAndItem(PrereqTree andItem) {","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"shenyih0ng"},"content":"    this.and.add(andItem);","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"shenyih0ng"},"content":"   * Get and","lastModifiedDate":"2022-10-03"},{"lineNumber":59,"author":{"gitId":"shenyih0ng"},"content":"   * @return and","lastModifiedDate":"2022-10-03"},{"lineNumber":60,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":61,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":62,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":63,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_AND)","lastModifiedDate":"2022-10-03"},{"lineNumber":64,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":65,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":66,"author":{"gitId":"shenyih0ng"},"content":"  public List\u003cPrereqTree\u003e getAnd() {","lastModifiedDate":"2022-10-03"},{"lineNumber":67,"author":{"gitId":"shenyih0ng"},"content":"    return and;","lastModifiedDate":"2022-10-03"},{"lineNumber":68,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":69,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":70,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":71,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_AND)","lastModifiedDate":"2022-10-03"},{"lineNumber":72,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":73,"author":{"gitId":"shenyih0ng"},"content":"  public void setAnd(List\u003cPrereqTree\u003e and) {","lastModifiedDate":"2022-10-03"},{"lineNumber":74,"author":{"gitId":"shenyih0ng"},"content":"    this.and \u003d and;","lastModifiedDate":"2022-10-03"},{"lineNumber":75,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":76,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":77,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":78,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":79,"author":{"gitId":"shenyih0ng"},"content":"   * Return true if this PrereqTree_oneOf_1 object is equal to o.","lastModifiedDate":"2022-10-03"},{"lineNumber":80,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":81,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":82,"author":{"gitId":"shenyih0ng"},"content":"  public boolean equals(Object o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":83,"author":{"gitId":"shenyih0ng"},"content":"    if (this \u003d\u003d o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":84,"author":{"gitId":"shenyih0ng"},"content":"      return true;","lastModifiedDate":"2022-10-03"},{"lineNumber":85,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":86,"author":{"gitId":"shenyih0ng"},"content":"    if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {","lastModifiedDate":"2022-10-03"},{"lineNumber":87,"author":{"gitId":"shenyih0ng"},"content":"      return false;","lastModifiedDate":"2022-10-03"},{"lineNumber":88,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":89,"author":{"gitId":"shenyih0ng"},"content":"    PrereqTreeOneOf1 prereqTreeOneOf1 \u003d (PrereqTreeOneOf1) o;","lastModifiedDate":"2022-10-03"},{"lineNumber":90,"author":{"gitId":"shenyih0ng"},"content":"    return Objects.equals(this.and, prereqTreeOneOf1.and);","lastModifiedDate":"2022-10-03"},{"lineNumber":91,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":92,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":93,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":94,"author":{"gitId":"shenyih0ng"},"content":"  public int hashCode() {","lastModifiedDate":"2022-10-03"},{"lineNumber":95,"author":{"gitId":"shenyih0ng"},"content":"    return Objects.hash(and);","lastModifiedDate":"2022-10-03"},{"lineNumber":96,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":97,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":98,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":99,"author":{"gitId":"shenyih0ng"},"content":"  public String toString() {","lastModifiedDate":"2022-10-03"},{"lineNumber":100,"author":{"gitId":"shenyih0ng"},"content":"    StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2022-10-03"},{"lineNumber":101,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"class PrereqTreeOneOf1 {\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":102,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    and: \").append(toIndentedString(and)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":103,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"}\");","lastModifiedDate":"2022-10-03"},{"lineNumber":104,"author":{"gitId":"shenyih0ng"},"content":"    return sb.toString();","lastModifiedDate":"2022-10-03"},{"lineNumber":105,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":106,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":107,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":108,"author":{"gitId":"shenyih0ng"},"content":"   * Convert the given object to string with each line indented by 4 spaces","lastModifiedDate":"2022-10-03"},{"lineNumber":109,"author":{"gitId":"shenyih0ng"},"content":"   * (except the first line).","lastModifiedDate":"2022-10-03"},{"lineNumber":110,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":111,"author":{"gitId":"shenyih0ng"},"content":"  private String toIndentedString(Object o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":112,"author":{"gitId":"shenyih0ng"},"content":"    if (o \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":113,"author":{"gitId":"shenyih0ng"},"content":"      return \"null\";","lastModifiedDate":"2022-10-03"},{"lineNumber":114,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":115,"author":{"gitId":"shenyih0ng"},"content":"    return o.toString().replace(\"\\n\", \"\\n    \");","lastModifiedDate":"2022-10-03"},{"lineNumber":116,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":117,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":118,"author":{"gitId":"shenyih0ng"},"content":"}","lastModifiedDate":"2022-10-03"},{"lineNumber":119,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"shenyih0ng":119}},{"path":"src/main/java/org/openapitools/client/model/SemesterData.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"shenyih0ng"},"content":"/*","lastModifiedDate":"2022-10-03"},{"lineNumber":2,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API contains data used to render \u003chttps://nusmods.com\u003e. It includes data on modules offered by NUS and their timetables, as well as information on the locations the classes take place in. You are welcome to use and experiment with the data, which is extracted from official APIs provided by the Registrar\u0027s Office.  The API consists of static JSON files scraped daily from the school\u0027s APIs. This means it only partially follow REST conventions, and all resources are read only. All successful responses will return JSON, and all endpoints end in `.json`.  The shape of the data returned by these endpoints are designed for NUSMods in mind. If you have any questions or find that you need the data in other shapes for other purposes, feel free to reach out to us:  - **Telegram**: \u003chttps://telegram.me/nusmods\u003e - **Mailing list**: \u003cnusmods@googlegroups.com\u003e (for security related issues please email \u003cmods@nusmods.com\u003e instead)  ## Fetching data  Any HTTP client can be used to fetch data from the API. HTTPS is preferred, but the server will also respond to HTTP requests. The server supports HTTP 1.1 as well as HTTP 2 over HTTPS, and supports gzip compression.  The API has no authentication, and is not rate limited. While the server can respond to a large number of requests simultaneously, we request that you be polite with resource usage so as not to disrupt nusmods.com, which relies on the same API server. In general there is no need to fetch data from the API more than once per day, as that is the frequency at which we update the data.  [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) headers are enabled on all endpoints, so client-side JavaScript can use also use the API.  ## TypeScript types  Since the NUSMods is written in TypeScript, typings are available in the source for the scraper. These may be easier to read than the documentation generated by Swagger.  - Module types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/modules.ts\u003e - Venue types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/venues.ts\u003e  ## Data  Below are some notes about the data returned from the API. Feel free to talk to us or create an issue if any of it is not clear.  ### Module data  Module endpoints return information on modules offered by NUS. Most of the module data is self-explanatory, but some of the data are more complex and is explained here.  #### Lessons  Each lesson in a timetable has a lesson type `lessonType` and class number `ClassNo`. Every student must take one of each lesson type offered by the module. For example, this module offers two tutorials and one lecture. That means the student must attend the lecture, and can choose one of the two tutorials to attend.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"01\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1100\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"COM1-0207\\\"     },     {       \\\"classNo\\\": \\\"02\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Friday\\\",       \\\"startTime\\\": \\\"0900\\\",       \\\"endTime\\\": \\\"1000\\\",       \\\"venue\\\": \\\"COM1-0209\\\"     }   ] } ```  Each lesson has a `classNo` key. There can be multiple lessons of the same type and class number, in which case students must attend both. In this example, students can choose to attend either lecture group 1 on Tuesdays and Wednesdays, or lecture group 2 on Mondays and Wednesdays.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1400\\\",       \\\"endTime\\\": \\\"1500\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Monday\\\",       \\\"startTime\\\": \\\"1000\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1500\\\",       \\\"endTime\\\": \\\"1600\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     }   ] } ```  #### Lesson Weeks  The `weeks` key on lessons can return data in one of two forms.  Weeks is usually a sorted array of numbers. In this case it represents the school weeks the lesson occurs on, from 1 to 13.  Some classes have lessons outside of the school timetable. In this case a `WeekRange` object is returned. The object will always contain a `start` and `end` key representing the start and end date of lessons. The example below has classes every week from 17th Jan to 18th April.  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-04-18\\\" } ```  Optionally it can also include `weekInterval`, a positive integer describing the number of weeks between each lesson, and `weeks`, an array of positive integers describing the weeks on which the lesson will fall, with week 1 being the starting date. If these are not present you can assume lessons will occur every week.  The following example has lessons on 17th Jan (week 1), 24th Jan (week 2), 7th Feb (week 4) and 21st Feb (week 6).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-21\\\",   \\\"weeks\\\": [1, 2, 4, 6] } ```  The following example has lessons on 17th Jan (week 1), 31st Jan (week 3), 14th Feb (week 5) and 28th Feb (week 7).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-28\\\",   \\\"weekInterval\\\": 2 } ```  #### Workload  The `workload` key can return data in one of two forms.  Workload is usually a **5-tuple of numbers**, describing the estimated number of hours per week the student is expected to put in for the module for **lectures, tutorials, laboratory, projects/fieldwork, and preparatory work** respectively. For example, a workload of `[2, 1, 1, 3, 3]` means the student should spend every week  - 2 hours in lectures - 1 hour in tutorials - 1 hour at the lab - 3 hours doing project work - 3 hours preparing for classes  Each module credit represents 2.5 hours of work each week, so the standard 4 MC module represents 10 hours of work each week. Module credit may not be integers.  Note that this is only an estimate, and may be outdated or differ significantly in reality. Some modules also incorrectly lists the **total** workload hours instead of weekly, so very large values may show up.  This value is parsed from a string provided by the school, and occasionally this field will contain unusual values which cannot be parsed. In this case this field will contain the original **string** instead, which should be displayed as-is to the user.  #### Prerequisite, corequisite and preclusions  These three keys determine whether a student can take a module.  **Prerequisites** are requirements you have to meet before you can take a module. These are usually in the form of other modules (see prerequisite tree below for a machine readable format), but can also be things like \u0027taken A-level H2 math\u0027 or \u002770 MCs and above\u0027.  **Preclusions** refer to modules or requirements that cannot be taken if this module is taken, and vice versa. These are usually modules whose content overlaps significantly with this module, and can usually be used to replace each other to fulfill prerequisites.  **Corequisites** are modules that must be taken together with this module in the same semester. This usually refer to twined modules - modules which have linked syllabuses.  #### Prerequisite Tree  The `prereqTree` key is return on the individual module endpoint (`/modules/{moduleCode`). Not all modules have prerequisites, and some have prerequisites that cannot be properly represented as a tree, in which case this key will not appear.  This describes the prerequisites that need to be fulfilled before this module can be taken. The data structure is recursive and represents a tree.  ```json {   \\\"and\\\": [     \\\"CS1231\\\",     {       \\\"or\\\": [\\\"CS1010S\\\", \\\"CS1010X\\\"]     }   ] } ```  In the example, this module requires CS1231 and either CS1010S or CS1010X. This can be visualized as  ```            ┌ CS1231 ── all of ─┤            │         ┌ CS1010            └ one of ─┤                      └ CS1010X ```  The module information also contains the inverse of this, that is, modules whose requirements are fulfilled by this module (taking this module will allow you to take these modules in the following semester). The data is found on the `fulfillRequirements` key as an array of module codes.  ### Venue data  Venue data is simply the module timetable restructured to show the lessons happening at each classroom.  The venue list endpoint returns a list of all locations that are used in the semester. Note that this is not a comprehensive list of locations, but rather just a list of venues that appears in module lessons.  The venue information endpoint returns the full class and occupancy information about a venue. The `classes` key contains a list of lessons similar to the `timetable` key in module data, but without a `venue` key and with `moduleCode`.","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"shenyih0ng"},"content":" * The version of the OpenAPI document: 2.0.0","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"shenyih0ng"},"content":" * Contact: nusmods@googlegroups.com","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"shenyih0ng"},"content":" * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"shenyih0ng"},"content":" * https://openapi-generator.tech","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"shenyih0ng"},"content":" * Do not edit the class manually.","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"shenyih0ng"},"content":"package org.openapitools.client.model;","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Objects;","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Map;","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"shenyih0ng"},"content":"import java.util.HashMap;","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonInclude;","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonTypeName;","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"shenyih0ng"},"content":"import io.swagger.annotations.ApiModel;","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"shenyih0ng"},"content":"import io.swagger.annotations.ApiModelProperty;","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"shenyih0ng"},"content":"import java.math.BigDecimal;","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"shenyih0ng"},"content":"import java.time.OffsetDateTime;","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"shenyih0ng"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"shenyih0ng"},"content":"import java.util.List;","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.client.model.Lesson;","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonPropertyOrder;","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"shenyih0ng"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"shenyih0ng"},"content":" * SemesterData","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"shenyih0ng"},"content":"@JsonPropertyOrder({","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"shenyih0ng"},"content":"  SemesterData.JSON_PROPERTY_SEMESTER,","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"shenyih0ng"},"content":"  SemesterData.JSON_PROPERTY_EXAM_DATE,","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"shenyih0ng"},"content":"  SemesterData.JSON_PROPERTY_EXAM_DURATION,","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"shenyih0ng"},"content":"  SemesterData.JSON_PROPERTY_TIMETABLE","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"shenyih0ng"},"content":"})","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"shenyih0ng"},"content":"@javax.annotation.processing.Generated(value \u003d \"org.openapitools.codegen.languages.JavaClientCodegen\", date \u003d \"2022-10-03T22:22:26.802458+08:00[Asia/Singapore]\")","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"shenyih0ng"},"content":"public class SemesterData {","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_SEMESTER \u003d \"semester\";","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"shenyih0ng"},"content":"  private BigDecimal semester;","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_EXAM_DATE \u003d \"examDate\";","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"shenyih0ng"},"content":"  private OffsetDateTime examDate;","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_EXAM_DURATION \u003d \"examDuration\";","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"shenyih0ng"},"content":"  private BigDecimal examDuration;","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_TIMETABLE \u003d \"timetable\";","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"shenyih0ng"},"content":"  private List\u003cLesson\u003e timetable \u003d null;","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"shenyih0ng"},"content":"  public SemesterData() {","lastModifiedDate":"2022-10-03"},{"lineNumber":59,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":60,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":61,"author":{"gitId":"shenyih0ng"},"content":"  public SemesterData semester(BigDecimal semester) {","lastModifiedDate":"2022-10-03"},{"lineNumber":62,"author":{"gitId":"shenyih0ng"},"content":"    this.semester \u003d semester;","lastModifiedDate":"2022-10-03"},{"lineNumber":63,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":64,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":65,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":66,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":67,"author":{"gitId":"shenyih0ng"},"content":"   * Get semester","lastModifiedDate":"2022-10-03"},{"lineNumber":68,"author":{"gitId":"shenyih0ng"},"content":"   * @return semester","lastModifiedDate":"2022-10-03"},{"lineNumber":69,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":70,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":71,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"1\", required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":72,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_SEMESTER)","lastModifiedDate":"2022-10-03"},{"lineNumber":73,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":74,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":75,"author":{"gitId":"shenyih0ng"},"content":"  public BigDecimal getSemester() {","lastModifiedDate":"2022-10-03"},{"lineNumber":76,"author":{"gitId":"shenyih0ng"},"content":"    return semester;","lastModifiedDate":"2022-10-03"},{"lineNumber":77,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":78,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":79,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":80,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_SEMESTER)","lastModifiedDate":"2022-10-03"},{"lineNumber":81,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":82,"author":{"gitId":"shenyih0ng"},"content":"  public void setSemester(BigDecimal semester) {","lastModifiedDate":"2022-10-03"},{"lineNumber":83,"author":{"gitId":"shenyih0ng"},"content":"    this.semester \u003d semester;","lastModifiedDate":"2022-10-03"},{"lineNumber":84,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":85,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":86,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":87,"author":{"gitId":"shenyih0ng"},"content":"  public SemesterData examDate(OffsetDateTime examDate) {","lastModifiedDate":"2022-10-03"},{"lineNumber":88,"author":{"gitId":"shenyih0ng"},"content":"    this.examDate \u003d examDate;","lastModifiedDate":"2022-10-03"},{"lineNumber":89,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":90,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":91,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":92,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":93,"author":{"gitId":"shenyih0ng"},"content":"   * Get examDate","lastModifiedDate":"2022-10-03"},{"lineNumber":94,"author":{"gitId":"shenyih0ng"},"content":"   * @return examDate","lastModifiedDate":"2022-10-03"},{"lineNumber":95,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":96,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nullable","lastModifiedDate":"2022-10-03"},{"lineNumber":97,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"2018-11-27T09:00Z\", value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":98,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_EXAM_DATE)","lastModifiedDate":"2022-10-03"},{"lineNumber":99,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":100,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":101,"author":{"gitId":"shenyih0ng"},"content":"  public OffsetDateTime getExamDate() {","lastModifiedDate":"2022-10-03"},{"lineNumber":102,"author":{"gitId":"shenyih0ng"},"content":"    return examDate;","lastModifiedDate":"2022-10-03"},{"lineNumber":103,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":104,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":105,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":106,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_EXAM_DATE)","lastModifiedDate":"2022-10-03"},{"lineNumber":107,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":108,"author":{"gitId":"shenyih0ng"},"content":"  public void setExamDate(OffsetDateTime examDate) {","lastModifiedDate":"2022-10-03"},{"lineNumber":109,"author":{"gitId":"shenyih0ng"},"content":"    this.examDate \u003d examDate;","lastModifiedDate":"2022-10-03"},{"lineNumber":110,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":111,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":112,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":113,"author":{"gitId":"shenyih0ng"},"content":"  public SemesterData examDuration(BigDecimal examDuration) {","lastModifiedDate":"2022-10-03"},{"lineNumber":114,"author":{"gitId":"shenyih0ng"},"content":"    this.examDuration \u003d examDuration;","lastModifiedDate":"2022-10-03"},{"lineNumber":115,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":116,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":117,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":118,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":119,"author":{"gitId":"shenyih0ng"},"content":"   * Get examDuration","lastModifiedDate":"2022-10-03"},{"lineNumber":120,"author":{"gitId":"shenyih0ng"},"content":"   * @return examDuration","lastModifiedDate":"2022-10-03"},{"lineNumber":121,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":122,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nullable","lastModifiedDate":"2022-10-03"},{"lineNumber":123,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"120\", value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":124,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_EXAM_DURATION)","lastModifiedDate":"2022-10-03"},{"lineNumber":125,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":126,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":127,"author":{"gitId":"shenyih0ng"},"content":"  public BigDecimal getExamDuration() {","lastModifiedDate":"2022-10-03"},{"lineNumber":128,"author":{"gitId":"shenyih0ng"},"content":"    return examDuration;","lastModifiedDate":"2022-10-03"},{"lineNumber":129,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":130,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":131,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":132,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_EXAM_DURATION)","lastModifiedDate":"2022-10-03"},{"lineNumber":133,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":134,"author":{"gitId":"shenyih0ng"},"content":"  public void setExamDuration(BigDecimal examDuration) {","lastModifiedDate":"2022-10-03"},{"lineNumber":135,"author":{"gitId":"shenyih0ng"},"content":"    this.examDuration \u003d examDuration;","lastModifiedDate":"2022-10-03"},{"lineNumber":136,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":137,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":138,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":139,"author":{"gitId":"shenyih0ng"},"content":"  public SemesterData timetable(List\u003cLesson\u003e timetable) {","lastModifiedDate":"2022-10-03"},{"lineNumber":140,"author":{"gitId":"shenyih0ng"},"content":"    this.timetable \u003d timetable;","lastModifiedDate":"2022-10-03"},{"lineNumber":141,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":142,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":143,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":144,"author":{"gitId":"shenyih0ng"},"content":"  public SemesterData addTimetableItem(Lesson timetableItem) {","lastModifiedDate":"2022-10-03"},{"lineNumber":145,"author":{"gitId":"shenyih0ng"},"content":"    if (this.timetable \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":146,"author":{"gitId":"shenyih0ng"},"content":"      this.timetable \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-03"},{"lineNumber":147,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":148,"author":{"gitId":"shenyih0ng"},"content":"    this.timetable.add(timetableItem);","lastModifiedDate":"2022-10-03"},{"lineNumber":149,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":150,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":151,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":152,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":153,"author":{"gitId":"shenyih0ng"},"content":"   * Get timetable","lastModifiedDate":"2022-10-03"},{"lineNumber":154,"author":{"gitId":"shenyih0ng"},"content":"   * @return timetable","lastModifiedDate":"2022-10-03"},{"lineNumber":155,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":156,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nullable","lastModifiedDate":"2022-10-03"},{"lineNumber":157,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":158,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_TIMETABLE)","lastModifiedDate":"2022-10-03"},{"lineNumber":159,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":160,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":161,"author":{"gitId":"shenyih0ng"},"content":"  public List\u003cLesson\u003e getTimetable() {","lastModifiedDate":"2022-10-03"},{"lineNumber":162,"author":{"gitId":"shenyih0ng"},"content":"    return timetable;","lastModifiedDate":"2022-10-03"},{"lineNumber":163,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":164,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":165,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":166,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_TIMETABLE)","lastModifiedDate":"2022-10-03"},{"lineNumber":167,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":168,"author":{"gitId":"shenyih0ng"},"content":"  public void setTimetable(List\u003cLesson\u003e timetable) {","lastModifiedDate":"2022-10-03"},{"lineNumber":169,"author":{"gitId":"shenyih0ng"},"content":"    this.timetable \u003d timetable;","lastModifiedDate":"2022-10-03"},{"lineNumber":170,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":171,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":172,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":173,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":174,"author":{"gitId":"shenyih0ng"},"content":"   * Return true if this SemesterData object is equal to o.","lastModifiedDate":"2022-10-03"},{"lineNumber":175,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":176,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":177,"author":{"gitId":"shenyih0ng"},"content":"  public boolean equals(Object o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":178,"author":{"gitId":"shenyih0ng"},"content":"    if (this \u003d\u003d o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":179,"author":{"gitId":"shenyih0ng"},"content":"      return true;","lastModifiedDate":"2022-10-03"},{"lineNumber":180,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":181,"author":{"gitId":"shenyih0ng"},"content":"    if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {","lastModifiedDate":"2022-10-03"},{"lineNumber":182,"author":{"gitId":"shenyih0ng"},"content":"      return false;","lastModifiedDate":"2022-10-03"},{"lineNumber":183,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":184,"author":{"gitId":"shenyih0ng"},"content":"    SemesterData semesterData \u003d (SemesterData) o;","lastModifiedDate":"2022-10-03"},{"lineNumber":185,"author":{"gitId":"shenyih0ng"},"content":"    return Objects.equals(this.semester, semesterData.semester) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":186,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.examDate, semesterData.examDate) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":187,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.examDuration, semesterData.examDuration) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":188,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.timetable, semesterData.timetable);","lastModifiedDate":"2022-10-03"},{"lineNumber":189,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":190,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":191,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":192,"author":{"gitId":"shenyih0ng"},"content":"  public int hashCode() {","lastModifiedDate":"2022-10-03"},{"lineNumber":193,"author":{"gitId":"shenyih0ng"},"content":"    return Objects.hash(semester, examDate, examDuration, timetable);","lastModifiedDate":"2022-10-03"},{"lineNumber":194,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":195,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":196,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":197,"author":{"gitId":"shenyih0ng"},"content":"  public String toString() {","lastModifiedDate":"2022-10-03"},{"lineNumber":198,"author":{"gitId":"shenyih0ng"},"content":"    StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2022-10-03"},{"lineNumber":199,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"class SemesterData {\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":200,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    semester: \").append(toIndentedString(semester)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":201,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    examDate: \").append(toIndentedString(examDate)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":202,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    examDuration: \").append(toIndentedString(examDuration)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":203,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    timetable: \").append(toIndentedString(timetable)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":204,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"}\");","lastModifiedDate":"2022-10-03"},{"lineNumber":205,"author":{"gitId":"shenyih0ng"},"content":"    return sb.toString();","lastModifiedDate":"2022-10-03"},{"lineNumber":206,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":207,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":208,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":209,"author":{"gitId":"shenyih0ng"},"content":"   * Convert the given object to string with each line indented by 4 spaces","lastModifiedDate":"2022-10-03"},{"lineNumber":210,"author":{"gitId":"shenyih0ng"},"content":"   * (except the first line).","lastModifiedDate":"2022-10-03"},{"lineNumber":211,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":212,"author":{"gitId":"shenyih0ng"},"content":"  private String toIndentedString(Object o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":213,"author":{"gitId":"shenyih0ng"},"content":"    if (o \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":214,"author":{"gitId":"shenyih0ng"},"content":"      return \"null\";","lastModifiedDate":"2022-10-03"},{"lineNumber":215,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":216,"author":{"gitId":"shenyih0ng"},"content":"    return o.toString().replace(\"\\n\", \"\\n    \");","lastModifiedDate":"2022-10-03"},{"lineNumber":217,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":218,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":219,"author":{"gitId":"shenyih0ng"},"content":"}","lastModifiedDate":"2022-10-03"},{"lineNumber":220,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"shenyih0ng":220}},{"path":"src/main/java/org/openapitools/client/model/VenueInformation.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"shenyih0ng"},"content":"/*","lastModifiedDate":"2022-10-03"},{"lineNumber":2,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API contains data used to render \u003chttps://nusmods.com\u003e. It includes data on modules offered by NUS and their timetables, as well as information on the locations the classes take place in. You are welcome to use and experiment with the data, which is extracted from official APIs provided by the Registrar\u0027s Office.  The API consists of static JSON files scraped daily from the school\u0027s APIs. This means it only partially follow REST conventions, and all resources are read only. All successful responses will return JSON, and all endpoints end in `.json`.  The shape of the data returned by these endpoints are designed for NUSMods in mind. If you have any questions or find that you need the data in other shapes for other purposes, feel free to reach out to us:  - **Telegram**: \u003chttps://telegram.me/nusmods\u003e - **Mailing list**: \u003cnusmods@googlegroups.com\u003e (for security related issues please email \u003cmods@nusmods.com\u003e instead)  ## Fetching data  Any HTTP client can be used to fetch data from the API. HTTPS is preferred, but the server will also respond to HTTP requests. The server supports HTTP 1.1 as well as HTTP 2 over HTTPS, and supports gzip compression.  The API has no authentication, and is not rate limited. While the server can respond to a large number of requests simultaneously, we request that you be polite with resource usage so as not to disrupt nusmods.com, which relies on the same API server. In general there is no need to fetch data from the API more than once per day, as that is the frequency at which we update the data.  [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) headers are enabled on all endpoints, so client-side JavaScript can use also use the API.  ## TypeScript types  Since the NUSMods is written in TypeScript, typings are available in the source for the scraper. These may be easier to read than the documentation generated by Swagger.  - Module types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/modules.ts\u003e - Venue types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/venues.ts\u003e  ## Data  Below are some notes about the data returned from the API. Feel free to talk to us or create an issue if any of it is not clear.  ### Module data  Module endpoints return information on modules offered by NUS. Most of the module data is self-explanatory, but some of the data are more complex and is explained here.  #### Lessons  Each lesson in a timetable has a lesson type `lessonType` and class number `ClassNo`. Every student must take one of each lesson type offered by the module. For example, this module offers two tutorials and one lecture. That means the student must attend the lecture, and can choose one of the two tutorials to attend.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"01\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1100\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"COM1-0207\\\"     },     {       \\\"classNo\\\": \\\"02\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Friday\\\",       \\\"startTime\\\": \\\"0900\\\",       \\\"endTime\\\": \\\"1000\\\",       \\\"venue\\\": \\\"COM1-0209\\\"     }   ] } ```  Each lesson has a `classNo` key. There can be multiple lessons of the same type and class number, in which case students must attend both. In this example, students can choose to attend either lecture group 1 on Tuesdays and Wednesdays, or lecture group 2 on Mondays and Wednesdays.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1400\\\",       \\\"endTime\\\": \\\"1500\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Monday\\\",       \\\"startTime\\\": \\\"1000\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1500\\\",       \\\"endTime\\\": \\\"1600\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     }   ] } ```  #### Lesson Weeks  The `weeks` key on lessons can return data in one of two forms.  Weeks is usually a sorted array of numbers. In this case it represents the school weeks the lesson occurs on, from 1 to 13.  Some classes have lessons outside of the school timetable. In this case a `WeekRange` object is returned. The object will always contain a `start` and `end` key representing the start and end date of lessons. The example below has classes every week from 17th Jan to 18th April.  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-04-18\\\" } ```  Optionally it can also include `weekInterval`, a positive integer describing the number of weeks between each lesson, and `weeks`, an array of positive integers describing the weeks on which the lesson will fall, with week 1 being the starting date. If these are not present you can assume lessons will occur every week.  The following example has lessons on 17th Jan (week 1), 24th Jan (week 2), 7th Feb (week 4) and 21st Feb (week 6).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-21\\\",   \\\"weeks\\\": [1, 2, 4, 6] } ```  The following example has lessons on 17th Jan (week 1), 31st Jan (week 3), 14th Feb (week 5) and 28th Feb (week 7).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-28\\\",   \\\"weekInterval\\\": 2 } ```  #### Workload  The `workload` key can return data in one of two forms.  Workload is usually a **5-tuple of numbers**, describing the estimated number of hours per week the student is expected to put in for the module for **lectures, tutorials, laboratory, projects/fieldwork, and preparatory work** respectively. For example, a workload of `[2, 1, 1, 3, 3]` means the student should spend every week  - 2 hours in lectures - 1 hour in tutorials - 1 hour at the lab - 3 hours doing project work - 3 hours preparing for classes  Each module credit represents 2.5 hours of work each week, so the standard 4 MC module represents 10 hours of work each week. Module credit may not be integers.  Note that this is only an estimate, and may be outdated or differ significantly in reality. Some modules also incorrectly lists the **total** workload hours instead of weekly, so very large values may show up.  This value is parsed from a string provided by the school, and occasionally this field will contain unusual values which cannot be parsed. In this case this field will contain the original **string** instead, which should be displayed as-is to the user.  #### Prerequisite, corequisite and preclusions  These three keys determine whether a student can take a module.  **Prerequisites** are requirements you have to meet before you can take a module. These are usually in the form of other modules (see prerequisite tree below for a machine readable format), but can also be things like \u0027taken A-level H2 math\u0027 or \u002770 MCs and above\u0027.  **Preclusions** refer to modules or requirements that cannot be taken if this module is taken, and vice versa. These are usually modules whose content overlaps significantly with this module, and can usually be used to replace each other to fulfill prerequisites.  **Corequisites** are modules that must be taken together with this module in the same semester. This usually refer to twined modules - modules which have linked syllabuses.  #### Prerequisite Tree  The `prereqTree` key is return on the individual module endpoint (`/modules/{moduleCode`). Not all modules have prerequisites, and some have prerequisites that cannot be properly represented as a tree, in which case this key will not appear.  This describes the prerequisites that need to be fulfilled before this module can be taken. The data structure is recursive and represents a tree.  ```json {   \\\"and\\\": [     \\\"CS1231\\\",     {       \\\"or\\\": [\\\"CS1010S\\\", \\\"CS1010X\\\"]     }   ] } ```  In the example, this module requires CS1231 and either CS1010S or CS1010X. This can be visualized as  ```            ┌ CS1231 ── all of ─┤            │         ┌ CS1010            └ one of ─┤                      └ CS1010X ```  The module information also contains the inverse of this, that is, modules whose requirements are fulfilled by this module (taking this module will allow you to take these modules in the following semester). The data is found on the `fulfillRequirements` key as an array of module codes.  ### Venue data  Venue data is simply the module timetable restructured to show the lessons happening at each classroom.  The venue list endpoint returns a list of all locations that are used in the semester. Note that this is not a comprehensive list of locations, but rather just a list of venues that appears in module lessons.  The venue information endpoint returns the full class and occupancy information about a venue. The `classes` key contains a list of lessons similar to the `timetable` key in module data, but without a `venue` key and with `moduleCode`.","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"shenyih0ng"},"content":" * The version of the OpenAPI document: 2.0.0","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"shenyih0ng"},"content":" * Contact: nusmods@googlegroups.com","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"shenyih0ng"},"content":" * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"shenyih0ng"},"content":" * https://openapi-generator.tech","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"shenyih0ng"},"content":" * Do not edit the class manually.","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"shenyih0ng"},"content":"package org.openapitools.client.model;","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Objects;","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Map;","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"shenyih0ng"},"content":"import java.util.HashMap;","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonInclude;","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonTypeName;","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"shenyih0ng"},"content":"import io.swagger.annotations.ApiModel;","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"shenyih0ng"},"content":"import io.swagger.annotations.ApiModelProperty;","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"shenyih0ng"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"shenyih0ng"},"content":"import java.util.HashMap;","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"shenyih0ng"},"content":"import java.util.List;","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Map;","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.client.model.VenueLesson;","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonPropertyOrder;","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"shenyih0ng"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"shenyih0ng"},"content":" * VenueInformation","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"shenyih0ng"},"content":"@JsonPropertyOrder({","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"shenyih0ng"},"content":"  VenueInformation.JSON_PROPERTY_DAY,","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"shenyih0ng"},"content":"  VenueInformation.JSON_PROPERTY_CLASSES,","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"shenyih0ng"},"content":"  VenueInformation.JSON_PROPERTY_AVAILABILITY","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"shenyih0ng"},"content":"})","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"shenyih0ng"},"content":"@javax.annotation.processing.Generated(value \u003d \"org.openapitools.codegen.languages.JavaClientCodegen\", date \u003d \"2022-10-03T22:22:26.802458+08:00[Asia/Singapore]\")","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"shenyih0ng"},"content":"public class VenueInformation {","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"shenyih0ng"},"content":"   * Gets or Sets day","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"shenyih0ng"},"content":"  public enum DayEnum {","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"shenyih0ng"},"content":"    MONDAY(\"Monday\"),","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"shenyih0ng"},"content":"    TUESDAY(\"Tuesday\"),","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"shenyih0ng"},"content":"    WEDNESDAY(\"Wednesday\"),","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"shenyih0ng"},"content":"    THURSDAY(\"Thursday\"),","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"shenyih0ng"},"content":"    FRIDAY(\"Friday\"),","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":59,"author":{"gitId":"shenyih0ng"},"content":"    SATURDAY(\"Saturday\");","lastModifiedDate":"2022-10-03"},{"lineNumber":60,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":61,"author":{"gitId":"shenyih0ng"},"content":"    private String value;","lastModifiedDate":"2022-10-03"},{"lineNumber":62,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":63,"author":{"gitId":"shenyih0ng"},"content":"    DayEnum(String value) {","lastModifiedDate":"2022-10-03"},{"lineNumber":64,"author":{"gitId":"shenyih0ng"},"content":"      this.value \u003d value;","lastModifiedDate":"2022-10-03"},{"lineNumber":65,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":66,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":67,"author":{"gitId":"shenyih0ng"},"content":"    @JsonValue","lastModifiedDate":"2022-10-03"},{"lineNumber":68,"author":{"gitId":"shenyih0ng"},"content":"    public String getValue() {","lastModifiedDate":"2022-10-03"},{"lineNumber":69,"author":{"gitId":"shenyih0ng"},"content":"      return value;","lastModifiedDate":"2022-10-03"},{"lineNumber":70,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":71,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":72,"author":{"gitId":"shenyih0ng"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":73,"author":{"gitId":"shenyih0ng"},"content":"    public String toString() {","lastModifiedDate":"2022-10-03"},{"lineNumber":74,"author":{"gitId":"shenyih0ng"},"content":"      return String.valueOf(value);","lastModifiedDate":"2022-10-03"},{"lineNumber":75,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":76,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":77,"author":{"gitId":"shenyih0ng"},"content":"    @JsonCreator","lastModifiedDate":"2022-10-03"},{"lineNumber":78,"author":{"gitId":"shenyih0ng"},"content":"    public static DayEnum fromValue(String value) {","lastModifiedDate":"2022-10-03"},{"lineNumber":79,"author":{"gitId":"shenyih0ng"},"content":"      for (DayEnum b : DayEnum.values()) {","lastModifiedDate":"2022-10-03"},{"lineNumber":80,"author":{"gitId":"shenyih0ng"},"content":"        if (b.value.equals(value)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":81,"author":{"gitId":"shenyih0ng"},"content":"          return b;","lastModifiedDate":"2022-10-03"},{"lineNumber":82,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":83,"author":{"gitId":"shenyih0ng"},"content":"      }","lastModifiedDate":"2022-10-03"},{"lineNumber":84,"author":{"gitId":"shenyih0ng"},"content":"      throw new IllegalArgumentException(\"Unexpected value \u0027\" + value + \"\u0027\");","lastModifiedDate":"2022-10-03"},{"lineNumber":85,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":86,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":87,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":88,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_DAY \u003d \"day\";","lastModifiedDate":"2022-10-03"},{"lineNumber":89,"author":{"gitId":"shenyih0ng"},"content":"  private DayEnum day;","lastModifiedDate":"2022-10-03"},{"lineNumber":90,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":91,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_CLASSES \u003d \"classes\";","lastModifiedDate":"2022-10-03"},{"lineNumber":92,"author":{"gitId":"shenyih0ng"},"content":"  private List\u003cVenueLesson\u003e classes \u003d null;","lastModifiedDate":"2022-10-03"},{"lineNumber":93,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":94,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":95,"author":{"gitId":"shenyih0ng"},"content":"   * Gets or Sets inner","lastModifiedDate":"2022-10-03"},{"lineNumber":96,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":97,"author":{"gitId":"shenyih0ng"},"content":"  public enum InnerEnum {","lastModifiedDate":"2022-10-03"},{"lineNumber":98,"author":{"gitId":"shenyih0ng"},"content":"    OCCUPIED(\"occupied\");","lastModifiedDate":"2022-10-03"},{"lineNumber":99,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":100,"author":{"gitId":"shenyih0ng"},"content":"    private String value;","lastModifiedDate":"2022-10-03"},{"lineNumber":101,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":102,"author":{"gitId":"shenyih0ng"},"content":"    InnerEnum(String value) {","lastModifiedDate":"2022-10-03"},{"lineNumber":103,"author":{"gitId":"shenyih0ng"},"content":"      this.value \u003d value;","lastModifiedDate":"2022-10-03"},{"lineNumber":104,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":105,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":106,"author":{"gitId":"shenyih0ng"},"content":"    @JsonValue","lastModifiedDate":"2022-10-03"},{"lineNumber":107,"author":{"gitId":"shenyih0ng"},"content":"    public String getValue() {","lastModifiedDate":"2022-10-03"},{"lineNumber":108,"author":{"gitId":"shenyih0ng"},"content":"      return value;","lastModifiedDate":"2022-10-03"},{"lineNumber":109,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":110,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":111,"author":{"gitId":"shenyih0ng"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":112,"author":{"gitId":"shenyih0ng"},"content":"    public String toString() {","lastModifiedDate":"2022-10-03"},{"lineNumber":113,"author":{"gitId":"shenyih0ng"},"content":"      return String.valueOf(value);","lastModifiedDate":"2022-10-03"},{"lineNumber":114,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":115,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":116,"author":{"gitId":"shenyih0ng"},"content":"    @JsonCreator","lastModifiedDate":"2022-10-03"},{"lineNumber":117,"author":{"gitId":"shenyih0ng"},"content":"    public static InnerEnum fromValue(String value) {","lastModifiedDate":"2022-10-03"},{"lineNumber":118,"author":{"gitId":"shenyih0ng"},"content":"      for (InnerEnum b : InnerEnum.values()) {","lastModifiedDate":"2022-10-03"},{"lineNumber":119,"author":{"gitId":"shenyih0ng"},"content":"        if (b.value.equals(value)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":120,"author":{"gitId":"shenyih0ng"},"content":"          return b;","lastModifiedDate":"2022-10-03"},{"lineNumber":121,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":122,"author":{"gitId":"shenyih0ng"},"content":"      }","lastModifiedDate":"2022-10-03"},{"lineNumber":123,"author":{"gitId":"shenyih0ng"},"content":"      throw new IllegalArgumentException(\"Unexpected value \u0027\" + value + \"\u0027\");","lastModifiedDate":"2022-10-03"},{"lineNumber":124,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":125,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":126,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":127,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_AVAILABILITY \u003d \"availability\";","lastModifiedDate":"2022-10-03"},{"lineNumber":128,"author":{"gitId":"shenyih0ng"},"content":"  private Map\u003cString, InnerEnum\u003e availability \u003d null;","lastModifiedDate":"2022-10-03"},{"lineNumber":129,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":130,"author":{"gitId":"shenyih0ng"},"content":"  public VenueInformation() {","lastModifiedDate":"2022-10-03"},{"lineNumber":131,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":132,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":133,"author":{"gitId":"shenyih0ng"},"content":"  public VenueInformation day(DayEnum day) {","lastModifiedDate":"2022-10-03"},{"lineNumber":134,"author":{"gitId":"shenyih0ng"},"content":"    this.day \u003d day;","lastModifiedDate":"2022-10-03"},{"lineNumber":135,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":136,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":137,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":138,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":139,"author":{"gitId":"shenyih0ng"},"content":"   * Get day","lastModifiedDate":"2022-10-03"},{"lineNumber":140,"author":{"gitId":"shenyih0ng"},"content":"   * @return day","lastModifiedDate":"2022-10-03"},{"lineNumber":141,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":142,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nullable","lastModifiedDate":"2022-10-03"},{"lineNumber":143,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":144,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_DAY)","lastModifiedDate":"2022-10-03"},{"lineNumber":145,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":146,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":147,"author":{"gitId":"shenyih0ng"},"content":"  public DayEnum getDay() {","lastModifiedDate":"2022-10-03"},{"lineNumber":148,"author":{"gitId":"shenyih0ng"},"content":"    return day;","lastModifiedDate":"2022-10-03"},{"lineNumber":149,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":150,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":151,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":152,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_DAY)","lastModifiedDate":"2022-10-03"},{"lineNumber":153,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":154,"author":{"gitId":"shenyih0ng"},"content":"  public void setDay(DayEnum day) {","lastModifiedDate":"2022-10-03"},{"lineNumber":155,"author":{"gitId":"shenyih0ng"},"content":"    this.day \u003d day;","lastModifiedDate":"2022-10-03"},{"lineNumber":156,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":157,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":158,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":159,"author":{"gitId":"shenyih0ng"},"content":"  public VenueInformation classes(List\u003cVenueLesson\u003e classes) {","lastModifiedDate":"2022-10-03"},{"lineNumber":160,"author":{"gitId":"shenyih0ng"},"content":"    this.classes \u003d classes;","lastModifiedDate":"2022-10-03"},{"lineNumber":161,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":162,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":163,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":164,"author":{"gitId":"shenyih0ng"},"content":"  public VenueInformation addClassesItem(VenueLesson classesItem) {","lastModifiedDate":"2022-10-03"},{"lineNumber":165,"author":{"gitId":"shenyih0ng"},"content":"    if (this.classes \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":166,"author":{"gitId":"shenyih0ng"},"content":"      this.classes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-03"},{"lineNumber":167,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":168,"author":{"gitId":"shenyih0ng"},"content":"    this.classes.add(classesItem);","lastModifiedDate":"2022-10-03"},{"lineNumber":169,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":170,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":171,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":172,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":173,"author":{"gitId":"shenyih0ng"},"content":"   * Get classes","lastModifiedDate":"2022-10-03"},{"lineNumber":174,"author":{"gitId":"shenyih0ng"},"content":"   * @return classes","lastModifiedDate":"2022-10-03"},{"lineNumber":175,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":176,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nullable","lastModifiedDate":"2022-10-03"},{"lineNumber":177,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":178,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_CLASSES)","lastModifiedDate":"2022-10-03"},{"lineNumber":179,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":180,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":181,"author":{"gitId":"shenyih0ng"},"content":"  public List\u003cVenueLesson\u003e getClasses() {","lastModifiedDate":"2022-10-03"},{"lineNumber":182,"author":{"gitId":"shenyih0ng"},"content":"    return classes;","lastModifiedDate":"2022-10-03"},{"lineNumber":183,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":184,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":185,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":186,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_CLASSES)","lastModifiedDate":"2022-10-03"},{"lineNumber":187,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":188,"author":{"gitId":"shenyih0ng"},"content":"  public void setClasses(List\u003cVenueLesson\u003e classes) {","lastModifiedDate":"2022-10-03"},{"lineNumber":189,"author":{"gitId":"shenyih0ng"},"content":"    this.classes \u003d classes;","lastModifiedDate":"2022-10-03"},{"lineNumber":190,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":191,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":192,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":193,"author":{"gitId":"shenyih0ng"},"content":"  public VenueInformation availability(Map\u003cString, InnerEnum\u003e availability) {","lastModifiedDate":"2022-10-03"},{"lineNumber":194,"author":{"gitId":"shenyih0ng"},"content":"    this.availability \u003d availability;","lastModifiedDate":"2022-10-03"},{"lineNumber":195,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":196,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":197,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":198,"author":{"gitId":"shenyih0ng"},"content":"  public VenueInformation putAvailabilityItem(String key, InnerEnum availabilityItem) {","lastModifiedDate":"2022-10-03"},{"lineNumber":199,"author":{"gitId":"shenyih0ng"},"content":"    if (this.availability \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":200,"author":{"gitId":"shenyih0ng"},"content":"      this.availability \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2022-10-03"},{"lineNumber":201,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":202,"author":{"gitId":"shenyih0ng"},"content":"    this.availability.put(key, availabilityItem);","lastModifiedDate":"2022-10-03"},{"lineNumber":203,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":204,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":205,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":206,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":207,"author":{"gitId":"shenyih0ng"},"content":"   * Get availability","lastModifiedDate":"2022-10-03"},{"lineNumber":208,"author":{"gitId":"shenyih0ng"},"content":"   * @return availability","lastModifiedDate":"2022-10-03"},{"lineNumber":209,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":210,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nullable","lastModifiedDate":"2022-10-03"},{"lineNumber":211,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"{\\\"0900\\\":\\\"occupied\\\",\\\"0930\\\":\\\"occupied\\\",\\\"1000\\\":\\\"occupied\\\"}\", value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":212,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_AVAILABILITY)","lastModifiedDate":"2022-10-03"},{"lineNumber":213,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":214,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":215,"author":{"gitId":"shenyih0ng"},"content":"  public Map\u003cString, InnerEnum\u003e getAvailability() {","lastModifiedDate":"2022-10-03"},{"lineNumber":216,"author":{"gitId":"shenyih0ng"},"content":"    return availability;","lastModifiedDate":"2022-10-03"},{"lineNumber":217,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":218,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":219,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":220,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_AVAILABILITY)","lastModifiedDate":"2022-10-03"},{"lineNumber":221,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":222,"author":{"gitId":"shenyih0ng"},"content":"  public void setAvailability(Map\u003cString, InnerEnum\u003e availability) {","lastModifiedDate":"2022-10-03"},{"lineNumber":223,"author":{"gitId":"shenyih0ng"},"content":"    this.availability \u003d availability;","lastModifiedDate":"2022-10-03"},{"lineNumber":224,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":225,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":226,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":227,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":228,"author":{"gitId":"shenyih0ng"},"content":"   * Return true if this VenueInformation object is equal to o.","lastModifiedDate":"2022-10-03"},{"lineNumber":229,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":230,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":231,"author":{"gitId":"shenyih0ng"},"content":"  public boolean equals(Object o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":232,"author":{"gitId":"shenyih0ng"},"content":"    if (this \u003d\u003d o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":233,"author":{"gitId":"shenyih0ng"},"content":"      return true;","lastModifiedDate":"2022-10-03"},{"lineNumber":234,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":235,"author":{"gitId":"shenyih0ng"},"content":"    if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {","lastModifiedDate":"2022-10-03"},{"lineNumber":236,"author":{"gitId":"shenyih0ng"},"content":"      return false;","lastModifiedDate":"2022-10-03"},{"lineNumber":237,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":238,"author":{"gitId":"shenyih0ng"},"content":"    VenueInformation venueInformation \u003d (VenueInformation) o;","lastModifiedDate":"2022-10-03"},{"lineNumber":239,"author":{"gitId":"shenyih0ng"},"content":"    return Objects.equals(this.day, venueInformation.day) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":240,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.classes, venueInformation.classes) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":241,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.availability, venueInformation.availability);","lastModifiedDate":"2022-10-03"},{"lineNumber":242,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":243,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":244,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":245,"author":{"gitId":"shenyih0ng"},"content":"  public int hashCode() {","lastModifiedDate":"2022-10-03"},{"lineNumber":246,"author":{"gitId":"shenyih0ng"},"content":"    return Objects.hash(day, classes, availability);","lastModifiedDate":"2022-10-03"},{"lineNumber":247,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":248,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":249,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":250,"author":{"gitId":"shenyih0ng"},"content":"  public String toString() {","lastModifiedDate":"2022-10-03"},{"lineNumber":251,"author":{"gitId":"shenyih0ng"},"content":"    StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2022-10-03"},{"lineNumber":252,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"class VenueInformation {\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":253,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    day: \").append(toIndentedString(day)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":254,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    classes: \").append(toIndentedString(classes)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":255,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    availability: \").append(toIndentedString(availability)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":256,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"}\");","lastModifiedDate":"2022-10-03"},{"lineNumber":257,"author":{"gitId":"shenyih0ng"},"content":"    return sb.toString();","lastModifiedDate":"2022-10-03"},{"lineNumber":258,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":259,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":260,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":261,"author":{"gitId":"shenyih0ng"},"content":"   * Convert the given object to string with each line indented by 4 spaces","lastModifiedDate":"2022-10-03"},{"lineNumber":262,"author":{"gitId":"shenyih0ng"},"content":"   * (except the first line).","lastModifiedDate":"2022-10-03"},{"lineNumber":263,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":264,"author":{"gitId":"shenyih0ng"},"content":"  private String toIndentedString(Object o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":265,"author":{"gitId":"shenyih0ng"},"content":"    if (o \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":266,"author":{"gitId":"shenyih0ng"},"content":"      return \"null\";","lastModifiedDate":"2022-10-03"},{"lineNumber":267,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":268,"author":{"gitId":"shenyih0ng"},"content":"    return o.toString().replace(\"\\n\", \"\\n    \");","lastModifiedDate":"2022-10-03"},{"lineNumber":269,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":270,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":271,"author":{"gitId":"shenyih0ng"},"content":"}","lastModifiedDate":"2022-10-03"},{"lineNumber":272,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"shenyih0ng":272}},{"path":"src/main/java/org/openapitools/client/model/VenueLesson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"shenyih0ng"},"content":"/*","lastModifiedDate":"2022-10-03"},{"lineNumber":2,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API contains data used to render \u003chttps://nusmods.com\u003e. It includes data on modules offered by NUS and their timetables, as well as information on the locations the classes take place in. You are welcome to use and experiment with the data, which is extracted from official APIs provided by the Registrar\u0027s Office.  The API consists of static JSON files scraped daily from the school\u0027s APIs. This means it only partially follow REST conventions, and all resources are read only. All successful responses will return JSON, and all endpoints end in `.json`.  The shape of the data returned by these endpoints are designed for NUSMods in mind. If you have any questions or find that you need the data in other shapes for other purposes, feel free to reach out to us:  - **Telegram**: \u003chttps://telegram.me/nusmods\u003e - **Mailing list**: \u003cnusmods@googlegroups.com\u003e (for security related issues please email \u003cmods@nusmods.com\u003e instead)  ## Fetching data  Any HTTP client can be used to fetch data from the API. HTTPS is preferred, but the server will also respond to HTTP requests. The server supports HTTP 1.1 as well as HTTP 2 over HTTPS, and supports gzip compression.  The API has no authentication, and is not rate limited. While the server can respond to a large number of requests simultaneously, we request that you be polite with resource usage so as not to disrupt nusmods.com, which relies on the same API server. In general there is no need to fetch data from the API more than once per day, as that is the frequency at which we update the data.  [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) headers are enabled on all endpoints, so client-side JavaScript can use also use the API.  ## TypeScript types  Since the NUSMods is written in TypeScript, typings are available in the source for the scraper. These may be easier to read than the documentation generated by Swagger.  - Module types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/modules.ts\u003e - Venue types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/venues.ts\u003e  ## Data  Below are some notes about the data returned from the API. Feel free to talk to us or create an issue if any of it is not clear.  ### Module data  Module endpoints return information on modules offered by NUS. Most of the module data is self-explanatory, but some of the data are more complex and is explained here.  #### Lessons  Each lesson in a timetable has a lesson type `lessonType` and class number `ClassNo`. Every student must take one of each lesson type offered by the module. For example, this module offers two tutorials and one lecture. That means the student must attend the lecture, and can choose one of the two tutorials to attend.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"01\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1100\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"COM1-0207\\\"     },     {       \\\"classNo\\\": \\\"02\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Friday\\\",       \\\"startTime\\\": \\\"0900\\\",       \\\"endTime\\\": \\\"1000\\\",       \\\"venue\\\": \\\"COM1-0209\\\"     }   ] } ```  Each lesson has a `classNo` key. There can be multiple lessons of the same type and class number, in which case students must attend both. In this example, students can choose to attend either lecture group 1 on Tuesdays and Wednesdays, or lecture group 2 on Mondays and Wednesdays.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1400\\\",       \\\"endTime\\\": \\\"1500\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Monday\\\",       \\\"startTime\\\": \\\"1000\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1500\\\",       \\\"endTime\\\": \\\"1600\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     }   ] } ```  #### Lesson Weeks  The `weeks` key on lessons can return data in one of two forms.  Weeks is usually a sorted array of numbers. In this case it represents the school weeks the lesson occurs on, from 1 to 13.  Some classes have lessons outside of the school timetable. In this case a `WeekRange` object is returned. The object will always contain a `start` and `end` key representing the start and end date of lessons. The example below has classes every week from 17th Jan to 18th April.  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-04-18\\\" } ```  Optionally it can also include `weekInterval`, a positive integer describing the number of weeks between each lesson, and `weeks`, an array of positive integers describing the weeks on which the lesson will fall, with week 1 being the starting date. If these are not present you can assume lessons will occur every week.  The following example has lessons on 17th Jan (week 1), 24th Jan (week 2), 7th Feb (week 4) and 21st Feb (week 6).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-21\\\",   \\\"weeks\\\": [1, 2, 4, 6] } ```  The following example has lessons on 17th Jan (week 1), 31st Jan (week 3), 14th Feb (week 5) and 28th Feb (week 7).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-28\\\",   \\\"weekInterval\\\": 2 } ```  #### Workload  The `workload` key can return data in one of two forms.  Workload is usually a **5-tuple of numbers**, describing the estimated number of hours per week the student is expected to put in for the module for **lectures, tutorials, laboratory, projects/fieldwork, and preparatory work** respectively. For example, a workload of `[2, 1, 1, 3, 3]` means the student should spend every week  - 2 hours in lectures - 1 hour in tutorials - 1 hour at the lab - 3 hours doing project work - 3 hours preparing for classes  Each module credit represents 2.5 hours of work each week, so the standard 4 MC module represents 10 hours of work each week. Module credit may not be integers.  Note that this is only an estimate, and may be outdated or differ significantly in reality. Some modules also incorrectly lists the **total** workload hours instead of weekly, so very large values may show up.  This value is parsed from a string provided by the school, and occasionally this field will contain unusual values which cannot be parsed. In this case this field will contain the original **string** instead, which should be displayed as-is to the user.  #### Prerequisite, corequisite and preclusions  These three keys determine whether a student can take a module.  **Prerequisites** are requirements you have to meet before you can take a module. These are usually in the form of other modules (see prerequisite tree below for a machine readable format), but can also be things like \u0027taken A-level H2 math\u0027 or \u002770 MCs and above\u0027.  **Preclusions** refer to modules or requirements that cannot be taken if this module is taken, and vice versa. These are usually modules whose content overlaps significantly with this module, and can usually be used to replace each other to fulfill prerequisites.  **Corequisites** are modules that must be taken together with this module in the same semester. This usually refer to twined modules - modules which have linked syllabuses.  #### Prerequisite Tree  The `prereqTree` key is return on the individual module endpoint (`/modules/{moduleCode`). Not all modules have prerequisites, and some have prerequisites that cannot be properly represented as a tree, in which case this key will not appear.  This describes the prerequisites that need to be fulfilled before this module can be taken. The data structure is recursive and represents a tree.  ```json {   \\\"and\\\": [     \\\"CS1231\\\",     {       \\\"or\\\": [\\\"CS1010S\\\", \\\"CS1010X\\\"]     }   ] } ```  In the example, this module requires CS1231 and either CS1010S or CS1010X. This can be visualized as  ```            ┌ CS1231 ── all of ─┤            │         ┌ CS1010            └ one of ─┤                      └ CS1010X ```  The module information also contains the inverse of this, that is, modules whose requirements are fulfilled by this module (taking this module will allow you to take these modules in the following semester). The data is found on the `fulfillRequirements` key as an array of module codes.  ### Venue data  Venue data is simply the module timetable restructured to show the lessons happening at each classroom.  The venue list endpoint returns a list of all locations that are used in the semester. Note that this is not a comprehensive list of locations, but rather just a list of venues that appears in module lessons.  The venue information endpoint returns the full class and occupancy information about a venue. The `classes` key contains a list of lessons similar to the `timetable` key in module data, but without a `venue` key and with `moduleCode`.","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"shenyih0ng"},"content":" * The version of the OpenAPI document: 2.0.0","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"shenyih0ng"},"content":" * Contact: nusmods@googlegroups.com","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"shenyih0ng"},"content":" * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"shenyih0ng"},"content":" * https://openapi-generator.tech","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"shenyih0ng"},"content":" * Do not edit the class manually.","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"shenyih0ng"},"content":"package org.openapitools.client.model;","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Objects;","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Map;","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"shenyih0ng"},"content":"import java.util.HashMap;","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonInclude;","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonTypeName;","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"shenyih0ng"},"content":"import io.swagger.annotations.ApiModel;","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"shenyih0ng"},"content":"import io.swagger.annotations.ApiModelProperty;","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"shenyih0ng"},"content":"import java.math.BigDecimal;","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.client.model.LessonWeeks;","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonPropertyOrder;","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"shenyih0ng"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"shenyih0ng"},"content":" * VenueLesson","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"shenyih0ng"},"content":"@JsonPropertyOrder({","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"shenyih0ng"},"content":"  VenueLesson.JSON_PROPERTY_CLASS_NO,","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"shenyih0ng"},"content":"  VenueLesson.JSON_PROPERTY_START_TIME,","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"shenyih0ng"},"content":"  VenueLesson.JSON_PROPERTY_END_TIME,","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"shenyih0ng"},"content":"  VenueLesson.JSON_PROPERTY_WEEKS,","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"shenyih0ng"},"content":"  VenueLesson.JSON_PROPERTY_VENUE,","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"shenyih0ng"},"content":"  VenueLesson.JSON_PROPERTY_DAY,","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"shenyih0ng"},"content":"  VenueLesson.JSON_PROPERTY_LESSON_TYPE,","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"shenyih0ng"},"content":"  VenueLesson.JSON_PROPERTY_SIZE,","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"shenyih0ng"},"content":"  VenueLesson.JSON_PROPERTY_MODULE_CODE","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"shenyih0ng"},"content":"})","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"shenyih0ng"},"content":"@javax.annotation.processing.Generated(value \u003d \"org.openapitools.codegen.languages.JavaClientCodegen\", date \u003d \"2022-10-03T22:22:26.802458+08:00[Asia/Singapore]\")","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"shenyih0ng"},"content":"public class VenueLesson {","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_CLASS_NO \u003d \"classNo\";","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"shenyih0ng"},"content":"  private String classNo;","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_START_TIME \u003d \"startTime\";","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"shenyih0ng"},"content":"  private String startTime;","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_END_TIME \u003d \"endTime\";","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"shenyih0ng"},"content":"  private String endTime;","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_WEEKS \u003d \"weeks\";","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"shenyih0ng"},"content":"  private LessonWeeks weeks;","lastModifiedDate":"2022-10-03"},{"lineNumber":59,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":60,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_VENUE \u003d \"venue\";","lastModifiedDate":"2022-10-03"},{"lineNumber":61,"author":{"gitId":"shenyih0ng"},"content":"  private String venue;","lastModifiedDate":"2022-10-03"},{"lineNumber":62,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":63,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_DAY \u003d \"day\";","lastModifiedDate":"2022-10-03"},{"lineNumber":64,"author":{"gitId":"shenyih0ng"},"content":"  private String day;","lastModifiedDate":"2022-10-03"},{"lineNumber":65,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":66,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_LESSON_TYPE \u003d \"lessonType\";","lastModifiedDate":"2022-10-03"},{"lineNumber":67,"author":{"gitId":"shenyih0ng"},"content":"  private String lessonType;","lastModifiedDate":"2022-10-03"},{"lineNumber":68,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":69,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_SIZE \u003d \"size\";","lastModifiedDate":"2022-10-03"},{"lineNumber":70,"author":{"gitId":"shenyih0ng"},"content":"  private BigDecimal size;","lastModifiedDate":"2022-10-03"},{"lineNumber":71,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":72,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_MODULE_CODE \u003d \"moduleCode\";","lastModifiedDate":"2022-10-03"},{"lineNumber":73,"author":{"gitId":"shenyih0ng"},"content":"  private String moduleCode;","lastModifiedDate":"2022-10-03"},{"lineNumber":74,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":75,"author":{"gitId":"shenyih0ng"},"content":"  public VenueLesson() {","lastModifiedDate":"2022-10-03"},{"lineNumber":76,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":77,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":78,"author":{"gitId":"shenyih0ng"},"content":"  public VenueLesson classNo(String classNo) {","lastModifiedDate":"2022-10-03"},{"lineNumber":79,"author":{"gitId":"shenyih0ng"},"content":"    this.classNo \u003d classNo;","lastModifiedDate":"2022-10-03"},{"lineNumber":80,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":81,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":82,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":83,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":84,"author":{"gitId":"shenyih0ng"},"content":"   * Get classNo","lastModifiedDate":"2022-10-03"},{"lineNumber":85,"author":{"gitId":"shenyih0ng"},"content":"   * @return classNo","lastModifiedDate":"2022-10-03"},{"lineNumber":86,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":87,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":88,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"08\", required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":89,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_CLASS_NO)","lastModifiedDate":"2022-10-03"},{"lineNumber":90,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":91,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":92,"author":{"gitId":"shenyih0ng"},"content":"  public String getClassNo() {","lastModifiedDate":"2022-10-03"},{"lineNumber":93,"author":{"gitId":"shenyih0ng"},"content":"    return classNo;","lastModifiedDate":"2022-10-03"},{"lineNumber":94,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":95,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":96,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":97,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_CLASS_NO)","lastModifiedDate":"2022-10-03"},{"lineNumber":98,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":99,"author":{"gitId":"shenyih0ng"},"content":"  public void setClassNo(String classNo) {","lastModifiedDate":"2022-10-03"},{"lineNumber":100,"author":{"gitId":"shenyih0ng"},"content":"    this.classNo \u003d classNo;","lastModifiedDate":"2022-10-03"},{"lineNumber":101,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":102,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":103,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":104,"author":{"gitId":"shenyih0ng"},"content":"  public VenueLesson startTime(String startTime) {","lastModifiedDate":"2022-10-03"},{"lineNumber":105,"author":{"gitId":"shenyih0ng"},"content":"    this.startTime \u003d startTime;","lastModifiedDate":"2022-10-03"},{"lineNumber":106,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":107,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":108,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":109,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":110,"author":{"gitId":"shenyih0ng"},"content":"   * Get startTime","lastModifiedDate":"2022-10-03"},{"lineNumber":111,"author":{"gitId":"shenyih0ng"},"content":"   * @return startTime","lastModifiedDate":"2022-10-03"},{"lineNumber":112,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":113,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":114,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"1100\", required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":115,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_START_TIME)","lastModifiedDate":"2022-10-03"},{"lineNumber":116,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":117,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":118,"author":{"gitId":"shenyih0ng"},"content":"  public String getStartTime() {","lastModifiedDate":"2022-10-03"},{"lineNumber":119,"author":{"gitId":"shenyih0ng"},"content":"    return startTime;","lastModifiedDate":"2022-10-03"},{"lineNumber":120,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":121,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":122,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":123,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_START_TIME)","lastModifiedDate":"2022-10-03"},{"lineNumber":124,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":125,"author":{"gitId":"shenyih0ng"},"content":"  public void setStartTime(String startTime) {","lastModifiedDate":"2022-10-03"},{"lineNumber":126,"author":{"gitId":"shenyih0ng"},"content":"    this.startTime \u003d startTime;","lastModifiedDate":"2022-10-03"},{"lineNumber":127,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":128,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":129,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":130,"author":{"gitId":"shenyih0ng"},"content":"  public VenueLesson endTime(String endTime) {","lastModifiedDate":"2022-10-03"},{"lineNumber":131,"author":{"gitId":"shenyih0ng"},"content":"    this.endTime \u003d endTime;","lastModifiedDate":"2022-10-03"},{"lineNumber":132,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":133,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":134,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":135,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":136,"author":{"gitId":"shenyih0ng"},"content":"   * Get endTime","lastModifiedDate":"2022-10-03"},{"lineNumber":137,"author":{"gitId":"shenyih0ng"},"content":"   * @return endTime","lastModifiedDate":"2022-10-03"},{"lineNumber":138,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":139,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":140,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"1200\", required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":141,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_END_TIME)","lastModifiedDate":"2022-10-03"},{"lineNumber":142,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":143,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":144,"author":{"gitId":"shenyih0ng"},"content":"  public String getEndTime() {","lastModifiedDate":"2022-10-03"},{"lineNumber":145,"author":{"gitId":"shenyih0ng"},"content":"    return endTime;","lastModifiedDate":"2022-10-03"},{"lineNumber":146,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":147,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":148,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":149,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_END_TIME)","lastModifiedDate":"2022-10-03"},{"lineNumber":150,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":151,"author":{"gitId":"shenyih0ng"},"content":"  public void setEndTime(String endTime) {","lastModifiedDate":"2022-10-03"},{"lineNumber":152,"author":{"gitId":"shenyih0ng"},"content":"    this.endTime \u003d endTime;","lastModifiedDate":"2022-10-03"},{"lineNumber":153,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":154,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":155,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":156,"author":{"gitId":"shenyih0ng"},"content":"  public VenueLesson weeks(LessonWeeks weeks) {","lastModifiedDate":"2022-10-03"},{"lineNumber":157,"author":{"gitId":"shenyih0ng"},"content":"    this.weeks \u003d weeks;","lastModifiedDate":"2022-10-03"},{"lineNumber":158,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":159,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":160,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":161,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":162,"author":{"gitId":"shenyih0ng"},"content":"   * Get weeks","lastModifiedDate":"2022-10-03"},{"lineNumber":163,"author":{"gitId":"shenyih0ng"},"content":"   * @return weeks","lastModifiedDate":"2022-10-03"},{"lineNumber":164,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":165,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":166,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":167,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_WEEKS)","lastModifiedDate":"2022-10-03"},{"lineNumber":168,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":169,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":170,"author":{"gitId":"shenyih0ng"},"content":"  public LessonWeeks getWeeks() {","lastModifiedDate":"2022-10-03"},{"lineNumber":171,"author":{"gitId":"shenyih0ng"},"content":"    return weeks;","lastModifiedDate":"2022-10-03"},{"lineNumber":172,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":173,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":174,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":175,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_WEEKS)","lastModifiedDate":"2022-10-03"},{"lineNumber":176,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":177,"author":{"gitId":"shenyih0ng"},"content":"  public void setWeeks(LessonWeeks weeks) {","lastModifiedDate":"2022-10-03"},{"lineNumber":178,"author":{"gitId":"shenyih0ng"},"content":"    this.weeks \u003d weeks;","lastModifiedDate":"2022-10-03"},{"lineNumber":179,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":180,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":181,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":182,"author":{"gitId":"shenyih0ng"},"content":"  public VenueLesson venue(String venue) {","lastModifiedDate":"2022-10-03"},{"lineNumber":183,"author":{"gitId":"shenyih0ng"},"content":"    this.venue \u003d venue;","lastModifiedDate":"2022-10-03"},{"lineNumber":184,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":185,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":186,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":187,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":188,"author":{"gitId":"shenyih0ng"},"content":"   * Get venue","lastModifiedDate":"2022-10-03"},{"lineNumber":189,"author":{"gitId":"shenyih0ng"},"content":"   * @return venue","lastModifiedDate":"2022-10-03"},{"lineNumber":190,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":191,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":192,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"COM1-0208\", required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":193,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_VENUE)","lastModifiedDate":"2022-10-03"},{"lineNumber":194,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":195,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":196,"author":{"gitId":"shenyih0ng"},"content":"  public String getVenue() {","lastModifiedDate":"2022-10-03"},{"lineNumber":197,"author":{"gitId":"shenyih0ng"},"content":"    return venue;","lastModifiedDate":"2022-10-03"},{"lineNumber":198,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":199,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":200,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":201,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_VENUE)","lastModifiedDate":"2022-10-03"},{"lineNumber":202,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":203,"author":{"gitId":"shenyih0ng"},"content":"  public void setVenue(String venue) {","lastModifiedDate":"2022-10-03"},{"lineNumber":204,"author":{"gitId":"shenyih0ng"},"content":"    this.venue \u003d venue;","lastModifiedDate":"2022-10-03"},{"lineNumber":205,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":206,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":207,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":208,"author":{"gitId":"shenyih0ng"},"content":"  public VenueLesson day(String day) {","lastModifiedDate":"2022-10-03"},{"lineNumber":209,"author":{"gitId":"shenyih0ng"},"content":"    this.day \u003d day;","lastModifiedDate":"2022-10-03"},{"lineNumber":210,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":211,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":212,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":213,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":214,"author":{"gitId":"shenyih0ng"},"content":"   * Get day","lastModifiedDate":"2022-10-03"},{"lineNumber":215,"author":{"gitId":"shenyih0ng"},"content":"   * @return day","lastModifiedDate":"2022-10-03"},{"lineNumber":216,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":217,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nullable","lastModifiedDate":"2022-10-03"},{"lineNumber":218,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"Friday\", value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":219,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_DAY)","lastModifiedDate":"2022-10-03"},{"lineNumber":220,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":221,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":222,"author":{"gitId":"shenyih0ng"},"content":"  public String getDay() {","lastModifiedDate":"2022-10-03"},{"lineNumber":223,"author":{"gitId":"shenyih0ng"},"content":"    return day;","lastModifiedDate":"2022-10-03"},{"lineNumber":224,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":225,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":226,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":227,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_DAY)","lastModifiedDate":"2022-10-03"},{"lineNumber":228,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":229,"author":{"gitId":"shenyih0ng"},"content":"  public void setDay(String day) {","lastModifiedDate":"2022-10-03"},{"lineNumber":230,"author":{"gitId":"shenyih0ng"},"content":"    this.day \u003d day;","lastModifiedDate":"2022-10-03"},{"lineNumber":231,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":232,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":233,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":234,"author":{"gitId":"shenyih0ng"},"content":"  public VenueLesson lessonType(String lessonType) {","lastModifiedDate":"2022-10-03"},{"lineNumber":235,"author":{"gitId":"shenyih0ng"},"content":"    this.lessonType \u003d lessonType;","lastModifiedDate":"2022-10-03"},{"lineNumber":236,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":237,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":238,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":239,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":240,"author":{"gitId":"shenyih0ng"},"content":"   * Get lessonType","lastModifiedDate":"2022-10-03"},{"lineNumber":241,"author":{"gitId":"shenyih0ng"},"content":"   * @return lessonType","lastModifiedDate":"2022-10-03"},{"lineNumber":242,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":243,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":244,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"Tutorial\", required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":245,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_LESSON_TYPE)","lastModifiedDate":"2022-10-03"},{"lineNumber":246,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":247,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":248,"author":{"gitId":"shenyih0ng"},"content":"  public String getLessonType() {","lastModifiedDate":"2022-10-03"},{"lineNumber":249,"author":{"gitId":"shenyih0ng"},"content":"    return lessonType;","lastModifiedDate":"2022-10-03"},{"lineNumber":250,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":251,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":252,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":253,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_LESSON_TYPE)","lastModifiedDate":"2022-10-03"},{"lineNumber":254,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":255,"author":{"gitId":"shenyih0ng"},"content":"  public void setLessonType(String lessonType) {","lastModifiedDate":"2022-10-03"},{"lineNumber":256,"author":{"gitId":"shenyih0ng"},"content":"    this.lessonType \u003d lessonType;","lastModifiedDate":"2022-10-03"},{"lineNumber":257,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":258,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":259,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":260,"author":{"gitId":"shenyih0ng"},"content":"  public VenueLesson size(BigDecimal size) {","lastModifiedDate":"2022-10-03"},{"lineNumber":261,"author":{"gitId":"shenyih0ng"},"content":"    this.size \u003d size;","lastModifiedDate":"2022-10-03"},{"lineNumber":262,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":263,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":264,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":265,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":266,"author":{"gitId":"shenyih0ng"},"content":"   * Get size","lastModifiedDate":"2022-10-03"},{"lineNumber":267,"author":{"gitId":"shenyih0ng"},"content":"   * @return size","lastModifiedDate":"2022-10-03"},{"lineNumber":268,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":269,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nullable","lastModifiedDate":"2022-10-03"},{"lineNumber":270,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"30\", value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":271,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_SIZE)","lastModifiedDate":"2022-10-03"},{"lineNumber":272,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":273,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":274,"author":{"gitId":"shenyih0ng"},"content":"  public BigDecimal getSize() {","lastModifiedDate":"2022-10-03"},{"lineNumber":275,"author":{"gitId":"shenyih0ng"},"content":"    return size;","lastModifiedDate":"2022-10-03"},{"lineNumber":276,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":277,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":278,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":279,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_SIZE)","lastModifiedDate":"2022-10-03"},{"lineNumber":280,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":281,"author":{"gitId":"shenyih0ng"},"content":"  public void setSize(BigDecimal size) {","lastModifiedDate":"2022-10-03"},{"lineNumber":282,"author":{"gitId":"shenyih0ng"},"content":"    this.size \u003d size;","lastModifiedDate":"2022-10-03"},{"lineNumber":283,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":284,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":285,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":286,"author":{"gitId":"shenyih0ng"},"content":"  public VenueLesson moduleCode(String moduleCode) {","lastModifiedDate":"2022-10-03"},{"lineNumber":287,"author":{"gitId":"shenyih0ng"},"content":"    this.moduleCode \u003d moduleCode;","lastModifiedDate":"2022-10-03"},{"lineNumber":288,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":289,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":290,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":291,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":292,"author":{"gitId":"shenyih0ng"},"content":"   * Get moduleCode","lastModifiedDate":"2022-10-03"},{"lineNumber":293,"author":{"gitId":"shenyih0ng"},"content":"   * @return moduleCode","lastModifiedDate":"2022-10-03"},{"lineNumber":294,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":295,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":296,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"CS1010S\", required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":297,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_MODULE_CODE)","lastModifiedDate":"2022-10-03"},{"lineNumber":298,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":299,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":300,"author":{"gitId":"shenyih0ng"},"content":"  public String getModuleCode() {","lastModifiedDate":"2022-10-03"},{"lineNumber":301,"author":{"gitId":"shenyih0ng"},"content":"    return moduleCode;","lastModifiedDate":"2022-10-03"},{"lineNumber":302,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":303,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":304,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":305,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_MODULE_CODE)","lastModifiedDate":"2022-10-03"},{"lineNumber":306,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":307,"author":{"gitId":"shenyih0ng"},"content":"  public void setModuleCode(String moduleCode) {","lastModifiedDate":"2022-10-03"},{"lineNumber":308,"author":{"gitId":"shenyih0ng"},"content":"    this.moduleCode \u003d moduleCode;","lastModifiedDate":"2022-10-03"},{"lineNumber":309,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":310,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":311,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":312,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":313,"author":{"gitId":"shenyih0ng"},"content":"   * Return true if this VenueLesson object is equal to o.","lastModifiedDate":"2022-10-03"},{"lineNumber":314,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":315,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":316,"author":{"gitId":"shenyih0ng"},"content":"  public boolean equals(Object o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":317,"author":{"gitId":"shenyih0ng"},"content":"    if (this \u003d\u003d o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":318,"author":{"gitId":"shenyih0ng"},"content":"      return true;","lastModifiedDate":"2022-10-03"},{"lineNumber":319,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":320,"author":{"gitId":"shenyih0ng"},"content":"    if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {","lastModifiedDate":"2022-10-03"},{"lineNumber":321,"author":{"gitId":"shenyih0ng"},"content":"      return false;","lastModifiedDate":"2022-10-03"},{"lineNumber":322,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":323,"author":{"gitId":"shenyih0ng"},"content":"    VenueLesson venueLesson \u003d (VenueLesson) o;","lastModifiedDate":"2022-10-03"},{"lineNumber":324,"author":{"gitId":"shenyih0ng"},"content":"    return Objects.equals(this.classNo, venueLesson.classNo) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":325,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.startTime, venueLesson.startTime) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":326,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.endTime, venueLesson.endTime) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":327,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.weeks, venueLesson.weeks) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":328,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.venue, venueLesson.venue) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":329,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.day, venueLesson.day) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":330,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.lessonType, venueLesson.lessonType) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":331,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.size, venueLesson.size) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":332,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.moduleCode, venueLesson.moduleCode);","lastModifiedDate":"2022-10-03"},{"lineNumber":333,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":334,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":335,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":336,"author":{"gitId":"shenyih0ng"},"content":"  public int hashCode() {","lastModifiedDate":"2022-10-03"},{"lineNumber":337,"author":{"gitId":"shenyih0ng"},"content":"    return Objects.hash(classNo, startTime, endTime, weeks, venue, day, lessonType, size, moduleCode);","lastModifiedDate":"2022-10-03"},{"lineNumber":338,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":339,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":340,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":341,"author":{"gitId":"shenyih0ng"},"content":"  public String toString() {","lastModifiedDate":"2022-10-03"},{"lineNumber":342,"author":{"gitId":"shenyih0ng"},"content":"    StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2022-10-03"},{"lineNumber":343,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"class VenueLesson {\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":344,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    classNo: \").append(toIndentedString(classNo)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":345,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    startTime: \").append(toIndentedString(startTime)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":346,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    endTime: \").append(toIndentedString(endTime)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":347,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    weeks: \").append(toIndentedString(weeks)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":348,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    venue: \").append(toIndentedString(venue)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":349,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    day: \").append(toIndentedString(day)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":350,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    lessonType: \").append(toIndentedString(lessonType)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":351,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    size: \").append(toIndentedString(size)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":352,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    moduleCode: \").append(toIndentedString(moduleCode)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":353,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"}\");","lastModifiedDate":"2022-10-03"},{"lineNumber":354,"author":{"gitId":"shenyih0ng"},"content":"    return sb.toString();","lastModifiedDate":"2022-10-03"},{"lineNumber":355,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":356,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":357,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":358,"author":{"gitId":"shenyih0ng"},"content":"   * Convert the given object to string with each line indented by 4 spaces","lastModifiedDate":"2022-10-03"},{"lineNumber":359,"author":{"gitId":"shenyih0ng"},"content":"   * (except the first line).","lastModifiedDate":"2022-10-03"},{"lineNumber":360,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":361,"author":{"gitId":"shenyih0ng"},"content":"  private String toIndentedString(Object o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":362,"author":{"gitId":"shenyih0ng"},"content":"    if (o \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":363,"author":{"gitId":"shenyih0ng"},"content":"      return \"null\";","lastModifiedDate":"2022-10-03"},{"lineNumber":364,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":365,"author":{"gitId":"shenyih0ng"},"content":"    return o.toString().replace(\"\\n\", \"\\n    \");","lastModifiedDate":"2022-10-03"},{"lineNumber":366,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":367,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":368,"author":{"gitId":"shenyih0ng"},"content":"}","lastModifiedDate":"2022-10-03"},{"lineNumber":369,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"shenyih0ng":369}},{"path":"src/main/java/org/openapitools/client/model/VenueLessonAllOf.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"shenyih0ng"},"content":"/*","lastModifiedDate":"2022-10-03"},{"lineNumber":2,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API contains data used to render \u003chttps://nusmods.com\u003e. It includes data on modules offered by NUS and their timetables, as well as information on the locations the classes take place in. You are welcome to use and experiment with the data, which is extracted from official APIs provided by the Registrar\u0027s Office.  The API consists of static JSON files scraped daily from the school\u0027s APIs. This means it only partially follow REST conventions, and all resources are read only. All successful responses will return JSON, and all endpoints end in `.json`.  The shape of the data returned by these endpoints are designed for NUSMods in mind. If you have any questions or find that you need the data in other shapes for other purposes, feel free to reach out to us:  - **Telegram**: \u003chttps://telegram.me/nusmods\u003e - **Mailing list**: \u003cnusmods@googlegroups.com\u003e (for security related issues please email \u003cmods@nusmods.com\u003e instead)  ## Fetching data  Any HTTP client can be used to fetch data from the API. HTTPS is preferred, but the server will also respond to HTTP requests. The server supports HTTP 1.1 as well as HTTP 2 over HTTPS, and supports gzip compression.  The API has no authentication, and is not rate limited. While the server can respond to a large number of requests simultaneously, we request that you be polite with resource usage so as not to disrupt nusmods.com, which relies on the same API server. In general there is no need to fetch data from the API more than once per day, as that is the frequency at which we update the data.  [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) headers are enabled on all endpoints, so client-side JavaScript can use also use the API.  ## TypeScript types  Since the NUSMods is written in TypeScript, typings are available in the source for the scraper. These may be easier to read than the documentation generated by Swagger.  - Module types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/modules.ts\u003e - Venue types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/venues.ts\u003e  ## Data  Below are some notes about the data returned from the API. Feel free to talk to us or create an issue if any of it is not clear.  ### Module data  Module endpoints return information on modules offered by NUS. Most of the module data is self-explanatory, but some of the data are more complex and is explained here.  #### Lessons  Each lesson in a timetable has a lesson type `lessonType` and class number `ClassNo`. Every student must take one of each lesson type offered by the module. For example, this module offers two tutorials and one lecture. That means the student must attend the lecture, and can choose one of the two tutorials to attend.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"01\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1100\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"COM1-0207\\\"     },     {       \\\"classNo\\\": \\\"02\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Friday\\\",       \\\"startTime\\\": \\\"0900\\\",       \\\"endTime\\\": \\\"1000\\\",       \\\"venue\\\": \\\"COM1-0209\\\"     }   ] } ```  Each lesson has a `classNo` key. There can be multiple lessons of the same type and class number, in which case students must attend both. In this example, students can choose to attend either lecture group 1 on Tuesdays and Wednesdays, or lecture group 2 on Mondays and Wednesdays.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1400\\\",       \\\"endTime\\\": \\\"1500\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Monday\\\",       \\\"startTime\\\": \\\"1000\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1500\\\",       \\\"endTime\\\": \\\"1600\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     }   ] } ```  #### Lesson Weeks  The `weeks` key on lessons can return data in one of two forms.  Weeks is usually a sorted array of numbers. In this case it represents the school weeks the lesson occurs on, from 1 to 13.  Some classes have lessons outside of the school timetable. In this case a `WeekRange` object is returned. The object will always contain a `start` and `end` key representing the start and end date of lessons. The example below has classes every week from 17th Jan to 18th April.  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-04-18\\\" } ```  Optionally it can also include `weekInterval`, a positive integer describing the number of weeks between each lesson, and `weeks`, an array of positive integers describing the weeks on which the lesson will fall, with week 1 being the starting date. If these are not present you can assume lessons will occur every week.  The following example has lessons on 17th Jan (week 1), 24th Jan (week 2), 7th Feb (week 4) and 21st Feb (week 6).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-21\\\",   \\\"weeks\\\": [1, 2, 4, 6] } ```  The following example has lessons on 17th Jan (week 1), 31st Jan (week 3), 14th Feb (week 5) and 28th Feb (week 7).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-28\\\",   \\\"weekInterval\\\": 2 } ```  #### Workload  The `workload` key can return data in one of two forms.  Workload is usually a **5-tuple of numbers**, describing the estimated number of hours per week the student is expected to put in for the module for **lectures, tutorials, laboratory, projects/fieldwork, and preparatory work** respectively. For example, a workload of `[2, 1, 1, 3, 3]` means the student should spend every week  - 2 hours in lectures - 1 hour in tutorials - 1 hour at the lab - 3 hours doing project work - 3 hours preparing for classes  Each module credit represents 2.5 hours of work each week, so the standard 4 MC module represents 10 hours of work each week. Module credit may not be integers.  Note that this is only an estimate, and may be outdated or differ significantly in reality. Some modules also incorrectly lists the **total** workload hours instead of weekly, so very large values may show up.  This value is parsed from a string provided by the school, and occasionally this field will contain unusual values which cannot be parsed. In this case this field will contain the original **string** instead, which should be displayed as-is to the user.  #### Prerequisite, corequisite and preclusions  These three keys determine whether a student can take a module.  **Prerequisites** are requirements you have to meet before you can take a module. These are usually in the form of other modules (see prerequisite tree below for a machine readable format), but can also be things like \u0027taken A-level H2 math\u0027 or \u002770 MCs and above\u0027.  **Preclusions** refer to modules or requirements that cannot be taken if this module is taken, and vice versa. These are usually modules whose content overlaps significantly with this module, and can usually be used to replace each other to fulfill prerequisites.  **Corequisites** are modules that must be taken together with this module in the same semester. This usually refer to twined modules - modules which have linked syllabuses.  #### Prerequisite Tree  The `prereqTree` key is return on the individual module endpoint (`/modules/{moduleCode`). Not all modules have prerequisites, and some have prerequisites that cannot be properly represented as a tree, in which case this key will not appear.  This describes the prerequisites that need to be fulfilled before this module can be taken. The data structure is recursive and represents a tree.  ```json {   \\\"and\\\": [     \\\"CS1231\\\",     {       \\\"or\\\": [\\\"CS1010S\\\", \\\"CS1010X\\\"]     }   ] } ```  In the example, this module requires CS1231 and either CS1010S or CS1010X. This can be visualized as  ```            ┌ CS1231 ── all of ─┤            │         ┌ CS1010            └ one of ─┤                      └ CS1010X ```  The module information also contains the inverse of this, that is, modules whose requirements are fulfilled by this module (taking this module will allow you to take these modules in the following semester). The data is found on the `fulfillRequirements` key as an array of module codes.  ### Venue data  Venue data is simply the module timetable restructured to show the lessons happening at each classroom.  The venue list endpoint returns a list of all locations that are used in the semester. Note that this is not a comprehensive list of locations, but rather just a list of venues that appears in module lessons.  The venue information endpoint returns the full class and occupancy information about a venue. The `classes` key contains a list of lessons similar to the `timetable` key in module data, but without a `venue` key and with `moduleCode`.","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"shenyih0ng"},"content":" * The version of the OpenAPI document: 2.0.0","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"shenyih0ng"},"content":" * Contact: nusmods@googlegroups.com","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"shenyih0ng"},"content":" * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"shenyih0ng"},"content":" * https://openapi-generator.tech","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"shenyih0ng"},"content":" * Do not edit the class manually.","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"shenyih0ng"},"content":"package org.openapitools.client.model;","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Objects;","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Map;","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"shenyih0ng"},"content":"import java.util.HashMap;","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonInclude;","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonTypeName;","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"shenyih0ng"},"content":"import io.swagger.annotations.ApiModel;","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"shenyih0ng"},"content":"import io.swagger.annotations.ApiModelProperty;","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonPropertyOrder;","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"shenyih0ng"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"shenyih0ng"},"content":" * VenueLessonAllOf","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"shenyih0ng"},"content":"@JsonPropertyOrder({","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"shenyih0ng"},"content":"  VenueLessonAllOf.JSON_PROPERTY_MODULE_CODE","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"shenyih0ng"},"content":"})","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"shenyih0ng"},"content":"@javax.annotation.processing.Generated(value \u003d \"org.openapitools.codegen.languages.JavaClientCodegen\", date \u003d \"2022-10-03T22:22:26.802458+08:00[Asia/Singapore]\")","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"shenyih0ng"},"content":"public class VenueLessonAllOf {","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_MODULE_CODE \u003d \"moduleCode\";","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"shenyih0ng"},"content":"  private String moduleCode;","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"shenyih0ng"},"content":"  public VenueLessonAllOf() {","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"shenyih0ng"},"content":"  public VenueLessonAllOf moduleCode(String moduleCode) {","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"shenyih0ng"},"content":"    this.moduleCode \u003d moduleCode;","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"shenyih0ng"},"content":"   * Get moduleCode","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"shenyih0ng"},"content":"   * @return moduleCode","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"CS1010S\", required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_MODULE_CODE)","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"shenyih0ng"},"content":"  public String getModuleCode() {","lastModifiedDate":"2022-10-03"},{"lineNumber":59,"author":{"gitId":"shenyih0ng"},"content":"    return moduleCode;","lastModifiedDate":"2022-10-03"},{"lineNumber":60,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":61,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":62,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":63,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_MODULE_CODE)","lastModifiedDate":"2022-10-03"},{"lineNumber":64,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":65,"author":{"gitId":"shenyih0ng"},"content":"  public void setModuleCode(String moduleCode) {","lastModifiedDate":"2022-10-03"},{"lineNumber":66,"author":{"gitId":"shenyih0ng"},"content":"    this.moduleCode \u003d moduleCode;","lastModifiedDate":"2022-10-03"},{"lineNumber":67,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":68,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":69,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":70,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":71,"author":{"gitId":"shenyih0ng"},"content":"   * Return true if this VenueLesson_allOf object is equal to o.","lastModifiedDate":"2022-10-03"},{"lineNumber":72,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":73,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":74,"author":{"gitId":"shenyih0ng"},"content":"  public boolean equals(Object o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":75,"author":{"gitId":"shenyih0ng"},"content":"    if (this \u003d\u003d o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":76,"author":{"gitId":"shenyih0ng"},"content":"      return true;","lastModifiedDate":"2022-10-03"},{"lineNumber":77,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":78,"author":{"gitId":"shenyih0ng"},"content":"    if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {","lastModifiedDate":"2022-10-03"},{"lineNumber":79,"author":{"gitId":"shenyih0ng"},"content":"      return false;","lastModifiedDate":"2022-10-03"},{"lineNumber":80,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":81,"author":{"gitId":"shenyih0ng"},"content":"    VenueLessonAllOf venueLessonAllOf \u003d (VenueLessonAllOf) o;","lastModifiedDate":"2022-10-03"},{"lineNumber":82,"author":{"gitId":"shenyih0ng"},"content":"    return Objects.equals(this.moduleCode, venueLessonAllOf.moduleCode);","lastModifiedDate":"2022-10-03"},{"lineNumber":83,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":84,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":85,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":86,"author":{"gitId":"shenyih0ng"},"content":"  public int hashCode() {","lastModifiedDate":"2022-10-03"},{"lineNumber":87,"author":{"gitId":"shenyih0ng"},"content":"    return Objects.hash(moduleCode);","lastModifiedDate":"2022-10-03"},{"lineNumber":88,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":89,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":90,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":91,"author":{"gitId":"shenyih0ng"},"content":"  public String toString() {","lastModifiedDate":"2022-10-03"},{"lineNumber":92,"author":{"gitId":"shenyih0ng"},"content":"    StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2022-10-03"},{"lineNumber":93,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"class VenueLessonAllOf {\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":94,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    moduleCode: \").append(toIndentedString(moduleCode)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":95,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"}\");","lastModifiedDate":"2022-10-03"},{"lineNumber":96,"author":{"gitId":"shenyih0ng"},"content":"    return sb.toString();","lastModifiedDate":"2022-10-03"},{"lineNumber":97,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":98,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":99,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":100,"author":{"gitId":"shenyih0ng"},"content":"   * Convert the given object to string with each line indented by 4 spaces","lastModifiedDate":"2022-10-03"},{"lineNumber":101,"author":{"gitId":"shenyih0ng"},"content":"   * (except the first line).","lastModifiedDate":"2022-10-03"},{"lineNumber":102,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":103,"author":{"gitId":"shenyih0ng"},"content":"  private String toIndentedString(Object o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":104,"author":{"gitId":"shenyih0ng"},"content":"    if (o \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":105,"author":{"gitId":"shenyih0ng"},"content":"      return \"null\";","lastModifiedDate":"2022-10-03"},{"lineNumber":106,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":107,"author":{"gitId":"shenyih0ng"},"content":"    return o.toString().replace(\"\\n\", \"\\n    \");","lastModifiedDate":"2022-10-03"},{"lineNumber":108,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":109,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":110,"author":{"gitId":"shenyih0ng"},"content":"}","lastModifiedDate":"2022-10-03"},{"lineNumber":111,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"shenyih0ng":111}},{"path":"src/main/java/org/openapitools/client/model/WeekRange.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"shenyih0ng"},"content":"/*","lastModifiedDate":"2022-10-03"},{"lineNumber":2,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API contains data used to render \u003chttps://nusmods.com\u003e. It includes data on modules offered by NUS and their timetables, as well as information on the locations the classes take place in. You are welcome to use and experiment with the data, which is extracted from official APIs provided by the Registrar\u0027s Office.  The API consists of static JSON files scraped daily from the school\u0027s APIs. This means it only partially follow REST conventions, and all resources are read only. All successful responses will return JSON, and all endpoints end in `.json`.  The shape of the data returned by these endpoints are designed for NUSMods in mind. If you have any questions or find that you need the data in other shapes for other purposes, feel free to reach out to us:  - **Telegram**: \u003chttps://telegram.me/nusmods\u003e - **Mailing list**: \u003cnusmods@googlegroups.com\u003e (for security related issues please email \u003cmods@nusmods.com\u003e instead)  ## Fetching data  Any HTTP client can be used to fetch data from the API. HTTPS is preferred, but the server will also respond to HTTP requests. The server supports HTTP 1.1 as well as HTTP 2 over HTTPS, and supports gzip compression.  The API has no authentication, and is not rate limited. While the server can respond to a large number of requests simultaneously, we request that you be polite with resource usage so as not to disrupt nusmods.com, which relies on the same API server. In general there is no need to fetch data from the API more than once per day, as that is the frequency at which we update the data.  [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) headers are enabled on all endpoints, so client-side JavaScript can use also use the API.  ## TypeScript types  Since the NUSMods is written in TypeScript, typings are available in the source for the scraper. These may be easier to read than the documentation generated by Swagger.  - Module types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/modules.ts\u003e - Venue types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/venues.ts\u003e  ## Data  Below are some notes about the data returned from the API. Feel free to talk to us or create an issue if any of it is not clear.  ### Module data  Module endpoints return information on modules offered by NUS. Most of the module data is self-explanatory, but some of the data are more complex and is explained here.  #### Lessons  Each lesson in a timetable has a lesson type `lessonType` and class number `ClassNo`. Every student must take one of each lesson type offered by the module. For example, this module offers two tutorials and one lecture. That means the student must attend the lecture, and can choose one of the two tutorials to attend.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"01\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1100\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"COM1-0207\\\"     },     {       \\\"classNo\\\": \\\"02\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Friday\\\",       \\\"startTime\\\": \\\"0900\\\",       \\\"endTime\\\": \\\"1000\\\",       \\\"venue\\\": \\\"COM1-0209\\\"     }   ] } ```  Each lesson has a `classNo` key. There can be multiple lessons of the same type and class number, in which case students must attend both. In this example, students can choose to attend either lecture group 1 on Tuesdays and Wednesdays, or lecture group 2 on Mondays and Wednesdays.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1400\\\",       \\\"endTime\\\": \\\"1500\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Monday\\\",       \\\"startTime\\\": \\\"1000\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1500\\\",       \\\"endTime\\\": \\\"1600\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     }   ] } ```  #### Lesson Weeks  The `weeks` key on lessons can return data in one of two forms.  Weeks is usually a sorted array of numbers. In this case it represents the school weeks the lesson occurs on, from 1 to 13.  Some classes have lessons outside of the school timetable. In this case a `WeekRange` object is returned. The object will always contain a `start` and `end` key representing the start and end date of lessons. The example below has classes every week from 17th Jan to 18th April.  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-04-18\\\" } ```  Optionally it can also include `weekInterval`, a positive integer describing the number of weeks between each lesson, and `weeks`, an array of positive integers describing the weeks on which the lesson will fall, with week 1 being the starting date. If these are not present you can assume lessons will occur every week.  The following example has lessons on 17th Jan (week 1), 24th Jan (week 2), 7th Feb (week 4) and 21st Feb (week 6).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-21\\\",   \\\"weeks\\\": [1, 2, 4, 6] } ```  The following example has lessons on 17th Jan (week 1), 31st Jan (week 3), 14th Feb (week 5) and 28th Feb (week 7).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-28\\\",   \\\"weekInterval\\\": 2 } ```  #### Workload  The `workload` key can return data in one of two forms.  Workload is usually a **5-tuple of numbers**, describing the estimated number of hours per week the student is expected to put in for the module for **lectures, tutorials, laboratory, projects/fieldwork, and preparatory work** respectively. For example, a workload of `[2, 1, 1, 3, 3]` means the student should spend every week  - 2 hours in lectures - 1 hour in tutorials - 1 hour at the lab - 3 hours doing project work - 3 hours preparing for classes  Each module credit represents 2.5 hours of work each week, so the standard 4 MC module represents 10 hours of work each week. Module credit may not be integers.  Note that this is only an estimate, and may be outdated or differ significantly in reality. Some modules also incorrectly lists the **total** workload hours instead of weekly, so very large values may show up.  This value is parsed from a string provided by the school, and occasionally this field will contain unusual values which cannot be parsed. In this case this field will contain the original **string** instead, which should be displayed as-is to the user.  #### Prerequisite, corequisite and preclusions  These three keys determine whether a student can take a module.  **Prerequisites** are requirements you have to meet before you can take a module. These are usually in the form of other modules (see prerequisite tree below for a machine readable format), but can also be things like \u0027taken A-level H2 math\u0027 or \u002770 MCs and above\u0027.  **Preclusions** refer to modules or requirements that cannot be taken if this module is taken, and vice versa. These are usually modules whose content overlaps significantly with this module, and can usually be used to replace each other to fulfill prerequisites.  **Corequisites** are modules that must be taken together with this module in the same semester. This usually refer to twined modules - modules which have linked syllabuses.  #### Prerequisite Tree  The `prereqTree` key is return on the individual module endpoint (`/modules/{moduleCode`). Not all modules have prerequisites, and some have prerequisites that cannot be properly represented as a tree, in which case this key will not appear.  This describes the prerequisites that need to be fulfilled before this module can be taken. The data structure is recursive and represents a tree.  ```json {   \\\"and\\\": [     \\\"CS1231\\\",     {       \\\"or\\\": [\\\"CS1010S\\\", \\\"CS1010X\\\"]     }   ] } ```  In the example, this module requires CS1231 and either CS1010S or CS1010X. This can be visualized as  ```            ┌ CS1231 ── all of ─┤            │         ┌ CS1010            └ one of ─┤                      └ CS1010X ```  The module information also contains the inverse of this, that is, modules whose requirements are fulfilled by this module (taking this module will allow you to take these modules in the following semester). The data is found on the `fulfillRequirements` key as an array of module codes.  ### Venue data  Venue data is simply the module timetable restructured to show the lessons happening at each classroom.  The venue list endpoint returns a list of all locations that are used in the semester. Note that this is not a comprehensive list of locations, but rather just a list of venues that appears in module lessons.  The venue information endpoint returns the full class and occupancy information about a venue. The `classes` key contains a list of lessons similar to the `timetable` key in module data, but without a `venue` key and with `moduleCode`.","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"shenyih0ng"},"content":" * The version of the OpenAPI document: 2.0.0","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"shenyih0ng"},"content":" * Contact: nusmods@googlegroups.com","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"shenyih0ng"},"content":" * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"shenyih0ng"},"content":" * https://openapi-generator.tech","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"shenyih0ng"},"content":" * Do not edit the class manually.","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"shenyih0ng"},"content":"package org.openapitools.client.model;","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Objects;","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Map;","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"shenyih0ng"},"content":"import java.util.HashMap;","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonInclude;","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonTypeName;","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"shenyih0ng"},"content":"import io.swagger.annotations.ApiModel;","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"shenyih0ng"},"content":"import io.swagger.annotations.ApiModelProperty;","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"shenyih0ng"},"content":"import java.math.BigDecimal;","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"shenyih0ng"},"content":"import java.time.LocalDate;","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"shenyih0ng"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"shenyih0ng"},"content":"import java.util.List;","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonPropertyOrder;","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"shenyih0ng"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"shenyih0ng"},"content":" * WeekRange","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"shenyih0ng"},"content":"@JsonPropertyOrder({","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"shenyih0ng"},"content":"  WeekRange.JSON_PROPERTY_START,","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"shenyih0ng"},"content":"  WeekRange.JSON_PROPERTY_END,","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"shenyih0ng"},"content":"  WeekRange.JSON_PROPERTY_WEEK_INTERVAL,","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"shenyih0ng"},"content":"  WeekRange.JSON_PROPERTY_WEEKS","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"shenyih0ng"},"content":"})","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"shenyih0ng"},"content":"@javax.annotation.processing.Generated(value \u003d \"org.openapitools.codegen.languages.JavaClientCodegen\", date \u003d \"2022-10-03T22:22:26.802458+08:00[Asia/Singapore]\")","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"shenyih0ng"},"content":"public class WeekRange {","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_START \u003d \"start\";","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"shenyih0ng"},"content":"  private LocalDate start;","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_END \u003d \"end\";","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"shenyih0ng"},"content":"  private LocalDate end;","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_WEEK_INTERVAL \u003d \"weekInterval\";","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"shenyih0ng"},"content":"  private BigDecimal weekInterval \u003d new BigDecimal(\"1\");","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"shenyih0ng"},"content":"  public static final String JSON_PROPERTY_WEEKS \u003d \"weeks\";","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"shenyih0ng"},"content":"  private List\u003cBigDecimal\u003e weeks \u003d null;","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"shenyih0ng"},"content":"  public WeekRange() {","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":59,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":60,"author":{"gitId":"shenyih0ng"},"content":"  public WeekRange start(LocalDate start) {","lastModifiedDate":"2022-10-03"},{"lineNumber":61,"author":{"gitId":"shenyih0ng"},"content":"    this.start \u003d start;","lastModifiedDate":"2022-10-03"},{"lineNumber":62,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":63,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":64,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":65,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":66,"author":{"gitId":"shenyih0ng"},"content":"   * Get start","lastModifiedDate":"2022-10-03"},{"lineNumber":67,"author":{"gitId":"shenyih0ng"},"content":"   * @return start","lastModifiedDate":"2022-10-03"},{"lineNumber":68,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":69,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":70,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"Thu Jan 17 08:00:00 SGT 2019\", required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":71,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_START)","lastModifiedDate":"2022-10-03"},{"lineNumber":72,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":73,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":74,"author":{"gitId":"shenyih0ng"},"content":"  public LocalDate getStart() {","lastModifiedDate":"2022-10-03"},{"lineNumber":75,"author":{"gitId":"shenyih0ng"},"content":"    return start;","lastModifiedDate":"2022-10-03"},{"lineNumber":76,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":77,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":78,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":79,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_START)","lastModifiedDate":"2022-10-03"},{"lineNumber":80,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":81,"author":{"gitId":"shenyih0ng"},"content":"  public void setStart(LocalDate start) {","lastModifiedDate":"2022-10-03"},{"lineNumber":82,"author":{"gitId":"shenyih0ng"},"content":"    this.start \u003d start;","lastModifiedDate":"2022-10-03"},{"lineNumber":83,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":84,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":85,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":86,"author":{"gitId":"shenyih0ng"},"content":"  public WeekRange end(LocalDate end) {","lastModifiedDate":"2022-10-03"},{"lineNumber":87,"author":{"gitId":"shenyih0ng"},"content":"    this.end \u003d end;","lastModifiedDate":"2022-10-03"},{"lineNumber":88,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":89,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":90,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":91,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":92,"author":{"gitId":"shenyih0ng"},"content":"   * Get end","lastModifiedDate":"2022-10-03"},{"lineNumber":93,"author":{"gitId":"shenyih0ng"},"content":"   * @return end","lastModifiedDate":"2022-10-03"},{"lineNumber":94,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":95,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nonnull","lastModifiedDate":"2022-10-03"},{"lineNumber":96,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"Thu Jun 20 08:00:00 SGT 2019\", required \u003d true, value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":97,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_END)","lastModifiedDate":"2022-10-03"},{"lineNumber":98,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":99,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":100,"author":{"gitId":"shenyih0ng"},"content":"  public LocalDate getEnd() {","lastModifiedDate":"2022-10-03"},{"lineNumber":101,"author":{"gitId":"shenyih0ng"},"content":"    return end;","lastModifiedDate":"2022-10-03"},{"lineNumber":102,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":103,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":104,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":105,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_END)","lastModifiedDate":"2022-10-03"},{"lineNumber":106,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.ALWAYS)","lastModifiedDate":"2022-10-03"},{"lineNumber":107,"author":{"gitId":"shenyih0ng"},"content":"  public void setEnd(LocalDate end) {","lastModifiedDate":"2022-10-03"},{"lineNumber":108,"author":{"gitId":"shenyih0ng"},"content":"    this.end \u003d end;","lastModifiedDate":"2022-10-03"},{"lineNumber":109,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":110,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":111,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":112,"author":{"gitId":"shenyih0ng"},"content":"  public WeekRange weekInterval(BigDecimal weekInterval) {","lastModifiedDate":"2022-10-03"},{"lineNumber":113,"author":{"gitId":"shenyih0ng"},"content":"    this.weekInterval \u003d weekInterval;","lastModifiedDate":"2022-10-03"},{"lineNumber":114,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":115,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":116,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":117,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":118,"author":{"gitId":"shenyih0ng"},"content":"   * Get weekInterval","lastModifiedDate":"2022-10-03"},{"lineNumber":119,"author":{"gitId":"shenyih0ng"},"content":"   * @return weekInterval","lastModifiedDate":"2022-10-03"},{"lineNumber":120,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":121,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nullable","lastModifiedDate":"2022-10-03"},{"lineNumber":122,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"2\", value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":123,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_WEEK_INTERVAL)","lastModifiedDate":"2022-10-03"},{"lineNumber":124,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":125,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":126,"author":{"gitId":"shenyih0ng"},"content":"  public BigDecimal getWeekInterval() {","lastModifiedDate":"2022-10-03"},{"lineNumber":127,"author":{"gitId":"shenyih0ng"},"content":"    return weekInterval;","lastModifiedDate":"2022-10-03"},{"lineNumber":128,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":129,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":130,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":131,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_WEEK_INTERVAL)","lastModifiedDate":"2022-10-03"},{"lineNumber":132,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":133,"author":{"gitId":"shenyih0ng"},"content":"  public void setWeekInterval(BigDecimal weekInterval) {","lastModifiedDate":"2022-10-03"},{"lineNumber":134,"author":{"gitId":"shenyih0ng"},"content":"    this.weekInterval \u003d weekInterval;","lastModifiedDate":"2022-10-03"},{"lineNumber":135,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":136,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":137,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":138,"author":{"gitId":"shenyih0ng"},"content":"  public WeekRange weeks(List\u003cBigDecimal\u003e weeks) {","lastModifiedDate":"2022-10-03"},{"lineNumber":139,"author":{"gitId":"shenyih0ng"},"content":"    this.weeks \u003d weeks;","lastModifiedDate":"2022-10-03"},{"lineNumber":140,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":141,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":142,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":143,"author":{"gitId":"shenyih0ng"},"content":"  public WeekRange addWeeksItem(BigDecimal weeksItem) {","lastModifiedDate":"2022-10-03"},{"lineNumber":144,"author":{"gitId":"shenyih0ng"},"content":"    if (this.weeks \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":145,"author":{"gitId":"shenyih0ng"},"content":"      this.weeks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-03"},{"lineNumber":146,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":147,"author":{"gitId":"shenyih0ng"},"content":"    this.weeks.add(weeksItem);","lastModifiedDate":"2022-10-03"},{"lineNumber":148,"author":{"gitId":"shenyih0ng"},"content":"    return this;","lastModifiedDate":"2022-10-03"},{"lineNumber":149,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":150,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":151,"author":{"gitId":"shenyih0ng"},"content":"   /**","lastModifiedDate":"2022-10-03"},{"lineNumber":152,"author":{"gitId":"shenyih0ng"},"content":"   * Get weeks","lastModifiedDate":"2022-10-03"},{"lineNumber":153,"author":{"gitId":"shenyih0ng"},"content":"   * @return weeks","lastModifiedDate":"2022-10-03"},{"lineNumber":154,"author":{"gitId":"shenyih0ng"},"content":"  **/","lastModifiedDate":"2022-10-03"},{"lineNumber":155,"author":{"gitId":"shenyih0ng"},"content":"  @javax.annotation.Nullable","lastModifiedDate":"2022-10-03"},{"lineNumber":156,"author":{"gitId":"shenyih0ng"},"content":"  @ApiModelProperty(example \u003d \"[1,2,4,5,6]\", value \u003d \"\")","lastModifiedDate":"2022-10-03"},{"lineNumber":157,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_WEEKS)","lastModifiedDate":"2022-10-03"},{"lineNumber":158,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":159,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":160,"author":{"gitId":"shenyih0ng"},"content":"  public List\u003cBigDecimal\u003e getWeeks() {","lastModifiedDate":"2022-10-03"},{"lineNumber":161,"author":{"gitId":"shenyih0ng"},"content":"    return weeks;","lastModifiedDate":"2022-10-03"},{"lineNumber":162,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":163,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":164,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":165,"author":{"gitId":"shenyih0ng"},"content":"  @JsonProperty(JSON_PROPERTY_WEEKS)","lastModifiedDate":"2022-10-03"},{"lineNumber":166,"author":{"gitId":"shenyih0ng"},"content":"  @JsonInclude(value \u003d JsonInclude.Include.USE_DEFAULTS)","lastModifiedDate":"2022-10-03"},{"lineNumber":167,"author":{"gitId":"shenyih0ng"},"content":"  public void setWeeks(List\u003cBigDecimal\u003e weeks) {","lastModifiedDate":"2022-10-03"},{"lineNumber":168,"author":{"gitId":"shenyih0ng"},"content":"    this.weeks \u003d weeks;","lastModifiedDate":"2022-10-03"},{"lineNumber":169,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":170,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":171,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":172,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":173,"author":{"gitId":"shenyih0ng"},"content":"   * Return true if this WeekRange object is equal to o.","lastModifiedDate":"2022-10-03"},{"lineNumber":174,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":175,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":176,"author":{"gitId":"shenyih0ng"},"content":"  public boolean equals(Object o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":177,"author":{"gitId":"shenyih0ng"},"content":"    if (this \u003d\u003d o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":178,"author":{"gitId":"shenyih0ng"},"content":"      return true;","lastModifiedDate":"2022-10-03"},{"lineNumber":179,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":180,"author":{"gitId":"shenyih0ng"},"content":"    if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {","lastModifiedDate":"2022-10-03"},{"lineNumber":181,"author":{"gitId":"shenyih0ng"},"content":"      return false;","lastModifiedDate":"2022-10-03"},{"lineNumber":182,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":183,"author":{"gitId":"shenyih0ng"},"content":"    WeekRange weekRange \u003d (WeekRange) o;","lastModifiedDate":"2022-10-03"},{"lineNumber":184,"author":{"gitId":"shenyih0ng"},"content":"    return Objects.equals(this.start, weekRange.start) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":185,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.end, weekRange.end) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":186,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.weekInterval, weekRange.weekInterval) \u0026\u0026","lastModifiedDate":"2022-10-03"},{"lineNumber":187,"author":{"gitId":"shenyih0ng"},"content":"        Objects.equals(this.weeks, weekRange.weeks);","lastModifiedDate":"2022-10-03"},{"lineNumber":188,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":189,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":190,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":191,"author":{"gitId":"shenyih0ng"},"content":"  public int hashCode() {","lastModifiedDate":"2022-10-03"},{"lineNumber":192,"author":{"gitId":"shenyih0ng"},"content":"    return Objects.hash(start, end, weekInterval, weeks);","lastModifiedDate":"2022-10-03"},{"lineNumber":193,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":194,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":195,"author":{"gitId":"shenyih0ng"},"content":"  @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":196,"author":{"gitId":"shenyih0ng"},"content":"  public String toString() {","lastModifiedDate":"2022-10-03"},{"lineNumber":197,"author":{"gitId":"shenyih0ng"},"content":"    StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2022-10-03"},{"lineNumber":198,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"class WeekRange {\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":199,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    start: \").append(toIndentedString(start)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":200,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    end: \").append(toIndentedString(end)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":201,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    weekInterval: \").append(toIndentedString(weekInterval)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":202,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"    weeks: \").append(toIndentedString(weeks)).append(\"\\n\");","lastModifiedDate":"2022-10-03"},{"lineNumber":203,"author":{"gitId":"shenyih0ng"},"content":"    sb.append(\"}\");","lastModifiedDate":"2022-10-03"},{"lineNumber":204,"author":{"gitId":"shenyih0ng"},"content":"    return sb.toString();","lastModifiedDate":"2022-10-03"},{"lineNumber":205,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":206,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":207,"author":{"gitId":"shenyih0ng"},"content":"  /**","lastModifiedDate":"2022-10-03"},{"lineNumber":208,"author":{"gitId":"shenyih0ng"},"content":"   * Convert the given object to string with each line indented by 4 spaces","lastModifiedDate":"2022-10-03"},{"lineNumber":209,"author":{"gitId":"shenyih0ng"},"content":"   * (except the first line).","lastModifiedDate":"2022-10-03"},{"lineNumber":210,"author":{"gitId":"shenyih0ng"},"content":"   */","lastModifiedDate":"2022-10-03"},{"lineNumber":211,"author":{"gitId":"shenyih0ng"},"content":"  private String toIndentedString(Object o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":212,"author":{"gitId":"shenyih0ng"},"content":"    if (o \u003d\u003d null) {","lastModifiedDate":"2022-10-03"},{"lineNumber":213,"author":{"gitId":"shenyih0ng"},"content":"      return \"null\";","lastModifiedDate":"2022-10-03"},{"lineNumber":214,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":215,"author":{"gitId":"shenyih0ng"},"content":"    return o.toString().replace(\"\\n\", \"\\n    \");","lastModifiedDate":"2022-10-03"},{"lineNumber":216,"author":{"gitId":"shenyih0ng"},"content":"  }","lastModifiedDate":"2022-10-03"},{"lineNumber":217,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":218,"author":{"gitId":"shenyih0ng"},"content":"}","lastModifiedDate":"2022-10-03"},{"lineNumber":219,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"shenyih0ng":219}},{"path":"src/main/java/org/openapitools/client/model/Workload.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"shenyih0ng"},"content":"/*","lastModifiedDate":"2022-10-03"},{"lineNumber":2,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"shenyih0ng"},"content":" * NUSMods API contains data used to render \u003chttps://nusmods.com\u003e. It includes data on modules offered by NUS and their timetables, as well as information on the locations the classes take place in. You are welcome to use and experiment with the data, which is extracted from official APIs provided by the Registrar\u0027s Office.  The API consists of static JSON files scraped daily from the school\u0027s APIs. This means it only partially follow REST conventions, and all resources are read only. All successful responses will return JSON, and all endpoints end in `.json`.  The shape of the data returned by these endpoints are designed for NUSMods in mind. If you have any questions or find that you need the data in other shapes for other purposes, feel free to reach out to us:  - **Telegram**: \u003chttps://telegram.me/nusmods\u003e - **Mailing list**: \u003cnusmods@googlegroups.com\u003e (for security related issues please email \u003cmods@nusmods.com\u003e instead)  ## Fetching data  Any HTTP client can be used to fetch data from the API. HTTPS is preferred, but the server will also respond to HTTP requests. The server supports HTTP 1.1 as well as HTTP 2 over HTTPS, and supports gzip compression.  The API has no authentication, and is not rate limited. While the server can respond to a large number of requests simultaneously, we request that you be polite with resource usage so as not to disrupt nusmods.com, which relies on the same API server. In general there is no need to fetch data from the API more than once per day, as that is the frequency at which we update the data.  [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) headers are enabled on all endpoints, so client-side JavaScript can use also use the API.  ## TypeScript types  Since the NUSMods is written in TypeScript, typings are available in the source for the scraper. These may be easier to read than the documentation generated by Swagger.  - Module types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/modules.ts\u003e - Venue types: \u003chttps://github.com/nusmodifications/nusmods/blob/master/scrapers/nus-v2/src/types/venues.ts\u003e  ## Data  Below are some notes about the data returned from the API. Feel free to talk to us or create an issue if any of it is not clear.  ### Module data  Module endpoints return information on modules offered by NUS. Most of the module data is self-explanatory, but some of the data are more complex and is explained here.  #### Lessons  Each lesson in a timetable has a lesson type `lessonType` and class number `ClassNo`. Every student must take one of each lesson type offered by the module. For example, this module offers two tutorials and one lecture. That means the student must attend the lecture, and can choose one of the two tutorials to attend.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"01\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1100\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"COM1-0207\\\"     },     {       \\\"classNo\\\": \\\"02\\\",       \\\"lessonType\\\": \\\"Tutorial\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Friday\\\",       \\\"startTime\\\": \\\"0900\\\",       \\\"endTime\\\": \\\"1000\\\",       \\\"venue\\\": \\\"COM1-0209\\\"     }   ] } ```  Each lesson has a `classNo` key. There can be multiple lessons of the same type and class number, in which case students must attend both. In this example, students can choose to attend either lecture group 1 on Tuesdays and Wednesdays, or lecture group 2 on Mondays and Wednesdays.  ```json {   \\\"timetable\\\": [     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Tuesday\\\",       \\\"startTime\\\": \\\"1600\\\",       \\\"endTime\\\": \\\"1800\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"1\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1400\\\",       \\\"endTime\\\": \\\"1500\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Monday\\\",       \\\"startTime\\\": \\\"1000\\\",       \\\"endTime\\\": \\\"1200\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     },     {       \\\"classNo\\\": \\\"2\\\",       \\\"lessonType\\\": \\\"Lecture\\\",       \\\"weeks\\\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],       \\\"day\\\": \\\"Wednesday\\\",       \\\"startTime\\\": \\\"1500\\\",       \\\"endTime\\\": \\\"1600\\\",       \\\"venue\\\": \\\"I3-AUD\\\"     }   ] } ```  #### Lesson Weeks  The `weeks` key on lessons can return data in one of two forms.  Weeks is usually a sorted array of numbers. In this case it represents the school weeks the lesson occurs on, from 1 to 13.  Some classes have lessons outside of the school timetable. In this case a `WeekRange` object is returned. The object will always contain a `start` and `end` key representing the start and end date of lessons. The example below has classes every week from 17th Jan to 18th April.  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-04-18\\\" } ```  Optionally it can also include `weekInterval`, a positive integer describing the number of weeks between each lesson, and `weeks`, an array of positive integers describing the weeks on which the lesson will fall, with week 1 being the starting date. If these are not present you can assume lessons will occur every week.  The following example has lessons on 17th Jan (week 1), 24th Jan (week 2), 7th Feb (week 4) and 21st Feb (week 6).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-21\\\",   \\\"weeks\\\": [1, 2, 4, 6] } ```  The following example has lessons on 17th Jan (week 1), 31st Jan (week 3), 14th Feb (week 5) and 28th Feb (week 7).  ``` json \\\"weeks\\\": {   \\\"start\\\": \\\"2019-01-17\\\",   \\\"end\\\": \\\"2019-02-28\\\",   \\\"weekInterval\\\": 2 } ```  #### Workload  The `workload` key can return data in one of two forms.  Workload is usually a **5-tuple of numbers**, describing the estimated number of hours per week the student is expected to put in for the module for **lectures, tutorials, laboratory, projects/fieldwork, and preparatory work** respectively. For example, a workload of `[2, 1, 1, 3, 3]` means the student should spend every week  - 2 hours in lectures - 1 hour in tutorials - 1 hour at the lab - 3 hours doing project work - 3 hours preparing for classes  Each module credit represents 2.5 hours of work each week, so the standard 4 MC module represents 10 hours of work each week. Module credit may not be integers.  Note that this is only an estimate, and may be outdated or differ significantly in reality. Some modules also incorrectly lists the **total** workload hours instead of weekly, so very large values may show up.  This value is parsed from a string provided by the school, and occasionally this field will contain unusual values which cannot be parsed. In this case this field will contain the original **string** instead, which should be displayed as-is to the user.  #### Prerequisite, corequisite and preclusions  These three keys determine whether a student can take a module.  **Prerequisites** are requirements you have to meet before you can take a module. These are usually in the form of other modules (see prerequisite tree below for a machine readable format), but can also be things like \u0027taken A-level H2 math\u0027 or \u002770 MCs and above\u0027.  **Preclusions** refer to modules or requirements that cannot be taken if this module is taken, and vice versa. These are usually modules whose content overlaps significantly with this module, and can usually be used to replace each other to fulfill prerequisites.  **Corequisites** are modules that must be taken together with this module in the same semester. This usually refer to twined modules - modules which have linked syllabuses.  #### Prerequisite Tree  The `prereqTree` key is return on the individual module endpoint (`/modules/{moduleCode`). Not all modules have prerequisites, and some have prerequisites that cannot be properly represented as a tree, in which case this key will not appear.  This describes the prerequisites that need to be fulfilled before this module can be taken. The data structure is recursive and represents a tree.  ```json {   \\\"and\\\": [     \\\"CS1231\\\",     {       \\\"or\\\": [\\\"CS1010S\\\", \\\"CS1010X\\\"]     }   ] } ```  In the example, this module requires CS1231 and either CS1010S or CS1010X. This can be visualized as  ```            ┌ CS1231 ── all of ─┤            │         ┌ CS1010            └ one of ─┤                      └ CS1010X ```  The module information also contains the inverse of this, that is, modules whose requirements are fulfilled by this module (taking this module will allow you to take these modules in the following semester). The data is found on the `fulfillRequirements` key as an array of module codes.  ### Venue data  Venue data is simply the module timetable restructured to show the lessons happening at each classroom.  The venue list endpoint returns a list of all locations that are used in the semester. Note that this is not a comprehensive list of locations, but rather just a list of venues that appears in module lessons.  The venue information endpoint returns the full class and occupancy information about a venue. The `classes` key contains a list of lessons similar to the `timetable` key in module data, but without a `venue` key and with `moduleCode`.","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"shenyih0ng"},"content":" * The version of the OpenAPI document: 2.0.0","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"shenyih0ng"},"content":" * Contact: nusmods@googlegroups.com","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"shenyih0ng"},"content":" *","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"shenyih0ng"},"content":" * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"shenyih0ng"},"content":" * https://openapi-generator.tech","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"shenyih0ng"},"content":" * Do not edit the class manually.","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"shenyih0ng"},"content":"package org.openapitools.client.model;","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"shenyih0ng"},"content":"import java.util.List;","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Objects;","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Map;","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"shenyih0ng"},"content":"import java.util.HashMap;","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"shenyih0ng"},"content":"import java.math.BigDecimal;","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.annotation.JsonPropertyOrder;","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.core.type.TypeReference;","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"shenyih0ng"},"content":"import java.io.IOException;","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"shenyih0ng"},"content":"import java.util.logging.Level;","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"shenyih0ng"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"shenyih0ng"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"shenyih0ng"},"content":"import java.util.Collections;","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"shenyih0ng"},"content":"import java.util.HashSet;","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.core.JsonGenerator;","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.core.JsonParser;","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.core.JsonToken;","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.databind.JsonMappingException;","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.databind.JsonNode;","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.databind.MapperFeature;","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.databind.SerializerProvider;","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.databind.annotation.JsonDeserialize;","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.databind.annotation.JsonSerialize;","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.databind.deser.std.StdDeserializer;","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"shenyih0ng"},"content":"import com.fasterxml.jackson.databind.ser.std.StdSerializer;","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.client.JSON;","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"shenyih0ng"},"content":"@javax.annotation.processing.Generated(value \u003d \"org.openapitools.codegen.languages.JavaClientCodegen\", date \u003d \"2022-10-03T22:22:26.802458+08:00[Asia/Singapore]\")","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"shenyih0ng"},"content":"@JsonDeserialize(using \u003d Workload.WorkloadDeserializer.class)","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"shenyih0ng"},"content":"@JsonSerialize(using \u003d Workload.WorkloadSerializer.class)","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"shenyih0ng"},"content":"public class Workload extends AbstractOpenApiSchema {","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"shenyih0ng"},"content":"    private static final Logger log \u003d Logger.getLogger(Workload.class.getName());","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"shenyih0ng"},"content":"    public static class WorkloadSerializer extends StdSerializer\u003cWorkload\u003e {","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"shenyih0ng"},"content":"        public WorkloadSerializer(Class\u003cWorkload\u003e t) {","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"shenyih0ng"},"content":"            super(t);","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":59,"author":{"gitId":"shenyih0ng"},"content":"        public WorkloadSerializer() {","lastModifiedDate":"2022-10-03"},{"lineNumber":60,"author":{"gitId":"shenyih0ng"},"content":"            this(null);","lastModifiedDate":"2022-10-03"},{"lineNumber":61,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":62,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":63,"author":{"gitId":"shenyih0ng"},"content":"        @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":64,"author":{"gitId":"shenyih0ng"},"content":"        public void serialize(Workload value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {","lastModifiedDate":"2022-10-03"},{"lineNumber":65,"author":{"gitId":"shenyih0ng"},"content":"            jgen.writeObject(value.getActualInstance());","lastModifiedDate":"2022-10-03"},{"lineNumber":66,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":67,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":68,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":69,"author":{"gitId":"shenyih0ng"},"content":"    public static class WorkloadDeserializer extends StdDeserializer\u003cWorkload\u003e {","lastModifiedDate":"2022-10-03"},{"lineNumber":70,"author":{"gitId":"shenyih0ng"},"content":"        public WorkloadDeserializer() {","lastModifiedDate":"2022-10-03"},{"lineNumber":71,"author":{"gitId":"shenyih0ng"},"content":"            this(Workload.class);","lastModifiedDate":"2022-10-03"},{"lineNumber":72,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":73,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":74,"author":{"gitId":"shenyih0ng"},"content":"        public WorkloadDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2022-10-03"},{"lineNumber":75,"author":{"gitId":"shenyih0ng"},"content":"            super(vc);","lastModifiedDate":"2022-10-03"},{"lineNumber":76,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":77,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":78,"author":{"gitId":"shenyih0ng"},"content":"        @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":79,"author":{"gitId":"shenyih0ng"},"content":"        public Workload deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {","lastModifiedDate":"2022-10-03"},{"lineNumber":80,"author":{"gitId":"shenyih0ng"},"content":"            JsonNode tree \u003d jp.readValueAsTree();","lastModifiedDate":"2022-10-03"},{"lineNumber":81,"author":{"gitId":"shenyih0ng"},"content":"            Object deserialized \u003d null;","lastModifiedDate":"2022-10-03"},{"lineNumber":82,"author":{"gitId":"shenyih0ng"},"content":"            boolean typeCoercion \u003d ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);","lastModifiedDate":"2022-10-03"},{"lineNumber":83,"author":{"gitId":"shenyih0ng"},"content":"            int match \u003d 0;","lastModifiedDate":"2022-10-03"},{"lineNumber":84,"author":{"gitId":"shenyih0ng"},"content":"            JsonToken token \u003d tree.traverse(jp.getCodec()).nextToken();","lastModifiedDate":"2022-10-03"},{"lineNumber":85,"author":{"gitId":"shenyih0ng"},"content":"            // deserialize List\u003cBigDecimal\u003e","lastModifiedDate":"2022-10-03"},{"lineNumber":86,"author":{"gitId":"shenyih0ng"},"content":"            try {","lastModifiedDate":"2022-10-03"},{"lineNumber":87,"author":{"gitId":"shenyih0ng"},"content":"                boolean attemptParsing \u003d true;","lastModifiedDate":"2022-10-03"},{"lineNumber":88,"author":{"gitId":"shenyih0ng"},"content":"                if (attemptParsing) {","lastModifiedDate":"2022-10-03"},{"lineNumber":89,"author":{"gitId":"shenyih0ng"},"content":"                    deserialized \u003d tree.traverse(jp.getCodec()).readValueAs(List.class);","lastModifiedDate":"2022-10-03"},{"lineNumber":90,"author":{"gitId":"shenyih0ng"},"content":"                    match++;","lastModifiedDate":"2022-10-03"},{"lineNumber":91,"author":{"gitId":"shenyih0ng"},"content":"                    log.log(Level.FINER, \"Input data matches schema \u0027List\u003cBigDecimal\u003e\u0027\");","lastModifiedDate":"2022-10-03"},{"lineNumber":92,"author":{"gitId":"shenyih0ng"},"content":"                }","lastModifiedDate":"2022-10-03"},{"lineNumber":93,"author":{"gitId":"shenyih0ng"},"content":"            } catch (Exception e) {","lastModifiedDate":"2022-10-03"},{"lineNumber":94,"author":{"gitId":"shenyih0ng"},"content":"                // deserialization failed, continue","lastModifiedDate":"2022-10-03"},{"lineNumber":95,"author":{"gitId":"shenyih0ng"},"content":"                log.log(Level.FINER, \"Input data does not match schema \u0027List\u003cBigDecimal\u003e\u0027\", e);","lastModifiedDate":"2022-10-03"},{"lineNumber":96,"author":{"gitId":"shenyih0ng"},"content":"            }","lastModifiedDate":"2022-10-03"},{"lineNumber":97,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":98,"author":{"gitId":"shenyih0ng"},"content":"            // deserialize String","lastModifiedDate":"2022-10-03"},{"lineNumber":99,"author":{"gitId":"shenyih0ng"},"content":"            try {","lastModifiedDate":"2022-10-03"},{"lineNumber":100,"author":{"gitId":"shenyih0ng"},"content":"                boolean attemptParsing \u003d true;","lastModifiedDate":"2022-10-03"},{"lineNumber":101,"author":{"gitId":"shenyih0ng"},"content":"                // ensure that we respect type coercion as set on the client ObjectMapper","lastModifiedDate":"2022-10-03"},{"lineNumber":102,"author":{"gitId":"shenyih0ng"},"content":"                if (String.class.equals(Integer.class) || String.class.equals(Long.class) || String.class.equals(Float.class) || String.class.equals(Double.class) || String.class.equals(Boolean.class) || String.class.equals(String.class)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":103,"author":{"gitId":"shenyih0ng"},"content":"                    attemptParsing \u003d typeCoercion;","lastModifiedDate":"2022-10-03"},{"lineNumber":104,"author":{"gitId":"shenyih0ng"},"content":"                    if (!attemptParsing) {","lastModifiedDate":"2022-10-03"},{"lineNumber":105,"author":{"gitId":"shenyih0ng"},"content":"                        attemptParsing |\u003d ((String.class.equals(Integer.class) || String.class.equals(Long.class)) \u0026\u0026 token \u003d\u003d JsonToken.VALUE_NUMBER_INT);","lastModifiedDate":"2022-10-03"},{"lineNumber":106,"author":{"gitId":"shenyih0ng"},"content":"                        attemptParsing |\u003d ((String.class.equals(Float.class) || String.class.equals(Double.class)) \u0026\u0026 token \u003d\u003d JsonToken.VALUE_NUMBER_FLOAT);","lastModifiedDate":"2022-10-03"},{"lineNumber":107,"author":{"gitId":"shenyih0ng"},"content":"                        attemptParsing |\u003d (String.class.equals(Boolean.class) \u0026\u0026 (token \u003d\u003d JsonToken.VALUE_FALSE || token \u003d\u003d JsonToken.VALUE_TRUE));","lastModifiedDate":"2022-10-03"},{"lineNumber":108,"author":{"gitId":"shenyih0ng"},"content":"                        attemptParsing |\u003d (String.class.equals(String.class) \u0026\u0026 token \u003d\u003d JsonToken.VALUE_STRING);","lastModifiedDate":"2022-10-03"},{"lineNumber":109,"author":{"gitId":"shenyih0ng"},"content":"                    }","lastModifiedDate":"2022-10-03"},{"lineNumber":110,"author":{"gitId":"shenyih0ng"},"content":"                }","lastModifiedDate":"2022-10-03"},{"lineNumber":111,"author":{"gitId":"shenyih0ng"},"content":"                if (attemptParsing) {","lastModifiedDate":"2022-10-03"},{"lineNumber":112,"author":{"gitId":"shenyih0ng"},"content":"                    deserialized \u003d tree.traverse(jp.getCodec()).readValueAs(String.class);","lastModifiedDate":"2022-10-03"},{"lineNumber":113,"author":{"gitId":"shenyih0ng"},"content":"                    // TODO: there is no validation against JSON schema constraints","lastModifiedDate":"2022-10-03"},{"lineNumber":114,"author":{"gitId":"shenyih0ng"},"content":"                    // (min, max, enum, pattern...), this does not perform a strict JSON","lastModifiedDate":"2022-10-03"},{"lineNumber":115,"author":{"gitId":"shenyih0ng"},"content":"                    // validation, which means the \u0027match\u0027 count may be higher than it should be.","lastModifiedDate":"2022-10-03"},{"lineNumber":116,"author":{"gitId":"shenyih0ng"},"content":"                    match++;","lastModifiedDate":"2022-10-03"},{"lineNumber":117,"author":{"gitId":"shenyih0ng"},"content":"                    log.log(Level.FINER, \"Input data matches schema \u0027String\u0027\");","lastModifiedDate":"2022-10-03"},{"lineNumber":118,"author":{"gitId":"shenyih0ng"},"content":"                }","lastModifiedDate":"2022-10-03"},{"lineNumber":119,"author":{"gitId":"shenyih0ng"},"content":"            } catch (Exception e) {","lastModifiedDate":"2022-10-03"},{"lineNumber":120,"author":{"gitId":"shenyih0ng"},"content":"                // deserialization failed, continue","lastModifiedDate":"2022-10-03"},{"lineNumber":121,"author":{"gitId":"shenyih0ng"},"content":"                log.log(Level.FINER, \"Input data does not match schema \u0027String\u0027\", e);","lastModifiedDate":"2022-10-03"},{"lineNumber":122,"author":{"gitId":"shenyih0ng"},"content":"            }","lastModifiedDate":"2022-10-03"},{"lineNumber":123,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":124,"author":{"gitId":"shenyih0ng"},"content":"            if (match \u003d\u003d 1) {","lastModifiedDate":"2022-10-03"},{"lineNumber":125,"author":{"gitId":"shenyih0ng"},"content":"                Workload ret \u003d new Workload();","lastModifiedDate":"2022-10-03"},{"lineNumber":126,"author":{"gitId":"shenyih0ng"},"content":"                ret.setActualInstance(deserialized);","lastModifiedDate":"2022-10-03"},{"lineNumber":127,"author":{"gitId":"shenyih0ng"},"content":"                return ret;","lastModifiedDate":"2022-10-03"},{"lineNumber":128,"author":{"gitId":"shenyih0ng"},"content":"            }","lastModifiedDate":"2022-10-03"},{"lineNumber":129,"author":{"gitId":"shenyih0ng"},"content":"            throw new IOException(String.format(\"Failed deserialization for Workload: %d classes match result, expected 1\", match));","lastModifiedDate":"2022-10-03"},{"lineNumber":130,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":131,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":132,"author":{"gitId":"shenyih0ng"},"content":"        /**","lastModifiedDate":"2022-10-03"},{"lineNumber":133,"author":{"gitId":"shenyih0ng"},"content":"         * Handle deserialization of the \u0027null\u0027 value.","lastModifiedDate":"2022-10-03"},{"lineNumber":134,"author":{"gitId":"shenyih0ng"},"content":"         */","lastModifiedDate":"2022-10-03"},{"lineNumber":135,"author":{"gitId":"shenyih0ng"},"content":"        @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":136,"author":{"gitId":"shenyih0ng"},"content":"        public Workload getNullValue(DeserializationContext ctxt) throws JsonMappingException {","lastModifiedDate":"2022-10-03"},{"lineNumber":137,"author":{"gitId":"shenyih0ng"},"content":"            throw new JsonMappingException(ctxt.getParser(), \"Workload cannot be null\");","lastModifiedDate":"2022-10-03"},{"lineNumber":138,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":139,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":140,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":141,"author":{"gitId":"shenyih0ng"},"content":"    // store a list of schema names defined in oneOf","lastModifiedDate":"2022-10-03"},{"lineNumber":142,"author":{"gitId":"shenyih0ng"},"content":"    public static final Map\u003cString, Class\u003c?\u003e\u003e schemas \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2022-10-03"},{"lineNumber":143,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":144,"author":{"gitId":"shenyih0ng"},"content":"    public Workload() {","lastModifiedDate":"2022-10-03"},{"lineNumber":145,"author":{"gitId":"shenyih0ng"},"content":"        super(\"oneOf\", Boolean.FALSE);","lastModifiedDate":"2022-10-03"},{"lineNumber":146,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":147,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":148,"author":{"gitId":"shenyih0ng"},"content":"    public Workload(List\u003cBigDecimal\u003e o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":149,"author":{"gitId":"shenyih0ng"},"content":"        super(\"oneOf\", Boolean.FALSE);","lastModifiedDate":"2022-10-03"},{"lineNumber":150,"author":{"gitId":"shenyih0ng"},"content":"        setActualInstance(o);","lastModifiedDate":"2022-10-03"},{"lineNumber":151,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":152,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":153,"author":{"gitId":"shenyih0ng"},"content":"    public Workload(String o) {","lastModifiedDate":"2022-10-03"},{"lineNumber":154,"author":{"gitId":"shenyih0ng"},"content":"        super(\"oneOf\", Boolean.FALSE);","lastModifiedDate":"2022-10-03"},{"lineNumber":155,"author":{"gitId":"shenyih0ng"},"content":"        setActualInstance(o);","lastModifiedDate":"2022-10-03"},{"lineNumber":156,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":157,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":158,"author":{"gitId":"shenyih0ng"},"content":"    static {","lastModifiedDate":"2022-10-03"},{"lineNumber":159,"author":{"gitId":"shenyih0ng"},"content":"        schemas.put(\"List\u003cBigDecimal\u003e\", List.class);","lastModifiedDate":"2022-10-03"},{"lineNumber":160,"author":{"gitId":"shenyih0ng"},"content":"        schemas.put(\"String\", String.class);","lastModifiedDate":"2022-10-03"},{"lineNumber":161,"author":{"gitId":"shenyih0ng"},"content":"        JSON.registerDescendants(Workload.class, Collections.unmodifiableMap(schemas));","lastModifiedDate":"2022-10-03"},{"lineNumber":162,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":163,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":164,"author":{"gitId":"shenyih0ng"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":165,"author":{"gitId":"shenyih0ng"},"content":"    public Map\u003cString, Class\u003c?\u003e\u003e getSchemas() {","lastModifiedDate":"2022-10-03"},{"lineNumber":166,"author":{"gitId":"shenyih0ng"},"content":"        return Workload.schemas;","lastModifiedDate":"2022-10-03"},{"lineNumber":167,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":168,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":169,"author":{"gitId":"shenyih0ng"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":170,"author":{"gitId":"shenyih0ng"},"content":"     * Set the instance that matches the oneOf child schema, check","lastModifiedDate":"2022-10-03"},{"lineNumber":171,"author":{"gitId":"shenyih0ng"},"content":"     * the instance parameter is valid against the oneOf child schemas:","lastModifiedDate":"2022-10-03"},{"lineNumber":172,"author":{"gitId":"shenyih0ng"},"content":"     * List\u003cBigDecimal\u003e, String","lastModifiedDate":"2022-10-03"},{"lineNumber":173,"author":{"gitId":"shenyih0ng"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":174,"author":{"gitId":"shenyih0ng"},"content":"     * It could be an instance of the \u0027oneOf\u0027 schemas.","lastModifiedDate":"2022-10-03"},{"lineNumber":175,"author":{"gitId":"shenyih0ng"},"content":"     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).","lastModifiedDate":"2022-10-03"},{"lineNumber":176,"author":{"gitId":"shenyih0ng"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":177,"author":{"gitId":"shenyih0ng"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":178,"author":{"gitId":"shenyih0ng"},"content":"    public void setActualInstance(Object instance) {","lastModifiedDate":"2022-10-03"},{"lineNumber":179,"author":{"gitId":"shenyih0ng"},"content":"        if (JSON.isInstanceOf(List.class, instance, new HashSet\u003cClass\u003c?\u003e\u003e())) {","lastModifiedDate":"2022-10-03"},{"lineNumber":180,"author":{"gitId":"shenyih0ng"},"content":"            super.setActualInstance(instance);","lastModifiedDate":"2022-10-03"},{"lineNumber":181,"author":{"gitId":"shenyih0ng"},"content":"            return;","lastModifiedDate":"2022-10-03"},{"lineNumber":182,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":183,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":184,"author":{"gitId":"shenyih0ng"},"content":"        if (JSON.isInstanceOf(String.class, instance, new HashSet\u003cClass\u003c?\u003e\u003e())) {","lastModifiedDate":"2022-10-03"},{"lineNumber":185,"author":{"gitId":"shenyih0ng"},"content":"            super.setActualInstance(instance);","lastModifiedDate":"2022-10-03"},{"lineNumber":186,"author":{"gitId":"shenyih0ng"},"content":"            return;","lastModifiedDate":"2022-10-03"},{"lineNumber":187,"author":{"gitId":"shenyih0ng"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":188,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":189,"author":{"gitId":"shenyih0ng"},"content":"        throw new RuntimeException(\"Invalid instance type. Must be List\u003cBigDecimal\u003e, String\");","lastModifiedDate":"2022-10-03"},{"lineNumber":190,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":191,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":192,"author":{"gitId":"shenyih0ng"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":193,"author":{"gitId":"shenyih0ng"},"content":"     * Get the actual instance, which can be the following:","lastModifiedDate":"2022-10-03"},{"lineNumber":194,"author":{"gitId":"shenyih0ng"},"content":"     * List\u003cBigDecimal\u003e, String","lastModifiedDate":"2022-10-03"},{"lineNumber":195,"author":{"gitId":"shenyih0ng"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":196,"author":{"gitId":"shenyih0ng"},"content":"     * @return The actual instance (List\u003cBigDecimal\u003e, String)","lastModifiedDate":"2022-10-03"},{"lineNumber":197,"author":{"gitId":"shenyih0ng"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":198,"author":{"gitId":"shenyih0ng"},"content":"    @Override","lastModifiedDate":"2022-10-03"},{"lineNumber":199,"author":{"gitId":"shenyih0ng"},"content":"    public Object getActualInstance() {","lastModifiedDate":"2022-10-03"},{"lineNumber":200,"author":{"gitId":"shenyih0ng"},"content":"        return super.getActualInstance();","lastModifiedDate":"2022-10-03"},{"lineNumber":201,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":202,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":203,"author":{"gitId":"shenyih0ng"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":204,"author":{"gitId":"shenyih0ng"},"content":"     * Get the actual instance of `List\u003cBigDecimal\u003e`. If the actual instance is not `List\u003cBigDecimal\u003e`,","lastModifiedDate":"2022-10-03"},{"lineNumber":205,"author":{"gitId":"shenyih0ng"},"content":"     * the ClassCastException will be thrown.","lastModifiedDate":"2022-10-03"},{"lineNumber":206,"author":{"gitId":"shenyih0ng"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":207,"author":{"gitId":"shenyih0ng"},"content":"     * @return The actual instance of `List\u003cBigDecimal\u003e`","lastModifiedDate":"2022-10-03"},{"lineNumber":208,"author":{"gitId":"shenyih0ng"},"content":"     * @throws ClassCastException if the instance is not `List\u003cBigDecimal\u003e`","lastModifiedDate":"2022-10-03"},{"lineNumber":209,"author":{"gitId":"shenyih0ng"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":210,"author":{"gitId":"shenyih0ng"},"content":"    public List\u003cBigDecimal\u003e getList() throws ClassCastException {","lastModifiedDate":"2022-10-03"},{"lineNumber":211,"author":{"gitId":"shenyih0ng"},"content":"        return (List\u003cBigDecimal\u003e)super.getActualInstance();","lastModifiedDate":"2022-10-03"},{"lineNumber":212,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":213,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":214,"author":{"gitId":"shenyih0ng"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":215,"author":{"gitId":"shenyih0ng"},"content":"     * Get the actual instance of `String`. If the actual instance is not `String`,","lastModifiedDate":"2022-10-03"},{"lineNumber":216,"author":{"gitId":"shenyih0ng"},"content":"     * the ClassCastException will be thrown.","lastModifiedDate":"2022-10-03"},{"lineNumber":217,"author":{"gitId":"shenyih0ng"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":218,"author":{"gitId":"shenyih0ng"},"content":"     * @return The actual instance of `String`","lastModifiedDate":"2022-10-03"},{"lineNumber":219,"author":{"gitId":"shenyih0ng"},"content":"     * @throws ClassCastException if the instance is not `String`","lastModifiedDate":"2022-10-03"},{"lineNumber":220,"author":{"gitId":"shenyih0ng"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":221,"author":{"gitId":"shenyih0ng"},"content":"    public String getString() throws ClassCastException {","lastModifiedDate":"2022-10-03"},{"lineNumber":222,"author":{"gitId":"shenyih0ng"},"content":"        return (String)super.getActualInstance();","lastModifiedDate":"2022-10-03"},{"lineNumber":223,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":224,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":225,"author":{"gitId":"shenyih0ng"},"content":"}","lastModifiedDate":"2022-10-03"},{"lineNumber":226,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"shenyih0ng":226}},{"path":"src/main/java/seedu/address/commons/core/Config.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Config values used by the app","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Config {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    // Config values customizable through config file","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private Level logLevel \u003d Level.INFO;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public Level getLogLevel() {","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setLogLevel(Level logLevel) {","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.logLevel \u003d logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void setUserPrefsFilePath(Path userPrefsFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config o \u003d (Config) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Objects.equals(logLevel, o.logLevel)","lastModifiedDate":"2018-12-08"},{"lineNumber":47,"author":{"gitId":"shenyih0ng"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath.toAbsolutePath(), o.userPrefsFilePath.toAbsolutePath());","lastModifiedDate":"2022-10-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return Objects.hash(logLevel, userPrefsFilePath);","lastModifiedDate":"2018-12-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        sb.append(\"Current log level : \" + logLevel);","lastModifiedDate":"2018-12-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":62,"shenyih0ng":1}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"shenyih0ng"},"content":"                \u0026\u0026 Objects.equals(addressBookFilePath.toAbsolutePath(), o.addressBookFilePath.toAbsolutePath());","lastModifiedDate":"2022-10-04"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath);","lastModifiedDate":"2018-08-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":86,"shenyih0ng":1}},{"path":"src/test/java/org/openapitools/client/api/ModulesApiTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"shenyih0ng"},"content":"package org.openapitools.client.api;","lastModifiedDate":"2022-10-03"},{"lineNumber":2,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"shenyih0ng"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"shenyih0ng"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"shenyih0ng"},"content":"import java.util.List;","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"shenyih0ng"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.client.ApiException;","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.client.model.Module;","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.client.model.ModuleCondensed;","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"shenyih0ng"},"content":"import org.openapitools.client.model.ModuleInformation;","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"shenyih0ng"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"shenyih0ng"},"content":" * API tests for ModulesApi","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"shenyih0ng"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"shenyih0ng"},"content":"public class ModulesApiTest {","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"shenyih0ng"},"content":"    private final ModulesApi api \u003d new ModulesApi();","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"shenyih0ng"},"content":"    @Test","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"shenyih0ng"},"content":"    public void acadYearModuleInfoJsonGetTest() throws ApiException {","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"shenyih0ng"},"content":"        String acadYear \u003d \"2022-2023\";","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"shenyih0ng"},"content":"        List\u003cModuleInformation\u003e response \u003d api.acadYearModuleInfoJsonGet(acadYear);","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"shenyih0ng"},"content":"        assertTrue(response.size() \u003e 0);","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"shenyih0ng"},"content":"    @Test","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"shenyih0ng"},"content":"    public void acadYearModuleListJsonGetTest() throws ApiException {","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"shenyih0ng"},"content":"        String acadYear \u003d \"2022-2023\";","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"shenyih0ng"},"content":"        List\u003cModuleCondensed\u003e response \u003d api.acadYearModuleListJsonGet(acadYear);","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"shenyih0ng"},"content":"        assertTrue(response.size() \u003e 0);","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"shenyih0ng"},"content":"    @Test","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"shenyih0ng"},"content":"    public void acadYearModulesModuleCodeJsonGetTest() throws ApiException {","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"shenyih0ng"},"content":"        String acadYear \u003d \"2022-2023\";","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"shenyih0ng"},"content":"        String moduleCode \u003d \"CS2103\";","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"shenyih0ng"},"content":"        Module response \u003d api.acadYearModulesModuleCodeJsonGet(acadYear, moduleCode);","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"shenyih0ng"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"shenyih0ng"},"content":"        assertEquals(response.getTitle(), \"Software Engineering\");","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"shenyih0ng"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"shenyih0ng"},"content":"}","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"shenyih0ng":46}}]
