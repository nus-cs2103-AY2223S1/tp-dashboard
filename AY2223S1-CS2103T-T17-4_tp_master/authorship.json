[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"guanzhou03"},"content":"---","lastModifiedDate":"2022-10-25"},{"lineNumber":2,"author":{"gitId":"guanzhou03"},"content":"layout: page","lastModifiedDate":"2022-10-25"},{"lineNumber":3,"author":{"gitId":"guanzhou03"},"content":"title: idENTify","lastModifiedDate":"2022-10-25"},{"lineNumber":4,"author":{"gitId":"guanzhou03"},"content":"---","lastModifiedDate":"2022-10-25"},{"lineNumber":5,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":6,"author":{"gitId":"guanzhou03"},"content":"[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2223S1-CS2103T-T17-4/tp/actions)","lastModifiedDate":"2022-09-27"},{"lineNumber":7,"author":{"gitId":"guanzhou03"},"content":"[![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://app.codecov.io/gh/AY2223S1-CS2103T-T17-4/tp)","lastModifiedDate":"2022-10-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2022-11-01"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":11,"author":{"gitId":"guanzhou03"},"content":"## Description","lastModifiedDate":"2022-10-25"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"**idENTify is an all in one desktop application for managing your patients and their appointments.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface).","lastModifiedDate":"2022-10-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"guanzhou03"},"content":"## Features at a glance","lastModifiedDate":"2022-10-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"guanzhou03"},"content":"Users are able to:","lastModifiedDate":"2022-10-25"},{"lineNumber":17,"author":{"gitId":"guanzhou03"},"content":"* Add/remove patients/appointments.","lastModifiedDate":"2022-10-25"},{"lineNumber":18,"author":{"gitId":"guanzhou03"},"content":"* Tag patients/appointments.","lastModifiedDate":"2022-10-25"},{"lineNumber":19,"author":{"gitId":"guanzhou03"},"content":"* Cancel/mark/edit appointments.","lastModifiedDate":"2022-10-25"},{"lineNumber":20,"author":{"gitId":"guanzhou03"},"content":"* Group/Find/Hide patients/appointments.","lastModifiedDate":"2022-10-25"},{"lineNumber":21,"author":{"gitId":"guanzhou03"},"content":"* Easily track patients and their appointments!","lastModifiedDate":"2022-10-25"},{"lineNumber":22,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":23,"author":{"gitId":"guanzhou03"},"content":"## More information about this project","lastModifiedDate":"2022-10-25"},{"lineNumber":24,"author":{"gitId":"guanzhou03"},"content":"* This project was made as part of CS2103T in AY22/23 S1.","lastModifiedDate":"2022-10-25"},{"lineNumber":25,"author":{"gitId":"guanzhou03"},"content":"* If your are interested in the documentation of this project, head over to the **[idENTify Developer Guide](https://ay2223s1-cs2103t-t17-4.github.io/tp/DeveloperGuide.html)**.","lastModifiedDate":"2022-10-25"},{"lineNumber":26,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":27,"author":{"gitId":"guanzhou03"},"content":"## Credits \u0026 Acknowledgements","lastModifiedDate":"2022-10-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"* This project is a **part of the se-education.org** initiative. If you would like to contribute code to this project, see [se-education.org](https://se-education.org#https://se-education.org/#contributing) for more info.","lastModifiedDate":"2022-10-25"}],"authorContributionMap":{"WingKei67":1,"guanzhou03":21,"-":6}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"mainClassName \u003d \u0027seedu.address.Main\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-04-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"run {","lastModifiedDate":"2022-10-18"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2022-10-18"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-18"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":32,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        html.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        xml.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    archiveFileName \u003d \u0027addressbook.jar\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"JovonLim":4,"-":72}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"guanzhou03"},"content":"### Chen Guanzhou","lastModifiedDate":"2022-09-20"},{"lineNumber":11,"author":{"gitId":"guanzhou03"},"content":"\u003cimg src\u003d\"images/guanzhou03.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-09-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":"[[github](https://github.com/guanzhou03)]","lastModifiedDate":"2022-09-20"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"[[portfolio](team/guanzhou03.md)]","lastModifiedDate":"2022-09-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"guanzhou03"},"content":"* Role: Team Lead","lastModifiedDate":"2022-09-20"},{"lineNumber":17,"author":{"gitId":"guanzhou03"},"content":"* Responsibilities: In charge of Model","lastModifiedDate":"2022-09-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"pwjj2000"},"content":"### Perry Wong Jun Jie","lastModifiedDate":"2022-09-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"pwjj2000"},"content":"\u003cimg src\u003d\"images/pwjj2000.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-09-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"pwjj2000"},"content":"[[github](https://github.com/pwjj2000)]","lastModifiedDate":"2022-09-20"},{"lineNumber":24,"author":{"gitId":"pwjj2000"},"content":"[[portfolio](team/pwjj2000.md)]","lastModifiedDate":"2022-09-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"pwjj2000"},"content":"* Role: Developer","lastModifiedDate":"2022-09-27"},{"lineNumber":27,"author":{"gitId":"pwjj2000"},"content":"* Responsibilities: Documentation and Testing","lastModifiedDate":"2022-09-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"### Lim Hong Wei, Jovon","lastModifiedDate":"2022-09-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"\u003cimg src\u003d\"images/jovonlim.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-09-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"[[github](http://github.com/jovonlim)] [[portfolio](team/jovonlim.md)]","lastModifiedDate":"2022-09-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"* Responsibilities: Storage","lastModifiedDate":"2022-09-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"### Nicholas Tan","lastModifiedDate":"2022-09-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"NicholasTYD"},"content":"\u003cimg src\u003d\"images/nicholastyd.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-09-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"[[github](https://github.com/NicholasTYD)]","lastModifiedDate":"2022-09-20"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"[[portfolio](team/nicholastyd.md)]","lastModifiedDate":"2022-09-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"* Responsibilities: UI","lastModifiedDate":"2022-09-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"WingKei67"},"content":"### Zhao Yao","lastModifiedDate":"2022-09-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"WingKei67"},"content":"\u003cimg src\u003d\"images/wingkei67.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-09-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"WingKei67"},"content":"[[github](http://github.com/wingkei67)]","lastModifiedDate":"2022-09-20"},{"lineNumber":53,"author":{"gitId":"WingKei67"},"content":"[[portfolio](team/wingkei67.md)]","lastModifiedDate":"2022-09-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"WingKei67"},"content":"* Responsibilities: Logic","lastModifiedDate":"2022-09-20"}],"authorContributionMap":{"NicholasTYD":6,"JovonLim":4,"WingKei67":5,"-":30,"guanzhou03":5,"pwjj2000":6}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"* In order to change the contents page for User Guide and Developer Guide to follow numbering order, we reused code from https://github.com/lesterong/tp/blob/master/docs/assets/css/style.scss with minor modifications.","lastModifiedDate":"2022-11-03"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":"* We have reused code from https://github.com/AY2122S2-CS2103T-W09-2/tp/blob/master/src/main/resources/view/Caramel.css and https://github.com/AY2122S2-CS2103T-W09-2/tp/blob/master/src/main/resources/view/Cinnamon.css","lastModifiedDate":"2022-11-03"},{"lineNumber":14,"author":{"gitId":"guanzhou03"},"content":"for styling our User Interface (UI).","lastModifiedDate":"2022-11-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2223S1-CS2103T-T17-4/tp/tree/master/docs/diagrams) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2022-11-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"**`Main`** has two classes called [`Main`](https://github.com/AY2223S1-CS2103T-T17-4/tp/blob/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2223S1-CS2103T-T17-4/tp/blob/master/src/main/java/seedu/address/MainApp.java). It is responsible for,","lastModifiedDate":"2022-11-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":70,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"JovonLim"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/AY2223S1-CS2103T-T17-4/tp/blob/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2022-11-01"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"JovonLim"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2223S1-CS2103T-T17-4/tp/blob/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2223S1-CS2103T-T17-4/tp/blob/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2022-11-01"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":85,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":86,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":87,"author":{"gitId":"JovonLim"},"content":"* depends on some classes in the `Model` component, as it displays `Person` and `Appointment` objects residing in the `Model`.","lastModifiedDate":"2022-11-01"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"JovonLim"},"content":"**API** : [`Logic.java`](https://github.com/AY2223S1-CS2103T-T17-4/tp/blob/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2022-11-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `AddCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to add a person).","lastModifiedDate":"2021-07-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2021-07-31"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-07-31"},{"lineNumber":116,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":119,"author":{"gitId":"JovonLim"},"content":"**API** : [`Model.java`](https://github.com/AY2223S1-CS2103T-T17-4/tp/blob/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2022-11-01"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"JovonLim"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object) and all `Appointment` objects (which are contained in a","lastModifiedDate":"2022-11-01"},{"lineNumber":127,"author":{"gitId":"JovonLim"},"content":"`UniqueAppointmentList` object).","lastModifiedDate":"2022-11-01"},{"lineNumber":128,"author":{"gitId":"JovonLim"},"content":"* stores the currently \u0027selected\u0027 `Person` objects and `Appointment` objects (e.g., results of a search query) as separate _filtered_ lists which are exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` and `ObservableList\u003cAppointment\u003e` respectively that can be \u0027observed\u0027 e.g. the UI can be bound to these lists so that the UI automatically updates when the data in the lists change.","lastModifiedDate":"2022-11-01"},{"lineNumber":129,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique tag, instead of each `Person` needing their own `Tag` objects.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":134,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/BetterModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"JovonLim"},"content":"**API** : [`Storage.java`](https://github.com/AY2223S1-CS2103T-T17-4/tp/blob/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2022-11-01"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"JovonLim"},"content":"* can save idENTify data, command history data and user preference data in json format, and read them back into corresponding objects.","lastModifiedDate":"2022-11-01"},{"lineNumber":147,"author":{"gitId":"-"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-07-31"},{"lineNumber":148,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"WingKei67"},"content":"### List Feature","lastModifiedDate":"2022-11-03"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"JovonLim"},"content":"#### Implementation","lastModifiedDate":"2022-11-01"},{"lineNumber":163,"author":{"gitId":"JovonLim"},"content":"The list patients/appointments mechanism is facilitated by the `UniquePersonList` and `UniqueAppointmentList`","lastModifiedDate":"2022-11-01"},{"lineNumber":164,"author":{"gitId":"pwjj2000"},"content":"respectively. They extend `Iterable` and store lists of `Person` and `Appointment`.","lastModifiedDate":"2022-10-18"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"pwjj2000"},"content":"An example usage scenario of list patients/appointments is given below:","lastModifiedDate":"2022-10-18"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"pwjj2000"},"content":"**Steps:**","lastModifiedDate":"2022-10-18"},{"lineNumber":170,"author":{"gitId":"pwjj2000"},"content":"1. After launching the application, user executes the command `find alex` to search for entries in both","lastModifiedDate":"2022-10-18"},{"lineNumber":171,"author":{"gitId":"pwjj2000"},"content":"`UniquePersonList` and `UniqueAppointmentList` that contains \"alex\". This causes entries in the list which","lastModifiedDate":"2022-10-18"},{"lineNumber":172,"author":{"gitId":"pwjj2000"},"content":"does not contain \"alex\" to be hidden from the GUI. This will set the premise of using `list patients` and","lastModifiedDate":"2022-10-18"},{"lineNumber":173,"author":{"gitId":"pwjj2000"},"content":"`list appts`.","lastModifiedDate":"2022-10-18"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"pwjj2000"},"content":"2. When user wants to view the full list of patients again, he/she can enter the command `list patients`. Note that","lastModifiedDate":"2022-10-18"},{"lineNumber":176,"author":{"gitId":"pwjj2000"},"content":"this command only interacts with the `UniquePersonList` and not the `UniqueAppointmentList`, thus it will not modify","lastModifiedDate":"2022-10-18"},{"lineNumber":177,"author":{"gitId":"pwjj2000"},"content":"the displayed list of appointments in any way.","lastModifiedDate":"2022-10-18"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"pwjj2000"},"content":"3. When user wants to view the full list of appointments again, he/she can enter the command `list appts`. Note that","lastModifiedDate":"2022-10-18"},{"lineNumber":180,"author":{"gitId":"pwjj2000"},"content":"   this command only interacts with the `UniqueAppointmentList` and not the `UniquePersonList`, thus it will not modify","lastModifiedDate":"2022-10-18"},{"lineNumber":181,"author":{"gitId":"pwjj2000"},"content":"   the displayed list of patients in any way.","lastModifiedDate":"2022-10-18"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"pwjj2000"},"content":"4. When user wants to view the full lists of both patients and appointments again, he/she can enter the command `list all`. ","lastModifiedDate":"2022-11-03"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":185,"author":{"gitId":"pwjj2000"},"content":"The activity diagram below summarises the above points.","lastModifiedDate":"2022-11-03"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":187,"author":{"gitId":"pwjj2000"},"content":"\u003cimg src\u003d\"images/ListActivityDiagram.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2022-11-03"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"pwjj2000"},"content":"To help you understand what is going on behind the scenes, here is a sequence diagram that demonstrates how","lastModifiedDate":"2022-10-18"},{"lineNumber":190,"author":{"gitId":"pwjj2000"},"content":"`list patients` work:","lastModifiedDate":"2022-10-18"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"pwjj2000"},"content":"\u003cimg src\u003d\"images/ListPatientsSequenceDiagram.png\" width\u003d\"500\" /\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"pwjj2000"},"content":"From the diagram, the `ListCommand` object passes the predicate to show all entries to the `ModelManager`, which","lastModifiedDate":"2022-10-18"},{"lineNumber":195,"author":{"gitId":"pwjj2000"},"content":"will call onto a JavaFX function to modify the displayed list. ","lastModifiedDate":"2022-11-03"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":197,"author":{"gitId":"pwjj2000"},"content":"For `list appts`, it follows a similar","lastModifiedDate":"2022-11-03"},{"lineNumber":198,"author":{"gitId":"pwjj2000"},"content":"process as well, but with `updateFilteredAppointmentList()` instead. For `list all`, you can think of the","lastModifiedDate":"2022-11-03"},{"lineNumber":199,"author":{"gitId":"pwjj2000"},"content":"behaviour as executing both `list patients` and `list appts`.","lastModifiedDate":"2022-11-03"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":201,"author":{"gitId":"guanzhou03"},"content":"#### Design considerations","lastModifiedDate":"2022-11-07"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"pwjj2000"},"content":"**Aspect: How the command is implemented:**","lastModifiedDate":"2022-10-18"},{"lineNumber":204,"author":{"gitId":"pwjj2000"},"content":"* **Alternative 1 (current choice):** `list patients`, `list appts` and `list all` as a command word `list` with","lastModifiedDate":"2022-11-03"},{"lineNumber":205,"author":{"gitId":"pwjj2000"},"content":"3 different descriptors which are not considered as arguments.","lastModifiedDate":"2022-11-03"},{"lineNumber":206,"author":{"gitId":"pwjj2000"},"content":"  * Pros: No additional parser class required","lastModifiedDate":"2022-10-18"},{"lineNumber":207,"author":{"gitId":"pwjj2000"},"content":"  * Cons: `ListCommand#execute()` will have more lines of code.","lastModifiedDate":"2022-10-18"},{"lineNumber":208,"author":{"gitId":"pwjj2000"},"content":"* **Alternative 2:** `list` as a command word with arguments `patients`/`appts`/`all` following it.","lastModifiedDate":"2022-11-03"},{"lineNumber":209,"author":{"gitId":"pwjj2000"},"content":"  * Pros: Seems more aligned with other commands that require more than 1 word of input","lastModifiedDate":"2022-10-18"},{"lineNumber":210,"author":{"gitId":"pwjj2000"},"content":"  * Cons: Require an additional `ListCommandParser` to work; more lines of code required.","lastModifiedDate":"2022-10-18"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"pwjj2000"},"content":"We ultimately went with Alternative 1 since we do not expect `list` to take in many different arguments.","lastModifiedDate":"2022-10-18"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"WingKei67"},"content":"### Cancel Feature","lastModifiedDate":"2022-11-03"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":216,"author":{"gitId":"JovonLim"},"content":"#### Implementation","lastModifiedDate":"2022-11-01"},{"lineNumber":217,"author":{"gitId":"guanzhou03"},"content":"The implemented cancel feature allows users to cancel a patient\u0027s appointment based on its index in the appointment list. \u003cbr\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":218,"author":{"gitId":"JovonLim"},"content":"It is implemented similar to other idENTify commands and it extends `SelectAppointmentCommand`, an abstract class which encapsulates","lastModifiedDate":"2022-11-05"},{"lineNumber":219,"author":{"gitId":"JovonLim"},"content":"operations which require selecting appointments from an appointment list.","lastModifiedDate":"2022-11-05"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-05"},{"lineNumber":221,"author":{"gitId":"JovonLim"},"content":"The logical flow of using this command is shown in the activity diagram given below.","lastModifiedDate":"2022-11-05"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"guanzhou03"},"content":"![Activity Diagram](images/CancelActivityDiagram.png)","lastModifiedDate":"2022-10-18"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"guanzhou03"},"content":"The `AddressBookParser` will first check for the `cancel` command word. The cancel command","lastModifiedDate":"2022-10-18"},{"lineNumber":226,"author":{"gitId":"guanzhou03"},"content":"is facilitated by the `CancelCommandParser` and `CancelCommand` classes. The `CancelCommandParser`","lastModifiedDate":"2022-10-18"},{"lineNumber":227,"author":{"gitId":"guanzhou03"},"content":"parses the user input and obtains the index inputted by the user, before creating the cancel command to","lastModifiedDate":"2022-10-18"},{"lineNumber":228,"author":{"gitId":"guanzhou03"},"content":"execute the deletion of the appointment from the current appointment list.","lastModifiedDate":"2022-10-18"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-05"},{"lineNumber":230,"author":{"gitId":"guanzhou03"},"content":"Given below is an overview of how the cancel command executes the deletion of an appointment to delete the","lastModifiedDate":"2022-10-18"},{"lineNumber":231,"author":{"gitId":"guanzhou03"},"content":"first appointment (index 1) in the appointment list:","lastModifiedDate":"2022-10-18"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-05"},{"lineNumber":233,"author":{"gitId":"guanzhou03"},"content":"![Cancel Command](images/CancelSequenceDiagram.png)","lastModifiedDate":"2022-10-18"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"guanzhou03"},"content":"#### Design considerations","lastModifiedDate":"2022-11-07"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"guanzhou03"},"content":"**Aspect: How we decided to choose the user command:**","lastModifiedDate":"2022-10-18"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"guanzhou03"},"content":"* **Alternative 1 (current choice):** Select an appointment index from appointment list","lastModifiedDate":"2022-10-18"},{"lineNumber":240,"author":{"gitId":"guanzhou03"},"content":"  * Pros: More convenient for the end user to just choose the indexed appointment from the current appointment list.","lastModifiedDate":"2022-10-18"},{"lineNumber":241,"author":{"gitId":"guanzhou03"},"content":"  * Cons: The details of a patient\u0027s appointments will not be shown under the patient\u0027s details in the patient\u0027s list.","lastModifiedDate":"2022-10-18"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"guanzhou03"},"content":"* **Alternative 2:** Use both patient and appointment index to select an appointment to delete.","lastModifiedDate":"2022-10-18"},{"lineNumber":244,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"guanzhou03"},"content":"  * Pros: Intuitive if the user just wants to delete a specified patient\u0027s appointments.","lastModifiedDate":"2022-10-18"},{"lineNumber":246,"author":{"gitId":"guanzhou03"},"content":"  * Cons: Appointments will have to be shown under tha patient list which will clutter up the UI.","lastModifiedDate":"2022-10-18"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"guanzhou03"},"content":"Our team decided to change the user input format of the cancel command from `cancel PATIENT_INDEX APPOINTMENT_INDEX`","lastModifiedDate":"2022-10-18"},{"lineNumber":249,"author":{"gitId":"guanzhou03"},"content":"to `cancel APPOINTMENT_INDEX`, so it is faster for","lastModifiedDate":"2022-10-18"},{"lineNumber":250,"author":{"gitId":"guanzhou03"},"content":"the user to key in, and also more similar to the other commands with only 1 index.","lastModifiedDate":"2022-10-18"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"guanzhou03"},"content":"### Hide Feature","lastModifiedDate":"2022-11-05"},{"lineNumber":253,"author":{"gitId":"guanzhou03"},"content":"- The `hide patients` command hides patients based on at least 1 tag or name given. If more than 1 tag or name is given,","lastModifiedDate":"2022-11-03"},{"lineNumber":254,"author":{"gitId":"guanzhou03"},"content":"then any patients that match that tag or name will be hidden.","lastModifiedDate":"2022-11-03"},{"lineNumber":255,"author":{"gitId":"guanzhou03"},"content":"For example, `hide patients t/nose t/ear` will hide all patients that has either a nose or ear tag.","lastModifiedDate":"2022-11-03"},{"lineNumber":256,"author":{"gitId":"guanzhou03"},"content":"- The `hide appts` command works in exactly the same way, but the conditions are the reason, tag, and status of","lastModifiedDate":"2022-11-03"},{"lineNumber":257,"author":{"gitId":"guanzhou03"},"content":"the appointment. For example, `hide appts s/marked` will hide all appointments that are marked.","lastModifiedDate":"2022-11-03"},{"lineNumber":258,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":259,"author":{"gitId":"guanzhou03"},"content":"#### Implementation","lastModifiedDate":"2022-11-03"},{"lineNumber":260,"author":{"gitId":"guanzhou03"},"content":"The key idea of hide and other organisational commands is to allow users to successively filter out patients,","lastModifiedDate":"2022-11-03"},{"lineNumber":261,"author":{"gitId":"guanzhou03"},"content":"so that they can operate on a small list that they are interested in. For example, `hide patients n/Alex` and then","lastModifiedDate":"2022-11-03"},{"lineNumber":262,"author":{"gitId":"guanzhou03"},"content":"followed by `hide patients t/ear` should apply both hide commands successively, each time hide is applied on the current","lastModifiedDate":"2022-11-03"},{"lineNumber":263,"author":{"gitId":"guanzhou03"},"content":"shown list instead of the entire patient list.","lastModifiedDate":"2022-11-03"},{"lineNumber":264,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":265,"author":{"gitId":"guanzhou03"},"content":"To implement this, and to ensure that hide works well with other organisational features such as find and unhide, we","lastModifiedDate":"2022-11-03"},{"lineNumber":266,"author":{"gitId":"guanzhou03"},"content":"maintain an overarching HiddenPredicateSingleton which captures the state of the current patient and appointment list.","lastModifiedDate":"2022-11-03"},{"lineNumber":267,"author":{"gitId":"guanzhou03"},"content":"This singleton serves as a global predicate which is updated every time an organisational command is entered.","lastModifiedDate":"2022-11-03"},{"lineNumber":268,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":269,"author":{"gitId":"guanzhou03"},"content":"Each time the command is executed, the current patient/appointment predicate will be combined with (AND operation)","lastModifiedDate":"2022-11-03"},{"lineNumber":270,"author":{"gitId":"guanzhou03"},"content":"a predicate that is the complement of the given condition, since entries that satisfy the model predicate will be shown","lastModifiedDate":"2022-11-03"},{"lineNumber":271,"author":{"gitId":"guanzhou03"},"content":", and thus to hide we will have to apply a NOT operation to the given condition e.g `hide patients t/ear` means we should","lastModifiedDate":"2022-11-03"},{"lineNumber":272,"author":{"gitId":"guanzhou03"},"content":"combine the current patient list predicate with a predicate that will fail if the patient tag contains ear.","lastModifiedDate":"2022-11-03"},{"lineNumber":273,"author":{"gitId":"guanzhou03"},"content":"The activity diagram below will illustrate a hide patient process. A similar process applies for hide appointment.","lastModifiedDate":"2022-11-03"},{"lineNumber":274,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":275,"author":{"gitId":"guanzhou03"},"content":"![Hide Patients](images/HidePatientsActivityDiagram.png)","lastModifiedDate":"2022-11-03"},{"lineNumber":276,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":277,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":278,"author":{"gitId":"guanzhou03"},"content":"#### Design considerations","lastModifiedDate":"2022-11-07"},{"lineNumber":279,"author":{"gitId":"guanzhou03"},"content":"**Aspect: How hide patient/appointment executes:**","lastModifiedDate":"2022-11-03"},{"lineNumber":280,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":281,"author":{"gitId":"guanzhou03"},"content":"* **Current choice:** Making use of a singleton class to capture the state of the patient/appointment list at all times.","lastModifiedDate":"2022-11-03"},{"lineNumber":282,"author":{"gitId":"guanzhou03"},"content":"* A singleton pattern is used here, because we only should have a single instance of HiddenPredicate to act as a global","lastModifiedDate":"2022-11-05"},{"lineNumber":283,"author":{"gitId":"guanzhou03"},"content":"variable that holds the state of the current list shown to the user. If more than one object is created by mistake,","lastModifiedDate":"2022-11-05"},{"lineNumber":284,"author":{"gitId":"guanzhou03"},"content":"there is a risk that our organisational commands no longer work correctly, as the same global predicate must be shared","lastModifiedDate":"2022-11-05"},{"lineNumber":285,"author":{"gitId":"guanzhou03"},"content":"among all organisational commands such as find/group/hide/unhide.","lastModifiedDate":"2022-11-05"},{"lineNumber":286,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":287,"author":{"gitId":"guanzhou03"},"content":"**Aspect: Whether hide should hide by any match or all match**","lastModifiedDate":"2022-11-03"},{"lineNumber":288,"author":{"gitId":"guanzhou03"},"content":"* **Current choice:** Making hide any match, meaning patients/appts that match any of the keywords will be hidden.","lastModifiedDate":"2022-11-03"},{"lineNumber":289,"author":{"gitId":"guanzhou03"},"content":"E.g: `hide appts s/unmarked t/ear` will hide all appointments that is either unmarked OR has a ear tag.","lastModifiedDate":"2022-11-03"},{"lineNumber":290,"author":{"gitId":"guanzhou03"},"content":"* **Alternative:** Making hide all match meaning `hide appts s/unmarked t/ear` only hides appointments that satisfy","lastModifiedDate":"2022-11-03"},{"lineNumber":291,"author":{"gitId":"guanzhou03"},"content":"both the status and tag conditions.","lastModifiedDate":"2022-11-03"},{"lineNumber":292,"author":{"gitId":"guanzhou03"},"content":"* We decided to go with any match so that it is easier for users if they want to hide many types of entries at one go,","lastModifiedDate":"2022-11-03"},{"lineNumber":293,"author":{"gitId":"guanzhou03"},"content":"as opposed to all match since the user will have to key in hide many times successively.","lastModifiedDate":"2022-11-03"},{"lineNumber":294,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":295,"author":{"gitId":"guanzhou03"},"content":"**Aspect: How hide patients should affect appointment list**","lastModifiedDate":"2022-11-05"},{"lineNumber":296,"author":{"gitId":"guanzhou03"},"content":"* **Current choice:** Hiding patients will also hide their appointments, and unhiding patients will also unhide their appointments \u003cbr\u003e","lastModifiedDate":"2022-11-05"},{"lineNumber":297,"author":{"gitId":"guanzhou03"},"content":"**Explanation:** We decided on this implementation because hiding a patient would imply that the user has no interest in this patient, and thus the appointments of the patient are also hidden so that the user can focus on other patients that he did not hide. Similarly, unhiding a patient implies that the user has interest in the particular patient, and thus the patient\u0027s appointments will also be shown.","lastModifiedDate":"2022-11-05"},{"lineNumber":298,"author":{"gitId":"guanzhou03"},"content":"On the other hand, hiding and unhiding appointments does not affect the patient list as the user may only be interested in going through the appointments.","lastModifiedDate":"2022-11-05"},{"lineNumber":299,"author":{"gitId":"guanzhou03"},"content":"* **Alternative:** Hiding/Unhiding patients do not affect appointment list at all \u003cbr\u003e","lastModifiedDate":"2022-11-05"},{"lineNumber":300,"author":{"gitId":"guanzhou03"},"content":"This approach is easier to implement, as we do not have to worry about the appointment list and we only need to update the patient list. However, we wanted to make it more convenient for the user, as there is no good way to hide appointments of a particular patient if we have no interest in the patient. ","lastModifiedDate":"2022-11-05"},{"lineNumber":301,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-11-05"},{"lineNumber":302,"author":{"gitId":"WingKei67"},"content":"### Group Patient Feature","lastModifiedDate":"2022-11-03"},{"lineNumber":303,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":304,"author":{"gitId":"JovonLim"},"content":"#### Implementation","lastModifiedDate":"2022-11-06"},{"lineNumber":305,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":306,"author":{"gitId":"WingKei67"},"content":"The group mechanism implements the following operations:","lastModifiedDate":"2022-10-25"},{"lineNumber":307,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":308,"author":{"gitId":"WingKei67"},"content":"* Group patients according to their tags.","lastModifiedDate":"2022-10-25"},{"lineNumber":309,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":310,"author":{"gitId":"WingKei67"},"content":"The operation is exposed in the `Command` interface as `Command#GroupPatientCommand()`.","lastModifiedDate":"2022-10-25"},{"lineNumber":311,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":312,"author":{"gitId":"WingKei67"},"content":"Given below is an example usage scenario and how the group mechanism behaves at each step.","lastModifiedDate":"2022-10-25"},{"lineNumber":313,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":314,"author":{"gitId":"WingKei67"},"content":"Step 1. The user launches the application for the first time. The `idENTify` will be initialized with the initial","lastModifiedDate":"2022-10-25"},{"lineNumber":315,"author":{"gitId":"WingKei67"},"content":"patient list.","lastModifiedDate":"2022-10-25"},{"lineNumber":316,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":317,"author":{"gitId":"WingKei67"},"content":"Step 2. The user executes `group patients` command to group patients by their tags, causing the modified list of","lastModifiedDate":"2022-10-25"},{"lineNumber":318,"author":{"gitId":"WingKei67"},"content":"patients after the `group patients` command executes to show on the screen.","lastModifiedDate":"2022-10-25"},{"lineNumber":319,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":320,"author":{"gitId":"WingKei67"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute","lastModifiedDate":"2022-10-25"},{"lineNumber":321,"author":{"gitId":"WingKei67"},"content":"(\"group patients\")` API call.","lastModifiedDate":"2022-10-25"},{"lineNumber":322,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":323,"author":{"gitId":"WingKei67"},"content":"![Interactions Inside the Logic Component for the `group patients` Command](images/GroupPatientSequenceDiagram.png)","lastModifiedDate":"2022-10-25"},{"lineNumber":324,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":325,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2022-10-25"},{"lineNumber":326,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":327,"author":{"gitId":"WingKei67"},"content":"\u003cimg src\u003d\"images/GroupPatientCommand.png\" width\u003d\"1000\" /\u003e","lastModifiedDate":"2022-10-25"},{"lineNumber":328,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":329,"author":{"gitId":"guanzhou03"},"content":"#### Design considerations","lastModifiedDate":"2022-11-07"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":331,"author":{"gitId":"WingKei67"},"content":"**Aspect: How group patients executes:**","lastModifiedDate":"2022-10-25"},{"lineNumber":332,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":333,"author":{"gitId":"WingKei67"},"content":"* **Current choice:** Use a different comparator from default so that a heavy weight can be assigned to the value of a","lastModifiedDate":"2022-10-25"},{"lineNumber":334,"author":{"gitId":"WingKei67"},"content":"  tag group where a patient belongs.","lastModifiedDate":"2022-10-25"},{"lineNumber":335,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":336,"author":{"gitId":"WingKei67"},"content":"### Group Appointment Feature","lastModifiedDate":"2022-11-03"},{"lineNumber":337,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":338,"author":{"gitId":"JovonLim"},"content":"#### Implementation","lastModifiedDate":"2022-11-06"},{"lineNumber":339,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":340,"author":{"gitId":"WingKei67"},"content":"The group mechanism implements the following operations:","lastModifiedDate":"2022-10-25"},{"lineNumber":341,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":342,"author":{"gitId":"WingKei67"},"content":"* Group appointments according to their tags or patient.","lastModifiedDate":"2022-10-25"},{"lineNumber":343,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":344,"author":{"gitId":"WingKei67"},"content":"The operation is exposed in the `Command` interface as `Command#GroupAppointmentCommand()`.","lastModifiedDate":"2022-10-25"},{"lineNumber":345,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":346,"author":{"gitId":"WingKei67"},"content":"Given below is an example usage scenario and how the group mechanism behaves at each step.","lastModifiedDate":"2022-10-25"},{"lineNumber":347,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":348,"author":{"gitId":"WingKei67"},"content":"Step 1. The user launches the application for the first time. The `idENTify` will be initialized with the initial","lastModifiedDate":"2022-10-18"},{"lineNumber":349,"author":{"gitId":"WingKei67"},"content":"appointment list.","lastModifiedDate":"2022-10-18"},{"lineNumber":350,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":351,"author":{"gitId":"JovonLim"},"content":"Step 2. The user executes `group appts k/KEY` command to group appointments by their tags `(k/tag)` or patient `(k/patient)`,","lastModifiedDate":"2022-11-06"},{"lineNumber":352,"author":{"gitId":"JovonLim"},"content":"causing the modified list of appointments after the `group appts k/KEY` command executes to show on the screen.","lastModifiedDate":"2022-11-06"},{"lineNumber":353,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":354,"author":{"gitId":"JovonLim"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute(\"group appts k/KEY\")` API call.","lastModifiedDate":"2022-11-06"},{"lineNumber":355,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":356,"author":{"gitId":"WingKei67"},"content":"![Interactions Inside the Logic Component for the `group appts k/KEY` Command](images/GroupAppointmentSequenceDiagram.png)","lastModifiedDate":"2022-10-25"},{"lineNumber":357,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":358,"author":{"gitId":"WingKei67"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2022-10-18"},{"lineNumber":359,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":360,"author":{"gitId":"WingKei67"},"content":"\u003cimg src\u003d\"images/GroupAppointmentCommand.png\" width\u003d\"1000\" /\u003e","lastModifiedDate":"2022-10-25"},{"lineNumber":361,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":362,"author":{"gitId":"guanzhou03"},"content":"#### Design considerations","lastModifiedDate":"2022-11-07"},{"lineNumber":363,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":364,"author":{"gitId":"WingKei67"},"content":"**Aspect: How group appointments executes:**","lastModifiedDate":"2022-10-25"},{"lineNumber":365,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":366,"author":{"gitId":"WingKei67"},"content":"* **Current choice:** Use a different comparator from default so that a heavy weight can be assigned to the value of a","lastModifiedDate":"2022-10-25"},{"lineNumber":367,"author":{"gitId":"WingKei67"},"content":"  tag group where a patient belongs or the patient attached to the appointment.","lastModifiedDate":"2022-10-25"},{"lineNumber":368,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":369,"author":{"gitId":"WingKei67"},"content":"### Ungroup Feature","lastModifiedDate":"2022-11-03"},{"lineNumber":370,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":371,"author":{"gitId":"JovonLim"},"content":"#### Implementation","lastModifiedDate":"2022-11-06"},{"lineNumber":372,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":373,"author":{"gitId":"WingKei67"},"content":"The ungroup mechanism implements the following operations:","lastModifiedDate":"2022-10-25"},{"lineNumber":374,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":375,"author":{"gitId":"WingKei67"},"content":"* Either ungroup appointments or ungroup patients.","lastModifiedDate":"2022-10-25"},{"lineNumber":376,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":377,"author":{"gitId":"WingKei67"},"content":"The operation is exposed in the `Command` interface as `Command#UngroupCommand()`.","lastModifiedDate":"2022-10-25"},{"lineNumber":378,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":379,"author":{"gitId":"WingKei67"},"content":"Given below is an example usage scenario and how the group mechanism behaves at each step.","lastModifiedDate":"2022-10-25"},{"lineNumber":380,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":381,"author":{"gitId":"WingKei67"},"content":"Step 1. The user launches the application for the first time. The `idENTify` will be initialized with the initial","lastModifiedDate":"2022-10-25"},{"lineNumber":382,"author":{"gitId":"WingKei67"},"content":"patient and appointment list.","lastModifiedDate":"2022-10-25"},{"lineNumber":383,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":384,"author":{"gitId":"JovonLim"},"content":"Step 2. The user executes `group appts k/KEY` command to group appointments by their tags `(k/tag)` or patient `(k/patient)`, ","lastModifiedDate":"2022-11-06"},{"lineNumber":385,"author":{"gitId":"JovonLim"},"content":"causing the modified list of appointments after the `group appts k/KEY` command executes to show on","lastModifiedDate":"2022-11-06"},{"lineNumber":386,"author":{"gitId":"WingKei67"},"content":"the screen or executes `group patients` command to group patients by their tags, causing the modified list of","lastModifiedDate":"2022-10-25"},{"lineNumber":387,"author":{"gitId":"WingKei67"},"content":"patients after the `group patients` command executes to show on the screen.","lastModifiedDate":"2022-10-25"},{"lineNumber":388,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":389,"author":{"gitId":"WingKei67"},"content":"Step 3. The user executes `ungroup appts` command to ungroup appointments or `ungroup patients` command to ungroup","lastModifiedDate":"2022-10-25"},{"lineNumber":390,"author":{"gitId":"WingKei67"},"content":"patients.","lastModifiedDate":"2022-10-25"},{"lineNumber":391,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":392,"author":{"gitId":"WingKei67"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the use has not group patients or","lastModifiedDate":"2022-10-25"},{"lineNumber":393,"author":{"gitId":"WingKei67"},"content":"appointments, ungroup commands will make no effect on the current addressbook list on the screen.","lastModifiedDate":"2022-10-25"},{"lineNumber":394,"author":{"gitId":"WingKei67"},"content":"\u003c/div\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":395,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":396,"author":{"gitId":"WingKei67"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute","lastModifiedDate":"2022-10-25"},{"lineNumber":397,"author":{"gitId":"WingKei67"},"content":"(\"ungroup\")` API call.","lastModifiedDate":"2022-10-25"},{"lineNumber":398,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":399,"author":{"gitId":"WingKei67"},"content":"![Interactions Inside the Logic Component for the `ungroup` Command](images/UngroupSequenceDiagram.png)","lastModifiedDate":"2022-10-25"},{"lineNumber":400,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":401,"author":{"gitId":"WingKei67"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2022-10-25"},{"lineNumber":402,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":403,"author":{"gitId":"WingKei67"},"content":"\u003cimg src\u003d\"images/UngroupCommand.png\" width\u003d\"1000\" /\u003e","lastModifiedDate":"2022-10-25"},{"lineNumber":404,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":405,"author":{"gitId":"guanzhou03"},"content":"#### Design considerations","lastModifiedDate":"2022-11-07"},{"lineNumber":406,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":407,"author":{"gitId":"WingKei67"},"content":"**Aspect: How ungroup executes:**","lastModifiedDate":"2022-10-25"},{"lineNumber":408,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":409,"author":{"gitId":"WingKei67"},"content":"* **Current choice:** Use the default comparator for appointments or patients so that the specified list will sort","lastModifiedDate":"2022-10-25"},{"lineNumber":410,"author":{"gitId":"WingKei67"},"content":"  as default settings. To be more specific, the patient list will be sorted by patients\u0027 names and the appointemnt","lastModifiedDate":"2022-10-25"},{"lineNumber":411,"author":{"gitId":"WingKei67"},"content":"  list will be sorted by datetime.","lastModifiedDate":"2022-10-25"},{"lineNumber":412,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":413,"author":{"gitId":"WingKei67"},"content":"### Book Feature","lastModifiedDate":"2022-11-03"},{"lineNumber":414,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":415,"author":{"gitId":"JovonLim"},"content":"#### Implementation","lastModifiedDate":"2022-10-18"},{"lineNumber":416,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":417,"author":{"gitId":"JovonLim"},"content":"The `AddressBookParser` class checks for the `book` command word. The book mechanism is facilitated by the `BookCommandParser` and `BookCommand` classes. The `BookCommandParser` implements the `Parser` interface and takes in the user input and parses it into an index and 4 string values. The 4 string values are obtained from the `ArgumentMultimap` that checks whether the user has inputted the 4 prefixes supported by this feature.","lastModifiedDate":"2022-11-03"},{"lineNumber":418,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":419,"author":{"gitId":"JovonLim"},"content":"The prefixes are:","lastModifiedDate":"2022-11-03"},{"lineNumber":420,"author":{"gitId":"JovonLim"},"content":"* `r/` for reason","lastModifiedDate":"2022-10-18"},{"lineNumber":421,"author":{"gitId":"JovonLim"},"content":"* `d/` for dateTime","lastModifiedDate":"2022-10-18"},{"lineNumber":422,"author":{"gitId":"JovonLim"},"content":"* `pe/` for recurring time period (optional)","lastModifiedDate":"2022-10-18"},{"lineNumber":423,"author":{"gitId":"JovonLim"},"content":"* `t/` for tags (optional)","lastModifiedDate":"2022-11-03"},{"lineNumber":424,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":425,"author":{"gitId":"JovonLim"},"content":"After retrieving the string values, the `BookCommandParser` executes the `ParserUtil#ParseAppointment()` to use these values to create an `Appointment` object. A `BookCommand` object will then be created with the given index and `Appointment` object. The `BookCommand` object will retrieve the specified person in the `UniquePersonList` and adds the `Appointment` object to the person\u0027s list of appointments.","lastModifiedDate":"2022-11-03"},{"lineNumber":426,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":427,"author":{"gitId":"JovonLim"},"content":"The newly added `Appointment` object will also be saved in the JSON file through the usage of a Jackson-friendly class `JsonAdaptedAppointment`.","lastModifiedDate":"2022-10-18"},{"lineNumber":428,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":429,"author":{"gitId":"JovonLim"},"content":"Given below are some example usage scenarios and how the book feature behaves in each scenario.","lastModifiedDate":"2022-10-18"},{"lineNumber":430,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":431,"author":{"gitId":"JovonLim"},"content":"Scenario 1: User inputs `book 1 r/Sore Throat d/2022-12-10 12:00`.","lastModifiedDate":"2022-11-01"},{"lineNumber":432,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":433,"author":{"gitId":"JovonLim"},"content":"The `ParserUtil#ParseAppointment()` will detect that both the given reason and date are valid, and creates an appointment object to be stored in the specified `Person`, only if the `Person` does not have an existing appointment at that date(Scenario 6).","lastModifiedDate":"2022-11-03"},{"lineNumber":434,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":435,"author":{"gitId":"JovonLim"},"content":"Scenario 2: User inputs an empty reason in the `r/` prefix.","lastModifiedDate":"2022-11-01"},{"lineNumber":436,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":437,"author":{"gitId":"JovonLim"},"content":"The `ParserUtil#ParseAppointment()` will detect that the given reason is empty and throws a `ParseException`, which will feedback to the user that he has given an invalid reason.","lastModifiedDate":"2022-11-03"},{"lineNumber":438,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":439,"author":{"gitId":"JovonLim"},"content":"Scenario 3: User inputs an invalid dateTime in the `d/` prefix, such as `2022-15-10 14:00`.","lastModifiedDate":"2022-11-01"},{"lineNumber":440,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":441,"author":{"gitId":"JovonLim"},"content":"The `ParserUtil#ParseAppointment()` will detect that the given dateTime is invalid and throws a `ParseException`, which will feedback to the user that he has given an invalid dateTime.","lastModifiedDate":"2022-11-03"},{"lineNumber":442,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":443,"author":{"gitId":"JovonLim"},"content":"Scenario 4: User inputs an invalid recurring time period in the `pe/` prefix, such as `1S`.","lastModifiedDate":"2022-11-01"},{"lineNumber":444,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":445,"author":{"gitId":"JovonLim"},"content":"The `ParserUtil#ParseAppointment()` will detect that the given time period is invalid and throws a `ParseException`, which will feedback to the user that he has given an invalid time period.","lastModifiedDate":"2022-11-03"},{"lineNumber":446,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":447,"author":{"gitId":"JovonLim"},"content":"Scenario 5: User inputs an invalid tag in the `t/` prefix, such as `Sick`.","lastModifiedDate":"2022-11-03"},{"lineNumber":448,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":449,"author":{"gitId":"JovonLim"},"content":"The `ParserUtil#ParseAppointment()` will detect that the given tag is invalid and throws a `ParseException`, which will feedback to the user that he has given an invalid tag.","lastModifiedDate":"2022-11-03"},{"lineNumber":450,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":451,"author":{"gitId":"JovonLim"},"content":"Scenario 6: User tries to book an appointment with the same time as other appointments of the same person.","lastModifiedDate":"2022-11-03"},{"lineNumber":452,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":453,"author":{"gitId":"JovonLim"},"content":"\u003cimg src\u003d\"images/BookCommandObjectDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":454,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":455,"author":{"gitId":"JovonLim"},"content":"This object diagram illustrates the above scenario. As the specified person has already booked an appointment in `Dec 10 2022 12:00`, the newly created `Appointment` object will not be associated with the person. The `BookCommand` will throw a `CommandException`, which will feedback to the user that he tried to book an appointment at the same time as the other appointments.","lastModifiedDate":"2022-11-05"},{"lineNumber":456,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":457,"author":{"gitId":"JovonLim"},"content":"The following sequence diagram helps to provide a clearer picture to how the book operation works:","lastModifiedDate":"2022-10-18"},{"lineNumber":458,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":459,"author":{"gitId":"JovonLim"},"content":"![BookSequenceDiagram](images/BookSequenceDiagram.png)","lastModifiedDate":"2022-10-18"},{"lineNumber":460,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":461,"author":{"gitId":"JovonLim"},"content":"The following Class diagram shows how serializing `Appointment` objects into JSON format is done.","lastModifiedDate":"2022-10-18"},{"lineNumber":462,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":463,"author":{"gitId":"JovonLim"},"content":"\u003cimg src\u003d\"images/BookCommandStorageClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":464,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":465,"author":{"gitId":"JovonLim"},"content":"`Appointment` objects are mapped to `JsonAdaptedAppointment` objects, so that they contain only relevant fields to store and works easier with Jackson.","lastModifiedDate":"2022-10-18"},{"lineNumber":466,"author":{"gitId":"JovonLim"},"content":"These objects are stored in a list field of the `JsonAdaptedPerson` and are stored together in a single JSON file, for easier retrival and assignment when starting up the application.","lastModifiedDate":"2022-10-18"},{"lineNumber":467,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":468,"author":{"gitId":"guanzhou03"},"content":"#### Design Considerations","lastModifiedDate":"2022-11-07"},{"lineNumber":469,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":470,"author":{"gitId":"JovonLim"},"content":"**Aspect: Where to assign Appointment objects:**","lastModifiedDate":"2022-10-18"},{"lineNumber":471,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":472,"author":{"gitId":"JovonLim"},"content":"* **Alternative 1 (current implementation):** Each person stores his own list of appointments, as well as the `UniqueAppointmentList` class storing the same objects.","lastModifiedDate":"2022-10-18"},{"lineNumber":473,"author":{"gitId":"JovonLim"},"content":"  * Pros: Easier to keep track of which appointments are associated to which person for other appointment related features.","lastModifiedDate":"2022-10-18"},{"lineNumber":474,"author":{"gitId":"JovonLim"},"content":"  * Cons: Must ensure both the person\u0027s appointments and `UniqueAppointmentList` appointments are equal, in edit/cancel/delete features.","lastModifiedDate":"2022-10-18"},{"lineNumber":475,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":476,"author":{"gitId":"JovonLim"},"content":"* **Alternative 2:** `Appointment` objects are stored only in the `UniqueAppointmentList` class.","lastModifiedDate":"2022-10-18"},{"lineNumber":477,"author":{"gitId":"JovonLim"},"content":"  * Pros: Easier to maintain as there\u0027s only one appointment object.","lastModifiedDate":"2022-10-18"},{"lineNumber":478,"author":{"gitId":"JovonLim"},"content":"  * Cons: Harder and more costly to track of each person\u0027s appointments, especially if the person himself is edited or deleted in the process.","lastModifiedDate":"2022-10-18"},{"lineNumber":479,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":480,"author":{"gitId":"JovonLim"},"content":"### Edit Appointment Feature","lastModifiedDate":"2022-11-03"},{"lineNumber":481,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":482,"author":{"gitId":"JovonLim"},"content":"#### Implementation","lastModifiedDate":"2022-11-03"},{"lineNumber":483,"author":{"gitId":"JovonLim"},"content":"The `AddressBookParser` class checks for the `edit` command word and the `appts` descriptor word to begin. The edit appointment mechanism is facilitated by the `EditAppointmentCommandParser`, `EditAppointmentCommand` classes and `EditAppointmentDescriptor` inner class. The `EditAppointmentCommandParser` implements the `Parser` interface and takes in the user input and parses it into an index and up to 4 string values. The string values are obtained from the `ArgumentMultimap` that checks whether the user has inputted any of the 4 prefixes supported by this feature.","lastModifiedDate":"2022-11-03"},{"lineNumber":484,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":485,"author":{"gitId":"JovonLim"},"content":"The prefixes are:","lastModifiedDate":"2022-11-03"},{"lineNumber":486,"author":{"gitId":"JovonLim"},"content":"* `r/` for reason","lastModifiedDate":"2022-11-03"},{"lineNumber":487,"author":{"gitId":"JovonLim"},"content":"* `d/` for dateTime","lastModifiedDate":"2022-11-03"},{"lineNumber":488,"author":{"gitId":"JovonLim"},"content":"* `pe/` for recurring time period","lastModifiedDate":"2022-11-03"},{"lineNumber":489,"author":{"gitId":"JovonLim"},"content":"* `t/` for tags","lastModifiedDate":"2022-11-03"},{"lineNumber":490,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":491,"author":{"gitId":"JovonLim"},"content":"The logical flow of using this command is shown in the activity diagram given below.","lastModifiedDate":"2022-11-03"},{"lineNumber":492,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":493,"author":{"gitId":"JovonLim"},"content":"![EditApptActivityDiagram](images/EditApptActivityDiagram.png)","lastModifiedDate":"2022-11-03"},{"lineNumber":494,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":495,"author":{"gitId":"JovonLim"},"content":"If any of the prefixes contain invalid values or no prefix values were provided, a `ParseException` will be thrown. Else, a new `Appointment` will be created with the changes and replaces the specified `Appointment` object to be edited in both the `Person` list of appointments and the `UniqueAppointmentList`. ","lastModifiedDate":"2022-11-03"},{"lineNumber":496,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":497,"author":{"gitId":"JovonLim"},"content":"#### Design Considerations","lastModifiedDate":"2022-11-03"},{"lineNumber":498,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":499,"author":{"gitId":"JovonLim"},"content":"**Aspect: How to edit the appointment objects:**","lastModifiedDate":"2022-11-03"},{"lineNumber":500,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":501,"author":{"gitId":"JovonLim"},"content":"* **Alternative 1 (current implementation):** Follow the `EditPersonDescriptor` inner class and implement a `EditAppointmentDescriptor` inner class.","lastModifiedDate":"2022-11-03"},{"lineNumber":502,"author":{"gitId":"JovonLim"},"content":"  * Pros: Easier to follow existing systems and edit the appointment the same way as the `edit patients` command.","lastModifiedDate":"2022-11-03"},{"lineNumber":503,"author":{"gitId":"JovonLim"},"content":"  * Cons: Existing `Appointment` object is no longer used, using memory until garbage collected.","lastModifiedDate":"2022-11-03"},{"lineNumber":504,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":505,"author":{"gitId":"JovonLim"},"content":"* **Alternative 2:** Edit the existing `Appointment` object itself.","lastModifiedDate":"2022-11-03"},{"lineNumber":506,"author":{"gitId":"JovonLim"},"content":"  * Pros: Only have to edit the required fields.","lastModifiedDate":"2022-11-03"},{"lineNumber":507,"author":{"gitId":"JovonLim"},"content":"  * Cons: Editing the existing object does not reflect the changes in the Appointment listview as compared to setting a new object, hence requiring more Observable fields.","lastModifiedDate":"2022-11-05"},{"lineNumber":508,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":509,"author":{"gitId":"WingKei67"},"content":"### Mark/Unmark Feature","lastModifiedDate":"2022-11-03"},{"lineNumber":510,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":511,"author":{"gitId":"NicholasTYD"},"content":"#### Implementation","lastModifiedDate":"2022-11-05"},{"lineNumber":512,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-05"},{"lineNumber":513,"author":{"gitId":"NicholasTYD"},"content":"The parameters involved in the `mark`/`unmark` commands is the same as that of the `cancel` command. ","lastModifiedDate":"2022-11-03"},{"lineNumber":514,"author":{"gitId":"NicholasTYD"},"content":"All 3 commands take in a single parameter denoting the desired appointment number to modify. ","lastModifiedDate":"2022-11-03"},{"lineNumber":515,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":516,"author":{"gitId":"NicholasTYD"},"content":"As such, the `mark`/`unmark` commands also extend the `SelectAppointmentCommand` class, and are parsed similarly as well -","lastModifiedDate":"2022-11-03"},{"lineNumber":517,"author":{"gitId":"NicholasTYD"},"content":"firstly through the `AddressBookParser` to identify the inputted command as a `mark`/`unmark` command, ","lastModifiedDate":"2022-11-03"},{"lineNumber":518,"author":{"gitId":"NicholasTYD"},"content":"then followed by a second parse in `MarkCommandParser`/`UnmarkCommandParser` to create a `MarkCommand`/`UnmarkCommand` object,","lastModifiedDate":"2022-11-03"},{"lineNumber":519,"author":{"gitId":"NicholasTYD"},"content":"which is then executed to mark/unmark the target appointment.","lastModifiedDate":"2022-11-03"},{"lineNumber":520,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":521,"author":{"gitId":"NicholasTYD"},"content":"However, the `mark` command comes with an additional step during the `execute` method. ","lastModifiedDate":"2022-11-03"},{"lineNumber":522,"author":{"gitId":"NicholasTYD"},"content":"It checks if an appointment is recurring, and adds a future unmarked appointment at the designated date if needed.","lastModifiedDate":"2022-11-03"},{"lineNumber":523,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":524,"author":{"gitId":"NicholasTYD"},"content":"Given below is an example usage scenario, where the user enters `mark 1` as the input,","lastModifiedDate":"2022-10-18"},{"lineNumber":525,"author":{"gitId":"NicholasTYD"},"content":"and how the `mark` mechanism behaves at each step.","lastModifiedDate":"2022-11-03"},{"lineNumber":526,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":527,"author":{"gitId":"NicholasTYD"},"content":"![MarkSequenceDiagram](images/MarkSequenceDiagram.png)","lastModifiedDate":"2022-10-18"},{"lineNumber":528,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":529,"author":{"gitId":"NicholasTYD"},"content":"The `unmark` sequence diagram is identical to the `mark` sequence diagram but lacks the `opt` frame.","lastModifiedDate":"2022-11-03"},{"lineNumber":530,"author":{"gitId":"NicholasTYD"},"content":"It also contains the `UnmarkCommandParser` and `UnmarkCommand` classes in place of `MarkCommandParser` and `MarkCommand` respectively.","lastModifiedDate":"2022-11-03"},{"lineNumber":531,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":532,"author":{"gitId":"guanzhou03"},"content":"#### Design considerations","lastModifiedDate":"2022-11-07"},{"lineNumber":533,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":534,"author":{"gitId":"NicholasTYD"},"content":"**Aspect: How mark \u0026 unmark executes:**","lastModifiedDate":"2022-10-18"},{"lineNumber":535,"author":{"gitId":"NicholasTYD"},"content":"* **Alternative 1 (current choice):** `MarkCommand` and `UnmarkCommand` takes in an `Index` denoting the appointment to","lastModifiedDate":"2022-10-18"},{"lineNumber":536,"author":{"gitId":"NicholasTYD"},"content":"mark/unmark.","lastModifiedDate":"2022-10-18"},{"lineNumber":537,"author":{"gitId":"NicholasTYD"},"content":"    * Pros: Easy to implement.","lastModifiedDate":"2022-10-18"},{"lineNumber":538,"author":{"gitId":"NicholasTYD"},"content":"    * Cons: Will have to compute the actual appointment to mark `MarkCommand`/`UnmarkCommand` itself.","lastModifiedDate":"2022-10-18"},{"lineNumber":539,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":540,"author":{"gitId":"NicholasTYD"},"content":"* **Alternative 2:** `MarkCommand` and `UnmarkCommand` takes in the `Appointment` to be marked as a parameter in its","lastModifiedDate":"2022-10-18"},{"lineNumber":541,"author":{"gitId":"NicholasTYD"},"content":"constructor directly","lastModifiedDate":"2022-10-18"},{"lineNumber":542,"author":{"gitId":"NicholasTYD"},"content":"    * Pros: Cohesiveness is increased, as it only needs to concern itself with marking/unmarking the appointment.","lastModifiedDate":"2022-10-18"},{"lineNumber":543,"author":{"gitId":"NicholasTYD"},"content":"    * Cons: The `CommandResult` object generated at the end of the command will not have the `Index` of the appointment","lastModifiedDate":"2022-10-18"},{"lineNumber":544,"author":{"gitId":"NicholasTYD"},"content":"  recorded in it. This makes it harder to debug using `CommandResult` when bugs occur.","lastModifiedDate":"2022-10-18"},{"lineNumber":545,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":546,"author":{"gitId":"WingKei67"},"content":"### Find Feature","lastModifiedDate":"2022-11-03"},{"lineNumber":547,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":548,"author":{"gitId":"NicholasTYD"},"content":"#### Implementation","lastModifiedDate":"2022-11-05"},{"lineNumber":549,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-05"},{"lineNumber":550,"author":{"gitId":"NicholasTYD"},"content":"![MarkSequenceDiagram](images/FindClassDiagram.png)","lastModifiedDate":"2022-10-18"},{"lineNumber":551,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":552,"author":{"gitId":"NicholasTYD"},"content":"The `find` command takes in 2 predicates `CombinedPersonPredicate`, `CombinedAppointmentPredicate` and a boolean `isAppointmentPredicateUsed`.","lastModifiedDate":"2022-11-05"},{"lineNumber":553,"author":{"gitId":"NicholasTYD"},"content":"* `CombinedPersonPredicate` stores all person related search strings and tests for all patients that satisfies all","lastModifiedDate":"2022-10-18"},{"lineNumber":554,"author":{"gitId":"NicholasTYD"},"content":"  the search terms.","lastModifiedDate":"2022-10-18"},{"lineNumber":555,"author":{"gitId":"NicholasTYD"},"content":"* `CombinedAppointmentPredicate` stores all appointment related search fields and tests for all appointments that","lastModifiedDate":"2022-11-05"},{"lineNumber":556,"author":{"gitId":"NicholasTYD"},"content":"  satisfies all the search terms.","lastModifiedDate":"2022-10-18"},{"lineNumber":557,"author":{"gitId":"NicholasTYD"},"content":"* `isAppointmentPredicateUsed` tracks if there are any appointment related search terms are specified by the user. ","lastModifiedDate":"2022-11-05"},{"lineNumber":558,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-05"},{"lineNumber":559,"author":{"gitId":"NicholasTYD"},"content":"These 3 fields are generated and supplied by the `FindCommandParser`, which takes in the user inputs during a `find` command, ","lastModifiedDate":"2022-11-05"},{"lineNumber":560,"author":{"gitId":"NicholasTYD"},"content":"and sorts the input into the 2 predicate classes accordingly as shown in the diagram above, ","lastModifiedDate":"2022-11-05"},{"lineNumber":561,"author":{"gitId":"NicholasTYD"},"content":"in addition to also producing the value of `isAppointmentPredicateUsed`.","lastModifiedDate":"2022-11-05"},{"lineNumber":562,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-05"},{"lineNumber":563,"author":{"gitId":"NicholasTYD"},"content":"To facilitate the idea of returning only relevant results to the user, the `execute()` method of `FindCommand` follows a 3-step process.","lastModifiedDate":"2022-11-05"},{"lineNumber":564,"author":{"gitId":"NicholasTYD"},"content":"1. `personFulfillingBothPredicates`, the predicate to display all patients that satisfy the `CombinedPersonPredicate` is generated first. If `isAppointmentPredicateUsed` is `true`,","lastModifiedDate":"2022-11-05"},{"lineNumber":565,"author":{"gitId":"NicholasTYD"},"content":"the predicate is also modified to check if the patient has at least 1 appointment that satisfies the `CombinedAppointmentPredicate`. ","lastModifiedDate":"2022-11-05"},{"lineNumber":566,"author":{"gitId":"NicholasTYD"},"content":"As such, the `isAppointmentPredicateUsed` field ensures  that patients with no appointments are still displayed when a user inputs ","lastModifiedDate":"2022-11-05"},{"lineNumber":567,"author":{"gitId":"NicholasTYD"},"content":"only patient related search parameters.","lastModifiedDate":"2022-11-05"},{"lineNumber":568,"author":{"gitId":"NicholasTYD"},"content":"2. `appointmentFulfillingBothPredicates` is generated next. It is a predicate that displays all appointments that satisfy the `CombinedAppointmentPredicate` with a patient owner that","lastModifiedDate":"2022-11-05"},{"lineNumber":569,"author":{"gitId":"NicholasTYD"},"content":"satisfies the `personFufillingBothPredicates` predicated generated in step 1.","lastModifiedDate":"2022-11-05"},{"lineNumber":570,"author":{"gitId":"NicholasTYD"},"content":"3. To display only results in the current patient and appointment lists shown to the user that satisfies all the search terms,","lastModifiedDate":"2022-11-05"},{"lineNumber":571,"author":{"gitId":"NicholasTYD"},"content":"The 2 predicates generated in step 1 and 2 are combined with the current active predicate in the model.","lastModifiedDate":"2022-11-05"},{"lineNumber":572,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-05"},{"lineNumber":573,"author":{"gitId":"NicholasTYD"},"content":"The logical flow of this command is summarised in the activity diagram below.","lastModifiedDate":"2022-11-05"},{"lineNumber":574,"author":{"gitId":"NicholasTYD"},"content":"![FindActivityDiagram](images/FindActivityDiagram.png)","lastModifiedDate":"2022-11-05"},{"lineNumber":575,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-05"},{"lineNumber":576,"author":{"gitId":"NicholasTYD"},"content":"Ultimately, this ensures that for an entry to be displayed:","lastModifiedDate":"2022-11-05"},{"lineNumber":577,"author":{"gitId":"NicholasTYD"},"content":"* A patient must satisfy all patient search terms and have at least 1 appointment that satisfies all the appointment search terms, if provided.","lastModifiedDate":"2022-11-05"},{"lineNumber":578,"author":{"gitId":"NicholasTYD"},"content":"* An appointment must satisfy all appointment search terms and belong to a patient that satisfies all the patient search terms.","lastModifiedDate":"2022-11-05"},{"lineNumber":579,"author":{"gitId":"NicholasTYD"},"content":"* The entry must also exist in the list prior to the execution of the find command.","lastModifiedDate":"2022-11-05"},{"lineNumber":580,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":581,"author":{"gitId":"guanzhou03"},"content":"#### Design considerations","lastModifiedDate":"2022-11-07"},{"lineNumber":582,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":583,"author":{"gitId":"NicholasTYD"},"content":"**Aspect: How to pass in search terms to `FindCommand`:**","lastModifiedDate":"2022-10-18"},{"lineNumber":584,"author":{"gitId":"NicholasTYD"},"content":"* **Alternative 1:** Store all search terms in `FindCommand` and use `Predicate#and` to combine the","lastModifiedDate":"2022-10-18"},{"lineNumber":585,"author":{"gitId":"NicholasTYD"},"content":"the search predicates.","lastModifiedDate":"2022-10-18"},{"lineNumber":586,"author":{"gitId":"NicholasTYD"},"content":"    * Pros: Easy and quick to implement. No extra classes needed.","lastModifiedDate":"2022-10-18"},{"lineNumber":587,"author":{"gitId":"NicholasTYD"},"content":"    * Cons: Low testability of `FindCommand`. There is no way to override the `Predicate#equals()`, so we will be unable to check if two `Predicate`s have the same search parameters.","lastModifiedDate":"2022-11-03"},{"lineNumber":588,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":589,"author":{"gitId":"NicholasTYD"},"content":"* **Alternative 2:** Create 1 class for each search term","lastModifiedDate":"2022-10-18"},{"lineNumber":590,"author":{"gitId":"NicholasTYD"},"content":"(E.g `NameContainsSequencePredicate`, `AppointmentContainsReasonPredicate` etc.). Create a `CombinedPersonPredicate`","lastModifiedDate":"2022-10-18"},{"lineNumber":591,"author":{"gitId":"NicholasTYD"},"content":"and a `CombinedAppointmentPredicate` that takes in all these \u0027lesser\u0027 predicates and combine them to form the actual","lastModifiedDate":"2022-10-18"},{"lineNumber":592,"author":{"gitId":"NicholasTYD"},"content":"predicate to filter the list with. All these classes will be subclasses of `Predicate`.","lastModifiedDate":"2022-11-03"},{"lineNumber":593,"author":{"gitId":"NicholasTYD"},"content":"    * Pros: ","lastModifiedDate":"2022-11-03"},{"lineNumber":594,"author":{"gitId":"NicholasTYD"},"content":"      * Very high testability of `FindCommand`, as we can now override `equals()`.","lastModifiedDate":"2022-11-03"},{"lineNumber":595,"author":{"gitId":"NicholasTYD"},"content":"      * Having separate `CombinedPersonPredicate` and `CombinedAppointmentPredicate` classes would also allow patients and appointments to be tested separately,","lastModifiedDate":"2022-11-03"},{"lineNumber":596,"author":{"gitId":"NicholasTYD"},"content":"enhancing cohesion and decreasing coupling through the Separation of Concerns principle.","lastModifiedDate":"2022-11-03"},{"lineNumber":597,"author":{"gitId":"NicholasTYD"},"content":"    * Cons: ","lastModifiedDate":"2022-11-03"},{"lineNumber":598,"author":{"gitId":"NicholasTYD"},"content":"      * Large amount of classes needed. There would also be the issue of excessive duplication of code. ","lastModifiedDate":"2022-11-03"},{"lineNumber":599,"author":{"gitId":"NicholasTYD"},"content":"      * Time-consuming to add in potential new predicates in the future as much more test cases would be needed","lastModifiedDate":"2022-11-03"},{"lineNumber":600,"author":{"gitId":"NicholasTYD"},"content":"to test each individual class.","lastModifiedDate":"2022-10-18"},{"lineNumber":601,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":602,"author":{"gitId":"NicholasTYD"},"content":"* **Alternative 3 (current choice):** Keep the `CombinedPersonPredicate` and `CombinedAppointmentPredicate`,","lastModifiedDate":"2022-10-18"},{"lineNumber":603,"author":{"gitId":"NicholasTYD"},"content":"and store the relevant search terms into each predicate. Combine those search terms in the predicate class itself.","lastModifiedDate":"2022-10-18"},{"lineNumber":604,"author":{"gitId":"NicholasTYD"},"content":"    * Pros: ","lastModifiedDate":"2022-11-03"},{"lineNumber":605,"author":{"gitId":"NicholasTYD"},"content":"      * High testability of `FindCommand`.","lastModifiedDate":"2022-11-03"},{"lineNumber":606,"author":{"gitId":"NicholasTYD"},"content":"      * Extending the method features in the future would be more convenient than alternative 2. ","lastModifiedDate":"2022-11-03"},{"lineNumber":607,"author":{"gitId":"NicholasTYD"},"content":"      * The benefit of being able to separately test patients and appointments as mentioned in alternative 2 is preserved.","lastModifiedDate":"2022-11-03"},{"lineNumber":608,"author":{"gitId":"NicholasTYD"},"content":"    * Cons: Slightly less testable than alternative 2. However, the increased efficiency is worth the tradeoff.","lastModifiedDate":"2022-10-18"},{"lineNumber":609,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":610,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":611,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":612,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":613,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":614,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":615,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":616,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":617,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":618,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":619,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":620,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":621,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":622,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":623,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":624,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":625,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":626,"author":{"gitId":"pwjj2000"},"content":"**Target User Profile:**","lastModifiedDate":"2022-09-27"},{"lineNumber":627,"author":{"gitId":"pwjj2000"},"content":"* Tech savvy admin staff in Ear, Nose, Throat (ENT) department","lastModifiedDate":"2022-09-27"},{"lineNumber":628,"author":{"gitId":"JovonLim"},"content":"* Has a need to manage a significant number of patients/appointments","lastModifiedDate":"2022-11-05"},{"lineNumber":629,"author":{"gitId":"pwjj2000"},"content":"* Prefer desktop apps over other types","lastModifiedDate":"2022-09-27"},{"lineNumber":630,"author":{"gitId":"pwjj2000"},"content":"* Can type fast","lastModifiedDate":"2022-09-27"},{"lineNumber":631,"author":{"gitId":"pwjj2000"},"content":"* Prefer typing to mouse interactions","lastModifiedDate":"2022-09-27"},{"lineNumber":632,"author":{"gitId":"pwjj2000"},"content":"* Is reasonably comfortable using Command-Line Interface (CLI) apps","lastModifiedDate":"2022-09-27"},{"lineNumber":633,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":634,"author":{"gitId":"pwjj2000"},"content":"**Value proposition:**","lastModifiedDate":"2022-09-27"},{"lineNumber":635,"author":{"gitId":"guanzhou03"},"content":"* ENT doctors treat patients who often have chronic conditions and our product will make it easier for the staff to keep track of these patients, such as their appointment dates, the completion status of these appointments, the type of appointment etc","lastModifiedDate":"2022-11-07"},{"lineNumber":636,"author":{"gitId":"pwjj2000"},"content":"* ENT department offers a lot of services including head \u0026 neck surgery, voice clinic, and otology / skull base, etc; therefore, they need this app to filter different types of patients","lastModifiedDate":"2022-09-27"},{"lineNumber":637,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":638,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":639,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":640,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":641,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":642,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":643,"author":{"gitId":"-"},"content":"| Priority | As a …​       | I want to …​                                     | So that I can…​                                                               |","lastModifiedDate":"2020-05-23"},{"lineNumber":644,"author":{"gitId":"WingKei67"},"content":"|----------|---------------|--------------------------------------------------|-------------------------------------------------------------------------------|","lastModifiedDate":"2022-11-01"},{"lineNumber":645,"author":{"gitId":"JovonLim"},"content":"| `* * *`  | starting user | view a help screen                               | understand how this application works                                         |","lastModifiedDate":"2022-09-27"},{"lineNumber":646,"author":{"gitId":"WingKei67"},"content":"| `* * *`  | user          | search some patients by keywords                 | find specific patients and information faster                                 |","lastModifiedDate":"2022-11-01"},{"lineNumber":647,"author":{"gitId":"WingKei67"},"content":"| `* * *`  | user          | search some appointment by keywords              | find specific appointments and information faster                             |","lastModifiedDate":"2022-11-01"},{"lineNumber":648,"author":{"gitId":"JovonLim"},"content":"| `* * *`  | user          | add a contact of the patient                     | keep track of the patient\u0027s contact details                                   |","lastModifiedDate":"2022-09-27"},{"lineNumber":649,"author":{"gitId":"JovonLim"},"content":"| `* * *`  | user          | delete a contact of the patient                  | remove the patient from my contacts when no longer needed                     |","lastModifiedDate":"2022-09-27"},{"lineNumber":650,"author":{"gitId":"JovonLim"},"content":"| `* * *`  | user          | book an appointment for the patient              | schedule the patient to meet the doctor                                       |","lastModifiedDate":"2022-09-27"},{"lineNumber":651,"author":{"gitId":"JovonLim"},"content":"| `* * *`  | user          | cancel an appointment for the patient            | ensure that the appointment schedule is updated and accurate                  |","lastModifiedDate":"2022-09-27"},{"lineNumber":652,"author":{"gitId":"JovonLim"},"content":"| `* * *`  | user          | save the data of my contacts when I exit the app | not lose the contacts when I open the app again                               |","lastModifiedDate":"2022-09-27"},{"lineNumber":653,"author":{"gitId":"WingKei67"},"content":"| `* *`    | clumsy user   | edit information about a patient                 | merge and keep his information up to date                                     |","lastModifiedDate":"2022-11-01"},{"lineNumber":654,"author":{"gitId":"JovonLim"},"content":"| `* *`    | clumsy user   | edit an existing appointment                     | fix my error in setting their appointment details                             |","lastModifiedDate":"2022-10-08"},{"lineNumber":655,"author":{"gitId":"WingKei67"},"content":"| `* * *`  | user          | mark an appointment as done                      | know that the patient has already visited                                     |","lastModifiedDate":"2022-11-01"},{"lineNumber":656,"author":{"gitId":"WingKei67"},"content":"| `* *`    | user          | unmark an appointment as not done                | change my appointment state without deleting and adding the appointment again |","lastModifiedDate":"2022-11-01"},{"lineNumber":657,"author":{"gitId":"WingKei67"},"content":"| `*`      | user          | sort my patients by their names                  | look up their information faster                                              |","lastModifiedDate":"2022-11-01"},{"lineNumber":658,"author":{"gitId":"WingKei67"},"content":"| `*`      | user          | sort my appointments by their datetime           | arrange appointments more efficiently                                         |","lastModifiedDate":"2022-11-01"},{"lineNumber":659,"author":{"gitId":"WingKei67"},"content":"| `*`      | user          | group my patients by their tags                  | check patients\u0027 problems more easily                                          |","lastModifiedDate":"2022-11-01"},{"lineNumber":660,"author":{"gitId":"WingKei67"},"content":"| `*`      | user          | group my appointments by some keys               | view and arrange appointments in one go                                       |","lastModifiedDate":"2022-11-01"},{"lineNumber":661,"author":{"gitId":"WingKei67"},"content":"| `*`      | user          | ungroup my patients                              | view the original patient list                                                |","lastModifiedDate":"2022-11-01"},{"lineNumber":662,"author":{"gitId":"WingKei67"},"content":"| `*`      | user          | ungroup my appointments                          | view the original appointment list                                            |","lastModifiedDate":"2022-11-01"},{"lineNumber":663,"author":{"gitId":"WingKei67"},"content":"| `*`      | user          | hide my patients by some conditions              | concentrate on other patients not satisfying the conditions                   |","lastModifiedDate":"2022-11-01"},{"lineNumber":664,"author":{"gitId":"WingKei67"},"content":"| `*`      | user          | hide my appointments by some conditions          | deal with appointments that do not satisfy the conditions better              |","lastModifiedDate":"2022-11-01"},{"lineNumber":665,"author":{"gitId":"guanzhou03"},"content":"| `*`      | user          | unhide my patients                               | view hidden patients and their appointments to work with                      |","lastModifiedDate":"2022-11-06"},{"lineNumber":666,"author":{"gitId":"guanzhou03"},"content":"| `*`      | user          | unhide my appointments                           | view hidden appointments to work with                                         |","lastModifiedDate":"2022-11-06"},{"lineNumber":667,"author":{"gitId":"WingKei67"},"content":"| `*`      | lazy user     | view my previous commands                        | avoid repeating to input the same or similar commands over and over again     |","lastModifiedDate":"2022-11-01"},{"lineNumber":668,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":669,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":670,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":671,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":672,"author":{"gitId":"JovonLim"},"content":"(For all use cases below, the **System** is `idENTify` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2022-11-05"},{"lineNumber":673,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":674,"author":{"gitId":"WingKei67"},"content":"**Use Case: UC01 - Show a list of all patients**","lastModifiedDate":"2022-11-01"},{"lineNumber":675,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":676,"author":{"gitId":"WingKei67"},"content":"**Guarantees**: A list of all patients’ contact is shown.","lastModifiedDate":"2022-11-01"},{"lineNumber":677,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":678,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2022-11-01"},{"lineNumber":679,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":680,"author":{"gitId":"WingKei67"},"content":"1. User requests to list all patients.","lastModifiedDate":"2022-11-01"},{"lineNumber":681,"author":{"gitId":"WingKei67"},"content":"2. idENTify shows a list of all patients.","lastModifiedDate":"2022-11-01"},{"lineNumber":682,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":683,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2022-11-01"},{"lineNumber":684,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":685,"author":{"gitId":"WingKei67"},"content":"**Extensions**","lastModifiedDate":"2022-11-01"},{"lineNumber":686,"author":{"gitId":"WingKei67"},"content":"- 2a. The list is empty.","lastModifiedDate":"2022-11-01"},{"lineNumber":687,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":688,"author":{"gitId":"WingKei67"},"content":"     Use case ends.","lastModifiedDate":"2022-11-01"},{"lineNumber":689,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":690,"author":{"gitId":"WingKei67"},"content":"**Use Case: UC02 - Show a list of all appointments**","lastModifiedDate":"2022-11-01"},{"lineNumber":691,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":692,"author":{"gitId":"WingKei67"},"content":"**Guarantees**: A list of all appointments is shown.","lastModifiedDate":"2022-11-01"},{"lineNumber":693,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":694,"author":{"gitId":"WingKei67"},"content":"**MSS**","lastModifiedDate":"2022-11-01"},{"lineNumber":695,"author":{"gitId":"WingKei67"},"content":"1. User requests to list all appointments.","lastModifiedDate":"2022-11-01"},{"lineNumber":696,"author":{"gitId":"WingKei67"},"content":"2. idENTify shows a list of all appointments.","lastModifiedDate":"2022-11-01"},{"lineNumber":697,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":698,"author":{"gitId":"WingKei67"},"content":"     Use case ends.","lastModifiedDate":"2022-11-01"},{"lineNumber":699,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":700,"author":{"gitId":"WingKei67"},"content":"**Extensions**","lastModifiedDate":"2022-11-01"},{"lineNumber":701,"author":{"gitId":"WingKei67"},"content":"- 2a. The list is empty.","lastModifiedDate":"2022-11-01"},{"lineNumber":702,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":703,"author":{"gitId":"WingKei67"},"content":"    Use case ends.","lastModifiedDate":"2022-11-01"},{"lineNumber":704,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":705,"author":{"gitId":"WingKei67"},"content":"**Use Case: UC03 - Add a Patient**","lastModifiedDate":"2022-11-01"},{"lineNumber":706,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":707,"author":{"gitId":"guanzhou03"},"content":"**Guarantees**: A patient contact is added into idENTify.","lastModifiedDate":"2022-09-27"},{"lineNumber":708,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":709,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":710,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":711,"author":{"gitId":"guanzhou03"},"content":"1. User adds the patient by entering the command and the patient details.","lastModifiedDate":"2022-09-27"},{"lineNumber":712,"author":{"gitId":"guanzhou03"},"content":"2. idENTify adds the patient.","lastModifiedDate":"2022-09-27"},{"lineNumber":713,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":714,"author":{"gitId":"WingKei67"},"content":"     Use case ends.","lastModifiedDate":"2022-11-01"},{"lineNumber":715,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":716,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":717,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":718,"author":{"gitId":"guanzhou03"},"content":"* 1a. idENTify detects an error in the entered data.","lastModifiedDate":"2022-09-27"},{"lineNumber":719,"author":{"gitId":"guanzhou03"},"content":"  - 1a1. idENTify shows an error message.","lastModifiedDate":"2022-09-27"},{"lineNumber":720,"author":{"gitId":"guanzhou03"},"content":"  - 1a2. User enters new data.","lastModifiedDate":"2022-09-27"},{"lineNumber":721,"author":{"gitId":"guanzhou03"},"content":"  - Steps 1a1-1a2 are repeated until the data entered are correct.","lastModifiedDate":"2022-09-27"},{"lineNumber":722,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":723,"author":{"gitId":"guanzhou03"},"content":"    Use case resumes at step 2.","lastModifiedDate":"2022-09-27"},{"lineNumber":724,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":725,"author":{"gitId":"WingKei67"},"content":"**Use Case: UC04 - Book an appointment**","lastModifiedDate":"2022-11-01"},{"lineNumber":726,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":727,"author":{"gitId":"WingKei67"},"content":"**Guarantees:** An appointment is booked for the patient only if the data entered are correct.","lastModifiedDate":"2022-11-01"},{"lineNumber":728,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":729,"author":{"gitId":"guanzhou03"},"content":"**MSS**","lastModifiedDate":"2022-09-27"},{"lineNumber":730,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":731,"author":{"gitId":"WingKei67"},"content":"1.  User gets the \u003cins\u003elist of patients(UC01)\u003cins\u003e.","lastModifiedDate":"2022-11-01"},{"lineNumber":732,"author":{"gitId":"WingKei67"},"content":"2.  User requests to book an appointment for a specified patient.","lastModifiedDate":"2022-11-01"},{"lineNumber":733,"author":{"gitId":"WingKei67"},"content":"3.  idENTify shows that an appointment has been booked for that patient.","lastModifiedDate":"2022-11-01"},{"lineNumber":734,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":735,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":736,"author":{"gitId":"WingKei67"},"content":"    Use case ends.","lastModifiedDate":"2022-11-01"},{"lineNumber":737,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":738,"author":{"gitId":"guanzhou03"},"content":"**Extensions**","lastModifiedDate":"2022-09-27"},{"lineNumber":739,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":740,"author":{"gitId":"WingKei67"},"content":"* 2a.  idENTify detects an error in the entered data.","lastModifiedDate":"2022-11-01"},{"lineNumber":741,"author":{"gitId":"WingKei67"},"content":"  - 2a1. idENTify shows an error message.","lastModifiedDate":"2022-11-01"},{"lineNumber":742,"author":{"gitId":"WingKei67"},"content":"  - 2a2. User enters new data.","lastModifiedDate":"2022-11-01"},{"lineNumber":743,"author":{"gitId":"WingKei67"},"content":"  - Steps 2a1-2a2 are repeated until the data entered are correct.","lastModifiedDate":"2022-11-01"},{"lineNumber":744,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":745,"author":{"gitId":"WingKei67"},"content":"    Use case resumes at step 3.","lastModifiedDate":"2022-11-01"},{"lineNumber":746,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":747,"author":{"gitId":"WingKei67"},"content":"**Use Case: UC05 - Delete a patient**","lastModifiedDate":"2022-11-01"},{"lineNumber":748,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":749,"author":{"gitId":"WingKei67"},"content":"**Guarantees**: The patient will be deleted from the patient list only if the data entered are correct.","lastModifiedDate":"2022-11-01"},{"lineNumber":750,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":751,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":752,"author":{"gitId":"WingKei67"},"content":"1. User gets the \u003cins\u003elist of patients(UC01)\u003cins\u003e.","lastModifiedDate":"2022-11-01"},{"lineNumber":753,"author":{"gitId":"WingKei67"},"content":"2. User requests to delete a specific patient in the list.","lastModifiedDate":"2022-11-01"},{"lineNumber":754,"author":{"gitId":"WingKei67"},"content":"3. idENTify deletes the patient.","lastModifiedDate":"2022-11-01"},{"lineNumber":755,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":756,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":757,"author":{"gitId":"WingKei67"},"content":"    Use case ends.","lastModifiedDate":"2022-11-01"},{"lineNumber":758,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":759,"author":{"gitId":"guanzhou03"},"content":"**Extensions**","lastModifiedDate":"2022-09-27"},{"lineNumber":760,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":761,"author":{"gitId":"WingKei67"},"content":"* 2a.  idENTify detects an error in the entered data.","lastModifiedDate":"2022-11-01"},{"lineNumber":762,"author":{"gitId":"WingKei67"},"content":"  - 2a1. idENTify shows an error message.","lastModifiedDate":"2022-11-01"},{"lineNumber":763,"author":{"gitId":"WingKei67"},"content":"  - 2a2. User enters new data.","lastModifiedDate":"2022-11-01"},{"lineNumber":764,"author":{"gitId":"WingKei67"},"content":"  - Steps 2a1-2a2 are repeated until the data entered are correct.","lastModifiedDate":"2022-11-01"},{"lineNumber":765,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":766,"author":{"gitId":"WingKei67"},"content":"    Use case resumes at step 3.","lastModifiedDate":"2022-11-01"},{"lineNumber":767,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":768,"author":{"gitId":"JovonLim"},"content":"**Use Case: UC06 - Cancel an appointment**","lastModifiedDate":"2022-11-06"},{"lineNumber":769,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":770,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":771,"author":{"gitId":"WingKei67"},"content":"**Guarantees:** The appointment will be deleted from the appointment list only if the data entered are correct.","lastModifiedDate":"2022-11-01"},{"lineNumber":772,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":773,"author":{"gitId":"guanzhou03"},"content":"**MSS**","lastModifiedDate":"2022-09-27"},{"lineNumber":774,"author":{"gitId":"WingKei67"},"content":"1.  User gets the \u003cins\u003elist of appointments(UC02)\u003cins\u003e.","lastModifiedDate":"2022-11-01"},{"lineNumber":775,"author":{"gitId":"WingKei67"},"content":"2.  User requests to cancel a specific appointment in the list.","lastModifiedDate":"2022-11-01"},{"lineNumber":776,"author":{"gitId":"WingKei67"},"content":"3.  idENTify shows that the appointment has been cancelled.","lastModifiedDate":"2022-11-01"},{"lineNumber":777,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":778,"author":{"gitId":"WingKei67"},"content":"    Use case ends.","lastModifiedDate":"2022-11-01"},{"lineNumber":779,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":780,"author":{"gitId":"WingKei67"},"content":"**Extensions**","lastModifiedDate":"2022-11-01"},{"lineNumber":781,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":782,"author":{"gitId":"WingKei67"},"content":"* 2a. idENTify detects an error in the entered data.","lastModifiedDate":"2022-11-01"},{"lineNumber":783,"author":{"gitId":"WingKei67"},"content":"  - 2a1. idENTify shows an error message.","lastModifiedDate":"2022-11-01"},{"lineNumber":784,"author":{"gitId":"WingKei67"},"content":"  - 2a2. User enters new data.","lastModifiedDate":"2022-11-01"},{"lineNumber":785,"author":{"gitId":"WingKei67"},"content":"  - Steps 2a1-2a2 are repeated until the data entered are correct.","lastModifiedDate":"2022-11-01"},{"lineNumber":786,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":787,"author":{"gitId":"WingKei67"},"content":"    Use case resumes at step 3.","lastModifiedDate":"2022-11-01"},{"lineNumber":788,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":789,"author":{"gitId":"JovonLim"},"content":"**Use Case: UC07 - Find a patient**","lastModifiedDate":"2022-11-06"},{"lineNumber":790,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":791,"author":{"gitId":"NicholasTYD"},"content":"**Guarantees:**  A list of patients that matches the given query if applicable.","lastModifiedDate":"2022-09-27"},{"lineNumber":792,"author":{"gitId":"NicholasTYD"},"content":"1.  User requests to find a patient.","lastModifiedDate":"2022-09-27"},{"lineNumber":793,"author":{"gitId":"NicholasTYD"},"content":"2.  idENTify shows a list of patients that matches the given query.","lastModifiedDate":"2022-09-27"},{"lineNumber":794,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":795,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":796,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":797,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":798,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":799,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":800,"author":{"gitId":"NicholasTYD"},"content":"- 2a. The list is empty.","lastModifiedDate":"2022-09-27"},{"lineNumber":801,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":802,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":803,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":804,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":805,"author":{"gitId":"JovonLim"},"content":"**Use Case: UC08 - Find an appointment**","lastModifiedDate":"2022-11-06"},{"lineNumber":806,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":807,"author":{"gitId":"WingKei67"},"content":"**Guarantees:**  A list of appointments that matches the given query if applicable.","lastModifiedDate":"2022-11-01"},{"lineNumber":808,"author":{"gitId":"WingKei67"},"content":"1.  User requests to find an appointment.","lastModifiedDate":"2022-11-01"},{"lineNumber":809,"author":{"gitId":"WingKei67"},"content":"2.  idENTify shows a list of appointments that matches the given query.","lastModifiedDate":"2022-11-01"},{"lineNumber":810,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":811,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":812,"author":{"gitId":"NicholasTYD"},"content":"    Use case ends.","lastModifiedDate":"2022-09-27"},{"lineNumber":813,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":814,"author":{"gitId":"NicholasTYD"},"content":"**Extensions**","lastModifiedDate":"2022-09-27"},{"lineNumber":815,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":816,"author":{"gitId":"WingKei67"},"content":"- 2a. The list is empty.","lastModifiedDate":"2022-11-01"},{"lineNumber":817,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":818,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":819,"author":{"gitId":"WingKei67"},"content":"    Use case ends.","lastModifiedDate":"2022-11-01"},{"lineNumber":820,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":821,"author":{"gitId":"JovonLim"},"content":"**Use Case: UC09 - Mark an appointment**","lastModifiedDate":"2022-11-06"},{"lineNumber":822,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":823,"author":{"gitId":"WingKei67"},"content":"**Guarantees:** The appointment will be marked as done only if the data entered are correct.","lastModifiedDate":"2022-11-01"},{"lineNumber":824,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":825,"author":{"gitId":"NicholasTYD"},"content":"**MSS**","lastModifiedDate":"2022-09-27"},{"lineNumber":826,"author":{"gitId":"WingKei67"},"content":"1.  User gets the \u003cins\u003elist of appointments(UC02)\u003cins\u003e.","lastModifiedDate":"2022-11-01"},{"lineNumber":827,"author":{"gitId":"WingKei67"},"content":"2.  User requests to mark a specified appointment for a specified patient.","lastModifiedDate":"2022-11-01"},{"lineNumber":828,"author":{"gitId":"WingKei67"},"content":"3.  idENTify marks the selected appointment.","lastModifiedDate":"2022-11-01"},{"lineNumber":829,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":830,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":831,"author":{"gitId":"NicholasTYD"},"content":"    Use case ends.","lastModifiedDate":"2022-09-27"},{"lineNumber":832,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":833,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":834,"author":{"gitId":"NicholasTYD"},"content":"**Extensions**","lastModifiedDate":"2022-09-27"},{"lineNumber":835,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":836,"author":{"gitId":"NicholasTYD"},"content":"* 2a. idENTify detects an error in the entered data.","lastModifiedDate":"2022-09-27"},{"lineNumber":837,"author":{"gitId":"NicholasTYD"},"content":"  - 2a1. idENTify shows an error message.","lastModifiedDate":"2022-09-27"},{"lineNumber":838,"author":{"gitId":"NicholasTYD"},"content":"  - 2a2. User enters new data.","lastModifiedDate":"2022-09-27"},{"lineNumber":839,"author":{"gitId":"NicholasTYD"},"content":"  - Steps 2a1-2a2 are repeated until the data entered are correct.","lastModifiedDate":"2022-09-27"},{"lineNumber":840,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":841,"author":{"gitId":"NicholasTYD"},"content":"    Use case resumes at step 3.","lastModifiedDate":"2022-09-27"},{"lineNumber":842,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":843,"author":{"gitId":"JovonLim"},"content":"**Use Case: UC10 - Unmark an appointment**","lastModifiedDate":"2022-11-06"},{"lineNumber":844,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":845,"author":{"gitId":"WingKei67"},"content":"**Guarantees:** The appointment will be unmarked as not done only if the data entered are correct.","lastModifiedDate":"2022-11-01"},{"lineNumber":846,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":847,"author":{"gitId":"NicholasTYD"},"content":"**MSS**","lastModifiedDate":"2022-09-27"},{"lineNumber":848,"author":{"gitId":"WingKei67"},"content":"1.  User gets the \u003cins\u003elist of appointments(UC02)\u003cins\u003e.","lastModifiedDate":"2022-11-01"},{"lineNumber":849,"author":{"gitId":"JovonLim"},"content":"2.  User requests to unmark a specified appointment for a specified patient.","lastModifiedDate":"2022-11-05"},{"lineNumber":850,"author":{"gitId":"JovonLim"},"content":"3.  idENTify unmarks the selected appointment.","lastModifiedDate":"2022-11-05"},{"lineNumber":851,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":852,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":853,"author":{"gitId":"NicholasTYD"},"content":"    Use case ends.","lastModifiedDate":"2022-09-27"},{"lineNumber":854,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":855,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":856,"author":{"gitId":"NicholasTYD"},"content":"**Extensions**","lastModifiedDate":"2022-09-27"},{"lineNumber":857,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":858,"author":{"gitId":"NicholasTYD"},"content":"* 2a. idENTify detects an error in the entered data.","lastModifiedDate":"2022-09-27"},{"lineNumber":859,"author":{"gitId":"NicholasTYD"},"content":"  - 2a1. idENTify shows an error message.","lastModifiedDate":"2022-09-27"},{"lineNumber":860,"author":{"gitId":"NicholasTYD"},"content":"  - 2a2. User enters new data.","lastModifiedDate":"2022-09-27"},{"lineNumber":861,"author":{"gitId":"NicholasTYD"},"content":"  - Steps 2a1-2a2 are repeated until the data entered are correct.","lastModifiedDate":"2022-09-27"},{"lineNumber":862,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":863,"author":{"gitId":"NicholasTYD"},"content":"    Use case resumes at step 3.","lastModifiedDate":"2022-09-27"},{"lineNumber":864,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":865,"author":{"gitId":"JovonLim"},"content":"**Use Case: UC11 - Edit a patient**","lastModifiedDate":"2022-11-06"},{"lineNumber":866,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":867,"author":{"gitId":"WingKei67"},"content":"**Guarantees:** The patient\u0027s contact will have its fields edited only if the data entered are correct.","lastModifiedDate":"2022-11-01"},{"lineNumber":868,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":869,"author":{"gitId":"JovonLim"},"content":"**MSS**","lastModifiedDate":"2022-10-11"},{"lineNumber":870,"author":{"gitId":"WingKei67"},"content":"1.  User gets the \u003cins\u003elist of patients(UC01)\u003cins\u003e.","lastModifiedDate":"2022-11-01"},{"lineNumber":871,"author":{"gitId":"WingKei67"},"content":"2.  User requests to edit a specified patient details.","lastModifiedDate":"2022-11-01"},{"lineNumber":872,"author":{"gitId":"WingKei67"},"content":"3.  idENTify edits the selected patient contact.","lastModifiedDate":"2022-11-01"},{"lineNumber":873,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":874,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":875,"author":{"gitId":"JovonLim"},"content":"    Use case ends.","lastModifiedDate":"2022-10-11"},{"lineNumber":876,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":877,"author":{"gitId":"JovonLim"},"content":"**Extensions**","lastModifiedDate":"2022-10-11"},{"lineNumber":878,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":879,"author":{"gitId":"JovonLim"},"content":"* 2a. idENTify detects an error in the entered data.","lastModifiedDate":"2022-10-11"},{"lineNumber":880,"author":{"gitId":"JovonLim"},"content":"  - 2a1. idENTify shows an error message.","lastModifiedDate":"2022-10-11"},{"lineNumber":881,"author":{"gitId":"JovonLim"},"content":"  - 2a2. User enters new data.","lastModifiedDate":"2022-10-11"},{"lineNumber":882,"author":{"gitId":"JovonLim"},"content":"  - Steps 2a1-2a2 are repeated until the data entered are correct.","lastModifiedDate":"2022-10-11"},{"lineNumber":883,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":884,"author":{"gitId":"JovonLim"},"content":"    Use case resumes at step 3.","lastModifiedDate":"2022-10-11"},{"lineNumber":885,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":886,"author":{"gitId":"JovonLim"},"content":" **Use Case: UC12 - Edit an appointment**","lastModifiedDate":"2022-11-06"},{"lineNumber":887,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":888,"author":{"gitId":"WingKei67"},"content":"**Guarantees:** The appointment will have its fields edited only if the data entered are correct.","lastModifiedDate":"2022-11-01"},{"lineNumber":889,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":890,"author":{"gitId":"JovonLim"},"content":"**MSS**","lastModifiedDate":"2022-10-11"},{"lineNumber":891,"author":{"gitId":"WingKei67"},"content":"1.  User gets the \u003cins\u003elist of appointments(UC03)\u003cins\u003e.","lastModifiedDate":"2022-11-01"},{"lineNumber":892,"author":{"gitId":"WingKei67"},"content":"2.  User requests to edit a specified appointment for a specified patient.","lastModifiedDate":"2022-11-01"},{"lineNumber":893,"author":{"gitId":"WingKei67"},"content":"3.  idENTify edits the selected appointment.","lastModifiedDate":"2022-11-01"},{"lineNumber":894,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":895,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":896,"author":{"gitId":"JovonLim"},"content":"    Use case ends.","lastModifiedDate":"2022-10-11"},{"lineNumber":897,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":898,"author":{"gitId":"JovonLim"},"content":"**Extensions**","lastModifiedDate":"2022-10-11"},{"lineNumber":899,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":900,"author":{"gitId":"JovonLim"},"content":"* 2a. idENTify detects an error in the entered data.","lastModifiedDate":"2022-10-11"},{"lineNumber":901,"author":{"gitId":"JovonLim"},"content":"  - 2a1. idENTify shows an error message.","lastModifiedDate":"2022-10-11"},{"lineNumber":902,"author":{"gitId":"JovonLim"},"content":"  - 2a2. User enters new data.","lastModifiedDate":"2022-10-11"},{"lineNumber":903,"author":{"gitId":"JovonLim"},"content":"  - Steps 2a1-2a2 are repeated until the data entered are correct.","lastModifiedDate":"2022-10-11"},{"lineNumber":904,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":905,"author":{"gitId":"JovonLim"},"content":"    Use case resumes at step 3.","lastModifiedDate":"2022-10-11"},{"lineNumber":906,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":907,"author":{"gitId":"JovonLim"},"content":"**Use Case: UC13 - Sort the patient list**","lastModifiedDate":"2022-11-06"},{"lineNumber":908,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":909,"author":{"gitId":"WingKei67"},"content":"**Guarantees:** The patient list will be sorted in ascending order.","lastModifiedDate":"2022-11-01"},{"lineNumber":910,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":911,"author":{"gitId":"WingKei67"},"content":"**MSS**","lastModifiedDate":"2022-10-25"},{"lineNumber":912,"author":{"gitId":"WingKei67"},"content":"1.  User gets the \u003cins\u003elist of patients(UC01)\u003cins\u003e.","lastModifiedDate":"2022-11-01"},{"lineNumber":913,"author":{"gitId":"WingKei67"},"content":"2.  idENTify displays the patient list sorted by their names.","lastModifiedDate":"2022-10-25"},{"lineNumber":914,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":915,"author":{"gitId":"WingKei67"},"content":"    Use case ends.","lastModifiedDate":"2022-10-25"},{"lineNumber":916,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":917,"author":{"gitId":"WingKei67"},"content":"**Extensions**","lastModifiedDate":"2022-10-25"},{"lineNumber":918,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":919,"author":{"gitId":"WingKei67"},"content":"* 2a. idENTify detects multiple patients with the same name.","lastModifiedDate":"2022-10-25"},{"lineNumber":920,"author":{"gitId":"WingKei67"},"content":"    - 2a1. idENTify compares their other information.","lastModifiedDate":"2022-11-01"},{"lineNumber":921,"author":{"gitId":"WingKei67"},"content":"    - 2a2. idENTify sort them by their other information.","lastModifiedDate":"2022-11-01"},{"lineNumber":922,"author":{"gitId":"WingKei67"},"content":"    - 2a3. idENTify displays the sorted patient list.","lastModifiedDate":"2022-10-25"},{"lineNumber":923,"author":{"gitId":"WingKei67"},"content":"   ","lastModifiedDate":"2022-10-25"},{"lineNumber":924,"author":{"gitId":"WingKei67"},"content":"      Use case ends.","lastModifiedDate":"2022-11-01"},{"lineNumber":925,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":926,"author":{"gitId":"JovonLim"},"content":"**Use Case: UC14 - Sort the appointment list**","lastModifiedDate":"2022-11-06"},{"lineNumber":927,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":928,"author":{"gitId":"WingKei67"},"content":"**Guarantees:** The appointment list will be sorted in ascending order.","lastModifiedDate":"2022-11-01"},{"lineNumber":929,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":930,"author":{"gitId":"WingKei67"},"content":"**MSS**","lastModifiedDate":"2022-10-25"},{"lineNumber":931,"author":{"gitId":"WingKei67"},"content":"1.  User gets the \u003cins\u003elist of appointments(UC02)\u003cins\u003e.","lastModifiedDate":"2022-11-01"},{"lineNumber":932,"author":{"gitId":"WingKei67"},"content":"2.  idENTify displays the appointment list sorted by their datetime.","lastModifiedDate":"2022-10-25"},{"lineNumber":933,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":934,"author":{"gitId":"WingKei67"},"content":"    Use case ends.","lastModifiedDate":"2022-10-25"},{"lineNumber":935,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":936,"author":{"gitId":"WingKei67"},"content":"**Extensions**","lastModifiedDate":"2022-10-25"},{"lineNumber":937,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":938,"author":{"gitId":"WingKei67"},"content":"* 2a. idENTify detects multiple appointments with the same datetime.","lastModifiedDate":"2022-10-25"},{"lineNumber":939,"author":{"gitId":"WingKei67"},"content":"    - 2a1. idENTify compares their corresponding patients.","lastModifiedDate":"2022-10-25"},{"lineNumber":940,"author":{"gitId":"WingKei67"},"content":"    - 2a2. idENTify sort them by their patient information.","lastModifiedDate":"2022-10-25"},{"lineNumber":941,"author":{"gitId":"WingKei67"},"content":"    - 2a3. idENTify displays the sorted appointment list.","lastModifiedDate":"2022-10-25"},{"lineNumber":942,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":943,"author":{"gitId":"WingKei67"},"content":"      Use case ends.","lastModifiedDate":"2022-11-01"},{"lineNumber":944,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":945,"author":{"gitId":"JovonLim"},"content":"**Use Case: UC15 - Group patients**","lastModifiedDate":"2022-11-06"},{"lineNumber":946,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":947,"author":{"gitId":"WingKei67"},"content":"**Guarantees:** Patients will be grouped by their tags.","lastModifiedDate":"2022-11-01"},{"lineNumber":948,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":949,"author":{"gitId":"WingKei67"},"content":"**MSS**","lastModifiedDate":"2022-10-25"},{"lineNumber":950,"author":{"gitId":"WingKei67"},"content":"1. User enters command to group patients.","lastModifiedDate":"2022-11-01"},{"lineNumber":951,"author":{"gitId":"WingKei67"},"content":"2. idENTify displays the patient list grouped by their tags.","lastModifiedDate":"2022-11-01"},{"lineNumber":952,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":953,"author":{"gitId":"WingKei67"},"content":"    Use case ends.","lastModifiedDate":"2022-10-25"},{"lineNumber":954,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":955,"author":{"gitId":"WingKei67"},"content":"**Extensions**","lastModifiedDate":"2022-10-25"},{"lineNumber":956,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":957,"author":{"gitId":"WingKei67"},"content":"* 2a. idENTify detects multiple patients with the same tags.","lastModifiedDate":"2022-11-01"},{"lineNumber":958,"author":{"gitId":"WingKei67"},"content":"    - 2a1. idENTify compares their other information.","lastModifiedDate":"2022-11-01"},{"lineNumber":959,"author":{"gitId":"WingKei67"},"content":"    - 2a2. idENTify sort them by their other information.","lastModifiedDate":"2022-11-01"},{"lineNumber":960,"author":{"gitId":"WingKei67"},"content":"    - 2a3. idENTify displays the sorted patient list.","lastModifiedDate":"2022-11-01"},{"lineNumber":961,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":962,"author":{"gitId":"WingKei67"},"content":"      Use case ends.","lastModifiedDate":"2022-11-01"},{"lineNumber":963,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":964,"author":{"gitId":"JovonLim"},"content":"**Use Case: UC16 - Group appointments**","lastModifiedDate":"2022-11-06"},{"lineNumber":965,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":966,"author":{"gitId":"WingKei67"},"content":"**Guarantees:** Appointments will be grouped by their some criteria.","lastModifiedDate":"2022-11-01"},{"lineNumber":967,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":968,"author":{"gitId":"WingKei67"},"content":"**MSS**","lastModifiedDate":"2022-10-25"},{"lineNumber":969,"author":{"gitId":"WingKei67"},"content":"1. User enters command to group appointments with some criterion.","lastModifiedDate":"2022-11-01"},{"lineNumber":970,"author":{"gitId":"WingKei67"},"content":"2. idENTify displays the appointment list grouped according to the specified criterion.","lastModifiedDate":"2022-11-01"},{"lineNumber":971,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":972,"author":{"gitId":"WingKei67"},"content":"    Use case ends.","lastModifiedDate":"2022-10-25"},{"lineNumber":973,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":974,"author":{"gitId":"WingKei67"},"content":"**Extensions**","lastModifiedDate":"2022-10-25"},{"lineNumber":975,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":976,"author":{"gitId":"WingKei67"},"content":"* 1a. idENTify detects an error in the entered data.","lastModifiedDate":"2022-11-01"},{"lineNumber":977,"author":{"gitId":"WingKei67"},"content":"    - 1a1. idENTify shows an error message.","lastModifiedDate":"2022-11-01"},{"lineNumber":978,"author":{"gitId":"WingKei67"},"content":"    - 1a2. User enters new data.","lastModifiedDate":"2022-11-01"},{"lineNumber":979,"author":{"gitId":"WingKei67"},"content":"    - Steps 1a1-1a2 are repeated until the data entered are correct.","lastModifiedDate":"2022-11-01"},{"lineNumber":980,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":981,"author":{"gitId":"-"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2022-11-01"},{"lineNumber":982,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":983,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":984,"author":{"gitId":"WingKei67"},"content":"* 2a. idENTify detects multiple appointments that should have the same order.","lastModifiedDate":"2022-11-01"},{"lineNumber":985,"author":{"gitId":"WingKei67"},"content":"    - 2a1. idENTify compares their other information.","lastModifiedDate":"2022-11-01"},{"lineNumber":986,"author":{"gitId":"WingKei67"},"content":"    - 2a2. idENTify sort them by their other information.","lastModifiedDate":"2022-11-01"},{"lineNumber":987,"author":{"gitId":"WingKei67"},"content":"    - 2a3. idENTify displays the sorted appointment list.","lastModifiedDate":"2022-11-01"},{"lineNumber":988,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":989,"author":{"gitId":"WingKei67"},"content":"      Use case ends.","lastModifiedDate":"2022-11-01"},{"lineNumber":990,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":991,"author":{"gitId":"JovonLim"},"content":"**Use Case: UC17 - Ungroup patients**","lastModifiedDate":"2022-11-06"},{"lineNumber":992,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":993,"author":{"gitId":"WingKei67"},"content":"**Guarantees:** The patient list will be the same as before grouping.","lastModifiedDate":"2022-11-01"},{"lineNumber":994,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":995,"author":{"gitId":"WingKei67"},"content":"**MSS**","lastModifiedDate":"2022-10-25"},{"lineNumber":996,"author":{"gitId":"WingKei67"},"content":"1. User enters command to ungroup patients.","lastModifiedDate":"2022-11-01"},{"lineNumber":997,"author":{"gitId":"WingKei67"},"content":"2. idENTify displays the patient list \u003cins\u003esorted by default(UC13)\u003cins\u003e.","lastModifiedDate":"2022-11-01"},{"lineNumber":998,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":999,"author":{"gitId":"WingKei67"},"content":"    Use case ends.","lastModifiedDate":"2022-10-25"},{"lineNumber":1000,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":1001,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":1002,"author":{"gitId":"JovonLim"},"content":"**Use Case: UC18 - Ungroup appointments**","lastModifiedDate":"2022-11-06"},{"lineNumber":1003,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1004,"author":{"gitId":"WingKei67"},"content":"**Guarantees:** The appointment list will be the same as before grouping.","lastModifiedDate":"2022-11-01"},{"lineNumber":1005,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":1006,"author":{"gitId":"WingKei67"},"content":"**MSS**","lastModifiedDate":"2022-10-25"},{"lineNumber":1007,"author":{"gitId":"WingKei67"},"content":"1. User enters command to ungroup appointments.","lastModifiedDate":"2022-11-01"},{"lineNumber":1008,"author":{"gitId":"WingKei67"},"content":"2. idENTify displays the appointment list \u003cins\u003esorted by default(UC14)\u003cins\u003e.","lastModifiedDate":"2022-11-01"},{"lineNumber":1009,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1010,"author":{"gitId":"WingKei67"},"content":"    Use case ends.","lastModifiedDate":"2022-10-25"},{"lineNumber":1011,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":1012,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":1013,"author":{"gitId":"JovonLim"},"content":"**Use Case: UC19 - Hide patients**","lastModifiedDate":"2022-11-06"},{"lineNumber":1014,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1015,"author":{"gitId":"WingKei67"},"content":"**Guarantees:** Patients satisfying given conditions will not be shown.","lastModifiedDate":"2022-11-01"},{"lineNumber":1016,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1017,"author":{"gitId":"WingKei67"},"content":"**MSS**","lastModifiedDate":"2022-11-01"},{"lineNumber":1018,"author":{"gitId":"WingKei67"},"content":"1. User enters command to hide patients with specified conditions.","lastModifiedDate":"2022-11-01"},{"lineNumber":1019,"author":{"gitId":"guanzhou03"},"content":"2. idENTify updates the patient and appointment list to exclude hidden patients.","lastModifiedDate":"2022-11-06"},{"lineNumber":1020,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1021,"author":{"gitId":"WingKei67"},"content":"    Use case ends.","lastModifiedDate":"2022-11-01"},{"lineNumber":1022,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1023,"author":{"gitId":"WingKei67"},"content":"**Extensions**","lastModifiedDate":"2022-11-01"},{"lineNumber":1024,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1025,"author":{"gitId":"WingKei67"},"content":"* 1a. idENTify detects an error in the entered data.","lastModifiedDate":"2022-11-01"},{"lineNumber":1026,"author":{"gitId":"WingKei67"},"content":"  - 1a1. idENTify shows an error message.","lastModifiedDate":"2022-11-01"},{"lineNumber":1027,"author":{"gitId":"WingKei67"},"content":"  - 1a2. User enters new data.","lastModifiedDate":"2022-11-01"},{"lineNumber":1028,"author":{"gitId":"WingKei67"},"content":"  - Steps 1a1-1a2 are repeated until the data entered are correct.","lastModifiedDate":"2022-11-01"},{"lineNumber":1029,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1030,"author":{"gitId":"WingKei67"},"content":"    Use case resumes at step 2.","lastModifiedDate":"2022-11-01"},{"lineNumber":1031,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1032,"author":{"gitId":"JovonLim"},"content":"**Use Case: UC20 - Hide appointments**","lastModifiedDate":"2022-11-06"},{"lineNumber":1033,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1034,"author":{"gitId":"WingKei67"},"content":"**Guarantees:** Appointments satisfying given conditions will not be shown.","lastModifiedDate":"2022-11-01"},{"lineNumber":1035,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1036,"author":{"gitId":"WingKei67"},"content":"**MSS**","lastModifiedDate":"2022-11-01"},{"lineNumber":1037,"author":{"gitId":"WingKei67"},"content":"1. User enters command to hide appointments with specified conditions.","lastModifiedDate":"2022-11-01"},{"lineNumber":1038,"author":{"gitId":"guanzhou03"},"content":"2. idENTify updates the appointment list to exclude hidden appointments.","lastModifiedDate":"2022-11-06"},{"lineNumber":1039,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1040,"author":{"gitId":"WingKei67"},"content":"   Use case ends.","lastModifiedDate":"2022-10-25"},{"lineNumber":1041,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":1042,"author":{"gitId":"WingKei67"},"content":"**Extensions**","lastModifiedDate":"2022-11-01"},{"lineNumber":1043,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1044,"author":{"gitId":"WingKei67"},"content":"* 1a. idENTify detects an error in the entered data.","lastModifiedDate":"2022-11-01"},{"lineNumber":1045,"author":{"gitId":"WingKei67"},"content":"  - 1a1. idENTify shows an error message.","lastModifiedDate":"2022-11-01"},{"lineNumber":1046,"author":{"gitId":"WingKei67"},"content":"  - 1a2. User enters new data.","lastModifiedDate":"2022-11-01"},{"lineNumber":1047,"author":{"gitId":"WingKei67"},"content":"  - Steps 1a1-1a2 are repeated until the data entered are correct.","lastModifiedDate":"2022-11-01"},{"lineNumber":1048,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1049,"author":{"gitId":"WingKei67"},"content":"    Use case resumes at step 2.","lastModifiedDate":"2022-11-01"},{"lineNumber":1050,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1051,"author":{"gitId":"JovonLim"},"content":"**Use Case: UC21 - Unhide patients**","lastModifiedDate":"2022-11-06"},{"lineNumber":1052,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1053,"author":{"gitId":"WingKei67"},"content":"**Guarantees:** The patient list will be the same as before hiding.","lastModifiedDate":"2022-11-01"},{"lineNumber":1054,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1055,"author":{"gitId":"WingKei67"},"content":"**MSS**","lastModifiedDate":"2022-11-01"},{"lineNumber":1056,"author":{"gitId":"WingKei67"},"content":"1. User enters command to unhide patients.","lastModifiedDate":"2022-11-01"},{"lineNumber":1057,"author":{"gitId":"guanzhou03"},"content":"2. idENTify updates the patient and appointment list to include unhidden patients.","lastModifiedDate":"2022-11-06"},{"lineNumber":1058,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1059,"author":{"gitId":"WingKei67"},"content":"   Use case ends.","lastModifiedDate":"2022-11-01"},{"lineNumber":1060,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1061,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1062,"author":{"gitId":"JovonLim"},"content":"**Use Case: UC22 - Unhide appointments**","lastModifiedDate":"2022-11-06"},{"lineNumber":1063,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1064,"author":{"gitId":"WingKei67"},"content":"**Guarantees:** The appointment list will be the same as before hiding.","lastModifiedDate":"2022-11-01"},{"lineNumber":1065,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1066,"author":{"gitId":"WingKei67"},"content":"**MSS**","lastModifiedDate":"2022-11-01"},{"lineNumber":1067,"author":{"gitId":"WingKei67"},"content":"1. User enters command to unhide appointments.","lastModifiedDate":"2022-11-01"},{"lineNumber":1068,"author":{"gitId":"guanzhou03"},"content":"2. idENTify updates the appointment list to include unhidden appointments.","lastModifiedDate":"2022-11-06"},{"lineNumber":1069,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1070,"author":{"gitId":"WingKei67"},"content":"    Use case ends.","lastModifiedDate":"2022-11-01"},{"lineNumber":1071,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1072,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1073,"author":{"gitId":"JovonLim"},"content":"**Use Case: UC23 - Clear entries**","lastModifiedDate":"2022-11-06"},{"lineNumber":1074,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1075,"author":{"gitId":"WingKei67"},"content":"**Guarantees:** All entries will be cleared.","lastModifiedDate":"2022-11-01"},{"lineNumber":1076,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1077,"author":{"gitId":"WingKei67"},"content":"**MSS**","lastModifiedDate":"2022-11-01"},{"lineNumber":1078,"author":{"gitId":"WingKei67"},"content":"1. User enters command to clear all entries of current patient and appointment lists.","lastModifiedDate":"2022-11-01"},{"lineNumber":1079,"author":{"gitId":"WingKei67"},"content":"2. idENTify displays an empty patient list and an empty appointment list.","lastModifiedDate":"2022-11-01"},{"lineNumber":1080,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1081,"author":{"gitId":"WingKei67"},"content":"    Use case ends.","lastModifiedDate":"2022-11-01"},{"lineNumber":1082,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1083,"author":{"gitId":"JovonLim"},"content":"**Use Case: UC24 - Show help page**","lastModifiedDate":"2022-11-06"},{"lineNumber":1084,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1085,"author":{"gitId":"WingKei67"},"content":"**Guarantees:** A help page will be provided.","lastModifiedDate":"2022-11-01"},{"lineNumber":1086,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1087,"author":{"gitId":"WingKei67"},"content":"**MSS**","lastModifiedDate":"2022-11-01"},{"lineNumber":1088,"author":{"gitId":"WingKei67"},"content":"1. User enters command to ask for help about how to use the app.","lastModifiedDate":"2022-11-01"},{"lineNumber":1089,"author":{"gitId":"WingKei67"},"content":"2. idENTify shows a page including some information to help users.","lastModifiedDate":"2022-11-01"},{"lineNumber":1090,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1091,"author":{"gitId":"WingKei67"},"content":"    Use case ends.","lastModifiedDate":"2022-11-01"},{"lineNumber":1092,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1093,"author":{"gitId":"JovonLim"},"content":"**Use Case: UC25 - Show command history**","lastModifiedDate":"2022-11-06"},{"lineNumber":1094,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1095,"author":{"gitId":"WingKei67"},"content":"**MSS**","lastModifiedDate":"2022-11-01"},{"lineNumber":1096,"author":{"gitId":"JovonLim"},"content":"1. User enters key to view previous commands.","lastModifiedDate":"2022-11-05"},{"lineNumber":1097,"author":{"gitId":"WingKei67"},"content":"2. idENTify shows previous commands to users.","lastModifiedDate":"2022-11-01"},{"lineNumber":1098,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1099,"author":{"gitId":"WingKei67"},"content":"    Use case ends.","lastModifiedDate":"2022-11-01"},{"lineNumber":1100,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1101,"author":{"gitId":"JovonLim"},"content":"**Use Case: UC26 - Exit the app**","lastModifiedDate":"2022-11-06"},{"lineNumber":1102,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1103,"author":{"gitId":"WingKei67"},"content":"**MSS**","lastModifiedDate":"2022-11-01"},{"lineNumber":1104,"author":{"gitId":"WingKei67"},"content":"1. User enters command to exit.","lastModifiedDate":"2022-11-01"},{"lineNumber":1105,"author":{"gitId":"WingKei67"},"content":"2. idENTify saves current data and exits.","lastModifiedDate":"2022-11-01"},{"lineNumber":1106,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1107,"author":{"gitId":"WingKei67"},"content":"    Use case ends.","lastModifiedDate":"2022-11-01"},{"lineNumber":1108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":1109,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":1110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1111,"author":{"gitId":"WingKei67"},"content":"1. Should work on Windows, Linux, OS-X Operating System (OS) as long as it has Java 11.","lastModifiedDate":"2022-09-27"},{"lineNumber":1112,"author":{"gitId":"-"},"content":"2. Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":1113,"author":{"gitId":"WingKei67"},"content":"3. A user with above average typing speed for regular English text should be able to accomplish most of the tasks","lastModifiedDate":"2022-09-27"},{"lineNumber":1114,"author":{"gitId":"WingKei67"},"content":"   faster using commands than using the mouse.","lastModifiedDate":"2022-09-27"},{"lineNumber":1115,"author":{"gitId":"WingKei67"},"content":"4. Should not be used with offensive language.","lastModifiedDate":"2022-09-27"},{"lineNumber":1116,"author":{"gitId":"WingKei67"},"content":"5. Expected to adhere to a schedule that delivers a feature set every one month.","lastModifiedDate":"2022-09-27"},{"lineNumber":1117,"author":{"gitId":"WingKei67"},"content":"6. Should respond to each command at most 1 second long.","lastModifiedDate":"2022-09-27"},{"lineNumber":1118,"author":{"gitId":"WingKei67"},"content":"7. Not required to make calls to contacts.","lastModifiedDate":"2022-09-27"},{"lineNumber":1119,"author":{"gitId":"WingKei67"},"content":"8. Should be able to store data locally in a human editable text file.","lastModifiedDate":"2022-09-27"},{"lineNumber":1120,"author":{"gitId":"WingKei67"},"content":"9. Should not use Database Management System to store data.","lastModifiedDate":"2022-09-27"},{"lineNumber":1121,"author":{"gitId":"WingKei67"},"content":"10. Product should be a result of evolving the given code base.","lastModifiedDate":"2022-09-27"},{"lineNumber":1122,"author":{"gitId":"WingKei67"},"content":"11. Should be for a single user.","lastModifiedDate":"2022-09-27"},{"lineNumber":1123,"author":{"gitId":"WingKei67"},"content":"12. Should be able to be used at any time (even beyond this semester)","lastModifiedDate":"2022-09-27"},{"lineNumber":1124,"author":{"gitId":"WingKei67"},"content":"13. Should not exceed 100MB in size.","lastModifiedDate":"2022-09-27"},{"lineNumber":1125,"author":{"gitId":"WingKei67"},"content":"14. Should not require external software to run.","lastModifiedDate":"2022-09-27"},{"lineNumber":1126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":1127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1128,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":1129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1130,"author":{"gitId":"WingKei67"},"content":"* **Regular English text**: Basic text that is keyed in by a user. Not code or not system admin commands.","lastModifiedDate":"2022-09-27"},{"lineNumber":1131,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":1132,"author":{"gitId":"WingKei67"},"content":"* **Operating System (OS)**: The low-level software that supports a computer\u0027s basic functions, common ones include","lastModifiedDate":"2022-09-27"},{"lineNumber":1133,"author":{"gitId":"WingKei67"},"content":"  Windows, macOS, Linux.","lastModifiedDate":"2022-09-27"},{"lineNumber":1134,"author":{"gitId":"WingKei67"},"content":"* **Search string**: The text that a user uses to find a specific patient (such as a part of the patient’s name).","lastModifiedDate":"2022-09-27"},{"lineNumber":1135,"author":{"gitId":"WingKei67"},"content":"* **Command-Line Interface (CLI)**: A text-based user interface (UI) used to run programs, manage computer files and","lastModifiedDate":"2022-09-27"},{"lineNumber":1136,"author":{"gitId":"WingKei67"},"content":"  interact with the computer.","lastModifiedDate":"2022-09-27"},{"lineNumber":1137,"author":{"gitId":"WingKei67"},"content":"* **Graphical User Interface (GUI)**: A graphics-based operating system interface that uses icons, menus and a mouse","lastModifiedDate":"2022-09-27"},{"lineNumber":1138,"author":{"gitId":"WingKei67"},"content":"  (to click on the icon or pull down the menus) to manage interaction with the system.","lastModifiedDate":"2022-09-27"},{"lineNumber":1139,"author":{"gitId":"guanzhou03"},"content":"* **Main Success Scenario (MSS)**: Describes the most straightforward interaction for a given use case, which assumes that nothing goes wrong.","lastModifiedDate":"2022-11-07"},{"lineNumber":1140,"author":{"gitId":"WingKei67"},"content":"* **Actor**: A role played by a user. An actor can be a human or another system. Actors are not part of the system; they reside outside the system.","lastModifiedDate":"2022-09-27"},{"lineNumber":1141,"author":{"gitId":"WingKei67"},"content":"* **Backward compatible**: Refers to a hardware or software system that can use the interface of an older version of the same product.","lastModifiedDate":"2022-09-27"},{"lineNumber":1142,"author":{"gitId":"WingKei67"},"content":"* **Store data locally**: Allow the required data to be stored in a file in the user’s computer.","lastModifiedDate":"2022-09-27"},{"lineNumber":1143,"author":{"gitId":"WingKei67"},"content":"* **Database Management Systems (DBMS)**: Software systems used to store, retrieve, and run queries on data. A DBMS serves as an interface between an end-user and a database, allowing users to create, read, update, and delete data in the database.","lastModifiedDate":"2022-09-27"},{"lineNumber":1144,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":1145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1146,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":1147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1148,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":1149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1150,"author":{"gitId":"NicholasTYD"},"content":"Given below are instructions to test the app manually. It is recommended to follow the steps and sections in order.","lastModifiedDate":"2022-11-02"},{"lineNumber":1151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1152,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":1153,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":1154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1155,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":1156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1157,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":1158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1159,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":1160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1161,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":1162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1163,"author":{"gitId":"NicholasTYD"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample patient and appointment information. The window size may not be optimum.","lastModifiedDate":"2022-11-01"},{"lineNumber":1164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1165,"author":{"gitId":"NicholasTYD"},"content":"2. Saving window preferences","lastModifiedDate":"2022-11-01"},{"lineNumber":1166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1167,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":1168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1169,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":1170,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":1171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1172,"author":{"gitId":"NicholasTYD"},"content":"### Adding a patient","lastModifiedDate":"2022-11-01"},{"lineNumber":1173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1174,"author":{"gitId":"NicholasTYD"},"content":"1. Test case: `add n/John Doe p/12345678`","lastModifiedDate":"2022-11-01"},{"lineNumber":1175,"author":{"gitId":"NicholasTYD"},"content":"   1. Expected results:","lastModifiedDate":"2022-11-01"},{"lineNumber":1176,"author":{"gitId":"NicholasTYD"},"content":"      1. An acknowledgement message regarding the added patient appears.","lastModifiedDate":"2022-11-01"},{"lineNumber":1177,"author":{"gitId":"NicholasTYD"},"content":"      2. A new entry appears in the patient list with the name `John Doe`, phone number `12345678` and 0 upcoming appointments.","lastModifiedDate":"2022-11-01"},{"lineNumber":1178,"author":{"gitId":"NicholasTYD"},"content":"2. Test case: `add n/John`","lastModifiedDate":"2022-11-01"},{"lineNumber":1179,"author":{"gitId":"NicholasTYD"},"content":"   1. Expected results:","lastModifiedDate":"2022-11-01"},{"lineNumber":1180,"author":{"gitId":"NicholasTYD"},"content":"      1. An invalid command format error message appears.","lastModifiedDate":"2022-11-01"},{"lineNumber":1181,"author":{"gitId":"NicholasTYD"},"content":"      2. No new entries are added.","lastModifiedDate":"2022-11-01"},{"lineNumber":1182,"author":{"gitId":"-"},"content":"   ","lastModifiedDate":"2020-05-23"},{"lineNumber":1183,"author":{"gitId":"NicholasTYD"},"content":"### Deleting a patient","lastModifiedDate":"2022-11-01"},{"lineNumber":1184,"author":{"gitId":"NicholasTYD"},"content":"Section Prerequisites: Completed all the steps in the previous section `Adding a patient`.","lastModifiedDate":"2022-11-01"},{"lineNumber":1185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1186,"author":{"gitId":"NicholasTYD"},"content":"1. Test case: `delete 6` It should be a patient without any upcoming appointments.","lastModifiedDate":"2022-11-01"},{"lineNumber":1187,"author":{"gitId":"NicholasTYD"},"content":"   1. Expected results:","lastModifiedDate":"2022-11-01"},{"lineNumber":1188,"author":{"gitId":"NicholasTYD"},"content":"      1. An acknowledgement message regarding the patient deleted appears.","lastModifiedDate":"2022-11-01"},{"lineNumber":1189,"author":{"gitId":"NicholasTYD"},"content":"      2. The patient should no longer appear in the patient list.","lastModifiedDate":"2022-11-01"},{"lineNumber":1190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1191,"author":{"gitId":"NicholasTYD"},"content":"2. Test case: `delete 6`. It should be a patient with at least 1 upcoming appointment.","lastModifiedDate":"2022-11-01"},{"lineNumber":1192,"author":{"gitId":"NicholasTYD"},"content":"   1. Expected results:","lastModifiedDate":"2022-11-01"},{"lineNumber":1193,"author":{"gitId":"NicholasTYD"},"content":"      1. Similar to previous","lastModifiedDate":"2022-11-01"},{"lineNumber":1194,"author":{"gitId":"NicholasTYD"},"content":"      2. Additionally, there should be no more appointments belonging to the patient in the appointment list.","lastModifiedDate":"2022-11-01"},{"lineNumber":1195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1196,"author":{"gitId":"NicholasTYD"},"content":"3. Test case: `delete 0`","lastModifiedDate":"2022-11-01"},{"lineNumber":1197,"author":{"gitId":"NicholasTYD"},"content":"    1. Expected results:","lastModifiedDate":"2022-11-01"},{"lineNumber":1198,"author":{"gitId":"NicholasTYD"},"content":"       1. An invalid command format error message appears.","lastModifiedDate":"2022-11-01"},{"lineNumber":1199,"author":{"gitId":"NicholasTYD"},"content":"       2. No entries in the patient appointment lists were deleted.","lastModifiedDate":"2022-11-01"},{"lineNumber":1200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1201,"author":{"gitId":"NicholasTYD"},"content":"### Booking an appointment","lastModifiedDate":"2022-11-01"},{"lineNumber":1202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1203,"author":{"gitId":"NicholasTYD"},"content":"Section Prerequisite: Completed all the steps in the previous section `Deleting a patient`.","lastModifiedDate":"2022-11-01"},{"lineNumber":1204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1205,"author":{"gitId":"NicholasTYD"},"content":"1. Test case: `book 1 r/Swimmer\u0027s Ear d/2022-12-30 10:00`","lastModifiedDate":"2022-11-01"},{"lineNumber":1206,"author":{"gitId":"NicholasTYD"},"content":"   1. Expected results:","lastModifiedDate":"2022-11-01"},{"lineNumber":1207,"author":{"gitId":"NicholasTYD"},"content":"      1. An acknowledgement message that an appointment was booked for the target patient appears.","lastModifiedDate":"2022-11-01"},{"lineNumber":1208,"author":{"gitId":"NicholasTYD"},"content":"      2. A new entry with the reason `Swimmer\u0027s Ear`, date `Dec 30 2022 10:00` and state `Non-recurring` should appear in the appointment list.","lastModifiedDate":"2022-11-01"},{"lineNumber":1209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1210,"author":{"gitId":"NicholasTYD"},"content":"2. Test case: `book 2 r/Rhinitis d/2020-10-10 10:30 pe/1Y`","lastModifiedDate":"2022-11-01"},{"lineNumber":1211,"author":{"gitId":"NicholasTYD"},"content":"   1. Expected results:","lastModifiedDate":"2022-11-01"},{"lineNumber":1212,"author":{"gitId":"NicholasTYD"},"content":"      1. Similar to previous, but with a new appointment entry with reason `Rhinitis`, date `2020-10-10` and state `Recurring every 1 year` should appear instead.","lastModifiedDate":"2022-11-01"},{"lineNumber":1213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1214,"author":{"gitId":"NicholasTYD"},"content":"3. Test case `book`","lastModifiedDate":"2022-11-01"},{"lineNumber":1215,"author":{"gitId":"NicholasTYD"},"content":"   1. Expected result:","lastModifiedDate":"2022-11-01"},{"lineNumber":1216,"author":{"gitId":"NicholasTYD"},"content":"      1. An invalid command format error message appears.","lastModifiedDate":"2022-11-01"},{"lineNumber":1217,"author":{"gitId":"NicholasTYD"},"content":"      2. No new entries are added.","lastModifiedDate":"2022-11-01"},{"lineNumber":1218,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1219,"author":{"gitId":"NicholasTYD"},"content":"### Cancelling an appointment","lastModifiedDate":"2022-11-01"},{"lineNumber":1220,"author":{"gitId":"NicholasTYD"},"content":"Section Prerequisite: Completed all the steps in the previous section `Booking an appointment`.","lastModifiedDate":"2022-11-01"},{"lineNumber":1221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1222,"author":{"gitId":"NicholasTYD"},"content":"1. Test case: `cancel 1`.","lastModifiedDate":"2022-11-01"},{"lineNumber":1223,"author":{"gitId":"NicholasTYD"},"content":"   1. Expected results:","lastModifiedDate":"2022-11-01"},{"lineNumber":1224,"author":{"gitId":"NicholasTYD"},"content":"      1. An acknowledgement message that the target appointment was deleted appears.","lastModifiedDate":"2022-11-01"},{"lineNumber":1225,"author":{"gitId":"NicholasTYD"},"content":"      2. The appointment should no longer appear on the appointment list.","lastModifiedDate":"2022-11-01"},{"lineNumber":1226,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1227,"author":{"gitId":"NicholasTYD"},"content":"2. Test case: `cancel 9999`.","lastModifiedDate":"2022-11-01"},{"lineNumber":1228,"author":{"gitId":"NicholasTYD"},"content":"   1. Expected results:","lastModifiedDate":"2022-11-01"},{"lineNumber":1229,"author":{"gitId":"NicholasTYD"},"content":"      1. An invalid appointment index error message appears.","lastModifiedDate":"2022-11-01"},{"lineNumber":1230,"author":{"gitId":"NicholasTYD"},"content":"      2. No entries in the patient or appointment lists were deleted.","lastModifiedDate":"2022-11-01"},{"lineNumber":1231,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1232,"author":{"gitId":"NicholasTYD"},"content":"### Editing existing patients","lastModifiedDate":"2022-11-01"},{"lineNumber":1233,"author":{"gitId":"NicholasTYD"},"content":"Section Prerequisite: At least 1 patient exists in the patient list.","lastModifiedDate":"2022-11-01"},{"lineNumber":1234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1235,"author":{"gitId":"NicholasTYD"},"content":"1. Test case: `edit patients 1 e/test@example.com a/Blk 10 Clementi Street #12-34`","lastModifiedDate":"2022-11-01"},{"lineNumber":1236,"author":{"gitId":"NicholasTYD"},"content":"   1. Expected results:","lastModifiedDate":"2022-11-01"},{"lineNumber":1237,"author":{"gitId":"NicholasTYD"},"content":"      1. An acknowledgement message that the patient\u0027s information was edited appears.","lastModifiedDate":"2022-11-01"},{"lineNumber":1238,"author":{"gitId":"NicholasTYD"},"content":"      2. The patient entry contains the updated email and address information.","lastModifiedDate":"2022-11-01"},{"lineNumber":1239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1240,"author":{"gitId":"NicholasTYD"},"content":"2. Test case: `edit patients 1 n/Jane`","lastModifiedDate":"2022-11-01"},{"lineNumber":1241,"author":{"gitId":"NicholasTYD"},"content":"   1. Expected result: Same as previous, but contains with only the name updated. You may need to scroll down to see the updated patient entry.","lastModifiedDate":"2022-11-01"},{"lineNumber":1242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1243,"author":{"gitId":"NicholasTYD"},"content":"3. Test case: `edit`","lastModifiedDate":"2022-11-01"},{"lineNumber":1244,"author":{"gitId":"NicholasTYD"},"content":"   1. Expected results:","lastModifiedDate":"2022-11-01"},{"lineNumber":1245,"author":{"gitId":"NicholasTYD"},"content":"      1. A command incomplete message appears.","lastModifiedDate":"2022-11-01"},{"lineNumber":1246,"author":{"gitId":"NicholasTYD"},"content":"      2. No entries in the patient or appointment lists were modified.","lastModifiedDate":"2022-11-01"},{"lineNumber":1247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1248,"author":{"gitId":"NicholasTYD"},"content":"### Editing existing appointments","lastModifiedDate":"2022-11-01"},{"lineNumber":1249,"author":{"gitId":"NicholasTYD"},"content":"Section Prerequisite: At least 1 appointment exists in the patient list.","lastModifiedDate":"2022-11-01"},{"lineNumber":1250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1251,"author":{"gitId":"NicholasTYD"},"content":"1. Test case: `edit appts 1 r/Sore Throat`","lastModifiedDate":"2022-11-01"},{"lineNumber":1252,"author":{"gitId":"NicholasTYD"},"content":"   1. Expected results:","lastModifiedDate":"2022-11-01"},{"lineNumber":1253,"author":{"gitId":"NicholasTYD"},"content":"       1. An acknowledgement message that the appointment\u0027s information was edited appears.","lastModifiedDate":"2022-11-01"},{"lineNumber":1254,"author":{"gitId":"NicholasTYD"},"content":"       2. The appointment entry contains the updated reason.","lastModifiedDate":"2022-11-01"},{"lineNumber":1255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1256,"author":{"gitId":"NicholasTYD"},"content":"2. Test case: `edit appts`","lastModifiedDate":"2022-11-01"},{"lineNumber":1257,"author":{"gitId":"NicholasTYD"},"content":"   1. Expected results:","lastModifiedDate":"2022-11-01"},{"lineNumber":1258,"author":{"gitId":"NicholasTYD"},"content":"       1. An invalid command format error message appears.","lastModifiedDate":"2022-11-01"},{"lineNumber":1259,"author":{"gitId":"NicholasTYD"},"content":"       2. No entries in the patient or appointment lists were modified.","lastModifiedDate":"2022-11-01"},{"lineNumber":1260,"author":{"gitId":"-"},"content":"   ","lastModifiedDate":"2020-05-23"},{"lineNumber":1261,"author":{"gitId":"NicholasTYD"},"content":"### Marking appointments as complete","lastModifiedDate":"2022-11-01"},{"lineNumber":1262,"author":{"gitId":"NicholasTYD"},"content":"Section Prerequisite: The 2nd appointment in the appointment list should be unmarked. If the appointment is marked or missing, replace the `2` in the following commands with another appointment entry that is currently unmarked.","lastModifiedDate":"2022-11-01"},{"lineNumber":1263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1264,"author":{"gitId":"NicholasTYD"},"content":"1. Test case: `mark 2`","lastModifiedDate":"2022-11-01"},{"lineNumber":1265,"author":{"gitId":"NicholasTYD"},"content":"   1. Expected results:","lastModifiedDate":"2022-11-01"},{"lineNumber":1266,"author":{"gitId":"NicholasTYD"},"content":"      1. An acknowledgement message that the appointment was marked appears.","lastModifiedDate":"2022-11-01"},{"lineNumber":1267,"author":{"gitId":"NicholasTYD"},"content":"      2. The appointment\u0027s mark status changes from `[]` to `[X]`.","lastModifiedDate":"2022-11-01"},{"lineNumber":1268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1269,"author":{"gitId":"NicholasTYD"},"content":"2. Test case: `mark 2`","lastModifiedDate":"2022-11-01"},{"lineNumber":1270,"author":{"gitId":"NicholasTYD"},"content":"   1. Expected results:","lastModifiedDate":"2022-11-01"},{"lineNumber":1271,"author":{"gitId":"NicholasTYD"},"content":"      1. An error message indicated that the appointment is already marked appears.","lastModifiedDate":"2022-11-01"},{"lineNumber":1272,"author":{"gitId":"NicholasTYD"},"content":"      2. There is no change in the mark status of the appointment.","lastModifiedDate":"2022-11-01"},{"lineNumber":1273,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1274,"author":{"gitId":"NicholasTYD"},"content":"### Marking appointments as incomplete","lastModifiedDate":"2022-11-01"},{"lineNumber":1275,"author":{"gitId":"NicholasTYD"},"content":"Section Prerequisite: Completed all the steps in the previous section `Marking appointments as complete`.","lastModifiedDate":"2022-11-01"},{"lineNumber":1276,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1277,"author":{"gitId":"NicholasTYD"},"content":"Repeat the same test cases in the previous section, but using `unmark 2` instead.","lastModifiedDate":"2022-11-01"},{"lineNumber":1278,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1279,"author":{"gitId":"NicholasTYD"},"content":"The expected results should be similar as those in the previous section, but with acknowledgment messages indicating","lastModifiedDate":"2022-11-01"},{"lineNumber":1280,"author":{"gitId":"NicholasTYD"},"content":"that the appointment was unmarked, and that the appointment\u0027s marked status changes from `[X]` to `[]`.","lastModifiedDate":"2022-11-01"},{"lineNumber":1281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1282,"author":{"gitId":"NicholasTYD"},"content":"### Listing results","lastModifiedDate":"2022-11-01"},{"lineNumber":1283,"author":{"gitId":"NicholasTYD"},"content":"Section Prerequisite: There is at least 1 entry in each of the patient and appointment lists.","lastModifiedDate":"2022-11-02"},{"lineNumber":1284,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":1285,"author":{"gitId":"NicholasTYD"},"content":"- **Note**: Filter the list using a find command (E.g., `find n/test r/test`) before performing any test case in this section.","lastModifiedDate":"2022-11-02"},{"lineNumber":1286,"author":{"gitId":"NicholasTYD"},"content":"  - Ensure that the resulting patient and appointment lists contains fewer patients and appointments prior to entering the command.","lastModifiedDate":"2022-11-01"},{"lineNumber":1287,"author":{"gitId":"NicholasTYD"},"content":"  - It is fine if no results are displayed.","lastModifiedDate":"2022-11-01"},{"lineNumber":1288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1289,"author":{"gitId":"NicholasTYD"},"content":"1. Test case: `list patients`","lastModifiedDate":"2022-11-01"},{"lineNumber":1290,"author":{"gitId":"NicholasTYD"},"content":"   1. Expected results:","lastModifiedDate":"2022-11-01"},{"lineNumber":1291,"author":{"gitId":"NicholasTYD"},"content":"      1. An acknowledgement message that all patients are listed appears.","lastModifiedDate":"2022-11-01"},{"lineNumber":1292,"author":{"gitId":"NicholasTYD"},"content":"      2. The patient list displays all patients.","lastModifiedDate":"2022-11-01"},{"lineNumber":1293,"author":{"gitId":"NicholasTYD"},"content":"      3. The other list (appointment list in this case) should stay unchanged.","lastModifiedDate":"2022-11-01"},{"lineNumber":1294,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1295,"author":{"gitId":"NicholasTYD"},"content":"2. Test case: `list appts`","lastModifiedDate":"2022-11-01"},{"lineNumber":1296,"author":{"gitId":"NicholasTYD"},"content":"   1. Expected result: Same as previous, but with appointments instead.","lastModifiedDate":"2022-11-01"},{"lineNumber":1297,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1298,"author":{"gitId":"NicholasTYD"},"content":"3. Test case: `list all`","lastModifiedDate":"2022-11-01"},{"lineNumber":1299,"author":{"gitId":"NicholasTYD"},"content":"   1. Expected results:","lastModifiedDate":"2022-11-01"},{"lineNumber":1300,"author":{"gitId":"NicholasTYD"},"content":"      1. An acknowledgement message that all patients and appointment are listed appears.","lastModifiedDate":"2022-11-01"},{"lineNumber":1301,"author":{"gitId":"NicholasTYD"},"content":"      2. Both patient and appointment lists displays all results.","lastModifiedDate":"2022-11-01"},{"lineNumber":1302,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1303,"author":{"gitId":"NicholasTYD"},"content":"4. Test case: `list`","lastModifiedDate":"2022-11-01"},{"lineNumber":1304,"author":{"gitId":"NicholasTYD"},"content":"   1. Expected results:","lastModifiedDate":"2022-11-01"},{"lineNumber":1305,"author":{"gitId":"NicholasTYD"},"content":"      1. A command incomplete message appears.","lastModifiedDate":"2022-11-01"},{"lineNumber":1306,"author":{"gitId":"NicholasTYD"},"content":"      2. Both patient and appointment lists stay unchanged.","lastModifiedDate":"2022-11-01"},{"lineNumber":1307,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1308,"author":{"gitId":"NicholasTYD"},"content":"### Grouping/Ungrouping results","lastModifiedDate":"2022-11-02"},{"lineNumber":1309,"author":{"gitId":"NicholasTYD"},"content":"Section Prerequisite: There are at least 2 entries in each of the patient and appointment lists with different tags","lastModifiedDate":"2022-11-01"},{"lineNumber":1310,"author":{"gitId":"NicholasTYD"},"content":"attached to them.","lastModifiedDate":"2022-11-01"},{"lineNumber":1311,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1312,"author":{"gitId":"NicholasTYD"},"content":"1. Test case: `group patients`","lastModifiedDate":"2022-11-01"},{"lineNumber":1313,"author":{"gitId":"NicholasTYD"},"content":"   1. Expected results:","lastModifiedDate":"2022-11-01"},{"lineNumber":1314,"author":{"gitId":"NicholasTYD"},"content":"      1. An acknowledgement message that all patients are grouped appears.","lastModifiedDate":"2022-11-01"},{"lineNumber":1315,"author":{"gitId":"NicholasTYD"},"content":"      2. Entries in the patient list with similar tags should be grouped together, with behaviour as specified in the user guide.","lastModifiedDate":"2022-11-02"},{"lineNumber":1316,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":1317,"author":{"gitId":"NicholasTYD"},"content":"2. Test case: `ungroup patients`","lastModifiedDate":"2022-11-01"},{"lineNumber":1318,"author":{"gitId":"NicholasTYD"},"content":"   1. Expected results:","lastModifiedDate":"2022-11-01"},{"lineNumber":1319,"author":{"gitId":"NicholasTYD"},"content":"       1. An acknowledgement message that all patients are ungrouped appears.","lastModifiedDate":"2022-11-01"},{"lineNumber":1320,"author":{"gitId":"NicholasTYD"},"content":"       2. The changes to the patient list that occurred in the previous test case should be reverted.","lastModifiedDate":"2022-11-01"},{"lineNumber":1321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1322,"author":{"gitId":"NicholasTYD"},"content":"3. Test case: `group appts k/tag`","lastModifiedDate":"2022-11-02"},{"lineNumber":1323,"author":{"gitId":"NicholasTYD"},"content":"   1. Expected result: Similar to test case 1, but with appointments grouped with their tags instead.","lastModifiedDate":"2022-11-02"},{"lineNumber":1324,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":1325,"author":{"gitId":"NicholasTYD"},"content":"4. Test case: `ungroup appts`","lastModifiedDate":"2022-11-02"},{"lineNumber":1326,"author":{"gitId":"NicholasTYD"},"content":"   1. Expected result: Similar to test case 2, but with appointments instead.","lastModifiedDate":"2022-11-02"},{"lineNumber":1327,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":1328,"author":{"gitId":"NicholasTYD"},"content":"### Hiding/Unhiding results","lastModifiedDate":"2022-11-02"},{"lineNumber":1329,"author":{"gitId":"NicholasTYD"},"content":"Section Prerequisite: There is a patient named `Bernice` with at least 1 appointment. There is also at least 1 appointment","lastModifiedDate":"2022-11-02"},{"lineNumber":1330,"author":{"gitId":"NicholasTYD"},"content":"in the appointment list with the reason `Checkup`.","lastModifiedDate":"2022-11-02"},{"lineNumber":1331,"author":{"gitId":"NicholasTYD"},"content":"It is recommended to have more patients and appointments so that the behaviour of this command becomes more clear.","lastModifiedDate":"2022-11-02"},{"lineNumber":1332,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":1333,"author":{"gitId":"NicholasTYD"},"content":"- **Note**: For all test cases in this section, a message displaying the number of filtered results should appear after every valid input.","lastModifiedDate":"2022-11-02"},{"lineNumber":1334,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":1335,"author":{"gitId":"NicholasTYD"},"content":"1. Test case: `hide patients n/Bernice`","lastModifiedDate":"2022-11-02"},{"lineNumber":1336,"author":{"gitId":"NicholasTYD"},"content":"   1. Expected results:","lastModifiedDate":"2022-11-02"},{"lineNumber":1337,"author":{"gitId":"NicholasTYD"},"content":"      2. There are no more patients containing the name `Bernice` in the patient list.","lastModifiedDate":"2022-11-02"},{"lineNumber":1338,"author":{"gitId":"NicholasTYD"},"content":"      3. There are no more appointments belonging to a patient containing the name `Bernice` in the appointment list.","lastModifiedDate":"2022-11-02"},{"lineNumber":1339,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1340,"author":{"gitId":"NicholasTYD"},"content":"2. Test case: `unhide patients n/Bernice`","lastModifiedDate":"2022-11-02"},{"lineNumber":1341,"author":{"gitId":"NicholasTYD"},"content":"   1. Expected result: The results hidden in the previous test case should reappear.","lastModifiedDate":"2022-11-02"},{"lineNumber":1342,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1343,"author":{"gitId":"NicholasTYD"},"content":"3. Test case: `hide appts r/Checkup`","lastModifiedDate":"2022-11-02"},{"lineNumber":1344,"author":{"gitId":"NicholasTYD"},"content":"   1. Expected result: There are no more appointments containing the reason `Checkup` in the appointment list.","lastModifiedDate":"2022-11-02"},{"lineNumber":1345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1346,"author":{"gitId":"NicholasTYD"},"content":"4. Test case: `unhide appts r/Checkup`","lastModifiedDate":"2022-11-02"},{"lineNumber":1347,"author":{"gitId":"NicholasTYD"},"content":"   1. Expected result: The results hidden in the previous test case should reappear.","lastModifiedDate":"2022-11-02"},{"lineNumber":1348,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1349,"author":{"gitId":"NicholasTYD"},"content":"### Finding results","lastModifiedDate":"2022-11-02"},{"lineNumber":1350,"author":{"gitId":"NicholasTYD"},"content":"Section Prerequisites: Same prerequisites as those in the previous section `Hiding/Unhiding results`.","lastModifiedDate":"2022-11-06"},{"lineNumber":1351,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1352,"author":{"gitId":"NicholasTYD"},"content":"**Note**: Enter `list all` after performing every test case in this section. Similarly to the previous section, a message","lastModifiedDate":"2022-11-02"},{"lineNumber":1353,"author":{"gitId":"NicholasTYD"},"content":"displaying the number of filtered results should appear after every valid input.","lastModifiedDate":"2022-11-02"},{"lineNumber":1354,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1355,"author":{"gitId":"NicholasTYD"},"content":"1. Test case: `find n/Bernice`","lastModifiedDate":"2022-11-02"},{"lineNumber":1356,"author":{"gitId":"NicholasTYD"},"content":"   1. Expected results:","lastModifiedDate":"2022-11-02"},{"lineNumber":1357,"author":{"gitId":"NicholasTYD"},"content":"      1. Only patients containing the name `Bernice` appear in the patient list.","lastModifiedDate":"2022-11-02"},{"lineNumber":1358,"author":{"gitId":"NicholasTYD"},"content":"      2. Only appointments belonging to a patient containing the name `Bernice` appear in the appointment list.","lastModifiedDate":"2022-11-02"},{"lineNumber":1359,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":1360,"author":{"gitId":"NicholasTYD"},"content":"2. Test case: `find r/Checkup`","lastModifiedDate":"2022-11-02"},{"lineNumber":1361,"author":{"gitId":"NicholasTYD"},"content":"   1. Expected results:","lastModifiedDate":"2022-11-02"},{"lineNumber":1362,"author":{"gitId":"NicholasTYD"},"content":"      1. Only appointments containing the reason `Checkup` appear in the appointment list.","lastModifiedDate":"2022-11-02"},{"lineNumber":1363,"author":{"gitId":"NicholasTYD"},"content":"      2. Only patients with at least 1 such appointment will appear in the patient list.","lastModifiedDate":"2022-11-02"},{"lineNumber":1364,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":1365,"author":{"gitId":"NicholasTYD"},"content":"### Dealing with save data issues","lastModifiedDate":"2022-11-02"},{"lineNumber":1366,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":1367,"author":{"gitId":"NicholasTYD"},"content":"1. Test Case: Dealing with missing files","lastModifiedDate":"2022-11-02"},{"lineNumber":1368,"author":{"gitId":"NicholasTYD"},"content":"   1. If there is no save data present, the application will open with a new data file filled with sample data","lastModifiedDate":"2022-11-02"},{"lineNumber":1369,"author":{"gitId":"NicholasTYD"},"content":"   2. To simulate a missing file:","lastModifiedDate":"2022-11-02"},{"lineNumber":1370,"author":{"gitId":"NicholasTYD"},"content":"      1. Head to the location of your save data. The location of the save data is indicated at the bottom left of the idENTify app.","lastModifiedDate":"2022-11-02"},{"lineNumber":1371,"author":{"gitId":"NicholasTYD"},"content":"      2. Delete the file `idENTify.json`","lastModifiedDate":"2022-11-02"},{"lineNumber":1372,"author":{"gitId":"NicholasTYD"},"content":"      3. Relaunch the app.","lastModifiedDate":"2022-11-02"},{"lineNumber":1373,"author":{"gitId":"NicholasTYD"},"content":"   3. Expected result: A new file will be created with some sample patients and appointments.","lastModifiedDate":"2022-11-02"},{"lineNumber":1374,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-02"},{"lineNumber":1375,"author":{"gitId":"NicholasTYD"},"content":"2. Test case: Dealing with corrupted files","lastModifiedDate":"2022-11-02"},{"lineNumber":1376,"author":{"gitId":"NicholasTYD"},"content":"   1. If save data is corrupted, the application will open with an empty data file.","lastModifiedDate":"2022-11-02"},{"lineNumber":1377,"author":{"gitId":"NicholasTYD"},"content":"   2. To simulate a missing file:","lastModifiedDate":"2022-11-02"},{"lineNumber":1378,"author":{"gitId":"NicholasTYD"},"content":"      1. Head to the location of your save data, in the same way as the previous test case.","lastModifiedDate":"2022-11-02"},{"lineNumber":1379,"author":{"gitId":"NicholasTYD"},"content":"      2. Open the file `idENTify.json`, and corrupt the file (E.g. Delete the very first line of the `idENTify.json` file).","lastModifiedDate":"2022-11-02"},{"lineNumber":1380,"author":{"gitId":"NicholasTYD"},"content":"      3. Relaunch the app.","lastModifiedDate":"2022-11-02"},{"lineNumber":1381,"author":{"gitId":"NicholasTYD"},"content":"   3. Expected result: A new file will be created with no patients or appointments.","lastModifiedDate":"2022-11-02"},{"lineNumber":1382,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":1383,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":1384,"author":{"gitId":"JovonLim"},"content":"## **Appendix: Effort**","lastModifiedDate":"2022-11-03"},{"lineNumber":1385,"author":{"gitId":"JovonLim"},"content":"Our project was harder than Address Book Level3(AB3) because AB3 only deals with Persons, while our project includes Appointments as well. There was a huge learning curve at the start as we were very unfamiliar with what most of the classes do. After familiarizing ourselves with some of the necessary classes to implement our new enhancements, we also had a hard time writing new test cases as our new features caused the existing test cases to fail. It took a long time for us to figure out that the existing static variables used for the test cases were the problem as our new test cases involved altering the list of appointments in those variables.","lastModifiedDate":"2022-11-03"},{"lineNumber":1386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":1387,"author":{"gitId":"JovonLim"},"content":"In v1.2, we updated the GUI to contain 2 listviews: one for patients and one for appointments. We found out that changes to our appointment fields, such as marking them as completed, were not properly reflected on the listviews. We had to spent time researching how to use the Observer pattern(ie. Callback) to reflect such changes. We also had to differentiate similar commands by using a descriptor word(patients/appts), and spent some time learning regex in order to update the AddressBookParser\u0027s pattern checking. As our mark, unmark, edit appts and cancel features also used the same mechanism to retrieve the specified appointment, we had to spent time refactoring our Parser classes to reduce duplication of such code.","lastModifiedDate":"2022-11-05"},{"lineNumber":1388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":1389,"author":{"gitId":"JovonLim"},"content":"In v1.3, we implemented our organisation features: hide, unhide, group, ungroup and find. While they all individually worked as expected, we had a hard time integrating hide/unhide/find to work well together, as these commands all deal with inserting a Predicate into the filtered list. It took some time for us to figure out how to keep track of the current Predicate in each filtered list and to add onto this Predicate while executing any hide/unhide/find command.","lastModifiedDate":"2022-11-03"},{"lineNumber":1390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":1391,"author":{"gitId":"JovonLim"},"content":"Overall, we are satisfied with our project given the time constraints and huge learning curve for the starting weeks. While workload is relatively high, it was an enjoyable experience to be working in a team.","lastModifiedDate":"2022-11-06"}],"authorContributionMap":{"NicholasTYD":320,"JovonLim":178,"WingKei67":400,"-":331,"guanzhou03":121,"pwjj2000":41}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"idENTify is a **desktop app made for Ear, Nose and Throat (ENT) administrative staff to manage patients\u0027 contact details and appointments, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, idENTify can get your patients/appointments\u0027 management tasks done faster than traditional GUI apps.","lastModifiedDate":"2022-11-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"WingKei67"},"content":"## **Glossary**","lastModifiedDate":"2022-11-03"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"There are a few technical terms that will appear in this user guide. ","lastModifiedDate":"2022-11-06"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"This table might be useful for you to understand more about what those terms mean.","lastModifiedDate":"2022-11-06"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"| Term                       | Meaning                                                                                                                                                                                                                                                |","lastModifiedDate":"2022-11-06"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"|----------------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2022-11-06"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"| **ENT**                    | Stands for **E**ar, **N**ose and **T**hroat. ENT departments of a hospital therefore handle patients whom require medical attention for issues pertaining to ear, nose or throat.                                                                      |","lastModifiedDate":"2022-11-06"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"| **UI**                     | Stands for **U**ser **I**nterface, it is the space where users interact with an application or website. In this case, the window that appears when idENTify is launched is the UI and the user can interact with the application by entering commands. |","lastModifiedDate":"2022-11-06"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"| **GUI**                    | Stands for **G**raphical **U**ser **I**nterface. It is a type of user interface through which users interact with electronic devices via visual indicator representations.                                                                             |","lastModifiedDate":"2022-11-06"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"| **Command Line Interface** | A command-line interface (CLI) is a text-based user interface (UI) used to run programs, manage computer files and interact with the computer.                                                                                                         |","lastModifiedDate":"2022-11-06"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"| **Parameters**             | A parameter is a kind of variable that is used to pass information or data between functions or procedures in a computer. For example, adding a patient into idENTify requires the name of the patient, and the name is a parameter.                   |","lastModifiedDate":"2022-11-06"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"| **Alphanumeric**           | Text that consists only of letters and numbers. For example, `abc12` is alphanumeric, but `(O_O)` is not.                                                                                                                                              |","lastModifiedDate":"2022-11-07"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"| **Recurring**              | Something that occurs repeatedly or periodically. For example, an appointment that repeats every 7 days is considered recurring.                                                                                                                       |","lastModifiedDate":"2022-11-06"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"| **Sort**                   | A process that involves arranging the data into some meaningful order to make it easier to understand, analyze or visualize. For example, sorting patients by name would arrange all patients alphabetically by name.                                  |","lastModifiedDate":"2022-11-06"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"| **Case-sensitive**         | Difference between upper-case and lower-case letters matters. Therefore, not case-sensitive or case-insensitive means capital and lower-case letters are treated as the same.                                                                          |","lastModifiedDate":"2022-11-06"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"| **Command**                | An instruction typed into a computer for it to carry out. (e.g, `add n/John p/12345678`)                                                                                                                                                               |","lastModifiedDate":"2022-11-06"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"| **Integer**                | A whole number. (e.g., 1, 2, 3 are integers, but 1.99, 2.3 are not.)                                                                                                                                                                                   |","lastModifiedDate":"2022-11-06"},{"lineNumber":28,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":29,"author":{"gitId":"WingKei67"},"content":"## **Quick Start**","lastModifiedDate":"2022-11-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2022-10-27"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"2. Download the latest [idENTify.jar](https://github.com/AY2223S1-CS2103T-T17-4/tp/releases/tag/v1.4) from here.","lastModifiedDate":"2022-11-07"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"3. Copy the file to your preferred folder.","lastModifiedDate":"2022-10-27"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"4. Double-click the file to start the app. The GUI similar to the one below should appear in a few seconds. Note how the app contains some sample data.","lastModifiedDate":"2022-10-27"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"![start_up](images/StartingUI.png)","lastModifiedDate":"2022-11-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-27"},{"lineNumber":36,"author":{"gitId":"WingKei67"},"content":"## **UI Components**","lastModifiedDate":"2022-11-03"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"![SampleUiImage](images/SampleUI.png)","lastModifiedDate":"2022-10-31"},{"lineNumber":38,"author":{"gitId":"pwjj2000"},"content":"* The UI is available in light mode (by default, shown above) or dark mode.","lastModifiedDate":"2022-11-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"### General UI information","lastModifiedDate":"2022-11-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"Component | Purpose","lastModifiedDate":"2022-10-30"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"--------|------------------","lastModifiedDate":"2022-10-30"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"**Tool Box** | Allows you to exit idENTify, change the theme of the UI or view help","lastModifiedDate":"2022-10-30"},{"lineNumber":45,"author":{"gitId":"NicholasTYD"},"content":"**Command Box** | Location to enter commands","lastModifiedDate":"2022-10-30"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"**Results Display** | Displays the result after a command is entered","lastModifiedDate":"2022-10-31"},{"lineNumber":47,"author":{"gitId":"NicholasTYD"},"content":"**Patient List** | Displays patients","lastModifiedDate":"2022-10-31"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"**Appointment List** | Displays appointments","lastModifiedDate":"2022-10-31"},{"lineNumber":49,"author":{"gitId":"NicholasTYD"},"content":"**Patient Card** | Displays detailed information about a patient","lastModifiedDate":"2022-10-31"},{"lineNumber":50,"author":{"gitId":"NicholasTYD"},"content":"**Appointment Card** | Displays detailed information about an appointment","lastModifiedDate":"2022-10-31"},{"lineNumber":51,"author":{"gitId":"NicholasTYD"},"content":"**Save Location** | Displays the location where your idENTify data is stored","lastModifiedDate":"2022-10-31"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":54,"author":{"gitId":"NicholasTYD"},"content":"### Patient Card","lastModifiedDate":"2022-10-31"},{"lineNumber":55,"author":{"gitId":"NicholasTYD"},"content":"![PatientCardDetail](images/PatientCard.png)","lastModifiedDate":"2022-10-31"},{"lineNumber":56,"author":{"gitId":"NicholasTYD"},"content":"* Upcoming appointments shows the total amount of unmarked appointments of the given patient.","lastModifiedDate":"2022-10-31"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":58,"author":{"gitId":"NicholasTYD"},"content":"### Appointment Card","lastModifiedDate":"2022-10-31"},{"lineNumber":59,"author":{"gitId":"NicholasTYD"},"content":"![AppointmentCardDetail](images/AppointmentCard.png)","lastModifiedDate":"2022-10-31"},{"lineNumber":60,"author":{"gitId":"NicholasTYD"},"content":"* The status of an appointment is `[]` when uncompleted, and `[X]` when completed.","lastModifiedDate":"2022-10-31"},{"lineNumber":61,"author":{"gitId":"NicholasTYD"},"content":"* More information about recurrence duration can be found below.","lastModifiedDate":"2022-11-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":63,"author":{"gitId":"WingKei67"},"content":"## **Features**","lastModifiedDate":"2022-11-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"pwjj2000"},"content":"  e.g. `n/NAME [t/TAG]` can be used as `n/John Doe t/nose` or as `n/John Doe`.","lastModifiedDate":"2022-10-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"pwjj2000"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/ear`, `t/nose t/throat` etc.","lastModifiedDate":"2022-10-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"pwjj2000"},"content":"* If a parameter is expected only once in the command, but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2022-10-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken.","lastModifiedDate":"2021-02-04"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":84,"author":{"gitId":"NicholasTYD"},"content":"* Extraneous parameters for commands that do not take in parameters (e.g. `help`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2022-11-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-02-03"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":87,"author":{"gitId":"NicholasTYD"},"content":"* Some commands require the use of a descriptor word (`patients`, `appts`, `all`) to work. ","lastModifiedDate":"2022-11-06"},{"lineNumber":88,"author":{"gitId":"NicholasTYD"},"content":"These descriptor words will be ignored for commands that do not use them (e.g. `add`, `mark`). \u003cbr\u003e","lastModifiedDate":"2022-11-06"},{"lineNumber":89,"author":{"gitId":"NicholasTYD"},"content":"  e.g. if the command specifies `mark appts 1`, it will be interpreted as `mark 1`.","lastModifiedDate":"2022-11-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2022-11-01"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":93,"author":{"gitId":"pwjj2000"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2022-11-01"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":95,"author":{"gitId":"NicholasTYD"},"content":"**:information_source: Notes about common command parameters:** \u003cbr\u003e","lastModifiedDate":"2022-11-06"},{"lineNumber":96,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":97,"author":{"gitId":"pwjj2000"},"content":"* `NAME`","lastModifiedDate":"2022-11-01"},{"lineNumber":98,"author":{"gitId":"pwjj2000"},"content":"  * Can only accept alphanumeric characters i.e. \"a, b, c...\" \u0026 \"1, 2, 3...\"","lastModifiedDate":"2022-11-01"},{"lineNumber":99,"author":{"gitId":"NicholasTYD"},"content":"* `TAG`","lastModifiedDate":"2022-11-06"},{"lineNumber":100,"author":{"gitId":"NicholasTYD"},"content":"  * Patients and appointments can have up to 3 different tags.","lastModifiedDate":"2022-11-06"},{"lineNumber":101,"author":{"gitId":"pwjj2000"},"content":"  * **Must only be from the following:** `ear`, `nose`, `throat` (not case-sensitive). \u003cbr\u003e","lastModifiedDate":"2022-11-01"},{"lineNumber":102,"author":{"gitId":"pwjj2000"},"content":"    e.g. `t/sick` will cause an error message.","lastModifiedDate":"2022-10-30"},{"lineNumber":103,"author":{"gitId":"pwjj2000"},"content":"* `PHONE_NUMBER`","lastModifiedDate":"2022-11-01"},{"lineNumber":104,"author":{"gitId":"JovonLim"},"content":"  * **Must only contain integers**, and it should be at least 3 digits long.","lastModifiedDate":"2022-11-07"},{"lineNumber":105,"author":{"gitId":"pwjj2000"},"content":"* `EMAIL`","lastModifiedDate":"2022-11-01"},{"lineNumber":106,"author":{"gitId":"pwjj2000"},"content":"  * Format: `local-part@domain-name`","lastModifiedDate":"2022-11-01"},{"lineNumber":107,"author":{"gitId":"pwjj2000"},"content":"  * Follows below constraints:","lastModifiedDate":"2022-11-01"},{"lineNumber":108,"author":{"gitId":"pwjj2000"},"content":"  * `local-part` must:","lastModifiedDate":"2022-11-01"},{"lineNumber":109,"author":{"gitId":"JovonLim"},"content":"    * Contain alphanumeric characters or these special characters: `+`, `_`, `.`, `-`.","lastModifiedDate":"2022-11-07"},{"lineNumber":110,"author":{"gitId":"pwjj2000"},"content":"    * Not start or end with any special characters.","lastModifiedDate":"2022-11-01"},{"lineNumber":111,"author":{"gitId":"pwjj2000"},"content":"  * `domain-name` must:","lastModifiedDate":"2022-11-01"},{"lineNumber":112,"author":{"gitId":"pwjj2000"},"content":"    * Be at least 2 characters long.","lastModifiedDate":"2022-11-01"},{"lineNumber":113,"author":{"gitId":"pwjj2000"},"content":"    * Begin and end with alphanumeric characters.","lastModifiedDate":"2022-11-01"},{"lineNumber":114,"author":{"gitId":"JovonLim"},"content":"    * Have both parts consist of alphanumeric characters, separated only by hyphens (`-`), if any. \u003cbr\u003e","lastModifiedDate":"2022-11-07"},{"lineNumber":115,"author":{"gitId":"JovonLim"},"content":"      e.g. `John` will cause an error message: Missing `@` and `domain-name`.","lastModifiedDate":"2022-11-07"},{"lineNumber":116,"author":{"gitId":"JovonLim"},"content":"* `REASON`","lastModifiedDate":"2022-11-07"},{"lineNumber":117,"author":{"gitId":"JovonLim"},"content":"  * **Must not be empty**.","lastModifiedDate":"2022-11-07"},{"lineNumber":118,"author":{"gitId":"JovonLim"},"content":"* `DATE` ","lastModifiedDate":"2022-11-07"},{"lineNumber":119,"author":{"gitId":"JovonLim"},"content":"  * **Must input** in a YYYY-MM-DD HH:MM format or HH:MM YYYY-MM-DD format \u003cbr\u003e","lastModifiedDate":"2022-11-07"},{"lineNumber":120,"author":{"gitId":"JovonLim"},"content":"    e.g. `2022-12-10 14:00` or `14:00 2022-12-10`.","lastModifiedDate":"2022-11-07"},{"lineNumber":121,"author":{"gitId":"JovonLim"},"content":"* `TIME_PERIOD`","lastModifiedDate":"2022-11-07"},{"lineNumber":122,"author":{"gitId":"JovonLim"},"content":"  * **Must input** at least a Y M or D value to be recurring. Values **must be inserted in the order** Y -\u003e M -\u003e D.","lastModifiedDate":"2022-11-07"},{"lineNumber":123,"author":{"gitId":"JovonLim"},"content":"  * **Must be in the range of** 0-10Y, 0-12M or 0-31D to be considered as valid. \u003cbr\u003e","lastModifiedDate":"2022-11-07"},{"lineNumber":124,"author":{"gitId":"JovonLim"},"content":"    e.g. `1Y3D`, `2M`.","lastModifiedDate":"2022-11-07"},{"lineNumber":125,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":128,"author":{"gitId":"pwjj2000"},"content":"### Important Commands","lastModifiedDate":"2022-10-26"},{"lineNumber":129,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":130,"author":{"gitId":"pwjj2000"},"content":"#### Viewing help : `help`","lastModifiedDate":"2022-10-26"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"pwjj2000"},"content":"Shows a message explaining how to access the help page.","lastModifiedDate":"2022-10-25"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"Format: `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"pwjj2000"},"content":"### Add/Remove entries","lastModifiedDate":"2022-10-26"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"pwjj2000"},"content":"#### Adding a patient: `add`","lastModifiedDate":"2022-10-26"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"NicholasTYD"},"content":"Adds a patient into idENTify.","lastModifiedDate":"2022-09-20"},{"lineNumber":143,"author":{"gitId":"WingKei67"},"content":"* We allow duplicate names for patients, but distinct patients with the same","lastModifiedDate":"2022-10-30"},{"lineNumber":144,"author":{"gitId":"WingKei67"},"content":"  names must have different phone numbers in order to identify them. So you cannot add a patient who has both the","lastModifiedDate":"2022-10-30"},{"lineNumber":145,"author":{"gitId":"WingKei67"},"content":"  same name and phone number as some existing patient.","lastModifiedDate":"2022-10-30"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"guanzhou03"},"content":"Format: `add n/NAME p/PHONE_NUMBER [a/ADDRESS] [e/EMAIL] [t/TAG]…​`","lastModifiedDate":"2022-11-07"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"pwjj2000"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2022-11-01"},{"lineNumber":150,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":151,"author":{"gitId":"NicholasTYD"},"content":"**:bulb: Tip:** A patient can have up to 3 different tags.","lastModifiedDate":"2022-11-06"},{"lineNumber":152,"author":{"gitId":"-"},"content":"  ","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2022-11-06"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":155,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"WingKei67"},"content":"* `add n/John Doe p/98765432 a/John street, block 123, #01-01`","lastModifiedDate":"2022-09-20"},{"lineNumber":157,"author":{"gitId":"WingKei67"},"content":"* `add n/Betsy Crowe p/88888888 a/Newgate Prison t/ear`","lastModifiedDate":"2022-10-25"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"pwjj2000"},"content":"#### Deleting a patient : `delete`","lastModifiedDate":"2022-10-26"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"pwjj2000"},"content":"Deletes a patient or a range of patients from idENTify.","lastModifiedDate":"2022-10-26"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"pwjj2000"},"content":"Format: `delete INDEX [END_INDEX]`","lastModifiedDate":"2022-10-26"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"pwjj2000"},"content":"* Deletes the patient at the specified `INDEX`.","lastModifiedDate":"2022-10-26"},{"lineNumber":166,"author":{"gitId":"pwjj2000"},"content":"* The index refers to the index number shown in the displayed patient list.","lastModifiedDate":"2022-10-26"},{"lineNumber":167,"author":{"gitId":"pwjj2000"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2022-10-26"},{"lineNumber":168,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":169,"author":{"gitId":"pwjj2000"},"content":"Examples:","lastModifiedDate":"2022-10-26"},{"lineNumber":170,"author":{"gitId":"pwjj2000"},"content":"* `list patients` followed by `delete 2` deletes the 2nd patient in idENTify.","lastModifiedDate":"2022-10-26"},{"lineNumber":171,"author":{"gitId":"guanzhou03"},"content":"* `delete 1 3` deletes the first 3 patients (index 1 to 3 inclusive) in idENTify.","lastModifiedDate":"2022-11-07"},{"lineNumber":172,"author":{"gitId":"NicholasTYD"},"content":"* `find n/Betsy` followed by `delete 1` deletes the 1st patient in the results of the `find` command.","lastModifiedDate":"2022-11-06"},{"lineNumber":173,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":174,"author":{"gitId":"pwjj2000"},"content":"#### Book an appointment:  `book`","lastModifiedDate":"2022-10-26"},{"lineNumber":175,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":176,"author":{"gitId":"pwjj2000"},"content":"Books an appointment for the specified patient at `INDEX` in the patient list.","lastModifiedDate":"2022-11-01"},{"lineNumber":177,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-27"},{"lineNumber":178,"author":{"gitId":"JovonLim"},"content":"Inputting a time period allows the appointment to be recurring: Automatically books a new appointment in the future","lastModifiedDate":"2022-10-27"},{"lineNumber":179,"author":{"gitId":"JovonLim"},"content":"as given by the time period when the current appointment is marked as completed.","lastModifiedDate":"2022-10-27"},{"lineNumber":180,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":181,"author":{"gitId":"pwjj2000"},"content":"Appointments added are sorted according to their date.","lastModifiedDate":"2022-10-26"},{"lineNumber":182,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":183,"author":{"gitId":"pwjj2000"},"content":"Format: `book INDEX r/REASON d/DATE [pe/TIME_PERIOD] [t/TAG]…​`","lastModifiedDate":"2022-10-26"},{"lineNumber":184,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":185,"author":{"gitId":"JovonLim"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2022-11-07"},{"lineNumber":186,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-11-07"},{"lineNumber":187,"author":{"gitId":"JovonLim"},"content":"**:bulb: Tip:** An appointment can have up to 3 different tags.","lastModifiedDate":"2022-11-07"},{"lineNumber":188,"author":{"gitId":"JovonLim"},"content":"  ","lastModifiedDate":"2022-11-07"},{"lineNumber":189,"author":{"gitId":"JovonLim"},"content":"\u003c/div\u003e","lastModifiedDate":"2022-11-07"},{"lineNumber":190,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-11-07"},{"lineNumber":191,"author":{"gitId":"pwjj2000"},"content":"* The index refers to the index number shown in the displayed patient list.","lastModifiedDate":"2022-10-26"},{"lineNumber":192,"author":{"gitId":"JovonLim"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2022-10-27"},{"lineNumber":193,"author":{"gitId":"JovonLim"},"content":"* Default time period is set to 0Y0M0D if no time period is inputted.","lastModifiedDate":"2022-10-27"},{"lineNumber":194,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":195,"author":{"gitId":"WingKei67"},"content":"Examples:","lastModifiedDate":"2022-10-25"},{"lineNumber":196,"author":{"gitId":"JovonLim"},"content":"* `book 2 r/Ear Infection d/2022-12-31 18:00` Books an appointment that is non-recurring as no time period is inputted.","lastModifiedDate":"2022-10-27"},{"lineNumber":197,"author":{"gitId":"JovonLim"},"content":"* `book 2 r/Ear Infection d/16:30 2022-12-31 pe/1M2D` Books an appointment that is recurring every 1 month 2days.","lastModifiedDate":"2022-10-27"},{"lineNumber":198,"author":{"gitId":"JovonLim"},"content":"* `book 2 r/Ear Infection d/2022-12-31 13:00 pe/1Y` Books an appointment that is recurring every year.","lastModifiedDate":"2022-10-27"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":200,"author":{"gitId":"pwjj2000"},"content":"#### Cancel an appointment: `cancel`","lastModifiedDate":"2022-10-26"},{"lineNumber":201,"author":{"gitId":"guanzhou03"},"content":"Cancels (removes) a specified appointment in the appointment list. \u003cbr\u003e","lastModifiedDate":"2022-11-05"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-27"},{"lineNumber":203,"author":{"gitId":"pwjj2000"},"content":"Format: ```cancel APPOINTMENT_INDEX```","lastModifiedDate":"2022-10-26"},{"lineNumber":204,"author":{"gitId":"pwjj2000"},"content":"- Deletes the appointment with `APPOINTMENT_INDEX` in the appointment list.","lastModifiedDate":"2022-10-26"},{"lineNumber":205,"author":{"gitId":"pwjj2000"},"content":"- The index refers to the index number shown in the displayed appointment list.","lastModifiedDate":"2022-10-26"},{"lineNumber":206,"author":{"gitId":"JovonLim"},"content":"- The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2022-10-27"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":208,"author":{"gitId":"guanzhou03"},"content":"Example:","lastModifiedDate":"2022-11-05"},{"lineNumber":209,"author":{"gitId":"pwjj2000"},"content":"* `cancel 1`","lastModifiedDate":"2022-10-26"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":211,"author":{"gitId":"pwjj2000"},"content":"#### Clearing all entries : `clear`","lastModifiedDate":"2022-10-26"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":213,"author":{"gitId":"guanzhou03"},"content":"Clears all entries (patients and appointments) from idENTify.","lastModifiedDate":"2022-11-05"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":215,"author":{"gitId":"pwjj2000"},"content":"Format: `clear`","lastModifiedDate":"2022-10-26"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"pwjj2000"},"content":"### Modify existing entries","lastModifiedDate":"2022-10-26"},{"lineNumber":218,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":219,"author":{"gitId":"pwjj2000"},"content":"#### Editing a patient : `edit patients`","lastModifiedDate":"2022-10-26"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"JovonLim"},"content":"Edits an existing patient in idENTify.","lastModifiedDate":"2022-10-08"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"JovonLim"},"content":"Format: `edit patients INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`","lastModifiedDate":"2022-10-08"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"JovonLim"},"content":"* Edits the patient at the specified `INDEX`. The index refers to the index number shown in the displayed patient list. The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2022-10-08"},{"lineNumber":226,"author":{"gitId":"NicholasTYD"},"content":"* At least one of the optional parameters must be provided.","lastModifiedDate":"2022-11-03"},{"lineNumber":227,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"pwjj2000"},"content":"* When editing tags, the existing tags of the patient will be removed i.e. adding of tags is not cumulative.","lastModifiedDate":"2022-10-25"},{"lineNumber":229,"author":{"gitId":"JovonLim"},"content":"* You can remove all the patient’s tags by typing `t/` without","lastModifiedDate":"2022-10-08"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    specifying any tags after it.","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"WingKei67"},"content":"* We allow duplicate names for patients, but distinct patients with the same","lastModifiedDate":"2022-10-30"},{"lineNumber":232,"author":{"gitId":"WingKei67"},"content":"    names must have different phone numbers in order to identify them. So you cannot edit a patient to have both the","lastModifiedDate":"2022-10-30"},{"lineNumber":233,"author":{"gitId":"WingKei67"},"content":"  same name and phone number as some existing patient.","lastModifiedDate":"2022-10-30"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"JovonLim"},"content":"*  `edit patients 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st patient to be `91234567` and `johndoe@example.com` respectively.","lastModifiedDate":"2022-10-08"},{"lineNumber":237,"author":{"gitId":"JovonLim"},"content":"*  `edit patients 2 n/Betsy Crower t/` Edits the name of the 2nd patient to be `Betsy Crower` and clears all existing tags.","lastModifiedDate":"2022-10-08"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":239,"author":{"gitId":"pwjj2000"},"content":"#### Editing an appointment: `edit appts`","lastModifiedDate":"2022-10-26"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":241,"author":{"gitId":"JovonLim"},"content":"Edits an existing patient\u0027s appointment in idENTify.","lastModifiedDate":"2022-10-08"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":243,"author":{"gitId":"JovonLim"},"content":"Format: `edit appts INDEX [r/REASON] [d/DATE] [pe/TIME_PERIOD] [t/TAG]…​`","lastModifiedDate":"2022-10-25"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":245,"author":{"gitId":"JovonLim"},"content":"* Edits the appointment at the specified `INDEX`. The index refers to the index number shown in the displayed appointment list. The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2022-10-15"},{"lineNumber":246,"author":{"gitId":"NicholasTYD"},"content":"* At least one of the optional parameters must be provided.","lastModifiedDate":"2022-11-03"},{"lineNumber":247,"author":{"gitId":"JovonLim"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2022-10-08"},{"lineNumber":248,"author":{"gitId":"pwjj2000"},"content":"* When editing tags, the existing tags of the appointment will be removed i.e. adding of tags is not cumulative.","lastModifiedDate":"2022-10-25"},{"lineNumber":249,"author":{"gitId":"JovonLim"},"content":"* You can remove all the appointment’s tags by typing `t/` without specifying any tags after it. ","lastModifiedDate":"2022-11-06"},{"lineNumber":250,"author":{"gitId":"JovonLim"},"content":"* You can set the appointment to be non-recurring by typing `pe/` without specifying any values after it. ","lastModifiedDate":"2022-11-06"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":252,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2022-10-08"},{"lineNumber":253,"author":{"gitId":"JovonLim"},"content":"* `edit appts 1 r/Cough d/2022-12-10 16:30` Edits the reason and date of the first appointment to be `Cough` and `2022-12-10 16:30`","lastModifiedDate":"2022-10-15"},{"lineNumber":254,"author":{"gitId":"JovonLim"},"content":"respectively. Existing time period and tags will not be edited.","lastModifiedDate":"2022-10-27"},{"lineNumber":255,"author":{"gitId":"JovonLim"},"content":"* `edit appts 1 pe/1Y2M` Edits the time period of the first appointment to be recurring every 1 year 2 months. Existing reason, date and tags will not be edited.","lastModifiedDate":"2022-10-27"},{"lineNumber":256,"author":{"gitId":"JovonLim"},"content":"* `edit appts 2 pe/ t/` Edits the second appointment to be non-recurring and clears all existing tags. Existing reason and date will not be edited.","lastModifiedDate":"2022-11-06"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"pwjj2000"},"content":"#### Mark an appointment as completed:  `mark`","lastModifiedDate":"2022-10-26"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":260,"author":{"gitId":"guanzhou03"},"content":"Marks a specified appointment in the appointment list as completed.","lastModifiedDate":"2022-11-05"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":262,"author":{"gitId":"pwjj2000"},"content":"If the specified appointment was set to be recurring, automatically books a new appointment in the future as given by the recurring time period of the appointment.","lastModifiedDate":"2022-10-26"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":264,"author":{"gitId":"pwjj2000"},"content":"Format: `mark APPOINTMENT_INDEX`","lastModifiedDate":"2022-10-26"},{"lineNumber":265,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":266,"author":{"gitId":"pwjj2000"},"content":"* `APPOINTMENT_INDEX` refers to the index number of the appointment to be marked, as shown in the appointment list.","lastModifiedDate":"2022-10-26"},{"lineNumber":267,"author":{"gitId":"pwjj2000"},"content":"* `APPOINTMENT_INDEX` **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2022-10-26"},{"lineNumber":268,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":269,"author":{"gitId":"guanzhou03"},"content":"Example:","lastModifiedDate":"2022-11-05"},{"lineNumber":270,"author":{"gitId":"pwjj2000"},"content":"* `mark 3`","lastModifiedDate":"2022-10-26"},{"lineNumber":271,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":272,"author":{"gitId":"pwjj2000"},"content":"#### Unmark an appointment as incomplete:  `unmark`","lastModifiedDate":"2022-10-26"},{"lineNumber":273,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":274,"author":{"gitId":"pwjj2000"},"content":"Unmarks a specified appointment in the appointment list as incomplete.","lastModifiedDate":"2022-10-26"},{"lineNumber":275,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":276,"author":{"gitId":"pwjj2000"},"content":"Format: `unmark APPOINTMENT_INDEX`","lastModifiedDate":"2022-10-26"},{"lineNumber":277,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":278,"author":{"gitId":"pwjj2000"},"content":"* `APPOINTMENT_INDEX` refers to the index number of the appointment to be unmarked, as shown in the appointment list.","lastModifiedDate":"2022-10-26"},{"lineNumber":279,"author":{"gitId":"pwjj2000"},"content":"* `APPOINTMENT_INDEX` **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2022-10-26"},{"lineNumber":280,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":281,"author":{"gitId":"guanzhou03"},"content":"Example:","lastModifiedDate":"2022-11-05"},{"lineNumber":282,"author":{"gitId":"pwjj2000"},"content":"* `unmark 1`","lastModifiedDate":"2022-10-26"},{"lineNumber":283,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":284,"author":{"gitId":"pwjj2000"},"content":"### Organisation","lastModifiedDate":"2022-10-26"},{"lineNumber":285,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":286,"author":{"gitId":"NicholasTYD"},"content":"By default,","lastModifiedDate":"2022-11-06"},{"lineNumber":287,"author":{"gitId":"NicholasTYD"},"content":"* Patients will be sorted by their names first; if there are people with the same name, they will be sorted by their","lastModifiedDate":"2022-11-06"},{"lineNumber":288,"author":{"gitId":"NicholasTYD"},"content":"  phone numbers.","lastModifiedDate":"2022-11-06"},{"lineNumber":289,"author":{"gitId":"NicholasTYD"},"content":"* Appointments will be sorted by their dates first; if there are multiple appointments","lastModifiedDate":"2022-11-06"},{"lineNumber":290,"author":{"gitId":"NicholasTYD"},"content":"  with the same date, they will be sorted by their attached patients\u0027 information.","lastModifiedDate":"2022-11-06"},{"lineNumber":291,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":292,"author":{"gitId":"NicholasTYD"},"content":"However, with the commands in this section, you will be able to modify how entries in idENTify are presented.","lastModifiedDate":"2022-11-06"},{"lineNumber":293,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-27"},{"lineNumber":294,"author":{"gitId":"NicholasTYD"},"content":"#### Listing all patients/appointments : `list`","lastModifiedDate":"2022-11-06"},{"lineNumber":295,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-27"},{"lineNumber":296,"author":{"gitId":"NicholasTYD"},"content":"Shows a list of all patients or appointments, depending on the parameter given. ","lastModifiedDate":"2022-11-06"},{"lineNumber":297,"author":{"gitId":"NicholasTYD"},"content":"Entries previously hidden by the `hide` command will be unhidden as well.","lastModifiedDate":"2022-11-06"},{"lineNumber":298,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":299,"author":{"gitId":"pwjj2000"},"content":"Format:","lastModifiedDate":"2022-10-26"},{"lineNumber":300,"author":{"gitId":"pwjj2000"},"content":"* `list patients` - Refreshes only the patient list to show all patients, leaving the appointment list unchanged.","lastModifiedDate":"2022-10-26"},{"lineNumber":301,"author":{"gitId":"pwjj2000"},"content":"* `list appts` - Refreshes only the appointment list to show all appointments, leaving the patient list unchanged.","lastModifiedDate":"2022-10-26"},{"lineNumber":302,"author":{"gitId":"pwjj2000"},"content":"* `list all` - Refreshes both the patient and appointment lists to show all patients and appointments.","lastModifiedDate":"2022-10-26"},{"lineNumber":303,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":304,"author":{"gitId":"pwjj2000"},"content":"#### Grouping patients : `group patients`","lastModifiedDate":"2022-11-01"},{"lineNumber":305,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":306,"author":{"gitId":"pwjj2000"},"content":"Groups up patients that share the same tag(s).","lastModifiedDate":"2022-11-01"},{"lineNumber":307,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":308,"author":{"gitId":"pwjj2000"},"content":"For example: \u003cbr\u003e","lastModifiedDate":"2022-11-01"},{"lineNumber":309,"author":{"gitId":"pwjj2000"},"content":"* Patients with no tags will be in the same group.","lastModifiedDate":"2022-11-01"},{"lineNumber":310,"author":{"gitId":"pwjj2000"},"content":"* Patients with only \u0027ear\u0027 tag will be in the same group.","lastModifiedDate":"2022-11-01"},{"lineNumber":311,"author":{"gitId":"pwjj2000"},"content":"* Patients with both \u0027ear\u0027 and \u0027nose\u0027 tags will be in the same group.","lastModifiedDate":"2022-11-01"},{"lineNumber":312,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":313,"author":{"gitId":"WingKei67"},"content":"Patients in the same tag group will be sorted automatically by their names in ascending order.","lastModifiedDate":"2022-10-30"},{"lineNumber":314,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":315,"author":{"gitId":"pwjj2000"},"content":"Format:","lastModifiedDate":"2022-10-26"},{"lineNumber":316,"author":{"gitId":"pwjj2000"},"content":"* `group patients`","lastModifiedDate":"2022-10-26"},{"lineNumber":317,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":318,"author":{"gitId":"pwjj2000"},"content":"#### Grouping appointments : `group appts`","lastModifiedDate":"2022-11-01"},{"lineNumber":319,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":320,"author":{"gitId":"pwjj2000"},"content":"Groups up appointments that share a similar criteria.","lastModifiedDate":"2022-11-01"},{"lineNumber":321,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":322,"author":{"gitId":"pwjj2000"},"content":"For example, after grouping appointments with same tags: \u003cbr\u003e","lastModifiedDate":"2022-11-01"},{"lineNumber":323,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":324,"author":{"gitId":"pwjj2000"},"content":"* Appointments with no tags will be in the same group.","lastModifiedDate":"2022-11-01"},{"lineNumber":325,"author":{"gitId":"pwjj2000"},"content":"* Appointments with only \u0027ear\u0027 tag will be in the same group.","lastModifiedDate":"2022-11-01"},{"lineNumber":326,"author":{"gitId":"pwjj2000"},"content":"* Appointments with both \u0027ear\u0027 and \u0027nose\u0027 tags will be in the same group.","lastModifiedDate":"2022-11-01"},{"lineNumber":327,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":328,"author":{"gitId":"WingKei67"},"content":"Appointments in the same group will be sorted automatically by their datetime in ascending order.","lastModifiedDate":"2022-10-30"},{"lineNumber":329,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":330,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":331,"author":{"gitId":"pwjj2000"},"content":"Format:","lastModifiedDate":"2022-10-26"},{"lineNumber":332,"author":{"gitId":"pwjj2000"},"content":"* `group appts k/KEY`","lastModifiedDate":"2022-10-26"},{"lineNumber":333,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":334,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2022-10-26"},{"lineNumber":335,"author":{"gitId":"pwjj2000"},"content":"* `group appts k/tag` (`group appts k/t`)","lastModifiedDate":"2022-10-26"},{"lineNumber":336,"author":{"gitId":"pwjj2000"},"content":"* `group appts k/patient` (`group appts k/p`)","lastModifiedDate":"2022-10-26"},{"lineNumber":337,"author":{"gitId":"pwjj2000"},"content":"* `group appts k/mark` (`group appts k/m`)","lastModifiedDate":"2022-10-26"},{"lineNumber":338,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":339,"author":{"gitId":"pwjj2000"},"content":"#### Ungrouping patients/ appointments : `ungroup`","lastModifiedDate":"2022-11-01"},{"lineNumber":340,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":341,"author":{"gitId":"pwjj2000"},"content":"Ungroups the list of patients or appointments. \\","lastModifiedDate":"2022-11-01"},{"lineNumber":342,"author":{"gitId":"WingKei67"},"content":"Patient entries will return to being sorted by name in alphabetical order. \\","lastModifiedDate":"2022-10-30"},{"lineNumber":343,"author":{"gitId":"WingKei67"},"content":"Appointment entries will return to being sorted by datetime.","lastModifiedDate":"2022-10-30"},{"lineNumber":344,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":345,"author":{"gitId":"pwjj2000"},"content":"Format:","lastModifiedDate":"2022-10-26"},{"lineNumber":346,"author":{"gitId":"pwjj2000"},"content":"* `ungroup patients`","lastModifiedDate":"2022-10-26"},{"lineNumber":347,"author":{"gitId":"pwjj2000"},"content":"* `ungroup appts`","lastModifiedDate":"2022-10-26"},{"lineNumber":348,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":349,"author":{"gitId":"pwjj2000"},"content":"#### Hiding patients by name or tag: `hide patients`","lastModifiedDate":"2022-10-26"},{"lineNumber":350,"author":{"gitId":"guanzhou03"},"content":"Hiding a patient will also hide their appointments, thus the resulting appointment list contains only appointments of remaining patients after `hide patients`.","lastModifiedDate":"2022-11-05"},{"lineNumber":351,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":352,"author":{"gitId":"pwjj2000"},"content":"**By name:**","lastModifiedDate":"2022-10-30"},{"lineNumber":353,"author":{"gitId":"guanzhou03"},"content":"Filters out (hides) patients whose name contain any of the given keywords.","lastModifiedDate":"2022-11-05"},{"lineNumber":354,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":355,"author":{"gitId":"guanzhou03"},"content":"Format: `hide patients n/NAME [n/MORE_NAMES]...`","lastModifiedDate":"2022-10-26"},{"lineNumber":356,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":357,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":358,"author":{"gitId":"guanzhou03"},"content":"* `hide patients n/John` hides `john` and `John Doe`","lastModifiedDate":"2022-10-25"},{"lineNumber":359,"author":{"gitId":"guanzhou03"},"content":"* `hide patients n/alex n/david` hides `Alex Yeoh`, `David Li`\u003cbr\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":360,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":361,"author":{"gitId":"pwjj2000"},"content":"**By tag:**","lastModifiedDate":"2022-10-30"},{"lineNumber":362,"author":{"gitId":"guanzhou03"},"content":"Hides patients that contain any of the given tags.","lastModifiedDate":"2022-11-05"},{"lineNumber":363,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":364,"author":{"gitId":"guanzhou03"},"content":"Format: `hide patients t/TAG [t/MORE_TAGS]...`","lastModifiedDate":"2022-10-26"},{"lineNumber":365,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":366,"author":{"gitId":"guanzhou03"},"content":"* The search is **NOT** case-sensitive. e.g. `t/EAR` has the same effect as `t/ear`","lastModifiedDate":"2022-11-07"},{"lineNumber":367,"author":{"gitId":"guanzhou03"},"content":"* All tags of a patient are searched.","lastModifiedDate":"2022-10-12"},{"lineNumber":368,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":369,"author":{"gitId":"guanzhou03"},"content":"Examples:","lastModifiedDate":"2022-10-12"},{"lineNumber":370,"author":{"gitId":"NicholasTYD"},"content":"* `hide patients t/ear t/nose` hides all patients with an ear OR nose tag.","lastModifiedDate":"2022-10-30"},{"lineNumber":371,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":372,"author":{"gitId":"pwjj2000"},"content":"#### Unhiding patients by name or tag: `unhide patients`","lastModifiedDate":"2022-10-26"},{"lineNumber":373,"author":{"gitId":"guanzhou03"},"content":"Unhiding a patient will also unhide their appointments, thus the resulting appointment list will also contain appointments of unhidden patients after `unhide patients`.","lastModifiedDate":"2022-11-05"},{"lineNumber":374,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":375,"author":{"gitId":"pwjj2000"},"content":"**By name:**","lastModifiedDate":"2022-10-30"},{"lineNumber":376,"author":{"gitId":"guanzhou03"},"content":"Shows (unhides) patients that were previously hidden whose name contain any of the given keywords.","lastModifiedDate":"2022-11-05"},{"lineNumber":377,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":378,"author":{"gitId":"guanzhou03"},"content":"Format: `unhide patients n/NAME [n/MORE_NAMES]...`","lastModifiedDate":"2022-10-26"},{"lineNumber":379,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":380,"author":{"gitId":"guanzhou03"},"content":"Examples:","lastModifiedDate":"2022-10-25"},{"lineNumber":381,"author":{"gitId":"guanzhou03"},"content":"* `unhide patients n/John` unhides `john` and `John Doe`","lastModifiedDate":"2022-10-25"},{"lineNumber":382,"author":{"gitId":"guanzhou03"},"content":"* `unhide patients n/alex n/david` unhides `Alex Yeoh`, `David Li`\u003cbr\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":383,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":384,"author":{"gitId":"pwjj2000"},"content":"**By tag:**","lastModifiedDate":"2022-10-30"},{"lineNumber":385,"author":{"gitId":"guanzhou03"},"content":"Unhides patients that were previously hidden that contain any of the given tags.","lastModifiedDate":"2022-11-05"},{"lineNumber":386,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":387,"author":{"gitId":"guanzhou03"},"content":"Format: `unhide patients t/TAG [t/MORE_TAGS]...`","lastModifiedDate":"2022-10-26"},{"lineNumber":388,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":389,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":390,"author":{"gitId":"guanzhou03"},"content":"* The search is **NOT** case-sensitive. e.g `t/EAR` has the same effect as `t/ear`","lastModifiedDate":"2022-11-05"},{"lineNumber":391,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":392,"author":{"gitId":"guanzhou03"},"content":"* All tags of a patient are searched.","lastModifiedDate":"2022-10-12"},{"lineNumber":393,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":394,"author":{"gitId":"guanzhou03"},"content":"Examples:","lastModifiedDate":"2022-10-12"},{"lineNumber":395,"author":{"gitId":"guanzhou03"},"content":"* `unhide patients t/nose t/ear` unhides all patients with a nose OR ear tag.","lastModifiedDate":"2022-10-26"},{"lineNumber":396,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":397,"author":{"gitId":"pwjj2000"},"content":"#### Hiding appointments by reason, tag, or marked status: `hide appts`","lastModifiedDate":"2022-10-26"},{"lineNumber":398,"author":{"gitId":"guanzhou03"},"content":"Hides appointments by the condition specified. \u003cbr\u003e","lastModifiedDate":"2022-10-31"},{"lineNumber":399,"author":{"gitId":"guanzhou03"},"content":"The search for reason, tag, and status is **NOT** case-sensitive. e.g `t/EAR` has same effect as `t/ear` \u003cbr\u003e","lastModifiedDate":"2022-11-05"},{"lineNumber":400,"author":{"gitId":"guanzhou03"},"content":"Hiding appointments will not change the patient list.","lastModifiedDate":"2022-11-05"},{"lineNumber":401,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":402,"author":{"gitId":"pwjj2000"},"content":"**By reason:**","lastModifiedDate":"2022-10-30"},{"lineNumber":403,"author":{"gitId":"guanzhou03"},"content":"Hides appointments that contain at least 1 of the given keywords in the reason of appointment.","lastModifiedDate":"2022-10-31"},{"lineNumber":404,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":405,"author":{"gitId":"guanzhou03"},"content":"Format: `hide appts r/REASON [r/MORE_REASONS]...`","lastModifiedDate":"2022-10-26"},{"lineNumber":406,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":407,"author":{"gitId":"guanzhou03"},"content":"Examples:","lastModifiedDate":"2022-10-25"},{"lineNumber":408,"author":{"gitId":"guanzhou03"},"content":"* `hide appts r/nose` hides all appointments with \"nose\" in the reason.","lastModifiedDate":"2022-10-25"},{"lineNumber":409,"author":{"gitId":"guanzhou03"},"content":"* `hide appts r/pain r/issue` hides all appointments with \"pain\" or \"issue\" in the reason.","lastModifiedDate":"2022-10-31"},{"lineNumber":410,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":411,"author":{"gitId":"pwjj2000"},"content":"**By tag:**","lastModifiedDate":"2022-10-30"},{"lineNumber":412,"author":{"gitId":"guanzhou03"},"content":"Hides appointments which contain any of the given tags.","lastModifiedDate":"2022-10-25"},{"lineNumber":413,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":414,"author":{"gitId":"guanzhou03"},"content":"Format: `hide appts t/TAG [t/MORE_TAGS]...`","lastModifiedDate":"2022-10-26"},{"lineNumber":415,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":416,"author":{"gitId":"guanzhou03"},"content":"* All tags of an appointment are searched.","lastModifiedDate":"2022-10-25"},{"lineNumber":417,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":418,"author":{"gitId":"guanzhou03"},"content":"Examples:","lastModifiedDate":"2022-10-25"},{"lineNumber":419,"author":{"gitId":"guanzhou03"},"content":"* `hide appts t/ear t/nose` hides all appointments with a ear OR nose tag.","lastModifiedDate":"2022-10-26"},{"lineNumber":420,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":421,"author":{"gitId":"pwjj2000"},"content":"**By marked/unmarked status:**","lastModifiedDate":"2022-10-30"},{"lineNumber":422,"author":{"gitId":"guanzhou03"},"content":"Hides appointments which are marked/unmarked.","lastModifiedDate":"2022-10-25"},{"lineNumber":423,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":424,"author":{"gitId":"guanzhou03"},"content":"Format: `hide appts s/STATUS` \u003cbr\u003e","lastModifiedDate":"2022-10-25"},{"lineNumber":425,"author":{"gitId":"guanzhou03"},"content":"Shortform: `marked` status can be shortened to `m`, `unmarked` can be shortened to `um`.","lastModifiedDate":"2022-10-25"},{"lineNumber":426,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":427,"author":{"gitId":"guanzhou03"},"content":"Examples:","lastModifiedDate":"2022-10-25"},{"lineNumber":428,"author":{"gitId":"guanzhou03"},"content":"* `hide appts s/marked` hides all marked appointments.","lastModifiedDate":"2022-11-05"},{"lineNumber":429,"author":{"gitId":"guanzhou03"},"content":"* `hide appts s/um` hides all unmarked appointments.","lastModifiedDate":"2022-11-05"},{"lineNumber":430,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":431,"author":{"gitId":"guanzhou03"},"content":"Visual example of hiding appointments by marked (completed) status:","lastModifiedDate":"2022-11-05"},{"lineNumber":432,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":433,"author":{"gitId":"guanzhou03"},"content":"Before hide: (Initially with marked appointments)","lastModifiedDate":"2022-11-01"},{"lineNumber":434,"author":{"gitId":"JovonLim"},"content":"![before_Hide](images/beforeHide.png)","lastModifiedDate":"2022-10-30"},{"lineNumber":435,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":436,"author":{"gitId":"guanzhou03"},"content":"After hide: (Appointments that are marked are now hidden)","lastModifiedDate":"2022-11-01"},{"lineNumber":437,"author":{"gitId":"JovonLim"},"content":"![after_Hide](images/afterHide.png)","lastModifiedDate":"2022-10-30"},{"lineNumber":438,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":439,"author":{"gitId":"pwjj2000"},"content":"#### Unhiding appointments by reason, tag or status: `unhide appts`","lastModifiedDate":"2022-10-26"},{"lineNumber":440,"author":{"gitId":"guanzhou03"},"content":"Unhiding appointments will not change the patient list.","lastModifiedDate":"2022-11-05"},{"lineNumber":441,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":442,"author":{"gitId":"pwjj2000"},"content":"**By reason:**","lastModifiedDate":"2022-10-30"},{"lineNumber":443,"author":{"gitId":"guanzhou03"},"content":"Unhides hidden appointments that contains `REASON` (OR `MORE_REASONS`).","lastModifiedDate":"2022-10-30"},{"lineNumber":444,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":445,"author":{"gitId":"pwjj2000"},"content":"Format: `unhide appts r/REASON [r/MORE_REASONS]...`","lastModifiedDate":"2022-10-27"},{"lineNumber":446,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":447,"author":{"gitId":"guanzhou03"},"content":"* The reasons are **NOT** case-sensitive. e.g. `r/PAIN` has the same effect as `r/pain`","lastModifiedDate":"2022-11-05"},{"lineNumber":448,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":449,"author":{"gitId":"guanzhou03"},"content":"Examples:","lastModifiedDate":"2022-10-25"},{"lineNumber":450,"author":{"gitId":"guanzhou03"},"content":"* `unhide appts r/pain` unhides all hidden appointments with \"pain\" as part of the reason.","lastModifiedDate":"2022-10-30"},{"lineNumber":451,"author":{"gitId":"guanzhou03"},"content":"* `unhide appts r/pain r/problem` unhides all hidden appointments with \"pain\" or \"problem\" as part of the reason.","lastModifiedDate":"2022-11-05"},{"lineNumber":452,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":453,"author":{"gitId":"pwjj2000"},"content":"**By tag:**","lastModifiedDate":"2022-10-30"},{"lineNumber":454,"author":{"gitId":"guanzhou03"},"content":"Unhides hidden appointments that contains `TAG` (OR `MORE_TAGS`).","lastModifiedDate":"2022-10-30"},{"lineNumber":455,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":456,"author":{"gitId":"guanzhou03"},"content":"Format: `unhide appts t/TAG [t/MORE_TAGS]...`","lastModifiedDate":"2022-10-26"},{"lineNumber":457,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":458,"author":{"gitId":"guanzhou03"},"content":"* The search is **NOT** case-sensitive. e.g `t/EAR` has the same effect as `t/ear`","lastModifiedDate":"2022-11-05"},{"lineNumber":459,"author":{"gitId":"guanzhou03"},"content":"* All tags of an appointment are searched.","lastModifiedDate":"2022-10-25"},{"lineNumber":460,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":461,"author":{"gitId":"guanzhou03"},"content":"Examples:","lastModifiedDate":"2022-10-25"},{"lineNumber":462,"author":{"gitId":"guanzhou03"},"content":"* `unhide appts t/nose t/ear` unhides all appointments with a nose OR ear tag.","lastModifiedDate":"2022-10-26"},{"lineNumber":463,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":464,"author":{"gitId":"pwjj2000"},"content":"**By marked/unmarked status:**","lastModifiedDate":"2022-10-30"},{"lineNumber":465,"author":{"gitId":"guanzhou03"},"content":"Unhides hidden appointments which are marked or unmarked.","lastModifiedDate":"2022-11-05"},{"lineNumber":466,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-11-05"},{"lineNumber":467,"author":{"gitId":"guanzhou03"},"content":"Format: `unhide appts s/STATUS` \u003cbr\u003e","lastModifiedDate":"2022-11-05"},{"lineNumber":468,"author":{"gitId":"guanzhou03"},"content":"Shortform: `marked` status can be shortened to `m`, `unmarked` can be shortened to `um`.","lastModifiedDate":"2022-11-05"},{"lineNumber":469,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":470,"author":{"gitId":"guanzhou03"},"content":"* The status is **NOT** case-sensitive. e.g. `MARKed` will work in the same way as `marked`.","lastModifiedDate":"2022-11-05"},{"lineNumber":471,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":472,"author":{"gitId":"guanzhou03"},"content":"Examples:","lastModifiedDate":"2022-10-25"},{"lineNumber":473,"author":{"gitId":"guanzhou03"},"content":"* `unhide appts s/marked` unhides all marked appointments.","lastModifiedDate":"2022-11-05"},{"lineNumber":474,"author":{"gitId":"guanzhou03"},"content":"* `unhide appts s/um` unhides all unmarked appointments.","lastModifiedDate":"2022-11-05"},{"lineNumber":475,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":476,"author":{"gitId":"NicholasTYD"},"content":"#### Find results that satisfy a certain criteria: `find`","lastModifiedDate":"2022-11-03"},{"lineNumber":477,"author":{"gitId":"NicholasTYD"},"content":"Finds patients and appointments that matches all the given parameters specified.","lastModifiedDate":"2022-11-03"},{"lineNumber":478,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":479,"author":{"gitId":"NicholasTYD"},"content":"Format: `find [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/PATIENT_TAG]…​ [r/REASON] [ds/DATE_START] [de/DATE_END] [ta/APPOINTMENT_TAG]…​`","lastModifiedDate":"2022-10-25"},{"lineNumber":480,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":481,"author":{"gitId":"NicholasTYD"},"content":"* At least 1 of the optional parameters must be provided.","lastModifiedDate":"2022-11-03"},{"lineNumber":482,"author":{"gitId":"pwjj2000"},"content":"* The search is **NOT** case-sensitive. e.g `n/hans` has same effect as `n/Hans`","lastModifiedDate":"2022-11-01"},{"lineNumber":483,"author":{"gitId":"NicholasTYD"},"content":"* All parameters, unless otherwise stated, support *partial match*.","lastModifiedDate":"2022-11-03"},{"lineNumber":484,"author":{"gitId":"NicholasTYD"},"content":"  * *Partial match*: searching `John Do` matches `John Doe`","lastModifiedDate":"2022-11-03"},{"lineNumber":485,"author":{"gitId":"NicholasTYD"},"content":"  * *Full match*: Only `John Doe` matches `John Doe`.","lastModifiedDate":"2022-11-03"},{"lineNumber":486,"author":{"gitId":"NicholasTYD"},"content":"* Only *relevant* patients and appointments that satisfies all parameters will be displayed.","lastModifiedDate":"2022-11-03"},{"lineNumber":487,"author":{"gitId":"NicholasTYD"},"content":"  * View the `find r/Checkup` example below for a visual explanation.","lastModifiedDate":"2022-11-03"},{"lineNumber":488,"author":{"gitId":"NicholasTYD"},"content":"* Additional details on each parameter are listed in the tables below.","lastModifiedDate":"2022-11-03"},{"lineNumber":489,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":490,"author":{"gitId":"NicholasTYD"},"content":"| Patient Related Parameters                                           | Additional Notes                                                                       |","lastModifiedDate":"2022-11-03"},{"lineNumber":491,"author":{"gitId":"NicholasTYD"},"content":"|----------------------------------------------------------------------|----------------------------------------------------------------------------------------|","lastModifiedDate":"2022-11-06"},{"lineNumber":492,"author":{"gitId":"NicholasTYD"},"content":"| **[n/NAME]**\u003cbr/\u003e**[p/PHONE]**\u003cbr/\u003e**[e/EMAIL]**\u003cbr/\u003e**[a/ADDRESS]** | -                                                                                      |","lastModifiedDate":"2022-11-03"},{"lineNumber":493,"author":{"gitId":"NicholasTYD"},"content":"| **[t/PATIENT_TAG]...**                                               | Finds patients with all the inputted tag(s).\u003cbr/\u003e**Full match for each tag required.** |","lastModifiedDate":"2022-11-06"},{"lineNumber":494,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":495,"author":{"gitId":"NicholasTYD"},"content":"| Appointment Related Parameters | Additional Notes                                                                                                                 |","lastModifiedDate":"2022-11-03"},{"lineNumber":496,"author":{"gitId":"NicholasTYD"},"content":"|--------------------------------|----------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2022-11-06"},{"lineNumber":497,"author":{"gitId":"NicholasTYD"},"content":"| **[r/REASON]**                 | -                                                                                                                                |","lastModifiedDate":"2022-11-03"},{"lineNumber":498,"author":{"gitId":"NicholasTYD"},"content":"| **[ds/DATE_START]**            | Finds appointments occurring **at or after** the inputted date. \u003cbr/\u003e **Date must be at or after [de/DATE_END], if present.**    |","lastModifiedDate":"2022-11-06"},{"lineNumber":499,"author":{"gitId":"NicholasTYD"},"content":"| **[de/DATE_END]**              | Finds appointments occurring **at or before** the inputted date. \u003cbr/\u003e **Date must be at or after [de/DATE_START], if present.** |","lastModifiedDate":"2022-11-06"},{"lineNumber":500,"author":{"gitId":"NicholasTYD"},"content":"| **[ta/APPOINTMENT_TAG]...**    | Finds appointments with all the inputted appointment tag(s).\u003cbr/\u003e **Full match for each tag required.**                          |","lastModifiedDate":"2022-11-06"},{"lineNumber":501,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":502,"author":{"gitId":"NicholasTYD"},"content":"Visual example of finding results by an appointment\u0027s reason, using `find r/Checkup`:","lastModifiedDate":"2022-11-03"},{"lineNumber":503,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":504,"author":{"gitId":"NicholasTYD"},"content":"Before `find r/Checkup`:","lastModifiedDate":"2022-11-03"},{"lineNumber":505,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":506,"author":{"gitId":"NicholasTYD"},"content":"  ![before `find r/Checkup`](images/FindCheckupReasonBefore.png)","lastModifiedDate":"2022-11-03"},{"lineNumber":507,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":508,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":509,"author":{"gitId":"NicholasTYD"},"content":"After `find r/Checkup`:","lastModifiedDate":"2022-11-03"},{"lineNumber":510,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":511,"author":{"gitId":"NicholasTYD"},"content":"  ![after `find r/Checkup`](images/FindCheckupReasonAfter.png)","lastModifiedDate":"2022-11-03"},{"lineNumber":512,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":513,"author":{"gitId":"NicholasTYD"},"content":"* Note that only *relevant* results are displayed.","lastModifiedDate":"2022-11-03"},{"lineNumber":514,"author":{"gitId":"NicholasTYD"},"content":"  * The patient `Bernice Yu` is not displayed as she does not have an appointment with a reason containing `Checkup`.","lastModifiedDate":"2022-11-03"},{"lineNumber":515,"author":{"gitId":"NicholasTYD"},"content":"  * `David Li`\u0027s appointment is not displayed as its reason does not contain `Checkup`.","lastModifiedDate":"2022-11-03"},{"lineNumber":516,"author":{"gitId":"NicholasTYD"},"content":"    * Consequently, `David Li` does not appear in the patient list, as he is *irrelevant* to the search.","lastModifiedDate":"2022-11-03"},{"lineNumber":517,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":518,"author":{"gitId":"NicholasTYD"},"content":"Other Examples:","lastModifiedDate":"2022-11-03"},{"lineNumber":519,"author":{"gitId":"NicholasTYD"},"content":"* `find n/John p/12345` displays all patients with `John` in their names and `12345` in their phone numbers, as well as all their appointments.","lastModifiedDate":"2022-10-15"},{"lineNumber":520,"author":{"gitId":"NicholasTYD"},"content":"* `find ds/2020-01-01 00:00` displays all appointments occurring at or after 1st of January 2020. It will also display all patients with at least one of said appointments.","lastModifiedDate":"2022-11-03"},{"lineNumber":521,"author":{"gitId":"NicholasTYD"},"content":"* `find a/Clementi r/Sleep Apena` displays all patients whose address contains `Clementi` and has at least 1 appointment containing `Sleep Apena` as its reason. It will also only display appointments containing `Sleep Apena` of said patients.","lastModifiedDate":"2022-10-15"},{"lineNumber":522,"author":{"gitId":"NicholasTYD"},"content":"* `find ta/Throat ta/Nose` displays all appointments with both `Throat` and `Nose` tags, and all patients with at least one of said appointments.","lastModifiedDate":"2022-10-25"},{"lineNumber":523,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":524,"author":{"gitId":"pwjj2000"},"content":"### Others","lastModifiedDate":"2022-10-26"},{"lineNumber":525,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":526,"author":{"gitId":"pwjj2000"},"content":"#### View History/Cycling of Commands","lastModifiedDate":"2022-10-26"},{"lineNumber":527,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":528,"author":{"gitId":"JovonLim"},"content":"Shows the most recent 10 commands that was inputted.","lastModifiedDate":"2022-10-23"},{"lineNumber":529,"author":{"gitId":"JovonLim"},"content":"Allows cycling through those commands to reduce the need of retyping similar commands fully.","lastModifiedDate":"2022-10-23"},{"lineNumber":530,"author":{"gitId":"JovonLim"},"content":"The history is looped, meaning that when you reach the last command, the next cycle will bring it back to the first command.","lastModifiedDate":"2022-11-07"},{"lineNumber":531,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":532,"author":{"gitId":"JovonLim"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2022-11-04"},{"lineNumber":533,"author":{"gitId":"JovonLim"},"content":":bulb: **Tip:** \u003cbr\u003e","lastModifiedDate":"2022-11-04"},{"lineNumber":534,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-11-04"},{"lineNumber":535,"author":{"gitId":"JovonLim"},"content":"* Every new valid command will reset the index back to the top of the history.","lastModifiedDate":"2022-11-04"},{"lineNumber":536,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-11-04"},{"lineNumber":537,"author":{"gitId":"JovonLim"},"content":"* Click Down Arrow to get the most recent command immediately and Up Arrow to get the last command in the history.","lastModifiedDate":"2022-11-04"},{"lineNumber":538,"author":{"gitId":"JovonLim"},"content":"  ","lastModifiedDate":"2022-11-04"},{"lineNumber":539,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2022-10-27"},{"lineNumber":540,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":541,"author":{"gitId":"JovonLim"},"content":"Controls:","lastModifiedDate":"2022-10-23"},{"lineNumber":542,"author":{"gitId":"guanzhou03"},"content":"* `Up Arrow` on keyboard: Cycle to next command","lastModifiedDate":"2022-10-26"},{"lineNumber":543,"author":{"gitId":"guanzhou03"},"content":"* `Down Arrow` on keyboard: Cycle to previous command","lastModifiedDate":"2022-10-26"},{"lineNumber":544,"author":{"gitId":"guanzhou03"},"content":"* `Control` on keyboard: Toggle history","lastModifiedDate":"2022-10-26"},{"lineNumber":545,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":546,"author":{"gitId":"pwjj2000"},"content":"#### Exiting the program : `exit`","lastModifiedDate":"2022-10-26"},{"lineNumber":547,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":548,"author":{"gitId":"guanzhou03"},"content":"Exits and closes idENTify.","lastModifiedDate":"2022-11-05"},{"lineNumber":549,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":550,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":551,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":552,"author":{"gitId":"pwjj2000"},"content":"#### Saving the data","lastModifiedDate":"2022-10-26"},{"lineNumber":553,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":554,"author":{"gitId":"JovonLim"},"content":"idENTify data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2022-10-26"},{"lineNumber":555,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":556,"author":{"gitId":"pwjj2000"},"content":"#### Editing the data file","lastModifiedDate":"2022-10-26"},{"lineNumber":557,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":558,"author":{"gitId":"guanzhou03"},"content":"idENTify data are saved as a JSON file in `[JAR file location]/data/idENTify.json`. Advanced users are welcome to update the data directly by editing the data file.","lastModifiedDate":"2022-11-05"},{"lineNumber":559,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":560,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2021-02-04"},{"lineNumber":561,"author":{"gitId":"NicholasTYD"},"content":"If your changes to the data file makes its format invalid, idENTify will discard all data and start with an empty data file at the next run.","lastModifiedDate":"2022-09-20"},{"lineNumber":562,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":563,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":564,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":565,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":566,"author":{"gitId":"WingKei67"},"content":"## **Command summary**","lastModifiedDate":"2022-11-03"},{"lineNumber":567,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":568,"author":{"gitId":"NicholasTYD"},"content":"| Action                    | Format, Examples                                                                                                                                                                         |","lastModifiedDate":"2022-11-06"},{"lineNumber":569,"author":{"gitId":"NicholasTYD"},"content":"|---------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2022-11-06"},{"lineNumber":570,"author":{"gitId":"NicholasTYD"},"content":"| **Help**                  | `help`                                                                                                                                                                                   |","lastModifiedDate":"2022-11-06"},{"lineNumber":571,"author":{"gitId":"JovonLim"},"content":"| **Add**                   | `add n/NAME p/PHONE_NUMBER [a/ADDRESS] [e/EMAIL] [t/TAG]…​` \u003cbr\u003e e.g. `add n/James Ho p/22224444 a/123, Clementi Rd, 1234665`                                                              |","lastModifiedDate":"2022-11-07"},{"lineNumber":572,"author":{"gitId":"NicholasTYD"},"content":"| **Delete**                | `delete INDEX [END_INDEX]`\u003cbr\u003e e.g. `delete 3`                                                                                                                                           |","lastModifiedDate":"2022-11-06"},{"lineNumber":573,"author":{"gitId":"NicholasTYD"},"content":"| **Book**                  | `book INDEX r/REASON d/DATE [pe/TIME_PERIOD] [t/TAG]…​` \u003cbr\u003e e.g. `book 2 r/Ear Infection d/2022-12-31 18:00 pe/1Y`                                                                      |","lastModifiedDate":"2022-11-06"},{"lineNumber":574,"author":{"gitId":"NicholasTYD"},"content":"| **Cancel**                | `cancel APPOINTMENT_INDEX` \u003cbr\u003e e.g. `cancel 2`                                                                                                                                          |","lastModifiedDate":"2022-11-06"},{"lineNumber":575,"author":{"gitId":"NicholasTYD"},"content":"| **Clear**                 | `clear`                                                                                                                                                                                  |","lastModifiedDate":"2022-11-06"},{"lineNumber":576,"author":{"gitId":"NicholasTYD"},"content":"| **Edit Patient**          | `edit patients INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` \u003cbr\u003e e.g. `edit patients 1 n/Bernice Yu`                                                                        |","lastModifiedDate":"2022-11-06"},{"lineNumber":577,"author":{"gitId":"NicholasTYD"},"content":"| **Edit Appointment**      | `edit appts INDEX [r/REASON] [d/DATE] [pe/TIME_PERIOD] [t/TAG]…​` \u003cbr\u003e e.g. `edit appts 1 r/Cough`                                                                                       |","lastModifiedDate":"2022-11-06"},{"lineNumber":578,"author":{"gitId":"NicholasTYD"},"content":"| **Mark**                  | `mark APPOINTMENT_INDEX` \u003cbr\u003e e.g. `mark 3`                                                                                                                                              |","lastModifiedDate":"2022-11-06"},{"lineNumber":579,"author":{"gitId":"NicholasTYD"},"content":"| **Unmark**                | `unmark APPOINTMENT_INDEX` \u003cbr\u003e e.g. `unmark 1`                                                                                                                                          |","lastModifiedDate":"2022-11-06"},{"lineNumber":580,"author":{"gitId":"NicholasTYD"},"content":"| **List**                  | `list patients` \u003cbr\u003e `list appts` \u003cbr\u003e `list all`                                                                                                                                        |","lastModifiedDate":"2022-11-06"},{"lineNumber":581,"author":{"gitId":"NicholasTYD"},"content":"| **Group Patients**        | `group patients`                                                                                                                                                                         |","lastModifiedDate":"2022-11-06"},{"lineNumber":582,"author":{"gitId":"NicholasTYD"},"content":"| **Group Appointments**    | `group appts k/KEY` \u003cbr\u003e e.g. `group appts k/mark`                                                                                                                                       |","lastModifiedDate":"2022-11-06"},{"lineNumber":583,"author":{"gitId":"NicholasTYD"},"content":"| **Ungroup**               | `ungroup patients` \u003cbr\u003e `ungroup appts`                                                                                                                                                  |","lastModifiedDate":"2022-11-06"},{"lineNumber":584,"author":{"gitId":"NicholasTYD"},"content":"| **Hide Patients**         | `hide patients CONDITION` \u003cbr\u003e e.g. `hide patients t/nose`                                                                                                                               |","lastModifiedDate":"2022-11-06"},{"lineNumber":585,"author":{"gitId":"NicholasTYD"},"content":"| **Unhide Patients**       | `unhide patients CONDITION` \u003cbr\u003e e.g. `unhide patients t/nose`                                                                                                                           |","lastModifiedDate":"2022-11-06"},{"lineNumber":586,"author":{"gitId":"NicholasTYD"},"content":"| **Hide Appointments**     | `hide appts CONDITION` \u003cbr\u003e e.g. `hide appts s/marked`                                                                                                                                   |","lastModifiedDate":"2022-11-06"},{"lineNumber":587,"author":{"gitId":"NicholasTYD"},"content":"| **Unhide Appointments**   | `unhide appts CONDITION` \u003cbr\u003e e.g. `unhide appts r/pain`                                                                                                                                 |","lastModifiedDate":"2022-11-06"},{"lineNumber":588,"author":{"gitId":"NicholasTYD"},"content":"| **Find**                  | `find [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/PATIENT_TAG]…​ [r/REASON] [ds/DATE_START] [de/DATE_END] [ta/APPOINTMENT_TAG]…​`\u003cbr\u003e e.g. `find n/Joshua e/Josh@example.com r/Tinnitus` |","lastModifiedDate":"2022-11-06"},{"lineNumber":589,"author":{"gitId":"guanzhou03"},"content":"| **History**               | `Control key` \u003cbr\u003e `Arrow keys` \u003cbr\u003e e.g. `Up Arrow` key on keyboard                                                                                                                         |","lastModifiedDate":"2022-11-07"},{"lineNumber":590,"author":{"gitId":"NicholasTYD"},"content":"| **Exit**                  | `exit`                                                                                                                                                                                   |","lastModifiedDate":"2022-11-06"}],"authorContributionMap":{"NicholasTYD":123,"WingKei67":25,"JovonLim":70,"-":120,"guanzhou03":110,"pwjj2000":142}},{"path":"docs/_sass/minima/_base.scss","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"html {","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  font-size: $base-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Reset some basic elements","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"body, h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"p, blockquote, pre, hr,","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"dl, dd, ol, ul, figure {","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  margin: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  padding: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Basic styling","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"body {","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  font: $base-font-weight #{$base-font-size}/#{$base-line-height} $base-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  background-color: $background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  -webkit-text-size-adjust: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  -webkit-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     -moz-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"       -o-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  font-kerning: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  display: flex;","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  min-height: 100vh;","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  flex-direction: column;","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  overflow-wrap: break-word;","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * Set `margin-bottom` to maintain vertical rhythm","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"p, blockquote, pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"ul, ol, dl, figure,","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"%vertical-rhythm {","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"hr {","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  margin-top: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":" * `main` element","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"main {","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  display: block; /* Default value of `display` of `main` element is \u0027inline\u0027 in IE 11. */","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":" * Images","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"img {","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  max-width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  vertical-align: middle;","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":" * Figures","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"figure \u003e img {","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"figcaption {","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  font-size: $small-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":" * Lists","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"ul, ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  margin-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"li {","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  \u003e ul,","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  \u003e ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":" * Headings","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6 {","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  font-weight: $base-font-weight;","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":" * Links","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"a {","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  color: $link-base-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"  \u0026:visited {","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    color: $link-visited-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  .social-media-list \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    .username {","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":" * Blockquotes","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"blockquote {","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  color: $brand-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  border-left: 4px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"  @include relative-font-size(1.125);","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  font-style: italic;","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  \u003e :last-child {","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"  i, em {","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    font-style: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * Code formatting","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"  font-family: $code-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  font-size: 0.9375em;","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"  border: 1px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"  background-color: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"  padding: 1px 5px;","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"pre {","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"  padding: 8px 12px;","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"  overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"  \u003e code {","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    border: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    padding-right: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    padding-left: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":".highlight {","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"  background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"  @extend %vertical-rhythm;","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"  .highlighter-rouge \u0026 {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":" * Wrapper","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":".wrapper {","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"  max-width: calc(#{$content-width} - (#{$spacing-unit}));","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"  margin-right: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"  margin-left: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"  padding-right: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"  @extend %clearfix;","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"  @media screen and (min-width: $on-large) {","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    max-width: calc(#{$content-width} - (#{$spacing-unit} * 2));","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    padding-right: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    padding-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":" * Clearfix","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"%clearfix:after {","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"  content: \"\";","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"  display: table;","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"  clear: both;","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":" * Icons","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":".orange {","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  color: #f66a0a;","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":".grey {","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"  color: #828282;","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":" * Tables","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"table {","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"  text-align: $table-text-align;","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"  color: $table-text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  border-collapse: collapse;","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"  border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  tr {","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    \u0026:nth-child(even) {","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"      background-color: $table-zebra-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"  th, td {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    padding: ($spacing-unit / 3) ($spacing-unit / 2);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"  th {","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    background-color: $table-header-bg-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    border: 1px solid $table-header-border;","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"  td {","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"  @include media-query($on-laptop) {","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -webkit-overflow-scrolling: touch;","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"            -ms-overflow-style: -ms-autohiding-scrollbar;","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-11"},{"lineNumber":274,"author":{"gitId":"-"},"content":"@media print {","lastModifiedDate":"2021-01-12"},{"lineNumber":275,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-11"},{"lineNumber":276,"author":{"gitId":"-"},"content":"  * Prevents page break from cutting through content when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":277,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-11"},{"lineNumber":278,"author":{"gitId":"-"},"content":"  body {","lastModifiedDate":"2021-01-11"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2021-01-11"},{"lineNumber":280,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":281,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-12"},{"lineNumber":282,"author":{"gitId":"-"},"content":"  * Replaces the top navigation menu with the project name when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":283,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-12"},{"lineNumber":284,"author":{"gitId":"-"},"content":"  .site-header .wrapper {","lastModifiedDate":"2021-01-12"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    display: none;","lastModifiedDate":"2021-01-12"},{"lineNumber":286,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":287,"author":{"gitId":"-"},"content":"  .site-header {","lastModifiedDate":"2021-01-12"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    text-align: center;","lastModifiedDate":"2021-01-12"},{"lineNumber":289,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":290,"author":{"gitId":"-"},"content":"  .site-header:before {","lastModifiedDate":"2021-01-12"},{"lineNumber":291,"author":{"gitId":"WingKei67"},"content":"    content: \"idENTify\";","lastModifiedDate":"2022-11-06"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    font-size: 32px;","lastModifiedDate":"2021-01-12"},{"lineNumber":293,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":294,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-01-12"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-12"}],"authorContributionMap":{"WingKei67":1,"-":294}},{"path":"docs/diagrams/BookCommandObjectDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"@startuml","lastModifiedDate":"2022-10-18"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"skinparam object {","lastModifiedDate":"2022-10-18"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"  backgroundColor #F97181","lastModifiedDate":"2022-10-18"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"object \"__:Person__\" as Person {","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"object \"__:Appointment1__\" as Appointment1 {","lastModifiedDate":"2022-10-18"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"reason \u003d \"Cough\"","lastModifiedDate":"2022-10-18"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"dateTime \u003d \"Dec 10 2022 12:00\"","lastModifiedDate":"2022-10-18"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-18"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"object \"__:Appointment2__\" as Appointment2 {","lastModifiedDate":"2022-10-18"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"reason \u003d \"Sore Throat\"","lastModifiedDate":"2022-10-18"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"dateTime \u003d \"Dec 20 2022 16:00\"","lastModifiedDate":"2022-10-18"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"object \"__:Appointment3__\" as Appointment3 {","lastModifiedDate":"2022-10-18"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"reason \u003d \"Ear Infection\"","lastModifiedDate":"2022-10-18"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"dateTime \u003d \"Dec 10 2022 12:00\"","lastModifiedDate":"2022-10-18"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-18"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"Person --\u003e Appointment1","lastModifiedDate":"2022-10-18"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"Person --\u003e Appointment2","lastModifiedDate":"2022-10-18"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"@enduml","lastModifiedDate":"2022-10-18"}],"authorContributionMap":{"JovonLim":28}},{"path":"docs/diagrams/BookCommandStorageClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"@startuml","lastModifiedDate":"2022-10-18"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"!include style.puml","lastModifiedDate":"2022-10-18"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2022-10-18"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"skinparam arrowColor STORAGE_COLOR","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"skinparam classBackgroundColor STORAGE_COLOR","lastModifiedDate":"2022-10-18"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"package \"AddressBook Storage\" {","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nAddressBookStorage\" as AddressBookStorage","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"Class JsonAddressBookStorage","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"Class JsonSerializableAddressBook","lastModifiedDate":"2022-10-18"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"Class JsonAdaptedPerson","lastModifiedDate":"2022-10-18"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"Class JsonAdaptedAppointment","lastModifiedDate":"2022-10-18"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"Class JsonAdaptedTag","lastModifiedDate":"2022-10-18"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-18"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"JsonAddressBookStorage .up.|\u003e AddressBookStorage","lastModifiedDate":"2022-10-18"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"JsonAddressBookStorage ..\u003e JsonSerializableAddressBook","lastModifiedDate":"2022-10-18"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"JsonSerializableAddressBook --\u003e \"*\" JsonAdaptedPerson","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"JsonAdaptedPerson --\u003e \"*\" JsonAdaptedTag","lastModifiedDate":"2022-10-18"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"JsonAdaptedPerson --\u003e \"*\" JsonAdaptedAppointment","lastModifiedDate":"2022-10-18"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"@enduml","lastModifiedDate":"2022-10-18"}],"authorContributionMap":{"JovonLim":22}},{"path":"docs/diagrams/BookSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"@startuml","lastModifiedDate":"2022-10-18"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"!include style.puml","lastModifiedDate":"2022-10-18"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2022-10-18"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"participant \":BookCommandParser\" as BookCommandParser LOGIC_COLOR","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"participant \"b:BookCommand\" as BookCommand LOGIC_COLOR","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"end box","lastModifiedDate":"2022-10-18"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2022-10-18"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"participant \":Appointment\" as Appointment MODEL_COLOR","lastModifiedDate":"2022-10-18"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2022-10-18"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"end box","lastModifiedDate":"2022-10-18"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"[-\u003e LogicManager : execute(\"book 1 \\nr/Cough d/2022-12-15 13:00\")","lastModifiedDate":"2022-10-18"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"activate LogicManager","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(\"book 1 \\nr/Cough d/2022-12-15 13:00\")","lastModifiedDate":"2022-10-18"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"activate AddressBookParser","lastModifiedDate":"2022-10-18"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"create BookCommandParser","lastModifiedDate":"2022-10-18"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":"AddressBookParser -\u003e BookCommandParser","lastModifiedDate":"2022-10-18"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"activate BookCommandParser","lastModifiedDate":"2022-10-18"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"BookCommandParser --\u003e AddressBookParser","lastModifiedDate":"2022-10-18"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"deactivate BookCommandParser","lastModifiedDate":"2022-10-18"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"AddressBookParser -\u003e BookCommandParser : parse(\"1 r/Cough d/2022-12-15 13:00\")","lastModifiedDate":"2022-10-18"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"activate BookCommandParser","lastModifiedDate":"2022-10-18"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"create Appointment","lastModifiedDate":"2022-10-18"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"BookCommandParser -\u003e Appointment : Appointment()","lastModifiedDate":"2022-10-18"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"activate Appointment","lastModifiedDate":"2022-10-18"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"Appointment --\u003e BookCommandParser","lastModifiedDate":"2022-10-18"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"deactivate Appointment","lastModifiedDate":"2022-10-18"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"create BookCommand","lastModifiedDate":"2022-10-18"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"BookCommandParser -\u003e BookCommand","lastModifiedDate":"2022-10-18"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"activate BookCommand","lastModifiedDate":"2022-10-18"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"BookCommand --\u003e BookCommandParser : b","lastModifiedDate":"2022-10-18"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"deactivate BookCommand","lastModifiedDate":"2022-10-18"},{"lineNumber":46,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"BookCommandParser --\u003e AddressBookParser : b","lastModifiedDate":"2022-10-18"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"deactivate BookCommandParser","lastModifiedDate":"2022-10-18"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2022-10-18"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"BookCommandParser -[hidden]-\u003e AddressBookParser","lastModifiedDate":"2022-10-18"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"destroy BookCommandParser","lastModifiedDate":"2022-10-18"},{"lineNumber":52,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":53,"author":{"gitId":"JovonLim"},"content":"AddressBookParser --\u003e LogicManager : b","lastModifiedDate":"2022-10-18"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"deactivate AddressBookParser","lastModifiedDate":"2022-10-18"},{"lineNumber":55,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":56,"author":{"gitId":"JovonLim"},"content":"LogicManager -\u003e BookCommand : execute()","lastModifiedDate":"2022-10-18"},{"lineNumber":57,"author":{"gitId":"JovonLim"},"content":"activate BookCommand","lastModifiedDate":"2022-10-18"},{"lineNumber":58,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":59,"author":{"gitId":"JovonLim"},"content":"alt !hasSameAppointment","lastModifiedDate":"2022-10-18"},{"lineNumber":60,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":61,"author":{"gitId":"JovonLim"},"content":"BookCommand -\u003e Model : bookAppointment(1)","lastModifiedDate":"2022-10-18"},{"lineNumber":62,"author":{"gitId":"JovonLim"},"content":"activate Model","lastModifiedDate":"2022-10-18"},{"lineNumber":63,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":64,"author":{"gitId":"JovonLim"},"content":"Model --\u003e BookCommand","lastModifiedDate":"2022-10-18"},{"lineNumber":65,"author":{"gitId":"JovonLim"},"content":"deactivate Model","lastModifiedDate":"2022-10-18"},{"lineNumber":66,"author":{"gitId":"JovonLim"},"content":"end","lastModifiedDate":"2022-10-18"},{"lineNumber":67,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":68,"author":{"gitId":"JovonLim"},"content":"create CommandResult","lastModifiedDate":"2022-10-18"},{"lineNumber":69,"author":{"gitId":"JovonLim"},"content":"BookCommand -\u003e CommandResult","lastModifiedDate":"2022-10-18"},{"lineNumber":70,"author":{"gitId":"JovonLim"},"content":"activate CommandResult","lastModifiedDate":"2022-10-18"},{"lineNumber":71,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":72,"author":{"gitId":"JovonLim"},"content":"CommandResult --\u003e BookCommand","lastModifiedDate":"2022-10-18"},{"lineNumber":73,"author":{"gitId":"JovonLim"},"content":"deactivate CommandResult","lastModifiedDate":"2022-10-18"},{"lineNumber":74,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":75,"author":{"gitId":"JovonLim"},"content":"BookCommand --\u003e LogicManager : result","lastModifiedDate":"2022-10-18"},{"lineNumber":76,"author":{"gitId":"JovonLim"},"content":"deactivate BookCommand","lastModifiedDate":"2022-10-18"},{"lineNumber":77,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":78,"author":{"gitId":"JovonLim"},"content":"[\u003c--LogicManager","lastModifiedDate":"2022-10-18"},{"lineNumber":79,"author":{"gitId":"JovonLim"},"content":"deactivate LogicManager","lastModifiedDate":"2022-10-18"},{"lineNumber":80,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":81,"author":{"gitId":"JovonLim"},"content":"@enduml","lastModifiedDate":"2022-10-18"}],"authorContributionMap":{"JovonLim":81}},{"path":"docs/diagrams/CancelActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"guanzhou03"},"content":"@startuml","lastModifiedDate":"2022-10-18"},{"lineNumber":2,"author":{"gitId":"guanzhou03"},"content":"start","lastModifiedDate":"2022-10-18"},{"lineNumber":3,"author":{"gitId":"guanzhou03"},"content":":User executes cancel command;","lastModifiedDate":"2022-11-03"},{"lineNumber":4,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":5,"author":{"gitId":"guanzhou03"},"content":"if () then ([valid index])","lastModifiedDate":"2022-11-03"},{"lineNumber":6,"author":{"gitId":"guanzhou03"},"content":"    :Shows list with cancelled appointment;","lastModifiedDate":"2022-11-03"},{"lineNumber":7,"author":{"gitId":"guanzhou03"},"content":"else ([else])","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"guanzhou03"},"content":"    :Throw exception, list unchanged;","lastModifiedDate":"2022-11-03"},{"lineNumber":9,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":10,"author":{"gitId":"guanzhou03"},"content":"endif","lastModifiedDate":"2022-11-03"},{"lineNumber":11,"author":{"gitId":"guanzhou03"},"content":"stop","lastModifiedDate":"2022-10-18"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"@enduml","lastModifiedDate":"2022-10-18"}],"authorContributionMap":{"guanzhou03":12}},{"path":"docs/diagrams/CancelSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"guanzhou03"},"content":"@startuml","lastModifiedDate":"2022-10-18"},{"lineNumber":2,"author":{"gitId":"guanzhou03"},"content":"!include style.puml","lastModifiedDate":"2022-10-18"},{"lineNumber":3,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":4,"author":{"gitId":"guanzhou03"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"guanzhou03"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2022-10-18"},{"lineNumber":6,"author":{"gitId":"guanzhou03"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"guanzhou03"},"content":"participant \":CancelCommandParser\" as CancelCommandParser LOGIC_COLOR","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"guanzhou03"},"content":"participant \"d:CancelCommand\" as CancelCommand LOGIC_COLOR","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"guanzhou03"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"guanzhou03"},"content":"participant \"SelectAppointmentCommand\" as SelectAppointmentCommand LOGIC_COLOR","lastModifiedDate":"2022-11-03"},{"lineNumber":11,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"end box","lastModifiedDate":"2022-10-18"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":14,"author":{"gitId":"guanzhou03"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2022-10-18"},{"lineNumber":15,"author":{"gitId":"guanzhou03"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2022-10-18"},{"lineNumber":16,"author":{"gitId":"guanzhou03"},"content":"end box","lastModifiedDate":"2022-10-18"},{"lineNumber":17,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":18,"author":{"gitId":"guanzhou03"},"content":"[-\u003e LogicManager : execute(\"cancel 1\")","lastModifiedDate":"2022-11-03"},{"lineNumber":19,"author":{"gitId":"guanzhou03"},"content":"activate LogicManager","lastModifiedDate":"2022-10-18"},{"lineNumber":20,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":21,"author":{"gitId":"guanzhou03"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(\"cancel 1\")","lastModifiedDate":"2022-11-03"},{"lineNumber":22,"author":{"gitId":"guanzhou03"},"content":"activate AddressBookParser","lastModifiedDate":"2022-10-18"},{"lineNumber":23,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":24,"author":{"gitId":"guanzhou03"},"content":"create CancelCommandParser","lastModifiedDate":"2022-10-18"},{"lineNumber":25,"author":{"gitId":"guanzhou03"},"content":"AddressBookParser -\u003e CancelCommandParser","lastModifiedDate":"2022-10-18"},{"lineNumber":26,"author":{"gitId":"guanzhou03"},"content":"activate CancelCommandParser","lastModifiedDate":"2022-10-18"},{"lineNumber":27,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":28,"author":{"gitId":"guanzhou03"},"content":"CancelCommandParser --\u003e AddressBookParser","lastModifiedDate":"2022-10-18"},{"lineNumber":29,"author":{"gitId":"guanzhou03"},"content":"deactivate CancelCommandParser","lastModifiedDate":"2022-10-18"},{"lineNumber":30,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":31,"author":{"gitId":"guanzhou03"},"content":"AddressBookParser -\u003e CancelCommandParser : parse(\"1\")","lastModifiedDate":"2022-10-18"},{"lineNumber":32,"author":{"gitId":"guanzhou03"},"content":"activate CancelCommandParser","lastModifiedDate":"2022-10-18"},{"lineNumber":33,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":34,"author":{"gitId":"guanzhou03"},"content":"create CancelCommand","lastModifiedDate":"2022-10-18"},{"lineNumber":35,"author":{"gitId":"guanzhou03"},"content":"CancelCommandParser -\u003e CancelCommand","lastModifiedDate":"2022-10-18"},{"lineNumber":36,"author":{"gitId":"guanzhou03"},"content":"activate CancelCommand","lastModifiedDate":"2022-10-18"},{"lineNumber":37,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":38,"author":{"gitId":"guanzhou03"},"content":"CancelCommand --\u003e CancelCommandParser : d","lastModifiedDate":"2022-10-18"},{"lineNumber":39,"author":{"gitId":"guanzhou03"},"content":"deactivate CancelCommand","lastModifiedDate":"2022-10-18"},{"lineNumber":40,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":41,"author":{"gitId":"guanzhou03"},"content":"CancelCommandParser --\u003e AddressBookParser : d","lastModifiedDate":"2022-10-18"},{"lineNumber":42,"author":{"gitId":"guanzhou03"},"content":"deactivate CancelCommandParser","lastModifiedDate":"2022-10-18"},{"lineNumber":43,"author":{"gitId":"guanzhou03"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2022-10-18"},{"lineNumber":44,"author":{"gitId":"guanzhou03"},"content":"CancelCommandParser -[hidden]-\u003e AddressBookParser","lastModifiedDate":"2022-10-18"},{"lineNumber":45,"author":{"gitId":"guanzhou03"},"content":"destroy CancelCommandParser","lastModifiedDate":"2022-10-18"},{"lineNumber":46,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":47,"author":{"gitId":"guanzhou03"},"content":"AddressBookParser --\u003e LogicManager : d","lastModifiedDate":"2022-10-18"},{"lineNumber":48,"author":{"gitId":"guanzhou03"},"content":"deactivate AddressBookParser","lastModifiedDate":"2022-10-18"},{"lineNumber":49,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":50,"author":{"gitId":"guanzhou03"},"content":"LogicManager -\u003e CancelCommand : execute()","lastModifiedDate":"2022-10-18"},{"lineNumber":51,"author":{"gitId":"guanzhou03"},"content":"activate CancelCommand","lastModifiedDate":"2022-10-18"},{"lineNumber":52,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":53,"author":{"gitId":"guanzhou03"},"content":"CancelCommand -\u003e SelectAppointmentCommand : getTargetAppointment(model)","lastModifiedDate":"2022-10-18"},{"lineNumber":54,"author":{"gitId":"guanzhou03"},"content":"activate SelectAppointmentCommand","lastModifiedDate":"2022-10-18"},{"lineNumber":55,"author":{"gitId":"guanzhou03"},"content":"SelectAppointmentCommand --\u003e CancelCommand : toBeCancelledAppt","lastModifiedDate":"2022-10-18"},{"lineNumber":56,"author":{"gitId":"guanzhou03"},"content":"deactivate SelectAppointmentCommand","lastModifiedDate":"2022-10-18"},{"lineNumber":57,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":58,"author":{"gitId":"guanzhou03"},"content":"CancelCommand -\u003e Model : CancelAppointment(toBeCancelledAppt)","lastModifiedDate":"2022-10-18"},{"lineNumber":59,"author":{"gitId":"guanzhou03"},"content":"activate Model","lastModifiedDate":"2022-10-18"},{"lineNumber":60,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":61,"author":{"gitId":"guanzhou03"},"content":"Model --\u003e CancelCommand","lastModifiedDate":"2022-10-18"},{"lineNumber":62,"author":{"gitId":"guanzhou03"},"content":"deactivate Model","lastModifiedDate":"2022-10-18"},{"lineNumber":63,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":64,"author":{"gitId":"guanzhou03"},"content":"create CommandResult","lastModifiedDate":"2022-10-18"},{"lineNumber":65,"author":{"gitId":"guanzhou03"},"content":"CancelCommand -\u003e CommandResult","lastModifiedDate":"2022-10-18"},{"lineNumber":66,"author":{"gitId":"guanzhou03"},"content":"activate CommandResult","lastModifiedDate":"2022-10-18"},{"lineNumber":67,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":68,"author":{"gitId":"guanzhou03"},"content":"CommandResult --\u003e CancelCommand","lastModifiedDate":"2022-10-18"},{"lineNumber":69,"author":{"gitId":"guanzhou03"},"content":"deactivate CommandResult","lastModifiedDate":"2022-10-18"},{"lineNumber":70,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":71,"author":{"gitId":"guanzhou03"},"content":"CancelCommand --\u003e LogicManager : result","lastModifiedDate":"2022-10-18"},{"lineNumber":72,"author":{"gitId":"guanzhou03"},"content":"deactivate CancelCommand","lastModifiedDate":"2022-10-18"},{"lineNumber":73,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":74,"author":{"gitId":"guanzhou03"},"content":"[\u003c--LogicManager","lastModifiedDate":"2022-10-18"},{"lineNumber":75,"author":{"gitId":"guanzhou03"},"content":"deactivate LogicManager","lastModifiedDate":"2022-10-18"},{"lineNumber":76,"author":{"gitId":"guanzhou03"},"content":"@enduml","lastModifiedDate":"2022-10-18"}],"authorContributionMap":{"guanzhou03":76}},{"path":"docs/diagrams/EditApptActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"@startuml","lastModifiedDate":"2022-11-03"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"start","lastModifiedDate":"2022-11-03"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":":User executes edit appt command;","lastModifiedDate":"2022-11-03"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":":Parser creates EditAppointmentDescriptor;","lastModifiedDate":"2022-11-03"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"if () then ([isAnyFieldEdited])","lastModifiedDate":"2022-11-03"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"    :Create new appointment object","lastModifiedDate":"2022-11-03"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"                with edited fields;","lastModifiedDate":"2022-11-03"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"    :Replace existing appointment object","lastModifiedDate":"2022-11-03"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"         in list with edited appointment;","lastModifiedDate":"2022-11-03"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"else ([else])","lastModifiedDate":"2022-11-03"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"    :Throw parseException;","lastModifiedDate":"2022-11-03"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"endif","lastModifiedDate":"2022-11-03"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":":Result is displayed to user;","lastModifiedDate":"2022-11-03"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"stop","lastModifiedDate":"2022-11-03"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"@enduml","lastModifiedDate":"2022-11-03"}],"authorContributionMap":{"JovonLim":15}},{"path":"docs/diagrams/FindActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"@startuml","lastModifiedDate":"2022-11-05"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"start","lastModifiedDate":"2022-11-05"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":":User executes find command;","lastModifiedDate":"2022-11-05"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":":FindCommandParser creates CombinedPersonPredicate and","lastModifiedDate":"2022-11-05"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":" CombinedAppointmentPredicate based on user search terms;","lastModifiedDate":"2022-11-05"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":":FindCommand#execute() is called;","lastModifiedDate":"2022-11-05"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":":Filter the current patient list according to the CombinedPersonPredicate;","lastModifiedDate":"2022-11-05"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"if () then ([if contains appointment search terms])","lastModifiedDate":"2022-11-05"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"    : Filter the patient list to also require patients to have at least 1 appointment","lastModifiedDate":"2022-11-05"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"                                   satisfying CombinedAppointmentPredicate;","lastModifiedDate":"2022-11-05"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"else ([else])","lastModifiedDate":"2022-11-05"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"endif","lastModifiedDate":"2022-11-05"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":":Filter the current appointment list according to CombinedAppointmentPredicate.","lastModifiedDate":"2022-11-05"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"         Appointments must also belong to a patient in the filtered patient list.;","lastModifiedDate":"2022-11-05"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":":Result is displayed to user;","lastModifiedDate":"2022-11-05"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"stop","lastModifiedDate":"2022-11-05"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"@enduml","lastModifiedDate":"2022-11-05"}],"authorContributionMap":{"NicholasTYD":17}},{"path":"docs/diagrams/FindClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"@startuml","lastModifiedDate":"2022-10-18"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"!include style.puml","lastModifiedDate":"2022-10-18"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2022-10-18"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2022-10-18"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nPredicate\" as Predicate","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"show FindCommand fields","lastModifiedDate":"2022-11-05"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"class FindCommand {","lastModifiedDate":"2022-11-05"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"    isUsingAppointmentPredicate: boolean","lastModifiedDate":"2022-11-05"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-11-05"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"show CombinedPersonPredicate fields","lastModifiedDate":"2022-10-25"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"class CombinedPersonPredicate {","lastModifiedDate":"2022-10-25"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"    name : String","lastModifiedDate":"2022-10-25"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"    phone : String","lastModifiedDate":"2022-10-25"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"    email : String","lastModifiedDate":"2022-10-25"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"    address : String","lastModifiedDate":"2022-10-25"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"    tagList : List\u003cString\u003e","lastModifiedDate":"2022-10-25"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-25"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"show CombinedAppointmentPredicate fields","lastModifiedDate":"2022-10-25"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"class CombinedAppointmentPredicate {","lastModifiedDate":"2022-10-25"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"    reason : String","lastModifiedDate":"2022-10-25"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"    startDateTime : LocalDateTime","lastModifiedDate":"2022-10-25"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"    endDateTime : LocalDateTime","lastModifiedDate":"2022-10-25"},{"lineNumber":28,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-25"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-05"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"CombinedPersonPredicate .up.|\u003e Predicate","lastModifiedDate":"2022-11-05"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"CombinedAppointmentPredicate .up.|\u003e Predicate","lastModifiedDate":"2022-11-05"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-05"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"FindCommand -left-\u003e \"1\" CombinedPersonPredicate","lastModifiedDate":"2022-11-05"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"FindCommand -right-\u003e \"1\" CombinedAppointmentPredicate","lastModifiedDate":"2022-11-05"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"@enduml","lastModifiedDate":"2022-10-18"}],"authorContributionMap":{"NicholasTYD":35}},{"path":"docs/diagrams/HidePatientsActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"guanzhou03"},"content":"@startuml","lastModifiedDate":"2022-11-03"},{"lineNumber":2,"author":{"gitId":"guanzhou03"},"content":"start","lastModifiedDate":"2022-11-03"},{"lineNumber":3,"author":{"gitId":"guanzhou03"},"content":":User executes hide patients command;","lastModifiedDate":"2022-11-03"},{"lineNumber":4,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":5,"author":{"gitId":"guanzhou03"},"content":"if () then ([hide by tag])","lastModifiedDate":"2022-11-03"},{"lineNumber":6,"author":{"gitId":"guanzhou03"},"content":"    :Create patient predicate based on tag;","lastModifiedDate":"2022-11-03"},{"lineNumber":7,"author":{"gitId":"guanzhou03"},"content":"else if () then ([hide by name])","lastModifiedDate":"2022-11-03"},{"lineNumber":8,"author":{"gitId":"guanzhou03"},"content":"    :Create patient predicate based on name;","lastModifiedDate":"2022-11-03"},{"lineNumber":9,"author":{"gitId":"guanzhou03"},"content":"else ([else])","lastModifiedDate":"2022-11-03"},{"lineNumber":10,"author":{"gitId":"guanzhou03"},"content":"    :Throw exception with error message, list unchanged;","lastModifiedDate":"2022-11-03"},{"lineNumber":11,"author":{"gitId":"guanzhou03"},"content":"    stop","lastModifiedDate":"2022-11-03"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":"endif","lastModifiedDate":"2022-11-03"},{"lineNumber":14,"author":{"gitId":"guanzhou03"},"content":":Combine with current predicate in HiddenPredicateSingleton;","lastModifiedDate":"2022-11-03"},{"lineNumber":15,"author":{"gitId":"guanzhou03"},"content":":Executes the filtered patient list with new predicate;","lastModifiedDate":"2022-11-03"},{"lineNumber":16,"author":{"gitId":"guanzhou03"},"content":":Result is displayed to user;","lastModifiedDate":"2022-11-03"},{"lineNumber":17,"author":{"gitId":"guanzhou03"},"content":"stop","lastModifiedDate":"2022-11-03"},{"lineNumber":18,"author":{"gitId":"guanzhou03"},"content":"@enduml","lastModifiedDate":"2022-11-03"}],"authorContributionMap":{"guanzhou03":18}},{"path":"docs/diagrams/ListActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"pwjj2000"},"content":"@startuml","lastModifiedDate":"2022-10-18"},{"lineNumber":2,"author":{"gitId":"pwjj2000"},"content":"!pragma useVerticalIf on","lastModifiedDate":"2022-11-03"},{"lineNumber":3,"author":{"gitId":"pwjj2000"},"content":"start","lastModifiedDate":"2022-10-18"},{"lineNumber":4,"author":{"gitId":"pwjj2000"},"content":":User executes list command;","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":6,"author":{"gitId":"pwjj2000"},"content":"\u0027Since the beta syntax does not support placing the condition outside the","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"pwjj2000"},"content":"\u0027diamond we place it as the true branch instead.","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"pwjj2000"},"content":"if () then ([list patients])","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"pwjj2000"},"content":"    :Show full patients list;","lastModifiedDate":"2022-10-18"},{"lineNumber":11,"author":{"gitId":"pwjj2000"},"content":"else if () then ([list appts])","lastModifiedDate":"2022-10-18"},{"lineNumber":12,"author":{"gitId":"pwjj2000"},"content":"    :Show full appointments list;","lastModifiedDate":"2022-10-18"},{"lineNumber":13,"author":{"gitId":"pwjj2000"},"content":"else if () then ([list all])","lastModifiedDate":"2022-11-03"},{"lineNumber":14,"author":{"gitId":"pwjj2000"},"content":"    :Show full patients and appointments list;","lastModifiedDate":"2022-11-03"},{"lineNumber":15,"author":{"gitId":"pwjj2000"},"content":"else ([else])","lastModifiedDate":"2022-10-18"},{"lineNumber":16,"author":{"gitId":"pwjj2000"},"content":"    :Throw exception;","lastModifiedDate":"2022-10-18"},{"lineNumber":17,"author":{"gitId":"pwjj2000"},"content":"endif","lastModifiedDate":"2022-10-18"},{"lineNumber":18,"author":{"gitId":"pwjj2000"},"content":"stop","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"pwjj2000"},"content":"@enduml","lastModifiedDate":"2022-10-18"}],"authorContributionMap":{"pwjj2000":19}},{"path":"docs/diagrams/MarkSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"@startuml","lastModifiedDate":"2022-10-18"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"!include style.puml","lastModifiedDate":"2022-10-18"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2022-10-18"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"participant \":MarkCommandParser\" as MarkCommandParser LOGIC_COLOR","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"participant \"mc:MarkCommand\" as MarkCommand LOGIC_COLOR","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"end box","lastModifiedDate":"2022-10-18"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2022-10-18"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2022-10-18"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"participant \"target:Appointment\" as Appointment MODEL_COLOR","lastModifiedDate":"2022-10-18"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"end box","lastModifiedDate":"2022-10-18"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"[-\u003e LogicManager : execute(\"mark 1\")","lastModifiedDate":"2022-10-18"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"activate LogicManager","lastModifiedDate":"2022-10-18"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(\"mark 1\")","lastModifiedDate":"2022-10-18"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"activate AddressBookParser","lastModifiedDate":"2022-10-18"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"create MarkCommandParser","lastModifiedDate":"2022-10-18"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"AddressBookParser -\u003e MarkCommandParser","lastModifiedDate":"2022-10-18"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"activate MarkCommandParser","lastModifiedDate":"2022-10-18"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"MarkCommandParser --\u003e AddressBookParser","lastModifiedDate":"2022-10-18"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"deactivate MarkCommandParser","lastModifiedDate":"2022-10-18"},{"lineNumber":28,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"AddressBookParser -\u003e MarkCommandParser : parse(\"mark 1\")","lastModifiedDate":"2022-10-18"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"activate MarkCommandParser","lastModifiedDate":"2022-10-18"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"create MarkCommand","lastModifiedDate":"2022-10-18"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"MarkCommandParser -\u003e MarkCommand","lastModifiedDate":"2022-10-18"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"activate MarkCommand","lastModifiedDate":"2022-10-18"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"MarkCommand --\u003e MarkCommandParser","lastModifiedDate":"2022-10-18"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"deactivate MarkCommand","lastModifiedDate":"2022-10-18"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"MarkCommandParser --\u003e AddressBookParser","lastModifiedDate":"2022-10-18"},{"lineNumber":40,"author":{"gitId":"NicholasTYD"},"content":"deactivate MarkCommandParser","lastModifiedDate":"2022-10-18"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"AddressBookParser --\u003e LogicManager : mc","lastModifiedDate":"2022-10-18"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"deactivate AddressBookParser","lastModifiedDate":"2022-10-18"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":45,"author":{"gitId":"NicholasTYD"},"content":"LogicManager -\u003e MarkCommand : execute(model)","lastModifiedDate":"2022-10-18"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"activate MarkCommand","lastModifiedDate":"2022-10-18"},{"lineNumber":47,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"MarkCommand -\u003e Model : getTargetAppointment(model)","lastModifiedDate":"2022-10-18"},{"lineNumber":49,"author":{"gitId":"NicholasTYD"},"content":"activate Model","lastModifiedDate":"2022-10-18"},{"lineNumber":50,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":51,"author":{"gitId":"NicholasTYD"},"content":"Model --\u003e MarkCommand : appointmentToMark","lastModifiedDate":"2022-10-18"},{"lineNumber":52,"author":{"gitId":"NicholasTYD"},"content":"deactivate Model","lastModifiedDate":"2022-10-18"},{"lineNumber":53,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":54,"author":{"gitId":"NicholasTYD"},"content":"MarkCommand --\u003e Appointment : mark()","lastModifiedDate":"2022-10-18"},{"lineNumber":55,"author":{"gitId":"NicholasTYD"},"content":"activate Appointment","lastModifiedDate":"2022-10-18"},{"lineNumber":56,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":57,"author":{"gitId":"NicholasTYD"},"content":"Appointment --\u003e MarkCommand","lastModifiedDate":"2022-10-18"},{"lineNumber":58,"author":{"gitId":"NicholasTYD"},"content":"deactivate Appointment","lastModifiedDate":"2022-10-18"},{"lineNumber":59,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":60,"author":{"gitId":"NicholasTYD"},"content":"opt appointment is recurring","lastModifiedDate":"2022-10-18"},{"lineNumber":61,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":62,"author":{"gitId":"NicholasTYD"},"content":"MarkCommand --\u003e MarkCommand : addRecurringAppointment","lastModifiedDate":"2022-10-18"},{"lineNumber":63,"author":{"gitId":"NicholasTYD"},"content":"activate MarkCommand","lastModifiedDate":"2022-10-18"},{"lineNumber":64,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":65,"author":{"gitId":"NicholasTYD"},"content":"MarkCommand --\u003e MarkCommand","lastModifiedDate":"2022-10-18"},{"lineNumber":66,"author":{"gitId":"NicholasTYD"},"content":"deactivate MarkCommand","lastModifiedDate":"2022-10-18"},{"lineNumber":67,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":68,"author":{"gitId":"NicholasTYD"},"content":"end","lastModifiedDate":"2022-10-18"},{"lineNumber":69,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":70,"author":{"gitId":"NicholasTYD"},"content":"create CommandResult","lastModifiedDate":"2022-10-18"},{"lineNumber":71,"author":{"gitId":"NicholasTYD"},"content":"MarkCommand -\u003e CommandResult","lastModifiedDate":"2022-10-18"},{"lineNumber":72,"author":{"gitId":"NicholasTYD"},"content":"activate CommandResult","lastModifiedDate":"2022-10-18"},{"lineNumber":73,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":74,"author":{"gitId":"NicholasTYD"},"content":"CommandResult --\u003e MarkCommand","lastModifiedDate":"2022-10-18"},{"lineNumber":75,"author":{"gitId":"NicholasTYD"},"content":"deactivate CommandResult","lastModifiedDate":"2022-10-18"},{"lineNumber":76,"author":{"gitId":"NicholasTYD"},"content":"CommandResult -[hidden]-\u003e MarkCommand","lastModifiedDate":"2022-10-18"},{"lineNumber":77,"author":{"gitId":"NicholasTYD"},"content":"destroy CommandResult","lastModifiedDate":"2022-10-18"},{"lineNumber":78,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":79,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":80,"author":{"gitId":"NicholasTYD"},"content":"MarkCommand --\u003e LogicManager : result","lastModifiedDate":"2022-10-18"},{"lineNumber":81,"author":{"gitId":"NicholasTYD"},"content":"deactivate MarkCommand","lastModifiedDate":"2022-10-18"},{"lineNumber":82,"author":{"gitId":"NicholasTYD"},"content":"MarkCommand -[hidden]-\u003e LogicManager : result","lastModifiedDate":"2022-10-18"},{"lineNumber":83,"author":{"gitId":"NicholasTYD"},"content":"destroy MarkCommand","lastModifiedDate":"2022-10-18"},{"lineNumber":84,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":85,"author":{"gitId":"NicholasTYD"},"content":"[\u003c--LogicManager","lastModifiedDate":"2022-10-18"},{"lineNumber":86,"author":{"gitId":"NicholasTYD"},"content":"deactivate LogicManager","lastModifiedDate":"2022-10-18"},{"lineNumber":87,"author":{"gitId":"NicholasTYD"},"content":"@enduml","lastModifiedDate":"2022-10-18"}],"authorContributionMap":{"NicholasTYD":87}},{"path":"docs/diagrams/ModelClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Package Model \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nReadOnlyAddressBook\" as ReadOnlyAddressBook","lastModifiedDate":"2022-01-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nReadOnlyUserPrefs\" as ReadOnlyUserPrefs","lastModifiedDate":"2022-01-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nModel\" as Model","lastModifiedDate":"2022-01-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class AddressBook","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class ModelManager","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class UserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"Class UniqueAppointmentList","lastModifiedDate":"2022-11-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Class UniquePersonList","lastModifiedDate":"2021-07-31"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"Class Appointment","lastModifiedDate":"2022-11-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Class Person","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Class Address","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Class Email","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Class Name","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Class Phone","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"Class Tag","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"AddressBook .up.|\u003e ReadOnlyAddressBook","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"ModelManager .up.|\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"Model .right.-\u003e ReadOnlyUserPrefs","lastModifiedDate":"2022-11-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"Model .left.\u003e ReadOnlyAddressBook","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"ModelManager -left-\u003e \"1\" AddressBook","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"ModelManager -right-\u003e \"1\" UserPrefs","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"UserPrefs .up.|\u003e ReadOnlyUserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"AddressBook *--\u003e \"1\" UniquePersonList","lastModifiedDate":"2019-07-30"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"AddressBook *--\u003e \"1\" UniqueAppointmentList","lastModifiedDate":"2022-11-01"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"UniqueAppointmentList --\u003e \"~* all\" Appointment","lastModifiedDate":"2022-11-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"UniquePersonList --\u003e \"~* all\" Person","lastModifiedDate":"2021-07-31"},{"lineNumber":43,"author":{"gitId":"-"},"content":"Person *--\u003e Name","lastModifiedDate":"2019-07-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"Person *--\u003e Phone","lastModifiedDate":"2019-07-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"Person *--\u003e Email","lastModifiedDate":"2019-07-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"Person *--\u003e Address","lastModifiedDate":"2019-07-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"Person *--\u003e \"*\" Tag","lastModifiedDate":"2019-07-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":49,"author":{"gitId":"-"},"content":"Name -[hidden]right-\u003e Phone","lastModifiedDate":"2019-07-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"Phone -[hidden]right-\u003e Address","lastModifiedDate":"2019-07-03"},{"lineNumber":51,"author":{"gitId":"-"},"content":"Address -[hidden]right-\u003e Email","lastModifiedDate":"2019-07-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":53,"author":{"gitId":"-"},"content":"ModelManager --\u003e\"~* filtered\" Person","lastModifiedDate":"2021-07-31"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"ModelManager --\u003e\"~* filtered\" Appointment","lastModifiedDate":"2022-11-01"},{"lineNumber":55,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"JovonLim":6,"-":49}},{"path":"docs/diagrams/StorageClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"package Storage{","lastModifiedDate":"2021-07-31"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":9,"author":{"gitId":"-"},"content":"package \"UserPrefs Storage\" #F4F6F6{","lastModifiedDate":"2021-07-31"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nUserPrefsStorage\" as UserPrefsStorage","lastModifiedDate":"2022-01-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class JsonUserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nStorage\" as Storage","lastModifiedDate":"2022-01-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class StorageManager","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"package \"AddressBook Storage\" #F4F6F6{","lastModifiedDate":"2021-07-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nAddressBookStorage\" as AddressBookStorage","lastModifiedDate":"2022-01-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Class JsonAddressBookStorage","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Class JsonSerializableAddressBook","lastModifiedDate":"2021-07-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Class JsonAdaptedPerson","lastModifiedDate":"2021-07-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"Class JsonAdaptedTag","lastModifiedDate":"2021-07-31"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"Class JsonAdaptedAppointment","lastModifiedDate":"2022-11-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"Class JsonCommandHistoryStorage","lastModifiedDate":"2022-11-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Storage","lastModifiedDate":"2021-07-31"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"StorageManager .up.|\u003e Storage","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"StorageManager -up-\u003e \"1\" UserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"StorageManager -up-\u003e \"1\" AddressBookStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"StorageManager -down-\u003e \"1\" JsonCommandHistoryStorage","lastModifiedDate":"2022-11-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"Storage -left-|\u003e UserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"Storage -right-|\u003e AddressBookStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":40,"author":{"gitId":"-"},"content":"JsonUserPrefsStorage .up.|\u003e UserPrefsStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"JsonAddressBookStorage .up.|\u003e AddressBookStorage","lastModifiedDate":"2021-07-31"},{"lineNumber":42,"author":{"gitId":"-"},"content":"JsonAddressBookStorage ..\u003e JsonSerializableAddressBook","lastModifiedDate":"2021-07-31"},{"lineNumber":43,"author":{"gitId":"-"},"content":"JsonSerializableAddressBook --\u003e \"*\" JsonAdaptedPerson","lastModifiedDate":"2021-07-31"},{"lineNumber":44,"author":{"gitId":"-"},"content":"JsonAdaptedPerson --\u003e \"*\" JsonAdaptedTag","lastModifiedDate":"2021-07-31"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"JsonAdaptedPerson ---\u003e \"*\" JsonAdaptedAppointment","lastModifiedDate":"2022-11-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-31"},{"lineNumber":47,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"JovonLim":4,"-":43}},{"path":"docs/diagrams/UiClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor UI_COLOR_T4","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor UI_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"package UI \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nUi\" as Ui","lastModifiedDate":"2022-01-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Class \"{abstract}\\nUiPart\" as UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Class UiManager","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class MainWindow","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class HelpWindow","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class ResultDisplay","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class PersonListPanel","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"Class PersonCard","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"Class AppointmentListPanel","lastModifiedDate":"2022-11-01"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"Class AppointmentCard","lastModifiedDate":"2022-11-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Class StatusBarFooter","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Class CommandBox","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"package Model \u003c\u003cRectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"Class HiddenModel #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"package Logic \u003c\u003cRectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Class HiddenLogic #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Ui","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"UiManager .left.|\u003e Ui","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"UiManager -down-\u003e \"1\" MainWindow","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e  \"1\" CommandBox","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e \"1\" ResultDisplay","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e \"1\" PersonListPanel","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"MainWindow *-down-\u003e \"1\" AppointmentListPanel","lastModifiedDate":"2022-11-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e \"1\" StatusBarFooter","lastModifiedDate":"2021-07-31"},{"lineNumber":40,"author":{"gitId":"-"},"content":"MainWindow --\u003e \"0..1\" HelpWindow","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":42,"author":{"gitId":"-"},"content":"PersonListPanel -down-\u003e \"*\" PersonCard","lastModifiedDate":"2021-07-31"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"AppointmentListPanel -down-\u003e \"*\" AppointmentCard","lastModifiedDate":"2022-11-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"MainWindow -left-|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"ResultDisplay --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"CommandBox --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":49,"author":{"gitId":"-"},"content":"PersonListPanel --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"PersonCard --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"AppointmentListPanel --|\u003e UiPart","lastModifiedDate":"2022-11-01"},{"lineNumber":52,"author":{"gitId":"JovonLim"},"content":"AppointmentCard --|\u003e UiPart","lastModifiedDate":"2022-11-01"},{"lineNumber":53,"author":{"gitId":"-"},"content":"StatusBarFooter --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"HelpWindow --|\u003e UiPart","lastModifiedDate":"2021-07-31"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":56,"author":{"gitId":"-"},"content":"PersonCard ..\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":57,"author":{"gitId":"JovonLim"},"content":"AppointmentCard ..\u003e Model","lastModifiedDate":"2022-11-01"},{"lineNumber":58,"author":{"gitId":"-"},"content":"UiManager -right-\u003e Logic","lastModifiedDate":"2019-07-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"MainWindow -left-\u003e Logic","lastModifiedDate":"2019-07-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"PersonListPanel -[hidden]left- HelpWindow","lastModifiedDate":"2019-07-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"HelpWindow -[hidden]left- CommandBox","lastModifiedDate":"2019-07-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"CommandBox -[hidden]left- ResultDisplay","lastModifiedDate":"2019-07-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"ResultDisplay -[hidden]left- StatusBarFooter","lastModifiedDate":"2019-07-30"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"MainWindow -[hidden]-|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"JovonLim":7,"-":60}},{"path":"docs/diagrams/tracing/ListPatientsSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"pwjj2000"},"content":"@startuml","lastModifiedDate":"2022-10-18"},{"lineNumber":2,"author":{"gitId":"pwjj2000"},"content":"!include ../style.puml","lastModifiedDate":"2022-10-18"},{"lineNumber":3,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":4,"author":{"gitId":"pwjj2000"},"content":"box Non-JavaFX LOGIC_COLOR_T1","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"pwjj2000"},"content":"Participant \":ListCommand\" as lc LOGIC_COLOR","lastModifiedDate":"2022-10-18"},{"lineNumber":6,"author":{"gitId":"pwjj2000"},"content":"Participant \":ModelManager\" as mm LOGIC_COLOR","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"pwjj2000"},"content":"end box","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"pwjj2000"},"content":"Participant \":FilteredList\" as fl LOGIC_COLOR","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":11,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":12,"author":{"gitId":"pwjj2000"},"content":"[-\u003e lc : execute","lastModifiedDate":"2022-10-18"},{"lineNumber":13,"author":{"gitId":"pwjj2000"},"content":"activate lc","lastModifiedDate":"2022-10-18"},{"lineNumber":14,"author":{"gitId":"pwjj2000"},"content":"lc -\u003e mm ++: updateFilteredPersonList(Predicate)","lastModifiedDate":"2022-10-18"},{"lineNumber":15,"author":{"gitId":"pwjj2000"},"content":"mm -\u003e fl ++: setPredicate(Predicate)","lastModifiedDate":"2022-10-18"},{"lineNumber":16,"author":{"gitId":"pwjj2000"},"content":"fl -\u003e","lastModifiedDate":"2022-10-18"},{"lineNumber":17,"author":{"gitId":"pwjj2000"},"content":"fl \u003c--","lastModifiedDate":"2022-10-18"},{"lineNumber":18,"author":{"gitId":"pwjj2000"},"content":"fl --\u003e mm --","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"pwjj2000"},"content":"mm --\u003e lc --","lastModifiedDate":"2022-10-18"},{"lineNumber":20,"author":{"gitId":"pwjj2000"},"content":"\u003c-- lc --: command","lastModifiedDate":"2022-10-18"},{"lineNumber":21,"author":{"gitId":"pwjj2000"},"content":"@enduml","lastModifiedDate":"2022-10-18"}],"authorContributionMap":{"pwjj2000":21}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"guanzhou03"},"content":"title: idENTify","lastModifiedDate":"2022-10-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"guanzhou03"},"content":"[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2223S1-CS2103T-T17-4/tp/actions)","lastModifiedDate":"2022-10-25"},{"lineNumber":7,"author":{"gitId":"guanzhou03"},"content":"[![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://app.codecov.io/gh/AY2223S1-CS2103T-T17-4/tp)","lastModifiedDate":"2022-10-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"guanzhou03"},"content":"## Description","lastModifiedDate":"2022-10-25"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"idENTify is an **all in one desktop application made for Ear, Nose and Throat (ENT) administrative staff to manage their patients and their appointments.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface).","lastModifiedDate":"2022-11-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"guanzhou03"},"content":"## Features at a glance","lastModifiedDate":"2022-10-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"guanzhou03"},"content":"Users are able to:","lastModifiedDate":"2022-10-25"},{"lineNumber":17,"author":{"gitId":"guanzhou03"},"content":"* Add/remove patients/appointments.","lastModifiedDate":"2022-10-25"},{"lineNumber":18,"author":{"gitId":"guanzhou03"},"content":"* Tag patients/appointments.","lastModifiedDate":"2022-10-25"},{"lineNumber":19,"author":{"gitId":"guanzhou03"},"content":"* Cancel/mark/edit appointments.","lastModifiedDate":"2022-10-25"},{"lineNumber":20,"author":{"gitId":"guanzhou03"},"content":"* Group/Find/Hide patients/appointments.","lastModifiedDate":"2022-10-25"},{"lineNumber":21,"author":{"gitId":"guanzhou03"},"content":"* Easily track patients and their appointments!","lastModifiedDate":"2022-10-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"guanzhou03"},"content":"## More information about this project","lastModifiedDate":"2022-10-25"},{"lineNumber":24,"author":{"gitId":"guanzhou03"},"content":"* This project was made as part of CS2103T in AY22/23 S1.","lastModifiedDate":"2022-10-25"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"* If you are interested in using idENTify, head over to the [*Quick Start* section of the **User Guide**](https://ay2223s1-cs2103t-t17-4.github.io/tp/UserGuide.html#quick-start).","lastModifiedDate":"2022-11-07"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"* If you are interested in developing idENTify, the **[Developer Guide](https://ay2223s1-cs2103t-t17-4.github.io/tp/DeveloperGuide.html)** is a good place to start.","lastModifiedDate":"2022-11-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"guanzhou03"},"content":"## Credits \u0026 Acknowledgements","lastModifiedDate":"2022-10-25"},{"lineNumber":29,"author":{"gitId":"guanzhou03"},"content":"* This project is a **part of the se-education.org** initiative. If you would like to contribute code to this project, see [se-education.org](https://se-education.org#https://se-education.org/#contributing) for more info.","lastModifiedDate":"2022-10-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2022-11-07"}],"authorContributionMap":{"NicholasTYD":3,"-":12,"guanzhou03":15}},{"path":"docs/team/guanzhou03.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"guanzhou03"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":2,"author":{"gitId":"guanzhou03"},"content":"layout: page","lastModifiedDate":"2022-09-20"},{"lineNumber":3,"author":{"gitId":"guanzhou03"},"content":"title: Chen Guanzhou\u0027s Project Portfolio Page","lastModifiedDate":"2022-09-20"},{"lineNumber":4,"author":{"gitId":"guanzhou03"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":5,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":6,"author":{"gitId":"guanzhou03"},"content":"## Project: idENTify","lastModifiedDate":"2022-09-20"},{"lineNumber":7,"author":{"gitId":"guanzhou03"},"content":"### Overview","lastModifiedDate":"2022-09-20"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"IdENTify is a **desktop app made for Ear, Nose and Throat (ENT) administrative staff to manage patients\u0027 contact details","lastModifiedDate":"2022-11-06"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"and appointments, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a","lastModifiedDate":"2022-11-06"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"Graphical User Interface (GUI). If you can type fast, idENTify can get your patients/appointments\u0027 management tasks","lastModifiedDate":"2022-11-06"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"done faster than traditional GUI apps.","lastModifiedDate":"2022-11-06"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":"### Summary of Contributions","lastModifiedDate":"2022-09-20"},{"lineNumber":14,"author":{"gitId":"guanzhou03"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-10-18"},{"lineNumber":15,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":16,"author":{"gitId":"guanzhou03"},"content":"Code contributed: [RepoSense link](https://nus-cs2103-ay2223s1.github.io/tp-dashboard/?search\u003dguanzhou03\u0026breakdown\u003dtrue\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2022-09-16\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)","lastModifiedDate":"2022-10-30"},{"lineNumber":17,"author":{"gitId":"guanzhou03"},"content":"Enhancements implemented:","lastModifiedDate":"2022-10-30"},{"lineNumber":18,"author":{"gitId":"guanzhou03"},"content":"* `delete` command enhancement: Allows deletion of patients in a range, and not just a single deletion at an index.","lastModifiedDate":"2022-10-30"},{"lineNumber":19,"author":{"gitId":"guanzhou03"},"content":"* `Singleton` pattern: Made use of singleton pattern to keep track of the current predicate shown in the UI (there should only be 1 \"global\" predicate)","lastModifiedDate":"2022-10-30"},{"lineNumber":20,"author":{"gitId":"guanzhou03"},"content":"* `cancel` command: Allows removal of a person\u0027s appointment from the appointment list.","lastModifiedDate":"2022-10-30"},{"lineNumber":21,"author":{"gitId":"guanzhou03"},"content":"* `hide patients` command: Allows the model to hide patients based on conditions specified e.g hide by patient names or tags, makes use of the singleton.","lastModifiedDate":"2022-10-30"},{"lineNumber":22,"author":{"gitId":"guanzhou03"},"content":"* `hide appts` command: Allows the model to hide appointments based on conditions specified e.g hide by appointment tags, status or reason, makes use of the singleton.","lastModifiedDate":"2022-10-30"},{"lineNumber":23,"author":{"gitId":"guanzhou03"},"content":"* `unhide patients` command: Allows the mode to unhide previously hidden patients based on conditions specified e.g unhide by tags.","lastModifiedDate":"2022-10-30"},{"lineNumber":24,"author":{"gitId":"guanzhou03"},"content":"* `unhide appts` command: Allows the model to unhide previously hidden appointments based on conditions specified e.g unhide by marked status.","lastModifiedDate":"2022-10-30"},{"lineNumber":25,"author":{"gitId":"guanzhou03"},"content":"The global predicate to show/hide which appointments and patients was difficult to implement, because hide/unhide has to work with other commands such as find and edit,","lastModifiedDate":"2022-10-30"},{"lineNumber":26,"author":{"gitId":"guanzhou03"},"content":"and a global predicate for the model must be maintained at all times. e.g hide/find/edit/unhide commands work on the current shown list instead of the full list of appointments and patients, and so the predicate has to be constantly combined, leading to many bugs.","lastModifiedDate":"2022-11-07"},{"lineNumber":27,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":28,"author":{"gitId":"guanzhou03"},"content":"Contributions to the UG:","lastModifiedDate":"2022-10-30"},{"lineNumber":29,"author":{"gitId":"guanzhou03"},"content":"* Added `delete`, `cancel`, `hide patients`, `hide appts`, `unhide patients`, `unhide appts` feature description and examples.","lastModifiedDate":"2022-10-30"},{"lineNumber":30,"author":{"gitId":"guanzhou03"},"content":"* Updated screenshot for `help` command.","lastModifiedDate":"2022-10-30"},{"lineNumber":31,"author":{"gitId":"guanzhou03"},"content":"* Updated command summary.","lastModifiedDate":"2022-10-30"},{"lineNumber":32,"author":{"gitId":"guanzhou03"},"content":"* Added glossary of terms to define.","lastModifiedDate":"2022-11-06"},{"lineNumber":33,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":34,"author":{"gitId":"guanzhou03"},"content":"Contributions to the DG:","lastModifiedDate":"2022-10-30"},{"lineNumber":35,"author":{"gitId":"guanzhou03"},"content":"* Added explanations and UML diagrams for `cancel` command.","lastModifiedDate":"2022-11-06"},{"lineNumber":36,"author":{"gitId":"guanzhou03"},"content":"* Added explanations and UML diagram for `hide` commands.","lastModifiedDate":"2022-11-06"},{"lineNumber":37,"author":{"gitId":"guanzhou03"},"content":"* Added glossary of terms to define.","lastModifiedDate":"2022-11-06"},{"lineNumber":38,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":39,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":40,"author":{"gitId":"guanzhou03"},"content":"Contributions to team-based tasks:","lastModifiedDate":"2022-10-30"},{"lineNumber":41,"author":{"gitId":"guanzhou03"},"content":"* Created and set up the organisation and repository in the initial stages of the project.","lastModifiedDate":"2022-10-30"},{"lineNumber":42,"author":{"gitId":"guanzhou03"},"content":"* Released v1.2 and v1.3 jar files","lastModifiedDate":"2022-10-30"},{"lineNumber":43,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":44,"author":{"gitId":"guanzhou03"},"content":"Review/mentoring contributions:","lastModifiedDate":"2022-10-30"},{"lineNumber":45,"author":{"gitId":"guanzhou03"},"content":"- [PR review 1](https://github.com/AY2223S1-CS2103T-T17-4/tp/pull/81)","lastModifiedDate":"2022-10-31"},{"lineNumber":46,"author":{"gitId":"guanzhou03"},"content":"- [PR review 2](https://github.com/AY2223S1-CS2103T-T17-4/tp/pull/112)","lastModifiedDate":"2022-10-31"},{"lineNumber":47,"author":{"gitId":"guanzhou03"},"content":"- [PR review 3](https://github.com/AY2223S1-CS2103T-T17-4/tp/pull/141)","lastModifiedDate":"2022-10-31"},{"lineNumber":48,"author":{"gitId":"guanzhou03"},"content":"- [PR review 4](https://github.com/AY2223S1-CS2103T-T17-4/tp/pull/142)","lastModifiedDate":"2022-10-31"},{"lineNumber":49,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":50,"author":{"gitId":"guanzhou03"},"content":"Contributions beyond the project team:","lastModifiedDate":"2022-10-30"},{"lineNumber":51,"author":{"gitId":"guanzhou03"},"content":"- [Bugs reported during PE-D](https://github.com/guanzhou03/ped/issues)","lastModifiedDate":"2022-10-30"}],"authorContributionMap":{"NicholasTYD":4,"guanzhou03":47}},{"path":"docs/team/jovonlim.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"layout: page","lastModifiedDate":"2022-09-20"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"title: Jovon\u0027s Project Portfolio Page","lastModifiedDate":"2022-09-20"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"## Project: idENTify","lastModifiedDate":"2022-11-06"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"### Overview","lastModifiedDate":"2022-11-06"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"IdENTify is a **desktop app made for Ear, Nose and Throat (ENT) administrative staff to manage patients\u0027 contact details","lastModifiedDate":"2022-11-06"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"and appointments, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a","lastModifiedDate":"2022-11-06"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"Graphical User Interface (GUI). If you can type fast, idENTify can get your patients/appointments\u0027 management tasks","lastModifiedDate":"2022-11-06"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"done faster than traditional GUI apps.","lastModifiedDate":"2022-11-06"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"### Summary of Contributions","lastModifiedDate":"2022-11-06"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-09-20"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"Code contributed: [RepoSense link](https://nus-cs2103-ay2223s1.github.io/tp-dashboard/?search\u003djovonlim\u0026breakdown\u003dtrue\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2022-09-16\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)","lastModifiedDate":"2022-10-30"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"Enhancements implemented:","lastModifiedDate":"2022-09-20"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"* `Appointment` Class with storage: To create different appointments for the patients and store those objects into JSON format.","lastModifiedDate":"2022-10-30"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"* `Observer` pattern: Made use of Observable and Callback to automatically update the patients lists and appointment lists when appointments are updated, added or removed.","lastModifiedDate":"2022-11-05"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"* `Book` Command: Allows users to book a new appointment for the specified patient. Appointments are automatically sorted according to their dateTime.","lastModifiedDate":"2022-10-31"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"* `Edit Appt` Command: Allows users to edit an existing appointment details.","lastModifiedDate":"2022-10-31"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"* `Mark` Command: Marking a recurring appointment will automatically book a new appointment for the patient, provided the patient does not have an existing appointment at the new dateTime.","lastModifiedDate":"2022-10-31"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":"* `History` feature with storage: Keep tracks of the most recent 10 commands and allows the user to cycle through them to reduce repetition of similar but long commands. The commands will then be stored into JSON format.","lastModifiedDate":"2022-10-31"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"Contributions to the UG:","lastModifiedDate":"2022-09-20"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"Updated `Intro`, `Quick Start` sections and added `Book` command, `Edit Appts` command and `History` feature.","lastModifiedDate":"2022-10-30"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"Contributions to the DG:","lastModifiedDate":"2022-09-20"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"* Updated UML diagrams and descriptions for `Ui`, `Model` and `Storage`.","lastModifiedDate":"2022-11-05"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"* Added UML diagrams and descriptions for `Book` and `Edit Appts` commands.","lastModifiedDate":"2022-11-05"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"* Added Appendix Effort.","lastModifiedDate":"2022-11-05"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"Contributions to team-based tasks:","lastModifiedDate":"2022-09-20"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"Created milestones and assigned some issues for team members.","lastModifiedDate":"2022-10-30"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"Review/mentoring contributions:","lastModifiedDate":"2022-09-20"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"* [PR_Review_1](https://github.com/AY2223S1-CS2103T-T17-4/tp/pull/66)","lastModifiedDate":"2022-10-30"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"* [PR_Review_2](https://github.com/AY2223S1-CS2103T-T17-4/tp/pull/76)","lastModifiedDate":"2022-10-30"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"* [PR_Review_3](https://github.com/AY2223S1-CS2103T-T17-4/tp/pull/112)","lastModifiedDate":"2022-10-30"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"* [PR_Review_4](https://github.com/AY2223S1-CS2103T-T17-4/tp/pull/114)","lastModifiedDate":"2022-10-30"},{"lineNumber":46,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"Contributions beyond the project team:","lastModifiedDate":"2022-09-20"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-30"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"[Bugs reported during PE-D](https://github.com/JovonLim/ped/issues)","lastModifiedDate":"2022-10-30"}],"authorContributionMap":{"NicholasTYD":4,"JovonLim":45}},{"path":"docs/team/nicholastyd.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"layout: page","lastModifiedDate":"2022-09-20"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"title: Nicholas Tan\u0027s Project Portfolio Page","lastModifiedDate":"2022-09-20"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"## Project: idENTify","lastModifiedDate":"2022-09-20"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"### Overview","lastModifiedDate":"2022-09-20"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"IdENTify is a **desktop app made for Ear, Nose and Throat (ENT) administrative staff to manage patients\u0027 contact details","lastModifiedDate":"2022-11-06"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"and appointments, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a","lastModifiedDate":"2022-11-06"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"Graphical User Interface (GUI). If you can type fast, idENTify can get your patients/appointments\u0027 management tasks","lastModifiedDate":"2022-11-06"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"done faster than traditional GUI apps.","lastModifiedDate":"2022-11-06"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"### Summary of Contributions","lastModifiedDate":"2022-09-20"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-09-27"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"Code contributed:","lastModifiedDate":"2022-10-29"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"- [RepoSense link](https://nus-cs2103-ay2223s1.github.io/tp-dashboard/?search\u003dnicholastyd\u0026breakdown\u003dtrue\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2022-09-16\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)","lastModifiedDate":"2022-10-29"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"Enhancements implemented:","lastModifiedDate":"2022-09-27"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"- `mark`/`unmark` command: Allows users to mark/unmark appointments as completed/incomplete.","lastModifiedDate":"2022-11-06"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"- Improved `list` command to list both patients and appointments simultaneously.","lastModifiedDate":"2022-11-06"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"- Improved `find` command:","lastModifiedDate":"2022-10-29"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"    - Instead of being only able to search using the patient\u0027s name, the user is now able to find results using a patient\u0027s phones, email, address, tags and/or an appointment\u0027s reason, date or tags.","lastModifiedDate":"2022-10-29"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"    - It is possible to find results using several fields simultaneously. (E.g Finding patients with a certain name and a certain tag with a single command input.)","lastModifiedDate":"2022-11-06"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"    - Only returns *relevant* search results. For example, if finding by patient name and appointment reason simultaneously:","lastModifiedDate":"2022-11-06"},{"lineNumber":28,"author":{"gitId":"NicholasTYD"},"content":"        - Only patients that matches the inputted name and has at least 1 appointment that matches the inputted appointment reason will be displayed.","lastModifiedDate":"2022-11-06"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"        - Only appointments that matches the inputted reason and belongs to a patient that satisfies the criteria above will be displayed.","lastModifiedDate":"2022-11-06"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"- Added unit tests for `mark`, `unmark`, `find` command related classes (E.g `MarkCommand`, `FindCommandParser`, `CombinedPersonPredicate` etc).","lastModifiedDate":"2022-11-06"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"Contributions to the UG:","lastModifiedDate":"2022-09-27"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"- Added sections for `mark`, `unmark` and `find` commands.","lastModifiedDate":"2022-10-29"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"Contributions to the DG:","lastModifiedDate":"2022-09-27"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"- Added UML diagrams for `mark`, `unmark`, and `find` and text for their respective sections.","lastModifiedDate":"2022-11-06"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"- Added instructions for manual testing in appendix.","lastModifiedDate":"2022-11-06"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"Contributions to team-based tasks:","lastModifiedDate":"2022-09-27"},{"lineNumber":40,"author":{"gitId":"NicholasTYD"},"content":"- Updated v1.3 .jar release file","lastModifiedDate":"2022-10-29"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"Review/mentoring contributions:","lastModifiedDate":"2022-09-27"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"- [PR review 1](https://github.com/AY2223S1-CS2103T-T17-4/tp/pull/138)","lastModifiedDate":"2022-10-29"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"- [PR review 2](https://github.com/AY2223S1-CS2103T-T17-4/tp/pull/81)","lastModifiedDate":"2022-10-29"},{"lineNumber":45,"author":{"gitId":"NicholasTYD"},"content":"- [PR review 3](https://github.com/AY2223S1-CS2103T-T17-4/tp/pull/76)","lastModifiedDate":"2022-10-29"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"- [PR review 4](https://github.com/AY2223S1-CS2103T-T17-4/tp/pull/68)","lastModifiedDate":"2022-10-29"},{"lineNumber":47,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-29"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":49,"author":{"gitId":"NicholasTYD"},"content":"Contributions beyond the project team:","lastModifiedDate":"2022-09-27"},{"lineNumber":50,"author":{"gitId":"NicholasTYD"},"content":"- [Bugs reported during PE-D](https://github.com/NicholasTYD/ped/issues)","lastModifiedDate":"2022-10-29"}],"authorContributionMap":{"NicholasTYD":50}},{"path":"docs/team/pwjj2000.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"pwjj2000"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":2,"author":{"gitId":"pwjj2000"},"content":"layout: page","lastModifiedDate":"2022-09-20"},{"lineNumber":3,"author":{"gitId":"pwjj2000"},"content":"title: Perry Wong\u0027s Project Portfolio Page","lastModifiedDate":"2022-09-27"},{"lineNumber":4,"author":{"gitId":"pwjj2000"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":5,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":6,"author":{"gitId":"pwjj2000"},"content":"## Project: idENTify","lastModifiedDate":"2022-11-06"},{"lineNumber":7,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":8,"author":{"gitId":"pwjj2000"},"content":"### Overview","lastModifiedDate":"2022-11-06"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"IdENTify is a **desktop app made for Ear, Nose and Throat (ENT) administrative staff to manage patients\u0027 contact details","lastModifiedDate":"2022-11-06"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"and appointments, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a","lastModifiedDate":"2022-11-06"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"Graphical User Interface (GUI). If you can type fast, idENTify can get your patients/appointments\u0027 management tasks","lastModifiedDate":"2022-11-06"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"done faster than traditional GUI apps.","lastModifiedDate":"2022-11-06"},{"lineNumber":13,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"### Summary of Contributions","lastModifiedDate":"2022-11-06"},{"lineNumber":15,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":16,"author":{"gitId":"pwjj2000"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-09-20"},{"lineNumber":17,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":18,"author":{"gitId":"pwjj2000"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2223s1.github.io/tp-dashboard/?search\u003dpwjj2000\u0026breakdown\u003dtrue\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2022-09-16\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)","lastModifiedDate":"2022-11-06"},{"lineNumber":19,"author":{"gitId":"pwjj2000"},"content":"* **Enhancements implemented**:","lastModifiedDate":"2022-09-27"},{"lineNumber":20,"author":{"gitId":"pwjj2000"},"content":"  * Modify `ListCommand` to work for `patients` and `appts` lists","lastModifiedDate":"2022-11-01"},{"lineNumber":21,"author":{"gitId":"pwjj2000"},"content":"  * Implement `ListCommandParser` to facilitate changes to `ListCommand` (eventually discarded)","lastModifiedDate":"2022-11-01"},{"lineNumber":22,"author":{"gitId":"pwjj2000"},"content":"  * Implementation of helper/utility class `AppointmentList`","lastModifiedDate":"2022-11-01"},{"lineNumber":23,"author":{"gitId":"pwjj2000"},"content":"  * Change `Tag` to enum","lastModifiedDate":"2022-11-01"},{"lineNumber":24,"author":{"gitId":"pwjj2000"},"content":"  * Modify existing test cases for `Tag` and `ListCommand` to accomodate changes","lastModifiedDate":"2022-11-01"},{"lineNumber":25,"author":{"gitId":"pwjj2000"},"content":"  * UI changes to accomodate appointment list","lastModifiedDate":"2022-11-01"},{"lineNumber":26,"author":{"gitId":"pwjj2000"},"content":"* **Contributions to the UG**:","lastModifiedDate":"2022-09-27"},{"lineNumber":27,"author":{"gitId":"pwjj2000"},"content":"  * Reorganising Table of Contents","lastModifiedDate":"2022-11-01"},{"lineNumber":28,"author":{"gitId":"pwjj2000"},"content":"  * Created \"Notes on Command Parameters\" section for ease of viewing","lastModifiedDate":"2022-11-01"},{"lineNumber":29,"author":{"gitId":"pwjj2000"},"content":"  * `list` command description","lastModifiedDate":"2022-11-01"},{"lineNumber":30,"author":{"gitId":"pwjj2000"},"content":"* **Contributions to the DG**:","lastModifiedDate":"2022-09-27"},{"lineNumber":31,"author":{"gitId":"pwjj2000"},"content":"  * `list` command - explanation and related UML diagrams","lastModifiedDate":"2022-11-01"},{"lineNumber":32,"author":{"gitId":"pwjj2000"},"content":"  * Target User Profile","lastModifiedDate":"2022-11-01"},{"lineNumber":33,"author":{"gitId":"pwjj2000"},"content":"  * Value Proposition","lastModifiedDate":"2022-11-01"},{"lineNumber":34,"author":{"gitId":"pwjj2000"},"content":"* **Contributions to team-based tasks**:","lastModifiedDate":"2022-09-27"},{"lineNumber":35,"author":{"gitId":"pwjj2000"},"content":"  * Determine work processes to carry out tasks (e.g. Handling PED issues)","lastModifiedDate":"2022-11-01"},{"lineNumber":36,"author":{"gitId":"pwjj2000"},"content":"* **Review/mentoring contributions**:","lastModifiedDate":"2022-09-27"},{"lineNumber":37,"author":{"gitId":"pwjj2000"},"content":"  * [Code Review 1](https://github.com/AY2223S1-CS2103T-T17-4/tp/pull/230)","lastModifiedDate":"2022-11-01"},{"lineNumber":38,"author":{"gitId":"pwjj2000"},"content":"  * [Code Review 2](https://github.com/AY2223S1-CS2103T-T17-4/tp/pull/145)","lastModifiedDate":"2022-11-01"},{"lineNumber":39,"author":{"gitId":"pwjj2000"},"content":"* **Contributions beyond the project team**:","lastModifiedDate":"2022-09-27"},{"lineNumber":40,"author":{"gitId":"pwjj2000"},"content":"  * [Bugs reported during PE-D](https://github.com/pwjj2000/ped/issues)","lastModifiedDate":"2022-11-01"}],"authorContributionMap":{"NicholasTYD":5,"pwjj2000":35}},{"path":"docs/team/wingkei67.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"---","lastModifiedDate":"2022-11-06"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"layout: page","lastModifiedDate":"2022-11-06"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"title: Zhao Yao\u0027s Project Portfolio Page","lastModifiedDate":"2022-11-06"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"---","lastModifiedDate":"2022-11-06"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"## Project: idENTify","lastModifiedDate":"2022-11-06"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"### Overview","lastModifiedDate":"2022-11-06"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"IdENTify is a **desktop app made for Ear, Nose and Throat (ENT) administrative staff to manage patients\u0027 contact details","lastModifiedDate":"2022-11-06"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"and appointments, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a","lastModifiedDate":"2022-11-06"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"Graphical User Interface (GUI). If you can type fast, idENTify can get your patients/appointments\u0027 management tasks","lastModifiedDate":"2022-11-06"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"done faster than traditional GUI apps.","lastModifiedDate":"2022-11-06"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"### Summary of Contributions","lastModifiedDate":"2022-11-06"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-11-06"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"Code contributed: ","lastModifiedDate":"2022-11-06"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"- [RepoSense link](https://nus-cs2103-ay2223s1.github.io/tp-dashboard/?search\u003dwingkei67\u0026breakdown\u003dtrue\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2022-09-16\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)","lastModifiedDate":"2022-11-06"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"Enhancements implemented:","lastModifiedDate":"2022-11-06"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"* Improve `add` command: Allows addition of patients without optional fields and duplicate patients.","lastModifiedDate":"2022-11-06"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"* Implement `group patients` command: Allows the model to group patients based on their tags.","lastModifiedDate":"2022-11-06"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"* Implement `group appts` command: Allows the model to group appointments based on some keys. e.g. group by appointment tag, status or date.","lastModifiedDate":"2022-11-06"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"* Implement `ungroup` command: Allows the model to ungroup patients or appointments.","lastModifiedDate":"2022-11-06"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"* Implement `sort patients` feature: Enables the model to auto-sort patients in the patient list.","lastModifiedDate":"2022-11-06"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"* Implement `sort appts` features: Enables the model to auto-sort appointments in the appointment list.","lastModifiedDate":"2022-11-06"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"* Design light and dark modes for our app\u0027s GUI.","lastModifiedDate":"2022-11-06"},{"lineNumber":28,"author":{"gitId":"NicholasTYD"},"content":"* Beautify the styles and layouts of our GUI.","lastModifiedDate":"2022-11-06"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"Contributions to the UG:","lastModifiedDate":"2022-11-06"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"* Added `add`, `group patients`, `group appts` and `ungroup` feature descriptions and examples.","lastModifiedDate":"2022-11-06"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"Contributions to the DG:","lastModifiedDate":"2022-11-06"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"* Added explanations and UML diagrams for `group patients`, `group appts` and `ungroup` command.","lastModifiedDate":"2022-11-06"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"* Updated use cases for all commands in v1.4.","lastModifiedDate":"2022-11-06"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"* Updated use stories for all commands in v1.4.","lastModifiedDate":"2022-11-06"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"Contributions to team-based tasks:","lastModifiedDate":"2022-11-06"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"* Draw the mock UI for v1.2.","lastModifiedDate":"2022-11-06"},{"lineNumber":40,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"Review/mentoring contributions:","lastModifiedDate":"2022-11-06"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"- [PR_Review_1](https://github.com/AY2223S1-CS2103T-T17-4/tp/pull/81)","lastModifiedDate":"2022-11-06"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"- [PR_Review_2](https://github.com/AY2223S1-CS2103T-T17-4/tp/pull/84)","lastModifiedDate":"2022-11-06"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"- [PR_Review_3](https://github.com/AY2223S1-CS2103T-T17-4/tp/pull/131)","lastModifiedDate":"2022-11-06"},{"lineNumber":45,"author":{"gitId":"NicholasTYD"},"content":"- [PR_Review_4](https://github.com/AY2223S1-CS2103T-T17-4/tp/pull/154)","lastModifiedDate":"2022-11-06"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":47,"author":{"gitId":"NicholasTYD"},"content":"Contributions beyond the project team:","lastModifiedDate":"2022-11-06"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"- [Bugs reported during PE-D](https://github.com/wingkei67/ped/issues)","lastModifiedDate":"2022-11-06"}],"authorContributionMap":{"NicholasTYD":48}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;","lastModifiedDate":"2016-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.CommandHistory;","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-01-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-01-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-01-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-01-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-01-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2016-12-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.storage.AddressBookStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"import seedu.address.storage.JsonCommandHistoryStorage;","lastModifiedDate":"2022-10-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"    public static final Version VERSION \u003d new Version(1, 3, 1, true);","lastModifiedDate":"2022-10-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"    protected CommandHistory commandHistory;","lastModifiedDate":"2022-10-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"JovonLim"},"content":"        JsonCommandHistoryStorage commandHistoryStorage \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":64,"author":{"gitId":"JovonLim"},"content":"                new JsonCommandHistoryStorage(userPrefs.getCommandHistoryFilePath());","lastModifiedDate":"2022-10-21"},{"lineNumber":65,"author":{"gitId":"JovonLim"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, commandHistoryStorage);","lastModifiedDate":"2022-10-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"JovonLim"},"content":"        commandHistory \u003d initCommandHistory(storage);","lastModifiedDate":"2022-10-21"},{"lineNumber":72,"author":{"gitId":"JovonLim"},"content":"        logic \u003d new LogicManager(model, storage, commandHistory);","lastModifiedDate":"2022-10-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,","lastModifiedDate":"2017-08-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book.","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook initialData;","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");","lastModifiedDate":"2016-12-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);","lastModifiedDate":"2016-12-20"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();","lastModifiedDate":"2016-09-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-10-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":103,"author":{"gitId":"JovonLim"},"content":"     * Returns a {@code CommandHistory} with the data from {@code storage}\u0027s commandHistory \u003cbr\u003e","lastModifiedDate":"2022-10-23"},{"lineNumber":104,"author":{"gitId":"JovonLim"},"content":"     * A new commandHistory will be constructed instead if {@code storage}\u0027s commandHistory is not found,","lastModifiedDate":"2022-10-23"},{"lineNumber":105,"author":{"gitId":"JovonLim"},"content":"     * or if errors occur when reading {@code storage}\u0027s commandHistory.","lastModifiedDate":"2022-10-23"},{"lineNumber":106,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":107,"author":{"gitId":"JovonLim"},"content":"    private CommandHistory initCommandHistory(Storage storage) {","lastModifiedDate":"2022-10-21"},{"lineNumber":108,"author":{"gitId":"JovonLim"},"content":"        Optional\u003cCommandHistory\u003e commandHistoryOptional;","lastModifiedDate":"2022-10-21"},{"lineNumber":109,"author":{"gitId":"JovonLim"},"content":"        CommandHistory initialData;","lastModifiedDate":"2022-10-21"},{"lineNumber":110,"author":{"gitId":"JovonLim"},"content":"        try {","lastModifiedDate":"2022-10-21"},{"lineNumber":111,"author":{"gitId":"JovonLim"},"content":"            commandHistoryOptional \u003d storage.readCommandHistory();","lastModifiedDate":"2022-10-21"},{"lineNumber":112,"author":{"gitId":"JovonLim"},"content":"            if (!commandHistoryOptional.isPresent()) {","lastModifiedDate":"2022-10-21"},{"lineNumber":113,"author":{"gitId":"JovonLim"},"content":"                logger.info(\"Data file not found. Will be starting with a empty commandHistory\");","lastModifiedDate":"2022-10-21"},{"lineNumber":114,"author":{"gitId":"JovonLim"},"content":"            }","lastModifiedDate":"2022-10-21"},{"lineNumber":115,"author":{"gitId":"JovonLim"},"content":"            commandHistoryOptional.map(CommandHistory::getCommandHistory);","lastModifiedDate":"2022-11-05"},{"lineNumber":116,"author":{"gitId":"JovonLim"},"content":"            initialData \u003d commandHistoryOptional.orElseGet(CommandHistory::new);","lastModifiedDate":"2022-10-21"},{"lineNumber":117,"author":{"gitId":"JovonLim"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2022-10-21"},{"lineNumber":118,"author":{"gitId":"JovonLim"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty commandHistory\");","lastModifiedDate":"2022-10-21"},{"lineNumber":119,"author":{"gitId":"JovonLim"},"content":"            initialData \u003d new CommandHistory();","lastModifiedDate":"2022-10-21"},{"lineNumber":120,"author":{"gitId":"JovonLim"},"content":"        } catch (IOException e) {","lastModifiedDate":"2022-10-21"},{"lineNumber":121,"author":{"gitId":"JovonLim"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty commandHistory\");","lastModifiedDate":"2022-10-21"},{"lineNumber":122,"author":{"gitId":"JovonLim"},"content":"            initialData \u003d new CommandHistory();","lastModifiedDate":"2022-10-21"},{"lineNumber":123,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":124,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":125,"author":{"gitId":"JovonLim"},"content":"        return initialData;","lastModifiedDate":"2022-10-21"},{"lineNumber":126,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":127,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":155,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");","lastModifiedDate":"2017-05-22"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":169,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":170,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":172,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":183,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");","lastModifiedDate":"2017-05-22"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-10-12"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);","lastModifiedDate":"2016-09-29"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":215,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"NicholasTYD":1,"JovonLim":34,"-":180}},{"path":"src/main/java/seedu/address/commons/core/GuiSettings.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.awt.Point;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.Serializable;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * A Serializable class that contains the GUI settings.","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable.","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class GuiSettings implements Serializable {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_HEIGHT \u003d 600;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_WIDTH \u003d 740;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"WingKei67"},"content":"    private static final String DEFAULT_STYLESHEET \u003d","lastModifiedDate":"2022-10-26"},{"lineNumber":16,"author":{"gitId":"WingKei67"},"content":"            GuiSettings.class.getResource(\"/view/LightMode.css\").toExternalForm();","lastModifiedDate":"2022-10-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final double windowWidth;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final double windowHeight;","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Point windowCoordinates;","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"WingKei67"},"content":"    private final String stylesheet;","lastModifiedDate":"2022-10-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the default height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public GuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        windowWidth \u003d DEFAULT_WIDTH;","lastModifiedDate":"2018-08-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        windowHeight \u003d DEFAULT_HEIGHT;","lastModifiedDate":"2018-08-14"},{"lineNumber":27,"author":{"gitId":"WingKei67"},"content":"        stylesheet \u003d DEFAULT_STYLESHEET;","lastModifiedDate":"2022-10-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d null; // null represent no coordinates","lastModifiedDate":"2018-08-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the specified height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"WingKei67"},"content":"    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition, String stylesheet) {","lastModifiedDate":"2022-10-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.windowWidth \u003d windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.windowHeight \u003d windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"WingKei67"},"content":"        this.stylesheet \u003d stylesheet;","lastModifiedDate":"2022-10-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d new Point(xPosition, yPosition);","lastModifiedDate":"2018-08-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public double getWindowWidth() {","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public double getWindowHeight() {","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public Point getWindowCoordinates() {","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"WingKei67"},"content":"    public String getStylesheet() {","lastModifiedDate":"2022-10-26"},{"lineNumber":54,"author":{"gitId":"WingKei67"},"content":"        return stylesheet;","lastModifiedDate":"2022-10-26"},{"lineNumber":55,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (!(other instanceof GuiSettings)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        GuiSettings o \u003d (GuiSettings) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return windowWidth \u003d\u003d o.windowWidth","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"WingKei67"},"content":"                \u0026\u0026 stylesheet.equals(o.stylesheet)","lastModifiedDate":"2022-10-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"WingKei67"},"content":"        return Objects.hash(windowWidth, windowHeight, windowCoordinates, stylesheet);","lastModifiedDate":"2022-10-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        sb.append(\"Width : \" + windowWidth + \"\\n\");","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        sb.append(\"Height : \" + windowHeight + \"\\n\");","lastModifiedDate":"2016-09-24"},{"lineNumber":83,"author":{"gitId":"WingKei67"},"content":"        sb.append(\"Position : \" + windowCoordinates + \"\\n\");","lastModifiedDate":"2022-10-26"},{"lineNumber":84,"author":{"gitId":"WingKei67"},"content":"        sb.append(\"Stylesheet : \" + stylesheet);","lastModifiedDate":"2022-10-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"WingKei67":13,"-":74}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"guanzhou03"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Patient: %1$s\";","lastModifiedDate":"2022-10-31"},{"lineNumber":9,"author":{"gitId":"guanzhou03"},"content":"    public static final String MESSAGE_DELETE_PERSONS_SUCCESS \u003d \"Deleted patient(s) in the range!\";","lastModifiedDate":"2022-10-31"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":"    public static final String MESSAGE_EMPTY_NAME \u003d \"Name cannot be empty!\";","lastModifiedDate":"2022-10-31"},{"lineNumber":14,"author":{"gitId":"guanzhou03"},"content":"    public static final String MESSAGE_EMPTY_REASON \u003d \"Reason cannot be empty!\";","lastModifiedDate":"2022-10-31"},{"lineNumber":15,"author":{"gitId":"guanzhou03"},"content":"    public static final String MESSAGE_INVALID_STATUS \u003d \"Cannot have more than 1 status!\";","lastModifiedDate":"2022-10-31"},{"lineNumber":16,"author":{"gitId":"guanzhou03"},"content":"    public static final String MESSAGE_INVALID_TAGS \u003d \"Invalid tag! Tag must be either ear, nose or throat\";","lastModifiedDate":"2022-10-31"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"    public static final String INCOMPLETE_COMMAND \u003d \"Command is incomplete, specify either \"","lastModifiedDate":"2022-10-14"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"            + \"\u0027appts\u0027 or \u0027patients\u0027 behind the command word\";","lastModifiedDate":"2022-10-24"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"    public static final String INCOMPLETE_LIST_COMMAND \u003d \"Command is incomplete, specify either \"","lastModifiedDate":"2022-10-24"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"            + \"\u0027appts\u0027, \u0027patients\u0027 or \u0027all\u0027 behind the command word\";","lastModifiedDate":"2022-10-24"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"    public static final String START_DATE_AFTER_END_DATE \u003d \"The start date entered should not be after the end date!\";","lastModifiedDate":"2022-10-13"},{"lineNumber":22,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":23,"author":{"gitId":"guanzhou03"},"content":"    public static final String MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX \u003d","lastModifiedDate":"2022-10-04"},{"lineNumber":24,"author":{"gitId":"guanzhou03"},"content":"            \"The appointment index provided is invalid\";","lastModifiedDate":"2022-10-04"},{"lineNumber":25,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":26,"author":{"gitId":"guanzhou03"},"content":"    public static final String MESSAGE_RESULTS_LISTED_OVERVIEW \u003d \"%1$d person(s) and %2$d appointment(s) listed!\";","lastModifiedDate":"2022-10-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"NicholasTYD":4,"JovonLim":1,"-":12,"guanzhou03":11}},{"path":"src/main/java/seedu/address/commons/util/StringUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.StringWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"import java.util.List;","lastModifiedDate":"2022-10-25"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"import java.util.Set;","lastModifiedDate":"2022-10-25"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2022-10-10"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2022-10-25"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2022-10-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Helper functions for handling strings.","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class StringUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}.","lastModifiedDate":"2016-10-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *   Ignores case, but a full word match is required.","lastModifiedDate":"2016-10-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match","lastModifiedDate":"2016-10-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *       \u003c/pre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @param sentence cannot be null","lastModifiedDate":"2016-10-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word","lastModifiedDate":"2016-10-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {","lastModifiedDate":"2016-10-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        requireNonNull(sentence);","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        requireNonNull(word);","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String preppedWord \u003d word.trim();","lastModifiedDate":"2016-10-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        String preppedSentence \u003d sentence;","lastModifiedDate":"2016-10-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");","lastModifiedDate":"2016-10-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return Arrays.stream(wordsInPreppedSentence)","lastModifiedDate":"2018-01-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                .anyMatch(preppedWord::equalsIgnoreCase);","lastModifiedDate":"2018-01-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-12"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"     * String.contains() method but with case-insensitive feature.","lastModifiedDate":"2022-10-12"},{"lineNumber":49,"author":{"gitId":"NicholasTYD"},"content":"     *","lastModifiedDate":"2022-10-12"},{"lineNumber":50,"author":{"gitId":"NicholasTYD"},"content":"     * @param sentence cannot be null, but can be empty","lastModifiedDate":"2022-10-12"},{"lineNumber":51,"author":{"gitId":"NicholasTYD"},"content":"     * @param sequence cannot be null, but can be empty","lastModifiedDate":"2022-10-12"},{"lineNumber":52,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-12"},{"lineNumber":53,"author":{"gitId":"NicholasTYD"},"content":"    public static boolean containsIgnoreCase(String sentence, String sequence) {","lastModifiedDate":"2022-10-12"},{"lineNumber":54,"author":{"gitId":"NicholasTYD"},"content":"        requireNonNull(sentence);","lastModifiedDate":"2022-10-10"},{"lineNumber":55,"author":{"gitId":"NicholasTYD"},"content":"        requireNonNull(sequence);","lastModifiedDate":"2022-10-12"},{"lineNumber":56,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":57,"author":{"gitId":"NicholasTYD"},"content":"        // @author NicholasTYD-reused","lastModifiedDate":"2022-11-03"},{"lineNumber":58,"author":{"gitId":"NicholasTYD"},"content":"        // Reused from https://stackoverflow.com/a/86832","lastModifiedDate":"2022-11-03"},{"lineNumber":59,"author":{"gitId":"NicholasTYD"},"content":"        // with renaming of variables","lastModifiedDate":"2022-11-03"},{"lineNumber":60,"author":{"gitId":"NicholasTYD"},"content":"        return Pattern.compile(Pattern.quote(sequence), Pattern.CASE_INSENSITIVE).matcher(sentence).find();","lastModifiedDate":"2022-10-12"},{"lineNumber":61,"author":{"gitId":"NicholasTYD"},"content":"        // @author","lastModifiedDate":"2022-11-03"},{"lineNumber":62,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":63,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":64,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-25"},{"lineNumber":65,"author":{"gitId":"NicholasTYD"},"content":"     * Returns true if {@code tagSet} has all the {@code strings} in it.","lastModifiedDate":"2022-10-25"},{"lineNumber":66,"author":{"gitId":"NicholasTYD"},"content":"     *","lastModifiedDate":"2022-10-25"},{"lineNumber":67,"author":{"gitId":"NicholasTYD"},"content":"     * @param tagSet cannot be null","lastModifiedDate":"2022-10-25"},{"lineNumber":68,"author":{"gitId":"NicholasTYD"},"content":"     * @param strings cannot be null","lastModifiedDate":"2022-10-25"},{"lineNumber":69,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-25"},{"lineNumber":70,"author":{"gitId":"NicholasTYD"},"content":"    public static boolean containsAllTagsIgnoreCase(Set\u003cTag\u003e tagSet, List\u003cString\u003e strings) {","lastModifiedDate":"2022-10-25"},{"lineNumber":71,"author":{"gitId":"NicholasTYD"},"content":"        requireNonNull(tagSet);","lastModifiedDate":"2022-10-25"},{"lineNumber":72,"author":{"gitId":"NicholasTYD"},"content":"        requireNonNull(strings);","lastModifiedDate":"2022-10-25"},{"lineNumber":73,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":74,"author":{"gitId":"NicholasTYD"},"content":"        List\u003cString\u003e tagListToCheckInUpperCase \u003d","lastModifiedDate":"2022-10-25"},{"lineNumber":75,"author":{"gitId":"NicholasTYD"},"content":"                tagSet.stream().map(tag -\u003e tag.toString().toUpperCase()).collect(Collectors.toList());","lastModifiedDate":"2022-10-25"},{"lineNumber":76,"author":{"gitId":"NicholasTYD"},"content":"        List\u003cString\u003e stringsToSearchInUpperCase \u003d","lastModifiedDate":"2022-10-25"},{"lineNumber":77,"author":{"gitId":"NicholasTYD"},"content":"                strings.stream().map(String::toUpperCase).collect(Collectors.toList());","lastModifiedDate":"2022-10-25"},{"lineNumber":78,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":79,"author":{"gitId":"NicholasTYD"},"content":"        return tagListToCheckInUpperCase.containsAll(stringsToSearchInUpperCase);","lastModifiedDate":"2022-10-25"},{"lineNumber":80,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-25"},{"lineNumber":81,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":82,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-13"},{"lineNumber":83,"author":{"gitId":"NicholasTYD"},"content":"     * Removes redundant spaces in a string.","lastModifiedDate":"2022-10-13"},{"lineNumber":84,"author":{"gitId":"NicholasTYD"},"content":"     * E.g \"     test    string  \" becomes \"test string\".","lastModifiedDate":"2022-10-13"},{"lineNumber":85,"author":{"gitId":"NicholasTYD"},"content":"     * @param str a string","lastModifiedDate":"2022-10-13"},{"lineNumber":86,"author":{"gitId":"NicholasTYD"},"content":"     * @return A string with redundant spaces removed.","lastModifiedDate":"2022-10-13"},{"lineNumber":87,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-13"},{"lineNumber":88,"author":{"gitId":"NicholasTYD"},"content":"    public static String removeRedundantSpaces(String str) {","lastModifiedDate":"2022-10-13"},{"lineNumber":89,"author":{"gitId":"NicholasTYD"},"content":"        return str.trim().replaceAll(\"\\\\s+\", \" \");","lastModifiedDate":"2022-10-13"},{"lineNumber":90,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-13"},{"lineNumber":91,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Returns a detailed message of the t, including the stack trace.","lastModifiedDate":"2016-09-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public static String getDetails(Throwable t) {","lastModifiedDate":"2016-09-21"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        requireNonNull(t);","lastModifiedDate":"2017-05-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        StringWriter sw \u003d new StringWriter();","lastModifiedDate":"2016-09-21"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));","lastModifiedDate":"2016-09-21"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();","lastModifiedDate":"2016-09-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-22"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer","lastModifiedDate":"2017-06-02"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e","lastModifiedDate":"2017-06-02"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Will return false for any other non-null string input","lastModifiedDate":"2017-06-02"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)","lastModifiedDate":"2017-06-02"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code s} is null.","lastModifiedDate":"2017-06-02"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-22"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {","lastModifiedDate":"2017-06-02"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        requireNonNull(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-06-02"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            int value \u003d Integer.parseInt(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)","lastModifiedDate":"2017-06-02"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2017-06-02"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-06-02"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-02"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":119,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"NicholasTYD":51,"-":68}},{"path":"src/main/java/seedu/address/logic/CommandHistory.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.logic;","lastModifiedDate":"2022-10-21"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-21"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-21"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import java.util.Collections;","lastModifiedDate":"2022-10-21"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"import java.util.List;","lastModifiedDate":"2022-10-21"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"/**","lastModifiedDate":"2022-10-21"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":" * A class used to keep track of the recent commands made by user.","lastModifiedDate":"2022-10-21"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":" */","lastModifiedDate":"2022-10-21"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"public class CommandHistory {","lastModifiedDate":"2022-10-21"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"    private final Integer maxCapacity \u003d 10;","lastModifiedDate":"2022-10-21"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"    private Integer currentIndex \u003d 0;","lastModifiedDate":"2022-10-23"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"    private final List\u003cString\u003e history \u003d new ArrayList\u003c\u003e(maxCapacity);","lastModifiedDate":"2022-10-21"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"     * Adds the command text into the history and removes the furthest text if applicable.","lastModifiedDate":"2022-10-21"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"     *","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"     * @param command The command text to be added.","lastModifiedDate":"2022-10-21"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"    public void addCommand(String command) {","lastModifiedDate":"2022-11-05"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"        requireNonNull(command);","lastModifiedDate":"2022-10-21"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":"        if (history.size() \u003d\u003d maxCapacity) {","lastModifiedDate":"2022-10-21"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"            history.remove(0);","lastModifiedDate":"2022-10-21"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"        history.add(command);","lastModifiedDate":"2022-10-21"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"        currentIndex \u003d history.size();","lastModifiedDate":"2022-10-23"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-23"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"    public String getDecrementCommand() {","lastModifiedDate":"2022-10-23"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"        currentIndex -\u003d 1;","lastModifiedDate":"2022-10-23"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"        if (currentIndex \u003c 0) {","lastModifiedDate":"2022-10-23"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"            currentIndex \u003d history.size() - 1;","lastModifiedDate":"2022-10-26"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-23"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"        return history.isEmpty() ? \"\" : history.get(currentIndex);","lastModifiedDate":"2022-10-23"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-23"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"    public String getIncrementCommand() {","lastModifiedDate":"2022-10-23"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"        currentIndex +\u003d 1;","lastModifiedDate":"2022-10-23"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"        if (currentIndex \u003e\u003d history.size()) {","lastModifiedDate":"2022-10-23"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"            currentIndex \u003d 0;","lastModifiedDate":"2022-10-26"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-23"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"        return history.isEmpty() ? \"\" : history.get(currentIndex);","lastModifiedDate":"2022-10-23"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":46,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"    public String getHistoryString() {","lastModifiedDate":"2022-10-21"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e(history);","lastModifiedDate":"2022-10-21"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"        Collections.reverse(list);","lastModifiedDate":"2022-10-21"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"        return String.join(\"\\n\", list);","lastModifiedDate":"2022-10-21"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":52,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":53,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-23"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"     * Resets the index to the list size when starting up the application","lastModifiedDate":"2022-11-05"},{"lineNumber":55,"author":{"gitId":"JovonLim"},"content":"     * and returns the commandHistory.","lastModifiedDate":"2022-10-26"},{"lineNumber":56,"author":{"gitId":"JovonLim"},"content":"     *","lastModifiedDate":"2022-10-23"},{"lineNumber":57,"author":{"gitId":"JovonLim"},"content":"     * @return The commandHistory with the index reset.","lastModifiedDate":"2022-10-23"},{"lineNumber":58,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-23"},{"lineNumber":59,"author":{"gitId":"JovonLim"},"content":"    public CommandHistory getCommandHistory() {","lastModifiedDate":"2022-11-05"},{"lineNumber":60,"author":{"gitId":"JovonLim"},"content":"        if (history.size() \u003e\u003d 1) {","lastModifiedDate":"2022-10-23"},{"lineNumber":61,"author":{"gitId":"JovonLim"},"content":"            this.currentIndex \u003d history.size();","lastModifiedDate":"2022-10-23"},{"lineNumber":62,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-23"},{"lineNumber":63,"author":{"gitId":"JovonLim"},"content":"        return this;","lastModifiedDate":"2022-10-23"},{"lineNumber":64,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-23"},{"lineNumber":65,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-23"},{"lineNumber":66,"author":{"gitId":"JovonLim"},"content":"    public List\u003cString\u003e getHistory() {","lastModifiedDate":"2022-10-21"},{"lineNumber":67,"author":{"gitId":"JovonLim"},"content":"        return history;","lastModifiedDate":"2022-10-21"},{"lineNumber":68,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":69,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-21"}],"authorContributionMap":{"JovonLim":69}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":11,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Returns the AddressBook.","lastModifiedDate":"2018-12-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @see seedu.address.model.Model#getAddressBook()","lastModifiedDate":"2018-12-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */","lastModifiedDate":"2017-09-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":37,"author":{"gitId":"pwjj2000"},"content":"    /** Returns an unmodifiable view of the filtered list of appointments */","lastModifiedDate":"2022-10-06"},{"lineNumber":38,"author":{"gitId":"pwjj2000"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();","lastModifiedDate":"2022-10-06"},{"lineNumber":39,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":55,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":56,"author":{"gitId":"JovonLim"},"content":"     * Returns the history of the user recent commands.","lastModifiedDate":"2022-10-21"},{"lineNumber":57,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":58,"author":{"gitId":"JovonLim"},"content":"    CommandHistory getCommandHistory();","lastModifiedDate":"2022-10-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"JovonLim":5,"-":50,"pwjj2000":4}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":17,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"    private final CommandHistory commandHistory;","lastModifiedDate":"2022-10-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":36,"author":{"gitId":"pwjj2000"},"content":"     * @param model Model of the app.","lastModifiedDate":"2022-11-06"},{"lineNumber":37,"author":{"gitId":"pwjj2000"},"content":"     * @param storage Storage of the app.","lastModifiedDate":"2022-11-06"},{"lineNumber":38,"author":{"gitId":"pwjj2000"},"content":"     * @param commandHistory Command history of the app.","lastModifiedDate":"2022-11-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"    public LogicManager(Model model, Storage storage, CommandHistory commandHistory) {","lastModifiedDate":"2022-10-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"        this.commandHistory \u003d commandHistory;","lastModifiedDate":"2022-10-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();","lastModifiedDate":"2018-01-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2017-07-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"        commandHistory.addCommand(commandText);","lastModifiedDate":"2022-11-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"JovonLim"},"content":"            storage.saveCommandHistory(commandHistory);","lastModifiedDate":"2022-10-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2018-12-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return model.getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();","lastModifiedDate":"2016-09-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":76,"author":{"gitId":"pwjj2000"},"content":"    @Override","lastModifiedDate":"2022-10-06"},{"lineNumber":77,"author":{"gitId":"pwjj2000"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2022-10-06"},{"lineNumber":78,"author":{"gitId":"pwjj2000"},"content":"        return model.getFilteredAppointmentList();","lastModifiedDate":"2022-10-06"},{"lineNumber":79,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":80,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":96,"author":{"gitId":"JovonLim"},"content":"    @Override","lastModifiedDate":"2022-10-21"},{"lineNumber":97,"author":{"gitId":"JovonLim"},"content":"    public CommandHistory getCommandHistory() {","lastModifiedDate":"2022-10-21"},{"lineNumber":98,"author":{"gitId":"JovonLim"},"content":"        return commandHistory;","lastModifiedDate":"2022-10-21"},{"lineNumber":99,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"JovonLim":10,"-":80,"pwjj2000":10}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-01-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"WingKei67"},"content":" * Adds a patient to idENTify.","lastModifiedDate":"2022-10-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"WingKei67"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a patient to idENTify. \"","lastModifiedDate":"2022-10-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2017-06-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2017-05-09"},{"lineNumber":25,"author":{"gitId":"WingKei67"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2022-10-25"},{"lineNumber":26,"author":{"gitId":"WingKei67"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2022-10-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2017-06-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2017-05-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":33,"author":{"gitId":"WingKei67"},"content":"            + PREFIX_TAG + \"ear \"","lastModifiedDate":"2022-10-25"},{"lineNumber":34,"author":{"gitId":"WingKei67"},"content":"            + PREFIX_TAG + \"nose \";","lastModifiedDate":"2022-10-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"WingKei67"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New patient added: %1$s\";","lastModifiedDate":"2022-10-25"},{"lineNumber":37,"author":{"gitId":"WingKei67"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This patient already exists in idENTify\";","lastModifiedDate":"2022-10-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private final Person toAdd;","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}","lastModifiedDate":"2018-01-10"},{"lineNumber":43,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":44,"author":{"gitId":"pwjj2000"},"content":"     * @param person Patient to add to the list of patients.","lastModifiedDate":"2022-11-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        toAdd \u003d person;","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"WingKei67":8,"-":59,"pwjj2000":2}},{"path":"src/main/java/seedu/address/logic/commands/BookCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-01"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-01"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-10-01"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REASON;","lastModifiedDate":"2022-10-01"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RECURRING_PERIOD;","lastModifiedDate":"2022-10-14"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-10-25"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"import java.util.List;","lastModifiedDate":"2022-10-01"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-01"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-01"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-01"},{"lineNumber":14,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.AppointmentList;","lastModifiedDate":"2022-10-19"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-01"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-01"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"/**","lastModifiedDate":"2022-10-01"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":" * Books an appointment for the given patient.","lastModifiedDate":"2022-10-01"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":" */","lastModifiedDate":"2022-10-01"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"public class BookCommand extends Command {","lastModifiedDate":"2022-10-01"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":"    public static final String COMMAND_WORD \u003d \"book\";","lastModifiedDate":"2022-10-01"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Books an appointment for the patient.\\n\"","lastModifiedDate":"2022-11-05"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2022-11-05"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"            + PREFIX_REASON + \"REASON \"","lastModifiedDate":"2022-10-01"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"            + PREFIX_DATE + \"DATE \"","lastModifiedDate":"2022-10-01"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"            + \"[\" + PREFIX_RECURRING_PERIOD + \"TIME PERIOD] \"","lastModifiedDate":"2022-11-01"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2022-11-05"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"            + \"Example: \" + COMMAND_WORD + \" 3 \"","lastModifiedDate":"2022-10-01"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"            + PREFIX_REASON + \"Sore Throat \"","lastModifiedDate":"2022-10-14"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"            + PREFIX_DATE + \"2022-10-12 16:30 \"","lastModifiedDate":"2022-10-14"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"            + PREFIX_RECURRING_PERIOD + \"1Y2M3D \"","lastModifiedDate":"2022-10-25"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"            + PREFIX_TAG + \"Ear\";","lastModifiedDate":"2022-10-25"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"    public static final String MESSAGE_BOOK_APPOINTMENT_SUCCESS \u003d \"Booked Appointment for Person: %1$s\";","lastModifiedDate":"2022-10-01"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"This person already booked an appointment at this time\";","lastModifiedDate":"2022-10-01"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"    private final Appointment appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"    private final Index targetIndex;","lastModifiedDate":"2022-10-01"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":45,"author":{"gitId":"pwjj2000"},"content":"     * Creates a BookCommand with the given patient index and appointment.","lastModifiedDate":"2022-11-06"},{"lineNumber":46,"author":{"gitId":"JovonLim"},"content":"     *","lastModifiedDate":"2022-10-01"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"     * @param targetIndex The given index to retrieve the patient.","lastModifiedDate":"2022-10-01"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"     * @param appointment The given appointment to book for the patient.","lastModifiedDate":"2022-10-01"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"    public BookCommand(Index targetIndex, Appointment appointment) {","lastModifiedDate":"2022-10-01"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2022-10-01"},{"lineNumber":52,"author":{"gitId":"JovonLim"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2022-10-01"},{"lineNumber":53,"author":{"gitId":"JovonLim"},"content":"        this.appointment \u003d appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":55,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":56,"author":{"gitId":"JovonLim"},"content":"    @Override","lastModifiedDate":"2022-10-01"},{"lineNumber":57,"author":{"gitId":"JovonLim"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-01"},{"lineNumber":58,"author":{"gitId":"JovonLim"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-01"},{"lineNumber":59,"author":{"gitId":"JovonLim"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2022-10-01"},{"lineNumber":60,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":61,"author":{"gitId":"JovonLim"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2022-10-01"},{"lineNumber":62,"author":{"gitId":"JovonLim"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-01"},{"lineNumber":63,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":64,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":65,"author":{"gitId":"JovonLim"},"content":"        Person personToBookFor \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2022-10-01"},{"lineNumber":66,"author":{"gitId":"pwjj2000"},"content":"        AppointmentList.addAppointment(model, personToBookFor, appointment);","lastModifiedDate":"2022-10-19"},{"lineNumber":67,"author":{"gitId":"JovonLim"},"content":"        return new CommandResult(String.format(MESSAGE_BOOK_APPOINTMENT_SUCCESS, personToBookFor));","lastModifiedDate":"2022-10-11"},{"lineNumber":68,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":69,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":70,"author":{"gitId":"JovonLim"},"content":"    @Override","lastModifiedDate":"2022-10-11"},{"lineNumber":71,"author":{"gitId":"JovonLim"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-11"},{"lineNumber":72,"author":{"gitId":"JovonLim"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-11"},{"lineNumber":73,"author":{"gitId":"JovonLim"},"content":"                || (other instanceof BookCommand // instanceof handles nulls","lastModifiedDate":"2022-10-11"},{"lineNumber":74,"author":{"gitId":"JovonLim"},"content":"                \u0026\u0026 targetIndex.equals(((BookCommand) other).targetIndex)","lastModifiedDate":"2022-10-11"},{"lineNumber":75,"author":{"gitId":"JovonLim"},"content":"                \u0026\u0026 appointment.isSameAppointment(((BookCommand) other).appointment)); // state check","lastModifiedDate":"2022-10-11"},{"lineNumber":76,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":77,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-01"}],"authorContributionMap":{"JovonLim":74,"pwjj2000":3}},{"path":"src/main/java/seedu/address/logic/commands/CancelCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"guanzhou03"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-01"},{"lineNumber":2,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":3,"author":{"gitId":"guanzhou03"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-04"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":5,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-01"},{"lineNumber":6,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-01"},{"lineNumber":7,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.AppointmentList;","lastModifiedDate":"2022-10-19"},{"lineNumber":8,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-01"},{"lineNumber":9,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":10,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-01"},{"lineNumber":11,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"/**","lastModifiedDate":"2022-10-01"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":" * A class that encapsulates the functionality of cancelling a patient\u0027s appointment.","lastModifiedDate":"2022-10-01"},{"lineNumber":14,"author":{"gitId":"guanzhou03"},"content":" */","lastModifiedDate":"2022-10-01"},{"lineNumber":15,"author":{"gitId":"guanzhou03"},"content":"public class CancelCommand extends SelectAppointmentCommand {","lastModifiedDate":"2022-10-09"},{"lineNumber":16,"author":{"gitId":"guanzhou03"},"content":"    public static final String COMMAND_WORD \u003d \"cancel\";","lastModifiedDate":"2022-10-01"},{"lineNumber":17,"author":{"gitId":"guanzhou03"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Cancels an appointment in the appointment list.\\n\"","lastModifiedDate":"2022-11-07"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"            + \"Parameters: APPOINTMENT_INDEX (must be a valid appointment index and positive integer)\\n\"","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"            + \"Example: \" + COMMAND_WORD + \" 2\";","lastModifiedDate":"2022-10-18"},{"lineNumber":20,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":21,"author":{"gitId":"guanzhou03"},"content":"    public static final String MESSAGE_CANCEL_APPOINTMENT_SUCCESS \u003d \"Cancelled appointment for: \";","lastModifiedDate":"2022-10-31"},{"lineNumber":22,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":23,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":24,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":25,"author":{"gitId":"guanzhou03"},"content":"     * Creates a cancel command that specifies the patient and appointment index.","lastModifiedDate":"2022-10-01"},{"lineNumber":26,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"     * @param apptIndex The index of the appointment we want to cancel for in the appointment list.","lastModifiedDate":"2022-10-18"},{"lineNumber":28,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"    public CancelCommand(Index apptIndex) {","lastModifiedDate":"2022-10-18"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"        super(apptIndex);","lastModifiedDate":"2022-10-18"},{"lineNumber":31,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":32,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":33,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":34,"author":{"gitId":"guanzhou03"},"content":"     * Removes the appointment in the specified index for the specified patient.","lastModifiedDate":"2022-10-01"},{"lineNumber":35,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":36,"author":{"gitId":"guanzhou03"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2022-10-01"},{"lineNumber":37,"author":{"gitId":"guanzhou03"},"content":"     * @return Feedback to the user in the form of a success message.","lastModifiedDate":"2022-10-01"},{"lineNumber":38,"author":{"gitId":"guanzhou03"},"content":"     * @throws CommandException If the input index is out of valid range.","lastModifiedDate":"2022-10-01"},{"lineNumber":39,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":40,"author":{"gitId":"guanzhou03"},"content":"    @Override","lastModifiedDate":"2022-10-01"},{"lineNumber":41,"author":{"gitId":"guanzhou03"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-01"},{"lineNumber":42,"author":{"gitId":"guanzhou03"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-01"},{"lineNumber":43,"author":{"gitId":"guanzhou03"},"content":"        Person patientToCancelAppt \u003d getTargetPerson(model);","lastModifiedDate":"2022-10-09"},{"lineNumber":44,"author":{"gitId":"guanzhou03"},"content":"        Appointment toBeCancelledAppt \u003d getTargetAppointment(model);","lastModifiedDate":"2022-10-09"},{"lineNumber":45,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":46,"author":{"gitId":"pwjj2000"},"content":"        AppointmentList.cancelAppointment(model, patientToCancelAppt, toBeCancelledAppt);","lastModifiedDate":"2022-10-19"},{"lineNumber":47,"author":{"gitId":"guanzhou03"},"content":"        return new CommandResult(MESSAGE_CANCEL_APPOINTMENT_SUCCESS","lastModifiedDate":"2022-10-31"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"                + patientToCancelAppt.getName());","lastModifiedDate":"2022-10-18"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-18"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":51,"author":{"gitId":"guanzhou03"},"content":"    @Override","lastModifiedDate":"2022-10-09"},{"lineNumber":52,"author":{"gitId":"guanzhou03"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-09"},{"lineNumber":53,"author":{"gitId":"guanzhou03"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-09"},{"lineNumber":54,"author":{"gitId":"guanzhou03"},"content":"            return true;","lastModifiedDate":"2022-10-09"},{"lineNumber":55,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-09"},{"lineNumber":56,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":57,"author":{"gitId":"guanzhou03"},"content":"        if (!(other instanceof CancelCommand)) {","lastModifiedDate":"2022-10-09"},{"lineNumber":58,"author":{"gitId":"guanzhou03"},"content":"            return false;","lastModifiedDate":"2022-10-09"},{"lineNumber":59,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-09"},{"lineNumber":60,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":61,"author":{"gitId":"guanzhou03"},"content":"        CancelCommand otherCommand \u003d (CancelCommand) other;","lastModifiedDate":"2022-10-09"},{"lineNumber":62,"author":{"gitId":"NicholasTYD"},"content":"        return hasSameIndexOfAppointment(otherCommand);","lastModifiedDate":"2022-10-18"},{"lineNumber":63,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":64,"author":{"gitId":"guanzhou03"},"content":"}","lastModifiedDate":"2022-10-01"}],"authorContributionMap":{"NicholasTYD":6,"JovonLim":4,"guanzhou03":50,"pwjj2000":4}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Clears the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"WingKei67"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"idENTify has been cleared!\";","lastModifiedDate":"2022-10-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        model.setAddressBook(new AddressBook());","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"WingKei67":1,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-12-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents the result of a command execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResult {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /** Help information should be shown to the user. */","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final boolean showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** The application should exit. */","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final boolean exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified fields.","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":23,"author":{"gitId":"pwjj2000"},"content":"     * @param feedbackToUser Response to user.","lastModifiedDate":"2022-11-06"},{"lineNumber":24,"author":{"gitId":"pwjj2000"},"content":"     * @param showHelp Whether result is from a {@code HelpCommand}.","lastModifiedDate":"2022-11-06"},{"lineNumber":25,"author":{"gitId":"pwjj2000"},"content":"     * @param exit Whether result is from an {@code ExitCommand}.","lastModifiedDate":"2022-11-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.showHelp \u003d showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * and other fields set to their default value.","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":37,"author":{"gitId":"pwjj2000"},"content":"     * @param feedbackToUser Response to user.","lastModifiedDate":"2022-11-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this(feedbackToUser, false, false);","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public boolean isExit() {","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-12-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-12-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp","lastModifiedDate":"2018-12-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return Objects.hash(feedbackToUser, showHelp, exit);","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"-":71,"pwjj2000":6}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"guanzhou03"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-09-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"WingKei67"},"content":" * Deletes a person identified using it\u0027s displayed index from idENTify.","lastModifiedDate":"2022-10-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"guanzhou03"},"content":"            + \": Deletes a patient identified by the index number used in the displayed patient list\\n\"","lastModifiedDate":"2022-10-31"},{"lineNumber":23,"author":{"gitId":"guanzhou03"},"content":"            + \"or a range (inclusive) of patients to be deleted in the patient list.\\n\"","lastModifiedDate":"2022-10-31"},{"lineNumber":24,"author":{"gitId":"guanzhou03"},"content":"            + \"Patient\u0027s appointments are automatically removed after the patient is deleted.\\n\"","lastModifiedDate":"2022-10-31"},{"lineNumber":25,"author":{"gitId":"guanzhou03"},"content":"            + \"Parameters: INDEX [END_INDEX] (must be a positive integer)\\n\"","lastModifiedDate":"2022-10-31"},{"lineNumber":26,"author":{"gitId":"guanzhou03"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\\n\"","lastModifiedDate":"2022-10-31"},{"lineNumber":27,"author":{"gitId":"guanzhou03"},"content":"            + \"Example: \" + COMMAND_WORD + \" 2 5\";","lastModifiedDate":"2022-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Index targetIndex;","lastModifiedDate":"2017-06-27"},{"lineNumber":30,"author":{"gitId":"guanzhou03"},"content":"    private Index endIndex \u003d null;","lastModifiedDate":"2022-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {","lastModifiedDate":"2017-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2016-09-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-10-19"},{"lineNumber":37,"author":{"gitId":"guanzhou03"},"content":"     * Overloaded constructor to allow deletion of patients in a range.","lastModifiedDate":"2022-10-19"},{"lineNumber":38,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":39,"author":{"gitId":"guanzhou03"},"content":"     * @param startIndex Patient index to start deletion.","lastModifiedDate":"2022-10-19"},{"lineNumber":40,"author":{"gitId":"guanzhou03"},"content":"     * @param endIndex Index of last patient to be deleted.","lastModifiedDate":"2022-10-19"},{"lineNumber":41,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-10-19"},{"lineNumber":42,"author":{"gitId":"guanzhou03"},"content":"    public DeleteCommand(Index startIndex, Index endIndex) {","lastModifiedDate":"2022-10-19"},{"lineNumber":43,"author":{"gitId":"guanzhou03"},"content":"        this.targetIndex \u003d startIndex;","lastModifiedDate":"2022-10-19"},{"lineNumber":44,"author":{"gitId":"guanzhou03"},"content":"        this.endIndex \u003d endIndex;","lastModifiedDate":"2022-10-19"},{"lineNumber":45,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-19"},{"lineNumber":46,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"guanzhou03"},"content":"        if (endIndex \u003d\u003d null) {","lastModifiedDate":"2022-10-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":58,"author":{"gitId":"JovonLim"},"content":"            model.deleteAppointments(personToDelete.getAppointments());","lastModifiedDate":"2022-10-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            model.deletePerson(personToDelete);","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"guanzhou03"},"content":"            return new CommandResult(String.format(Messages.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));","lastModifiedDate":"2022-10-19"},{"lineNumber":61,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-19"},{"lineNumber":62,"author":{"gitId":"guanzhou03"},"content":"        int start \u003d targetIndex.getZeroBased();","lastModifiedDate":"2022-10-19"},{"lineNumber":63,"author":{"gitId":"guanzhou03"},"content":"        int end \u003d endIndex.getZeroBased();","lastModifiedDate":"2022-10-19"},{"lineNumber":64,"author":{"gitId":"guanzhou03"},"content":"        checkValidIndices(start, end, lastShownList);","lastModifiedDate":"2022-10-31"},{"lineNumber":65,"author":{"gitId":"guanzhou03"},"content":"        List\u003cPerson\u003e personsToDelete \u003d new ArrayList\u003c\u003e(lastShownList.subList(start, end + 1));","lastModifiedDate":"2022-10-19"},{"lineNumber":66,"author":{"gitId":"guanzhou03"},"content":"        for (Person personToDelete: personsToDelete) {","lastModifiedDate":"2022-10-19"},{"lineNumber":67,"author":{"gitId":"guanzhou03"},"content":"            model.deletePerson(personToDelete);","lastModifiedDate":"2022-10-19"},{"lineNumber":68,"author":{"gitId":"guanzhou03"},"content":"            model.deleteAppointments(personToDelete.getAppointments());","lastModifiedDate":"2022-10-19"},{"lineNumber":69,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-19"},{"lineNumber":70,"author":{"gitId":"guanzhou03"},"content":"        return new CommandResult(Messages.MESSAGE_DELETE_PERSONS_SUCCESS);","lastModifiedDate":"2022-10-19"},{"lineNumber":71,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-31"},{"lineNumber":72,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":73,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-10-31"},{"lineNumber":74,"author":{"gitId":"guanzhou03"},"content":"     * Checks whether the given indices are valid (start \u003c\u003d end and within list size)","lastModifiedDate":"2022-10-31"},{"lineNumber":75,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":76,"author":{"gitId":"pwjj2000"},"content":"     * @param start First index in given range to delete.","lastModifiedDate":"2022-11-06"},{"lineNumber":77,"author":{"gitId":"pwjj2000"},"content":"     * @param end Last index in given range to delete.","lastModifiedDate":"2022-11-06"},{"lineNumber":78,"author":{"gitId":"pwjj2000"},"content":"     * @param currList Current list of patients.","lastModifiedDate":"2022-11-06"},{"lineNumber":79,"author":{"gitId":"pwjj2000"},"content":"     * @throws CommandException If range given by start and end is invalid.","lastModifiedDate":"2022-11-06"},{"lineNumber":80,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-10-31"},{"lineNumber":81,"author":{"gitId":"guanzhou03"},"content":"    public void checkValidIndices(int start, int end, List\u003cPerson\u003e currList) throws CommandException {","lastModifiedDate":"2022-10-31"},{"lineNumber":82,"author":{"gitId":"guanzhou03"},"content":"        if (start \u003e end || end \u003e currList.size() - 1) {","lastModifiedDate":"2022-10-31"},{"lineNumber":83,"author":{"gitId":"guanzhou03"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-31"},{"lineNumber":84,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-31"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"WingKei67":1,"JovonLim":1,"-":46,"guanzhou03":39,"pwjj2000":6}},{"path":"src/main/java/seedu/address/logic/commands/EditAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-08"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-10-08"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REASON;","lastModifiedDate":"2022-10-08"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RECURRING_PERIOD;","lastModifiedDate":"2022-10-14"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-10-25"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-08"},{"lineNumber":9,"author":{"gitId":"pwjj2000"},"content":"import java.util.Collections;","lastModifiedDate":"2022-10-21"},{"lineNumber":10,"author":{"gitId":"pwjj2000"},"content":"import java.util.HashSet;","lastModifiedDate":"2022-10-21"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"import java.util.List;","lastModifiedDate":"2022-10-08"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"import java.util.Optional;","lastModifiedDate":"2022-10-08"},{"lineNumber":13,"author":{"gitId":"pwjj2000"},"content":"import java.util.Set;","lastModifiedDate":"2022-10-21"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-08"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2022-10-08"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-08"},{"lineNumber":18,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.AppointmentList;","lastModifiedDate":"2022-10-19"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-08"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-08"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-18"},{"lineNumber":22,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2022-10-21"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"/**","lastModifiedDate":"2022-10-08"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":" * Edits a given appointment\u0027s details.","lastModifiedDate":"2022-10-08"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":" */","lastModifiedDate":"2022-10-08"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"public class EditAppointmentCommand extends SelectAppointmentCommand {","lastModifiedDate":"2022-10-18"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2022-10-08"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"    public static final String DESCRIPTOR_WORD \u003d \"appts\";","lastModifiedDate":"2022-10-08"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"    public static final String MESSAGE_EDIT_APPOINTMENT_SUCCESS \u003d \"Edited Appointment for %1$s: %2$s\";","lastModifiedDate":"2022-10-08"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + DESCRIPTOR_WORD","lastModifiedDate":"2022-10-08"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"            + \": Edits the appointment details of the person identified \"","lastModifiedDate":"2022-10-08"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"            + \"by the appointmentIndex number used in the displayed appointment list. \"","lastModifiedDate":"2022-10-15"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2022-10-08"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"            + \"Parameters: APPOINTMENT_INDEX (must be a positive integer) \"","lastModifiedDate":"2022-10-18"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"            + \"[\" + PREFIX_REASON + \"REASON] \"","lastModifiedDate":"2022-10-08"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"            + \"[\" + PREFIX_DATE + \"DATE] \"","lastModifiedDate":"2022-10-08"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"            + \"[\" + PREFIX_RECURRING_PERIOD + \"TIME PERIOD] \"","lastModifiedDate":"2022-10-14"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2022-11-05"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + DESCRIPTOR_WORD + \" 1 \"","lastModifiedDate":"2022-10-08"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"            + PREFIX_REASON + \"Sore Throat \"","lastModifiedDate":"2022-10-08"},{"lineNumber":46,"author":{"gitId":"JovonLim"},"content":"            + PREFIX_DATE + \"2022-10-12 16:30 \"","lastModifiedDate":"2022-10-14"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"            + PREFIX_RECURRING_PERIOD + \"1Y0M0D \"","lastModifiedDate":"2022-10-25"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"            + PREFIX_TAG + \"Ear\";","lastModifiedDate":"2022-10-25"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2022-10-08"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d","lastModifiedDate":"2022-10-08"},{"lineNumber":52,"author":{"gitId":"JovonLim"},"content":"            \"This person already booked an appointment at this time\";","lastModifiedDate":"2022-10-08"},{"lineNumber":53,"author":{"gitId":"JovonLim"},"content":"    private final EditAppointmentDescriptor editAppointmentDescriptor;","lastModifiedDate":"2022-10-08"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":55,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-08"},{"lineNumber":56,"author":{"gitId":"JovonLim"},"content":"     * Creates an EditAppointmentCommand with the given appointment index,","lastModifiedDate":"2022-10-15"},{"lineNumber":57,"author":{"gitId":"JovonLim"},"content":"     * and the editAppointmentDescriptor.","lastModifiedDate":"2022-10-08"},{"lineNumber":58,"author":{"gitId":"JovonLim"},"content":"     *","lastModifiedDate":"2022-10-08"},{"lineNumber":59,"author":{"gitId":"JovonLim"},"content":"     * @param indexOfAppointment The index of the appointment to edit.","lastModifiedDate":"2022-10-08"},{"lineNumber":60,"author":{"gitId":"JovonLim"},"content":"     * @param editAppointmentDescriptor The descriptor that contains the edited details.","lastModifiedDate":"2022-10-08"},{"lineNumber":61,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-08"},{"lineNumber":62,"author":{"gitId":"JovonLim"},"content":"    public EditAppointmentCommand(Index indexOfAppointment,","lastModifiedDate":"2022-10-15"},{"lineNumber":63,"author":{"gitId":"JovonLim"},"content":"                                  EditAppointmentDescriptor editAppointmentDescriptor) {","lastModifiedDate":"2022-10-08"},{"lineNumber":64,"author":{"gitId":"JovonLim"},"content":"        super(indexOfAppointment);","lastModifiedDate":"2022-10-18"},{"lineNumber":65,"author":{"gitId":"JovonLim"},"content":"        this.editAppointmentDescriptor \u003d editAppointmentDescriptor;","lastModifiedDate":"2022-10-08"},{"lineNumber":66,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":67,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":68,"author":{"gitId":"JovonLim"},"content":"    @Override","lastModifiedDate":"2022-10-08"},{"lineNumber":69,"author":{"gitId":"JovonLim"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-08"},{"lineNumber":70,"author":{"gitId":"JovonLim"},"content":"        Appointment targetAppointment \u003d getTargetAppointment(model);","lastModifiedDate":"2022-10-18"},{"lineNumber":71,"author":{"gitId":"JovonLim"},"content":"        Person person \u003d getTargetPerson(model);","lastModifiedDate":"2022-10-18"},{"lineNumber":72,"author":{"gitId":"pwjj2000"},"content":"        Appointment editedAppointment \u003d","lastModifiedDate":"2022-10-19"},{"lineNumber":73,"author":{"gitId":"pwjj2000"},"content":"                AppointmentList.editAppointment(model, person, targetAppointment, editAppointmentDescriptor);","lastModifiedDate":"2022-10-19"},{"lineNumber":74,"author":{"gitId":"JovonLim"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_APPOINTMENT_SUCCESS,","lastModifiedDate":"2022-10-15"},{"lineNumber":75,"author":{"gitId":"JovonLim"},"content":"                person.getName(), editedAppointment));","lastModifiedDate":"2022-10-18"},{"lineNumber":76,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":77,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":78,"author":{"gitId":"JovonLim"},"content":"    @Override","lastModifiedDate":"2022-10-08"},{"lineNumber":79,"author":{"gitId":"JovonLim"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-08"},{"lineNumber":80,"author":{"gitId":"JovonLim"},"content":"        // short circuit if same object","lastModifiedDate":"2022-10-08"},{"lineNumber":81,"author":{"gitId":"JovonLim"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-08"},{"lineNumber":82,"author":{"gitId":"JovonLim"},"content":"            return true;","lastModifiedDate":"2022-10-08"},{"lineNumber":83,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":84,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":85,"author":{"gitId":"JovonLim"},"content":"        // instanceof handles nulls","lastModifiedDate":"2022-10-08"},{"lineNumber":86,"author":{"gitId":"JovonLim"},"content":"        if (!(other instanceof EditAppointmentCommand)) {","lastModifiedDate":"2022-10-08"},{"lineNumber":87,"author":{"gitId":"JovonLim"},"content":"            return false;","lastModifiedDate":"2022-10-08"},{"lineNumber":88,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":89,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":90,"author":{"gitId":"JovonLim"},"content":"        // state check","lastModifiedDate":"2022-10-08"},{"lineNumber":91,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentCommand e \u003d (EditAppointmentCommand) other;","lastModifiedDate":"2022-10-08"},{"lineNumber":92,"author":{"gitId":"JovonLim"},"content":"        return hasSameIndexOfAppointment(e) \u0026\u0026 editAppointmentDescriptor.equals(e.editAppointmentDescriptor);","lastModifiedDate":"2022-10-18"},{"lineNumber":93,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":94,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":95,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-08"},{"lineNumber":96,"author":{"gitId":"JovonLim"},"content":"     * Stores the details to edit the appointment with. Each non-empty field value will replace the","lastModifiedDate":"2022-10-08"},{"lineNumber":97,"author":{"gitId":"JovonLim"},"content":"     * corresponding field value of the appointment.","lastModifiedDate":"2022-10-08"},{"lineNumber":98,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-08"},{"lineNumber":99,"author":{"gitId":"JovonLim"},"content":"    public static class EditAppointmentDescriptor {","lastModifiedDate":"2022-10-08"},{"lineNumber":100,"author":{"gitId":"JovonLim"},"content":"        private String reason;","lastModifiedDate":"2022-10-08"},{"lineNumber":101,"author":{"gitId":"JovonLim"},"content":"        private LocalDateTime dateTime;","lastModifiedDate":"2022-10-08"},{"lineNumber":102,"author":{"gitId":"JovonLim"},"content":"        private List\u003cInteger\u003e timePeriod;","lastModifiedDate":"2022-10-14"},{"lineNumber":103,"author":{"gitId":"pwjj2000"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2022-10-24"},{"lineNumber":104,"author":{"gitId":"JovonLim"},"content":"        public EditAppointmentDescriptor() {}","lastModifiedDate":"2022-10-08"},{"lineNumber":105,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":106,"author":{"gitId":"JovonLim"},"content":"        /**","lastModifiedDate":"2022-10-08"},{"lineNumber":107,"author":{"gitId":"JovonLim"},"content":"         * Copy constructor.","lastModifiedDate":"2022-10-08"},{"lineNumber":108,"author":{"gitId":"JovonLim"},"content":"         *","lastModifiedDate":"2022-10-08"},{"lineNumber":109,"author":{"gitId":"JovonLim"},"content":"         * @param toCopy The editAppointmentDescriptor to copy the details.","lastModifiedDate":"2022-10-08"},{"lineNumber":110,"author":{"gitId":"JovonLim"},"content":"         */","lastModifiedDate":"2022-10-08"},{"lineNumber":111,"author":{"gitId":"JovonLim"},"content":"        public EditAppointmentDescriptor(EditAppointmentDescriptor toCopy) {","lastModifiedDate":"2022-10-08"},{"lineNumber":112,"author":{"gitId":"JovonLim"},"content":"            setReason(toCopy.reason);","lastModifiedDate":"2022-10-08"},{"lineNumber":113,"author":{"gitId":"JovonLim"},"content":"            setDateTime(toCopy.dateTime);","lastModifiedDate":"2022-10-08"},{"lineNumber":114,"author":{"gitId":"JovonLim"},"content":"            setTimePeriod(toCopy.timePeriod);","lastModifiedDate":"2022-10-14"},{"lineNumber":115,"author":{"gitId":"pwjj2000"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2022-10-21"},{"lineNumber":116,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":117,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":118,"author":{"gitId":"JovonLim"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2022-10-08"},{"lineNumber":119,"author":{"gitId":"pwjj2000"},"content":"            return CollectionUtil.isAnyNonNull(reason, dateTime, timePeriod, tags);","lastModifiedDate":"2022-10-24"},{"lineNumber":120,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":121,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":122,"author":{"gitId":"JovonLim"},"content":"        public void setReason(String reason) {","lastModifiedDate":"2022-10-08"},{"lineNumber":123,"author":{"gitId":"JovonLim"},"content":"            this.reason \u003d reason;","lastModifiedDate":"2022-10-08"},{"lineNumber":124,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":125,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":126,"author":{"gitId":"JovonLim"},"content":"        public Optional\u003cString\u003e getReason() {","lastModifiedDate":"2022-10-08"},{"lineNumber":127,"author":{"gitId":"JovonLim"},"content":"            return Optional.ofNullable(reason);","lastModifiedDate":"2022-10-08"},{"lineNumber":128,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":129,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":130,"author":{"gitId":"JovonLim"},"content":"        public void setDateTime(LocalDateTime dateTime) {","lastModifiedDate":"2022-10-08"},{"lineNumber":131,"author":{"gitId":"JovonLim"},"content":"            this.dateTime \u003d dateTime;","lastModifiedDate":"2022-10-08"},{"lineNumber":132,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":133,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":134,"author":{"gitId":"JovonLim"},"content":"        public Optional\u003cLocalDateTime\u003e getDateTime() {","lastModifiedDate":"2022-10-08"},{"lineNumber":135,"author":{"gitId":"JovonLim"},"content":"            return Optional.ofNullable(dateTime);","lastModifiedDate":"2022-10-08"},{"lineNumber":136,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":137,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":138,"author":{"gitId":"JovonLim"},"content":"        public void setTimePeriod(List\u003cInteger\u003e timePeriod) {","lastModifiedDate":"2022-10-14"},{"lineNumber":139,"author":{"gitId":"JovonLim"},"content":"            this.timePeriod \u003d timePeriod;","lastModifiedDate":"2022-10-14"},{"lineNumber":140,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-14"},{"lineNumber":141,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":142,"author":{"gitId":"pwjj2000"},"content":"        /**","lastModifiedDate":"2022-10-21"},{"lineNumber":143,"author":{"gitId":"pwjj2000"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2022-10-21"},{"lineNumber":144,"author":{"gitId":"pwjj2000"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2022-10-21"},{"lineNumber":145,"author":{"gitId":"pwjj2000"},"content":"         *","lastModifiedDate":"2022-11-06"},{"lineNumber":146,"author":{"gitId":"pwjj2000"},"content":"         * @param tags Set of tags that appointment is tagged under.","lastModifiedDate":"2022-11-06"},{"lineNumber":147,"author":{"gitId":"pwjj2000"},"content":"         */","lastModifiedDate":"2022-10-21"},{"lineNumber":148,"author":{"gitId":"pwjj2000"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2022-10-21"},{"lineNumber":149,"author":{"gitId":"pwjj2000"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2022-10-21"},{"lineNumber":150,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":151,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":152,"author":{"gitId":"pwjj2000"},"content":"        /**","lastModifiedDate":"2022-10-21"},{"lineNumber":153,"author":{"gitId":"pwjj2000"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2022-10-21"},{"lineNumber":154,"author":{"gitId":"pwjj2000"},"content":"         * if modification is attempted.","lastModifiedDate":"2022-10-21"},{"lineNumber":155,"author":{"gitId":"pwjj2000"},"content":"         *","lastModifiedDate":"2022-11-06"},{"lineNumber":156,"author":{"gitId":"pwjj2000"},"content":"         * @return Set of tags the object may have.","lastModifiedDate":"2022-11-06"},{"lineNumber":157,"author":{"gitId":"pwjj2000"},"content":"         */","lastModifiedDate":"2022-10-21"},{"lineNumber":158,"author":{"gitId":"pwjj2000"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2022-10-21"},{"lineNumber":159,"author":{"gitId":"pwjj2000"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2022-10-21"},{"lineNumber":160,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":161,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":162,"author":{"gitId":"JovonLim"},"content":"        public Optional\u003cList\u003cInteger\u003e\u003e getTimePeriod() {","lastModifiedDate":"2022-10-14"},{"lineNumber":163,"author":{"gitId":"JovonLim"},"content":"            return Optional.ofNullable(timePeriod);","lastModifiedDate":"2022-10-14"},{"lineNumber":164,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-14"},{"lineNumber":165,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":166,"author":{"gitId":"JovonLim"},"content":"        @Override","lastModifiedDate":"2022-10-08"},{"lineNumber":167,"author":{"gitId":"JovonLim"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2022-10-08"},{"lineNumber":168,"author":{"gitId":"JovonLim"},"content":"            // short circuit if same object","lastModifiedDate":"2022-10-08"},{"lineNumber":169,"author":{"gitId":"JovonLim"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-08"},{"lineNumber":170,"author":{"gitId":"JovonLim"},"content":"                return true;","lastModifiedDate":"2022-10-08"},{"lineNumber":171,"author":{"gitId":"JovonLim"},"content":"            }","lastModifiedDate":"2022-10-08"},{"lineNumber":172,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":173,"author":{"gitId":"JovonLim"},"content":"            // instanceof handles nulls","lastModifiedDate":"2022-10-08"},{"lineNumber":174,"author":{"gitId":"JovonLim"},"content":"            if (!(other instanceof EditAppointmentDescriptor)) {","lastModifiedDate":"2022-10-08"},{"lineNumber":175,"author":{"gitId":"JovonLim"},"content":"                return false;","lastModifiedDate":"2022-10-08"},{"lineNumber":176,"author":{"gitId":"JovonLim"},"content":"            }","lastModifiedDate":"2022-10-08"},{"lineNumber":177,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":178,"author":{"gitId":"JovonLim"},"content":"            // state check","lastModifiedDate":"2022-10-08"},{"lineNumber":179,"author":{"gitId":"JovonLim"},"content":"            EditAppointmentDescriptor e \u003d (EditAppointmentDescriptor) other;","lastModifiedDate":"2022-10-08"},{"lineNumber":180,"author":{"gitId":"JovonLim"},"content":"            return getReason().equals(e.getReason()) \u0026\u0026 getDateTime().equals(e.getDateTime())","lastModifiedDate":"2022-10-14"},{"lineNumber":181,"author":{"gitId":"JovonLim"},"content":"                    \u0026\u0026 getTimePeriod().equals(e.getTimePeriod()) \u0026\u0026 getTags().equals(e.getTags());","lastModifiedDate":"2022-10-31"},{"lineNumber":182,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":183,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":184,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-08"}],"authorContributionMap":{"NicholasTYD":1,"JovonLim":153,"pwjj2000":30}},{"path":"src/main/java/seedu/address/logic/commands/EditPatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-12-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-01-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-01-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":16,"author":{"gitId":"guanzhou03"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-10-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-12-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2016-12-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2016-12-26"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2016-12-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2016-12-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2016-12-26"},{"lineNumber":28,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.person.predicates.AppointmentOfFilteredPersonsPredicate;","lastModifiedDate":"2022-11-06"},{"lineNumber":29,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.person.predicates.HiddenPredicateSingleton;","lastModifiedDate":"2022-11-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":33,"author":{"gitId":"WingKei67"},"content":" * Edits the details of an existing person in idENTify.","lastModifiedDate":"2022-10-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"public class EditPatientCommand extends Command {","lastModifiedDate":"2022-10-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"    public static final String DESCRIPTOR_WORD \u003d \"patients\";","lastModifiedDate":"2022-10-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + DESCRIPTOR_WORD","lastModifiedDate":"2022-10-08"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"            + \": Edits the details of the person identified \"","lastModifiedDate":"2022-10-08"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"            + \"by the patientIndex number used in the displayed person list. \"","lastModifiedDate":"2022-10-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + DESCRIPTOR_WORD + \" 1 \"","lastModifiedDate":"2022-10-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2017-05-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";","lastModifiedDate":"2016-12-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":55,"author":{"gitId":"WingKei67"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in idENTify.\";","lastModifiedDate":"2022-10-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2016-12-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":60,"author":{"gitId":"pwjj2000"},"content":"     * Creates the command to edit patient data.","lastModifiedDate":"2022-11-06"},{"lineNumber":61,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":62,"author":{"gitId":"pwjj2000"},"content":"     * @param index of the person in the filtered patient list to edit","lastModifiedDate":"2022-11-06"},{"lineNumber":63,"author":{"gitId":"pwjj2000"},"content":"     * @param editPersonDescriptor details to edit the patient with","lastModifiedDate":"2022-11-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":65,"author":{"gitId":"JovonLim"},"content":"    public EditPatientCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2022-10-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2022-10-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"guanzhou03"},"content":"        updatePatients(editedPerson, personToEdit.getAppointments());","lastModifiedDate":"2022-10-13"},{"lineNumber":87,"author":{"gitId":"JovonLim"},"content":"        updateModelNames(model, personToEdit, editedPerson);","lastModifiedDate":"2022-10-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2017-08-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":92,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-10-15"},{"lineNumber":93,"author":{"gitId":"pwjj2000"},"content":"     * Updates the current names to be shown on idENTify.","lastModifiedDate":"2022-11-06"},{"lineNumber":94,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":95,"author":{"gitId":"guanzhou03"},"content":"     * @param model current model shown to the user.","lastModifiedDate":"2022-10-15"},{"lineNumber":96,"author":{"gitId":"guanzhou03"},"content":"     * @param personToEdit person\u0027s information to be updated.","lastModifiedDate":"2022-10-15"},{"lineNumber":97,"author":{"gitId":"guanzhou03"},"content":"     * @param editedPerson person with updated information.","lastModifiedDate":"2022-10-15"},{"lineNumber":98,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-10-15"},{"lineNumber":99,"author":{"gitId":"guanzhou03"},"content":"    public static void updateModelNames(Model model, Person personToEdit, Person editedPerson) {","lastModifiedDate":"2022-10-12"},{"lineNumber":100,"author":{"gitId":"guanzhou03"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2022-10-12"},{"lineNumber":101,"author":{"gitId":"guanzhou03"},"content":"        ObservableList\u003cPerson\u003e currentList \u003d model.getFilteredPersonList();","lastModifiedDate":"2022-10-12"},{"lineNumber":102,"author":{"gitId":"guanzhou03"},"content":"        for (int i \u003d 0; i \u003c currentList.size(); i++) {","lastModifiedDate":"2022-10-12"},{"lineNumber":103,"author":{"gitId":"guanzhou03"},"content":"            model.CURRENT_NAMES.add(currentList.get(i).getName());","lastModifiedDate":"2022-10-15"},{"lineNumber":104,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-12"},{"lineNumber":105,"author":{"gitId":"guanzhou03"},"content":"        model.CURRENT_NAMES.remove(personToEdit.getName());","lastModifiedDate":"2022-10-15"},{"lineNumber":106,"author":{"gitId":"guanzhou03"},"content":"        model.CURRENT_NAMES.add(editedPerson.getName());","lastModifiedDate":"2022-10-15"},{"lineNumber":107,"author":{"gitId":"guanzhou03"},"content":"        model.updateFilteredLists(Model.CURRENT_PREDICATE,","lastModifiedDate":"2022-11-06"},{"lineNumber":108,"author":{"gitId":"guanzhou03"},"content":"                HiddenPredicateSingleton.getInstance().getCurrApptPredicate()","lastModifiedDate":"2022-11-06"},{"lineNumber":109,"author":{"gitId":"guanzhou03"},"content":"                        .or(new AppointmentOfFilteredPersonsPredicate(currentList)));","lastModifiedDate":"2022-11-06"},{"lineNumber":110,"author":{"gitId":"guanzhou03"},"content":"        model.CURRENT_NAMES.clear();","lastModifiedDate":"2022-10-15"},{"lineNumber":111,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":112,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":116,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":117,"author":{"gitId":"pwjj2000"},"content":"     * @param personToEdit Patient whose details are about to be edited.","lastModifiedDate":"2022-11-06"},{"lineNumber":118,"author":{"gitId":"pwjj2000"},"content":"     * @param editPersonDescriptor Description of the patient after editing.","lastModifiedDate":"2022-11-06"},{"lineNumber":119,"author":{"gitId":"pwjj2000"},"content":"     * @return the patient after editing.","lastModifiedDate":"2022-11-06"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2022-10-19"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2016-12-26"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":130,"author":{"gitId":"JovonLim"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, personToEdit.getAppointments(),","lastModifiedDate":"2022-10-01"},{"lineNumber":131,"author":{"gitId":"JovonLim"},"content":"                updatedTags);","lastModifiedDate":"2022-10-01"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":134,"author":{"gitId":"guanzhou03"},"content":"    private void updatePatients(Person editedPerson, List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2022-10-13"},{"lineNumber":135,"author":{"gitId":"JovonLim"},"content":"        for (Appointment appointment : appointments) {","lastModifiedDate":"2022-10-09"},{"lineNumber":136,"author":{"gitId":"JovonLim"},"content":"            appointment.setPatient(editedPerson);","lastModifiedDate":"2022-10-09"},{"lineNumber":137,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-09"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":148,"author":{"gitId":"JovonLim"},"content":"        if (!(other instanceof EditPatientCommand)) {","lastModifiedDate":"2022-10-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":153,"author":{"gitId":"JovonLim"},"content":"        EditPatientCommand e \u003d (EditPatientCommand) other;","lastModifiedDate":"2022-10-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2017-05-25"},{"lineNumber":155,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2016-12-26"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2016-12-26"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2016-12-26"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        private Address address;","lastModifiedDate":"2017-06-21"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-06-21"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}","lastModifiedDate":"2016-12-26"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":172,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":173,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":174,"author":{"gitId":"pwjj2000"},"content":"         *","lastModifiedDate":"2022-11-06"},{"lineNumber":175,"author":{"gitId":"pwjj2000"},"content":"         * @param toCopy Description of patient to copy.","lastModifiedDate":"2022-11-06"},{"lineNumber":176,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2016-12-26"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2018-01-15"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2018-01-11"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":186,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":187,"author":{"gitId":"pwjj2000"},"content":"         *","lastModifiedDate":"2022-11-06"},{"lineNumber":188,"author":{"gitId":"pwjj2000"},"content":"         * @return whether any field is edited.","lastModifiedDate":"2022-11-06"},{"lineNumber":189,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);","lastModifiedDate":"2018-08-14"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2017-06-21"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            this.address \u003d address;","lastModifiedDate":"2017-06-21"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2016-12-26"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2017-06-21"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":227,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2018-01-11"},{"lineNumber":228,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":229,"author":{"gitId":"pwjj2000"},"content":"         *","lastModifiedDate":"2022-11-06"},{"lineNumber":230,"author":{"gitId":"pwjj2000"},"content":"         * @param tags Set of tags that patient is tagged under.","lastModifiedDate":"2022-11-06"},{"lineNumber":231,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-06-21"},{"lineNumber":233,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2018-01-11"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":237,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2018-01-11"},{"lineNumber":238,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2018-01-11"},{"lineNumber":239,"author":{"gitId":"pwjj2000"},"content":"         *","lastModifiedDate":"2022-11-06"},{"lineNumber":240,"author":{"gitId":"pwjj2000"},"content":"         * @return Set of tags the patient may have.","lastModifiedDate":"2022-11-06"},{"lineNumber":241,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":243,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2018-01-11"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":248,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2017-05-05"},{"lineNumber":249,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":250,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":251,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":253,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":254,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2017-05-05"},{"lineNumber":255,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":256,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":258,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2017-05-05"},{"lineNumber":259,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2017-05-05"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":261,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2017-06-21"},{"lineNumber":262,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())","lastModifiedDate":"2017-06-21"},{"lineNumber":263,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())","lastModifiedDate":"2017-06-21"},{"lineNumber":264,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())","lastModifiedDate":"2017-06-21"},{"lineNumber":265,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":268,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"JovonLim":16,"WingKei67":2,"-":208,"guanzhou03":23,"pwjj2000":19}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program.","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"WingKei67"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting idENTify as requested ...\";","lastModifiedDate":"2022-10-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"WingKei67":1,"-":18}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2022-10-12"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_TIME_END;","lastModifiedDate":"2022-10-15"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_TIME_START;","lastModifiedDate":"2022-10-15"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2022-10-12"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-10-12"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2022-10-12"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REASON;","lastModifiedDate":"2022-10-15"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-10-12"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_APPOINTMENT;","lastModifiedDate":"2022-11-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"import java.util.List;","lastModifiedDate":"2022-10-10"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2018-04-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-12"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-15"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.predicates.AppointmentOfFilteredPersonsPredicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.predicates.CombinedAppointmentPredicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.predicates.CombinedPersonPredicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":24,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.person.predicates.HiddenPredicateSingleton;","lastModifiedDate":"2022-10-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":27,"author":{"gitId":"WingKei67"},"content":" * Finds and lists all persons and their appointments in idENTify whose name contains any of the argument keywords.","lastModifiedDate":"2022-10-25"},{"lineNumber":28,"author":{"gitId":"pwjj2000"},"content":" * Keyword matching is case-insensitive.","lastModifiedDate":"2022-10-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2016-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons and their appointments whose fields\"","lastModifiedDate":"2022-10-15"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"            + \" contain all of the fields specified (case-insensitive) and displays them.\\n\"","lastModifiedDate":"2022-10-15"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"            + \"Parameters: \"","lastModifiedDate":"2022-10-12"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2022-10-12"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2022-10-12"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2022-10-12"},{"lineNumber":40,"author":{"gitId":"NicholasTYD"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2022-10-12"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]... \"","lastModifiedDate":"2022-10-15"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"            + \"[\" + PREFIX_REASON + \"REASON] \"","lastModifiedDate":"2022-10-15"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"            + \"[\" + PREFIX_DATE_TIME_START + \"DATE_START] \"","lastModifiedDate":"2022-10-15"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"            + \"[\" + PREFIX_DATE_TIME_END + \"DATE_END] \"","lastModifiedDate":"2022-11-07"},{"lineNumber":45,"author":{"gitId":"NicholasTYD"},"content":"            + \"[\" + PREFIX_TAG_APPOINTMENT + \"APPOINTMENT_TAG]...\\n\"","lastModifiedDate":"2022-11-07"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2022-10-12"},{"lineNumber":47,"author":{"gitId":"NicholasTYD"},"content":"            + PREFIX_NAME + \"John \"","lastModifiedDate":"2022-10-12"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"            + PREFIX_PHONE + \"9876 \"","lastModifiedDate":"2022-10-12"},{"lineNumber":49,"author":{"gitId":"NicholasTYD"},"content":"            + PREFIX_EMAIL + \"johnd \"","lastModifiedDate":"2022-10-12"},{"lineNumber":50,"author":{"gitId":"NicholasTYD"},"content":"            + PREFIX_ADDRESS + \"Clementi \"","lastModifiedDate":"2022-10-12"},{"lineNumber":51,"author":{"gitId":"WingKei67"},"content":"            + PREFIX_TAG + \"ear \"","lastModifiedDate":"2022-10-25"},{"lineNumber":52,"author":{"gitId":"WingKei67"},"content":"            + PREFIX_TAG + \"nose \"","lastModifiedDate":"2022-10-25"},{"lineNumber":53,"author":{"gitId":"NicholasTYD"},"content":"            + PREFIX_REASON + \"checkup \"","lastModifiedDate":"2022-10-15"},{"lineNumber":54,"author":{"gitId":"NicholasTYD"},"content":"            + PREFIX_DATE_TIME_START + \"2022-10-20 00:00 \"","lastModifiedDate":"2022-10-15"},{"lineNumber":55,"author":{"gitId":"NicholasTYD"},"content":"            + PREFIX_DATE_TIME_END + \"2023-10-20 00:00 \"","lastModifiedDate":"2022-11-07"},{"lineNumber":56,"author":{"gitId":"NicholasTYD"},"content":"            + PREFIX_TAG_APPOINTMENT + \"nose\";","lastModifiedDate":"2022-11-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":58,"author":{"gitId":"NicholasTYD"},"content":"    private final CombinedPersonPredicate personPredicate;","lastModifiedDate":"2022-10-13"},{"lineNumber":59,"author":{"gitId":"NicholasTYD"},"content":"    private final CombinedAppointmentPredicate appointmentPredicate;","lastModifiedDate":"2022-10-13"},{"lineNumber":60,"author":{"gitId":"NicholasTYD"},"content":"    private final boolean isAppointmentPredicateUsed;","lastModifiedDate":"2022-11-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":62,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-15"},{"lineNumber":63,"author":{"gitId":"NicholasTYD"},"content":"     * Creates a findCommand to search for specific details in the app.","lastModifiedDate":"2022-10-15"},{"lineNumber":64,"author":{"gitId":"NicholasTYD"},"content":"     *","lastModifiedDate":"2022-10-15"},{"lineNumber":65,"author":{"gitId":"NicholasTYD"},"content":"     * @param personPredicate A predicate for searching person details.","lastModifiedDate":"2022-10-15"},{"lineNumber":66,"author":{"gitId":"pwjj2000"},"content":"     * @param appointmentPredicate A predicate for searching appointment details.","lastModifiedDate":"2022-10-19"},{"lineNumber":67,"author":{"gitId":"NicholasTYD"},"content":"     * @param isAppointmentPredicateUsed True if any search fields relating to appointments are entered,","lastModifiedDate":"2022-11-05"},{"lineNumber":68,"author":{"gitId":"NicholasTYD"},"content":"     *                                   false otherwise.","lastModifiedDate":"2022-10-15"},{"lineNumber":69,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-15"},{"lineNumber":70,"author":{"gitId":"NicholasTYD"},"content":"    public FindCommand(CombinedPersonPredicate personPredicate, CombinedAppointmentPredicate appointmentPredicate,","lastModifiedDate":"2022-10-13"},{"lineNumber":71,"author":{"gitId":"NicholasTYD"},"content":"                       boolean isAppointmentPredicateUsed) {","lastModifiedDate":"2022-11-05"},{"lineNumber":72,"author":{"gitId":"NicholasTYD"},"content":"        this.personPredicate \u003d personPredicate;","lastModifiedDate":"2022-10-12"},{"lineNumber":73,"author":{"gitId":"NicholasTYD"},"content":"        this.appointmentPredicate \u003d appointmentPredicate;","lastModifiedDate":"2022-10-12"},{"lineNumber":74,"author":{"gitId":"NicholasTYD"},"content":"        this.isAppointmentPredicateUsed \u003d isAppointmentPredicateUsed;","lastModifiedDate":"2022-11-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":81,"author":{"gitId":"NicholasTYD"},"content":"        /*","lastModifiedDate":"2022-10-12"},{"lineNumber":82,"author":{"gitId":"NicholasTYD"},"content":"        Finds all persons that satisfies the given personPredicate with at least one appointment that matches","lastModifiedDate":"2022-10-12"},{"lineNumber":83,"author":{"gitId":"NicholasTYD"},"content":"        the appointmentPredicate if any input related to appointments are present (Reason, date),","lastModifiedDate":"2022-10-13"},{"lineNumber":84,"author":{"gitId":"NicholasTYD"},"content":"        and updates the model accordingly.","lastModifiedDate":"2022-10-13"},{"lineNumber":85,"author":{"gitId":"NicholasTYD"},"content":"         */","lastModifiedDate":"2022-10-12"},{"lineNumber":86,"author":{"gitId":"NicholasTYD"},"content":"        Predicate\u003cPerson\u003e personFulfillingBothPredicates \u003d isAppointmentPredicateUsed","lastModifiedDate":"2022-11-05"},{"lineNumber":87,"author":{"gitId":"NicholasTYD"},"content":"                ? personPredicate.and(person -\u003e person.getAppointments().stream().anyMatch(appointmentPredicate))","lastModifiedDate":"2022-11-05"},{"lineNumber":88,"author":{"gitId":"NicholasTYD"},"content":"                : personPredicate;","lastModifiedDate":"2022-11-05"},{"lineNumber":89,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":90,"author":{"gitId":"NicholasTYD"},"content":"        /*","lastModifiedDate":"2022-10-12"},{"lineNumber":91,"author":{"gitId":"NicholasTYD"},"content":"        Creates a Predicate\u003cAppointment\u003e that returns true if an appointment\u0027s patient is one who satisfies","lastModifiedDate":"2022-10-12"},{"lineNumber":92,"author":{"gitId":"NicholasTYD"},"content":"        the above predicate.","lastModifiedDate":"2022-10-12"},{"lineNumber":93,"author":{"gitId":"NicholasTYD"},"content":"         */","lastModifiedDate":"2022-10-12"},{"lineNumber":94,"author":{"gitId":"NicholasTYD"},"content":"        List\u003cPerson\u003e validPersons \u003d model.getFilteredPersonList();","lastModifiedDate":"2022-10-10"},{"lineNumber":95,"author":{"gitId":"NicholasTYD"},"content":"        AppointmentOfFilteredPersonsPredicate appointmentOfFilteredPersonsPredicate \u003d","lastModifiedDate":"2022-10-12"},{"lineNumber":96,"author":{"gitId":"NicholasTYD"},"content":"                new AppointmentOfFilteredPersonsPredicate(validPersons);","lastModifiedDate":"2022-10-10"},{"lineNumber":97,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":98,"author":{"gitId":"NicholasTYD"},"content":"        /*","lastModifiedDate":"2022-10-12"},{"lineNumber":99,"author":{"gitId":"pwjj2000"},"content":"        Finds all appointments that satisfy the given appointmentPredicate whose patient matches the personPredicate,","lastModifiedDate":"2022-10-19"},{"lineNumber":100,"author":{"gitId":"NicholasTYD"},"content":"        and updates the model accordingly.","lastModifiedDate":"2022-10-12"},{"lineNumber":101,"author":{"gitId":"NicholasTYD"},"content":"         */","lastModifiedDate":"2022-10-12"},{"lineNumber":102,"author":{"gitId":"NicholasTYD"},"content":"        Predicate\u003cAppointment\u003e appointmentFulfillingBothPredicates \u003d isAppointmentPredicateUsed","lastModifiedDate":"2022-11-05"},{"lineNumber":103,"author":{"gitId":"NicholasTYD"},"content":"                ? appointmentOfFilteredPersonsPredicate.and(appointmentPredicate)","lastModifiedDate":"2022-11-05"},{"lineNumber":104,"author":{"gitId":"NicholasTYD"},"content":"                : appointmentOfFilteredPersonsPredicate;","lastModifiedDate":"2022-11-05"},{"lineNumber":105,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":106,"author":{"gitId":"NicholasTYD"},"content":"        Predicate\u003cPerson\u003e combinedPersonPredicate \u003d","lastModifiedDate":"2022-10-28"},{"lineNumber":107,"author":{"gitId":"guanzhou03"},"content":"                HiddenPredicateSingleton.getInstance()","lastModifiedDate":"2022-11-05"},{"lineNumber":108,"author":{"gitId":"guanzhou03"},"content":"                        .combineWithRegularPredicate(personFulfillingBothPredicates);","lastModifiedDate":"2022-11-05"},{"lineNumber":109,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-28"},{"lineNumber":110,"author":{"gitId":"NicholasTYD"},"content":"        Predicate\u003cAppointment\u003e combinedApptPredicate \u003d","lastModifiedDate":"2022-10-28"},{"lineNumber":111,"author":{"gitId":"guanzhou03"},"content":"                HiddenPredicateSingleton.getInstance()","lastModifiedDate":"2022-11-05"},{"lineNumber":112,"author":{"gitId":"guanzhou03"},"content":"                        .combineWithRegularApptPredicate(appointmentFulfillingBothPredicates);","lastModifiedDate":"2022-11-05"},{"lineNumber":113,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-27"},{"lineNumber":114,"author":{"gitId":"guanzhou03"},"content":"        model.updateFilteredPersonList(combinedPersonPredicate);","lastModifiedDate":"2022-10-27"},{"lineNumber":115,"author":{"gitId":"guanzhou03"},"content":"        model.updateFilteredAppointmentList(combinedApptPredicate);","lastModifiedDate":"2022-10-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        return new CommandResult(","lastModifiedDate":"2018-04-01"},{"lineNumber":117,"author":{"gitId":"NicholasTYD"},"content":"                String.format(Messages.MESSAGE_RESULTS_LISTED_OVERVIEW,","lastModifiedDate":"2022-10-10"},{"lineNumber":118,"author":{"gitId":"NicholasTYD"},"content":"                        model.getFilteredPersonList().size(),","lastModifiedDate":"2022-10-10"},{"lineNumber":119,"author":{"gitId":"NicholasTYD"},"content":"                        model.getFilteredAppointmentList().size()));","lastModifiedDate":"2022-10-10"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":124,"author":{"gitId":"NicholasTYD"},"content":"        // short circuit if same object","lastModifiedDate":"2022-10-12"},{"lineNumber":125,"author":{"gitId":"NicholasTYD"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-12"},{"lineNumber":126,"author":{"gitId":"NicholasTYD"},"content":"            return true;","lastModifiedDate":"2022-10-12"},{"lineNumber":127,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-12"},{"lineNumber":128,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":129,"author":{"gitId":"NicholasTYD"},"content":"        // instanceof handles nulls","lastModifiedDate":"2022-10-12"},{"lineNumber":130,"author":{"gitId":"NicholasTYD"},"content":"        if (!(other instanceof FindCommand)) {","lastModifiedDate":"2022-10-12"},{"lineNumber":131,"author":{"gitId":"NicholasTYD"},"content":"            return false;","lastModifiedDate":"2022-10-12"},{"lineNumber":132,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-12"},{"lineNumber":133,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":134,"author":{"gitId":"NicholasTYD"},"content":"        // state check","lastModifiedDate":"2022-10-12"},{"lineNumber":135,"author":{"gitId":"NicholasTYD"},"content":"        FindCommand otherFindCommand \u003d (FindCommand) other;","lastModifiedDate":"2022-10-12"},{"lineNumber":136,"author":{"gitId":"NicholasTYD"},"content":"        return personPredicate.equals(otherFindCommand.personPredicate)","lastModifiedDate":"2022-10-12"},{"lineNumber":137,"author":{"gitId":"NicholasTYD"},"content":"                \u0026\u0026 appointmentPredicate.equals(otherFindCommand.appointmentPredicate)","lastModifiedDate":"2022-10-14"},{"lineNumber":138,"author":{"gitId":"NicholasTYD"},"content":"                \u0026\u0026 isAppointmentPredicateUsed \u003d\u003d otherFindCommand.isAppointmentPredicateUsed;","lastModifiedDate":"2022-11-05"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":140,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"NicholasTYD":98,"WingKei67":3,"-":28,"guanzhou03":8,"pwjj2000":3}},{"path":"src/main/java/seedu/address/logic/commands/GroupAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WingKei67"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-24"},{"lineNumber":2,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":3,"author":{"gitId":"WingKei67"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-24"},{"lineNumber":4,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_KEY;","lastModifiedDate":"2022-10-24"},{"lineNumber":5,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.model.Model.COMPARATOR_GROUP_MARK_APPOINTMENTS;","lastModifiedDate":"2022-10-25"},{"lineNumber":6,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.model.Model.COMPARATOR_GROUP_PATIENT_APPOINTMENTS;","lastModifiedDate":"2022-10-24"},{"lineNumber":7,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.model.Model.COMPARATOR_GROUP_TAG_APPOINTMENTS;","lastModifiedDate":"2022-10-24"},{"lineNumber":8,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":9,"author":{"gitId":"WingKei67"},"content":"import seedu.address.model.Key;","lastModifiedDate":"2022-10-24"},{"lineNumber":10,"author":{"gitId":"WingKei67"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-24"},{"lineNumber":11,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":12,"author":{"gitId":"WingKei67"},"content":"/**","lastModifiedDate":"2022-10-24"},{"lineNumber":13,"author":{"gitId":"WingKei67"},"content":" * Group all appointments in idENTify to the user.","lastModifiedDate":"2022-10-25"},{"lineNumber":14,"author":{"gitId":"WingKei67"},"content":" */","lastModifiedDate":"2022-10-24"},{"lineNumber":15,"author":{"gitId":"WingKei67"},"content":"public class GroupAppointmentCommand extends Command {","lastModifiedDate":"2022-10-24"},{"lineNumber":16,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":17,"author":{"gitId":"WingKei67"},"content":"    public static final String COMMAND_WORD \u003d \"group\";","lastModifiedDate":"2022-10-24"},{"lineNumber":18,"author":{"gitId":"WingKei67"},"content":"    public static final String DESCRIPTOR_WORD \u003d \"appts\";","lastModifiedDate":"2022-10-24"},{"lineNumber":19,"author":{"gitId":"WingKei67"},"content":"    public static final String MESSAGE_SUCCESS_APPOINTMENTS \u003d \"Grouped all appointments by %1$s.\";","lastModifiedDate":"2022-10-24"},{"lineNumber":20,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":21,"author":{"gitId":"WingKei67"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + DESCRIPTOR_WORD","lastModifiedDate":"2022-10-24"},{"lineNumber":22,"author":{"gitId":"WingKei67"},"content":"            + \": Group all appointments by their tags or patients or mark status.\\n\"","lastModifiedDate":"2022-10-25"},{"lineNumber":23,"author":{"gitId":"WingKei67"},"content":"            + \"Parameters: KEY (must be \\\"tag\\\"(\\\"t\\\"), \\\"patient\\\"(\\\"p\\\") or \\\"mark\\\"(\\\"m\\\")) \"","lastModifiedDate":"2022-10-26"},{"lineNumber":24,"author":{"gitId":"WingKei67"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + DESCRIPTOR_WORD + \" \"","lastModifiedDate":"2022-10-24"},{"lineNumber":25,"author":{"gitId":"WingKei67"},"content":"            + PREFIX_KEY + \"tag \";","lastModifiedDate":"2022-10-24"},{"lineNumber":26,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":27,"author":{"gitId":"WingKei67"},"content":"    private final Key key;","lastModifiedDate":"2022-10-24"},{"lineNumber":28,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":29,"author":{"gitId":"WingKei67"},"content":"    public GroupAppointmentCommand(Key key) {","lastModifiedDate":"2022-10-24"},{"lineNumber":30,"author":{"gitId":"WingKei67"},"content":"        this.key \u003d key;","lastModifiedDate":"2022-10-24"},{"lineNumber":31,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":32,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":33,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":34,"author":{"gitId":"WingKei67"},"content":"    @Override","lastModifiedDate":"2022-10-24"},{"lineNumber":35,"author":{"gitId":"WingKei67"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2022-10-24"},{"lineNumber":36,"author":{"gitId":"WingKei67"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-24"},{"lineNumber":37,"author":{"gitId":"WingKei67"},"content":"        if (this.key.equals(Key.TAG)) {","lastModifiedDate":"2022-10-24"},{"lineNumber":38,"author":{"gitId":"WingKei67"},"content":"            model.updateAppointmentComparator(COMPARATOR_GROUP_TAG_APPOINTMENTS);","lastModifiedDate":"2022-10-24"},{"lineNumber":39,"author":{"gitId":"WingKei67"},"content":"        } else if (this.key.equals(Key.PATIENT)) {","lastModifiedDate":"2022-10-25"},{"lineNumber":40,"author":{"gitId":"WingKei67"},"content":"            model.updateAppointmentComparator(COMPARATOR_GROUP_PATIENT_APPOINTMENTS);","lastModifiedDate":"2022-10-24"},{"lineNumber":41,"author":{"gitId":"WingKei67"},"content":"        } else {","lastModifiedDate":"2022-10-25"},{"lineNumber":42,"author":{"gitId":"WingKei67"},"content":"            model.updateAppointmentComparator(COMPARATOR_GROUP_MARK_APPOINTMENTS);","lastModifiedDate":"2022-10-25"},{"lineNumber":43,"author":{"gitId":"WingKei67"},"content":"        }","lastModifiedDate":"2022-10-24"},{"lineNumber":44,"author":{"gitId":"WingKei67"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS_APPOINTMENTS, key.toString().toLowerCase()));","lastModifiedDate":"2022-10-24"},{"lineNumber":45,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":46,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":47,"author":{"gitId":"WingKei67"},"content":"    @Override","lastModifiedDate":"2022-10-24"},{"lineNumber":48,"author":{"gitId":"WingKei67"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-24"},{"lineNumber":49,"author":{"gitId":"WingKei67"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-24"},{"lineNumber":50,"author":{"gitId":"WingKei67"},"content":"                || (other instanceof GroupAppointmentCommand // instanceof handles nulls","lastModifiedDate":"2022-10-24"},{"lineNumber":51,"author":{"gitId":"WingKei67"},"content":"                \u0026\u0026 key.equals(((GroupAppointmentCommand) other).key)); // state check","lastModifiedDate":"2022-10-24"},{"lineNumber":52,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":53,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-24"}],"authorContributionMap":{"WingKei67":53}},{"path":"src/main/java/seedu/address/logic/commands/GroupPatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WingKei67"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-24"},{"lineNumber":2,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":3,"author":{"gitId":"WingKei67"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-24"},{"lineNumber":4,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.model.Model.COMPARATOR_GROUP_PATIENTS;","lastModifiedDate":"2022-10-24"},{"lineNumber":5,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":6,"author":{"gitId":"WingKei67"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-24"},{"lineNumber":7,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":8,"author":{"gitId":"WingKei67"},"content":"/**","lastModifiedDate":"2022-10-24"},{"lineNumber":9,"author":{"gitId":"WingKei67"},"content":" * Group all patients in idENTify to the user.","lastModifiedDate":"2022-10-25"},{"lineNumber":10,"author":{"gitId":"WingKei67"},"content":" */","lastModifiedDate":"2022-10-24"},{"lineNumber":11,"author":{"gitId":"WingKei67"},"content":"public class GroupPatientCommand extends Command {","lastModifiedDate":"2022-10-24"},{"lineNumber":12,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":13,"author":{"gitId":"WingKei67"},"content":"    public static final String COMMAND_WORD \u003d \"group\";","lastModifiedDate":"2022-10-24"},{"lineNumber":14,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":15,"author":{"gitId":"WingKei67"},"content":"    public static final String DESCRIPTOR_WORD \u003d \"patients\";","lastModifiedDate":"2022-10-24"},{"lineNumber":16,"author":{"gitId":"WingKei67"},"content":"    public static final String MESSAGE_SUCCESS_PATIENTS \u003d \"Grouped all patients.\";","lastModifiedDate":"2022-10-24"},{"lineNumber":17,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":18,"author":{"gitId":"WingKei67"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + DESCRIPTOR_WORD","lastModifiedDate":"2022-10-24"},{"lineNumber":19,"author":{"gitId":"WingKei67"},"content":"            + \": Group all patients by their tags.\\n\"","lastModifiedDate":"2022-10-24"},{"lineNumber":20,"author":{"gitId":"WingKei67"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + DESCRIPTOR_WORD;","lastModifiedDate":"2022-10-24"},{"lineNumber":21,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":22,"author":{"gitId":"WingKei67"},"content":"    public GroupPatientCommand() {","lastModifiedDate":"2022-10-24"},{"lineNumber":23,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":24,"author":{"gitId":"WingKei67"},"content":"    };","lastModifiedDate":"2022-10-24"},{"lineNumber":25,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":26,"author":{"gitId":"WingKei67"},"content":"    @Override","lastModifiedDate":"2022-10-24"},{"lineNumber":27,"author":{"gitId":"WingKei67"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2022-10-24"},{"lineNumber":28,"author":{"gitId":"WingKei67"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-24"},{"lineNumber":29,"author":{"gitId":"WingKei67"},"content":"        model.updatePersonComparator(COMPARATOR_GROUP_PATIENTS);","lastModifiedDate":"2022-10-24"},{"lineNumber":30,"author":{"gitId":"WingKei67"},"content":"        return new CommandResult(MESSAGE_SUCCESS_PATIENTS);","lastModifiedDate":"2022-10-24"},{"lineNumber":31,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":32,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":33,"author":{"gitId":"WingKei67"},"content":"    @Override","lastModifiedDate":"2022-10-24"},{"lineNumber":34,"author":{"gitId":"WingKei67"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-24"},{"lineNumber":35,"author":{"gitId":"WingKei67"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-24"},{"lineNumber":36,"author":{"gitId":"WingKei67"},"content":"                || (other instanceof GroupPatientCommand); // instanceof handles nulls","lastModifiedDate":"2022-10-24"},{"lineNumber":37,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":38,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-24"}],"authorContributionMap":{"WingKei67":38}},{"path":"src/main/java/seedu/address/logic/commands/HideAppointmentsCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"guanzhou03"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-16"},{"lineNumber":2,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":3,"author":{"gitId":"guanzhou03"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-16"},{"lineNumber":4,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REASON;","lastModifiedDate":"2022-10-25"},{"lineNumber":5,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;","lastModifiedDate":"2022-10-25"},{"lineNumber":6,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-10-21"},{"lineNumber":7,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":8,"author":{"gitId":"guanzhou03"},"content":"import java.util.Objects;","lastModifiedDate":"2022-10-16"},{"lineNumber":9,"author":{"gitId":"guanzhou03"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-16"},{"lineNumber":10,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":11,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-16"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-16"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-16"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.predicates.HiddenPredicateSingleton;","lastModifiedDate":"2022-10-21"},{"lineNumber":15,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":16,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":17,"author":{"gitId":"guanzhou03"},"content":"/**","lastModifiedDate":"2022-10-16"},{"lineNumber":18,"author":{"gitId":"WingKei67"},"content":" * Hides all persons and their appointments in idENTify whose name contains any of the argument keywords.","lastModifiedDate":"2022-10-25"},{"lineNumber":19,"author":{"gitId":"guanzhou03"},"content":" * Keyword matching is case-insensitive.","lastModifiedDate":"2022-10-31"},{"lineNumber":20,"author":{"gitId":"guanzhou03"},"content":" */","lastModifiedDate":"2022-10-16"},{"lineNumber":21,"author":{"gitId":"guanzhou03"},"content":"public class HideAppointmentsCommand extends Command {","lastModifiedDate":"2022-10-16"},{"lineNumber":22,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":23,"author":{"gitId":"guanzhou03"},"content":"    public static final String COMMAND_WORD \u003d \"hide\";","lastModifiedDate":"2022-10-16"},{"lineNumber":24,"author":{"gitId":"guanzhou03"},"content":"    public static final String DESCRIPTOR_WORD \u003d \"appts\";","lastModifiedDate":"2022-10-16"},{"lineNumber":25,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":26,"author":{"gitId":"guanzhou03"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Hides all appointments which reason, tags, or status\\n\"","lastModifiedDate":"2022-10-31"},{"lineNumber":27,"author":{"gitId":"guanzhou03"},"content":"            + \"match any of the specified keywords (case-insensitive) and displays\\n\"","lastModifiedDate":"2022-10-31"},{"lineNumber":28,"author":{"gitId":"guanzhou03"},"content":"            + \"the appointments which are not hidden.\\n\"","lastModifiedDate":"2022-10-31"},{"lineNumber":29,"author":{"gitId":"guanzhou03"},"content":"            + \"Parameters: \" + PREFIX_REASON + \"REASON [r/MORE_REASONS]...\\n\"","lastModifiedDate":"2022-10-31"},{"lineNumber":30,"author":{"gitId":"guanzhou03"},"content":"            + \"OR: \" + PREFIX_TAG + \"TAG [t/MORE_TAGS]...\\n\"","lastModifiedDate":"2022-10-31"},{"lineNumber":31,"author":{"gitId":"guanzhou03"},"content":"            + \"OR: \" + PREFIX_STATUS + \"STATUS\\n\"","lastModifiedDate":"2022-10-31"},{"lineNumber":32,"author":{"gitId":"guanzhou03"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + DESCRIPTOR_WORD + \" \" + PREFIX_REASON + \"pain r/infection\\n\"","lastModifiedDate":"2022-10-31"},{"lineNumber":33,"author":{"gitId":"guanzhou03"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + DESCRIPTOR_WORD + \" \" + PREFIX_STATUS + \"marked\";","lastModifiedDate":"2022-10-31"},{"lineNumber":34,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":35,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":36,"author":{"gitId":"guanzhou03"},"content":"    private Predicate\u003cAppointment\u003e predicate;","lastModifiedDate":"2022-10-16"},{"lineNumber":37,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":38,"author":{"gitId":"guanzhou03"},"content":"    public HideAppointmentsCommand(Predicate\u003cAppointment\u003e predicate) {","lastModifiedDate":"2022-10-16"},{"lineNumber":39,"author":{"gitId":"guanzhou03"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2022-10-16"},{"lineNumber":40,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":41,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":42,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":43,"author":{"gitId":"guanzhou03"},"content":"    @Override","lastModifiedDate":"2022-10-16"},{"lineNumber":44,"author":{"gitId":"guanzhou03"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2022-10-16"},{"lineNumber":45,"author":{"gitId":"guanzhou03"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-16"},{"lineNumber":46,"author":{"gitId":"guanzhou03"},"content":"        Predicate\u003cAppointment\u003e combinedPredicate \u003d HiddenPredicateSingleton.getInstance()","lastModifiedDate":"2022-11-05"},{"lineNumber":47,"author":{"gitId":"guanzhou03"},"content":"                .combineWithApptPredicate(predicate);","lastModifiedDate":"2022-11-05"},{"lineNumber":48,"author":{"gitId":"guanzhou03"},"content":"        model.updateFilteredAppointmentList(combinedPredicate);","lastModifiedDate":"2022-10-16"},{"lineNumber":49,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":50,"author":{"gitId":"guanzhou03"},"content":"        return new CommandResult(","lastModifiedDate":"2022-10-16"},{"lineNumber":51,"author":{"gitId":"guanzhou03"},"content":"                String.format(Messages.MESSAGE_RESULTS_LISTED_OVERVIEW,","lastModifiedDate":"2022-10-16"},{"lineNumber":52,"author":{"gitId":"guanzhou03"},"content":"                        model.getFilteredPersonList().size(),","lastModifiedDate":"2022-10-16"},{"lineNumber":53,"author":{"gitId":"guanzhou03"},"content":"                        model.getFilteredAppointmentList().size()));","lastModifiedDate":"2022-10-16"},{"lineNumber":54,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":55,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":56,"author":{"gitId":"guanzhou03"},"content":"    @Override","lastModifiedDate":"2022-10-16"},{"lineNumber":57,"author":{"gitId":"guanzhou03"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-16"},{"lineNumber":58,"author":{"gitId":"guanzhou03"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-16"},{"lineNumber":59,"author":{"gitId":"guanzhou03"},"content":"            return true;","lastModifiedDate":"2022-10-16"},{"lineNumber":60,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":61,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":62,"author":{"gitId":"guanzhou03"},"content":"        if (!(other instanceof HideAppointmentsCommand)) {","lastModifiedDate":"2022-10-16"},{"lineNumber":63,"author":{"gitId":"guanzhou03"},"content":"            return false;","lastModifiedDate":"2022-10-16"},{"lineNumber":64,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":65,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":66,"author":{"gitId":"guanzhou03"},"content":"        HideAppointmentsCommand otherCommand \u003d (HideAppointmentsCommand) other;","lastModifiedDate":"2022-10-16"},{"lineNumber":67,"author":{"gitId":"guanzhou03"},"content":"        return otherCommand.predicate.equals(this.predicate);","lastModifiedDate":"2022-10-16"},{"lineNumber":68,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":69,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":70,"author":{"gitId":"guanzhou03"},"content":"    @Override","lastModifiedDate":"2022-10-16"},{"lineNumber":71,"author":{"gitId":"guanzhou03"},"content":"    public int hashCode() {","lastModifiedDate":"2022-10-16"},{"lineNumber":72,"author":{"gitId":"guanzhou03"},"content":"        return Objects.hash(predicate);","lastModifiedDate":"2022-10-16"},{"lineNumber":73,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":74,"author":{"gitId":"guanzhou03"},"content":"}","lastModifiedDate":"2022-10-16"}],"authorContributionMap":{"JovonLim":1,"WingKei67":1,"guanzhou03":72}},{"path":"src/main/java/seedu/address/logic/commands/HidePatientsCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"guanzhou03"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-12"},{"lineNumber":2,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":3,"author":{"gitId":"guanzhou03"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-12"},{"lineNumber":4,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-10-25"},{"lineNumber":5,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-10-21"},{"lineNumber":6,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":7,"author":{"gitId":"guanzhou03"},"content":"import java.util.List;","lastModifiedDate":"2022-10-12"},{"lineNumber":8,"author":{"gitId":"guanzhou03"},"content":"import java.util.Objects;","lastModifiedDate":"2022-10-14"},{"lineNumber":9,"author":{"gitId":"guanzhou03"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-12"},{"lineNumber":10,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":11,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-12"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-12"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-27"},{"lineNumber":14,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-12"},{"lineNumber":15,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.person.predicates.AppointmentOfFilteredPersonsPredicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.predicates.HiddenPredicateSingleton;","lastModifiedDate":"2022-10-22"},{"lineNumber":17,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":18,"author":{"gitId":"guanzhou03"},"content":"/**","lastModifiedDate":"2022-10-12"},{"lineNumber":19,"author":{"gitId":"guanzhou03"},"content":" * Hides all persons previously hidden whose name contains any of the argument keywords.","lastModifiedDate":"2022-10-25"},{"lineNumber":20,"author":{"gitId":"guanzhou03"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2022-10-12"},{"lineNumber":21,"author":{"gitId":"guanzhou03"},"content":" */","lastModifiedDate":"2022-10-12"},{"lineNumber":22,"author":{"gitId":"guanzhou03"},"content":"public class HidePatientsCommand extends Command {","lastModifiedDate":"2022-10-13"},{"lineNumber":23,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":24,"author":{"gitId":"guanzhou03"},"content":"    public static final String COMMAND_WORD \u003d \"hide\";","lastModifiedDate":"2022-10-13"},{"lineNumber":25,"author":{"gitId":"guanzhou03"},"content":"    public static final String DESCRIPTOR_WORD \u003d \"patients\";","lastModifiedDate":"2022-10-12"},{"lineNumber":26,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":27,"author":{"gitId":"guanzhou03"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Hides all patients whose names or tags contain \"","lastModifiedDate":"2022-10-31"},{"lineNumber":28,"author":{"gitId":"guanzhou03"},"content":"            + \"any of the specified keywords (case-insensitive)\\n\"","lastModifiedDate":"2022-10-31"},{"lineNumber":29,"author":{"gitId":"guanzhou03"},"content":"            + \"and displays them and their appointments as 2 lists with index numbers.\\n\"","lastModifiedDate":"2022-10-31"},{"lineNumber":30,"author":{"gitId":"guanzhou03"},"content":"            + \"Parameters: \" + PREFIX_NAME + \"NAME [n/MORE_NAMES]...\\n\"","lastModifiedDate":"2022-10-31"},{"lineNumber":31,"author":{"gitId":"guanzhou03"},"content":"            + \"OR: \" + PREFIX_TAG + \"TAG [t/MORE_TAGS]...\\n\"","lastModifiedDate":"2022-10-31"},{"lineNumber":32,"author":{"gitId":"guanzhou03"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + DESCRIPTOR_WORD + \" n/alice n/bob n/charlie\\n\"","lastModifiedDate":"2022-10-31"},{"lineNumber":33,"author":{"gitId":"guanzhou03"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + DESCRIPTOR_WORD + \" t/ear t/nose\";","lastModifiedDate":"2022-10-31"},{"lineNumber":34,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":35,"author":{"gitId":"guanzhou03"},"content":"    private Predicate\u003cPerson\u003e predicate;","lastModifiedDate":"2022-10-12"},{"lineNumber":36,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":37,"author":{"gitId":"guanzhou03"},"content":"    public HidePatientsCommand(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2022-10-13"},{"lineNumber":38,"author":{"gitId":"guanzhou03"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2022-10-12"},{"lineNumber":39,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":40,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":41,"author":{"gitId":"guanzhou03"},"content":"    @Override","lastModifiedDate":"2022-10-12"},{"lineNumber":42,"author":{"gitId":"guanzhou03"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2022-10-12"},{"lineNumber":43,"author":{"gitId":"guanzhou03"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-12"},{"lineNumber":44,"author":{"gitId":"guanzhou03"},"content":"        Predicate\u003cPerson\u003e combinedPredicate \u003d HiddenPredicateSingleton.getInstance()","lastModifiedDate":"2022-11-05"},{"lineNumber":45,"author":{"gitId":"guanzhou03"},"content":"                .combineWithHiddenPredicate(predicate);","lastModifiedDate":"2022-11-05"},{"lineNumber":46,"author":{"gitId":"guanzhou03"},"content":"        model.updateFilteredPersonList(combinedPredicate);","lastModifiedDate":"2022-10-14"},{"lineNumber":47,"author":{"gitId":"guanzhou03"},"content":"        List\u003cPerson\u003e validPersons \u003d model.getFilteredPersonList();","lastModifiedDate":"2022-10-12"},{"lineNumber":48,"author":{"gitId":"guanzhou03"},"content":"        Predicate\u003cAppointment\u003e appointmentPredicate \u003d","lastModifiedDate":"2022-10-27"},{"lineNumber":49,"author":{"gitId":"guanzhou03"},"content":"                HiddenPredicateSingleton.getInstance().combineWithRegularApptPredicate(","lastModifiedDate":"2022-11-05"},{"lineNumber":50,"author":{"gitId":"guanzhou03"},"content":"                        new AppointmentOfFilteredPersonsPredicate(validPersons));","lastModifiedDate":"2022-10-27"},{"lineNumber":51,"author":{"gitId":"guanzhou03"},"content":"        model.updateFilteredAppointmentList(appointmentPredicate);","lastModifiedDate":"2022-10-27"},{"lineNumber":52,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":53,"author":{"gitId":"guanzhou03"},"content":"        return new CommandResult(","lastModifiedDate":"2022-10-12"},{"lineNumber":54,"author":{"gitId":"guanzhou03"},"content":"                String.format(Messages.MESSAGE_RESULTS_LISTED_OVERVIEW,","lastModifiedDate":"2022-10-12"},{"lineNumber":55,"author":{"gitId":"guanzhou03"},"content":"                        model.getFilteredPersonList().size(),","lastModifiedDate":"2022-10-12"},{"lineNumber":56,"author":{"gitId":"guanzhou03"},"content":"                        model.getFilteredAppointmentList().size()));","lastModifiedDate":"2022-10-12"},{"lineNumber":57,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":58,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":59,"author":{"gitId":"guanzhou03"},"content":"    @Override","lastModifiedDate":"2022-10-12"},{"lineNumber":60,"author":{"gitId":"guanzhou03"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-12"},{"lineNumber":61,"author":{"gitId":"guanzhou03"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-14"},{"lineNumber":62,"author":{"gitId":"guanzhou03"},"content":"            return true;","lastModifiedDate":"2022-10-14"},{"lineNumber":63,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-14"},{"lineNumber":64,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":65,"author":{"gitId":"guanzhou03"},"content":"        if (!(other instanceof HidePatientsCommand)) {","lastModifiedDate":"2022-10-14"},{"lineNumber":66,"author":{"gitId":"guanzhou03"},"content":"            return false;","lastModifiedDate":"2022-10-14"},{"lineNumber":67,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-14"},{"lineNumber":68,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":69,"author":{"gitId":"guanzhou03"},"content":"        HidePatientsCommand otherCommand \u003d (HidePatientsCommand) other;","lastModifiedDate":"2022-10-14"},{"lineNumber":70,"author":{"gitId":"guanzhou03"},"content":"        return otherCommand.predicate.equals(this.predicate);","lastModifiedDate":"2022-10-14"},{"lineNumber":71,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":72,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":73,"author":{"gitId":"guanzhou03"},"content":"    @Override","lastModifiedDate":"2022-10-14"},{"lineNumber":74,"author":{"gitId":"guanzhou03"},"content":"    public int hashCode() {","lastModifiedDate":"2022-10-14"},{"lineNumber":75,"author":{"gitId":"guanzhou03"},"content":"        return Objects.hash(predicate);","lastModifiedDate":"2022-10-14"},{"lineNumber":76,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":77,"author":{"gitId":"guanzhou03"},"content":"}","lastModifiedDate":"2022-10-12"}],"authorContributionMap":{"JovonLim":1,"guanzhou03":76}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;","lastModifiedDate":"2022-10-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.predicates.HiddenPredicateSingleton;","lastModifiedDate":"2022-10-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Lists all persons in the address book to the user.","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2016-09-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"pwjj2000"},"content":"    public static final String MESSAGE_SUCCESS_PATIENTS \u003d \"Listed all patients.\";","lastModifiedDate":"2022-10-06"},{"lineNumber":18,"author":{"gitId":"pwjj2000"},"content":"    public static final String MESSAGE_SUCCESS_APPOINTMENTS \u003d \"Listed all appointments.\";","lastModifiedDate":"2022-10-06"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"    public static final String MESSAGE_SUCCESS_ALL \u003d \"Listed all patients and appointments.\";","lastModifiedDate":"2022-10-24"},{"lineNumber":20,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":21,"author":{"gitId":"pwjj2000"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" patients: List down all patients.\\n\"","lastModifiedDate":"2022-10-06"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"            + COMMAND_WORD + \" appts: List down all appointments.\\n\"","lastModifiedDate":"2022-10-24"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"            + COMMAND_WORD + \" all: List down all patients and appointments\\n\";","lastModifiedDate":"2022-10-24"},{"lineNumber":24,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":25,"author":{"gitId":"pwjj2000"},"content":"    private final String type;","lastModifiedDate":"2022-10-06"},{"lineNumber":26,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":27,"author":{"gitId":"pwjj2000"},"content":"    public ListCommand(String type) {","lastModifiedDate":"2022-10-06"},{"lineNumber":28,"author":{"gitId":"pwjj2000"},"content":"        this.type \u003d type;","lastModifiedDate":"2022-10-06"},{"lineNumber":29,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"        switch (type) {","lastModifiedDate":"2022-10-24"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"        case \"all\":","lastModifiedDate":"2022-10-24"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2022-10-24"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"            model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);","lastModifiedDate":"2022-10-24"},{"lineNumber":39,"author":{"gitId":"guanzhou03"},"content":"            HiddenPredicateSingleton.getInstance().clearHiddenAll();","lastModifiedDate":"2022-11-05"},{"lineNumber":40,"author":{"gitId":"NicholasTYD"},"content":"            return new CommandResult(MESSAGE_SUCCESS_ALL);","lastModifiedDate":"2022-10-24"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"        case \"patients\":","lastModifiedDate":"2022-10-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":43,"author":{"gitId":"guanzhou03"},"content":"            HiddenPredicateSingleton.getInstance().clearHiddenPatients();","lastModifiedDate":"2022-11-05"},{"lineNumber":44,"author":{"gitId":"pwjj2000"},"content":"            return new CommandResult(MESSAGE_SUCCESS_PATIENTS);","lastModifiedDate":"2022-10-06"},{"lineNumber":45,"author":{"gitId":"NicholasTYD"},"content":"        case \"appts\":","lastModifiedDate":"2022-10-24"},{"lineNumber":46,"author":{"gitId":"pwjj2000"},"content":"            model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);","lastModifiedDate":"2022-10-06"},{"lineNumber":47,"author":{"gitId":"guanzhou03"},"content":"            HiddenPredicateSingleton.getInstance().clearHiddenAppts();","lastModifiedDate":"2022-11-05"},{"lineNumber":48,"author":{"gitId":"pwjj2000"},"content":"            return new CommandResult(MESSAGE_SUCCESS_APPOINTMENTS);","lastModifiedDate":"2022-10-06"},{"lineNumber":49,"author":{"gitId":"NicholasTYD"},"content":"        default:","lastModifiedDate":"2022-10-24"},{"lineNumber":50,"author":{"gitId":"NicholasTYD"},"content":"            assert false : \"Input should be either \u0027all\u0027, \u0027patients\u0027 or \u0027appt\u0027; shouldn\u0027t reach here\";","lastModifiedDate":"2022-10-24"},{"lineNumber":51,"author":{"gitId":"NicholasTYD"},"content":"            return new CommandResult(\"Unrecognised list keyword\");","lastModifiedDate":"2022-10-24"},{"lineNumber":52,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":55,"author":{"gitId":"pwjj2000"},"content":"    @Override","lastModifiedDate":"2022-10-08"},{"lineNumber":56,"author":{"gitId":"pwjj2000"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-08"},{"lineNumber":57,"author":{"gitId":"pwjj2000"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-08"},{"lineNumber":58,"author":{"gitId":"pwjj2000"},"content":"                || (other instanceof ListCommand // instanceof handles nulls","lastModifiedDate":"2022-10-08"},{"lineNumber":59,"author":{"gitId":"pwjj2000"},"content":"                \u0026\u0026 type.equals(((ListCommand) other).type)); // state check","lastModifiedDate":"2022-10-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"NicholasTYD":13,"JovonLim":1,"-":23,"pwjj2000":21,"guanzhou03":3}},{"path":"src/main/java/seedu/address/logic/commands/MarkCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-02"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import java.util.List;","lastModifiedDate":"2022-10-14"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-02"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-02"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-02"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-02"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-14"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.predicates.HiddenPredicateSingleton;","lastModifiedDate":"2022-11-06"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"/**","lastModifiedDate":"2022-10-02"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":" * Marks an appointment for the given patient as complete.","lastModifiedDate":"2022-10-02"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":" */","lastModifiedDate":"2022-10-02"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"public class MarkCommand extends SelectAppointmentCommand {","lastModifiedDate":"2022-10-02"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"    public static final String COMMAND_WORD \u003d \"mark\";","lastModifiedDate":"2022-10-02"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"    public static final String MESSAGE_USAGE \u003d","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"            COMMAND_WORD + \": Marks an appointment in the appointment list as complete\\n\"","lastModifiedDate":"2022-10-18"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"                    + \"Parameters: APPOINTMENT_INDEX (must be a valid appointment index and a positive integer)\\n\"","lastModifiedDate":"2022-10-18"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"                    + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2022-10-18"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"    public static final String MESSAGE_MARK_PERSON_SUCCESS \u003d \"Marked appointment %1$s.\";","lastModifiedDate":"2022-10-25"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"    public static final String MESSAGE_ALREADY_MARKED \u003d \"This appointment is already marked.\";","lastModifiedDate":"2022-10-02"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-02"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"     * Creates a mark command containing the index of an appointment.","lastModifiedDate":"2022-10-18"},{"lineNumber":28,"author":{"gitId":"NicholasTYD"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"     * @param indexOfAppointment Index of the appointment in the appointment list to mark.","lastModifiedDate":"2022-10-18"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-02"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"    public MarkCommand(Index indexOfAppointment) {","lastModifiedDate":"2022-10-18"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"        super(indexOfAppointment);","lastModifiedDate":"2022-10-18"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"    @Override","lastModifiedDate":"2022-10-02"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-02"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"        Appointment appointmentToMark \u003d getTargetAppointment(model);","lastModifiedDate":"2022-10-02"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"        Person person \u003d getTargetPerson(model);","lastModifiedDate":"2022-10-18"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":40,"author":{"gitId":"NicholasTYD"},"content":"        if (appointmentToMark.isMarked()) {","lastModifiedDate":"2022-10-02"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"            throw new CommandException(MESSAGE_ALREADY_MARKED);","lastModifiedDate":"2022-10-02"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-02"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"        appointmentToMark.mark();","lastModifiedDate":"2022-10-02"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"        model.updateFilteredLists(HiddenPredicateSingleton.getInstance().getCurrPersonPredicate(),","lastModifiedDate":"2022-11-06"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"                HiddenPredicateSingleton.getInstance().getCurrApptPredicate());","lastModifiedDate":"2022-11-06"},{"lineNumber":46,"author":{"gitId":"JovonLim"},"content":"        String addRecurringSuccessMsg \u003d addRecurringAppointment(model, person, appointmentToMark);","lastModifiedDate":"2022-10-18"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"        String markSuccessMsg \u003d String.format(MESSAGE_MARK_PERSON_SUCCESS,","lastModifiedDate":"2022-10-15"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"                indexOfAppointment.getOneBased());","lastModifiedDate":"2022-10-25"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"        return new CommandResult(markSuccessMsg + addRecurringSuccessMsg);","lastModifiedDate":"2022-10-15"},{"lineNumber":50,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":51,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":52,"author":{"gitId":"JovonLim"},"content":"    private String addRecurringAppointment(Model model, Person person, Appointment appointment) {","lastModifiedDate":"2022-10-18"},{"lineNumber":53,"author":{"gitId":"JovonLim"},"content":"        if (appointment.getTimePeriod().stream().allMatch(x -\u003e x.equals(0))) {","lastModifiedDate":"2022-10-18"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"            return \"\";","lastModifiedDate":"2022-10-18"},{"lineNumber":55,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-18"},{"lineNumber":56,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":57,"author":{"gitId":"JovonLim"},"content":"        String str \u003d \"\\nNo recurring appointment has been added due to time clashes\";","lastModifiedDate":"2022-10-18"},{"lineNumber":58,"author":{"gitId":"JovonLim"},"content":"        Appointment recurringAppointment \u003d new Appointment(appointment);","lastModifiedDate":"2022-10-14"},{"lineNumber":59,"author":{"gitId":"JovonLim"},"content":"        List\u003cAppointment\u003e appointmentList \u003d person.getAppointments();","lastModifiedDate":"2022-10-14"},{"lineNumber":60,"author":{"gitId":"JovonLim"},"content":"        if (!hasSameAppointment(appointmentList, recurringAppointment)) {","lastModifiedDate":"2022-10-14"},{"lineNumber":61,"author":{"gitId":"JovonLim"},"content":"            appointmentList.add(recurringAppointment);","lastModifiedDate":"2022-10-14"},{"lineNumber":62,"author":{"gitId":"JovonLim"},"content":"            model.addAppointment(recurringAppointment);","lastModifiedDate":"2022-10-14"},{"lineNumber":63,"author":{"gitId":"JovonLim"},"content":"            str \u003d \"\\nA recurring appointment has been automatically added\";","lastModifiedDate":"2022-10-18"},{"lineNumber":64,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-14"},{"lineNumber":65,"author":{"gitId":"JovonLim"},"content":"        return str;","lastModifiedDate":"2022-10-18"},{"lineNumber":66,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":67,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":68,"author":{"gitId":"JovonLim"},"content":"    private boolean hasSameAppointment(List\u003cAppointment\u003e appointments, Appointment appointment) {","lastModifiedDate":"2022-10-14"},{"lineNumber":69,"author":{"gitId":"JovonLim"},"content":"        return appointments.stream().anyMatch(x -\u003e x.isSameTime(appointment));","lastModifiedDate":"2022-10-14"},{"lineNumber":70,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":71,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":72,"author":{"gitId":"NicholasTYD"},"content":"    @Override","lastModifiedDate":"2022-10-04"},{"lineNumber":73,"author":{"gitId":"NicholasTYD"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-04"},{"lineNumber":74,"author":{"gitId":"NicholasTYD"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-04"},{"lineNumber":75,"author":{"gitId":"NicholasTYD"},"content":"            return true;","lastModifiedDate":"2022-10-04"},{"lineNumber":76,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-04"},{"lineNumber":77,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":78,"author":{"gitId":"NicholasTYD"},"content":"        if (!(other instanceof MarkCommand)) {","lastModifiedDate":"2022-10-04"},{"lineNumber":79,"author":{"gitId":"NicholasTYD"},"content":"            return false;","lastModifiedDate":"2022-10-04"},{"lineNumber":80,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-04"},{"lineNumber":81,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":82,"author":{"gitId":"NicholasTYD"},"content":"        MarkCommand otherCommand \u003d (MarkCommand) other;","lastModifiedDate":"2022-10-04"},{"lineNumber":83,"author":{"gitId":"NicholasTYD"},"content":"        return hasSameIndexOfAppointment(otherCommand);","lastModifiedDate":"2022-10-18"},{"lineNumber":84,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":85,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-02"}],"authorContributionMap":{"NicholasTYD":56,"JovonLim":29}},{"path":"src/main/java/seedu/address/logic/commands/SelectAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-02"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-02"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import java.util.List;","lastModifiedDate":"2022-10-02"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-02"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-02"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-02"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-02"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-02"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-02"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"/**","lastModifiedDate":"2022-10-02"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":" * A class of commands that involve selecting an appointment only with no additional arguments.","lastModifiedDate":"2022-10-02"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":" */","lastModifiedDate":"2022-10-02"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"public abstract class SelectAppointmentCommand extends Command {","lastModifiedDate":"2022-10-02"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"    protected final Index indexOfAppointment;","lastModifiedDate":"2022-10-02"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"     * Creates command that selects an appointment according to index of the appointment in the appointment list.","lastModifiedDate":"2022-10-18"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"     * @param indexOfAppointment Index of the appointment in the appointment list.","lastModifiedDate":"2022-10-18"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"    public SelectAppointmentCommand(Index indexOfAppointment) {","lastModifiedDate":"2022-10-18"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"        requireNonNull(indexOfAppointment);","lastModifiedDate":"2022-10-02"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":28,"author":{"gitId":"NicholasTYD"},"content":"        this.indexOfAppointment \u003d indexOfAppointment;","lastModifiedDate":"2022-10-02"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"    protected Appointment getTargetAppointment(Model model) throws CommandException {","lastModifiedDate":"2022-10-02"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-18"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"        List\u003cAppointment\u003e lastShownAppointmentList \u003d model.getFilteredAppointmentList();","lastModifiedDate":"2022-10-18"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"        if (indexOfAppointment.getZeroBased() \u003e\u003d lastShownAppointmentList.size()) {","lastModifiedDate":"2022-10-18"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-18"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-02"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":40,"author":{"gitId":"NicholasTYD"},"content":"        Appointment targetAppointment \u003d lastShownAppointmentList.get(indexOfAppointment.getZeroBased());","lastModifiedDate":"2022-10-18"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"        return targetAppointment;","lastModifiedDate":"2022-10-02"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"    protected Person getTargetPerson(Model model) throws CommandException {","lastModifiedDate":"2022-10-02"},{"lineNumber":45,"author":{"gitId":"NicholasTYD"},"content":"        Person targetPerson \u003d getTargetAppointment(model).getPatient();","lastModifiedDate":"2022-10-18"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"        return targetPerson;","lastModifiedDate":"2022-10-02"},{"lineNumber":47,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":49,"author":{"gitId":"NicholasTYD"},"content":"    protected boolean hasSameIndexOfAppointment(SelectAppointmentCommand other) {","lastModifiedDate":"2022-10-04"},{"lineNumber":50,"author":{"gitId":"NicholasTYD"},"content":"        return indexOfAppointment.equals(other.indexOfAppointment);","lastModifiedDate":"2022-10-04"},{"lineNumber":51,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":52,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":53,"author":{"gitId":"JovonLim"},"content":"    @Override","lastModifiedDate":"2022-10-08"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-08"},{"lineNumber":55,"author":{"gitId":"JovonLim"},"content":"        // short circuit if same object","lastModifiedDate":"2022-10-08"},{"lineNumber":56,"author":{"gitId":"JovonLim"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-08"},{"lineNumber":57,"author":{"gitId":"JovonLim"},"content":"            return true;","lastModifiedDate":"2022-10-08"},{"lineNumber":58,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":59,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":60,"author":{"gitId":"JovonLim"},"content":"        // instanceof handles nulls","lastModifiedDate":"2022-10-08"},{"lineNumber":61,"author":{"gitId":"JovonLim"},"content":"        if (!(other instanceof SelectAppointmentCommand)) {","lastModifiedDate":"2022-10-08"},{"lineNumber":62,"author":{"gitId":"JovonLim"},"content":"            return false;","lastModifiedDate":"2022-10-08"},{"lineNumber":63,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":64,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":65,"author":{"gitId":"JovonLim"},"content":"        // state check","lastModifiedDate":"2022-10-08"},{"lineNumber":66,"author":{"gitId":"JovonLim"},"content":"        SelectAppointmentCommand e \u003d (SelectAppointmentCommand) other;","lastModifiedDate":"2022-10-08"},{"lineNumber":67,"author":{"gitId":"NicholasTYD"},"content":"        return indexOfAppointment.equals(e.indexOfAppointment);","lastModifiedDate":"2022-10-18"},{"lineNumber":68,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":69,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-02"}],"authorContributionMap":{"NicholasTYD":53,"JovonLim":16}},{"path":"src/main/java/seedu/address/logic/commands/UngroupCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WingKei67"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-22"},{"lineNumber":2,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":3,"author":{"gitId":"WingKei67"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-22"},{"lineNumber":4,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.model.Model.COMPARATOR_UNGROUP_APPOINTMENTS;","lastModifiedDate":"2022-10-22"},{"lineNumber":5,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.model.Model.COMPARATOR_UNGROUP_PATIENTS;","lastModifiedDate":"2022-10-22"},{"lineNumber":6,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":7,"author":{"gitId":"WingKei67"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-22"},{"lineNumber":8,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":9,"author":{"gitId":"WingKei67"},"content":"/**","lastModifiedDate":"2022-10-22"},{"lineNumber":10,"author":{"gitId":"WingKei67"},"content":" * Ungroup all persons or appointments in idENTify to the user.","lastModifiedDate":"2022-10-25"},{"lineNumber":11,"author":{"gitId":"WingKei67"},"content":" */","lastModifiedDate":"2022-10-22"},{"lineNumber":12,"author":{"gitId":"WingKei67"},"content":"public class UngroupCommand extends Command {","lastModifiedDate":"2022-10-22"},{"lineNumber":13,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":14,"author":{"gitId":"WingKei67"},"content":"    public static final String COMMAND_WORD \u003d \"ungroup\";","lastModifiedDate":"2022-10-22"},{"lineNumber":15,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":16,"author":{"gitId":"WingKei67"},"content":"    public static final String MESSAGE_SUCCESS_PATIENTS \u003d \"Ungrouped all patients.\";","lastModifiedDate":"2022-10-22"},{"lineNumber":17,"author":{"gitId":"WingKei67"},"content":"    public static final String MESSAGE_SUCCESS_APPOINTMENTS \u003d \"Ungrouped all appointments.\";","lastModifiedDate":"2022-10-22"},{"lineNumber":18,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":19,"author":{"gitId":"WingKei67"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" patients: Ungroup all patients by their tags.\\n\"","lastModifiedDate":"2022-10-22"},{"lineNumber":20,"author":{"gitId":"WingKei67"},"content":"            + COMMAND_WORD + \" appts: Ungroup all appointments by their tags.\\n\";","lastModifiedDate":"2022-10-22"},{"lineNumber":21,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":22,"author":{"gitId":"WingKei67"},"content":"    private final String type;","lastModifiedDate":"2022-10-22"},{"lineNumber":23,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":24,"author":{"gitId":"WingKei67"},"content":"    public UngroupCommand(String type) {","lastModifiedDate":"2022-10-22"},{"lineNumber":25,"author":{"gitId":"WingKei67"},"content":"        this.type \u003d type;","lastModifiedDate":"2022-10-22"},{"lineNumber":26,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-22"},{"lineNumber":27,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":28,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":29,"author":{"gitId":"WingKei67"},"content":"    @Override","lastModifiedDate":"2022-10-22"},{"lineNumber":30,"author":{"gitId":"WingKei67"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2022-10-22"},{"lineNumber":31,"author":{"gitId":"WingKei67"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-22"},{"lineNumber":32,"author":{"gitId":"WingKei67"},"content":"        if (this.type.equals(\"patients\")) {","lastModifiedDate":"2022-10-24"},{"lineNumber":33,"author":{"gitId":"WingKei67"},"content":"            model.updatePersonComparator(COMPARATOR_UNGROUP_PATIENTS);","lastModifiedDate":"2022-10-22"},{"lineNumber":34,"author":{"gitId":"WingKei67"},"content":"            return new CommandResult(MESSAGE_SUCCESS_PATIENTS);","lastModifiedDate":"2022-10-22"},{"lineNumber":35,"author":{"gitId":"WingKei67"},"content":"        } else {","lastModifiedDate":"2022-10-22"},{"lineNumber":36,"author":{"gitId":"WingKei67"},"content":"            model.updateAppointmentComparator(COMPARATOR_UNGROUP_APPOINTMENTS);","lastModifiedDate":"2022-10-22"},{"lineNumber":37,"author":{"gitId":"WingKei67"},"content":"            return new CommandResult(MESSAGE_SUCCESS_APPOINTMENTS);","lastModifiedDate":"2022-10-22"},{"lineNumber":38,"author":{"gitId":"WingKei67"},"content":"        }","lastModifiedDate":"2022-10-22"},{"lineNumber":39,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-22"},{"lineNumber":40,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":41,"author":{"gitId":"WingKei67"},"content":"    @Override","lastModifiedDate":"2022-10-22"},{"lineNumber":42,"author":{"gitId":"WingKei67"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-22"},{"lineNumber":43,"author":{"gitId":"WingKei67"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-22"},{"lineNumber":44,"author":{"gitId":"WingKei67"},"content":"                || (other instanceof UngroupCommand // instanceof handles nulls","lastModifiedDate":"2022-10-22"},{"lineNumber":45,"author":{"gitId":"WingKei67"},"content":"                \u0026\u0026 type.equals(((UngroupCommand) other).type)); // state check","lastModifiedDate":"2022-10-22"},{"lineNumber":46,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-22"},{"lineNumber":47,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-22"}],"authorContributionMap":{"WingKei67":47}},{"path":"src/main/java/seedu/address/logic/commands/UnhideAppointmentsCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"guanzhou03"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-25"},{"lineNumber":2,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":3,"author":{"gitId":"guanzhou03"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-25"},{"lineNumber":4,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REASON;","lastModifiedDate":"2022-10-25"},{"lineNumber":5,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;","lastModifiedDate":"2022-10-25"},{"lineNumber":6,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-10-25"},{"lineNumber":7,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":8,"author":{"gitId":"guanzhou03"},"content":"import java.util.Objects;","lastModifiedDate":"2022-10-25"},{"lineNumber":9,"author":{"gitId":"guanzhou03"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-25"},{"lineNumber":10,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":11,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-25"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-25"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-25"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.predicates.HiddenPredicateSingleton;","lastModifiedDate":"2022-10-25"},{"lineNumber":15,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":16,"author":{"gitId":"guanzhou03"},"content":"/**","lastModifiedDate":"2022-10-25"},{"lineNumber":17,"author":{"gitId":"guanzhou03"},"content":" * Unhides appointments in idENTify previously hidden by some condition.","lastModifiedDate":"2022-10-25"},{"lineNumber":18,"author":{"gitId":"guanzhou03"},"content":" * Keyword matching is case-insensitive.","lastModifiedDate":"2022-10-31"},{"lineNumber":19,"author":{"gitId":"guanzhou03"},"content":" */","lastModifiedDate":"2022-10-25"},{"lineNumber":20,"author":{"gitId":"guanzhou03"},"content":"public class UnhideAppointmentsCommand extends Command {","lastModifiedDate":"2022-10-25"},{"lineNumber":21,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":22,"author":{"gitId":"guanzhou03"},"content":"    public static final String COMMAND_WORD \u003d \"unhide\";","lastModifiedDate":"2022-10-25"},{"lineNumber":23,"author":{"gitId":"guanzhou03"},"content":"    public static final String DESCRIPTOR_WORD \u003d \"appts\";","lastModifiedDate":"2022-10-25"},{"lineNumber":24,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":25,"author":{"gitId":"guanzhou03"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Unhides previously \"","lastModifiedDate":"2022-10-31"},{"lineNumber":26,"author":{"gitId":"guanzhou03"},"content":"            + \"hidden appointments which reason, tags, or status\\n\"","lastModifiedDate":"2022-10-31"},{"lineNumber":27,"author":{"gitId":"guanzhou03"},"content":"            + \"match any of the specified keywords (case-insensitive) and displays\\n\"","lastModifiedDate":"2022-10-31"},{"lineNumber":28,"author":{"gitId":"guanzhou03"},"content":"            + \"the appointments which are not hidden.\\n\"","lastModifiedDate":"2022-10-31"},{"lineNumber":29,"author":{"gitId":"guanzhou03"},"content":"            + \"Parameters: \" + PREFIX_REASON + \"REASON [r/MORE_REASONS]...\\n\"","lastModifiedDate":"2022-10-31"},{"lineNumber":30,"author":{"gitId":"guanzhou03"},"content":"            + \"OR: \" + PREFIX_TAG + \"TAG [t/MORE_TAGS]...\\n\"","lastModifiedDate":"2022-10-31"},{"lineNumber":31,"author":{"gitId":"guanzhou03"},"content":"            + \"OR: \" + PREFIX_STATUS + \"STATUS\\n\"","lastModifiedDate":"2022-10-31"},{"lineNumber":32,"author":{"gitId":"guanzhou03"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + DESCRIPTOR_WORD + \" \" + PREFIX_REASON + \"pain r/infection\\n\"","lastModifiedDate":"2022-10-31"},{"lineNumber":33,"author":{"gitId":"guanzhou03"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + DESCRIPTOR_WORD + \" \" + PREFIX_STATUS + \"marked\";","lastModifiedDate":"2022-10-25"},{"lineNumber":34,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":35,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":36,"author":{"gitId":"guanzhou03"},"content":"    private Predicate\u003cAppointment\u003e predicate;","lastModifiedDate":"2022-10-25"},{"lineNumber":37,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":38,"author":{"gitId":"guanzhou03"},"content":"    public UnhideAppointmentsCommand(Predicate\u003cAppointment\u003e predicate) {","lastModifiedDate":"2022-10-25"},{"lineNumber":39,"author":{"gitId":"guanzhou03"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2022-10-25"},{"lineNumber":40,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-25"},{"lineNumber":41,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":42,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":43,"author":{"gitId":"guanzhou03"},"content":"    @Override","lastModifiedDate":"2022-10-25"},{"lineNumber":44,"author":{"gitId":"guanzhou03"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2022-10-25"},{"lineNumber":45,"author":{"gitId":"guanzhou03"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-25"},{"lineNumber":46,"author":{"gitId":"guanzhou03"},"content":"        Predicate\u003cAppointment\u003e combinedPredicate \u003d","lastModifiedDate":"2022-10-25"},{"lineNumber":47,"author":{"gitId":"guanzhou03"},"content":"                HiddenPredicateSingleton.getInstance()","lastModifiedDate":"2022-11-05"},{"lineNumber":48,"author":{"gitId":"guanzhou03"},"content":"                        .combineWithUnhiddenApptPredicate(predicate);","lastModifiedDate":"2022-11-05"},{"lineNumber":49,"author":{"gitId":"guanzhou03"},"content":"        model.updateFilteredAppointmentList(combinedPredicate);","lastModifiedDate":"2022-10-31"},{"lineNumber":50,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":51,"author":{"gitId":"guanzhou03"},"content":"        return new CommandResult(","lastModifiedDate":"2022-10-25"},{"lineNumber":52,"author":{"gitId":"guanzhou03"},"content":"                String.format(Messages.MESSAGE_RESULTS_LISTED_OVERVIEW,","lastModifiedDate":"2022-10-25"},{"lineNumber":53,"author":{"gitId":"guanzhou03"},"content":"                        model.getFilteredPersonList().size(),","lastModifiedDate":"2022-10-25"},{"lineNumber":54,"author":{"gitId":"guanzhou03"},"content":"                        model.getFilteredAppointmentList().size()));","lastModifiedDate":"2022-10-25"},{"lineNumber":55,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-25"},{"lineNumber":56,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":57,"author":{"gitId":"guanzhou03"},"content":"    @Override","lastModifiedDate":"2022-10-25"},{"lineNumber":58,"author":{"gitId":"guanzhou03"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-25"},{"lineNumber":59,"author":{"gitId":"guanzhou03"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-25"},{"lineNumber":60,"author":{"gitId":"guanzhou03"},"content":"            return true;","lastModifiedDate":"2022-10-25"},{"lineNumber":61,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-25"},{"lineNumber":62,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":63,"author":{"gitId":"guanzhou03"},"content":"        if (!(other instanceof UnhideAppointmentsCommand)) {","lastModifiedDate":"2022-10-25"},{"lineNumber":64,"author":{"gitId":"guanzhou03"},"content":"            return false;","lastModifiedDate":"2022-10-25"},{"lineNumber":65,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-25"},{"lineNumber":66,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":67,"author":{"gitId":"guanzhou03"},"content":"        UnhideAppointmentsCommand otherCommand \u003d (UnhideAppointmentsCommand) other;","lastModifiedDate":"2022-10-25"},{"lineNumber":68,"author":{"gitId":"guanzhou03"},"content":"        return otherCommand.predicate.equals(this.predicate);","lastModifiedDate":"2022-10-25"},{"lineNumber":69,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-25"},{"lineNumber":70,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":71,"author":{"gitId":"guanzhou03"},"content":"    @Override","lastModifiedDate":"2022-10-25"},{"lineNumber":72,"author":{"gitId":"guanzhou03"},"content":"    public int hashCode() {","lastModifiedDate":"2022-10-25"},{"lineNumber":73,"author":{"gitId":"guanzhou03"},"content":"        return Objects.hash(predicate);","lastModifiedDate":"2022-10-25"},{"lineNumber":74,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-25"},{"lineNumber":75,"author":{"gitId":"guanzhou03"},"content":"}","lastModifiedDate":"2022-10-25"}],"authorContributionMap":{"JovonLim":1,"guanzhou03":74}},{"path":"src/main/java/seedu/address/logic/commands/UnhidePatientsCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"guanzhou03"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-25"},{"lineNumber":2,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":3,"author":{"gitId":"guanzhou03"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-25"},{"lineNumber":4,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-10-25"},{"lineNumber":5,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-10-25"},{"lineNumber":6,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":7,"author":{"gitId":"guanzhou03"},"content":"import java.util.List;","lastModifiedDate":"2022-10-25"},{"lineNumber":8,"author":{"gitId":"guanzhou03"},"content":"import java.util.Objects;","lastModifiedDate":"2022-10-25"},{"lineNumber":9,"author":{"gitId":"guanzhou03"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-25"},{"lineNumber":10,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":11,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-25"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-25"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-25"},{"lineNumber":14,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.person.predicates.AppointmentOfFilteredPersonsPredicate;","lastModifiedDate":"2022-10-25"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.predicates.HiddenPredicateSingleton;","lastModifiedDate":"2022-10-25"},{"lineNumber":16,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":17,"author":{"gitId":"guanzhou03"},"content":"/**","lastModifiedDate":"2022-10-25"},{"lineNumber":18,"author":{"gitId":"WingKei67"},"content":" * Unhides all persons and their appointments in idENTify whose name contains any of the argument keywords.","lastModifiedDate":"2022-10-25"},{"lineNumber":19,"author":{"gitId":"guanzhou03"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2022-10-25"},{"lineNumber":20,"author":{"gitId":"guanzhou03"},"content":" */","lastModifiedDate":"2022-10-25"},{"lineNumber":21,"author":{"gitId":"guanzhou03"},"content":"public class UnhidePatientsCommand extends Command {","lastModifiedDate":"2022-10-25"},{"lineNumber":22,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":23,"author":{"gitId":"guanzhou03"},"content":"    public static final String COMMAND_WORD \u003d \"unhide\";","lastModifiedDate":"2022-10-25"},{"lineNumber":24,"author":{"gitId":"guanzhou03"},"content":"    public static final String DESCRIPTOR_WORD \u003d \"patients\";","lastModifiedDate":"2022-10-25"},{"lineNumber":25,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":26,"author":{"gitId":"guanzhou03"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Unhides (shows) previously \"","lastModifiedDate":"2022-10-31"},{"lineNumber":27,"author":{"gitId":"guanzhou03"},"content":"            + \"hidden patients whose names or tags contain any of the\\n\"","lastModifiedDate":"2022-10-31"},{"lineNumber":28,"author":{"gitId":"guanzhou03"},"content":"            + \"specified keywords (case-insensitive) and displays \"","lastModifiedDate":"2022-10-31"},{"lineNumber":29,"author":{"gitId":"guanzhou03"},"content":"            + \"them and their appointments as 2 lists with index numbers.\\n\"","lastModifiedDate":"2022-10-31"},{"lineNumber":30,"author":{"gitId":"guanzhou03"},"content":"            + \"Parameters: \" + PREFIX_NAME + \"NAME [n/MORE_NAMES]...\\n\"","lastModifiedDate":"2022-10-31"},{"lineNumber":31,"author":{"gitId":"guanzhou03"},"content":"            + \"OR: \" + PREFIX_TAG + \"TAG [t/MORE_TAGS]...\\n\"","lastModifiedDate":"2022-10-31"},{"lineNumber":32,"author":{"gitId":"guanzhou03"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + DESCRIPTOR_WORD + \" n/alice n/bob n/charlie\\n\"","lastModifiedDate":"2022-10-31"},{"lineNumber":33,"author":{"gitId":"guanzhou03"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + DESCRIPTOR_WORD + \" t/ear t/nose\";","lastModifiedDate":"2022-10-31"},{"lineNumber":34,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":35,"author":{"gitId":"guanzhou03"},"content":"    private Predicate\u003cPerson\u003e predicate;","lastModifiedDate":"2022-10-25"},{"lineNumber":36,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":37,"author":{"gitId":"guanzhou03"},"content":"    public UnhidePatientsCommand(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2022-10-25"},{"lineNumber":38,"author":{"gitId":"guanzhou03"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2022-10-25"},{"lineNumber":39,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-25"},{"lineNumber":40,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":41,"author":{"gitId":"guanzhou03"},"content":"    @Override","lastModifiedDate":"2022-10-25"},{"lineNumber":42,"author":{"gitId":"guanzhou03"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2022-10-25"},{"lineNumber":43,"author":{"gitId":"guanzhou03"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-25"},{"lineNumber":44,"author":{"gitId":"guanzhou03"},"content":"        HiddenPredicateSingleton predicateInstance \u003d HiddenPredicateSingleton.getInstance();","lastModifiedDate":"2022-11-06"},{"lineNumber":45,"author":{"gitId":"guanzhou03"},"content":"        Predicate\u003cPerson\u003e combinedPredicate \u003d predicateInstance","lastModifiedDate":"2022-11-06"},{"lineNumber":46,"author":{"gitId":"guanzhou03"},"content":"                .combineWithUnhiddenPredicate(predicate);","lastModifiedDate":"2022-11-05"},{"lineNumber":47,"author":{"gitId":"guanzhou03"},"content":"        model.updateFilteredPersonList(combinedPredicate);","lastModifiedDate":"2022-10-25"},{"lineNumber":48,"author":{"gitId":"guanzhou03"},"content":"        List\u003cPerson\u003e validPersons \u003d model.getFilteredPersonList();","lastModifiedDate":"2022-10-25"},{"lineNumber":49,"author":{"gitId":"guanzhou03"},"content":"        AppointmentOfFilteredPersonsPredicate appointmentPredicate \u003d","lastModifiedDate":"2022-10-25"},{"lineNumber":50,"author":{"gitId":"guanzhou03"},"content":"                new AppointmentOfFilteredPersonsPredicate(validPersons);","lastModifiedDate":"2022-10-25"},{"lineNumber":51,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-28"},{"lineNumber":52,"author":{"gitId":"guanzhou03"},"content":"        model.updateFilteredAppointmentList(appointmentPredicate.and(","lastModifiedDate":"2022-11-06"},{"lineNumber":53,"author":{"gitId":"guanzhou03"},"content":"                predicateInstance.getCurrApptPredicate()));","lastModifiedDate":"2022-11-06"},{"lineNumber":54,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":55,"author":{"gitId":"guanzhou03"},"content":"        return new CommandResult(","lastModifiedDate":"2022-10-25"},{"lineNumber":56,"author":{"gitId":"guanzhou03"},"content":"                String.format(Messages.MESSAGE_RESULTS_LISTED_OVERVIEW,","lastModifiedDate":"2022-10-25"},{"lineNumber":57,"author":{"gitId":"guanzhou03"},"content":"                        model.getFilteredPersonList().size(),","lastModifiedDate":"2022-10-25"},{"lineNumber":58,"author":{"gitId":"guanzhou03"},"content":"                        model.getFilteredAppointmentList().size()));","lastModifiedDate":"2022-10-25"},{"lineNumber":59,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-25"},{"lineNumber":60,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":61,"author":{"gitId":"guanzhou03"},"content":"    @Override","lastModifiedDate":"2022-10-25"},{"lineNumber":62,"author":{"gitId":"guanzhou03"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-25"},{"lineNumber":63,"author":{"gitId":"guanzhou03"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-25"},{"lineNumber":64,"author":{"gitId":"guanzhou03"},"content":"            return true;","lastModifiedDate":"2022-10-25"},{"lineNumber":65,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-25"},{"lineNumber":66,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":67,"author":{"gitId":"guanzhou03"},"content":"        if (!(other instanceof UnhidePatientsCommand)) {","lastModifiedDate":"2022-10-25"},{"lineNumber":68,"author":{"gitId":"guanzhou03"},"content":"            return false;","lastModifiedDate":"2022-10-25"},{"lineNumber":69,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-25"},{"lineNumber":70,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":71,"author":{"gitId":"guanzhou03"},"content":"        UnhidePatientsCommand otherCommand \u003d (UnhidePatientsCommand) other;","lastModifiedDate":"2022-10-25"},{"lineNumber":72,"author":{"gitId":"guanzhou03"},"content":"        return otherCommand.predicate.equals(this.predicate);","lastModifiedDate":"2022-10-25"},{"lineNumber":73,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-25"},{"lineNumber":74,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":75,"author":{"gitId":"guanzhou03"},"content":"    @Override","lastModifiedDate":"2022-10-25"},{"lineNumber":76,"author":{"gitId":"guanzhou03"},"content":"    public int hashCode() {","lastModifiedDate":"2022-10-25"},{"lineNumber":77,"author":{"gitId":"guanzhou03"},"content":"        return Objects.hash(predicate);","lastModifiedDate":"2022-10-25"},{"lineNumber":78,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-25"},{"lineNumber":79,"author":{"gitId":"guanzhou03"},"content":"}","lastModifiedDate":"2022-10-25"}],"authorContributionMap":{"NicholasTYD":1,"JovonLim":1,"WingKei67":1,"guanzhou03":76}},{"path":"src/main/java/seedu/address/logic/commands/UnmarkCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-02"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-02"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-02"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-02"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-02"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.predicates.HiddenPredicateSingleton;","lastModifiedDate":"2022-11-06"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"/**","lastModifiedDate":"2022-10-02"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":" * Unmarks an appointment for the given patient as incomplete.","lastModifiedDate":"2022-10-02"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":" */","lastModifiedDate":"2022-10-02"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"public class UnmarkCommand extends SelectAppointmentCommand {","lastModifiedDate":"2022-10-02"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"    public static final String COMMAND_WORD \u003d \"unmark\";","lastModifiedDate":"2022-10-02"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"    public static final String MESSAGE_USAGE \u003d","lastModifiedDate":"2022-10-18"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"            COMMAND_WORD + \": Unmarks an appointment in the appointment list as uncompleted\\n\"","lastModifiedDate":"2022-10-18"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"                    + \"Parameters: APPOINTMENT_INDEX (must be a valid appointment index and a positive integer)\\n\"","lastModifiedDate":"2022-10-18"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"                    + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"    public static final String MESSAGE_UNMARK_PERSON_SUCCESS \u003d \"Unmarked appointment %1$s.\";","lastModifiedDate":"2022-10-25"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"    public static final String MESSAGE_ALREADY_UNMARKED \u003d \"This appointment is already unmarked.\";","lastModifiedDate":"2022-10-02"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-02"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"     * Creates an unmark command containing the index of an appointment.","lastModifiedDate":"2022-10-18"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"     * @param indexOfAppointment Index of the appointment in the appointmentlist to unmark.","lastModifiedDate":"2022-10-18"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-02"},{"lineNumber":28,"author":{"gitId":"NicholasTYD"},"content":"    public UnmarkCommand(Index indexOfAppointment) {","lastModifiedDate":"2022-10-18"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"        super(indexOfAppointment);","lastModifiedDate":"2022-10-18"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"    @Override","lastModifiedDate":"2022-10-02"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-02"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"        Appointment appointmentToUnmark \u003d getTargetAppointment(model);","lastModifiedDate":"2022-10-02"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"        if (!appointmentToUnmark.isMarked()) {","lastModifiedDate":"2022-10-02"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"            throw new CommandException(MESSAGE_ALREADY_UNMARKED);","lastModifiedDate":"2022-10-02"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-02"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":40,"author":{"gitId":"NicholasTYD"},"content":"        appointmentToUnmark.unmark();","lastModifiedDate":"2022-10-02"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"        model.updateFilteredLists(HiddenPredicateSingleton.getInstance().getCurrPersonPredicate(),","lastModifiedDate":"2022-11-06"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"                HiddenPredicateSingleton.getInstance().getCurrApptPredicate());","lastModifiedDate":"2022-11-06"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"        return new CommandResult(String.format(MESSAGE_UNMARK_PERSON_SUCCESS,","lastModifiedDate":"2022-10-02"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"                indexOfAppointment.getOneBased()));","lastModifiedDate":"2022-10-25"},{"lineNumber":45,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":47,"author":{"gitId":"NicholasTYD"},"content":"    @Override","lastModifiedDate":"2022-10-04"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-04"},{"lineNumber":49,"author":{"gitId":"NicholasTYD"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-04"},{"lineNumber":50,"author":{"gitId":"NicholasTYD"},"content":"            return true;","lastModifiedDate":"2022-10-04"},{"lineNumber":51,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-04"},{"lineNumber":52,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":53,"author":{"gitId":"NicholasTYD"},"content":"        if (!(other instanceof UnmarkCommand)) {","lastModifiedDate":"2022-10-04"},{"lineNumber":54,"author":{"gitId":"NicholasTYD"},"content":"            return false;","lastModifiedDate":"2022-10-04"},{"lineNumber":55,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-04"},{"lineNumber":56,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":57,"author":{"gitId":"NicholasTYD"},"content":"        UnmarkCommand otherCommand \u003d (UnmarkCommand) other;","lastModifiedDate":"2022-10-04"},{"lineNumber":58,"author":{"gitId":"NicholasTYD"},"content":"        return hasSameIndexOfAppointment(otherCommand);","lastModifiedDate":"2022-10-18"},{"lineNumber":59,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":60,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-02"}],"authorContributionMap":{"NicholasTYD":57,"JovonLim":3}},{"path":"src/main/java/seedu/address/logic/commands/exceptions/CommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands.exceptions;","lastModifiedDate":"2017-02-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"pwjj2000"},"content":" * Represents an error which occurs during execution of a {@code Command}.","lastModifiedDate":"2022-11-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CommandException extends Exception {","lastModifiedDate":"2017-02-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public CommandException(String message) {","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}.","lastModifiedDate":"2018-08-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public CommandException(String message, Throwable cause) {","lastModifiedDate":"2018-08-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2018-08-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"-":16,"pwjj2000":1}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-02-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-03-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-03-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-03-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-03-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-03-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-17"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":29,"author":{"gitId":"pwjj2000"},"content":"     * Parses given arguments to determine execution of {@code AddCommand}.","lastModifiedDate":"2022-11-06"},{"lineNumber":30,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":31,"author":{"gitId":"pwjj2000"},"content":"     * @param args Arguments to be parsed.","lastModifiedDate":"2022-11-06"},{"lineNumber":32,"author":{"gitId":"pwjj2000"},"content":"     * @return {@code AddCommand} to be executed.","lastModifiedDate":"2022-11-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);","lastModifiedDate":"2017-06-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":39,"author":{"gitId":"WingKei67"},"content":"        if ((!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE))","lastModifiedDate":"2022-10-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                    || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":44,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"WingKei67"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).orElse(\"\"));","lastModifiedDate":"2022-10-06"},{"lineNumber":47,"author":{"gitId":"WingKei67"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).orElse(\"\"));","lastModifiedDate":"2022-10-06"},{"lineNumber":48,"author":{"gitId":"WingKei67"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).orElse(\"\"));","lastModifiedDate":"2022-10-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2017-03-17"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"        Person person \u003d new Person(name, phone, email, address, new ArrayList\u003c\u003e(), tagList);","lastModifiedDate":"2022-10-01"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return new AddCommand(person);","lastModifiedDate":"2017-03-17"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":59,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":60,"author":{"gitId":"pwjj2000"},"content":"     * @return Whether all prefixes contain non-empty values.","lastModifiedDate":"2022-11-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"JovonLim":2,"WingKei67":5,"-":53,"pwjj2000":6}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.commons.core.Messages.INCOMPLETE_COMMAND;","lastModifiedDate":"2022-10-08"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.commons.core.Messages.INCOMPLETE_LIST_COMMAND;","lastModifiedDate":"2022-10-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2022-10-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2022-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.BookCommand;","lastModifiedDate":"2022-10-01"},{"lineNumber":15,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.logic.commands.CancelCommand;","lastModifiedDate":"2022-10-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2017-01-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditAppointmentCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditPatientCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":23,"author":{"gitId":"WingKei67"},"content":"import seedu.address.logic.commands.GroupAppointmentCommand;","lastModifiedDate":"2022-10-24"},{"lineNumber":24,"author":{"gitId":"WingKei67"},"content":"import seedu.address.logic.commands.GroupPatientCommand;","lastModifiedDate":"2022-10-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":26,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.logic.commands.HideAppointmentsCommand;","lastModifiedDate":"2022-10-21"},{"lineNumber":27,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.logic.commands.HidePatientsCommand;","lastModifiedDate":"2022-10-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.commands.MarkCommand;","lastModifiedDate":"2022-10-02"},{"lineNumber":30,"author":{"gitId":"WingKei67"},"content":"import seedu.address.logic.commands.UngroupCommand;","lastModifiedDate":"2022-10-22"},{"lineNumber":31,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.logic.commands.UnhideAppointmentsCommand;","lastModifiedDate":"2022-10-25"},{"lineNumber":32,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.logic.commands.UnhidePatientsCommand;","lastModifiedDate":"2022-10-25"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.commands.UnmarkCommand;","lastModifiedDate":"2022-10-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"    // Enhancement adapted from https://stackoverflow.com/a/73728685","lastModifiedDate":"2022-10-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)\"","lastModifiedDate":"2022-10-08"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"            + \"(?\u003cdescriptor\u003e(?i:\\\\s+appts|\\\\s+patients|\\\\s+all)?)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2022-10-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(AddressBookParser.class);","lastModifiedDate":"2022-10-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"NicholasTYD"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\").toLowerCase();","lastModifiedDate":"2022-10-09"},{"lineNumber":64,"author":{"gitId":"JovonLim"},"content":"        final String descriptor \u003d matcher.group(\"descriptor\").trim().toLowerCase();","lastModifiedDate":"2022-10-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"JovonLim"},"content":"        logger.info(descriptor);","lastModifiedDate":"2022-10-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2022-11-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"JovonLim"},"content":"        case EditPatientCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-08"},{"lineNumber":73,"author":{"gitId":"NicholasTYD"},"content":"            return parseEditPatientCommand(descriptor, arguments);","lastModifiedDate":"2022-11-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2022-11-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"WingKei67"},"content":"        case GroupPatientCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-24"},{"lineNumber":82,"author":{"gitId":"NicholasTYD"},"content":"            return parseGroupCommand(descriptor, arguments);","lastModifiedDate":"2022-11-06"},{"lineNumber":83,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":84,"author":{"gitId":"NicholasTYD"},"content":"        case UngroupCommand.COMMAND_WORD:","lastModifiedDate":"2022-11-06"},{"lineNumber":85,"author":{"gitId":"NicholasTYD"},"content":"            return parseUngroupCommand(descriptor, arguments);","lastModifiedDate":"2022-11-06"},{"lineNumber":86,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2022-11-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2022-11-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":90,"author":{"gitId":"NicholasTYD"},"content":"        case HidePatientsCommand.COMMAND_WORD:","lastModifiedDate":"2022-11-06"},{"lineNumber":91,"author":{"gitId":"NicholasTYD"},"content":"            return parseHidePatientsCommand(descriptor, arguments);","lastModifiedDate":"2022-11-06"},{"lineNumber":92,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":93,"author":{"gitId":"NicholasTYD"},"content":"        case UnhidePatientsCommand.COMMAND_WORD:","lastModifiedDate":"2022-11-06"},{"lineNumber":94,"author":{"gitId":"NicholasTYD"},"content":"            return parseUnhidePatientsCommand(descriptor, arguments);","lastModifiedDate":"2022-11-06"},{"lineNumber":95,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":96,"author":{"gitId":"NicholasTYD"},"content":"        case BookCommand.COMMAND_WORD:","lastModifiedDate":"2022-11-06"},{"lineNumber":97,"author":{"gitId":"NicholasTYD"},"content":"            return new BookCommandParser().parse(arguments);","lastModifiedDate":"2022-11-06"},{"lineNumber":98,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":99,"author":{"gitId":"NicholasTYD"},"content":"        case CancelCommand.COMMAND_WORD:","lastModifiedDate":"2022-11-06"},{"lineNumber":100,"author":{"gitId":"NicholasTYD"},"content":"            return new CancelCommandParser().parse(arguments);","lastModifiedDate":"2022-11-06"},{"lineNumber":101,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":102,"author":{"gitId":"NicholasTYD"},"content":"        case MarkCommand.COMMAND_WORD:","lastModifiedDate":"2022-11-06"},{"lineNumber":103,"author":{"gitId":"NicholasTYD"},"content":"            return new MarkCommandParser().parse(arguments);","lastModifiedDate":"2022-11-06"},{"lineNumber":104,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":105,"author":{"gitId":"NicholasTYD"},"content":"        case UnmarkCommand.COMMAND_WORD:","lastModifiedDate":"2022-11-06"},{"lineNumber":106,"author":{"gitId":"NicholasTYD"},"content":"            return new UnmarkCommandParser().parse(arguments);","lastModifiedDate":"2022-11-06"},{"lineNumber":107,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2022-11-06"},{"lineNumber":109,"author":{"gitId":"NicholasTYD"},"content":"            return parseListCommand(descriptor, arguments);","lastModifiedDate":"2022-11-06"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2022-11-06"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2022-11-06"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2022-11-06"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2022-11-06"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2022-11-06"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2022-11-06"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-11-06"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-11-06"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":122,"author":{"gitId":"NicholasTYD"},"content":"    private Command parseEditPatientCommand(String descriptor, String arguments) throws ParseException {","lastModifiedDate":"2022-11-06"},{"lineNumber":123,"author":{"gitId":"NicholasTYD"},"content":"        if (descriptor.equals(EditPatientCommand.DESCRIPTOR_WORD)) {","lastModifiedDate":"2022-11-06"},{"lineNumber":124,"author":{"gitId":"NicholasTYD"},"content":"            return new EditPatientCommandParser().parse(arguments);","lastModifiedDate":"2022-11-06"},{"lineNumber":125,"author":{"gitId":"NicholasTYD"},"content":"        } else if (descriptor.equals(EditAppointmentCommand.DESCRIPTOR_WORD)) {","lastModifiedDate":"2022-11-06"},{"lineNumber":126,"author":{"gitId":"NicholasTYD"},"content":"            return new EditAppointmentCommandParser().parse(arguments);","lastModifiedDate":"2022-11-06"},{"lineNumber":127,"author":{"gitId":"NicholasTYD"},"content":"        } else {","lastModifiedDate":"2022-11-06"},{"lineNumber":128,"author":{"gitId":"NicholasTYD"},"content":"            throw new ParseException(INCOMPLETE_COMMAND);","lastModifiedDate":"2022-11-06"},{"lineNumber":129,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-11-06"},{"lineNumber":130,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-11-06"},{"lineNumber":131,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":132,"author":{"gitId":"NicholasTYD"},"content":"    private Command parseGroupCommand(String descriptor, String arguments) throws ParseException {","lastModifiedDate":"2022-11-06"},{"lineNumber":133,"author":{"gitId":"WingKei67"},"content":"        if (descriptor.equals(GroupPatientCommand.DESCRIPTOR_WORD)) {","lastModifiedDate":"2022-10-24"},{"lineNumber":134,"author":{"gitId":"WingKei67"},"content":"            return new GroupPatientCommand();","lastModifiedDate":"2022-10-24"},{"lineNumber":135,"author":{"gitId":"WingKei67"},"content":"        } else if (descriptor.equals(GroupAppointmentCommand.DESCRIPTOR_WORD)) {","lastModifiedDate":"2022-10-24"},{"lineNumber":136,"author":{"gitId":"WingKei67"},"content":"            return new GroupAppointmentCommandParser().parse(arguments);","lastModifiedDate":"2022-10-24"},{"lineNumber":137,"author":{"gitId":"WingKei67"},"content":"        } else {","lastModifiedDate":"2022-10-22"},{"lineNumber":138,"author":{"gitId":"WingKei67"},"content":"            throw new ParseException(INCOMPLETE_COMMAND);","lastModifiedDate":"2022-10-22"},{"lineNumber":139,"author":{"gitId":"WingKei67"},"content":"        }","lastModifiedDate":"2022-10-22"},{"lineNumber":140,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-11-06"},{"lineNumber":141,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":142,"author":{"gitId":"NicholasTYD"},"content":"    private UngroupCommand parseUngroupCommand(String descriptor, String arguments) throws ParseException {","lastModifiedDate":"2022-11-06"},{"lineNumber":143,"author":{"gitId":"WingKei67"},"content":"        if (!descriptor.isEmpty()) {","lastModifiedDate":"2022-10-22"},{"lineNumber":144,"author":{"gitId":"WingKei67"},"content":"            return new UngroupCommand(descriptor);","lastModifiedDate":"2022-10-22"},{"lineNumber":145,"author":{"gitId":"WingKei67"},"content":"        } else if (!arguments.isEmpty()) {","lastModifiedDate":"2022-10-22"},{"lineNumber":146,"author":{"gitId":"WingKei67"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UngroupCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-22"},{"lineNumber":147,"author":{"gitId":"WingKei67"},"content":"        } else {","lastModifiedDate":"2022-10-22"},{"lineNumber":148,"author":{"gitId":"WingKei67"},"content":"            throw new ParseException(INCOMPLETE_COMMAND);","lastModifiedDate":"2022-10-22"},{"lineNumber":149,"author":{"gitId":"WingKei67"},"content":"        }","lastModifiedDate":"2022-10-22"},{"lineNumber":150,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-11-06"},{"lineNumber":151,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":152,"author":{"gitId":"NicholasTYD"},"content":"    private Command parseHidePatientsCommand(String descriptor, String arguments) throws ParseException {","lastModifiedDate":"2022-11-06"},{"lineNumber":153,"author":{"gitId":"guanzhou03"},"content":"        if (descriptor.equals(HidePatientsCommand.DESCRIPTOR_WORD)) {","lastModifiedDate":"2022-10-13"},{"lineNumber":154,"author":{"gitId":"guanzhou03"},"content":"            return new HidePatientsCommandParser().parse(arguments);","lastModifiedDate":"2022-10-13"},{"lineNumber":155,"author":{"gitId":"guanzhou03"},"content":"        } else if (descriptor.equals(HideAppointmentsCommand.DESCRIPTOR_WORD)) {","lastModifiedDate":"2022-10-16"},{"lineNumber":156,"author":{"gitId":"guanzhou03"},"content":"            return new HideAppointmentsCommandParser().parse(arguments);","lastModifiedDate":"2022-10-16"},{"lineNumber":157,"author":{"gitId":"guanzhou03"},"content":"        } else {","lastModifiedDate":"2022-10-12"},{"lineNumber":158,"author":{"gitId":"guanzhou03"},"content":"            throw new ParseException(INCOMPLETE_COMMAND);","lastModifiedDate":"2022-10-12"},{"lineNumber":159,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-12"},{"lineNumber":160,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-11-06"},{"lineNumber":161,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":162,"author":{"gitId":"NicholasTYD"},"content":"    private Command parseUnhidePatientsCommand(String descriptor, String arguments) throws ParseException {","lastModifiedDate":"2022-11-06"},{"lineNumber":163,"author":{"gitId":"guanzhou03"},"content":"        if (descriptor.equals(UnhidePatientsCommand.DESCRIPTOR_WORD)) {","lastModifiedDate":"2022-10-25"},{"lineNumber":164,"author":{"gitId":"guanzhou03"},"content":"            return new UnhidePatientsCommandParser().parse(arguments);","lastModifiedDate":"2022-10-25"},{"lineNumber":165,"author":{"gitId":"guanzhou03"},"content":"        } else if (descriptor.equals(UnhideAppointmentsCommand.DESCRIPTOR_WORD)) {","lastModifiedDate":"2022-10-25"},{"lineNumber":166,"author":{"gitId":"guanzhou03"},"content":"            return new UnhideAppointmentsCommandParser().parse(arguments);","lastModifiedDate":"2022-10-25"},{"lineNumber":167,"author":{"gitId":"guanzhou03"},"content":"        } else {","lastModifiedDate":"2022-10-25"},{"lineNumber":168,"author":{"gitId":"guanzhou03"},"content":"            throw new ParseException(INCOMPLETE_COMMAND);","lastModifiedDate":"2022-10-25"},{"lineNumber":169,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-25"},{"lineNumber":170,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-11-06"},{"lineNumber":171,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":172,"author":{"gitId":"NicholasTYD"},"content":"    private ListCommand parseListCommand(String descriptor, String arguments) throws ParseException {","lastModifiedDate":"2022-11-06"},{"lineNumber":173,"author":{"gitId":"JovonLim"},"content":"        if (!descriptor.isEmpty()) {","lastModifiedDate":"2022-10-09"},{"lineNumber":174,"author":{"gitId":"JovonLim"},"content":"            return new ListCommand(descriptor);","lastModifiedDate":"2022-10-09"},{"lineNumber":175,"author":{"gitId":"JovonLim"},"content":"        } else if (!arguments.isEmpty()) {","lastModifiedDate":"2022-10-09"},{"lineNumber":176,"author":{"gitId":"JovonLim"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-09"},{"lineNumber":177,"author":{"gitId":"JovonLim"},"content":"        } else {","lastModifiedDate":"2022-10-09"},{"lineNumber":178,"author":{"gitId":"NicholasTYD"},"content":"            throw new ParseException(INCOMPLETE_LIST_COMMAND);","lastModifiedDate":"2022-10-24"},{"lineNumber":179,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-09"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":181,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"NicholasTYD":51,"JovonLim":18,"WingKei67":20,"-":72,"guanzhou03":20}},{"path":"src/main/java/seedu/address/logic/parser/ArgumentMultimap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-03-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2017-03-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-03-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2017-03-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-03-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Stores mapping of prefixes to their respective arguments.","lastModifiedDate":"2017-03-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Each key may be associated with multiple argument values.","lastModifiedDate":"2017-03-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained.","lastModifiedDate":"2017-03-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value","lastModifiedDate":"2017-03-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * can be inserted multiple times for the same prefix.","lastModifiedDate":"2017-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentMultimap {","lastModifiedDate":"2017-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /** Prefixes mapped to their respective arguments**/","lastModifiedDate":"2017-03-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map.","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values.","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated","lastModifiedDate":"2017-03-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void put(Prefix prefix, String argValue) {","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        argValues.add(argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        argMultimap.put(prefix, argValues);","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns the last value of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":36,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":37,"author":{"gitId":"pwjj2000"},"content":"     * @param prefix Given prefix.","lastModifiedDate":"2022-11-06"},{"lineNumber":38,"author":{"gitId":"pwjj2000"},"content":"     * @return Last value with the given prefix.","lastModifiedDate":"2022-11-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2017-03-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Returns all values of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list.","lastModifiedDate":"2017-03-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap.","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":50,"author":{"gitId":"pwjj2000"},"content":"     * @param prefix Given prefix.","lastModifiedDate":"2022-11-06"},{"lineNumber":51,"author":{"gitId":"pwjj2000"},"content":"     * @return All values of given prefix.","lastModifiedDate":"2022-11-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));","lastModifiedDate":"2017-03-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces.","lastModifiedDate":"2017-03-08"},{"lineNumber":62,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":63,"author":{"gitId":"pwjj2000"},"content":"     * @return text before first valid prefix.","lastModifiedDate":"2022-11-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public String getPreamble() {","lastModifiedDate":"2017-03-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-08"}],"authorContributionMap":{"-":60,"pwjj2000":8}},{"path":"src/main/java/seedu/address/logic/parser/BookCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-01"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-01"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-01"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-10-01"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REASON;","lastModifiedDate":"2022-10-01"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RECURRING_PERIOD;","lastModifiedDate":"2022-10-14"},{"lineNumber":8,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-10-21"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":10,"author":{"gitId":"pwjj2000"},"content":"import java.util.Set;","lastModifiedDate":"2022-10-21"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2022-10-09"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-01"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.BookCommand;","lastModifiedDate":"2022-10-01"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-01"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":17,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"/**","lastModifiedDate":"2022-10-01"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":" * Parses input arguments and creates a new BookCommand object.","lastModifiedDate":"2022-10-01"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":" */","lastModifiedDate":"2022-10-01"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"public class BookCommandParser implements Parser\u003cBookCommand\u003e {","lastModifiedDate":"2022-10-01"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"    @Override","lastModifiedDate":"2022-10-01"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":"    public BookCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-01"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"        requireNonNull(args);","lastModifiedDate":"2022-10-01"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_REASON, PREFIX_DATE,","lastModifiedDate":"2022-10-14"},{"lineNumber":27,"author":{"gitId":"pwjj2000"},"content":"                PREFIX_RECURRING_PERIOD, PREFIX_TAG);","lastModifiedDate":"2022-10-21"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"        Index index;","lastModifiedDate":"2022-10-01"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_REASON, PREFIX_DATE)","lastModifiedDate":"2022-10-09"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"                || argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2022-10-09"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, BookCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-09"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-09"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"        try {","lastModifiedDate":"2022-10-01"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2022-10-01"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"        } catch (ParseException e) {","lastModifiedDate":"2022-10-09"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, BookCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-09"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":41,"author":{"gitId":"pwjj2000"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2022-10-21"},{"lineNumber":42,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"        Appointment appointment \u003d ParserUtil.parseAppointment(argMultimap.getValue(PREFIX_REASON).get(),","lastModifiedDate":"2022-10-01"},{"lineNumber":44,"author":{"gitId":"pwjj2000"},"content":"                argMultimap.getValue(PREFIX_DATE).get(), argMultimap.getValue(PREFIX_RECURRING_PERIOD).orElse(\"\"),","lastModifiedDate":"2022-10-21"},{"lineNumber":45,"author":{"gitId":"pwjj2000"},"content":"                tagList);","lastModifiedDate":"2022-10-21"},{"lineNumber":46,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"        return new BookCommand(index, appointment);","lastModifiedDate":"2022-10-01"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-09"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2022-10-09"},{"lineNumber":52,"author":{"gitId":"JovonLim"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2022-10-09"},{"lineNumber":53,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-09"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2022-10-09"},{"lineNumber":55,"author":{"gitId":"JovonLim"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2022-10-09"},{"lineNumber":56,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":57,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-01"}],"authorContributionMap":{"JovonLim":48,"pwjj2000":9}},{"path":"src/main/java/seedu/address/logic/parser/CancelCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"guanzhou03"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-01"},{"lineNumber":2,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":3,"author":{"gitId":"guanzhou03"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-04"},{"lineNumber":4,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX;","lastModifiedDate":"2022-10-04"},{"lineNumber":5,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-11-07"},{"lineNumber":6,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":7,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-01"},{"lineNumber":8,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.logic.commands.CancelCommand;","lastModifiedDate":"2022-10-01"},{"lineNumber":9,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-01"},{"lineNumber":10,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":11,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"/**","lastModifiedDate":"2022-10-04"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":" * A class that encapsulates parsing of the input for cancel commands.","lastModifiedDate":"2022-10-04"},{"lineNumber":14,"author":{"gitId":"guanzhou03"},"content":" */","lastModifiedDate":"2022-10-04"},{"lineNumber":15,"author":{"gitId":"guanzhou03"},"content":"public class CancelCommandParser implements Parser\u003cCancelCommand\u003e {","lastModifiedDate":"2022-10-01"},{"lineNumber":16,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":17,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-10-04"},{"lineNumber":18,"author":{"gitId":"guanzhou03"},"content":"     * Reads the user input and generates the specified cancel command.","lastModifiedDate":"2022-10-04"},{"lineNumber":19,"author":{"gitId":"guanzhou03"},"content":"     * @param userInput Input string from user without the command word.","lastModifiedDate":"2022-10-04"},{"lineNumber":20,"author":{"gitId":"guanzhou03"},"content":"     * @return The specified cancel command to execute.","lastModifiedDate":"2022-10-04"},{"lineNumber":21,"author":{"gitId":"guanzhou03"},"content":"     * @throws ParseException If the input is not in the correct format.","lastModifiedDate":"2022-10-04"},{"lineNumber":22,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-10-04"},{"lineNumber":23,"author":{"gitId":"guanzhou03"},"content":"    @Override","lastModifiedDate":"2022-10-01"},{"lineNumber":24,"author":{"gitId":"guanzhou03"},"content":"    public CancelCommand parse(String userInput) throws ParseException {","lastModifiedDate":"2022-10-01"},{"lineNumber":25,"author":{"gitId":"guanzhou03"},"content":"        requireNonNull(userInput);","lastModifiedDate":"2022-10-01"},{"lineNumber":26,"author":{"gitId":"guanzhou03"},"content":"        String trimmedIndices \u003d userInput.trim();","lastModifiedDate":"2022-10-01"},{"lineNumber":27,"author":{"gitId":"guanzhou03"},"content":"        String[] arrIndex \u003d trimmedIndices.split(\" \");","lastModifiedDate":"2022-10-31"},{"lineNumber":28,"author":{"gitId":"guanzhou03"},"content":"        if (arrIndex.length !\u003d 1 || arrIndex[0].isEmpty()) {","lastModifiedDate":"2022-11-07"},{"lineNumber":29,"author":{"gitId":"guanzhou03"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CancelCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-11-07"},{"lineNumber":30,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-11-07"},{"lineNumber":31,"author":{"gitId":"guanzhou03"},"content":"        Index apptIndex;","lastModifiedDate":"2022-11-07"},{"lineNumber":32,"author":{"gitId":"guanzhou03"},"content":"        try {","lastModifiedDate":"2022-11-07"},{"lineNumber":33,"author":{"gitId":"guanzhou03"},"content":"            apptIndex \u003d ParserUtil.parseIndex(arrIndex[0]);","lastModifiedDate":"2022-11-07"},{"lineNumber":34,"author":{"gitId":"guanzhou03"},"content":"        } catch (ParseException e) {","lastModifiedDate":"2022-11-07"},{"lineNumber":35,"author":{"gitId":"guanzhou03"},"content":"            throw new ParseException(MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-04"},{"lineNumber":36,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-04"},{"lineNumber":37,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"        return new CancelCommand(apptIndex);","lastModifiedDate":"2022-10-18"},{"lineNumber":39,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":40,"author":{"gitId":"guanzhou03"},"content":"}","lastModifiedDate":"2022-10-01"},{"lineNumber":41,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"}],"authorContributionMap":{"NicholasTYD":1,"guanzhou03":40}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"WingKei67"},"content":"    public static final Prefix PREFIX_KEY \u003d new Prefix(\"k/\");","lastModifiedDate":"2022-10-24"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"    public static final Prefix PREFIX_REASON \u003d new Prefix(\"r/\");","lastModifiedDate":"2022-10-01"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");","lastModifiedDate":"2022-10-01"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"    public static final Prefix PREFIX_RECURRING_PERIOD \u003d new Prefix(\"pe/\");","lastModifiedDate":"2022-10-14"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"    public static final Prefix PREFIX_TAG_APPOINTMENT \u003d new Prefix(\"ta/\");","lastModifiedDate":"2022-10-25"},{"lineNumber":19,"author":{"gitId":"guanzhou03"},"content":"    public static final Prefix PREFIX_STATUS \u003d new Prefix(\"s/\");","lastModifiedDate":"2022-10-16"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"    public static final Prefix PREFIX_DATE_TIME_START \u003d new Prefix(\"ds/\");","lastModifiedDate":"2022-10-12"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"    public static final Prefix PREFIX_DATE_TIME_END \u003d new Prefix(\"de/\");","lastModifiedDate":"2022-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"NicholasTYD":3,"WingKei67":1,"JovonLim":3,"-":15,"guanzhou03":1}},{"path":"src/main/java/seedu/address/logic/parser/DeleteCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":5,"author":{"gitId":"guanzhou03"},"content":"import java.util.List;","lastModifiedDate":"2022-10-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new DeleteCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"pwjj2000"},"content":"     * Parses given arguments to determine {@code DeleteCommand}.","lastModifiedDate":"2022-11-06"},{"lineNumber":20,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":21,"author":{"gitId":"pwjj2000"},"content":"     * @param args Given arguments","lastModifiedDate":"2022-11-06"},{"lineNumber":22,"author":{"gitId":"pwjj2000"},"content":"     * @return {@code DeleteCommand} for execution.","lastModifiedDate":"2022-11-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public DeleteCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"guanzhou03"},"content":"        args \u003d args.trim();","lastModifiedDate":"2022-10-19"},{"lineNumber":27,"author":{"gitId":"guanzhou03"},"content":"        if (args.length() \u003e 2) {","lastModifiedDate":"2022-10-19"},{"lineNumber":28,"author":{"gitId":"guanzhou03"},"content":"            try {","lastModifiedDate":"2022-10-19"},{"lineNumber":29,"author":{"gitId":"guanzhou03"},"content":"                List\u003cIndex\u003e indices \u003d ParserUtil.parseIndexes(args, 2);","lastModifiedDate":"2022-10-19"},{"lineNumber":30,"author":{"gitId":"guanzhou03"},"content":"                return new DeleteCommand(indices.get(0), indices.get(1));","lastModifiedDate":"2022-10-19"},{"lineNumber":31,"author":{"gitId":"guanzhou03"},"content":"            } catch (ParseException pe) {","lastModifiedDate":"2022-10-19"},{"lineNumber":32,"author":{"gitId":"guanzhou03"},"content":"                throw new ParseException(","lastModifiedDate":"2022-10-19"},{"lineNumber":33,"author":{"gitId":"guanzhou03"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2022-10-19"},{"lineNumber":34,"author":{"gitId":"guanzhou03"},"content":"            }","lastModifiedDate":"2022-10-19"},{"lineNumber":35,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":36,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2017-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            return new DeleteCommand(index);","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"-":28,"guanzhou03":14,"pwjj2000":4}},{"path":"src/main/java/seedu/address/logic/parser/EditAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-08"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-08"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-08"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-10-08"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REASON;","lastModifiedDate":"2022-10-08"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RECURRING_PERIOD;","lastModifiedDate":"2022-10-14"},{"lineNumber":8,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-10-21"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-08"},{"lineNumber":11,"author":{"gitId":"pwjj2000"},"content":"import java.util.Collection;","lastModifiedDate":"2022-10-21"},{"lineNumber":12,"author":{"gitId":"pwjj2000"},"content":"import java.util.Collections;","lastModifiedDate":"2022-10-21"},{"lineNumber":13,"author":{"gitId":"pwjj2000"},"content":"import java.util.Optional;","lastModifiedDate":"2022-10-21"},{"lineNumber":14,"author":{"gitId":"pwjj2000"},"content":"import java.util.Set;","lastModifiedDate":"2022-10-21"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-08"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditAppointmentCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditAppointmentCommand.EditAppointmentDescriptor;","lastModifiedDate":"2022-10-08"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-08"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-08"},{"lineNumber":21,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2022-10-21"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"/**","lastModifiedDate":"2022-10-08"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":" *  Parses input arguments and creates a new EditAppointmentCommand object.","lastModifiedDate":"2022-10-08"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":" */","lastModifiedDate":"2022-10-08"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"public class EditAppointmentCommandParser implements Parser\u003cEditAppointmentCommand\u003e {","lastModifiedDate":"2022-10-08"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"    @Override","lastModifiedDate":"2022-10-08"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"    public EditAppointmentCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-08"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"        requireNonNull(args);","lastModifiedDate":"2022-10-08"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_REASON, PREFIX_DATE,","lastModifiedDate":"2022-10-14"},{"lineNumber":32,"author":{"gitId":"pwjj2000"},"content":"                PREFIX_RECURRING_PERIOD, PREFIX_TAG);","lastModifiedDate":"2022-10-21"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"        Index appointmentIndex;","lastModifiedDate":"2022-10-08"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"        try {","lastModifiedDate":"2022-10-08"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"            appointmentIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2022-10-15"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2022-10-08"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2022-10-08"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"                    EditAppointmentCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2022-10-08"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentDescriptor editAppointmentDescriptor \u003d new EditAppointmentDescriptor();","lastModifiedDate":"2022-10-08"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"        addReason(editAppointmentDescriptor, argMultimap);","lastModifiedDate":"2022-10-09"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"        addDate(editAppointmentDescriptor, argMultimap);","lastModifiedDate":"2022-10-09"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"        addTimePeriod(editAppointmentDescriptor, argMultimap);","lastModifiedDate":"2022-10-14"},{"lineNumber":45,"author":{"gitId":"pwjj2000"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editAppointmentDescriptor::setTags);","lastModifiedDate":"2022-10-21"},{"lineNumber":46,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"        if (!editAppointmentDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2022-10-09"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"            throw new ParseException(EditAppointmentCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2022-10-09"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-09"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"        return new EditAppointmentCommand(appointmentIndex, editAppointmentDescriptor);","lastModifiedDate":"2022-10-15"},{"lineNumber":52,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":53,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"    private void addReason(EditAppointmentDescriptor descriptor, ArgumentMultimap argMultimap) throws ParseException {","lastModifiedDate":"2022-10-09"},{"lineNumber":55,"author":{"gitId":"JovonLim"},"content":"        if (argMultimap.getValue(PREFIX_REASON).isEmpty()) {","lastModifiedDate":"2022-10-15"},{"lineNumber":56,"author":{"gitId":"JovonLim"},"content":"            return;","lastModifiedDate":"2022-10-15"},{"lineNumber":57,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-15"},{"lineNumber":58,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":59,"author":{"gitId":"JovonLim"},"content":"        String reason \u003d argMultimap.getValue(PREFIX_REASON).get().trim();","lastModifiedDate":"2022-10-08"},{"lineNumber":60,"author":{"gitId":"JovonLim"},"content":"        if (Appointment.isValidReason(reason)) {","lastModifiedDate":"2022-10-08"},{"lineNumber":61,"author":{"gitId":"JovonLim"},"content":"            descriptor.setReason(reason);","lastModifiedDate":"2022-10-09"},{"lineNumber":62,"author":{"gitId":"JovonLim"},"content":"        } else {","lastModifiedDate":"2022-10-08"},{"lineNumber":63,"author":{"gitId":"JovonLim"},"content":"            throw new ParseException(Appointment.REASON_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-08"},{"lineNumber":64,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":65,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":66,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":67,"author":{"gitId":"JovonLim"},"content":"    private void addDate(EditAppointmentDescriptor descriptor, ArgumentMultimap argMultimap) throws ParseException {","lastModifiedDate":"2022-10-09"},{"lineNumber":68,"author":{"gitId":"JovonLim"},"content":"        if (argMultimap.getValue(PREFIX_DATE).isEmpty()) {","lastModifiedDate":"2022-10-15"},{"lineNumber":69,"author":{"gitId":"JovonLim"},"content":"            return;","lastModifiedDate":"2022-10-15"},{"lineNumber":70,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-15"},{"lineNumber":71,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":72,"author":{"gitId":"JovonLim"},"content":"        String dateTime \u003d argMultimap.getValue(PREFIX_DATE).get().trim();","lastModifiedDate":"2022-10-08"},{"lineNumber":73,"author":{"gitId":"JovonLim"},"content":"        if (Appointment.isValidDateTime(dateTime)) {","lastModifiedDate":"2022-10-08"},{"lineNumber":74,"author":{"gitId":"JovonLim"},"content":"            String temp \u003d String.join(\" \", dateTime.split(\"\\\\s+\", 2));","lastModifiedDate":"2022-10-08"},{"lineNumber":75,"author":{"gitId":"JovonLim"},"content":"            descriptor.setDateTime(LocalDateTime.parse(temp, Appointment.DATE_FORMATTER));","lastModifiedDate":"2022-10-09"},{"lineNumber":76,"author":{"gitId":"JovonLim"},"content":"        } else {","lastModifiedDate":"2022-10-08"},{"lineNumber":77,"author":{"gitId":"JovonLim"},"content":"            throw new ParseException(Appointment.DATE_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-08"},{"lineNumber":78,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":79,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":80,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":81,"author":{"gitId":"JovonLim"},"content":"    private void addTimePeriod(EditAppointmentDescriptor descriptor, ArgumentMultimap argMultimap)","lastModifiedDate":"2022-10-14"},{"lineNumber":82,"author":{"gitId":"JovonLim"},"content":"            throws ParseException {","lastModifiedDate":"2022-10-14"},{"lineNumber":83,"author":{"gitId":"JovonLim"},"content":"        if (argMultimap.getValue(PREFIX_RECURRING_PERIOD).isEmpty()) {","lastModifiedDate":"2022-10-15"},{"lineNumber":84,"author":{"gitId":"JovonLim"},"content":"            return;","lastModifiedDate":"2022-10-15"},{"lineNumber":85,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-15"},{"lineNumber":86,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":87,"author":{"gitId":"JovonLim"},"content":"        String timePeriod \u003d argMultimap.getValue(PREFIX_RECURRING_PERIOD).get().trim();","lastModifiedDate":"2022-10-14"},{"lineNumber":88,"author":{"gitId":"JovonLim"},"content":"        if (Appointment.isValidTimePeriod(timePeriod)) {","lastModifiedDate":"2022-10-14"},{"lineNumber":89,"author":{"gitId":"JovonLim"},"content":"            descriptor.setTimePeriod(Appointment.parseTimePeriod(timePeriod));","lastModifiedDate":"2022-10-14"},{"lineNumber":90,"author":{"gitId":"JovonLim"},"content":"        } else {","lastModifiedDate":"2022-10-14"},{"lineNumber":91,"author":{"gitId":"JovonLim"},"content":"            throw new ParseException(Appointment.TIME_PERIOD_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-14"},{"lineNumber":92,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-14"},{"lineNumber":93,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":94,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":95,"author":{"gitId":"pwjj2000"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":96,"author":{"gitId":"pwjj2000"},"content":"     * Converts given collection of tags to set of tags to be used.","lastModifiedDate":"2022-11-06"},{"lineNumber":97,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":98,"author":{"gitId":"pwjj2000"},"content":"     * @param tags Given collection of tags for conversion.","lastModifiedDate":"2022-11-06"},{"lineNumber":99,"author":{"gitId":"pwjj2000"},"content":"     * @return Set of tags after editing","lastModifiedDate":"2022-11-06"},{"lineNumber":100,"author":{"gitId":"pwjj2000"},"content":"     * @throws ParseException If there is an issue parsing the collection of tags.","lastModifiedDate":"2022-11-06"},{"lineNumber":101,"author":{"gitId":"pwjj2000"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":102,"author":{"gitId":"pwjj2000"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2022-10-21"},{"lineNumber":103,"author":{"gitId":"pwjj2000"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2022-10-21"},{"lineNumber":104,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":105,"author":{"gitId":"pwjj2000"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2022-10-21"},{"lineNumber":106,"author":{"gitId":"pwjj2000"},"content":"            return Optional.empty();","lastModifiedDate":"2022-10-21"},{"lineNumber":107,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":108,"author":{"gitId":"pwjj2000"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2022-10-21"},{"lineNumber":109,"author":{"gitId":"pwjj2000"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2022-10-21"},{"lineNumber":110,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":111,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-08"}],"authorContributionMap":{"JovonLim":85,"pwjj2000":26}},{"path":"src/main/java/seedu/address/logic/parser/EditPatientCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-01-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditPatientCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditPatientCommand.EditPersonDescriptor;","lastModifiedDate":"2022-10-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":" * Parses input arguments and creates a new EditPatientCommand object","lastModifiedDate":"2022-10-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"public class EditPatientCommandParser implements Parser\u003cEditPatientCommand\u003e {","lastModifiedDate":"2022-10-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"pwjj2000"},"content":"     * Parses given arguments in the context of the EditPatientCommand to determine {@code EditPatientCommand}","lastModifiedDate":"2022-11-06"},{"lineNumber":29,"author":{"gitId":"pwjj2000"},"content":"     * for execution.","lastModifiedDate":"2022-11-06"},{"lineNumber":30,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":31,"author":{"gitId":"pwjj2000"},"content":"     * @param args Given string of arguments.","lastModifiedDate":"2022-11-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"    public EditPatientCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);","lastModifiedDate":"2017-06-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2022-10-08"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"                    EditPatientCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2022-10-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-01-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);","lastModifiedDate":"2017-06-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":60,"author":{"gitId":"JovonLim"},"content":"            throw new ParseException(EditPatientCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2022-10-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":62,"author":{"gitId":"JovonLim"},"content":"        return new EditPatientCommand(index, editPersonDescriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":66,"author":{"gitId":"pwjj2000"},"content":"     * Converts given collection of tags to set of tags to be used.","lastModifiedDate":"2022-11-06"},{"lineNumber":67,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":68,"author":{"gitId":"pwjj2000"},"content":"     * @param tags Given collection of tags for conversion.","lastModifiedDate":"2022-11-06"},{"lineNumber":69,"author":{"gitId":"pwjj2000"},"content":"     * @return Set of tags after editing","lastModifiedDate":"2022-11-06"},{"lineNumber":70,"author":{"gitId":"pwjj2000"},"content":"     * @throws ParseException If there is an issue parsing the collection of tags.","lastModifiedDate":"2022-11-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2017-01-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2017-01-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2017-01-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2017-01-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"JovonLim":9,"-":64,"pwjj2000":9}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2022-10-10"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_TIME_END;","lastModifiedDate":"2022-10-12"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_TIME_START;","lastModifiedDate":"2022-10-12"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2022-10-10"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-10-10"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2022-10-10"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REASON;","lastModifiedDate":"2022-10-10"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-10-10"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_APPOINTMENT;","lastModifiedDate":"2022-10-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-12"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"import java.util.List;","lastModifiedDate":"2022-10-12"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2022-11-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-13"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2022-10-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-12"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2022-10-13"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2022-10-13"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.predicates.CombinedAppointmentPredicate;","lastModifiedDate":"2022-10-15"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.predicates.CombinedPersonPredicate;","lastModifiedDate":"2022-10-15"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2022-10-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"    private static final Prefix[] commandPrefixes \u003d","lastModifiedDate":"2022-11-06"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"        {PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG,","lastModifiedDate":"2022-11-06"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"            PREFIX_REASON, PREFIX_DATE_TIME_START, PREFIX_DATE_TIME_END, PREFIX_TAG_APPOINTMENT};","lastModifiedDate":"2022-11-06"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * and returns a FindCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":45,"author":{"gitId":"NicholasTYD"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, commandPrefixes);","lastModifiedDate":"2022-11-06"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":47,"author":{"gitId":"NicholasTYD"},"content":"        String name \u003d argMultimap.getValue(PREFIX_NAME).orElse(\"\");","lastModifiedDate":"2022-10-13"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"        String phone \u003d argMultimap.getValue(PREFIX_PHONE).orElse(\"\");","lastModifiedDate":"2022-10-13"},{"lineNumber":49,"author":{"gitId":"NicholasTYD"},"content":"        String email \u003d argMultimap.getValue(PREFIX_EMAIL).orElse(\"\");","lastModifiedDate":"2022-10-13"},{"lineNumber":50,"author":{"gitId":"NicholasTYD"},"content":"        String address \u003d argMultimap.getValue(PREFIX_ADDRESS).orElse(\"\");","lastModifiedDate":"2022-10-13"},{"lineNumber":51,"author":{"gitId":"NicholasTYD"},"content":"        List\u003cString\u003e personTagList \u003d argMultimap.getAllValues(PREFIX_TAG);","lastModifiedDate":"2022-10-25"},{"lineNumber":52,"author":{"gitId":"NicholasTYD"},"content":"        String reason \u003d argMultimap.getValue(PREFIX_REASON).orElse(\"\");","lastModifiedDate":"2022-10-13"},{"lineNumber":53,"author":{"gitId":"NicholasTYD"},"content":"        String startDateTime \u003d","lastModifiedDate":"2022-10-13"},{"lineNumber":54,"author":{"gitId":"NicholasTYD"},"content":"                StringUtil.removeRedundantSpaces(argMultimap.getValue(PREFIX_DATE_TIME_START).orElse(\"\"));","lastModifiedDate":"2022-10-13"},{"lineNumber":55,"author":{"gitId":"NicholasTYD"},"content":"        String endDateTime \u003d","lastModifiedDate":"2022-10-13"},{"lineNumber":56,"author":{"gitId":"NicholasTYD"},"content":"                StringUtil.removeRedundantSpaces(argMultimap.getValue(PREFIX_DATE_TIME_END).orElse(\"\"));","lastModifiedDate":"2022-10-13"},{"lineNumber":57,"author":{"gitId":"NicholasTYD"},"content":"        List\u003cString\u003e appointmentTagList \u003d argMultimap.getAllValues(PREFIX_TAG_APPOINTMENT);","lastModifiedDate":"2022-10-25"},{"lineNumber":58,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":59,"author":{"gitId":"NicholasTYD"},"content":"        checkIfValidCommandFormat(argMultimap);","lastModifiedDate":"2022-11-06"},{"lineNumber":60,"author":{"gitId":"NicholasTYD"},"content":"        checkIfInputsValid(name, phone, personTagList, startDateTime, endDateTime);","lastModifiedDate":"2022-10-25"},{"lineNumber":61,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":62,"author":{"gitId":"NicholasTYD"},"content":"        LocalDateTime parsedStartDateTime \u003d parseDateTime(startDateTime, LocalDateTime.MIN);","lastModifiedDate":"2022-11-06"},{"lineNumber":63,"author":{"gitId":"NicholasTYD"},"content":"        LocalDateTime parsedEndDateTime \u003d parseDateTime(endDateTime, LocalDateTime.MAX);","lastModifiedDate":"2022-11-06"},{"lineNumber":64,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":65,"author":{"gitId":"NicholasTYD"},"content":"        checkIfStartDateIsBeforeEndDate(parsedStartDateTime, parsedEndDateTime);","lastModifiedDate":"2022-10-13"},{"lineNumber":66,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":67,"author":{"gitId":"NicholasTYD"},"content":"        boolean isUsingAppointmentPredicate \u003d","lastModifiedDate":"2022-11-06"},{"lineNumber":68,"author":{"gitId":"NicholasTYD"},"content":"                isAnyAppointmentFieldSpecified(reason, startDateTime, endDateTime, appointmentTagList);","lastModifiedDate":"2022-11-06"},{"lineNumber":69,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":70,"author":{"gitId":"NicholasTYD"},"content":"        return createFindCommand(name, phone, email, address, personTagList,","lastModifiedDate":"2022-11-06"},{"lineNumber":71,"author":{"gitId":"NicholasTYD"},"content":"                reason, parsedStartDateTime, parsedEndDateTime, appointmentTagList, isUsingAppointmentPredicate);","lastModifiedDate":"2022-11-06"},{"lineNumber":72,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-11-06"},{"lineNumber":73,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":74,"author":{"gitId":"NicholasTYD"},"content":"    private FindCommand createFindCommand(String name, String phone, String email, String address,","lastModifiedDate":"2022-11-06"},{"lineNumber":75,"author":{"gitId":"NicholasTYD"},"content":"                                          List\u003cString\u003e personTagList, String reason,","lastModifiedDate":"2022-11-06"},{"lineNumber":76,"author":{"gitId":"NicholasTYD"},"content":"                                          LocalDateTime parsedStartDateTime, LocalDateTime parsedEndDateTime,","lastModifiedDate":"2022-11-06"},{"lineNumber":77,"author":{"gitId":"NicholasTYD"},"content":"                                          List\u003cString\u003e appointmentTagList, boolean isUsingAppointmentPredicate) {","lastModifiedDate":"2022-11-06"},{"lineNumber":78,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":79,"author":{"gitId":"NicholasTYD"},"content":"        CombinedPersonPredicate combinedPersonPredicate \u003d","lastModifiedDate":"2022-10-15"},{"lineNumber":80,"author":{"gitId":"NicholasTYD"},"content":"                new CombinedPersonPredicate(name, phone, email, address, personTagList);","lastModifiedDate":"2022-10-25"},{"lineNumber":81,"author":{"gitId":"NicholasTYD"},"content":"        CombinedAppointmentPredicate combinedAppointmentPredicate \u003d","lastModifiedDate":"2022-10-13"},{"lineNumber":82,"author":{"gitId":"NicholasTYD"},"content":"                new CombinedAppointmentPredicate(reason, parsedStartDateTime, parsedEndDateTime, appointmentTagList);","lastModifiedDate":"2022-10-25"},{"lineNumber":83,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":84,"author":{"gitId":"NicholasTYD"},"content":"        return new FindCommand(combinedPersonPredicate, combinedAppointmentPredicate, isUsingAppointmentPredicate);","lastModifiedDate":"2022-11-06"},{"lineNumber":85,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-13"},{"lineNumber":86,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":87,"author":{"gitId":"NicholasTYD"},"content":"    private void checkIfValidCommandFormat(ArgumentMultimap argumentMultimap) throws ParseException {","lastModifiedDate":"2022-11-06"},{"lineNumber":88,"author":{"gitId":"NicholasTYD"},"content":"        boolean atLeastOnePrefixPresent \u003d","lastModifiedDate":"2022-11-06"},{"lineNumber":89,"author":{"gitId":"NicholasTYD"},"content":"                Stream.of(commandPrefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2022-11-06"},{"lineNumber":90,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":91,"author":{"gitId":"NicholasTYD"},"content":"        boolean isPreambleEmpty \u003d argumentMultimap.getPreamble().isEmpty();","lastModifiedDate":"2022-11-06"},{"lineNumber":92,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":93,"author":{"gitId":"NicholasTYD"},"content":"        if (!atLeastOnePrefixPresent || !isPreambleEmpty) {","lastModifiedDate":"2022-11-06"},{"lineNumber":94,"author":{"gitId":"NicholasTYD"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-13"},{"lineNumber":95,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-13"},{"lineNumber":96,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":97,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":98,"author":{"gitId":"NicholasTYD"},"content":"    private void checkIfInputsValid(String name, String phone, List\u003cString\u003e tagList,","lastModifiedDate":"2022-10-16"},{"lineNumber":99,"author":{"gitId":"NicholasTYD"},"content":"                                    String startDateTime, String endDateTime) throws ParseException {","lastModifiedDate":"2022-10-16"},{"lineNumber":100,"author":{"gitId":"NicholasTYD"},"content":"        // Address, emails and reasons are excluded from validity checks since they don\u0027t need to be","lastModifiedDate":"2022-10-14"},{"lineNumber":101,"author":{"gitId":"NicholasTYD"},"content":"        // proper emails/addresses/reasons (E.g finding google in john@google.com is fine).","lastModifiedDate":"2022-10-14"},{"lineNumber":102,"author":{"gitId":"NicholasTYD"},"content":"        if (!name.isEmpty() \u0026\u0026 !Name.isValidName(name)) {","lastModifiedDate":"2022-10-13"},{"lineNumber":103,"author":{"gitId":"NicholasTYD"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-13"},{"lineNumber":104,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-13"},{"lineNumber":105,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":106,"author":{"gitId":"NicholasTYD"},"content":"        String containsOnlyNumbersRegex \u003d \"\\\\d+\";","lastModifiedDate":"2022-10-13"},{"lineNumber":107,"author":{"gitId":"NicholasTYD"},"content":"        if (!phone.isEmpty() \u0026\u0026 !phone.matches(containsOnlyNumbersRegex)) {","lastModifiedDate":"2022-10-13"},{"lineNumber":108,"author":{"gitId":"NicholasTYD"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-13"},{"lineNumber":109,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-13"},{"lineNumber":110,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":111,"author":{"gitId":"NicholasTYD"},"content":"        for (String tag : tagList) {","lastModifiedDate":"2022-10-13"},{"lineNumber":112,"author":{"gitId":"NicholasTYD"},"content":"            if (!Tag.isValidTagName(tag)) {","lastModifiedDate":"2022-10-13"},{"lineNumber":113,"author":{"gitId":"NicholasTYD"},"content":"                throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-13"},{"lineNumber":114,"author":{"gitId":"NicholasTYD"},"content":"            }","lastModifiedDate":"2022-10-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":117,"author":{"gitId":"NicholasTYD"},"content":"        boolean areBothDatesValid \u003d (startDateTime.isEmpty() || Appointment.isValidDateTime(startDateTime))","lastModifiedDate":"2022-10-13"},{"lineNumber":118,"author":{"gitId":"NicholasTYD"},"content":"                \u0026\u0026 (endDateTime.isEmpty() || Appointment.isValidDateTime(endDateTime));","lastModifiedDate":"2022-10-13"},{"lineNumber":119,"author":{"gitId":"NicholasTYD"},"content":"        if (!areBothDatesValid) {","lastModifiedDate":"2022-10-13"},{"lineNumber":120,"author":{"gitId":"NicholasTYD"},"content":"            throw new ParseException(Appointment.DATE_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-13"},{"lineNumber":121,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-13"},{"lineNumber":122,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":124,"author":{"gitId":"NicholasTYD"},"content":"    private LocalDateTime parseDateTime(String startDateTime, LocalDateTime defaultValue) {","lastModifiedDate":"2022-11-06"},{"lineNumber":125,"author":{"gitId":"NicholasTYD"},"content":"        return startDateTime.isEmpty()","lastModifiedDate":"2022-11-06"},{"lineNumber":126,"author":{"gitId":"NicholasTYD"},"content":"                ? defaultValue","lastModifiedDate":"2022-11-06"},{"lineNumber":127,"author":{"gitId":"NicholasTYD"},"content":"                : LocalDateTime.parse(startDateTime, Appointment.DATE_FORMATTER);","lastModifiedDate":"2022-11-06"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-11-06"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":130,"author":{"gitId":"NicholasTYD"},"content":"    private void checkIfStartDateIsBeforeEndDate(LocalDateTime parsedStartDateTime,","lastModifiedDate":"2022-10-13"},{"lineNumber":131,"author":{"gitId":"NicholasTYD"},"content":"                                                 LocalDateTime parsedEndDateTime) throws ParseException {","lastModifiedDate":"2022-10-13"},{"lineNumber":132,"author":{"gitId":"NicholasTYD"},"content":"        if (parsedStartDateTime.isAfter(parsedEndDateTime)) {","lastModifiedDate":"2022-10-13"},{"lineNumber":133,"author":{"gitId":"NicholasTYD"},"content":"            throw new ParseException(Messages.START_DATE_AFTER_END_DATE);","lastModifiedDate":"2022-10-13"},{"lineNumber":134,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-13"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":136,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":137,"author":{"gitId":"NicholasTYD"},"content":"    private boolean isAnyAppointmentFieldSpecified(String reason, String startDateTime, String endDateTime,","lastModifiedDate":"2022-11-06"},{"lineNumber":138,"author":{"gitId":"NicholasTYD"},"content":"                                                   List\u003cString\u003e appointmentTagList) {","lastModifiedDate":"2022-11-06"},{"lineNumber":139,"author":{"gitId":"NicholasTYD"},"content":"        boolean isAllAppointmentFieldsEmpty \u003d !reason.isEmpty() || !startDateTime.isEmpty()","lastModifiedDate":"2022-11-06"},{"lineNumber":140,"author":{"gitId":"NicholasTYD"},"content":"                || !endDateTime.isEmpty() || !appointmentTagList.isEmpty();","lastModifiedDate":"2022-11-06"},{"lineNumber":141,"author":{"gitId":"NicholasTYD"},"content":"        return isAllAppointmentFieldsEmpty;","lastModifiedDate":"2022-11-06"},{"lineNumber":142,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-11-06"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"NicholasTYD":116,"-":27}},{"path":"src/main/java/seedu/address/logic/parser/GroupAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WingKei67"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-24"},{"lineNumber":2,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":3,"author":{"gitId":"WingKei67"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-24"},{"lineNumber":4,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-24"},{"lineNumber":5,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_KEY;","lastModifiedDate":"2022-10-24"},{"lineNumber":6,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":7,"author":{"gitId":"WingKei67"},"content":"import seedu.address.logic.commands.GroupAppointmentCommand;","lastModifiedDate":"2022-10-24"},{"lineNumber":8,"author":{"gitId":"WingKei67"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-24"},{"lineNumber":9,"author":{"gitId":"WingKei67"},"content":"import seedu.address.model.Key;","lastModifiedDate":"2022-10-24"},{"lineNumber":10,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":11,"author":{"gitId":"WingKei67"},"content":"/**","lastModifiedDate":"2022-10-24"},{"lineNumber":12,"author":{"gitId":"WingKei67"},"content":" * Parses input arguments and creates a new GroupAppointmentCommand object","lastModifiedDate":"2022-10-24"},{"lineNumber":13,"author":{"gitId":"WingKei67"},"content":" */","lastModifiedDate":"2022-10-24"},{"lineNumber":14,"author":{"gitId":"WingKei67"},"content":"public class GroupAppointmentCommandParser implements Parser\u003cGroupAppointmentCommand\u003e {","lastModifiedDate":"2022-10-24"},{"lineNumber":15,"author":{"gitId":"WingKei67"},"content":"    @Override","lastModifiedDate":"2022-10-24"},{"lineNumber":16,"author":{"gitId":"WingKei67"},"content":"    public GroupAppointmentCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-24"},{"lineNumber":17,"author":{"gitId":"WingKei67"},"content":"        requireNonNull(args);","lastModifiedDate":"2022-10-24"},{"lineNumber":18,"author":{"gitId":"WingKei67"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_KEY);","lastModifiedDate":"2022-10-24"},{"lineNumber":19,"author":{"gitId":"WingKei67"},"content":"        Key key;","lastModifiedDate":"2022-10-24"},{"lineNumber":20,"author":{"gitId":"WingKei67"},"content":"        if (argMultimap.getValue(PREFIX_KEY).isEmpty()) {","lastModifiedDate":"2022-10-24"},{"lineNumber":21,"author":{"gitId":"WingKei67"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2022-10-24"},{"lineNumber":22,"author":{"gitId":"WingKei67"},"content":"                    GroupAppointmentCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-24"},{"lineNumber":23,"author":{"gitId":"WingKei67"},"content":"        }","lastModifiedDate":"2022-10-24"},{"lineNumber":24,"author":{"gitId":"WingKei67"},"content":"        String keyName \u003d argMultimap.getValue(PREFIX_KEY).get();","lastModifiedDate":"2022-10-24"},{"lineNumber":25,"author":{"gitId":"WingKei67"},"content":"        if (!Key.isValidKey(keyName)) {","lastModifiedDate":"2022-10-24"},{"lineNumber":26,"author":{"gitId":"WingKei67"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2022-10-24"},{"lineNumber":27,"author":{"gitId":"WingKei67"},"content":"                    GroupAppointmentCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-24"},{"lineNumber":28,"author":{"gitId":"WingKei67"},"content":"        }","lastModifiedDate":"2022-10-24"},{"lineNumber":29,"author":{"gitId":"WingKei67"},"content":"        key \u003d ParserUtil.parseKey(keyName);","lastModifiedDate":"2022-10-24"},{"lineNumber":30,"author":{"gitId":"WingKei67"},"content":"        return new GroupAppointmentCommand(key);","lastModifiedDate":"2022-10-24"},{"lineNumber":31,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":32,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-24"}],"authorContributionMap":{"WingKei67":32}},{"path":"src/main/java/seedu/address/logic/parser/HideAppointmentsCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"guanzhou03"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-12"},{"lineNumber":2,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":3,"author":{"gitId":"guanzhou03"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-16"},{"lineNumber":4,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_EMPTY_REASON;","lastModifiedDate":"2022-10-31"},{"lineNumber":5,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-12"},{"lineNumber":6,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STATUS;","lastModifiedDate":"2022-10-31"},{"lineNumber":7,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TAGS;","lastModifiedDate":"2022-10-31"},{"lineNumber":8,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REASON;","lastModifiedDate":"2022-10-16"},{"lineNumber":9,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;","lastModifiedDate":"2022-10-16"},{"lineNumber":10,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-10-16"},{"lineNumber":11,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"import java.util.List;","lastModifiedDate":"2022-10-26"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":14,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.logic.commands.HideAppointmentsCommand;","lastModifiedDate":"2022-10-16"},{"lineNumber":15,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-12"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.predicates.HideAppointmentPredicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.person.predicates.HideAppointmentPredicate.HideBy;","lastModifiedDate":"2022-11-05"},{"lineNumber":18,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":19,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":20,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":21,"author":{"gitId":"guanzhou03"},"content":"/**","lastModifiedDate":"2022-10-12"},{"lineNumber":22,"author":{"gitId":"guanzhou03"},"content":" * Parses input arguments and creates a new HideAppointmentsCommand.","lastModifiedDate":"2022-10-25"},{"lineNumber":23,"author":{"gitId":"guanzhou03"},"content":" */","lastModifiedDate":"2022-10-12"},{"lineNumber":24,"author":{"gitId":"guanzhou03"},"content":"public class HideAppointmentsCommandParser implements Parser\u003cHideAppointmentsCommand\u003e {","lastModifiedDate":"2022-10-16"},{"lineNumber":25,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":26,"author":{"gitId":"guanzhou03"},"content":"    private HideBy cond;","lastModifiedDate":"2022-11-05"},{"lineNumber":27,"author":{"gitId":"guanzhou03"},"content":"    private List\u003cString\u003e val;","lastModifiedDate":"2022-11-05"},{"lineNumber":28,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-10-12"},{"lineNumber":29,"author":{"gitId":"pwjj2000"},"content":"     * Parses given arguments in the context of the FilterPatientCommand","lastModifiedDate":"2022-11-06"},{"lineNumber":30,"author":{"gitId":"guanzhou03"},"content":"     * and returns a FilterPatientCommand object for execution.","lastModifiedDate":"2022-10-12"},{"lineNumber":31,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":32,"author":{"gitId":"pwjj2000"},"content":"     * @param args Given string of arguments.","lastModifiedDate":"2022-11-06"},{"lineNumber":33,"author":{"gitId":"guanzhou03"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-10-12"},{"lineNumber":34,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-10-12"},{"lineNumber":35,"author":{"gitId":"guanzhou03"},"content":"    public HideAppointmentsCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-16"},{"lineNumber":36,"author":{"gitId":"guanzhou03"},"content":"        requireNonNull(args);","lastModifiedDate":"2022-10-16"},{"lineNumber":37,"author":{"gitId":"guanzhou03"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_REASON, PREFIX_TAG,","lastModifiedDate":"2022-10-16"},{"lineNumber":38,"author":{"gitId":"guanzhou03"},"content":"                PREFIX_STATUS);","lastModifiedDate":"2022-10-16"},{"lineNumber":39,"author":{"gitId":"guanzhou03"},"content":"        if (args.trim().isEmpty()) {","lastModifiedDate":"2022-11-05"},{"lineNumber":40,"author":{"gitId":"guanzhou03"},"content":"            throw new ParseException(","lastModifiedDate":"2022-10-12"},{"lineNumber":41,"author":{"gitId":"guanzhou03"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, HideAppointmentsCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-16"},{"lineNumber":42,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-12"},{"lineNumber":43,"author":{"gitId":"guanzhou03"},"content":"        processArgMultiMap(argMultimap);","lastModifiedDate":"2022-11-05"},{"lineNumber":44,"author":{"gitId":"guanzhou03"},"content":"        return new HideAppointmentsCommand(new HideAppointmentPredicate(cond, val));","lastModifiedDate":"2022-11-05"},{"lineNumber":45,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-11-05"},{"lineNumber":46,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":47,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-11-05"},{"lineNumber":48,"author":{"gitId":"guanzhou03"},"content":"     * Assigns the correct keywords and condition from the argument map to hide appointments by.","lastModifiedDate":"2022-11-05"},{"lineNumber":49,"author":{"gitId":"guanzhou03"},"content":"     * @param argMultimap The given argument map to be processed.","lastModifiedDate":"2022-11-05"},{"lineNumber":50,"author":{"gitId":"guanzhou03"},"content":"     * @throws ParseException If the arguments found are invalid.","lastModifiedDate":"2022-11-05"},{"lineNumber":51,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-11-05"},{"lineNumber":52,"author":{"gitId":"guanzhou03"},"content":"    private void processArgMultiMap(ArgumentMultimap argMultimap) throws ParseException {","lastModifiedDate":"2022-11-05"},{"lineNumber":53,"author":{"gitId":"guanzhou03"},"content":"        if (argMultimap.getValue(PREFIX_REASON).isPresent()) {","lastModifiedDate":"2022-10-17"},{"lineNumber":54,"author":{"gitId":"guanzhou03"},"content":"            val \u003d argMultimap.getAllValues(PREFIX_REASON);","lastModifiedDate":"2022-10-26"},{"lineNumber":55,"author":{"gitId":"guanzhou03"},"content":"            cond \u003d HideBy.KEYWORD;","lastModifiedDate":"2022-11-05"},{"lineNumber":56,"author":{"gitId":"guanzhou03"},"content":"            if (val.stream().anyMatch(x -\u003e x.equals(\"\"))) {","lastModifiedDate":"2022-10-31"},{"lineNumber":57,"author":{"gitId":"guanzhou03"},"content":"                throw new ParseException(MESSAGE_EMPTY_REASON);","lastModifiedDate":"2022-10-31"},{"lineNumber":58,"author":{"gitId":"guanzhou03"},"content":"            }","lastModifiedDate":"2022-10-31"},{"lineNumber":59,"author":{"gitId":"guanzhou03"},"content":"        } else if (argMultimap.getValue(PREFIX_TAG).isPresent()) {","lastModifiedDate":"2022-10-21"},{"lineNumber":60,"author":{"gitId":"guanzhou03"},"content":"            val \u003d argMultimap.getAllValues(PREFIX_TAG);","lastModifiedDate":"2022-10-26"},{"lineNumber":61,"author":{"gitId":"guanzhou03"},"content":"            cond \u003d HideBy.TAG;","lastModifiedDate":"2022-11-05"},{"lineNumber":62,"author":{"gitId":"guanzhou03"},"content":"            if (!areValidTags(val)) {","lastModifiedDate":"2022-10-31"},{"lineNumber":63,"author":{"gitId":"guanzhou03"},"content":"                throw new ParseException(MESSAGE_INVALID_TAGS);","lastModifiedDate":"2022-10-31"},{"lineNumber":64,"author":{"gitId":"guanzhou03"},"content":"            }","lastModifiedDate":"2022-10-31"},{"lineNumber":65,"author":{"gitId":"guanzhou03"},"content":"        } else if (argMultimap.getValue(PREFIX_STATUS).isPresent()","lastModifiedDate":"2022-10-21"},{"lineNumber":66,"author":{"gitId":"guanzhou03"},"content":"                \u0026\u0026 isValidStatusInput(argMultimap.getValue(PREFIX_STATUS).orElse(\"\"))) {","lastModifiedDate":"2022-10-19"},{"lineNumber":67,"author":{"gitId":"guanzhou03"},"content":"            val \u003d argMultimap.getAllValues(PREFIX_STATUS);","lastModifiedDate":"2022-10-26"},{"lineNumber":68,"author":{"gitId":"guanzhou03"},"content":"            cond \u003d HideBy.IS_MARKED;","lastModifiedDate":"2022-11-05"},{"lineNumber":69,"author":{"gitId":"guanzhou03"},"content":"            if (val.size() \u003e 1) {","lastModifiedDate":"2022-10-31"},{"lineNumber":70,"author":{"gitId":"guanzhou03"},"content":"                throw new ParseException(MESSAGE_INVALID_STATUS);","lastModifiedDate":"2022-10-31"},{"lineNumber":71,"author":{"gitId":"guanzhou03"},"content":"            }","lastModifiedDate":"2022-10-31"},{"lineNumber":72,"author":{"gitId":"guanzhou03"},"content":"        } else {","lastModifiedDate":"2022-10-21"},{"lineNumber":73,"author":{"gitId":"guanzhou03"},"content":"            throw new ParseException(","lastModifiedDate":"2022-10-17"},{"lineNumber":74,"author":{"gitId":"guanzhou03"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, HideAppointmentsCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-17"},{"lineNumber":75,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-17"},{"lineNumber":76,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":77,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":78,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-10-31"},{"lineNumber":79,"author":{"gitId":"guanzhou03"},"content":"     * Checks if input status is valid (marked/unmarked/m/um).","lastModifiedDate":"2022-10-31"},{"lineNumber":80,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":81,"author":{"gitId":"guanzhou03"},"content":"     * @param status The given input from the user after s/ prefix.","lastModifiedDate":"2022-10-31"},{"lineNumber":82,"author":{"gitId":"guanzhou03"},"content":"     * @return Whether the status given is valid.","lastModifiedDate":"2022-10-31"},{"lineNumber":83,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-10-31"},{"lineNumber":84,"author":{"gitId":"guanzhou03"},"content":"    public boolean isValidStatusInput(String status) {","lastModifiedDate":"2022-10-19"},{"lineNumber":85,"author":{"gitId":"guanzhou03"},"content":"        return status.equalsIgnoreCase(\"um\") || status.equalsIgnoreCase(\"m\")","lastModifiedDate":"2022-10-31"},{"lineNumber":86,"author":{"gitId":"guanzhou03"},"content":"                || status.equalsIgnoreCase(\"marked\") || status.equalsIgnoreCase(\"unmarked\");","lastModifiedDate":"2022-10-31"},{"lineNumber":87,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-31"},{"lineNumber":88,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":89,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-10-31"},{"lineNumber":90,"author":{"gitId":"guanzhou03"},"content":"     * Checks if given tags match ear, nose or throat.","lastModifiedDate":"2022-10-31"},{"lineNumber":91,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":92,"author":{"gitId":"guanzhou03"},"content":"     * @param tags The values gotten from the user after the t/ prefix.","lastModifiedDate":"2022-10-31"},{"lineNumber":93,"author":{"gitId":"guanzhou03"},"content":"     * @return Whether tags are all valid.","lastModifiedDate":"2022-10-31"},{"lineNumber":94,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-10-31"},{"lineNumber":95,"author":{"gitId":"guanzhou03"},"content":"    public boolean areValidTags(List\u003cString\u003e tags) {","lastModifiedDate":"2022-10-31"},{"lineNumber":96,"author":{"gitId":"guanzhou03"},"content":"        for (String s: tags) {","lastModifiedDate":"2022-10-31"},{"lineNumber":97,"author":{"gitId":"guanzhou03"},"content":"            if (!s.equalsIgnoreCase(\"ear\") \u0026\u0026 !s.equalsIgnoreCase(\"nose\")","lastModifiedDate":"2022-10-31"},{"lineNumber":98,"author":{"gitId":"guanzhou03"},"content":"                    \u0026\u0026 !s.equalsIgnoreCase(\"throat\")) {","lastModifiedDate":"2022-10-31"},{"lineNumber":99,"author":{"gitId":"guanzhou03"},"content":"                return false;","lastModifiedDate":"2022-10-31"},{"lineNumber":100,"author":{"gitId":"guanzhou03"},"content":"            }","lastModifiedDate":"2022-10-31"},{"lineNumber":101,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-31"},{"lineNumber":102,"author":{"gitId":"guanzhou03"},"content":"        return true;","lastModifiedDate":"2022-10-31"},{"lineNumber":103,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-19"},{"lineNumber":104,"author":{"gitId":"guanzhou03"},"content":"}","lastModifiedDate":"2022-10-12"}],"authorContributionMap":{"JovonLim":1,"guanzhou03":98,"pwjj2000":5}},{"path":"src/main/java/seedu/address/logic/parser/HidePatientsCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"guanzhou03"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-12"},{"lineNumber":2,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":3,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_EMPTY_NAME;","lastModifiedDate":"2022-10-31"},{"lineNumber":4,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-12"},{"lineNumber":5,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TAGS;","lastModifiedDate":"2022-10-31"},{"lineNumber":6,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-10-25"},{"lineNumber":7,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-10-12"},{"lineNumber":8,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":9,"author":{"gitId":"guanzhou03"},"content":"import java.util.List;","lastModifiedDate":"2022-10-26"},{"lineNumber":10,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":11,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.logic.commands.HidePatientsCommand;","lastModifiedDate":"2022-10-13"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-12"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.person.predicates.NameContainsKeywordsPredicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.predicates.TagContainsKeywordsPredicate;","lastModifiedDate":"2022-10-22"},{"lineNumber":15,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":16,"author":{"gitId":"guanzhou03"},"content":"/**","lastModifiedDate":"2022-10-12"},{"lineNumber":17,"author":{"gitId":"guanzhou03"},"content":" * Parses input arguments and creates a new HidePatientCommand.","lastModifiedDate":"2022-10-25"},{"lineNumber":18,"author":{"gitId":"guanzhou03"},"content":" */","lastModifiedDate":"2022-10-12"},{"lineNumber":19,"author":{"gitId":"guanzhou03"},"content":"public class HidePatientsCommandParser implements Parser\u003cHidePatientsCommand\u003e {","lastModifiedDate":"2022-10-13"},{"lineNumber":20,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":21,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-10-12"},{"lineNumber":22,"author":{"gitId":"pwjj2000"},"content":"     * Parses given arguments in the context of the HidePatientCommand","lastModifiedDate":"2022-11-06"},{"lineNumber":23,"author":{"gitId":"guanzhou03"},"content":"     * and returns a FilterPatientCommand object for execution.","lastModifiedDate":"2022-10-12"},{"lineNumber":24,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":25,"author":{"gitId":"pwjj2000"},"content":"     * @param args Given string of arguments.","lastModifiedDate":"2022-11-06"},{"lineNumber":26,"author":{"gitId":"guanzhou03"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-10-12"},{"lineNumber":27,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-10-12"},{"lineNumber":28,"author":{"gitId":"guanzhou03"},"content":"    public HidePatientsCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-13"},{"lineNumber":29,"author":{"gitId":"guanzhou03"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG, PREFIX_NAME);","lastModifiedDate":"2022-10-25"},{"lineNumber":30,"author":{"gitId":"guanzhou03"},"content":"        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {","lastModifiedDate":"2022-10-12"},{"lineNumber":31,"author":{"gitId":"guanzhou03"},"content":"            List\u003cString\u003e tags \u003d argMultimap.getAllValues(PREFIX_TAG);","lastModifiedDate":"2022-10-31"},{"lineNumber":32,"author":{"gitId":"guanzhou03"},"content":"            if (!areValidTags(tags)) {","lastModifiedDate":"2022-11-05"},{"lineNumber":33,"author":{"gitId":"guanzhou03"},"content":"                throw new ParseException(MESSAGE_INVALID_TAGS);","lastModifiedDate":"2022-10-31"},{"lineNumber":34,"author":{"gitId":"guanzhou03"},"content":"            }","lastModifiedDate":"2022-10-31"},{"lineNumber":35,"author":{"gitId":"guanzhou03"},"content":"            return new HidePatientsCommand(","lastModifiedDate":"2022-10-15"},{"lineNumber":36,"author":{"gitId":"guanzhou03"},"content":"                    new TagContainsKeywordsPredicate(argMultimap.getAllValues(PREFIX_TAG)));","lastModifiedDate":"2022-10-26"},{"lineNumber":37,"author":{"gitId":"guanzhou03"},"content":"        } else if (argMultimap.getValue(PREFIX_NAME).isEmpty()) {","lastModifiedDate":"2022-10-25"},{"lineNumber":38,"author":{"gitId":"guanzhou03"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HidePatientsCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-25"},{"lineNumber":39,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-12"},{"lineNumber":40,"author":{"gitId":"guanzhou03"},"content":"        List\u003cString\u003e keywords \u003d argMultimap.getAllValues(PREFIX_NAME);","lastModifiedDate":"2022-10-26"},{"lineNumber":41,"author":{"gitId":"guanzhou03"},"content":"        if (keywords.stream().anyMatch(x -\u003e x.equals(\"\"))) {","lastModifiedDate":"2022-10-31"},{"lineNumber":42,"author":{"gitId":"guanzhou03"},"content":"            throw new ParseException(MESSAGE_EMPTY_NAME);","lastModifiedDate":"2022-10-31"},{"lineNumber":43,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-31"},{"lineNumber":44,"author":{"gitId":"guanzhou03"},"content":"        return new HidePatientsCommand(new NameContainsKeywordsPredicate(keywords));","lastModifiedDate":"2022-10-26"},{"lineNumber":45,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":46,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":47,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-10-31"},{"lineNumber":48,"author":{"gitId":"guanzhou03"},"content":"     * Checks if given tags match ear, nose or throat.","lastModifiedDate":"2022-10-31"},{"lineNumber":49,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":50,"author":{"gitId":"guanzhou03"},"content":"     * @param tags The values gotten from the user after the t/ prefix.","lastModifiedDate":"2022-10-31"},{"lineNumber":51,"author":{"gitId":"guanzhou03"},"content":"     * @return Whether tags are all valid.","lastModifiedDate":"2022-10-31"},{"lineNumber":52,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-10-31"},{"lineNumber":53,"author":{"gitId":"guanzhou03"},"content":"    public boolean areValidTags(List\u003cString\u003e tags) {","lastModifiedDate":"2022-10-31"},{"lineNumber":54,"author":{"gitId":"guanzhou03"},"content":"        for (String s: tags) {","lastModifiedDate":"2022-10-31"},{"lineNumber":55,"author":{"gitId":"guanzhou03"},"content":"            if (!s.equalsIgnoreCase(\"ear\") \u0026\u0026 !s.equalsIgnoreCase(\"nose\")","lastModifiedDate":"2022-10-31"},{"lineNumber":56,"author":{"gitId":"guanzhou03"},"content":"                \u0026\u0026 !s.equalsIgnoreCase(\"throat\")) {","lastModifiedDate":"2022-10-31"},{"lineNumber":57,"author":{"gitId":"guanzhou03"},"content":"                return false;","lastModifiedDate":"2022-10-31"},{"lineNumber":58,"author":{"gitId":"guanzhou03"},"content":"            }","lastModifiedDate":"2022-10-31"},{"lineNumber":59,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-31"},{"lineNumber":60,"author":{"gitId":"guanzhou03"},"content":"        return true;","lastModifiedDate":"2022-10-31"},{"lineNumber":61,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-31"},{"lineNumber":62,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":63,"author":{"gitId":"guanzhou03"},"content":"}","lastModifiedDate":"2022-10-12"}],"authorContributionMap":{"JovonLim":1,"guanzhou03":58,"pwjj2000":4}},{"path":"src/main/java/seedu/address/logic/parser/MarkCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-02"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-02"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-02"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.commands.MarkCommand;","lastModifiedDate":"2022-10-02"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-02"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"/**","lastModifiedDate":"2022-10-02"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":" * Parses input arguments and creates a new MarkCommand object","lastModifiedDate":"2022-10-02"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":" */","lastModifiedDate":"2022-10-02"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"public class MarkCommandParser extends SelectAppointmentCommandParser\u003cMarkCommand\u003e {","lastModifiedDate":"2022-10-02"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"    @Override","lastModifiedDate":"2022-10-02"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"    public MarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-02"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"        try {","lastModifiedDate":"2022-10-02"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"            Index appointmentIndex \u003d super.getAppointmentIndex(args);","lastModifiedDate":"2022-10-18"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"            return new MarkCommand(appointmentIndex);","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2022-10-02"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2022-10-02"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-02"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-02"}],"authorContributionMap":{"NicholasTYD":23}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"import java.util.List;","lastModifiedDate":"2022-10-02"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":14,"author":{"gitId":"WingKei67"},"content":"import seedu.address.model.Key;","lastModifiedDate":"2022-10-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-02-11"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-02-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-02-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-02-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-02-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":28,"author":{"gitId":"NicholasTYD"},"content":"    public static final String MESSAGE_UNEXPECTED_INDEX_COUNT \u003d \"The amount of indexes parsed is not as expected.\";","lastModifiedDate":"2022-10-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-02"},{"lineNumber":44,"author":{"gitId":"pwjj2000"},"content":"     * Parses a string of {@code oneBasedIndex}es separated by spaces into a list of {@code Index} of exactly size","lastModifiedDate":"2022-11-06"},{"lineNumber":45,"author":{"gitId":"NicholasTYD"},"content":"     * {@code parseCount} and returns it. Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-10-02"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"     *","lastModifiedDate":"2022-10-02"},{"lineNumber":47,"author":{"gitId":"pwjj2000"},"content":"     * @param oneBasedIndexes String of indexes.","lastModifiedDate":"2022-11-06"},{"lineNumber":48,"author":{"gitId":"pwjj2000"},"content":"     * @param parseCount The exact number of indexes to parse.","lastModifiedDate":"2022-11-06"},{"lineNumber":49,"author":{"gitId":"pwjj2000"},"content":"     * @return List of indexes of size {@code parseCount}","lastModifiedDate":"2022-11-06"},{"lineNumber":50,"author":{"gitId":"NicholasTYD"},"content":"     * @throws ParseException if the specified indexes is invalid (not non-zero unsigned integer), or if the amount of","lastModifiedDate":"2022-10-02"},{"lineNumber":51,"author":{"gitId":"NicholasTYD"},"content":"     *     indexes is not exactly {@code parseCount}","lastModifiedDate":"2022-10-02"},{"lineNumber":52,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-02"},{"lineNumber":53,"author":{"gitId":"NicholasTYD"},"content":"    public static List\u003cIndex\u003e parseIndexes(String oneBasedIndexes, int parseCount) throws ParseException {","lastModifiedDate":"2022-10-02"},{"lineNumber":54,"author":{"gitId":"NicholasTYD"},"content":"        String indexSeparator \u003d \"\\\\s+\";","lastModifiedDate":"2022-10-04"},{"lineNumber":55,"author":{"gitId":"NicholasTYD"},"content":"        String trimmedIndexes \u003d oneBasedIndexes.trim();","lastModifiedDate":"2022-10-02"},{"lineNumber":56,"author":{"gitId":"NicholasTYD"},"content":"        String[] indexes \u003d trimmedIndexes.split(indexSeparator);","lastModifiedDate":"2022-10-02"},{"lineNumber":57,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":58,"author":{"gitId":"NicholasTYD"},"content":"        if (indexes.length !\u003d parseCount) {","lastModifiedDate":"2022-10-04"},{"lineNumber":59,"author":{"gitId":"NicholasTYD"},"content":"            throw new ParseException(MESSAGE_UNEXPECTED_INDEX_COUNT);","lastModifiedDate":"2022-10-04"},{"lineNumber":60,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-04"},{"lineNumber":61,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":62,"author":{"gitId":"NicholasTYD"},"content":"        List\u003cIndex\u003e indexList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-02"},{"lineNumber":63,"author":{"gitId":"NicholasTYD"},"content":"        for (String index : indexes) {","lastModifiedDate":"2022-10-02"},{"lineNumber":64,"author":{"gitId":"NicholasTYD"},"content":"            indexList.add(parseIndex(index));","lastModifiedDate":"2022-10-02"},{"lineNumber":65,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-02"},{"lineNumber":66,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":67,"author":{"gitId":"NicholasTYD"},"content":"        return indexList;","lastModifiedDate":"2022-10-02"},{"lineNumber":68,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":69,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":74,"author":{"gitId":"pwjj2000"},"content":"     * @param name Name before parsing.","lastModifiedDate":"2022-11-06"},{"lineNumber":75,"author":{"gitId":"pwjj2000"},"content":"     * @return Name after parsing.","lastModifiedDate":"2022-11-06"},{"lineNumber":76,"author":{"gitId":"pwjj2000"},"content":"     * @throws ParseException if the given name is invalid.","lastModifiedDate":"2022-11-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":91,"author":{"gitId":"pwjj2000"},"content":"     * @param phone Phone number before parsing.","lastModifiedDate":"2022-11-06"},{"lineNumber":92,"author":{"gitId":"pwjj2000"},"content":"     * @return Phone number after parsing.","lastModifiedDate":"2022-11-06"},{"lineNumber":93,"author":{"gitId":"pwjj2000"},"content":"     * @throws ParseException if the given phone is invalid.","lastModifiedDate":"2022-11-06"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2022-10-06"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"pwjj2000"},"content":"     * @param address Address before parsing.","lastModifiedDate":"2022-11-06"},{"lineNumber":109,"author":{"gitId":"pwjj2000"},"content":"     * @return Address after parsing.","lastModifiedDate":"2022-11-06"},{"lineNumber":110,"author":{"gitId":"pwjj2000"},"content":"     * @throws ParseException if the given address is invalid.","lastModifiedDate":"2022-11-06"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":113,"author":{"gitId":"WingKei67"},"content":"        if (address.isEmpty()) {","lastModifiedDate":"2022-10-11"},{"lineNumber":114,"author":{"gitId":"WingKei67"},"content":"            return new Address(\"\");","lastModifiedDate":"2022-10-11"},{"lineNumber":115,"author":{"gitId":"WingKei67"},"content":"        }","lastModifiedDate":"2022-10-04"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":127,"author":{"gitId":"pwjj2000"},"content":"     * @param email Email before parsing.","lastModifiedDate":"2022-11-06"},{"lineNumber":128,"author":{"gitId":"pwjj2000"},"content":"     * @return Email after parsing.","lastModifiedDate":"2022-11-06"},{"lineNumber":129,"author":{"gitId":"pwjj2000"},"content":"     * @throws ParseException if the given email is invalid.","lastModifiedDate":"2022-11-06"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":132,"author":{"gitId":"WingKei67"},"content":"        if (email.isEmpty()) {","lastModifiedDate":"2022-10-11"},{"lineNumber":133,"author":{"gitId":"WingKei67"},"content":"            return new Email(\"\");","lastModifiedDate":"2022-10-11"},{"lineNumber":134,"author":{"gitId":"WingKei67"},"content":"        }","lastModifiedDate":"2022-10-04"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":146,"author":{"gitId":"pwjj2000"},"content":"     * @param tag Tag name before parsing.","lastModifiedDate":"2022-11-06"},{"lineNumber":147,"author":{"gitId":"pwjj2000"},"content":"     * @return Tag after parsing.","lastModifiedDate":"2022-11-06"},{"lineNumber":148,"author":{"gitId":"pwjj2000"},"content":"     * @throws ParseException if the given tag is invalid.","lastModifiedDate":"2022-11-06"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":156,"author":{"gitId":"pwjj2000"},"content":"        return Tag.convertToTag(trimmedTag);","lastModifiedDate":"2022-10-21"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":159,"author":{"gitId":"WingKei67"},"content":"    /**","lastModifiedDate":"2022-10-24"},{"lineNumber":160,"author":{"gitId":"WingKei67"},"content":"     * Parses a {@code String key} into a {@code String}.","lastModifiedDate":"2022-10-24"},{"lineNumber":161,"author":{"gitId":"WingKei67"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-10-24"},{"lineNumber":162,"author":{"gitId":"WingKei67"},"content":"     *","lastModifiedDate":"2022-10-24"},{"lineNumber":163,"author":{"gitId":"pwjj2000"},"content":"     * @param key Key before parsing.","lastModifiedDate":"2022-11-06"},{"lineNumber":164,"author":{"gitId":"pwjj2000"},"content":"     * @return Key after parsing.","lastModifiedDate":"2022-11-06"},{"lineNumber":165,"author":{"gitId":"pwjj2000"},"content":"     * @throws ParseException if the given key is invalid.","lastModifiedDate":"2022-11-06"},{"lineNumber":166,"author":{"gitId":"WingKei67"},"content":"     */","lastModifiedDate":"2022-10-24"},{"lineNumber":167,"author":{"gitId":"WingKei67"},"content":"    public static Key parseKey(String key) throws ParseException {","lastModifiedDate":"2022-10-24"},{"lineNumber":168,"author":{"gitId":"WingKei67"},"content":"        requireNonNull(key);","lastModifiedDate":"2022-10-24"},{"lineNumber":169,"author":{"gitId":"WingKei67"},"content":"        String trimmedKey \u003d key.trim();","lastModifiedDate":"2022-10-24"},{"lineNumber":170,"author":{"gitId":"WingKei67"},"content":"        if (!Key.isValidKey(trimmedKey)) {","lastModifiedDate":"2022-10-24"},{"lineNumber":171,"author":{"gitId":"WingKei67"},"content":"            throw new ParseException(Key.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-24"},{"lineNumber":172,"author":{"gitId":"WingKei67"},"content":"        }","lastModifiedDate":"2022-10-24"},{"lineNumber":173,"author":{"gitId":"WingKei67"},"content":"        return Key.convertToKey(trimmedKey);","lastModifiedDate":"2022-10-24"},{"lineNumber":174,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":175,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":176,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":177,"author":{"gitId":"JovonLim"},"content":"     * Parses a {@code String reason} and {@code String dateTime} into a {@code Appointment}.","lastModifiedDate":"2022-10-01"},{"lineNumber":178,"author":{"gitId":"JovonLim"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-10-01"},{"lineNumber":179,"author":{"gitId":"JovonLim"},"content":"     *","lastModifiedDate":"2022-10-01"},{"lineNumber":180,"author":{"gitId":"pwjj2000"},"content":"     * @param reason Reason for making an appointment.","lastModifiedDate":"2022-11-06"},{"lineNumber":181,"author":{"gitId":"pwjj2000"},"content":"     * @param dateTime Date and time of the appointment.","lastModifiedDate":"2022-11-06"},{"lineNumber":182,"author":{"gitId":"pwjj2000"},"content":"     * @param period Time period of the recurring appointments.","lastModifiedDate":"2022-11-06"},{"lineNumber":183,"author":{"gitId":"pwjj2000"},"content":"     * @param tags Related tags of the appointment.","lastModifiedDate":"2022-11-06"},{"lineNumber":184,"author":{"gitId":"pwjj2000"},"content":"     * @return An Appointment after parsing of information.","lastModifiedDate":"2022-11-06"},{"lineNumber":185,"author":{"gitId":"JovonLim"},"content":"     * @throws ParseException if the given {@code reason} or {@code dateTime} is invalid.","lastModifiedDate":"2022-10-01"},{"lineNumber":186,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":187,"author":{"gitId":"pwjj2000"},"content":"    public static Appointment parseAppointment(String reason, String dateTime, String period, Set\u003cTag\u003e tags)","lastModifiedDate":"2022-10-21"},{"lineNumber":188,"author":{"gitId":"pwjj2000"},"content":"            throws ParseException {","lastModifiedDate":"2022-10-21"},{"lineNumber":189,"author":{"gitId":"JovonLim"},"content":"        requireNonNull(dateTime);","lastModifiedDate":"2022-10-01"},{"lineNumber":190,"author":{"gitId":"JovonLim"},"content":"        requireNonNull(reason);","lastModifiedDate":"2022-10-01"},{"lineNumber":191,"author":{"gitId":"JovonLim"},"content":"        String trimmedReason \u003d reason.trim();","lastModifiedDate":"2022-10-01"},{"lineNumber":192,"author":{"gitId":"JovonLim"},"content":"        String trimmedDateTime \u003d dateTime.trim();","lastModifiedDate":"2022-10-01"},{"lineNumber":193,"author":{"gitId":"JovonLim"},"content":"        String trimmedPeriod \u003d period.trim();","lastModifiedDate":"2022-10-14"},{"lineNumber":194,"author":{"gitId":"JovonLim"},"content":"        if (!Appointment.isValidReason(trimmedReason)) {","lastModifiedDate":"2022-10-01"},{"lineNumber":195,"author":{"gitId":"JovonLim"},"content":"            throw new ParseException(Appointment.REASON_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-01"},{"lineNumber":196,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":197,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":198,"author":{"gitId":"JovonLim"},"content":"        if (!Appointment.isValidDateTime(dateTime)) {","lastModifiedDate":"2022-10-01"},{"lineNumber":199,"author":{"gitId":"JovonLim"},"content":"            throw new ParseException(Appointment.DATE_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-01"},{"lineNumber":200,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":201,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":202,"author":{"gitId":"JovonLim"},"content":"        if (!period.isEmpty() \u0026\u0026 !Appointment.isValidTimePeriod(trimmedPeriod)) {","lastModifiedDate":"2022-10-14"},{"lineNumber":203,"author":{"gitId":"JovonLim"},"content":"            throw new ParseException(Appointment.TIME_PERIOD_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-14"},{"lineNumber":204,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-14"},{"lineNumber":205,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":206,"author":{"gitId":"pwjj2000"},"content":"        return new Appointment(trimmedReason, trimmedDateTime, trimmedPeriod, tags, false);","lastModifiedDate":"2022-10-21"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":210,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":211,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":212,"author":{"gitId":"pwjj2000"},"content":"     * @param tags Collection of tags to be parsed","lastModifiedDate":"2022-11-06"},{"lineNumber":213,"author":{"gitId":"pwjj2000"},"content":"     * @return Set of tags to be used.","lastModifiedDate":"2022-11-06"},{"lineNumber":214,"author":{"gitId":"pwjj2000"},"content":"     * @throws ParseException If there is an issue with parsing given tags.","lastModifiedDate":"2022-11-06"},{"lineNumber":215,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"NicholasTYD":26,"WingKei67":21,"JovonLim":23,"-":118,"pwjj2000":36}},{"path":"src/main/java/seedu/address/logic/parser/SelectAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-02"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-02"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-02"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.commands.SelectAppointmentCommand;","lastModifiedDate":"2022-10-02"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-02"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"/**","lastModifiedDate":"2022-10-02"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":" * Parses input arguments and creates a new SelectAppointmentCommand object. Used for commands that involve selecting","lastModifiedDate":"2022-10-02"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":" * an appointment only with no additional arguments.","lastModifiedDate":"2022-10-02"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":" */","lastModifiedDate":"2022-10-02"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"public abstract class SelectAppointmentCommandParser\u003cT extends SelectAppointmentCommand\u003e implements Parser\u003cT\u003e {","lastModifiedDate":"2022-10-02"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-02"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"     * Gets the Index of the appointment itself.","lastModifiedDate":"2022-10-18"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"     *","lastModifiedDate":"2022-10-02"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"     * @param args The string to be parsed.","lastModifiedDate":"2022-10-02"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"     * @return Index of the appointment itself.","lastModifiedDate":"2022-10-18"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"     * @throws ParseException If there is not exactly 1 index found or if there is any invalid indexes.","lastModifiedDate":"2022-10-18"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-02"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"    protected Index getAppointmentIndex(String args) throws ParseException {","lastModifiedDate":"2022-10-18"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"        requireNonNull(args);","lastModifiedDate":"2022-10-02"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"        Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2022-11-06"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"        return index;","lastModifiedDate":"2022-11-06"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":28,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-02"}],"authorContributionMap":{"NicholasTYD":28}},{"path":"src/main/java/seedu/address/logic/parser/UnhideAppointmentsCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"guanzhou03"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-25"},{"lineNumber":2,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":3,"author":{"gitId":"guanzhou03"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-25"},{"lineNumber":4,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_EMPTY_REASON;","lastModifiedDate":"2022-10-31"},{"lineNumber":5,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-25"},{"lineNumber":6,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_STATUS;","lastModifiedDate":"2022-10-31"},{"lineNumber":7,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TAGS;","lastModifiedDate":"2022-10-31"},{"lineNumber":8,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REASON;","lastModifiedDate":"2022-10-25"},{"lineNumber":9,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;","lastModifiedDate":"2022-10-25"},{"lineNumber":10,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-10-25"},{"lineNumber":11,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"import java.util.List;","lastModifiedDate":"2022-10-26"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":14,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.logic.commands.UnhideAppointmentsCommand;","lastModifiedDate":"2022-10-25"},{"lineNumber":15,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-25"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.predicates.HideAppointmentPredicate;","lastModifiedDate":"2022-10-25"},{"lineNumber":17,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.person.predicates.HideAppointmentPredicate.HideBy;","lastModifiedDate":"2022-11-05"},{"lineNumber":18,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":19,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":20,"author":{"gitId":"guanzhou03"},"content":"/**","lastModifiedDate":"2022-10-25"},{"lineNumber":21,"author":{"gitId":"guanzhou03"},"content":" * Parses input arguments and creates a new UnhideAppointmentCommand","lastModifiedDate":"2022-10-25"},{"lineNumber":22,"author":{"gitId":"guanzhou03"},"content":" */","lastModifiedDate":"2022-10-25"},{"lineNumber":23,"author":{"gitId":"guanzhou03"},"content":"public class UnhideAppointmentsCommandParser implements Parser\u003cUnhideAppointmentsCommand\u003e {","lastModifiedDate":"2022-10-25"},{"lineNumber":24,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":25,"author":{"gitId":"guanzhou03"},"content":"    private HideBy cond;","lastModifiedDate":"2022-11-05"},{"lineNumber":26,"author":{"gitId":"guanzhou03"},"content":"    private List\u003cString\u003e val;","lastModifiedDate":"2022-11-05"},{"lineNumber":27,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-10-25"},{"lineNumber":28,"author":{"gitId":"guanzhou03"},"content":"     * Parses the given {@code String} of arguments in the context of the FilterPatientCommand","lastModifiedDate":"2022-10-25"},{"lineNumber":29,"author":{"gitId":"guanzhou03"},"content":"     * and returns a FilterPatientCommand object for execution.","lastModifiedDate":"2022-10-25"},{"lineNumber":30,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":31,"author":{"gitId":"pwjj2000"},"content":"     * @param args String of arguments to be parsed.","lastModifiedDate":"2022-11-06"},{"lineNumber":32,"author":{"gitId":"guanzhou03"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-10-25"},{"lineNumber":33,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-10-25"},{"lineNumber":34,"author":{"gitId":"guanzhou03"},"content":"    public UnhideAppointmentsCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-25"},{"lineNumber":35,"author":{"gitId":"guanzhou03"},"content":"        requireNonNull(args);","lastModifiedDate":"2022-10-25"},{"lineNumber":36,"author":{"gitId":"guanzhou03"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_REASON, PREFIX_TAG,","lastModifiedDate":"2022-10-25"},{"lineNumber":37,"author":{"gitId":"guanzhou03"},"content":"                PREFIX_STATUS);","lastModifiedDate":"2022-10-25"},{"lineNumber":38,"author":{"gitId":"guanzhou03"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2022-10-25"},{"lineNumber":39,"author":{"gitId":"guanzhou03"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2022-10-25"},{"lineNumber":40,"author":{"gitId":"guanzhou03"},"content":"            throw new ParseException(","lastModifiedDate":"2022-10-25"},{"lineNumber":41,"author":{"gitId":"guanzhou03"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnhideAppointmentsCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-31"},{"lineNumber":42,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-25"},{"lineNumber":43,"author":{"gitId":"guanzhou03"},"content":"        processArgMultiMap(argMultimap);","lastModifiedDate":"2022-11-05"},{"lineNumber":44,"author":{"gitId":"guanzhou03"},"content":"        return new UnhideAppointmentsCommand(new HideAppointmentPredicate(cond, val));","lastModifiedDate":"2022-11-05"},{"lineNumber":45,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-11-05"},{"lineNumber":46,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":47,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-11-05"},{"lineNumber":48,"author":{"gitId":"guanzhou03"},"content":"     * Assigns the correct keywords and condition from the argument map to unhide appointments by.","lastModifiedDate":"2022-11-05"},{"lineNumber":49,"author":{"gitId":"guanzhou03"},"content":"     * @param argMultimap The given argument map to be processed.","lastModifiedDate":"2022-11-05"},{"lineNumber":50,"author":{"gitId":"guanzhou03"},"content":"     * @throws ParseException If the arguments found are invalid.","lastModifiedDate":"2022-11-05"},{"lineNumber":51,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-11-05"},{"lineNumber":52,"author":{"gitId":"guanzhou03"},"content":"    private void processArgMultiMap(ArgumentMultimap argMultimap) throws ParseException {","lastModifiedDate":"2022-11-05"},{"lineNumber":53,"author":{"gitId":"guanzhou03"},"content":"        if (argMultimap.getValue(PREFIX_REASON).isPresent()) {","lastModifiedDate":"2022-10-25"},{"lineNumber":54,"author":{"gitId":"guanzhou03"},"content":"            val \u003d argMultimap.getAllValues(PREFIX_REASON);","lastModifiedDate":"2022-10-26"},{"lineNumber":55,"author":{"gitId":"guanzhou03"},"content":"            cond \u003d HideBy.KEYWORD;","lastModifiedDate":"2022-11-05"},{"lineNumber":56,"author":{"gitId":"guanzhou03"},"content":"            if (val.stream().anyMatch(x -\u003e x.equals(\"\"))) {","lastModifiedDate":"2022-10-31"},{"lineNumber":57,"author":{"gitId":"guanzhou03"},"content":"                throw new ParseException(MESSAGE_EMPTY_REASON);","lastModifiedDate":"2022-10-31"},{"lineNumber":58,"author":{"gitId":"guanzhou03"},"content":"            }","lastModifiedDate":"2022-10-31"},{"lineNumber":59,"author":{"gitId":"guanzhou03"},"content":"        } else if (argMultimap.getValue(PREFIX_TAG).isPresent()) {","lastModifiedDate":"2022-10-25"},{"lineNumber":60,"author":{"gitId":"guanzhou03"},"content":"            val \u003d argMultimap.getAllValues(PREFIX_TAG);","lastModifiedDate":"2022-10-26"},{"lineNumber":61,"author":{"gitId":"guanzhou03"},"content":"            cond \u003d HideBy.TAG;","lastModifiedDate":"2022-11-05"},{"lineNumber":62,"author":{"gitId":"guanzhou03"},"content":"            if (!areValidTags(val)) {","lastModifiedDate":"2022-10-31"},{"lineNumber":63,"author":{"gitId":"guanzhou03"},"content":"                throw new ParseException(MESSAGE_INVALID_TAGS);","lastModifiedDate":"2022-10-31"},{"lineNumber":64,"author":{"gitId":"guanzhou03"},"content":"            }","lastModifiedDate":"2022-10-31"},{"lineNumber":65,"author":{"gitId":"guanzhou03"},"content":"        } else if (argMultimap.getValue(PREFIX_STATUS).isPresent()","lastModifiedDate":"2022-10-25"},{"lineNumber":66,"author":{"gitId":"guanzhou03"},"content":"                \u0026\u0026 isValidStatusInput(argMultimap.getValue(PREFIX_STATUS).orElse(\"\"))) {","lastModifiedDate":"2022-10-25"},{"lineNumber":67,"author":{"gitId":"guanzhou03"},"content":"            val \u003d argMultimap.getAllValues(PREFIX_STATUS);","lastModifiedDate":"2022-10-26"},{"lineNumber":68,"author":{"gitId":"guanzhou03"},"content":"            cond \u003d HideBy.IS_MARKED;","lastModifiedDate":"2022-11-05"},{"lineNumber":69,"author":{"gitId":"guanzhou03"},"content":"            if (val.size() \u003e 1) {","lastModifiedDate":"2022-10-31"},{"lineNumber":70,"author":{"gitId":"guanzhou03"},"content":"                throw new ParseException(MESSAGE_INVALID_STATUS);","lastModifiedDate":"2022-10-31"},{"lineNumber":71,"author":{"gitId":"guanzhou03"},"content":"            }","lastModifiedDate":"2022-10-31"},{"lineNumber":72,"author":{"gitId":"guanzhou03"},"content":"        } else {","lastModifiedDate":"2022-10-25"},{"lineNumber":73,"author":{"gitId":"guanzhou03"},"content":"            throw new ParseException(","lastModifiedDate":"2022-10-25"},{"lineNumber":74,"author":{"gitId":"guanzhou03"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnhideAppointmentsCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-31"},{"lineNumber":75,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-25"},{"lineNumber":76,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-25"},{"lineNumber":77,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":78,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-10-31"},{"lineNumber":79,"author":{"gitId":"guanzhou03"},"content":"     * Checks if input status is valid (marked/unmarked/m/um).","lastModifiedDate":"2022-10-31"},{"lineNumber":80,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":81,"author":{"gitId":"guanzhou03"},"content":"     * @param status The given input from the user after s/ prefix.","lastModifiedDate":"2022-10-31"},{"lineNumber":82,"author":{"gitId":"guanzhou03"},"content":"     * @return Whether the status given is valid.","lastModifiedDate":"2022-10-31"},{"lineNumber":83,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-10-31"},{"lineNumber":84,"author":{"gitId":"guanzhou03"},"content":"    public boolean isValidStatusInput(String status) {","lastModifiedDate":"2022-10-25"},{"lineNumber":85,"author":{"gitId":"guanzhou03"},"content":"        return status.equalsIgnoreCase(\"um\") || status.equalsIgnoreCase(\"m\")","lastModifiedDate":"2022-10-31"},{"lineNumber":86,"author":{"gitId":"guanzhou03"},"content":"                || status.equalsIgnoreCase(\"marked\") || status.equalsIgnoreCase(\"unmarked\");","lastModifiedDate":"2022-10-31"},{"lineNumber":87,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-25"},{"lineNumber":88,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":89,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-10-31"},{"lineNumber":90,"author":{"gitId":"guanzhou03"},"content":"     * Checks if given tags match ear, nose or throat.","lastModifiedDate":"2022-10-31"},{"lineNumber":91,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":92,"author":{"gitId":"guanzhou03"},"content":"     * @param tags The values gotten from the user after the t/ prefix.","lastModifiedDate":"2022-10-31"},{"lineNumber":93,"author":{"gitId":"guanzhou03"},"content":"     * @return Whether tags are all valid.","lastModifiedDate":"2022-10-31"},{"lineNumber":94,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-10-31"},{"lineNumber":95,"author":{"gitId":"guanzhou03"},"content":"    public boolean areValidTags(List\u003cString\u003e tags) {","lastModifiedDate":"2022-10-31"},{"lineNumber":96,"author":{"gitId":"guanzhou03"},"content":"        for (String s: tags) {","lastModifiedDate":"2022-10-31"},{"lineNumber":97,"author":{"gitId":"guanzhou03"},"content":"            if (!s.equalsIgnoreCase(\"ear\") \u0026\u0026 !s.equalsIgnoreCase(\"nose\")","lastModifiedDate":"2022-10-31"},{"lineNumber":98,"author":{"gitId":"guanzhou03"},"content":"                    \u0026\u0026 !s.equalsIgnoreCase(\"throat\")) {","lastModifiedDate":"2022-10-31"},{"lineNumber":99,"author":{"gitId":"guanzhou03"},"content":"                return false;","lastModifiedDate":"2022-10-31"},{"lineNumber":100,"author":{"gitId":"guanzhou03"},"content":"            }","lastModifiedDate":"2022-10-31"},{"lineNumber":101,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-31"},{"lineNumber":102,"author":{"gitId":"guanzhou03"},"content":"        return true;","lastModifiedDate":"2022-10-31"},{"lineNumber":103,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-31"},{"lineNumber":104,"author":{"gitId":"guanzhou03"},"content":"}","lastModifiedDate":"2022-10-25"}],"authorContributionMap":{"JovonLim":1,"guanzhou03":99,"pwjj2000":4}},{"path":"src/main/java/seedu/address/logic/parser/UnhidePatientsCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"guanzhou03"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-25"},{"lineNumber":2,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":3,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_EMPTY_NAME;","lastModifiedDate":"2022-10-31"},{"lineNumber":4,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-25"},{"lineNumber":5,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TAGS;","lastModifiedDate":"2022-10-31"},{"lineNumber":6,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-10-25"},{"lineNumber":7,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-10-25"},{"lineNumber":8,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":9,"author":{"gitId":"guanzhou03"},"content":"import java.util.List;","lastModifiedDate":"2022-10-26"},{"lineNumber":10,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":11,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.logic.commands.UnhidePatientsCommand;","lastModifiedDate":"2022-10-25"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-25"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.person.predicates.NameContainsKeywordsPredicate;","lastModifiedDate":"2022-10-25"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.predicates.TagContainsKeywordsPredicate;","lastModifiedDate":"2022-10-25"},{"lineNumber":15,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":16,"author":{"gitId":"guanzhou03"},"content":"/**","lastModifiedDate":"2022-10-25"},{"lineNumber":17,"author":{"gitId":"guanzhou03"},"content":" * Parses input arguments and creates a new UnhidePatientCommand.","lastModifiedDate":"2022-10-25"},{"lineNumber":18,"author":{"gitId":"guanzhou03"},"content":" */","lastModifiedDate":"2022-10-25"},{"lineNumber":19,"author":{"gitId":"guanzhou03"},"content":"public class UnhidePatientsCommandParser implements Parser\u003cUnhidePatientsCommand\u003e {","lastModifiedDate":"2022-10-25"},{"lineNumber":20,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":21,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-10-25"},{"lineNumber":22,"author":{"gitId":"guanzhou03"},"content":"     * Parses the given {@code String} of arguments in the context of the HidePatientCommand.","lastModifiedDate":"2022-10-25"},{"lineNumber":23,"author":{"gitId":"guanzhou03"},"content":"     * and returns a FilterPatientCommand object for execution.","lastModifiedDate":"2022-10-25"},{"lineNumber":24,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":25,"author":{"gitId":"pwjj2000"},"content":"     * @param args Given arguments to be parsed.","lastModifiedDate":"2022-11-06"},{"lineNumber":26,"author":{"gitId":"guanzhou03"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-10-25"},{"lineNumber":27,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-10-25"},{"lineNumber":28,"author":{"gitId":"guanzhou03"},"content":"    public UnhidePatientsCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-25"},{"lineNumber":29,"author":{"gitId":"guanzhou03"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG, PREFIX_NAME);","lastModifiedDate":"2022-10-25"},{"lineNumber":30,"author":{"gitId":"guanzhou03"},"content":"        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {","lastModifiedDate":"2022-10-25"},{"lineNumber":31,"author":{"gitId":"guanzhou03"},"content":"            boolean areValidTags \u003d areValidTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2022-10-31"},{"lineNumber":32,"author":{"gitId":"guanzhou03"},"content":"            if (!areValidTags) {","lastModifiedDate":"2022-10-31"},{"lineNumber":33,"author":{"gitId":"guanzhou03"},"content":"                throw new ParseException(MESSAGE_INVALID_TAGS);","lastModifiedDate":"2022-10-31"},{"lineNumber":34,"author":{"gitId":"guanzhou03"},"content":"            }","lastModifiedDate":"2022-10-31"},{"lineNumber":35,"author":{"gitId":"guanzhou03"},"content":"            return new UnhidePatientsCommand(","lastModifiedDate":"2022-10-25"},{"lineNumber":36,"author":{"gitId":"guanzhou03"},"content":"                    new TagContainsKeywordsPredicate(argMultimap.getAllValues(PREFIX_TAG)));","lastModifiedDate":"2022-10-26"},{"lineNumber":37,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-25"},{"lineNumber":38,"author":{"gitId":"guanzhou03"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isEmpty()) {","lastModifiedDate":"2022-10-25"},{"lineNumber":39,"author":{"gitId":"guanzhou03"},"content":"            throw new ParseException(","lastModifiedDate":"2022-10-25"},{"lineNumber":40,"author":{"gitId":"guanzhou03"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnhidePatientsCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-25"},{"lineNumber":41,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-25"},{"lineNumber":42,"author":{"gitId":"guanzhou03"},"content":"        List\u003cString\u003e nameKeywords \u003d argMultimap.getAllValues(PREFIX_NAME);","lastModifiedDate":"2022-10-26"},{"lineNumber":43,"author":{"gitId":"guanzhou03"},"content":"        if (nameKeywords.stream().anyMatch(x -\u003e x.equals(\"\"))) {","lastModifiedDate":"2022-10-31"},{"lineNumber":44,"author":{"gitId":"guanzhou03"},"content":"            throw new ParseException(MESSAGE_EMPTY_NAME);","lastModifiedDate":"2022-10-31"},{"lineNumber":45,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-31"},{"lineNumber":46,"author":{"gitId":"guanzhou03"},"content":"        return new UnhidePatientsCommand(new NameContainsKeywordsPredicate(nameKeywords));","lastModifiedDate":"2022-10-26"},{"lineNumber":47,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-25"},{"lineNumber":48,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":49,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-10-31"},{"lineNumber":50,"author":{"gitId":"guanzhou03"},"content":"     * Checks if given tags match ear, nose or throat.","lastModifiedDate":"2022-10-31"},{"lineNumber":51,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":52,"author":{"gitId":"guanzhou03"},"content":"     * @param tags The values gotten from the user after the t/ prefix.","lastModifiedDate":"2022-10-31"},{"lineNumber":53,"author":{"gitId":"guanzhou03"},"content":"     * @return Whether tags are all valid.","lastModifiedDate":"2022-10-31"},{"lineNumber":54,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-10-31"},{"lineNumber":55,"author":{"gitId":"guanzhou03"},"content":"    public boolean areValidTags(List\u003cString\u003e tags) {","lastModifiedDate":"2022-10-31"},{"lineNumber":56,"author":{"gitId":"guanzhou03"},"content":"        for (String s: tags) {","lastModifiedDate":"2022-10-31"},{"lineNumber":57,"author":{"gitId":"guanzhou03"},"content":"            if (!s.equalsIgnoreCase(\"ear\") \u0026\u0026 !s.equalsIgnoreCase(\"nose\")","lastModifiedDate":"2022-10-31"},{"lineNumber":58,"author":{"gitId":"guanzhou03"},"content":"                    \u0026\u0026 !s.equalsIgnoreCase(\"throat\")) {","lastModifiedDate":"2022-10-31"},{"lineNumber":59,"author":{"gitId":"guanzhou03"},"content":"                return false;","lastModifiedDate":"2022-10-31"},{"lineNumber":60,"author":{"gitId":"guanzhou03"},"content":"            }","lastModifiedDate":"2022-10-31"},{"lineNumber":61,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-31"},{"lineNumber":62,"author":{"gitId":"guanzhou03"},"content":"        return true;","lastModifiedDate":"2022-10-31"},{"lineNumber":63,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-31"},{"lineNumber":64,"author":{"gitId":"guanzhou03"},"content":"}","lastModifiedDate":"2022-10-25"}],"authorContributionMap":{"JovonLim":1,"guanzhou03":60,"pwjj2000":3}},{"path":"src/main/java/seedu/address/logic/parser/UnmarkCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-02"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-02"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-02"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.commands.UnmarkCommand;","lastModifiedDate":"2022-10-02"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-02"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":" * Parses input arguments and creates a new UnmarkCommand object","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"public class UnmarkCommandParser extends SelectAppointmentCommandParser\u003cUnmarkCommand\u003e {","lastModifiedDate":"2022-10-02"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"    @Override","lastModifiedDate":"2022-10-02"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"    public UnmarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-02"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"        try {","lastModifiedDate":"2022-10-02"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"            Index appointmentIndex \u003d super.getAppointmentIndex(args);","lastModifiedDate":"2022-10-18"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"            return new UnmarkCommand(appointmentIndex);","lastModifiedDate":"2022-10-18"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2022-10-02"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnmarkCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2022-10-02"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-02"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-02"}],"authorContributionMap":{"NicholasTYD":23}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"WingKei67"},"content":"import java.util.Comparator;","lastModifiedDate":"2022-10-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.person.UniqueAppointmentList;","lastModifiedDate":"2022-10-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.UniquePersonList;","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;","lastModifiedDate":"2016-08-26"},{"lineNumber":21,"author":{"gitId":"pwjj2000"},"content":"    private final UniqueAppointmentList appointments;","lastModifiedDate":"2022-10-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();","lastModifiedDate":"2016-08-26"},{"lineNumber":32,"author":{"gitId":"pwjj2000"},"content":"        appointments \u003d new UniqueAppointmentList();","lastModifiedDate":"2022-10-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public AddressBook() {}","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}","lastModifiedDate":"2018-03-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":50,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":51,"author":{"gitId":"pwjj2000"},"content":"     * @param persons List of person that address book will contain.","lastModifiedDate":"2022-11-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);","lastModifiedDate":"2016-10-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"WingKei67"},"content":"    /**","lastModifiedDate":"2022-10-22"},{"lineNumber":58,"author":{"gitId":"WingKei67"},"content":"     * Sorts the contents of the person list with {@code comparator}.","lastModifiedDate":"2022-10-22"},{"lineNumber":59,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":60,"author":{"gitId":"pwjj2000"},"content":"     * @param comparator Comparator that determines order of person in the list.","lastModifiedDate":"2022-11-06"},{"lineNumber":61,"author":{"gitId":"WingKei67"},"content":"     */","lastModifiedDate":"2022-10-22"},{"lineNumber":62,"author":{"gitId":"WingKei67"},"content":"    public void sortPersons(Comparator\u003cPerson\u003e comparator) {","lastModifiedDate":"2022-10-22"},{"lineNumber":63,"author":{"gitId":"WingKei67"},"content":"        persons.sort(comparator);","lastModifiedDate":"2022-10-22"},{"lineNumber":64,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-22"},{"lineNumber":65,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":66,"author":{"gitId":"WingKei67"},"content":"    /**","lastModifiedDate":"2022-10-22"},{"lineNumber":67,"author":{"gitId":"WingKei67"},"content":"     * Replaces the contents of the appointment list with {@code appointments}.","lastModifiedDate":"2022-10-22"},{"lineNumber":68,"author":{"gitId":"WingKei67"},"content":"     * {@code appointments} must not contain duplicate persons.","lastModifiedDate":"2022-10-22"},{"lineNumber":69,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":70,"author":{"gitId":"pwjj2000"},"content":"     * @param appointments List of appointments that address book will contain.","lastModifiedDate":"2022-11-06"},{"lineNumber":71,"author":{"gitId":"WingKei67"},"content":"     */","lastModifiedDate":"2022-10-22"},{"lineNumber":72,"author":{"gitId":"pwjj2000"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2022-10-06"},{"lineNumber":73,"author":{"gitId":"pwjj2000"},"content":"        this.appointments.setAppointments(appointments);","lastModifiedDate":"2022-10-06"},{"lineNumber":74,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":75,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":76,"author":{"gitId":"WingKei67"},"content":"    /**","lastModifiedDate":"2022-10-22"},{"lineNumber":77,"author":{"gitId":"WingKei67"},"content":"     * Sorts the contents of the appointment list with {@code comparator}.","lastModifiedDate":"2022-10-22"},{"lineNumber":78,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":79,"author":{"gitId":"pwjj2000"},"content":"     * @param comparator Comparator that determines order of appointment in the list.","lastModifiedDate":"2022-11-06"},{"lineNumber":80,"author":{"gitId":"WingKei67"},"content":"     */","lastModifiedDate":"2022-10-22"},{"lineNumber":81,"author":{"gitId":"WingKei67"},"content":"    public void sortAppointments(Comparator\u003cAppointment\u003e comparator) {","lastModifiedDate":"2022-10-22"},{"lineNumber":82,"author":{"gitId":"WingKei67"},"content":"        appointments.sort(comparator);","lastModifiedDate":"2022-10-22"},{"lineNumber":83,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-22"},{"lineNumber":84,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}.","lastModifiedDate":"2017-08-16"},{"lineNumber":87,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":88,"author":{"gitId":"pwjj2000"},"content":"     * @param newData Data that will be contained by the address book.","lastModifiedDate":"2022-11-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());","lastModifiedDate":"2018-03-29"},{"lineNumber":94,"author":{"gitId":"pwjj2000"},"content":"        setAppointments(newData.getAppointmentList());","lastModifiedDate":"2022-10-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    //// person-level operations","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":101,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":102,"author":{"gitId":"pwjj2000"},"content":"     * @return Whether address book has the given person.","lastModifiedDate":"2022-11-06"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return persons.contains(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * Adds a person to the address book.","lastModifiedDate":"2016-09-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":112,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":113,"author":{"gitId":"pwjj2000"},"content":"     * @param p Given person to be added.","lastModifiedDate":"2022-11-06"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {","lastModifiedDate":"2018-08-07"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        persons.add(p);","lastModifiedDate":"2018-03-29"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2018-01-10"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":123,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":124,"author":{"gitId":"pwjj2000"},"content":"     * @param target Person to be edited.","lastModifiedDate":"2022-11-06"},{"lineNumber":125,"author":{"gitId":"pwjj2000"},"content":"     * @param editedPerson Person after editing.","lastModifiedDate":"2022-11-06"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);","lastModifiedDate":"2018-03-29"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":133,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":134,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-09"},{"lineNumber":135,"author":{"gitId":"JovonLim"},"content":"     *  Replaces the given appointment {@code target} in the list with {@code editedAppointment}.","lastModifiedDate":"2022-10-09"},{"lineNumber":136,"author":{"gitId":"JovonLim"},"content":"     *  {@code target} must exist in the address book.","lastModifiedDate":"2022-10-09"},{"lineNumber":137,"author":{"gitId":"JovonLim"},"content":"     *  The appointment {@code editedAppointment} must not be the same as another existing","lastModifiedDate":"2022-10-09"},{"lineNumber":138,"author":{"gitId":"JovonLim"},"content":"     *  appointment in the address book.","lastModifiedDate":"2022-10-09"},{"lineNumber":139,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":140,"author":{"gitId":"pwjj2000"},"content":"     * @param target Appointment to be edited.","lastModifiedDate":"2022-11-06"},{"lineNumber":141,"author":{"gitId":"pwjj2000"},"content":"     * @param editedAppointment Appointment after editing.","lastModifiedDate":"2022-11-06"},{"lineNumber":142,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-09"},{"lineNumber":143,"author":{"gitId":"JovonLim"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2022-10-09"},{"lineNumber":144,"author":{"gitId":"JovonLim"},"content":"        requireNonNull(editedAppointment);","lastModifiedDate":"2022-10-09"},{"lineNumber":145,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":146,"author":{"gitId":"JovonLim"},"content":"        appointments.setAppointment(target, editedAppointment);","lastModifiedDate":"2022-10-09"},{"lineNumber":147,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":148,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2017-08-16"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":152,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":153,"author":{"gitId":"pwjj2000"},"content":"     * @param key Person to be removed from the address book.","lastModifiedDate":"2022-11-06"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {","lastModifiedDate":"2018-08-07"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        persons.remove(key);","lastModifiedDate":"2018-02-28"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":159,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-26"},{"lineNumber":160,"author":{"gitId":"NicholasTYD"},"content":"     * Adds an appointment to the address book.","lastModifiedDate":"2022-10-26"},{"lineNumber":161,"author":{"gitId":"NicholasTYD"},"content":"     * The appointment must not already exist in the address book.","lastModifiedDate":"2022-10-26"},{"lineNumber":162,"author":{"gitId":"NicholasTYD"},"content":"     *","lastModifiedDate":"2022-10-26"},{"lineNumber":163,"author":{"gitId":"pwjj2000"},"content":"     * @param a The appointment to be added into the address book.","lastModifiedDate":"2022-11-06"},{"lineNumber":164,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-26"},{"lineNumber":165,"author":{"gitId":"pwjj2000"},"content":"    public void addAppointment(Appointment a) {","lastModifiedDate":"2022-10-06"},{"lineNumber":166,"author":{"gitId":"NicholasTYD"},"content":"        requireNonNull(a);","lastModifiedDate":"2022-10-26"},{"lineNumber":167,"author":{"gitId":"pwjj2000"},"content":"        appointments.add(a);","lastModifiedDate":"2022-10-06"},{"lineNumber":168,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":169,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":170,"author":{"gitId":"pwjj2000"},"content":"    public void removeAppointment(Appointment key) {","lastModifiedDate":"2022-10-06"},{"lineNumber":171,"author":{"gitId":"pwjj2000"},"content":"        appointments.remove(key);","lastModifiedDate":"2022-10-06"},{"lineNumber":172,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":173,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":174,"author":{"gitId":"JovonLim"},"content":"    public void removeAppointments(List\u003cAppointment\u003e keys) {","lastModifiedDate":"2022-10-09"},{"lineNumber":175,"author":{"gitId":"JovonLim"},"content":"        appointments.removeAppointments(keys);","lastModifiedDate":"2022-10-09"},{"lineNumber":176,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":177,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":178,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList().size() + \" persons\";","lastModifiedDate":"2018-04-05"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        // TODO: refine later","lastModifiedDate":"2016-08-08"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();","lastModifiedDate":"2018-04-05"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":192,"author":{"gitId":"pwjj2000"},"content":"    @Override","lastModifiedDate":"2022-10-06"},{"lineNumber":193,"author":{"gitId":"pwjj2000"},"content":"    public ObservableList\u003cAppointment\u003e getAppointmentList() {","lastModifiedDate":"2022-10-06"},{"lineNumber":194,"author":{"gitId":"pwjj2000"},"content":"        return appointments.asUnmodifiableObservableList();","lastModifiedDate":"2022-10-06"},{"lineNumber":195,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":196,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":200,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":201,"author":{"gitId":"-"},"content":"                \u0026\u0026 persons.equals(((AddressBook) other).persons));","lastModifiedDate":"2018-08-14"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        return persons.hashCode();","lastModifiedDate":"2018-03-29"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":208,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"NicholasTYD":7,"WingKei67":18,"JovonLim":17,"-":120,"pwjj2000":46}},{"path":"src/main/java/seedu/address/model/AppointmentList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pwjj2000"},"content":"package seedu.address.model;","lastModifiedDate":"2022-10-19"},{"lineNumber":2,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":3,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.logic.commands.BookCommand.MESSAGE_DUPLICATE_APPOINTMENT;","lastModifiedDate":"2022-10-19"},{"lineNumber":4,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":5,"author":{"gitId":"pwjj2000"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-19"},{"lineNumber":6,"author":{"gitId":"pwjj2000"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-19"},{"lineNumber":7,"author":{"gitId":"pwjj2000"},"content":"import java.util.List;","lastModifiedDate":"2022-10-19"},{"lineNumber":8,"author":{"gitId":"pwjj2000"},"content":"import java.util.Set;","lastModifiedDate":"2022-10-24"},{"lineNumber":9,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":10,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.logic.commands.EditAppointmentCommand;","lastModifiedDate":"2022-10-19"},{"lineNumber":11,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-19"},{"lineNumber":12,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-19"},{"lineNumber":13,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-19"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.predicates.HiddenPredicateSingleton;","lastModifiedDate":"2022-10-28"},{"lineNumber":15,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2022-10-24"},{"lineNumber":16,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":17,"author":{"gitId":"pwjj2000"},"content":"/**","lastModifiedDate":"2022-10-19"},{"lineNumber":18,"author":{"gitId":"pwjj2000"},"content":" * Facilitator for operations involving {@code appointments}.","lastModifiedDate":"2022-10-19"},{"lineNumber":19,"author":{"gitId":"pwjj2000"},"content":" */","lastModifiedDate":"2022-10-19"},{"lineNumber":20,"author":{"gitId":"pwjj2000"},"content":"public class AppointmentList {","lastModifiedDate":"2022-10-19"},{"lineNumber":21,"author":{"gitId":"pwjj2000"},"content":"    /**","lastModifiedDate":"2022-10-19"},{"lineNumber":22,"author":{"gitId":"pwjj2000"},"content":"     * Adds the given {@code Appointment} to the address book and the associated patient.","lastModifiedDate":"2022-10-19"},{"lineNumber":23,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-10-19"},{"lineNumber":24,"author":{"gitId":"pwjj2000"},"content":"     * @param model {@code Model} which {@code BookCommand} is operating on.","lastModifiedDate":"2022-10-19"},{"lineNumber":25,"author":{"gitId":"pwjj2000"},"content":"     * @param patient The patient that is involved in the appointment.","lastModifiedDate":"2022-10-19"},{"lineNumber":26,"author":{"gitId":"pwjj2000"},"content":"     * @param appointment {@code Appointment} to be added.","lastModifiedDate":"2022-10-19"},{"lineNumber":27,"author":{"gitId":"pwjj2000"},"content":"     * @throws CommandException If there are duplicate appointments.","lastModifiedDate":"2022-10-19"},{"lineNumber":28,"author":{"gitId":"pwjj2000"},"content":"     */","lastModifiedDate":"2022-10-19"},{"lineNumber":29,"author":{"gitId":"pwjj2000"},"content":"    public static void addAppointment(Model model, Person patient, Appointment appointment) throws CommandException {","lastModifiedDate":"2022-10-19"},{"lineNumber":30,"author":{"gitId":"pwjj2000"},"content":"        List\u003cAppointment\u003e appointmentList \u003d patient.getAppointments();","lastModifiedDate":"2022-10-19"},{"lineNumber":31,"author":{"gitId":"pwjj2000"},"content":"        if (hasSameAppointment(appointmentList, appointment)) {","lastModifiedDate":"2022-10-19"},{"lineNumber":32,"author":{"gitId":"pwjj2000"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);","lastModifiedDate":"2022-10-19"},{"lineNumber":33,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-19"},{"lineNumber":34,"author":{"gitId":"pwjj2000"},"content":"        appointmentList.add(appointment);","lastModifiedDate":"2022-10-19"},{"lineNumber":35,"author":{"gitId":"pwjj2000"},"content":"        appointment.setPatient(patient);","lastModifiedDate":"2022-10-19"},{"lineNumber":36,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":37,"author":{"gitId":"pwjj2000"},"content":"        model.addAppointment(appointment);","lastModifiedDate":"2022-10-19"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"        model.updateFilteredLists(HiddenPredicateSingleton.getInstance().getCurrPersonPredicate(),","lastModifiedDate":"2022-11-06"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"                HiddenPredicateSingleton.getInstance().getCurrApptPredicate());","lastModifiedDate":"2022-11-06"},{"lineNumber":40,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-19"},{"lineNumber":41,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":42,"author":{"gitId":"pwjj2000"},"content":"    /**","lastModifiedDate":"2022-10-19"},{"lineNumber":43,"author":{"gitId":"pwjj2000"},"content":"     * Removes the given {@code Appointment} from the address book and the associated patient.","lastModifiedDate":"2022-10-19"},{"lineNumber":44,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-10-19"},{"lineNumber":45,"author":{"gitId":"pwjj2000"},"content":"     * @param model {@code Model} which {@code CancelCommand} is operating on.","lastModifiedDate":"2022-10-19"},{"lineNumber":46,"author":{"gitId":"pwjj2000"},"content":"     * @param patient The patient that is involved in the appointment.","lastModifiedDate":"2022-10-19"},{"lineNumber":47,"author":{"gitId":"pwjj2000"},"content":"     * @param appointment {@code Appointment} to be removed.","lastModifiedDate":"2022-10-19"},{"lineNumber":48,"author":{"gitId":"pwjj2000"},"content":"     */","lastModifiedDate":"2022-10-19"},{"lineNumber":49,"author":{"gitId":"pwjj2000"},"content":"    public static void cancelAppointment(Model model, Person patient, Appointment appointment) {","lastModifiedDate":"2022-10-19"},{"lineNumber":50,"author":{"gitId":"pwjj2000"},"content":"        List\u003cAppointment\u003e appointmentList \u003d patient.getAppointments();","lastModifiedDate":"2022-10-19"},{"lineNumber":51,"author":{"gitId":"pwjj2000"},"content":"        appointmentList.remove(appointment);","lastModifiedDate":"2022-10-19"},{"lineNumber":52,"author":{"gitId":"pwjj2000"},"content":"        model.deleteAppointment(appointment);","lastModifiedDate":"2022-10-19"},{"lineNumber":53,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"        model.updateFilteredLists(HiddenPredicateSingleton.getInstance().getCurrPersonPredicate(),","lastModifiedDate":"2022-11-06"},{"lineNumber":55,"author":{"gitId":"JovonLim"},"content":"                HiddenPredicateSingleton.getInstance().getCurrApptPredicate());","lastModifiedDate":"2022-11-06"},{"lineNumber":56,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-19"},{"lineNumber":57,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":58,"author":{"gitId":"pwjj2000"},"content":"    /**","lastModifiedDate":"2022-10-19"},{"lineNumber":59,"author":{"gitId":"pwjj2000"},"content":"     * Edits the given {@code Appointment} and returns it.","lastModifiedDate":"2022-10-19"},{"lineNumber":60,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-10-19"},{"lineNumber":61,"author":{"gitId":"pwjj2000"},"content":"     * @param model {@code Model} which {@code EditCommand} is operating on.","lastModifiedDate":"2022-10-19"},{"lineNumber":62,"author":{"gitId":"pwjj2000"},"content":"     * @param patient The patient that is involved in the {@code Appointment}","lastModifiedDate":"2022-10-19"},{"lineNumber":63,"author":{"gitId":"pwjj2000"},"content":"     * @param appointment {@code Appointment} that is about to be edited.","lastModifiedDate":"2022-10-19"},{"lineNumber":64,"author":{"gitId":"pwjj2000"},"content":"     * @param descriptor Field(s) that are edited.","lastModifiedDate":"2022-10-19"},{"lineNumber":65,"author":{"gitId":"pwjj2000"},"content":"     * @return The edited {@code Appointment}.","lastModifiedDate":"2022-10-19"},{"lineNumber":66,"author":{"gitId":"pwjj2000"},"content":"     * @throws CommandException If there are duplicate appointments.","lastModifiedDate":"2022-10-19"},{"lineNumber":67,"author":{"gitId":"pwjj2000"},"content":"     */","lastModifiedDate":"2022-10-19"},{"lineNumber":68,"author":{"gitId":"pwjj2000"},"content":"    public static Appointment editAppointment(Model model, Person patient, Appointment appointment,","lastModifiedDate":"2022-10-19"},{"lineNumber":69,"author":{"gitId":"pwjj2000"},"content":"            EditAppointmentCommand.EditAppointmentDescriptor descriptor) throws CommandException {","lastModifiedDate":"2022-10-19"},{"lineNumber":70,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":71,"author":{"gitId":"pwjj2000"},"content":"        List\u003cAppointment\u003e appointmentList \u003d patient.getAppointments();","lastModifiedDate":"2022-10-19"},{"lineNumber":72,"author":{"gitId":"pwjj2000"},"content":"        int index \u003d appointmentList.indexOf(appointment);","lastModifiedDate":"2022-10-19"},{"lineNumber":73,"author":{"gitId":"pwjj2000"},"content":"        Appointment editedAppointment \u003d createEditedAppointment(appointment, descriptor);","lastModifiedDate":"2022-10-19"},{"lineNumber":74,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":75,"author":{"gitId":"pwjj2000"},"content":"        if (hasSameTime(appointmentList, appointment, editedAppointment)) {","lastModifiedDate":"2022-10-19"},{"lineNumber":76,"author":{"gitId":"pwjj2000"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);","lastModifiedDate":"2022-10-19"},{"lineNumber":77,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-19"},{"lineNumber":78,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":79,"author":{"gitId":"pwjj2000"},"content":"        model.setAppointment(appointment, editedAppointment);","lastModifiedDate":"2022-10-19"},{"lineNumber":80,"author":{"gitId":"pwjj2000"},"content":"        appointmentList.set(index, editedAppointment);","lastModifiedDate":"2022-10-19"},{"lineNumber":81,"author":{"gitId":"JovonLim"},"content":"        model.updateFilteredLists(HiddenPredicateSingleton.getInstance().getCurrPersonPredicate(),","lastModifiedDate":"2022-11-06"},{"lineNumber":82,"author":{"gitId":"JovonLim"},"content":"                HiddenPredicateSingleton.getInstance().getCurrApptPredicate());","lastModifiedDate":"2022-11-06"},{"lineNumber":83,"author":{"gitId":"pwjj2000"},"content":"        return editedAppointment;","lastModifiedDate":"2022-10-19"},{"lineNumber":84,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-19"},{"lineNumber":85,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":86,"author":{"gitId":"pwjj2000"},"content":"    private static boolean hasSameAppointment(List\u003cAppointment\u003e appointmentList, Appointment appointment) {","lastModifiedDate":"2022-10-19"},{"lineNumber":87,"author":{"gitId":"pwjj2000"},"content":"        return appointmentList.stream().anyMatch(x -\u003e x.isSameTime(appointment));","lastModifiedDate":"2022-10-19"},{"lineNumber":88,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-19"},{"lineNumber":89,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":90,"author":{"gitId":"pwjj2000"},"content":"    private static Appointment createEditedAppointment(Appointment appointmentToEdit,","lastModifiedDate":"2022-10-19"},{"lineNumber":91,"author":{"gitId":"pwjj2000"},"content":"            EditAppointmentCommand.EditAppointmentDescriptor editAppointmentDescriptor) {","lastModifiedDate":"2022-10-24"},{"lineNumber":92,"author":{"gitId":"pwjj2000"},"content":"        assert appointmentToEdit !\u003d null;","lastModifiedDate":"2022-10-19"},{"lineNumber":93,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":94,"author":{"gitId":"pwjj2000"},"content":"        String reason \u003d editAppointmentDescriptor.getReason().orElse(appointmentToEdit.getReason());","lastModifiedDate":"2022-10-24"},{"lineNumber":95,"author":{"gitId":"pwjj2000"},"content":"        LocalDateTime dateTime \u003d editAppointmentDescriptor.getDateTime().orElse(appointmentToEdit.getDateTime());","lastModifiedDate":"2022-10-24"},{"lineNumber":96,"author":{"gitId":"pwjj2000"},"content":"        List\u003cInteger\u003e period \u003d editAppointmentDescriptor.getTimePeriod().orElse(appointmentToEdit.getTimePeriod());","lastModifiedDate":"2022-10-24"},{"lineNumber":97,"author":{"gitId":"pwjj2000"},"content":"        Set\u003cTag\u003e tags \u003d editAppointmentDescriptor.getTags().orElse(appointmentToEdit.getTags());","lastModifiedDate":"2022-10-24"},{"lineNumber":98,"author":{"gitId":"pwjj2000"},"content":"        Appointment editedAppointment \u003d new Appointment(reason, dateTime, period, tags,","lastModifiedDate":"2022-10-24"},{"lineNumber":99,"author":{"gitId":"pwjj2000"},"content":"                appointmentToEdit.isMarked());","lastModifiedDate":"2022-10-19"},{"lineNumber":100,"author":{"gitId":"pwjj2000"},"content":"        editedAppointment.setPatient(appointmentToEdit.getPatient());","lastModifiedDate":"2022-10-19"},{"lineNumber":101,"author":{"gitId":"pwjj2000"},"content":"        return editedAppointment;","lastModifiedDate":"2022-10-19"},{"lineNumber":102,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-19"},{"lineNumber":103,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":104,"author":{"gitId":"pwjj2000"},"content":"    private static boolean hasSameTime(List\u003cAppointment\u003e appointments, Appointment originalAppointment,","lastModifiedDate":"2022-10-19"},{"lineNumber":105,"author":{"gitId":"pwjj2000"},"content":"                                Appointment appointmentToCheck) {","lastModifiedDate":"2022-10-19"},{"lineNumber":106,"author":{"gitId":"pwjj2000"},"content":"        List\u003cAppointment\u003e appointmentsToCheck \u003d new ArrayList\u003c\u003e(appointments);","lastModifiedDate":"2022-10-19"},{"lineNumber":107,"author":{"gitId":"pwjj2000"},"content":"        appointmentsToCheck.remove(originalAppointment);","lastModifiedDate":"2022-10-19"},{"lineNumber":108,"author":{"gitId":"pwjj2000"},"content":"        return appointmentsToCheck.stream().anyMatch(x -\u003e x.isSameTime(appointmentToCheck));","lastModifiedDate":"2022-10-19"},{"lineNumber":109,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-19"},{"lineNumber":110,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-19"},{"lineNumber":111,"author":{"gitId":"pwjj2000"},"content":"}","lastModifiedDate":"2022-10-19"}],"authorContributionMap":{"NicholasTYD":1,"JovonLim":6,"pwjj2000":104}},{"path":"src/main/java/seedu/address/model/Key.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WingKei67"},"content":"package seedu.address.model;","lastModifiedDate":"2022-10-24"},{"lineNumber":2,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":3,"author":{"gitId":"WingKei67"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-24"},{"lineNumber":4,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-10-24"},{"lineNumber":5,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":6,"author":{"gitId":"WingKei67"},"content":"/**","lastModifiedDate":"2022-10-24"},{"lineNumber":7,"author":{"gitId":"WingKei67"},"content":" * Represents a key for grouping appointments.","lastModifiedDate":"2022-10-24"},{"lineNumber":8,"author":{"gitId":"WingKei67"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidKey(String)}","lastModifiedDate":"2022-10-24"},{"lineNumber":9,"author":{"gitId":"WingKei67"},"content":" */","lastModifiedDate":"2022-10-24"},{"lineNumber":10,"author":{"gitId":"WingKei67"},"content":"public enum Key {","lastModifiedDate":"2022-10-24"},{"lineNumber":11,"author":{"gitId":"WingKei67"},"content":"    PATIENT(\"Patient\"), TAG(\"Tag\"), MARK(\"Mark\");","lastModifiedDate":"2022-10-25"},{"lineNumber":12,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":13,"author":{"gitId":"WingKei67"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Key should be either tag or patient.\";","lastModifiedDate":"2022-10-24"},{"lineNumber":14,"author":{"gitId":"WingKei67"},"content":"    private String keyContent;","lastModifiedDate":"2022-10-24"},{"lineNumber":15,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":16,"author":{"gitId":"WingKei67"},"content":"    Key(String keyContent) {","lastModifiedDate":"2022-10-24"},{"lineNumber":17,"author":{"gitId":"WingKei67"},"content":"        requireNonNull(keyContent);","lastModifiedDate":"2022-10-24"},{"lineNumber":18,"author":{"gitId":"WingKei67"},"content":"        checkArgument(isValidKey(keyContent), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-24"},{"lineNumber":19,"author":{"gitId":"WingKei67"},"content":"        this.keyContent \u003d keyContent;","lastModifiedDate":"2022-10-24"},{"lineNumber":20,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":21,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":22,"author":{"gitId":"WingKei67"},"content":"    @Override","lastModifiedDate":"2022-10-24"},{"lineNumber":23,"author":{"gitId":"WingKei67"},"content":"    public String toString() {","lastModifiedDate":"2022-10-24"},{"lineNumber":24,"author":{"gitId":"WingKei67"},"content":"        return keyContent;","lastModifiedDate":"2022-10-24"},{"lineNumber":25,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":26,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":27,"author":{"gitId":"WingKei67"},"content":"    /**","lastModifiedDate":"2022-10-24"},{"lineNumber":28,"author":{"gitId":"WingKei67"},"content":"     * Checks whether the given string is a valid key.","lastModifiedDate":"2022-10-24"},{"lineNumber":29,"author":{"gitId":"WingKei67"},"content":"     *","lastModifiedDate":"2022-10-24"},{"lineNumber":30,"author":{"gitId":"WingKei67"},"content":"     * @param keyContent The string to test.","lastModifiedDate":"2022-10-24"},{"lineNumber":31,"author":{"gitId":"WingKei67"},"content":"     * @return The result of the equals test.","lastModifiedDate":"2022-10-24"},{"lineNumber":32,"author":{"gitId":"WingKei67"},"content":"     */","lastModifiedDate":"2022-10-24"},{"lineNumber":33,"author":{"gitId":"WingKei67"},"content":"    public static boolean isValidKey(String keyContent) {","lastModifiedDate":"2022-10-24"},{"lineNumber":34,"author":{"gitId":"WingKei67"},"content":"        return keyContent.equalsIgnoreCase(\"patient\")","lastModifiedDate":"2022-10-24"},{"lineNumber":35,"author":{"gitId":"WingKei67"},"content":"                || keyContent.equalsIgnoreCase(\"tag\")","lastModifiedDate":"2022-10-25"},{"lineNumber":36,"author":{"gitId":"WingKei67"},"content":"                || keyContent.equalsIgnoreCase(\"mark\")","lastModifiedDate":"2022-10-25"},{"lineNumber":37,"author":{"gitId":"WingKei67"},"content":"                || keyContent.equalsIgnoreCase(\"p\")","lastModifiedDate":"2022-10-25"},{"lineNumber":38,"author":{"gitId":"WingKei67"},"content":"                || keyContent.equalsIgnoreCase(\"t\")","lastModifiedDate":"2022-10-25"},{"lineNumber":39,"author":{"gitId":"WingKei67"},"content":"                || keyContent.equalsIgnoreCase(\"m\");","lastModifiedDate":"2022-10-25"},{"lineNumber":40,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":41,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":42,"author":{"gitId":"WingKei67"},"content":"    /**","lastModifiedDate":"2022-10-24"},{"lineNumber":43,"author":{"gitId":"WingKei67"},"content":"     * Converts the given input to {@code Key} if possible.","lastModifiedDate":"2022-10-24"},{"lineNumber":44,"author":{"gitId":"WingKei67"},"content":"     *","lastModifiedDate":"2022-10-24"},{"lineNumber":45,"author":{"gitId":"WingKei67"},"content":"     * @param keyContent The given input.","lastModifiedDate":"2022-10-24"},{"lineNumber":46,"author":{"gitId":"WingKei67"},"content":"     * @return The resulting {@code Key}.","lastModifiedDate":"2022-10-24"},{"lineNumber":47,"author":{"gitId":"WingKei67"},"content":"     */","lastModifiedDate":"2022-10-24"},{"lineNumber":48,"author":{"gitId":"WingKei67"},"content":"    public static Key convertToKey(String keyContent) {","lastModifiedDate":"2022-10-24"},{"lineNumber":49,"author":{"gitId":"WingKei67"},"content":"        requireNonNull(keyContent);","lastModifiedDate":"2022-10-24"},{"lineNumber":50,"author":{"gitId":"WingKei67"},"content":"        if (keyContent.equalsIgnoreCase(\"patient\")","lastModifiedDate":"2022-10-25"},{"lineNumber":51,"author":{"gitId":"WingKei67"},"content":"                || keyContent.equalsIgnoreCase(\"p\")) {","lastModifiedDate":"2022-10-25"},{"lineNumber":52,"author":{"gitId":"WingKei67"},"content":"            return Key.PATIENT;","lastModifiedDate":"2022-10-24"},{"lineNumber":53,"author":{"gitId":"WingKei67"},"content":"        } else if (keyContent.equalsIgnoreCase(\"tag\")","lastModifiedDate":"2022-10-25"},{"lineNumber":54,"author":{"gitId":"WingKei67"},"content":"                || keyContent.equalsIgnoreCase(\"t\")) {","lastModifiedDate":"2022-10-25"},{"lineNumber":55,"author":{"gitId":"WingKei67"},"content":"            return Key.TAG;","lastModifiedDate":"2022-10-24"},{"lineNumber":56,"author":{"gitId":"WingKei67"},"content":"        } else if (keyContent.equalsIgnoreCase(\"mark\")","lastModifiedDate":"2022-10-25"},{"lineNumber":57,"author":{"gitId":"WingKei67"},"content":"                || keyContent.equalsIgnoreCase(\"m\")) {","lastModifiedDate":"2022-10-25"},{"lineNumber":58,"author":{"gitId":"WingKei67"},"content":"            return Key.MARK;","lastModifiedDate":"2022-10-25"},{"lineNumber":59,"author":{"gitId":"WingKei67"},"content":"        } else {","lastModifiedDate":"2022-10-24"},{"lineNumber":60,"author":{"gitId":"WingKei67"},"content":"            throw new IllegalArgumentException(MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-24"},{"lineNumber":61,"author":{"gitId":"WingKei67"},"content":"        }","lastModifiedDate":"2022-10-24"},{"lineNumber":62,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":63,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-24"}],"authorContributionMap":{"WingKei67":63}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"guanzhou03"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-12"},{"lineNumber":5,"author":{"gitId":"WingKei67"},"content":"import java.util.Comparator;","lastModifiedDate":"2022-10-22"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import java.util.List;","lastModifiedDate":"2022-10-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-06"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2022-10-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"guanzhou03"},"content":"    ArrayList\u003cName\u003e CURRENT_NAMES \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-15"},{"lineNumber":20,"author":{"gitId":"guanzhou03"},"content":"    Predicate\u003cPerson\u003e CURRENT_PREDICATE \u003d (person) -\u003e CURRENT_NAMES.contains(person.getName());","lastModifiedDate":"2022-10-15"},{"lineNumber":21,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2018-01-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":25,"author":{"gitId":"pwjj2000"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2022-10-06"},{"lineNumber":26,"author":{"gitId":"pwjj2000"},"content":"    Predicate\u003cAppointment\u003e PREDICATE_SHOW_ALL_APPOINTMENTS \u003d unused -\u003e true;","lastModifiedDate":"2022-10-06"},{"lineNumber":27,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":28,"author":{"gitId":"WingKei67"},"content":"    /** {@code Comparator} that ungroup persons by their tags */","lastModifiedDate":"2022-10-22"},{"lineNumber":29,"author":{"gitId":"WingKei67"},"content":"    Comparator\u003cPerson\u003e COMPARATOR_UNGROUP_PATIENTS \u003d (p1, p2) -\u003e p1.compareTo(p2);","lastModifiedDate":"2022-10-22"},{"lineNumber":30,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":31,"author":{"gitId":"WingKei67"},"content":"    /** {@code Predicate} that ungroup appointments by their tags */","lastModifiedDate":"2022-10-22"},{"lineNumber":32,"author":{"gitId":"WingKei67"},"content":"    Comparator\u003cAppointment\u003e COMPARATOR_UNGROUP_APPOINTMENTS \u003d (a1, a2) -\u003e a1.compareTo(a2);","lastModifiedDate":"2022-10-24"},{"lineNumber":33,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":34,"author":{"gitId":"WingKei67"},"content":"    /** {@code Comparator} that group persons by their tags */","lastModifiedDate":"2022-10-22"},{"lineNumber":35,"author":{"gitId":"WingKei67"},"content":"    Comparator\u003cPerson\u003e COMPARATOR_GROUP_PATIENTS \u003d (p1, p2) -\u003e p1.groupCompareTo(p2);","lastModifiedDate":"2022-10-22"},{"lineNumber":36,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":37,"author":{"gitId":"WingKei67"},"content":"    /** {@code comparator} that group appointments by their tags */","lastModifiedDate":"2022-10-24"},{"lineNumber":38,"author":{"gitId":"WingKei67"},"content":"    Comparator\u003cAppointment\u003e COMPARATOR_GROUP_TAG_APPOINTMENTS \u003d (a1, a2) -\u003e a1.groupCompareTo(a2, Key.TAG);","lastModifiedDate":"2022-10-24"},{"lineNumber":39,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":40,"author":{"gitId":"WingKei67"},"content":"    /** {@code comparator} that group appointments by their patients */","lastModifiedDate":"2022-10-24"},{"lineNumber":41,"author":{"gitId":"WingKei67"},"content":"    Comparator\u003cAppointment\u003e COMPARATOR_GROUP_PATIENT_APPOINTMENTS \u003d (a1, a2) -\u003e a1.groupCompareTo(a2, Key.PATIENT);","lastModifiedDate":"2022-10-24"},{"lineNumber":42,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":43,"author":{"gitId":"WingKei67"},"content":"    /** {@code comparator} that group appointments by their mark status */","lastModifiedDate":"2022-10-25"},{"lineNumber":44,"author":{"gitId":"WingKei67"},"content":"    Comparator\u003cAppointment\u003e COMPARATOR_GROUP_MARK_APPOINTMENTS \u003d (a1, a2) -\u003e a1.groupCompareTo(a2, Key.MARK);","lastModifiedDate":"2022-10-25"},{"lineNumber":45,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */","lastModifiedDate":"2016-09-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);","lastModifiedDate":"2018-08-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Deletes the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * The person must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);","lastModifiedDate":"2018-08-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Adds the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    void addPerson(Person person);","lastModifiedDate":"2018-08-07"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":101,"author":{"gitId":"WingKei67"},"content":"    /**","lastModifiedDate":"2022-10-22"},{"lineNumber":102,"author":{"gitId":"WingKei67"},"content":"     * Adds the given appointment.","lastModifiedDate":"2022-10-22"},{"lineNumber":103,"author":{"gitId":"WingKei67"},"content":"     * {@code appointment} must not already exist in the address book.","lastModifiedDate":"2022-10-22"},{"lineNumber":104,"author":{"gitId":"WingKei67"},"content":"     */","lastModifiedDate":"2022-10-22"},{"lineNumber":105,"author":{"gitId":"pwjj2000"},"content":"    void addAppointment(Appointment appointment);","lastModifiedDate":"2022-10-06"},{"lineNumber":106,"author":{"gitId":"WingKei67"},"content":"    /**","lastModifiedDate":"2022-10-22"},{"lineNumber":107,"author":{"gitId":"WingKei67"},"content":"     * Deletes the given appointment.","lastModifiedDate":"2022-10-22"},{"lineNumber":108,"author":{"gitId":"WingKei67"},"content":"     * {@code target} must already exist in the address book.","lastModifiedDate":"2022-10-22"},{"lineNumber":109,"author":{"gitId":"WingKei67"},"content":"     */","lastModifiedDate":"2022-10-22"},{"lineNumber":110,"author":{"gitId":"pwjj2000"},"content":"    void deleteAppointment(Appointment target);","lastModifiedDate":"2022-10-06"},{"lineNumber":111,"author":{"gitId":"WingKei67"},"content":"    /**","lastModifiedDate":"2022-10-22"},{"lineNumber":112,"author":{"gitId":"WingKei67"},"content":"     * Deletes the given appointment list.","lastModifiedDate":"2022-10-22"},{"lineNumber":113,"author":{"gitId":"WingKei67"},"content":"     * {@code appointments} must already exist in the address book.","lastModifiedDate":"2022-10-22"},{"lineNumber":114,"author":{"gitId":"WingKei67"},"content":"     */","lastModifiedDate":"2022-10-22"},{"lineNumber":115,"author":{"gitId":"JovonLim"},"content":"    void deleteAppointments(List\u003cAppointment\u003e appointments);","lastModifiedDate":"2022-10-09"},{"lineNumber":116,"author":{"gitId":"WingKei67"},"content":"    /**","lastModifiedDate":"2022-10-22"},{"lineNumber":117,"author":{"gitId":"WingKei67"},"content":"     * Updates the given appointment.","lastModifiedDate":"2022-10-22"},{"lineNumber":118,"author":{"gitId":"WingKei67"},"content":"     * {@code target} must already exist in the address book.","lastModifiedDate":"2022-10-22"},{"lineNumber":119,"author":{"gitId":"WingKei67"},"content":"     */","lastModifiedDate":"2022-10-22"},{"lineNumber":120,"author":{"gitId":"JovonLim"},"content":"    void setAppointment(Appointment target, Appointment editedAppointment);","lastModifiedDate":"2022-10-09"},{"lineNumber":121,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */","lastModifiedDate":"2017-09-01"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2018-01-10"},{"lineNumber":137,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":138,"author":{"gitId":"WingKei67"},"content":"    /**","lastModifiedDate":"2022-10-22"},{"lineNumber":139,"author":{"gitId":"WingKei67"},"content":"     * Returns an unmodifiable view of the filtered appointment list.","lastModifiedDate":"2022-10-22"},{"lineNumber":140,"author":{"gitId":"WingKei67"},"content":"     */","lastModifiedDate":"2022-10-22"},{"lineNumber":141,"author":{"gitId":"pwjj2000"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();","lastModifiedDate":"2022-10-06"},{"lineNumber":142,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":143,"author":{"gitId":"WingKei67"},"content":"    /**","lastModifiedDate":"2022-10-22"},{"lineNumber":144,"author":{"gitId":"WingKei67"},"content":"     * Updates the filter of the filtered appointment list to filter by the given {@code predicate}.","lastModifiedDate":"2022-10-22"},{"lineNumber":145,"author":{"gitId":"WingKei67"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2022-10-22"},{"lineNumber":146,"author":{"gitId":"WingKei67"},"content":"     */","lastModifiedDate":"2022-10-22"},{"lineNumber":147,"author":{"gitId":"pwjj2000"},"content":"    void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate);","lastModifiedDate":"2022-10-06"},{"lineNumber":148,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":149,"author":{"gitId":"WingKei67"},"content":"    /**","lastModifiedDate":"2022-10-22"},{"lineNumber":150,"author":{"gitId":"WingKei67"},"content":"     * Updates the comparator of the filtered person list to filter by the given {@code comparator}.","lastModifiedDate":"2022-10-22"},{"lineNumber":151,"author":{"gitId":"WingKei67"},"content":"     * @throws NullPointerException if {@code comparator} is null.","lastModifiedDate":"2022-10-22"},{"lineNumber":152,"author":{"gitId":"WingKei67"},"content":"     */","lastModifiedDate":"2022-10-22"},{"lineNumber":153,"author":{"gitId":"WingKei67"},"content":"    void updatePersonComparator(Comparator\u003cPerson\u003e comparator);","lastModifiedDate":"2022-10-22"},{"lineNumber":154,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":155,"author":{"gitId":"WingKei67"},"content":"    /**","lastModifiedDate":"2022-10-22"},{"lineNumber":156,"author":{"gitId":"WingKei67"},"content":"     * Updates the comparator of the filtered appointment list to filter by the given {@code comparator}.","lastModifiedDate":"2022-10-22"},{"lineNumber":157,"author":{"gitId":"WingKei67"},"content":"     * @throws NullPointerException if {@code comparator} is null.","lastModifiedDate":"2022-10-22"},{"lineNumber":158,"author":{"gitId":"WingKei67"},"content":"     */","lastModifiedDate":"2022-10-22"},{"lineNumber":159,"author":{"gitId":"WingKei67"},"content":"    void updateAppointmentComparator(Comparator\u003cAppointment\u003e comparator);","lastModifiedDate":"2022-10-22"},{"lineNumber":160,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":161,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-11-06"},{"lineNumber":162,"author":{"gitId":"JovonLim"},"content":"     * Updates the filter of the filtered person and appointment lists by the given {@code predicate}","lastModifiedDate":"2022-11-06"},{"lineNumber":163,"author":{"gitId":"JovonLim"},"content":"     * and {@code appointmentPredicate}.","lastModifiedDate":"2022-11-06"},{"lineNumber":164,"author":{"gitId":"JovonLim"},"content":"     * @throws NullPointerException if {@code predicate} or {@code appointmentPredicate} is null.","lastModifiedDate":"2022-11-06"},{"lineNumber":165,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-11-06"},{"lineNumber":166,"author":{"gitId":"JovonLim"},"content":"    void updateFilteredLists(Predicate\u003cPerson\u003e predicate, Predicate\u003cAppointment\u003e appointmentPredicate);","lastModifiedDate":"2022-11-06"},{"lineNumber":167,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"WingKei67":56,"JovonLim":10,"-":87,"guanzhou03":4,"pwjj2000":10}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"WingKei67"},"content":"import java.util.Comparator;","lastModifiedDate":"2022-10-22"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"import java.util.List;","lastModifiedDate":"2022-10-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":16,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":18,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.person.predicates.HiddenPredicateSingleton;","lastModifiedDate":"2022-10-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2018-01-10"},{"lineNumber":28,"author":{"gitId":"pwjj2000"},"content":"    private final FilteredList\u003cAppointment\u003e filteredAppointments;","lastModifiedDate":"2022-10-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs.","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);","lastModifiedDate":"2017-05-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);","lastModifiedDate":"2016-12-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":40,"author":{"gitId":"pwjj2000"},"content":"        filteredAppointments \u003d new FilteredList\u003c\u003e(this.addressBook.getAppointmentList());","lastModifiedDate":"2022-10-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2016-09-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2018-08-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);","lastModifiedDate":"2019-01-25"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2022-10-06"},{"lineNumber":106,"author":{"gitId":"pwjj2000"},"content":"    public void deleteAppointment(Appointment target) {","lastModifiedDate":"2022-10-06"},{"lineNumber":107,"author":{"gitId":"pwjj2000"},"content":"        addressBook.removeAppointment(target);","lastModifiedDate":"2022-10-06"},{"lineNumber":108,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":109,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":110,"author":{"gitId":"JovonLim"},"content":"    @Override","lastModifiedDate":"2022-10-09"},{"lineNumber":111,"author":{"gitId":"JovonLim"},"content":"    public void deleteAppointments(List\u003cAppointment\u003e appointmentList) {","lastModifiedDate":"2022-10-09"},{"lineNumber":112,"author":{"gitId":"JovonLim"},"content":"        addressBook.removeAppointments(appointmentList);","lastModifiedDate":"2022-10-09"},{"lineNumber":113,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":114,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":115,"author":{"gitId":"JovonLim"},"content":"    @Override","lastModifiedDate":"2022-10-09"},{"lineNumber":116,"author":{"gitId":"JovonLim"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2022-10-09"},{"lineNumber":117,"author":{"gitId":"JovonLim"},"content":"        requireAllNonNull(target, editedAppointment);","lastModifiedDate":"2022-10-09"},{"lineNumber":118,"author":{"gitId":"JovonLim"},"content":"        addressBook.setAppointment(target, editedAppointment);","lastModifiedDate":"2022-10-09"},{"lineNumber":119,"author":{"gitId":"guanzhou03"},"content":"        updateFilteredAppointmentList(HiddenPredicateSingleton","lastModifiedDate":"2022-11-05"},{"lineNumber":120,"author":{"gitId":"guanzhou03"},"content":"                .getInstance().getCurrApptPredicate());","lastModifiedDate":"2022-11-05"},{"lineNumber":121,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":122,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":123,"author":{"gitId":"pwjj2000"},"content":"    @Override","lastModifiedDate":"2022-10-06"},{"lineNumber":124,"author":{"gitId":"pwjj2000"},"content":"    public void addAppointment(Appointment appointment) {","lastModifiedDate":"2022-10-06"},{"lineNumber":125,"author":{"gitId":"pwjj2000"},"content":"        addressBook.addAppointment(appointment);","lastModifiedDate":"2022-10-06"},{"lineNumber":126,"author":{"gitId":"guanzhou03"},"content":"        updateFilteredAppointmentList(HiddenPredicateSingleton","lastModifiedDate":"2022-11-05"},{"lineNumber":127,"author":{"gitId":"guanzhou03"},"content":"                .getInstance().getCurrApptPredicate());","lastModifiedDate":"2022-11-05"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);","lastModifiedDate":"2019-01-25"},{"lineNumber":134,"author":{"gitId":"guanzhou03"},"content":"        updateFilteredPersonList(HiddenPredicateSingleton.getInstance().getCurrPersonPredicate());","lastModifiedDate":"2022-11-05"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":137,"author":{"gitId":"WingKei67"},"content":"    @Override","lastModifiedDate":"2022-10-22"},{"lineNumber":138,"author":{"gitId":"WingKei67"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2022-10-22"},{"lineNumber":139,"author":{"gitId":"WingKei67"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2022-10-22"},{"lineNumber":140,"author":{"gitId":"guanzhou03"},"content":"        updateFilteredPersonList(HiddenPredicateSingleton.getInstance().getCurrPersonPredicate());","lastModifiedDate":"2022-11-05"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-10-22"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":146,"author":{"gitId":"WingKei67"},"content":"     * Returns an unmodifiable view of the list of {@code Person}","lastModifiedDate":"2022-10-22"},{"lineNumber":147,"author":{"gitId":"WingKei67"},"content":"     * in ascending order by name backed by the internal list of","lastModifiedDate":"2022-10-22"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":149,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":150,"author":{"gitId":"pwjj2000"},"content":"     * @return Unmodifiable filtered list of person.","lastModifiedDate":"2022-11-06"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        return filteredPersons;","lastModifiedDate":"2022-10-22"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":163,"author":{"gitId":"WingKei67"},"content":"    @Override","lastModifiedDate":"2022-10-22"},{"lineNumber":164,"author":{"gitId":"WingKei67"},"content":"    public void updatePersonComparator(Comparator\u003cPerson\u003e comparator) {","lastModifiedDate":"2022-10-22"},{"lineNumber":165,"author":{"gitId":"WingKei67"},"content":"        requireNonNull(comparator);","lastModifiedDate":"2022-10-22"},{"lineNumber":166,"author":{"gitId":"WingKei67"},"content":"        addressBook.sortPersons(comparator);","lastModifiedDate":"2022-10-22"},{"lineNumber":167,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-22"},{"lineNumber":168,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":169,"author":{"gitId":"pwjj2000"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Appointment List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-10-06"},{"lineNumber":170,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":171,"author":{"gitId":"pwjj2000"},"content":"    /**","lastModifiedDate":"2022-10-06"},{"lineNumber":172,"author":{"gitId":"WingKei67"},"content":"     * Returns an unmodifiable view of the list of {@code Appointment}","lastModifiedDate":"2022-10-22"},{"lineNumber":173,"author":{"gitId":"WingKei67"},"content":"     * in ascending order by datetime backed by the internal list of","lastModifiedDate":"2022-10-22"},{"lineNumber":174,"author":{"gitId":"pwjj2000"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2022-10-06"},{"lineNumber":175,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":176,"author":{"gitId":"pwjj2000"},"content":"     * @return Unmodifiable filtered list of appointments.","lastModifiedDate":"2022-11-06"},{"lineNumber":177,"author":{"gitId":"pwjj2000"},"content":"     */","lastModifiedDate":"2022-10-06"},{"lineNumber":178,"author":{"gitId":"pwjj2000"},"content":"    @Override","lastModifiedDate":"2022-10-06"},{"lineNumber":179,"author":{"gitId":"pwjj2000"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2022-10-06"},{"lineNumber":180,"author":{"gitId":"WingKei67"},"content":"        return filteredAppointments;","lastModifiedDate":"2022-10-22"},{"lineNumber":181,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":182,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":183,"author":{"gitId":"pwjj2000"},"content":"    @Override","lastModifiedDate":"2022-10-06"},{"lineNumber":184,"author":{"gitId":"pwjj2000"},"content":"    public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {","lastModifiedDate":"2022-10-06"},{"lineNumber":185,"author":{"gitId":"pwjj2000"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2022-10-06"},{"lineNumber":186,"author":{"gitId":"pwjj2000"},"content":"        filteredAppointments.setPredicate(predicate);","lastModifiedDate":"2022-10-06"},{"lineNumber":187,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":188,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":189,"author":{"gitId":"WingKei67"},"content":"    @Override","lastModifiedDate":"2022-10-22"},{"lineNumber":190,"author":{"gitId":"WingKei67"},"content":"    public void updateAppointmentComparator(Comparator\u003cAppointment\u003e comparator) {","lastModifiedDate":"2022-10-22"},{"lineNumber":191,"author":{"gitId":"WingKei67"},"content":"        requireNonNull(comparator);","lastModifiedDate":"2022-10-22"},{"lineNumber":192,"author":{"gitId":"WingKei67"},"content":"        addressBook.sortAppointments(comparator);","lastModifiedDate":"2022-10-22"},{"lineNumber":193,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-22"},{"lineNumber":194,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":195,"author":{"gitId":"JovonLim"},"content":"    @Override","lastModifiedDate":"2022-11-06"},{"lineNumber":196,"author":{"gitId":"JovonLim"},"content":"    public void updateFilteredLists(Predicate\u003cPerson\u003e predicate, Predicate\u003cAppointment\u003e appointmentPredicate) {","lastModifiedDate":"2022-11-06"},{"lineNumber":197,"author":{"gitId":"JovonLim"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2022-11-06"},{"lineNumber":198,"author":{"gitId":"JovonLim"},"content":"        requireNonNull(appointmentPredicate);","lastModifiedDate":"2022-11-06"},{"lineNumber":199,"author":{"gitId":"JovonLim"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2022-11-06"},{"lineNumber":200,"author":{"gitId":"JovonLim"},"content":"        filteredAppointments.setPredicate(appointmentPredicate);","lastModifiedDate":"2022-11-06"},{"lineNumber":201,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-11-06"},{"lineNumber":202,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)","lastModifiedDate":"2019-01-25"},{"lineNumber":218,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)","lastModifiedDate":"2018-11-27"},{"lineNumber":219,"author":{"gitId":"JovonLim"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons)","lastModifiedDate":"2022-10-09"},{"lineNumber":220,"author":{"gitId":"JovonLim"},"content":"                \u0026\u0026 filteredAppointments.equals(other.filteredAppointments);","lastModifiedDate":"2022-10-09"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":223,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"WingKei67":21,"JovonLim":22,"-":144,"pwjj2000":29,"guanzhou03":7}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {","lastModifiedDate":"2019-01-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list.","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":19,"author":{"gitId":"pwjj2000"},"content":"    ObservableList\u003cAppointment\u003e getAppointmentList();","lastModifiedDate":"2022-10-06"},{"lineNumber":20,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":17,"pwjj2000":4}},{"path":"src/main/java/seedu/address/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2018-11-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"    Path getCommandHistoryFilePath();","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"JovonLim":2,"-":16}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"idENTify.json\");","lastModifiedDate":"2022-10-25"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"    private Path commandHistoryFilePath \u003d Paths.get(\"data\", \"commandHistory.json\");","lastModifiedDate":"2022-10-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":28,"author":{"gitId":"pwjj2000"},"content":"     * @param userPrefs Given user preferences.","lastModifiedDate":"2022-11-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":38,"author":{"gitId":"pwjj2000"},"content":"     * @param newUserPrefs User preferences to be changed into.","lastModifiedDate":"2022-11-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-12-06"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"        setCommandHistoryFilePath(newUserPrefs.getCommandHistoryFilePath());","lastModifiedDate":"2022-10-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":65,"author":{"gitId":"JovonLim"},"content":"    public Path getCommandHistoryFilePath() {","lastModifiedDate":"2022-10-21"},{"lineNumber":66,"author":{"gitId":"JovonLim"},"content":"        return commandHistoryFilePath;","lastModifiedDate":"2022-10-21"},{"lineNumber":67,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":68,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":69,"author":{"gitId":"JovonLim"},"content":"    public void setCommandHistoryFilePath(Path commandHistoryFilePath) {","lastModifiedDate":"2022-10-21"},{"lineNumber":70,"author":{"gitId":"JovonLim"},"content":"        requireNonNull(commandHistoryFilePath);","lastModifiedDate":"2022-10-21"},{"lineNumber":71,"author":{"gitId":"JovonLim"},"content":"        this.commandHistoryFilePath \u003d commandHistoryFilePath;","lastModifiedDate":"2022-10-21"},{"lineNumber":72,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":73,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath);","lastModifiedDate":"2018-08-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"JovonLim":12,"-":86,"pwjj2000":4}},{"path":"src/main/java/seedu/address/model/person/Address.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s address in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Address {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param address A valid address.","lastModifiedDate":"2017-05-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Address(String address) {","lastModifiedDate":"2017-05-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"WingKei67"},"content":"        if (!address.isEmpty()) {","lastModifiedDate":"2022-10-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":31,"author":{"gitId":"WingKei67"},"content":"        }","lastModifiedDate":"2022-10-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        value \u003d address;","lastModifiedDate":"2018-08-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":37,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":38,"author":{"gitId":"pwjj2000"},"content":"     * @return Whether given address is valid.","lastModifiedDate":"2022-11-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static boolean isValidAddress(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                || (other instanceof Address // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Address) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"WingKei67":2,"-":57,"pwjj2000":2}},{"path":"src/main/java/seedu/address/model/person/Appointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.model.person;","lastModifiedDate":"2022-10-01"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":3,"author":{"gitId":"pwjj2000"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-08"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-10-01"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-01"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-10-01"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"import java.time.format.DateTimeFormatterBuilder;","lastModifiedDate":"2022-10-01"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-10-01"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-14"},{"lineNumber":11,"author":{"gitId":"pwjj2000"},"content":"import java.util.HashSet;","lastModifiedDate":"2022-10-21"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"import java.util.List;","lastModifiedDate":"2022-10-14"},{"lineNumber":13,"author":{"gitId":"pwjj2000"},"content":"import java.util.Set;","lastModifiedDate":"2022-10-21"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"import java.util.function.Consumer;","lastModifiedDate":"2022-10-15"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"import java.util.function.Function;","lastModifiedDate":"2022-10-15"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2022-10-14"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2022-10-14"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2022-10-14"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2022-10-14"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"import javafx.beans.Observable;","lastModifiedDate":"2022-10-11"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"import javafx.beans.property.SimpleBooleanProperty;","lastModifiedDate":"2022-10-11"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"import javafx.beans.property.SimpleObjectProperty;","lastModifiedDate":"2022-10-11"},{"lineNumber":24,"author":{"gitId":"WingKei67"},"content":"import seedu.address.model.Key;","lastModifiedDate":"2022-10-24"},{"lineNumber":25,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2022-10-21"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"/**","lastModifiedDate":"2022-10-01"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":" * Represents the patient\u0027s appointments\u0027 details.","lastModifiedDate":"2022-10-01"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":" */","lastModifiedDate":"2022-10-01"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"public class Appointment {","lastModifiedDate":"2022-10-01"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"    public static final String REASON_MESSAGE_CONSTRAINTS \u003d \"Reason should not be empty\";","lastModifiedDate":"2022-10-01"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"    public static final String DATE_MESSAGE_CONSTRAINTS \u003d \"Date should contain YYYY-MM-DD and HH:MM values\";","lastModifiedDate":"2022-10-01"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"    public static final String TIME_PERIOD_MESSAGE_CONSTRAINTS \u003d \"Time Period should contain valid Y M or D values, \"","lastModifiedDate":"2022-11-01"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"            + \"in the order of Y -\u003e M -\u003e D\";","lastModifiedDate":"2022-11-01"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"    public static final DateTimeFormatter DATE_FORMATTER \u003d","lastModifiedDate":"2022-10-01"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"            new DateTimeFormatterBuilder().appendOptional(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"))","lastModifiedDate":"2022-10-01"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"                    .appendOptional(DateTimeFormatter.ofPattern(\"HH:mm yyyy-MM-dd\")).toFormatter();","lastModifiedDate":"2022-10-01"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"    public static final DateTimeFormatter STORAGE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2022-10-01"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"    // Solution adapted from https://stackoverflow.com/a/31791657","lastModifiedDate":"2022-10-26"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"    private static final Pattern TIME_PERIOD_FORMAT \u003d Pattern.compile(\"^(?\u003cyear\u003e\\\\s*([0-9]|10)Y)?\"","lastModifiedDate":"2022-10-14"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"            + \"(?\u003cmonth\u003e\\\\s*([0-9]|1[0-2])M)?(?\u003cday\u003e\\\\s*([0-9]|[1-2][0-9]|3[0-1])D)?\\\\s*$\");","lastModifiedDate":"2022-10-14"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"    private final String reason;","lastModifiedDate":"2022-10-14"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"    private final LocalDateTime dateTime;","lastModifiedDate":"2022-10-14"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"    private final List\u003cInteger\u003e timePeriod;","lastModifiedDate":"2022-10-14"},{"lineNumber":46,"author":{"gitId":"pwjj2000"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2022-10-21"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"    private final SimpleBooleanProperty isMarked;","lastModifiedDate":"2022-10-11"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"    private final SimpleObjectProperty\u003cPerson\u003e patient \u003d new SimpleObjectProperty\u003c\u003e();","lastModifiedDate":"2022-10-14"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"    private final DateTimeFormatter stringFormatter \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\");","lastModifiedDate":"2022-10-01"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":52,"author":{"gitId":"pwjj2000"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":53,"author":{"gitId":"pwjj2000"},"content":"     * Creates an appointment object with the given reason, dateTime, timePeriod string, and status.","lastModifiedDate":"2022-10-21"},{"lineNumber":54,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-10-21"},{"lineNumber":55,"author":{"gitId":"pwjj2000"},"content":"     * @param reason The given reason for appointment.","lastModifiedDate":"2022-10-21"},{"lineNumber":56,"author":{"gitId":"pwjj2000"},"content":"     * @param dateTime The given time to book the appointment.","lastModifiedDate":"2022-10-21"},{"lineNumber":57,"author":{"gitId":"pwjj2000"},"content":"     * @param timePeriod The given time period for the next appointment.","lastModifiedDate":"2022-10-21"},{"lineNumber":58,"author":{"gitId":"pwjj2000"},"content":"     * @param isMarked Status of the appointment.","lastModifiedDate":"2022-10-21"},{"lineNumber":59,"author":{"gitId":"pwjj2000"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":60,"author":{"gitId":"pwjj2000"},"content":"    public Appointment(String reason, String dateTime, String timePeriod, boolean isMarked) {","lastModifiedDate":"2022-10-21"},{"lineNumber":61,"author":{"gitId":"pwjj2000"},"content":"        checkValidity(reason, dateTime, timePeriod);","lastModifiedDate":"2022-10-21"},{"lineNumber":62,"author":{"gitId":"pwjj2000"},"content":"        this.reason \u003d reason;","lastModifiedDate":"2022-10-21"},{"lineNumber":63,"author":{"gitId":"pwjj2000"},"content":"        String str \u003d String.join(\" \", dateTime.split(\"\\\\s+\", 2));","lastModifiedDate":"2022-10-21"},{"lineNumber":64,"author":{"gitId":"pwjj2000"},"content":"        this.dateTime \u003d LocalDateTime.parse(str, DATE_FORMATTER);","lastModifiedDate":"2022-10-21"},{"lineNumber":65,"author":{"gitId":"pwjj2000"},"content":"        this.timePeriod \u003d parseTimePeriod(timePeriod);","lastModifiedDate":"2022-10-21"},{"lineNumber":66,"author":{"gitId":"pwjj2000"},"content":"        this.isMarked \u003d new SimpleBooleanProperty(isMarked);","lastModifiedDate":"2022-10-21"},{"lineNumber":67,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":68,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":69,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":70,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":71,"author":{"gitId":"JovonLim"},"content":"     * Creates an appointment object with the given reason, dateTime, timePeriod string, and status.","lastModifiedDate":"2022-10-14"},{"lineNumber":72,"author":{"gitId":"JovonLim"},"content":"     *","lastModifiedDate":"2022-10-01"},{"lineNumber":73,"author":{"gitId":"JovonLim"},"content":"     * @param reason The given reason for appointment.","lastModifiedDate":"2022-10-01"},{"lineNumber":74,"author":{"gitId":"JovonLim"},"content":"     * @param dateTime The given time to book the appointment.","lastModifiedDate":"2022-10-01"},{"lineNumber":75,"author":{"gitId":"JovonLim"},"content":"     * @param timePeriod The given time period for the next appointment.","lastModifiedDate":"2022-10-14"},{"lineNumber":76,"author":{"gitId":"pwjj2000"},"content":"     * @param tags The given tag for the appointment.","lastModifiedDate":"2022-10-21"},{"lineNumber":77,"author":{"gitId":"NicholasTYD"},"content":"     * @param isMarked Status of the appointment.","lastModifiedDate":"2022-10-02"},{"lineNumber":78,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":79,"author":{"gitId":"pwjj2000"},"content":"    public Appointment(String reason, String dateTime, String timePeriod, Set\u003cTag\u003e tags, boolean isMarked) {","lastModifiedDate":"2022-10-21"},{"lineNumber":80,"author":{"gitId":"JovonLim"},"content":"        checkValidity(reason, dateTime, timePeriod);","lastModifiedDate":"2022-10-14"},{"lineNumber":81,"author":{"gitId":"JovonLim"},"content":"        this.reason \u003d reason;","lastModifiedDate":"2022-10-14"},{"lineNumber":82,"author":{"gitId":"JovonLim"},"content":"        String str \u003d String.join(\" \", dateTime.split(\"\\\\s+\", 2));","lastModifiedDate":"2022-10-01"},{"lineNumber":83,"author":{"gitId":"JovonLim"},"content":"        this.dateTime \u003d LocalDateTime.parse(str, DATE_FORMATTER);","lastModifiedDate":"2022-10-14"},{"lineNumber":84,"author":{"gitId":"JovonLim"},"content":"        this.timePeriod \u003d parseTimePeriod(timePeriod);","lastModifiedDate":"2022-10-14"},{"lineNumber":85,"author":{"gitId":"JovonLim"},"content":"        this.isMarked \u003d new SimpleBooleanProperty(isMarked);","lastModifiedDate":"2022-10-11"},{"lineNumber":86,"author":{"gitId":"pwjj2000"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2022-10-21"},{"lineNumber":87,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":88,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":89,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-08"},{"lineNumber":90,"author":{"gitId":"JovonLim"},"content":"     * Creates an appointment object with the given reason, dateTime, timePeriod and status.","lastModifiedDate":"2022-10-14"},{"lineNumber":91,"author":{"gitId":"JovonLim"},"content":"     *","lastModifiedDate":"2022-10-08"},{"lineNumber":92,"author":{"gitId":"JovonLim"},"content":"     * @param reason The given reason for appointment.","lastModifiedDate":"2022-10-08"},{"lineNumber":93,"author":{"gitId":"JovonLim"},"content":"     * @param dateTime The given time to book the appointment.","lastModifiedDate":"2022-10-08"},{"lineNumber":94,"author":{"gitId":"JovonLim"},"content":"     * @param timePeriod The given time period for the next appointment.","lastModifiedDate":"2022-10-14"},{"lineNumber":95,"author":{"gitId":"JovonLim"},"content":"     * @param isMarked Status of the appointment.","lastModifiedDate":"2022-10-08"},{"lineNumber":96,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-08"},{"lineNumber":97,"author":{"gitId":"JovonLim"},"content":"    public Appointment(String reason, LocalDateTime dateTime, List\u003cInteger\u003e timePeriod, boolean isMarked) {","lastModifiedDate":"2022-10-14"},{"lineNumber":98,"author":{"gitId":"JovonLim"},"content":"        this.reason \u003d reason;","lastModifiedDate":"2022-10-14"},{"lineNumber":99,"author":{"gitId":"JovonLim"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2022-10-14"},{"lineNumber":100,"author":{"gitId":"JovonLim"},"content":"        this.timePeriod \u003d timePeriod;","lastModifiedDate":"2022-10-14"},{"lineNumber":101,"author":{"gitId":"JovonLim"},"content":"        this.isMarked \u003d new SimpleBooleanProperty(isMarked);","lastModifiedDate":"2022-10-11"},{"lineNumber":102,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":103,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":104,"author":{"gitId":"pwjj2000"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":105,"author":{"gitId":"pwjj2000"},"content":"     * Creates an appointment object with the given reason, dateTime, timePeriod and status.","lastModifiedDate":"2022-10-21"},{"lineNumber":106,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-10-21"},{"lineNumber":107,"author":{"gitId":"pwjj2000"},"content":"     * @param reason The given reason for appointment.","lastModifiedDate":"2022-10-21"},{"lineNumber":108,"author":{"gitId":"pwjj2000"},"content":"     * @param dateTime The given time to book the appointment.","lastModifiedDate":"2022-10-21"},{"lineNumber":109,"author":{"gitId":"pwjj2000"},"content":"     * @param timePeriod The given time period for the next appointment.","lastModifiedDate":"2022-10-21"},{"lineNumber":110,"author":{"gitId":"pwjj2000"},"content":"     * @param tags The given tag for the appointment","lastModifiedDate":"2022-10-21"},{"lineNumber":111,"author":{"gitId":"pwjj2000"},"content":"     * @param isMarked Status of the appointment.","lastModifiedDate":"2022-10-21"},{"lineNumber":112,"author":{"gitId":"pwjj2000"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":113,"author":{"gitId":"pwjj2000"},"content":"    public Appointment(String reason, LocalDateTime dateTime, List\u003cInteger\u003e timePeriod,","lastModifiedDate":"2022-10-21"},{"lineNumber":114,"author":{"gitId":"pwjj2000"},"content":"                       Set\u003cTag\u003e tags, boolean isMarked) {","lastModifiedDate":"2022-10-21"},{"lineNumber":115,"author":{"gitId":"pwjj2000"},"content":"        this.reason \u003d reason;","lastModifiedDate":"2022-10-21"},{"lineNumber":116,"author":{"gitId":"pwjj2000"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2022-10-21"},{"lineNumber":117,"author":{"gitId":"pwjj2000"},"content":"        this.timePeriod \u003d timePeriod;","lastModifiedDate":"2022-10-21"},{"lineNumber":118,"author":{"gitId":"pwjj2000"},"content":"        this.isMarked \u003d new SimpleBooleanProperty(isMarked);","lastModifiedDate":"2022-10-21"},{"lineNumber":119,"author":{"gitId":"pwjj2000"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2022-10-21"},{"lineNumber":120,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":121,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":122,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-14"},{"lineNumber":123,"author":{"gitId":"JovonLim"},"content":"     * Creates an appointment object with a new dateTime using the given timePeriod of the recurring appointment.","lastModifiedDate":"2022-10-14"},{"lineNumber":124,"author":{"gitId":"JovonLim"},"content":"     *","lastModifiedDate":"2022-10-14"},{"lineNumber":125,"author":{"gitId":"JovonLim"},"content":"     * @param recurringAppointment The appointment given that will occur again.","lastModifiedDate":"2022-10-14"},{"lineNumber":126,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-14"},{"lineNumber":127,"author":{"gitId":"JovonLim"},"content":"    public Appointment(Appointment recurringAppointment) {","lastModifiedDate":"2022-10-14"},{"lineNumber":128,"author":{"gitId":"JovonLim"},"content":"        this.reason \u003d recurringAppointment.getReason();","lastModifiedDate":"2022-10-14"},{"lineNumber":129,"author":{"gitId":"JovonLim"},"content":"        this.dateTime \u003d incrementDateTime(recurringAppointment.getDateTime(), recurringAppointment.getTimePeriod());","lastModifiedDate":"2022-10-14"},{"lineNumber":130,"author":{"gitId":"JovonLim"},"content":"        this.timePeriod \u003d recurringAppointment.getTimePeriod();","lastModifiedDate":"2022-10-14"},{"lineNumber":131,"author":{"gitId":"pwjj2000"},"content":"        this.tags.addAll(recurringAppointment.tags);","lastModifiedDate":"2022-10-21"},{"lineNumber":132,"author":{"gitId":"JovonLim"},"content":"        this.isMarked \u003d new SimpleBooleanProperty(false);","lastModifiedDate":"2022-10-14"},{"lineNumber":133,"author":{"gitId":"JovonLim"},"content":"        this.patient.set(recurringAppointment.getPatient());","lastModifiedDate":"2022-10-14"},{"lineNumber":134,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":135,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":136,"author":{"gitId":"JovonLim"},"content":"    private LocalDateTime incrementDateTime(LocalDateTime dateTime, List\u003cInteger\u003e timePeriod) {","lastModifiedDate":"2022-10-14"},{"lineNumber":137,"author":{"gitId":"JovonLim"},"content":"        LocalDateTime nextDateTime;","lastModifiedDate":"2022-10-14"},{"lineNumber":138,"author":{"gitId":"JovonLim"},"content":"        nextDateTime \u003d dateTime.plusYears(timePeriod.get(0));","lastModifiedDate":"2022-10-14"},{"lineNumber":139,"author":{"gitId":"JovonLim"},"content":"        nextDateTime \u003d nextDateTime.plusMonths(timePeriod.get(1));","lastModifiedDate":"2022-10-14"},{"lineNumber":140,"author":{"gitId":"JovonLim"},"content":"        nextDateTime \u003d nextDateTime.plusDays(timePeriod.get(2));","lastModifiedDate":"2022-10-14"},{"lineNumber":141,"author":{"gitId":"JovonLim"},"content":"        return nextDateTime;","lastModifiedDate":"2022-10-14"},{"lineNumber":142,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":143,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":144,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":145,"author":{"gitId":"JovonLim"},"content":"    private void checkValidity(String reason, String dateTime, String timePeriod) {","lastModifiedDate":"2022-10-14"},{"lineNumber":146,"author":{"gitId":"JovonLim"},"content":"        requireNonNull(reason);","lastModifiedDate":"2022-10-14"},{"lineNumber":147,"author":{"gitId":"JovonLim"},"content":"        requireNonNull(dateTime);","lastModifiedDate":"2022-10-14"},{"lineNumber":148,"author":{"gitId":"JovonLim"},"content":"        checkArgument(isValidReason(reason), REASON_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-14"},{"lineNumber":149,"author":{"gitId":"JovonLim"},"content":"        checkArgument(isValidDateTime(dateTime), DATE_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-14"},{"lineNumber":150,"author":{"gitId":"JovonLim"},"content":"        checkArgument(isValidTimePeriod(timePeriod), TIME_PERIOD_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-14"},{"lineNumber":151,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":152,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":153,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-14"},{"lineNumber":154,"author":{"gitId":"JovonLim"},"content":"     * Parses the given timePeriod string into a list of integers depicting the values of year, month and day.","lastModifiedDate":"2022-10-14"},{"lineNumber":155,"author":{"gitId":"JovonLim"},"content":"     *","lastModifiedDate":"2022-10-14"},{"lineNumber":156,"author":{"gitId":"JovonLim"},"content":"     * @param timePeriod The given timePeriod string.","lastModifiedDate":"2022-10-14"},{"lineNumber":157,"author":{"gitId":"JovonLim"},"content":"     * @return A list of integers consisting the number of years, months and days to add.","lastModifiedDate":"2022-10-14"},{"lineNumber":158,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-14"},{"lineNumber":159,"author":{"gitId":"JovonLim"},"content":"    public static List\u003cInteger\u003e parseTimePeriod(String timePeriod) {","lastModifiedDate":"2022-10-14"},{"lineNumber":160,"author":{"gitId":"JovonLim"},"content":"        List\u003cInteger\u003e list \u003d Arrays.asList(0, 0, 0);","lastModifiedDate":"2022-10-14"},{"lineNumber":161,"author":{"gitId":"JovonLim"},"content":"        final Matcher matcher \u003d TIME_PERIOD_FORMAT.matcher(timePeriod);","lastModifiedDate":"2022-10-14"},{"lineNumber":162,"author":{"gitId":"JovonLim"},"content":"        if (timePeriod.isEmpty() || !matcher.matches()) {","lastModifiedDate":"2022-10-15"},{"lineNumber":163,"author":{"gitId":"JovonLim"},"content":"            return list;","lastModifiedDate":"2022-10-14"},{"lineNumber":164,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-14"},{"lineNumber":165,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":166,"author":{"gitId":"JovonLim"},"content":"        Function\u003cString, String\u003e f \u003d x -\u003e x \u003d\u003d null ? \"\" : x.trim();","lastModifiedDate":"2022-10-15"},{"lineNumber":167,"author":{"gitId":"JovonLim"},"content":"        List\u003cString\u003e durations \u003d Stream.of(matcher.group(\"year\"), matcher.group(\"month\"),","lastModifiedDate":"2022-10-14"},{"lineNumber":168,"author":{"gitId":"JovonLim"},"content":"                matcher.group(\"day\")).map(f).collect(Collectors.toList());","lastModifiedDate":"2022-10-15"},{"lineNumber":169,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":170,"author":{"gitId":"JovonLim"},"content":"        Consumer\u003cString\u003e c \u003d x -\u003e {","lastModifiedDate":"2022-10-15"},{"lineNumber":171,"author":{"gitId":"JovonLim"},"content":"            if (!x.isEmpty()) {","lastModifiedDate":"2022-10-14"},{"lineNumber":172,"author":{"gitId":"JovonLim"},"content":"                list.set(durations.indexOf(x), Integer.parseInt(x.substring(0, x.length() - 1)));","lastModifiedDate":"2022-10-14"},{"lineNumber":173,"author":{"gitId":"JovonLim"},"content":"            }","lastModifiedDate":"2022-10-14"},{"lineNumber":174,"author":{"gitId":"JovonLim"},"content":"        };","lastModifiedDate":"2022-10-15"},{"lineNumber":175,"author":{"gitId":"JovonLim"},"content":"        durations.forEach(c);","lastModifiedDate":"2022-10-15"},{"lineNumber":176,"author":{"gitId":"JovonLim"},"content":"        return list;","lastModifiedDate":"2022-10-14"},{"lineNumber":177,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":178,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":179,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":180,"author":{"gitId":"JovonLim"},"content":"     * Checks whether the given appointment has the same time.","lastModifiedDate":"2022-10-01"},{"lineNumber":181,"author":{"gitId":"JovonLim"},"content":"     *","lastModifiedDate":"2022-10-01"},{"lineNumber":182,"author":{"gitId":"JovonLim"},"content":"     * @param other The given appointment.","lastModifiedDate":"2022-10-01"},{"lineNumber":183,"author":{"gitId":"JovonLim"},"content":"     * @return The result of the equals test.","lastModifiedDate":"2022-10-01"},{"lineNumber":184,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":185,"author":{"gitId":"JovonLim"},"content":"    public boolean isSameTime(Appointment other) {","lastModifiedDate":"2022-10-01"},{"lineNumber":186,"author":{"gitId":"JovonLim"},"content":"        return other.dateTime.equals(dateTime);","lastModifiedDate":"2022-10-14"},{"lineNumber":187,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":188,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":189,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":190,"author":{"gitId":"JovonLim"},"content":"     * Checks whether the given string is a valid reason.","lastModifiedDate":"2022-10-01"},{"lineNumber":191,"author":{"gitId":"JovonLim"},"content":"     *","lastModifiedDate":"2022-10-01"},{"lineNumber":192,"author":{"gitId":"JovonLim"},"content":"     * @param test The string to test.","lastModifiedDate":"2022-10-01"},{"lineNumber":193,"author":{"gitId":"JovonLim"},"content":"     * @return The result of the equals test.","lastModifiedDate":"2022-10-01"},{"lineNumber":194,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":195,"author":{"gitId":"JovonLim"},"content":"    public static boolean isValidReason(String test) {","lastModifiedDate":"2022-10-01"},{"lineNumber":196,"author":{"gitId":"JovonLim"},"content":"        return !test.equals(\"\");","lastModifiedDate":"2022-10-01"},{"lineNumber":197,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":198,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":199,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":200,"author":{"gitId":"JovonLim"},"content":"     * Checks whether the given string is a valid DateTime.","lastModifiedDate":"2022-10-01"},{"lineNumber":201,"author":{"gitId":"JovonLim"},"content":"     *","lastModifiedDate":"2022-10-01"},{"lineNumber":202,"author":{"gitId":"JovonLim"},"content":"     * @param test The string to test.","lastModifiedDate":"2022-10-01"},{"lineNumber":203,"author":{"gitId":"JovonLim"},"content":"     * @return The result of the LocalDateTime parse test.","lastModifiedDate":"2022-10-01"},{"lineNumber":204,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":205,"author":{"gitId":"JovonLim"},"content":"    public static boolean isValidDateTime(String test) {","lastModifiedDate":"2022-10-01"},{"lineNumber":206,"author":{"gitId":"JovonLim"},"content":"        try {","lastModifiedDate":"2022-10-01"},{"lineNumber":207,"author":{"gitId":"JovonLim"},"content":"            String str \u003d String.join(\" \", test.split(\"\\\\s+\", 2));","lastModifiedDate":"2022-10-01"},{"lineNumber":208,"author":{"gitId":"JovonLim"},"content":"            LocalDateTime.parse(str, DATE_FORMATTER);","lastModifiedDate":"2022-10-01"},{"lineNumber":209,"author":{"gitId":"JovonLim"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-10-01"},{"lineNumber":210,"author":{"gitId":"JovonLim"},"content":"            return false;","lastModifiedDate":"2022-10-01"},{"lineNumber":211,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":212,"author":{"gitId":"JovonLim"},"content":"        return true;","lastModifiedDate":"2022-10-01"},{"lineNumber":213,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":214,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":215,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-14"},{"lineNumber":216,"author":{"gitId":"JovonLim"},"content":"     * Checks whether the given string is a valid timePeriod.","lastModifiedDate":"2022-10-14"},{"lineNumber":217,"author":{"gitId":"JovonLim"},"content":"     *","lastModifiedDate":"2022-10-14"},{"lineNumber":218,"author":{"gitId":"JovonLim"},"content":"     * @param test The string to test.","lastModifiedDate":"2022-10-14"},{"lineNumber":219,"author":{"gitId":"JovonLim"},"content":"     * @return The result of the matcher test.","lastModifiedDate":"2022-10-14"},{"lineNumber":220,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-14"},{"lineNumber":221,"author":{"gitId":"JovonLim"},"content":"    public static boolean isValidTimePeriod(String test) {","lastModifiedDate":"2022-10-14"},{"lineNumber":222,"author":{"gitId":"JovonLim"},"content":"        final Matcher matcher \u003d TIME_PERIOD_FORMAT.matcher(test.trim());","lastModifiedDate":"2022-10-14"},{"lineNumber":223,"author":{"gitId":"JovonLim"},"content":"        return test.isEmpty() || matcher.matches();","lastModifiedDate":"2022-10-14"},{"lineNumber":224,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":225,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":226,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":227,"author":{"gitId":"JovonLim"},"content":"    public LocalDateTime getDateTime() {","lastModifiedDate":"2022-10-03"},{"lineNumber":228,"author":{"gitId":"JovonLim"},"content":"        return dateTime;","lastModifiedDate":"2022-10-14"},{"lineNumber":229,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":230,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":231,"author":{"gitId":"JovonLim"},"content":"    public List\u003cInteger\u003e getTimePeriod() {","lastModifiedDate":"2022-10-14"},{"lineNumber":232,"author":{"gitId":"JovonLim"},"content":"        return timePeriod;","lastModifiedDate":"2022-10-14"},{"lineNumber":233,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":234,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":235,"author":{"gitId":"pwjj2000"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2022-10-21"},{"lineNumber":236,"author":{"gitId":"pwjj2000"},"content":"        return tags;","lastModifiedDate":"2022-10-21"},{"lineNumber":237,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":238,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":239,"author":{"gitId":"pwjj2000"},"content":"    public String getFormattedDateTime() {","lastModifiedDate":"2022-10-06"},{"lineNumber":240,"author":{"gitId":"JovonLim"},"content":"        return dateTime.format(stringFormatter);","lastModifiedDate":"2022-10-14"},{"lineNumber":241,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":242,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":243,"author":{"gitId":"JovonLim"},"content":"    public String getFormattedPeriod() {","lastModifiedDate":"2022-10-14"},{"lineNumber":244,"author":{"gitId":"JovonLim"},"content":"        String str \u003d \"%sY%sM%sD\";","lastModifiedDate":"2022-10-14"},{"lineNumber":245,"author":{"gitId":"JovonLim"},"content":"        str \u003d String.format(str, timePeriod.get(0), timePeriod.get(1), timePeriod.get(2));","lastModifiedDate":"2022-10-14"},{"lineNumber":246,"author":{"gitId":"JovonLim"},"content":"        return str;","lastModifiedDate":"2022-10-14"},{"lineNumber":247,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":248,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":249,"author":{"gitId":"JovonLim"},"content":"    public String getReason() {","lastModifiedDate":"2022-10-03"},{"lineNumber":250,"author":{"gitId":"JovonLim"},"content":"        return reason;","lastModifiedDate":"2022-10-14"},{"lineNumber":251,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":252,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":253,"author":{"gitId":"NicholasTYD"},"content":"    public boolean isMarked() {","lastModifiedDate":"2022-10-02"},{"lineNumber":254,"author":{"gitId":"JovonLim"},"content":"        return isMarked.get();","lastModifiedDate":"2022-10-11"},{"lineNumber":255,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":256,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":257,"author":{"gitId":"NicholasTYD"},"content":"    public void mark() {","lastModifiedDate":"2022-10-02"},{"lineNumber":258,"author":{"gitId":"JovonLim"},"content":"        this.isMarked.set(true);","lastModifiedDate":"2022-10-11"},{"lineNumber":259,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":260,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":261,"author":{"gitId":"NicholasTYD"},"content":"    public void unmark() {","lastModifiedDate":"2022-10-02"},{"lineNumber":262,"author":{"gitId":"JovonLim"},"content":"        this.isMarked.set(false);","lastModifiedDate":"2022-10-11"},{"lineNumber":263,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":264,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":265,"author":{"gitId":"pwjj2000"},"content":"    public void setPatient(Person patient) {","lastModifiedDate":"2022-10-06"},{"lineNumber":266,"author":{"gitId":"JovonLim"},"content":"        this.patient.set(patient);","lastModifiedDate":"2022-10-11"},{"lineNumber":267,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":268,"author":{"gitId":"WingKei67"},"content":"    public int getMarked() {","lastModifiedDate":"2022-10-25"},{"lineNumber":269,"author":{"gitId":"WingKei67"},"content":"        return this.isMarked.get() ? 1 : 0;","lastModifiedDate":"2022-10-25"},{"lineNumber":270,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-25"},{"lineNumber":271,"author":{"gitId":"NicholasTYD"},"content":"    public Person getPatient() {","lastModifiedDate":"2022-10-10"},{"lineNumber":272,"author":{"gitId":"JovonLim"},"content":"        return patient.get();","lastModifiedDate":"2022-10-11"},{"lineNumber":273,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":274,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":275,"author":{"gitId":"pwjj2000"},"content":"    public String getPatientName() {","lastModifiedDate":"2022-10-06"},{"lineNumber":276,"author":{"gitId":"JovonLim"},"content":"        return this.patient.get().getName().fullName;","lastModifiedDate":"2022-10-11"},{"lineNumber":277,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":278,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":279,"author":{"gitId":"pwjj2000"},"content":"    public String getStatus() {","lastModifiedDate":"2022-10-06"},{"lineNumber":280,"author":{"gitId":"pwjj2000"},"content":"        return \"[\" + getStateIcon() + \"]\";","lastModifiedDate":"2022-10-06"},{"lineNumber":281,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":282,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":283,"author":{"gitId":"JovonLim"},"content":"    @Override","lastModifiedDate":"2022-10-01"},{"lineNumber":284,"author":{"gitId":"JovonLim"},"content":"    public String toString() {","lastModifiedDate":"2022-10-01"},{"lineNumber":285,"author":{"gitId":"WingKei67"},"content":"        String withoutTags \u003d getStatus() + \" \" + getFormattedDateTime() + \" for \" + reason","lastModifiedDate":"2022-11-01"},{"lineNumber":286,"author":{"gitId":"JovonLim"},"content":"                + \" \" + getRecurringStatus();","lastModifiedDate":"2022-10-24"},{"lineNumber":287,"author":{"gitId":"WingKei67"},"content":"        if (getTags().isEmpty()) {","lastModifiedDate":"2022-11-01"},{"lineNumber":288,"author":{"gitId":"WingKei67"},"content":"            return withoutTags;","lastModifiedDate":"2022-11-01"},{"lineNumber":289,"author":{"gitId":"WingKei67"},"content":"        }","lastModifiedDate":"2022-11-01"},{"lineNumber":290,"author":{"gitId":"WingKei67"},"content":"        return withoutTags + \" with tags: \" + getTags();","lastModifiedDate":"2022-11-01"},{"lineNumber":291,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":292,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":293,"author":{"gitId":"NicholasTYD"},"content":"    private String getStateIcon() {","lastModifiedDate":"2022-10-02"},{"lineNumber":294,"author":{"gitId":"guanzhou03"},"content":"        String markedIcon \u003d \"X\";","lastModifiedDate":"2022-10-26"},{"lineNumber":295,"author":{"gitId":"guanzhou03"},"content":"        String unmarkedIcon \u003d \" \";","lastModifiedDate":"2022-10-26"},{"lineNumber":296,"author":{"gitId":"JovonLim"},"content":"        return isMarked.get() ? markedIcon : unmarkedIcon;","lastModifiedDate":"2022-10-11"},{"lineNumber":297,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":298,"author":{"gitId":"JovonLim"},"content":"    public String getRecurringStatus() {","lastModifiedDate":"2022-10-14"},{"lineNumber":299,"author":{"gitId":"JovonLim"},"content":"        String nonRecurring \u003d \"Non-recurring\";","lastModifiedDate":"2022-10-24"},{"lineNumber":300,"author":{"gitId":"JovonLim"},"content":"        String recurring \u003d \"Recurring every \";","lastModifiedDate":"2022-10-24"},{"lineNumber":301,"author":{"gitId":"JovonLim"},"content":"        List\u003cString\u003e datesList \u003d List.of(\" year\" , \" month\", \" day\");","lastModifiedDate":"2022-10-14"},{"lineNumber":302,"author":{"gitId":"JovonLim"},"content":"        if (timePeriod.stream().allMatch(x -\u003e x.equals(0))) {","lastModifiedDate":"2022-10-14"},{"lineNumber":303,"author":{"gitId":"JovonLim"},"content":"            return nonRecurring;","lastModifiedDate":"2022-10-14"},{"lineNumber":304,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-14"},{"lineNumber":305,"author":{"gitId":"JovonLim"},"content":"        for (int i \u003d 0; i \u003c timePeriod.size(); i++) {","lastModifiedDate":"2022-10-14"},{"lineNumber":306,"author":{"gitId":"JovonLim"},"content":"            Integer digit \u003d timePeriod.get(i);","lastModifiedDate":"2022-10-14"},{"lineNumber":307,"author":{"gitId":"JovonLim"},"content":"            if (!digit.equals(0)) {","lastModifiedDate":"2022-10-14"},{"lineNumber":308,"author":{"gitId":"JovonLim"},"content":"                recurring +\u003d digit.equals(1) ? digit + datesList.get(i) + \" \" : digit + datesList.get(i) + \"s \";","lastModifiedDate":"2022-10-14"},{"lineNumber":309,"author":{"gitId":"JovonLim"},"content":"            }","lastModifiedDate":"2022-10-14"},{"lineNumber":310,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-14"},{"lineNumber":311,"author":{"gitId":"JovonLim"},"content":"        return recurring;","lastModifiedDate":"2022-10-14"},{"lineNumber":312,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":313,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":314,"author":{"gitId":"WingKei67"},"content":"    /**","lastModifiedDate":"2022-10-22"},{"lineNumber":315,"author":{"gitId":"WingKei67"},"content":"     * Returns the group number where this appointment belongs to, which is determined","lastModifiedDate":"2022-10-22"},{"lineNumber":316,"author":{"gitId":"WingKei67"},"content":"     * by its tags.","lastModifiedDate":"2022-10-22"},{"lineNumber":317,"author":{"gitId":"WingKei67"},"content":"     *","lastModifiedDate":"2022-10-22"},{"lineNumber":318,"author":{"gitId":"pwjj2000"},"content":"     * @return Group that the appointment belongs to.","lastModifiedDate":"2022-11-06"},{"lineNumber":319,"author":{"gitId":"WingKei67"},"content":"     */","lastModifiedDate":"2022-10-22"},{"lineNumber":320,"author":{"gitId":"WingKei67"},"content":"    public int getGroupNumber() {","lastModifiedDate":"2022-10-24"},{"lineNumber":321,"author":{"gitId":"WingKei67"},"content":"        Set\u003cTag\u003e tags \u003d this.getTags();","lastModifiedDate":"2022-10-24"},{"lineNumber":322,"author":{"gitId":"WingKei67"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2022-10-24"},{"lineNumber":323,"author":{"gitId":"WingKei67"},"content":"            return 0;","lastModifiedDate":"2022-10-22"},{"lineNumber":324,"author":{"gitId":"WingKei67"},"content":"        }","lastModifiedDate":"2022-10-22"},{"lineNumber":325,"author":{"gitId":"WingKei67"},"content":"        int value \u003d 0;","lastModifiedDate":"2022-10-22"},{"lineNumber":326,"author":{"gitId":"WingKei67"},"content":"        for (Tag tag: tags) {","lastModifiedDate":"2022-10-24"},{"lineNumber":327,"author":{"gitId":"WingKei67"},"content":"            value +\u003d tag.ordinal();","lastModifiedDate":"2022-10-24"},{"lineNumber":328,"author":{"gitId":"WingKei67"},"content":"        }","lastModifiedDate":"2022-10-22"},{"lineNumber":329,"author":{"gitId":"WingKei67"},"content":"        if (tags.size() \u003d\u003d 1) {","lastModifiedDate":"2022-10-24"},{"lineNumber":330,"author":{"gitId":"WingKei67"},"content":"            return value + 1;","lastModifiedDate":"2022-10-24"},{"lineNumber":331,"author":{"gitId":"WingKei67"},"content":"        }","lastModifiedDate":"2022-10-24"},{"lineNumber":332,"author":{"gitId":"WingKei67"},"content":"        if (tags.size() \u003d\u003d 2) {","lastModifiedDate":"2022-10-24"},{"lineNumber":333,"author":{"gitId":"WingKei67"},"content":"            return value + 3;","lastModifiedDate":"2022-10-24"},{"lineNumber":334,"author":{"gitId":"WingKei67"},"content":"        }","lastModifiedDate":"2022-10-24"},{"lineNumber":335,"author":{"gitId":"WingKei67"},"content":"        return value + 4;","lastModifiedDate":"2022-10-24"},{"lineNumber":336,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-22"},{"lineNumber":337,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":338,"author":{"gitId":"WingKei67"},"content":"    /**","lastModifiedDate":"2022-10-22"},{"lineNumber":339,"author":{"gitId":"WingKei67"},"content":"     * Returns -1 if this appointment appears before the other appointment, and","lastModifiedDate":"2022-10-22"},{"lineNumber":340,"author":{"gitId":"WingKei67"},"content":"     * returns 0 if this appointment has the same order as the other appointment, and","lastModifiedDate":"2022-10-22"},{"lineNumber":341,"author":{"gitId":"WingKei67"},"content":"     * returns 1 if this appointment appears after the other appointment.","lastModifiedDate":"2022-10-22"},{"lineNumber":342,"author":{"gitId":"WingKei67"},"content":"     *","lastModifiedDate":"2022-10-22"},{"lineNumber":343,"author":{"gitId":"WingKei67"},"content":"     * @param appointment The other appointment to compare with.","lastModifiedDate":"2022-10-22"},{"lineNumber":344,"author":{"gitId":"pwjj2000"},"content":"     * @return Relative positioning of this appointment and given appointment.","lastModifiedDate":"2022-11-06"},{"lineNumber":345,"author":{"gitId":"WingKei67"},"content":"     */","lastModifiedDate":"2022-10-22"},{"lineNumber":346,"author":{"gitId":"WingKei67"},"content":"    public int compareTo(Appointment appointment) {","lastModifiedDate":"2022-10-22"},{"lineNumber":347,"author":{"gitId":"WingKei67"},"content":"        return this.dateTime.isBefore(appointment.dateTime)","lastModifiedDate":"2022-10-22"},{"lineNumber":348,"author":{"gitId":"WingKei67"},"content":"                ? -1","lastModifiedDate":"2022-10-22"},{"lineNumber":349,"author":{"gitId":"WingKei67"},"content":"                : this.dateTime.isAfter(appointment.dateTime)","lastModifiedDate":"2022-10-22"},{"lineNumber":350,"author":{"gitId":"WingKei67"},"content":"                ? 1","lastModifiedDate":"2022-10-22"},{"lineNumber":351,"author":{"gitId":"WingKei67"},"content":"                : this.getPatient().compareTo(appointment.getPatient());","lastModifiedDate":"2022-10-25"},{"lineNumber":352,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-22"},{"lineNumber":353,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":354,"author":{"gitId":"WingKei67"},"content":"    /**","lastModifiedDate":"2022-10-22"},{"lineNumber":355,"author":{"gitId":"WingKei67"},"content":"     * Returns 10 * group difference -1 if this appointment appears before the other appointment, and","lastModifiedDate":"2022-10-22"},{"lineNumber":356,"author":{"gitId":"WingKei67"},"content":"     * returns 10 * group difference if this appointment has the same order as the other appointment, and","lastModifiedDate":"2022-10-22"},{"lineNumber":357,"author":{"gitId":"WingKei67"},"content":"     * returns 10 * group difference + 1 if this appointment appears after the other appointment. This method","lastModifiedDate":"2022-10-22"},{"lineNumber":358,"author":{"gitId":"WingKei67"},"content":"     * makes sure that appointments with the same tag group are grouped together.","lastModifiedDate":"2022-10-22"},{"lineNumber":359,"author":{"gitId":"WingKei67"},"content":"     *","lastModifiedDate":"2022-10-22"},{"lineNumber":360,"author":{"gitId":"WingKei67"},"content":"     * @param appointment The other person to compare with.","lastModifiedDate":"2022-10-22"},{"lineNumber":361,"author":{"gitId":"pwjj2000"},"content":"     * @return Relative positioning of this appointment and given appointment after accounting grouping.","lastModifiedDate":"2022-11-06"},{"lineNumber":362,"author":{"gitId":"WingKei67"},"content":"     */","lastModifiedDate":"2022-10-22"},{"lineNumber":363,"author":{"gitId":"WingKei67"},"content":"    public int groupCompareTo(Appointment appointment, Key key) {","lastModifiedDate":"2022-10-24"},{"lineNumber":364,"author":{"gitId":"WingKei67"},"content":"        int tagWeight \u003d 10;","lastModifiedDate":"2022-10-24"},{"lineNumber":365,"author":{"gitId":"WingKei67"},"content":"        int personWeight \u003d 10;","lastModifiedDate":"2022-10-24"},{"lineNumber":366,"author":{"gitId":"WingKei67"},"content":"        int markWeight \u003d 10;","lastModifiedDate":"2022-10-25"},{"lineNumber":367,"author":{"gitId":"WingKei67"},"content":"        int dateWeight \u003d 1;","lastModifiedDate":"2022-10-24"},{"lineNumber":368,"author":{"gitId":"WingKei67"},"content":"        if (key.equals(Key.TAG)) {","lastModifiedDate":"2022-10-24"},{"lineNumber":369,"author":{"gitId":"WingKei67"},"content":"            return tagWeight * (this.getGroupNumber() - appointment.getGroupNumber())","lastModifiedDate":"2022-10-24"},{"lineNumber":370,"author":{"gitId":"WingKei67"},"content":"                    + dateWeight * this.compareTo(appointment);","lastModifiedDate":"2022-10-24"},{"lineNumber":371,"author":{"gitId":"WingKei67"},"content":"        } else if (key.equals(Key.PATIENT)) {","lastModifiedDate":"2022-10-25"},{"lineNumber":372,"author":{"gitId":"WingKei67"},"content":"            return personWeight * this.getPatientName().compareTo(appointment.getPatientName())","lastModifiedDate":"2022-10-24"},{"lineNumber":373,"author":{"gitId":"WingKei67"},"content":"                    + dateWeight + this.compareTo(appointment);","lastModifiedDate":"2022-10-24"},{"lineNumber":374,"author":{"gitId":"WingKei67"},"content":"        } else {","lastModifiedDate":"2022-10-25"},{"lineNumber":375,"author":{"gitId":"WingKei67"},"content":"            return markWeight * Integer.compare(this.getMarked(), appointment.getMarked())","lastModifiedDate":"2022-10-25"},{"lineNumber":376,"author":{"gitId":"WingKei67"},"content":"                    + dateWeight + this.compareTo(appointment);","lastModifiedDate":"2022-10-25"},{"lineNumber":377,"author":{"gitId":"WingKei67"},"content":"        }","lastModifiedDate":"2022-10-24"},{"lineNumber":378,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-22"},{"lineNumber":379,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":380,"author":{"gitId":"JovonLim"},"content":"    @Override","lastModifiedDate":"2022-10-01"},{"lineNumber":381,"author":{"gitId":"JovonLim"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-01"},{"lineNumber":382,"author":{"gitId":"JovonLim"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-01"},{"lineNumber":383,"author":{"gitId":"JovonLim"},"content":"            return true;","lastModifiedDate":"2022-10-01"},{"lineNumber":384,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":385,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":386,"author":{"gitId":"JovonLim"},"content":"        if (!(other instanceof Appointment)) {","lastModifiedDate":"2022-10-01"},{"lineNumber":387,"author":{"gitId":"JovonLim"},"content":"            return false;","lastModifiedDate":"2022-10-01"},{"lineNumber":388,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":389,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":390,"author":{"gitId":"JovonLim"},"content":"        Appointment otherAppointment \u003d (Appointment) other;","lastModifiedDate":"2022-10-01"},{"lineNumber":391,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":392,"author":{"gitId":"JovonLim"},"content":"        return otherAppointment.patient.get().getName().equals(patient.get().getName())","lastModifiedDate":"2022-10-11"},{"lineNumber":393,"author":{"gitId":"JovonLim"},"content":"                \u0026\u0026 otherAppointment.reason.equals(reason)","lastModifiedDate":"2022-10-14"},{"lineNumber":394,"author":{"gitId":"JovonLim"},"content":"                \u0026\u0026 otherAppointment.dateTime.equals(dateTime)","lastModifiedDate":"2022-10-14"},{"lineNumber":395,"author":{"gitId":"JovonLim"},"content":"                \u0026\u0026 otherAppointment.timePeriod.equals(timePeriod)","lastModifiedDate":"2022-10-14"},{"lineNumber":396,"author":{"gitId":"JovonLim"},"content":"                \u0026\u0026 (otherAppointment.isMarked.get() \u003d\u003d isMarked.get());","lastModifiedDate":"2022-10-11"},{"lineNumber":397,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":398,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":399,"author":{"gitId":"pwjj2000"},"content":"    /**","lastModifiedDate":"2022-10-06"},{"lineNumber":400,"author":{"gitId":"JovonLim"},"content":"     * Returns true if both appointments have the same reason, dateTime, timePeriod and status.","lastModifiedDate":"2022-10-14"},{"lineNumber":401,"author":{"gitId":"pwjj2000"},"content":"     * This defines a weaker notion of equality between two appointments.","lastModifiedDate":"2022-10-06"},{"lineNumber":402,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":403,"author":{"gitId":"pwjj2000"},"content":"     * @return whether this appointment is same as given appointment.","lastModifiedDate":"2022-11-06"},{"lineNumber":404,"author":{"gitId":"pwjj2000"},"content":"     */","lastModifiedDate":"2022-10-06"},{"lineNumber":405,"author":{"gitId":"pwjj2000"},"content":"    public boolean isSameAppointment(Appointment appointment) {","lastModifiedDate":"2022-10-06"},{"lineNumber":406,"author":{"gitId":"JovonLim"},"content":"        return appointment.reason.equals(reason)","lastModifiedDate":"2022-10-14"},{"lineNumber":407,"author":{"gitId":"JovonLim"},"content":"                \u0026\u0026 appointment.dateTime.equals(dateTime)","lastModifiedDate":"2022-10-14"},{"lineNumber":408,"author":{"gitId":"JovonLim"},"content":"                \u0026\u0026 appointment.timePeriod.equals(timePeriod)","lastModifiedDate":"2022-10-14"},{"lineNumber":409,"author":{"gitId":"JovonLim"},"content":"                \u0026\u0026 (appointment.isMarked.get() \u003d\u003d isMarked.get());","lastModifiedDate":"2022-10-11"},{"lineNumber":410,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":411,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":412,"author":{"gitId":"JovonLim"},"content":"    public Observable[] getProperties() {","lastModifiedDate":"2022-10-11"},{"lineNumber":413,"author":{"gitId":"JovonLim"},"content":"        return new Observable[] {isMarked, patient};","lastModifiedDate":"2022-10-14"},{"lineNumber":414,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":415,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-01"}],"authorContributionMap":{"NicholasTYD":16,"JovonLim":253,"WingKei67":73,"pwjj2000":71,"guanzhou03":2}},{"path":"src/main/java/seedu/address/model/person/Email.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s email in the address book.","lastModifiedDate":"2018-02-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Email {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private static final String SPECIAL_CHARACTERS \u003d \"+_.-\";","lastModifiedDate":"2021-07-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \"","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"and adhere to the following constraints:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \"","lastModifiedDate":"2018-02-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \"). The local-part may not start or end with any special \"","lastModifiedDate":"2021-07-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"characters.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. The domain name is made up of domain labels \"","lastModifiedDate":"2021-07-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"separated by periods.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"The domain name must:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"    - end with a domain label at least 2 characters long\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"    - have each domain label start and end with alphanumeric characters\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"    - have each domain label consist of alphanumeric characters, separated only by hyphens, if any.\";","lastModifiedDate":"2021-07-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // alphanumeric and special characters","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String ALPHANUMERIC_NO_UNDERSCORE \u003d \"[^\\\\W_]+\"; // alphanumeric characters except underscore","lastModifiedDate":"2021-07-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^\" + ALPHANUMERIC_NO_UNDERSCORE + \"([\" + SPECIAL_CHARACTERS + \"]\"","lastModifiedDate":"2021-07-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_PART_REGEX \u003d ALPHANUMERIC_NO_UNDERSCORE","lastModifiedDate":"2021-07-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + \"(-\" + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_LAST_PART_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"){2,}$\"; // At least two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"\\\\.)*\" + DOMAIN_LAST_PART_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\" + DOMAIN_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Constructs an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @param email A valid email address.","lastModifiedDate":"2017-05-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Email(String email) {","lastModifiedDate":"2017-05-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-15"},{"lineNumber":43,"author":{"gitId":"WingKei67"},"content":"        if (!email.isEmpty()) {","lastModifiedDate":"2022-10-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":45,"author":{"gitId":"WingKei67"},"content":"        }","lastModifiedDate":"2022-10-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        value \u003d email;","lastModifiedDate":"2018-08-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Returns if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":51,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":52,"author":{"gitId":"pwjj2000"},"content":"     * @return Whether given email is valid.","lastModifiedDate":"2022-11-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static boolean isValidEmail(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                || (other instanceof Email // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Email) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"WingKei67":2,"-":71,"pwjj2000":2}},{"path":"src/main/java/seedu/address/model/person/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s name in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Name {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2018-04-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public final String fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2017-05-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param name A valid name.","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Name(String name) {","lastModifiedDate":"2017-05-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        fullName \u003d name;","lastModifiedDate":"2018-08-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2018-04-05"},{"lineNumber":36,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":37,"author":{"gitId":"pwjj2000"},"content":"     * @return Whether given name is valid.","lastModifiedDate":"2022-11-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"WingKei67"},"content":"    /**","lastModifiedDate":"2022-10-22"},{"lineNumber":44,"author":{"gitId":"WingKei67"},"content":"     * Returns -1 if this name appears before the other name, and","lastModifiedDate":"2022-10-22"},{"lineNumber":45,"author":{"gitId":"WingKei67"},"content":"     * returns 0 if this name has the same order as the other name, and","lastModifiedDate":"2022-10-22"},{"lineNumber":46,"author":{"gitId":"WingKei67"},"content":"     * returns 1 if this name appears after the other name.","lastModifiedDate":"2022-10-22"},{"lineNumber":47,"author":{"gitId":"WingKei67"},"content":"     *","lastModifiedDate":"2022-10-22"},{"lineNumber":48,"author":{"gitId":"WingKei67"},"content":"     * @param name The other name to compare with.","lastModifiedDate":"2022-10-22"},{"lineNumber":49,"author":{"gitId":"pwjj2000"},"content":"     * @return Relative positioning of this name compared to the given name.","lastModifiedDate":"2022-11-06"},{"lineNumber":50,"author":{"gitId":"WingKei67"},"content":"     */","lastModifiedDate":"2022-10-22"},{"lineNumber":51,"author":{"gitId":"WingKei67"},"content":"    public int compareTo(Name name) {","lastModifiedDate":"2022-10-22"},{"lineNumber":52,"author":{"gitId":"WingKei67"},"content":"        return this.fullName.compareTo(name.fullName);","lastModifiedDate":"2022-10-22"},{"lineNumber":53,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-22"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                || (other instanceof Name // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return fullName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"WingKei67":10,"-":59,"pwjj2000":3}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import java.util.Comparator;","lastModifiedDate":"2022-10-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"import java.util.List;","lastModifiedDate":"2022-10-01"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"import javafx.beans.Observable;","lastModifiedDate":"2022-10-11"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2022-10-11"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"import javafx.collections.ListChangeListener;","lastModifiedDate":"2022-10-11"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-10-11"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"import javafx.util.Callback;","lastModifiedDate":"2022-10-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"    private final Callback\u003cAppointment, Observable[]\u003e extractor \u003d Appointment::getProperties;","lastModifiedDate":"2022-10-11"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"    private final ObservableList\u003cAppointment\u003e appointments \u003d FXCollections.observableArrayList(extractor);","lastModifiedDate":"2022-10-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-11-06"},{"lineNumber":37,"author":{"gitId":"pwjj2000"},"content":"     * Constructor for a person.","lastModifiedDate":"2022-11-06"},{"lineNumber":38,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":39,"author":{"gitId":"pwjj2000"},"content":"     * @param name Name of the person.","lastModifiedDate":"2022-11-06"},{"lineNumber":40,"author":{"gitId":"pwjj2000"},"content":"     * @param phone Phone number of the person.","lastModifiedDate":"2022-11-06"},{"lineNumber":41,"author":{"gitId":"pwjj2000"},"content":"     * @param email Email of the person.","lastModifiedDate":"2022-11-06"},{"lineNumber":42,"author":{"gitId":"pwjj2000"},"content":"     * @param address Address of the person.","lastModifiedDate":"2022-11-06"},{"lineNumber":43,"author":{"gitId":"pwjj2000"},"content":"     * @param listOfAppointments Appointments that the person has.","lastModifiedDate":"2022-11-06"},{"lineNumber":44,"author":{"gitId":"pwjj2000"},"content":"     * @param tags Tags associated with the person.","lastModifiedDate":"2022-11-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"JovonLim"},"content":"    public Person(Name name, Phone phone, Email email, Address address, List\u003cAppointment\u003e listOfAppointments,","lastModifiedDate":"2022-10-01"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"                  Set\u003cTag\u003e tags) {","lastModifiedDate":"2022-10-01"},{"lineNumber":48,"author":{"gitId":"WingKei67"},"content":"        requireAllNonNull(name, phone, email, address, listOfAppointments);","lastModifiedDate":"2022-10-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":53,"author":{"gitId":"JovonLim"},"content":"        this.appointments.addAll(listOfAppointments);","lastModifiedDate":"2022-10-11"},{"lineNumber":54,"author":{"gitId":"NicholasTYD"},"content":"        for (Appointment appointment : listOfAppointments) {","lastModifiedDate":"2022-10-26"},{"lineNumber":55,"author":{"gitId":"NicholasTYD"},"content":"            if (appointment.getPatient() !\u003d this) {","lastModifiedDate":"2022-10-26"},{"lineNumber":56,"author":{"gitId":"NicholasTYD"},"content":"                appointment.setPatient(this);","lastModifiedDate":"2022-10-26"},{"lineNumber":57,"author":{"gitId":"NicholasTYD"},"content":"            }","lastModifiedDate":"2022-10-26"},{"lineNumber":58,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-26"},{"lineNumber":59,"author":{"gitId":"JovonLim"},"content":"        this.appointments.addListener((ListChangeListener\u003cAppointment\u003e) c -\u003e {","lastModifiedDate":"2022-10-11"},{"lineNumber":60,"author":{"gitId":"JovonLim"},"content":"            while (c.next()) {","lastModifiedDate":"2022-10-11"},{"lineNumber":61,"author":{"gitId":"JovonLim"},"content":"                if (c.wasUpdated()) {","lastModifiedDate":"2022-10-11"},{"lineNumber":62,"author":{"gitId":"JovonLim"},"content":"                    appointments.sort(Comparator.comparing(Appointment::getDateTime));","lastModifiedDate":"2022-10-11"},{"lineNumber":63,"author":{"gitId":"JovonLim"},"content":"                }","lastModifiedDate":"2022-10-11"},{"lineNumber":64,"author":{"gitId":"JovonLim"},"content":"                if (c.wasAdded()) {","lastModifiedDate":"2022-10-11"},{"lineNumber":65,"author":{"gitId":"JovonLim"},"content":"                    appointments.sort(Comparator.comparing(Appointment::getDateTime));","lastModifiedDate":"2022-10-11"},{"lineNumber":66,"author":{"gitId":"JovonLim"},"content":"                }","lastModifiedDate":"2022-10-11"},{"lineNumber":67,"author":{"gitId":"JovonLim"},"content":"            }","lastModifiedDate":"2022-10-11"},{"lineNumber":68,"author":{"gitId":"JovonLim"},"content":"        });","lastModifiedDate":"2022-10-11"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":88,"author":{"gitId":"JovonLim"},"content":"    public List\u003cAppointment\u003e getAppointments() {","lastModifiedDate":"2022-10-01"},{"lineNumber":89,"author":{"gitId":"JovonLim"},"content":"        return appointments;","lastModifiedDate":"2022-10-11"},{"lineNumber":90,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":91,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":95,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":96,"author":{"gitId":"pwjj2000"},"content":"     * @return Set of tags associated with the person.","lastModifiedDate":"2022-11-06"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name.","lastModifiedDate":"2020-12-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":105,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":106,"author":{"gitId":"pwjj2000"},"content":"     * @return Whether this person is same as the given person.","lastModifiedDate":"2022-11-06"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":114,"author":{"gitId":"WingKei67"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName())","lastModifiedDate":"2022-10-25"},{"lineNumber":115,"author":{"gitId":"WingKei67"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone());","lastModifiedDate":"2022-10-25"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":118,"author":{"gitId":"JovonLim"},"content":"    private String getAppointmentsString() {","lastModifiedDate":"2022-10-15"},{"lineNumber":119,"author":{"gitId":"JovonLim"},"content":"        String str \u003d \"Currently has %s upcoming \";","lastModifiedDate":"2022-10-26"},{"lineNumber":120,"author":{"gitId":"JovonLim"},"content":"        int num \u003d 0;","lastModifiedDate":"2022-10-26"},{"lineNumber":121,"author":{"gitId":"JovonLim"},"content":"        for (Appointment appts : appointments) {","lastModifiedDate":"2022-10-26"},{"lineNumber":122,"author":{"gitId":"JovonLim"},"content":"            if (!appts.isMarked()) {","lastModifiedDate":"2022-10-26"},{"lineNumber":123,"author":{"gitId":"JovonLim"},"content":"                num +\u003d 1;","lastModifiedDate":"2022-10-26"},{"lineNumber":124,"author":{"gitId":"JovonLim"},"content":"            }","lastModifiedDate":"2022-10-26"},{"lineNumber":125,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-26"},{"lineNumber":126,"author":{"gitId":"JovonLim"},"content":"        str \u003d String.format(str, num);","lastModifiedDate":"2022-10-26"},{"lineNumber":127,"author":{"gitId":"JovonLim"},"content":"        str +\u003d num \u003d\u003d 1 ? \"appointment\" : \"appointments\";","lastModifiedDate":"2022-10-26"},{"lineNumber":128,"author":{"gitId":"JovonLim"},"content":"        return str;","lastModifiedDate":"2022-10-15"},{"lineNumber":129,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":130,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":131,"author":{"gitId":"JovonLim"},"content":"    public String getParticulars() {","lastModifiedDate":"2022-10-15"},{"lineNumber":132,"author":{"gitId":"JovonLim"},"content":"        String str \u003d phone.value;","lastModifiedDate":"2022-10-15"},{"lineNumber":133,"author":{"gitId":"JovonLim"},"content":"        if (!address.value.isEmpty()) {","lastModifiedDate":"2022-10-15"},{"lineNumber":134,"author":{"gitId":"JovonLim"},"content":"            str +\u003d \"\\n\" + address.value;","lastModifiedDate":"2022-10-15"},{"lineNumber":135,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-15"},{"lineNumber":136,"author":{"gitId":"JovonLim"},"content":"        if (!email.value.isEmpty()) {","lastModifiedDate":"2022-10-15"},{"lineNumber":137,"author":{"gitId":"JovonLim"},"content":"            str +\u003d \"\\n\" + email.value;","lastModifiedDate":"2022-10-15"},{"lineNumber":138,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-15"},{"lineNumber":139,"author":{"gitId":"JovonLim"},"content":"        str +\u003d \"\\n\" + getAppointmentsString();","lastModifiedDate":"2022-10-15"},{"lineNumber":140,"author":{"gitId":"JovonLim"},"content":"        return str;","lastModifiedDate":"2022-10-15"},{"lineNumber":141,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":142,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":143,"author":{"gitId":"JovonLim"},"content":"    public Observable getApptsProperty() {","lastModifiedDate":"2022-10-11"},{"lineNumber":144,"author":{"gitId":"JovonLim"},"content":"        return appointments;","lastModifiedDate":"2022-10-11"},{"lineNumber":145,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":146,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":147,"author":{"gitId":"WingKei67"},"content":"    /**","lastModifiedDate":"2022-10-22"},{"lineNumber":148,"author":{"gitId":"WingKei67"},"content":"     * Returns -1 if this person appears before the other person, and","lastModifiedDate":"2022-10-22"},{"lineNumber":149,"author":{"gitId":"WingKei67"},"content":"     * returns 0 if this person has the same order as the other person, and","lastModifiedDate":"2022-10-22"},{"lineNumber":150,"author":{"gitId":"WingKei67"},"content":"     * returns 1 if this person appears after the other person.","lastModifiedDate":"2022-10-22"},{"lineNumber":151,"author":{"gitId":"WingKei67"},"content":"     *","lastModifiedDate":"2022-10-22"},{"lineNumber":152,"author":{"gitId":"WingKei67"},"content":"     * @param person The other person to compare with.","lastModifiedDate":"2022-10-22"},{"lineNumber":153,"author":{"gitId":"pwjj2000"},"content":"     * @return Relative positioning of this person compared to the given person.","lastModifiedDate":"2022-11-06"},{"lineNumber":154,"author":{"gitId":"WingKei67"},"content":"     */","lastModifiedDate":"2022-10-22"},{"lineNumber":155,"author":{"gitId":"WingKei67"},"content":"    public int compareTo(Person person) {","lastModifiedDate":"2022-10-22"},{"lineNumber":156,"author":{"gitId":"WingKei67"},"content":"        return this.getName().compareTo(person.getName()) \u003c 0","lastModifiedDate":"2022-10-22"},{"lineNumber":157,"author":{"gitId":"WingKei67"},"content":"                ? -1","lastModifiedDate":"2022-10-22"},{"lineNumber":158,"author":{"gitId":"WingKei67"},"content":"                : this.getName().compareTo(person.getName()) \u003e 0","lastModifiedDate":"2022-10-22"},{"lineNumber":159,"author":{"gitId":"WingKei67"},"content":"                ? 1","lastModifiedDate":"2022-10-22"},{"lineNumber":160,"author":{"gitId":"WingKei67"},"content":"                : this.getPhone().compareTo(person.getPhone());","lastModifiedDate":"2022-10-25"},{"lineNumber":161,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-22"},{"lineNumber":162,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":163,"author":{"gitId":"WingKei67"},"content":"    /**","lastModifiedDate":"2022-10-22"},{"lineNumber":164,"author":{"gitId":"WingKei67"},"content":"     * Returns the group number where this person belongs to, which is determined","lastModifiedDate":"2022-10-22"},{"lineNumber":165,"author":{"gitId":"WingKei67"},"content":"     * by its tags.","lastModifiedDate":"2022-10-22"},{"lineNumber":166,"author":{"gitId":"WingKei67"},"content":"     *","lastModifiedDate":"2022-10-22"},{"lineNumber":167,"author":{"gitId":"pwjj2000"},"content":"     * @return Group that the person belongs to.","lastModifiedDate":"2022-11-06"},{"lineNumber":168,"author":{"gitId":"WingKei67"},"content":"     */","lastModifiedDate":"2022-10-22"},{"lineNumber":169,"author":{"gitId":"WingKei67"},"content":"    public int getGroupNumber() {","lastModifiedDate":"2022-10-24"},{"lineNumber":170,"author":{"gitId":"WingKei67"},"content":"        Set\u003cTag\u003e tags \u003d this.getTags();","lastModifiedDate":"2022-10-24"},{"lineNumber":171,"author":{"gitId":"WingKei67"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2022-10-24"},{"lineNumber":172,"author":{"gitId":"WingKei67"},"content":"            return 0;","lastModifiedDate":"2022-10-22"},{"lineNumber":173,"author":{"gitId":"WingKei67"},"content":"        }","lastModifiedDate":"2022-10-22"},{"lineNumber":174,"author":{"gitId":"WingKei67"},"content":"        int value \u003d 0;","lastModifiedDate":"2022-10-22"},{"lineNumber":175,"author":{"gitId":"WingKei67"},"content":"        for (Tag tag: tags) {","lastModifiedDate":"2022-10-24"},{"lineNumber":176,"author":{"gitId":"WingKei67"},"content":"            value +\u003d tag.ordinal();","lastModifiedDate":"2022-10-24"},{"lineNumber":177,"author":{"gitId":"WingKei67"},"content":"        }","lastModifiedDate":"2022-10-22"},{"lineNumber":178,"author":{"gitId":"WingKei67"},"content":"        if (tags.size() \u003d\u003d 1) {","lastModifiedDate":"2022-10-24"},{"lineNumber":179,"author":{"gitId":"WingKei67"},"content":"            return value + 1;","lastModifiedDate":"2022-10-24"},{"lineNumber":180,"author":{"gitId":"WingKei67"},"content":"        }","lastModifiedDate":"2022-10-24"},{"lineNumber":181,"author":{"gitId":"WingKei67"},"content":"        if (tags.size() \u003d\u003d 2) {","lastModifiedDate":"2022-10-24"},{"lineNumber":182,"author":{"gitId":"WingKei67"},"content":"            return value + 3;","lastModifiedDate":"2022-10-24"},{"lineNumber":183,"author":{"gitId":"WingKei67"},"content":"        }","lastModifiedDate":"2022-10-24"},{"lineNumber":184,"author":{"gitId":"WingKei67"},"content":"        return value + 4;","lastModifiedDate":"2022-10-24"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-10-22"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-10-22"},{"lineNumber":188,"author":{"gitId":"WingKei67"},"content":"     * Returns 10 * group difference -1 if this person appears before the other person, and","lastModifiedDate":"2022-10-22"},{"lineNumber":189,"author":{"gitId":"WingKei67"},"content":"     * returns 10 * group difference if this person has the same order as the other person, and","lastModifiedDate":"2022-10-22"},{"lineNumber":190,"author":{"gitId":"WingKei67"},"content":"     * returns 10 * group difference + 1 if this person appears after the other person. This method","lastModifiedDate":"2022-10-22"},{"lineNumber":191,"author":{"gitId":"WingKei67"},"content":"     * makes sure that people with the same tag group are grouped together.","lastModifiedDate":"2022-10-22"},{"lineNumber":192,"author":{"gitId":"WingKei67"},"content":"     *","lastModifiedDate":"2022-10-22"},{"lineNumber":193,"author":{"gitId":"WingKei67"},"content":"     * @param person The other person to compare with.","lastModifiedDate":"2022-10-22"},{"lineNumber":194,"author":{"gitId":"pwjj2000"},"content":"     * @return Relative positioning of this person compared to given person after accounting for grouping.","lastModifiedDate":"2022-11-06"},{"lineNumber":195,"author":{"gitId":"WingKei67"},"content":"     */","lastModifiedDate":"2022-10-22"},{"lineNumber":196,"author":{"gitId":"WingKei67"},"content":"    public int groupCompareTo(Person person) {","lastModifiedDate":"2022-10-22"},{"lineNumber":197,"author":{"gitId":"WingKei67"},"content":"        int tagWeight \u003d 10;","lastModifiedDate":"2022-10-24"},{"lineNumber":198,"author":{"gitId":"WingKei67"},"content":"        int nameWeight \u003d 1;","lastModifiedDate":"2022-10-24"},{"lineNumber":199,"author":{"gitId":"WingKei67"},"content":"        return tagWeight * (this.getGroupNumber() - person.getGroupNumber())","lastModifiedDate":"2022-10-24"},{"lineNumber":200,"author":{"gitId":"WingKei67"},"content":"            + nameWeight * this.compareTo(person);","lastModifiedDate":"2022-10-24"},{"lineNumber":201,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-22"},{"lineNumber":202,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":203,"author":{"gitId":"pwjj2000"},"content":"    /*","lastModifiedDate":"2022-11-06"},{"lineNumber":204,"author":{"gitId":"pwjj2000"},"content":"     Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2022-11-06"},{"lineNumber":205,"author":{"gitId":"pwjj2000"},"content":"     This defines a stronger notion of equality between two persons.","lastModifiedDate":"2022-11-06"},{"lineNumber":206,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())","lastModifiedDate":"2018-08-14"},{"lineNumber":219,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())","lastModifiedDate":"2018-08-14"},{"lineNumber":220,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())","lastModifiedDate":"2018-08-14"},{"lineNumber":221,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())","lastModifiedDate":"2018-08-14"},{"lineNumber":222,"author":{"gitId":"JovonLim"},"content":"                \u0026\u0026 otherPerson.getAppointments().equals(getAppointments())","lastModifiedDate":"2022-10-01"},{"lineNumber":223,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags());","lastModifiedDate":"2018-08-14"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);","lastModifiedDate":"2016-08-24"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        builder.append(getName())","lastModifiedDate":"2018-01-10"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":237,"author":{"gitId":"-"},"content":"                .append(getPhone())","lastModifiedDate":"2018-01-10"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":239,"author":{"gitId":"-"},"content":"                .append(getEmail())","lastModifiedDate":"2018-01-10"},{"lineNumber":240,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":241,"author":{"gitId":"-"},"content":"                .append(getAddress());","lastModifiedDate":"2022-11-01"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();","lastModifiedDate":"2020-12-11"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {","lastModifiedDate":"2020-12-11"},{"lineNumber":245,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");","lastModifiedDate":"2020-12-11"},{"lineNumber":246,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);","lastModifiedDate":"2020-12-11"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-11"},{"lineNumber":248,"author":{"gitId":"WingKei67"},"content":"        builder.append(\"; Appointments: \")","lastModifiedDate":"2022-11-01"},{"lineNumber":249,"author":{"gitId":"WingKei67"},"content":"                .append(getAppointments());","lastModifiedDate":"2022-11-01"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":252,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"NicholasTYD":5,"JovonLim":56,"WingKei67":55,"-":118,"pwjj2000":18}},{"path":"src/main/java/seedu/address/model/person/Phone.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s phone number in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Phone {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";","lastModifiedDate":"2018-04-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";","lastModifiedDate":"2018-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Constructs a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param phone A valid phone number.","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public Phone(String phone) {","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        value \u003d phone;","lastModifiedDate":"2018-08-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid phone number.","lastModifiedDate":"2018-04-05"},{"lineNumber":31,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":32,"author":{"gitId":"pwjj2000"},"content":"     * @return Whether given phone number is valid.","lastModifiedDate":"2022-11-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static boolean isValidPhone(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"WingKei67"},"content":"    /**","lastModifiedDate":"2022-10-25"},{"lineNumber":39,"author":{"gitId":"WingKei67"},"content":"     * Returns -1 if this phone appears before the other phone, and","lastModifiedDate":"2022-10-25"},{"lineNumber":40,"author":{"gitId":"WingKei67"},"content":"     * returns 0 if this phone has the same order as the other phone, and","lastModifiedDate":"2022-10-25"},{"lineNumber":41,"author":{"gitId":"WingKei67"},"content":"     * returns 1 if this phone appears after the other phone.","lastModifiedDate":"2022-10-25"},{"lineNumber":42,"author":{"gitId":"WingKei67"},"content":"     *","lastModifiedDate":"2022-10-25"},{"lineNumber":43,"author":{"gitId":"WingKei67"},"content":"     * @param phone The other person to compare with.","lastModifiedDate":"2022-10-25"},{"lineNumber":44,"author":{"gitId":"pwjj2000"},"content":"     * @return Relative positioning of this phone number compared to the given phone number.","lastModifiedDate":"2022-11-06"},{"lineNumber":45,"author":{"gitId":"WingKei67"},"content":"     */","lastModifiedDate":"2022-10-25"},{"lineNumber":46,"author":{"gitId":"WingKei67"},"content":"    public int compareTo(Phone phone) {","lastModifiedDate":"2022-10-25"},{"lineNumber":47,"author":{"gitId":"WingKei67"},"content":"        return this.value.compareTo(phone.value) \u003c 0","lastModifiedDate":"2022-10-25"},{"lineNumber":48,"author":{"gitId":"WingKei67"},"content":"                ? -1","lastModifiedDate":"2022-10-25"},{"lineNumber":49,"author":{"gitId":"WingKei67"},"content":"                : this.value.compareTo(phone.value) \u003e 0","lastModifiedDate":"2022-10-25"},{"lineNumber":50,"author":{"gitId":"WingKei67"},"content":"                ? 1","lastModifiedDate":"2022-10-25"},{"lineNumber":51,"author":{"gitId":"WingKei67"},"content":"                : 0;","lastModifiedDate":"2022-10-25"},{"lineNumber":52,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-25"},{"lineNumber":53,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Phone) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"WingKei67":15,"-":53,"pwjj2000":3}},{"path":"src/main/java/seedu/address/model/person/UniqueAppointmentList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pwjj2000"},"content":"package seedu.address.model.person;","lastModifiedDate":"2022-10-06"},{"lineNumber":2,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":3,"author":{"gitId":"pwjj2000"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-06"},{"lineNumber":4,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-10-06"},{"lineNumber":5,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.model.Model.COMPARATOR_UNGROUP_APPOINTMENTS;","lastModifiedDate":"2022-10-22"},{"lineNumber":6,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":7,"author":{"gitId":"pwjj2000"},"content":"import java.util.Comparator;","lastModifiedDate":"2022-10-06"},{"lineNumber":8,"author":{"gitId":"pwjj2000"},"content":"import java.util.Iterator;","lastModifiedDate":"2022-10-06"},{"lineNumber":9,"author":{"gitId":"pwjj2000"},"content":"import java.util.List;","lastModifiedDate":"2022-10-06"},{"lineNumber":10,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"import javafx.beans.Observable;","lastModifiedDate":"2022-10-11"},{"lineNumber":12,"author":{"gitId":"pwjj2000"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2022-10-06"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"import javafx.collections.ListChangeListener;","lastModifiedDate":"2022-10-11"},{"lineNumber":14,"author":{"gitId":"pwjj2000"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-10-06"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"import javafx.util.Callback;","lastModifiedDate":"2022-10-11"},{"lineNumber":16,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.person.exceptions.AppointmentNotFoundException;","lastModifiedDate":"2022-10-06"},{"lineNumber":17,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.person.exceptions.DuplicateAppointmentException;","lastModifiedDate":"2022-10-06"},{"lineNumber":18,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":19,"author":{"gitId":"pwjj2000"},"content":"/**","lastModifiedDate":"2022-10-06"},{"lineNumber":20,"author":{"gitId":"pwjj2000"},"content":" * A list of appointments that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2022-10-06"},{"lineNumber":21,"author":{"gitId":"pwjj2000"},"content":" * An appointment is considered unique by comparing using {@code Appointment#equals(Object)}.","lastModifiedDate":"2022-10-06"},{"lineNumber":22,"author":{"gitId":"pwjj2000"},"content":" *","lastModifiedDate":"2022-10-06"},{"lineNumber":23,"author":{"gitId":"pwjj2000"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2022-10-06"},{"lineNumber":24,"author":{"gitId":"pwjj2000"},"content":" *","lastModifiedDate":"2022-10-06"},{"lineNumber":25,"author":{"gitId":"pwjj2000"},"content":" */","lastModifiedDate":"2022-10-06"},{"lineNumber":26,"author":{"gitId":"pwjj2000"},"content":"public class UniqueAppointmentList implements Iterable\u003cAppointment\u003e {","lastModifiedDate":"2022-10-06"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"    // Solution below adapted from https://stackoverflow.com/questions/31687642","lastModifiedDate":"2022-10-26"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"    private final Callback\u003cAppointment, Observable[]\u003e extractor \u003d Appointment::getProperties;","lastModifiedDate":"2022-10-11"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"    private final ObservableList\u003cAppointment\u003e internalList \u003d FXCollections.observableArrayList(extractor);","lastModifiedDate":"2022-10-11"},{"lineNumber":32,"author":{"gitId":"pwjj2000"},"content":"    private final ObservableList\u003cAppointment\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2022-10-06"},{"lineNumber":33,"author":{"gitId":"pwjj2000"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2022-10-06"},{"lineNumber":34,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":35,"author":{"gitId":"WingKei67"},"content":"    private Comparator\u003cAppointment\u003e comparator \u003d COMPARATOR_UNGROUP_APPOINTMENTS;","lastModifiedDate":"2022-10-22"},{"lineNumber":36,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-11"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"     * Constructs a UniqueAppointmentList with an added listener to sort list when appointments are updated.","lastModifiedDate":"2022-10-11"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-11"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"    public UniqueAppointmentList() {","lastModifiedDate":"2022-10-11"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"        // Solution below adapted from https://stackoverflow.com/questions/31687642","lastModifiedDate":"2022-10-26"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"        internalList.addListener((ListChangeListener\u003cAppointment\u003e) c -\u003e {","lastModifiedDate":"2022-10-11"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"            while (c.next()) {","lastModifiedDate":"2022-10-11"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"                if (c.wasAdded()) {","lastModifiedDate":"2022-10-11"},{"lineNumber":45,"author":{"gitId":"WingKei67"},"content":"                    sort(comparator);","lastModifiedDate":"2022-10-22"},{"lineNumber":46,"author":{"gitId":"JovonLim"},"content":"                }","lastModifiedDate":"2022-10-11"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"            }","lastModifiedDate":"2022-10-11"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"        });","lastModifiedDate":"2022-10-11"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":51,"author":{"gitId":"pwjj2000"},"content":"    /**","lastModifiedDate":"2022-10-06"},{"lineNumber":52,"author":{"gitId":"pwjj2000"},"content":"     * Returns true if the list contains an equivalent appointment as the given argument.","lastModifiedDate":"2022-10-06"},{"lineNumber":53,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":54,"author":{"gitId":"pwjj2000"},"content":"     * @return Whether the list contains given appointment.","lastModifiedDate":"2022-11-06"},{"lineNumber":55,"author":{"gitId":"pwjj2000"},"content":"     */","lastModifiedDate":"2022-10-06"},{"lineNumber":56,"author":{"gitId":"pwjj2000"},"content":"    public boolean contains(Appointment toCheck) {","lastModifiedDate":"2022-10-06"},{"lineNumber":57,"author":{"gitId":"pwjj2000"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2022-10-06"},{"lineNumber":58,"author":{"gitId":"pwjj2000"},"content":"        return internalList.stream().anyMatch(toCheck::equals);","lastModifiedDate":"2022-10-06"},{"lineNumber":59,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":60,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":61,"author":{"gitId":"pwjj2000"},"content":"    /**","lastModifiedDate":"2022-10-06"},{"lineNumber":62,"author":{"gitId":"pwjj2000"},"content":"     * Adds an appointment to the list.","lastModifiedDate":"2022-10-06"},{"lineNumber":63,"author":{"gitId":"pwjj2000"},"content":"     * The appointment must not already exist in the list.","lastModifiedDate":"2022-10-06"},{"lineNumber":64,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":65,"author":{"gitId":"pwjj2000"},"content":"     * @param toAdd Appointment to be added to the list.","lastModifiedDate":"2022-11-06"},{"lineNumber":66,"author":{"gitId":"pwjj2000"},"content":"     */","lastModifiedDate":"2022-10-06"},{"lineNumber":67,"author":{"gitId":"pwjj2000"},"content":"    public void add(Appointment toAdd) {","lastModifiedDate":"2022-10-06"},{"lineNumber":68,"author":{"gitId":"pwjj2000"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2022-10-06"},{"lineNumber":69,"author":{"gitId":"pwjj2000"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2022-10-06"},{"lineNumber":70,"author":{"gitId":"pwjj2000"},"content":"            throw new DuplicateAppointmentException();","lastModifiedDate":"2022-10-06"},{"lineNumber":71,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":72,"author":{"gitId":"pwjj2000"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2022-10-06"},{"lineNumber":73,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":74,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":75,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":76,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":77,"author":{"gitId":"pwjj2000"},"content":"    /**","lastModifiedDate":"2022-10-06"},{"lineNumber":78,"author":{"gitId":"JovonLim"},"content":"     * Removes the equivalent appointment from the list.","lastModifiedDate":"2022-10-09"},{"lineNumber":79,"author":{"gitId":"JovonLim"},"content":"     * The appointment must exist in the list.","lastModifiedDate":"2022-10-09"},{"lineNumber":80,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":81,"author":{"gitId":"pwjj2000"},"content":"     * @param toRemove Appointment to remove from the list.","lastModifiedDate":"2022-11-06"},{"lineNumber":82,"author":{"gitId":"pwjj2000"},"content":"     */","lastModifiedDate":"2022-10-06"},{"lineNumber":83,"author":{"gitId":"pwjj2000"},"content":"    public void remove(Appointment toRemove) {","lastModifiedDate":"2022-10-06"},{"lineNumber":84,"author":{"gitId":"pwjj2000"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2022-10-06"},{"lineNumber":85,"author":{"gitId":"pwjj2000"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2022-10-06"},{"lineNumber":86,"author":{"gitId":"pwjj2000"},"content":"            throw new AppointmentNotFoundException();","lastModifiedDate":"2022-10-06"},{"lineNumber":87,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":88,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":89,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":90,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-09"},{"lineNumber":91,"author":{"gitId":"JovonLim"},"content":"     * Removes all the equivalent appointments from the list.","lastModifiedDate":"2022-10-09"},{"lineNumber":92,"author":{"gitId":"JovonLim"},"content":"     * The appointments must exist in the list.","lastModifiedDate":"2022-10-09"},{"lineNumber":93,"author":{"gitId":"JovonLim"},"content":"     *","lastModifiedDate":"2022-10-09"},{"lineNumber":94,"author":{"gitId":"JovonLim"},"content":"     * @param toRemove List of appointments to remove.","lastModifiedDate":"2022-10-09"},{"lineNumber":95,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-09"},{"lineNumber":96,"author":{"gitId":"JovonLim"},"content":"    public void removeAppointments(List\u003cAppointment\u003e toRemove) {","lastModifiedDate":"2022-10-09"},{"lineNumber":97,"author":{"gitId":"JovonLim"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2022-10-09"},{"lineNumber":98,"author":{"gitId":"JovonLim"},"content":"        for (Appointment appointment : toRemove) {","lastModifiedDate":"2022-10-09"},{"lineNumber":99,"author":{"gitId":"JovonLim"},"content":"            if (!internalList.remove(appointment)) {","lastModifiedDate":"2022-10-09"},{"lineNumber":100,"author":{"gitId":"JovonLim"},"content":"                throw new AppointmentNotFoundException();","lastModifiedDate":"2022-10-09"},{"lineNumber":101,"author":{"gitId":"JovonLim"},"content":"            }","lastModifiedDate":"2022-10-09"},{"lineNumber":102,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-09"},{"lineNumber":103,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":104,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":105,"author":{"gitId":"pwjj2000"},"content":"    public void setAppointments(UniqueAppointmentList replacement) {","lastModifiedDate":"2022-10-06"},{"lineNumber":106,"author":{"gitId":"pwjj2000"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2022-10-06"},{"lineNumber":107,"author":{"gitId":"pwjj2000"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2022-10-06"},{"lineNumber":108,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":109,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":110,"author":{"gitId":"pwjj2000"},"content":"    /**","lastModifiedDate":"2022-10-06"},{"lineNumber":111,"author":{"gitId":"JovonLim"},"content":"     * Replaces the contents of this list with {@code appointments}.","lastModifiedDate":"2022-10-09"},{"lineNumber":112,"author":{"gitId":"JovonLim"},"content":"     * {@code appointments} must not contain duplicate appointments.","lastModifiedDate":"2022-10-09"},{"lineNumber":113,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":114,"author":{"gitId":"pwjj2000"},"content":"     * @param appointments List of appointments to be changed to.","lastModifiedDate":"2022-11-06"},{"lineNumber":115,"author":{"gitId":"pwjj2000"},"content":"     */","lastModifiedDate":"2022-10-06"},{"lineNumber":116,"author":{"gitId":"pwjj2000"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2022-10-06"},{"lineNumber":117,"author":{"gitId":"pwjj2000"},"content":"        requireAllNonNull(appointments);","lastModifiedDate":"2022-10-06"},{"lineNumber":118,"author":{"gitId":"pwjj2000"},"content":"        if (!appointmentsAreUnique(appointments)) {","lastModifiedDate":"2022-10-06"},{"lineNumber":119,"author":{"gitId":"pwjj2000"},"content":"            throw new DuplicateAppointmentException();","lastModifiedDate":"2022-10-06"},{"lineNumber":120,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":121,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":122,"author":{"gitId":"pwjj2000"},"content":"        internalList.setAll(appointments);","lastModifiedDate":"2022-10-06"},{"lineNumber":123,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":124,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":125,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-09"},{"lineNumber":126,"author":{"gitId":"JovonLim"},"content":"     * Replaces the appointment {@code target} in the list with {@code editedAppointment}.","lastModifiedDate":"2022-10-09"},{"lineNumber":127,"author":{"gitId":"JovonLim"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2022-10-09"},{"lineNumber":128,"author":{"gitId":"JovonLim"},"content":"     * The appointment of {@code editedAppointment} must not be the same as another existing appointment","lastModifiedDate":"2022-10-09"},{"lineNumber":129,"author":{"gitId":"JovonLim"},"content":"     * in the list.","lastModifiedDate":"2022-10-09"},{"lineNumber":130,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":131,"author":{"gitId":"pwjj2000"},"content":"     * @param target Appointment to be edited.","lastModifiedDate":"2022-11-06"},{"lineNumber":132,"author":{"gitId":"pwjj2000"},"content":"     * @param editedAppointment Appointment after editing.","lastModifiedDate":"2022-11-06"},{"lineNumber":133,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-09"},{"lineNumber":134,"author":{"gitId":"JovonLim"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2022-10-09"},{"lineNumber":135,"author":{"gitId":"JovonLim"},"content":"        requireAllNonNull(target, editedAppointment);","lastModifiedDate":"2022-10-09"},{"lineNumber":136,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":137,"author":{"gitId":"JovonLim"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2022-10-09"},{"lineNumber":138,"author":{"gitId":"JovonLim"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2022-10-09"},{"lineNumber":139,"author":{"gitId":"JovonLim"},"content":"            throw new AppointmentNotFoundException();","lastModifiedDate":"2022-10-09"},{"lineNumber":140,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-09"},{"lineNumber":141,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":142,"author":{"gitId":"JovonLim"},"content":"        if (!target.isSameAppointment(editedAppointment) \u0026\u0026 contains(editedAppointment)) {","lastModifiedDate":"2022-10-09"},{"lineNumber":143,"author":{"gitId":"JovonLim"},"content":"            throw new DuplicateAppointmentException();","lastModifiedDate":"2022-10-09"},{"lineNumber":144,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-09"},{"lineNumber":145,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":146,"author":{"gitId":"JovonLim"},"content":"        internalList.set(index, editedAppointment);","lastModifiedDate":"2022-10-09"},{"lineNumber":147,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":148,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":149,"author":{"gitId":"pwjj2000"},"content":"    /**","lastModifiedDate":"2022-10-06"},{"lineNumber":150,"author":{"gitId":"pwjj2000"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2022-10-06"},{"lineNumber":151,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":152,"author":{"gitId":"pwjj2000"},"content":"     * @return Unmodifiable list of appointments.","lastModifiedDate":"2022-11-06"},{"lineNumber":153,"author":{"gitId":"pwjj2000"},"content":"     */","lastModifiedDate":"2022-10-06"},{"lineNumber":154,"author":{"gitId":"pwjj2000"},"content":"    public ObservableList\u003cAppointment\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2022-10-06"},{"lineNumber":155,"author":{"gitId":"pwjj2000"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2022-10-06"},{"lineNumber":156,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":157,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":158,"author":{"gitId":"pwjj2000"},"content":"    @Override","lastModifiedDate":"2022-10-06"},{"lineNumber":159,"author":{"gitId":"pwjj2000"},"content":"    public Iterator\u003cAppointment\u003e iterator() {","lastModifiedDate":"2022-10-06"},{"lineNumber":160,"author":{"gitId":"pwjj2000"},"content":"        return internalList.iterator();","lastModifiedDate":"2022-10-06"},{"lineNumber":161,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":162,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":163,"author":{"gitId":"pwjj2000"},"content":"    @Override","lastModifiedDate":"2022-10-06"},{"lineNumber":164,"author":{"gitId":"pwjj2000"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-06"},{"lineNumber":165,"author":{"gitId":"pwjj2000"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-06"},{"lineNumber":166,"author":{"gitId":"pwjj2000"},"content":"                || (other instanceof UniqueAppointmentList // instanceof handles nulls","lastModifiedDate":"2022-10-06"},{"lineNumber":167,"author":{"gitId":"pwjj2000"},"content":"                \u0026\u0026 internalList.equals(((UniqueAppointmentList) other).internalList));","lastModifiedDate":"2022-10-06"},{"lineNumber":168,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":169,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":170,"author":{"gitId":"pwjj2000"},"content":"    @Override","lastModifiedDate":"2022-10-06"},{"lineNumber":171,"author":{"gitId":"pwjj2000"},"content":"    public int hashCode() {","lastModifiedDate":"2022-10-06"},{"lineNumber":172,"author":{"gitId":"pwjj2000"},"content":"        return internalList.hashCode();","lastModifiedDate":"2022-10-06"},{"lineNumber":173,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":174,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":175,"author":{"gitId":"pwjj2000"},"content":"    /**","lastModifiedDate":"2022-10-06"},{"lineNumber":176,"author":{"gitId":"pwjj2000"},"content":"     * Returns true if {@code appointments} contains only unique appointments.","lastModifiedDate":"2022-10-06"},{"lineNumber":177,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":178,"author":{"gitId":"pwjj2000"},"content":"     * @return Whether all appointments in the list are unique.","lastModifiedDate":"2022-11-06"},{"lineNumber":179,"author":{"gitId":"pwjj2000"},"content":"     */","lastModifiedDate":"2022-10-06"},{"lineNumber":180,"author":{"gitId":"pwjj2000"},"content":"    private boolean appointmentsAreUnique(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2022-10-06"},{"lineNumber":181,"author":{"gitId":"pwjj2000"},"content":"        for (int i \u003d 0; i \u003c appointments.size() - 1; i++) {","lastModifiedDate":"2022-10-06"},{"lineNumber":182,"author":{"gitId":"pwjj2000"},"content":"            for (int j \u003d i + 1; j \u003c appointments.size(); j++) {","lastModifiedDate":"2022-10-06"},{"lineNumber":183,"author":{"gitId":"pwjj2000"},"content":"                if (appointments.get(i).equals(appointments.get(j))) {","lastModifiedDate":"2022-10-06"},{"lineNumber":184,"author":{"gitId":"pwjj2000"},"content":"                    return false;","lastModifiedDate":"2022-10-06"},{"lineNumber":185,"author":{"gitId":"pwjj2000"},"content":"                }","lastModifiedDate":"2022-10-06"},{"lineNumber":186,"author":{"gitId":"pwjj2000"},"content":"            }","lastModifiedDate":"2022-10-06"},{"lineNumber":187,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":188,"author":{"gitId":"pwjj2000"},"content":"        return true;","lastModifiedDate":"2022-10-06"},{"lineNumber":189,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":190,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":191,"author":{"gitId":"WingKei67"},"content":"    /**","lastModifiedDate":"2022-10-22"},{"lineNumber":192,"author":{"gitId":"WingKei67"},"content":"     * Sorts the contents of the appointment list with {@code comparator}.","lastModifiedDate":"2022-10-22"},{"lineNumber":193,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":194,"author":{"gitId":"pwjj2000"},"content":"     * @param comparator Comparator that determines how appointment list is ordered.","lastModifiedDate":"2022-11-06"},{"lineNumber":195,"author":{"gitId":"WingKei67"},"content":"     */","lastModifiedDate":"2022-10-22"},{"lineNumber":196,"author":{"gitId":"WingKei67"},"content":"    public void sort(Comparator\u003cAppointment\u003e comparator) {","lastModifiedDate":"2022-10-22"},{"lineNumber":197,"author":{"gitId":"WingKei67"},"content":"        this.comparator \u003d comparator;","lastModifiedDate":"2022-10-22"},{"lineNumber":198,"author":{"gitId":"WingKei67"},"content":"        internalList.sort(comparator);","lastModifiedDate":"2022-10-22"},{"lineNumber":199,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-22"},{"lineNumber":200,"author":{"gitId":"pwjj2000"},"content":"}","lastModifiedDate":"2022-10-06"}],"authorContributionMap":{"WingKei67":12,"JovonLim":61,"pwjj2000":127}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":5,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.model.Model.COMPARATOR_UNGROUP_PATIENTS;","lastModifiedDate":"2022-10-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":7,"author":{"gitId":"WingKei67"},"content":"import java.util.Comparator;","lastModifiedDate":"2022-10-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Iterator;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"import javafx.beans.Observable;","lastModifiedDate":"2022-10-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"WingKei67"},"content":"import javafx.collections.ListChangeListener;","lastModifiedDate":"2022-10-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"import javafx.util.Callback;","lastModifiedDate":"2022-10-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2017-06-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2017-06-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2016-09-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of","lastModifiedDate":"2018-04-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is","lastModifiedDate":"2018-04-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so","lastModifiedDate":"2018-04-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * as to ensure that the person with exactly the same fields will be removed.","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2016-09-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * @see Person#isSamePerson(Person)","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"    // Solution below adapted from https://stackoverflow.com/questions/31687642","lastModifiedDate":"2022-10-26"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"    private final Callback\u003cPerson, Observable[]\u003e extractor \u003d person -\u003e new Observable[] {person.getApptsProperty()};","lastModifiedDate":"2022-10-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList(extractor);","lastModifiedDate":"2022-10-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"WingKei67"},"content":"    private Comparator\u003cPerson\u003e comparator \u003d COMPARATOR_UNGROUP_PATIENTS;","lastModifiedDate":"2022-10-22"},{"lineNumber":38,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":39,"author":{"gitId":"WingKei67"},"content":"    /**","lastModifiedDate":"2022-10-22"},{"lineNumber":40,"author":{"gitId":"WingKei67"},"content":"     * Constructs a UniquePersonList with an added listener to sort list when patients are updated.","lastModifiedDate":"2022-10-24"},{"lineNumber":41,"author":{"gitId":"WingKei67"},"content":"     */","lastModifiedDate":"2022-10-22"},{"lineNumber":42,"author":{"gitId":"WingKei67"},"content":"    public UniquePersonList() {","lastModifiedDate":"2022-10-22"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"        // Solution below adapted from https://stackoverflow.com/questions/31687642","lastModifiedDate":"2022-10-26"},{"lineNumber":44,"author":{"gitId":"WingKei67"},"content":"        internalList.addListener((ListChangeListener\u003cPerson\u003e) c -\u003e {","lastModifiedDate":"2022-10-22"},{"lineNumber":45,"author":{"gitId":"WingKei67"},"content":"            while (c.next()) {","lastModifiedDate":"2022-10-22"},{"lineNumber":46,"author":{"gitId":"WingKei67"},"content":"                if (c.wasUpdated()) {","lastModifiedDate":"2022-10-22"},{"lineNumber":47,"author":{"gitId":"WingKei67"},"content":"                    sort(comparator);","lastModifiedDate":"2022-10-22"},{"lineNumber":48,"author":{"gitId":"WingKei67"},"content":"                }","lastModifiedDate":"2022-10-22"},{"lineNumber":49,"author":{"gitId":"WingKei67"},"content":"                if (c.wasAdded()) {","lastModifiedDate":"2022-10-22"},{"lineNumber":50,"author":{"gitId":"WingKei67"},"content":"                    sort(comparator);","lastModifiedDate":"2022-10-22"},{"lineNumber":51,"author":{"gitId":"WingKei67"},"content":"                }","lastModifiedDate":"2022-10-22"},{"lineNumber":52,"author":{"gitId":"WingKei67"},"content":"            }","lastModifiedDate":"2022-10-22"},{"lineNumber":53,"author":{"gitId":"WingKei67"},"content":"        });","lastModifiedDate":"2022-10-22"},{"lineNumber":54,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-22"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument.","lastModifiedDate":"2016-09-22"},{"lineNumber":58,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":59,"author":{"gitId":"pwjj2000"},"content":"     * @return Whether list contains given person.","lastModifiedDate":"2022-11-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public boolean contains(Person toCheck) {","lastModifiedDate":"2018-01-10"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2017-05-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return internalList.stream().anyMatch(toCheck::isSamePerson);","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Adds a person to the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * The person must not already exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":69,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":70,"author":{"gitId":"pwjj2000"},"content":"     * @param toAdd Person to be added to the list.","lastModifiedDate":"2022-11-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void add(Person toAdd) {","lastModifiedDate":"2018-08-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2017-05-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2018-01-10"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":84,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":85,"author":{"gitId":"pwjj2000"},"content":"     * @param target Person to edit.","lastModifiedDate":"2022-11-06"},{"lineNumber":86,"author":{"gitId":"pwjj2000"},"content":"     * @param editedPerson Person after editing.","lastModifiedDate":"2022-11-06"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2017-06-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-06-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2017-06-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-07"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-07"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-12-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        internalList.set(index, editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Removes the equivalent person from the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * The person must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":106,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":107,"author":{"gitId":"pwjj2000"},"content":"     * @param toRemove Person to be removed from the list.","lastModifiedDate":"2022-11-06"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void remove(Person toRemove) {","lastModifiedDate":"2018-08-07"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2017-05-15"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2018-02-28"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2016-08-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void setPersons(UniquePersonList replacement) {","lastModifiedDate":"2016-10-19"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2018-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2018-08-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * Replaces the contents of this list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":124,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":125,"author":{"gitId":"pwjj2000"},"content":"     * @param persons List of person to replace current list.","lastModifiedDate":"2022-11-06"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        requireAllNonNull(persons);","lastModifiedDate":"2018-01-10"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        if (!personsAreUnique(persons)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2018-01-21"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-21"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        internalList.setAll(persons);","lastModifiedDate":"2018-08-14"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-01"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2017-09-01"},{"lineNumber":138,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":139,"author":{"gitId":"pwjj2000"},"content":"     * @return Unmodifiable list of person.","lastModifiedDate":"2022-11-06"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-01"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2018-04-05"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2018-12-09"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {","lastModifiedDate":"2016-08-24"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        return internalList.iterator();","lastModifiedDate":"2016-08-24"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":153,"author":{"gitId":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":154,"author":{"gitId":"-"},"content":"                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));","lastModifiedDate":"2018-08-14"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        return internalList.hashCode();","lastModifiedDate":"2016-09-21"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * Returns true if {@code persons} contains only unique persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":164,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":165,"author":{"gitId":"pwjj2000"},"content":"     * @return Whether all person in the list are unique.","lastModifiedDate":"2022-11-06"},{"lineNumber":166,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    private boolean personsAreUnique(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-04-19"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            for (int j \u003d i + 1; j \u003c persons.size(); j++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":170,"author":{"gitId":"-"},"content":"                if (persons.get(i).isSamePerson(persons.get(j))) {","lastModifiedDate":"2018-04-19"},{"lineNumber":171,"author":{"gitId":"-"},"content":"                    return false;","lastModifiedDate":"2018-04-19"},{"lineNumber":172,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2018-04-19"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":177,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":178,"author":{"gitId":"WingKei67"},"content":"    /**","lastModifiedDate":"2022-10-22"},{"lineNumber":179,"author":{"gitId":"WingKei67"},"content":"     * Sorts the contents of the person list with {@code comparator}.","lastModifiedDate":"2022-10-22"},{"lineNumber":180,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":181,"author":{"gitId":"pwjj2000"},"content":"     * @param comparator Comparator that determines order of person.","lastModifiedDate":"2022-11-06"},{"lineNumber":182,"author":{"gitId":"WingKei67"},"content":"     */","lastModifiedDate":"2022-10-22"},{"lineNumber":183,"author":{"gitId":"WingKei67"},"content":"    public void sort(Comparator\u003cPerson\u003e comparator) {","lastModifiedDate":"2022-10-22"},{"lineNumber":184,"author":{"gitId":"WingKei67"},"content":"        this.comparator \u003d comparator;","lastModifiedDate":"2022-10-22"},{"lineNumber":185,"author":{"gitId":"WingKei67"},"content":"        internalList.sort(comparator);","lastModifiedDate":"2022-10-22"},{"lineNumber":186,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-22"},{"lineNumber":187,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"WingKei67":28,"JovonLim":6,"-":136,"pwjj2000":17}},{"path":"src/main/java/seedu/address/model/person/exceptions/AppointmentNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pwjj2000"},"content":"package seedu.address.model.person.exceptions;","lastModifiedDate":"2022-10-06"},{"lineNumber":2,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":3,"author":{"gitId":"pwjj2000"},"content":"/**","lastModifiedDate":"2022-10-06"},{"lineNumber":4,"author":{"gitId":"pwjj2000"},"content":" * Signals that the operation is unable to find the specified person.","lastModifiedDate":"2022-10-06"},{"lineNumber":5,"author":{"gitId":"pwjj2000"},"content":" */","lastModifiedDate":"2022-10-06"},{"lineNumber":6,"author":{"gitId":"pwjj2000"},"content":"public class AppointmentNotFoundException extends RuntimeException {","lastModifiedDate":"2022-10-06"},{"lineNumber":7,"author":{"gitId":"pwjj2000"},"content":"}","lastModifiedDate":"2022-10-06"}],"authorContributionMap":{"pwjj2000":7}},{"path":"src/main/java/seedu/address/model/person/exceptions/DuplicateAppointmentException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pwjj2000"},"content":"package seedu.address.model.person.exceptions;","lastModifiedDate":"2022-10-06"},{"lineNumber":2,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":3,"author":{"gitId":"pwjj2000"},"content":"/**","lastModifiedDate":"2022-10-06"},{"lineNumber":4,"author":{"gitId":"pwjj2000"},"content":" * Signals that the operation will result in duplicate Appointments","lastModifiedDate":"2022-10-06"},{"lineNumber":5,"author":{"gitId":"pwjj2000"},"content":" * (Appointments are considered duplicates if they have the same date, time, reason, patient).","lastModifiedDate":"2022-10-06"},{"lineNumber":6,"author":{"gitId":"pwjj2000"},"content":" */","lastModifiedDate":"2022-10-06"},{"lineNumber":7,"author":{"gitId":"pwjj2000"},"content":"public class DuplicateAppointmentException extends RuntimeException {","lastModifiedDate":"2022-10-06"},{"lineNumber":8,"author":{"gitId":"pwjj2000"},"content":"    public DuplicateAppointmentException() {","lastModifiedDate":"2022-10-06"},{"lineNumber":9,"author":{"gitId":"pwjj2000"},"content":"        super(\"Operation would result in duplicate appointments\");","lastModifiedDate":"2022-10-06"},{"lineNumber":10,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":11,"author":{"gitId":"pwjj2000"},"content":"}","lastModifiedDate":"2022-10-06"}],"authorContributionMap":{"pwjj2000":11}},{"path":"src/main/java/seedu/address/model/person/predicates/AppointmentOfFilteredPersonsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2022-10-14"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import java.util.List;","lastModifiedDate":"2022-10-10"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-10"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-14"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-14"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"/**","lastModifiedDate":"2022-10-10"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":" * Tests that a {@code Appointment}\u0027s {@code Patient} matches any of the Persons given.","lastModifiedDate":"2022-10-10"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":" */","lastModifiedDate":"2022-10-10"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"public class AppointmentOfFilteredPersonsPredicate implements Predicate\u003cAppointment\u003e {","lastModifiedDate":"2022-10-10"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"    private final List\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2022-10-10"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"    public AppointmentOfFilteredPersonsPredicate(List\u003cPerson\u003e filteredPersons) {","lastModifiedDate":"2022-10-10"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"        this.filteredPersons \u003d filteredPersons;","lastModifiedDate":"2022-10-10"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"    @Override","lastModifiedDate":"2022-10-10"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"    public boolean test(Appointment appointment) {","lastModifiedDate":"2022-10-10"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"        return filteredPersons.stream().anyMatch(validPersons -\u003e validPersons.equals(appointment.getPatient()));","lastModifiedDate":"2022-10-10"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"    @Override","lastModifiedDate":"2022-10-10"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-10"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-11"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"            return true;","lastModifiedDate":"2022-10-11"},{"lineNumber":28,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-11"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"        if (!(other instanceof AppointmentOfFilteredPersonsPredicate)) {","lastModifiedDate":"2022-10-11"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"            return false;","lastModifiedDate":"2022-10-11"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-11"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"        AppointmentOfFilteredPersonsPredicate otherPredicate \u003d (AppointmentOfFilteredPersonsPredicate) other;","lastModifiedDate":"2022-10-11"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"        return filteredPersons.equals(otherPredicate.filteredPersons);","lastModifiedDate":"2022-10-11"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-10"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-10"}],"authorContributionMap":{"NicholasTYD":37}},{"path":"src/main/java/seedu/address/model/person/predicates/CombinedAppointmentPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2022-10-14"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-14"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;","lastModifiedDate":"2022-10-28"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-13"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-13"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"import java.util.List;","lastModifiedDate":"2022-10-13"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-13"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2022-10-16"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-14"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"/**","lastModifiedDate":"2022-10-15"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":" * A predicate the encapsulates the combination of several other Appointment predicates.","lastModifiedDate":"2022-10-15"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":" */","lastModifiedDate":"2022-10-15"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"public class CombinedAppointmentPredicate implements Predicate\u003cAppointment\u003e {","lastModifiedDate":"2022-10-13"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"    private final String reason;","lastModifiedDate":"2022-10-13"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"    private final LocalDateTime startDateTime;","lastModifiedDate":"2022-10-13"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"    private final LocalDateTime endDateTime;","lastModifiedDate":"2022-10-13"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"    private final List\u003cString\u003e tagList;","lastModifiedDate":"2022-10-25"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"    // There is no equals() method for predicates. Ensure this predicate and variables to generate it are always final!","lastModifiedDate":"2022-10-13"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"    private final Predicate\u003cAppointment\u003e combinedPredicate;","lastModifiedDate":"2022-10-13"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-15"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"     * Creates a {@code CombinedAppointmentPredicate} object that tests if a given appointment contains a given","lastModifiedDate":"2022-10-15"},{"lineNumber":28,"author":{"gitId":"pwjj2000"},"content":"     * reason, has a date between startDateTime and endDateTime, and the given list of tags.","lastModifiedDate":"2022-11-06"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"     *","lastModifiedDate":"2022-10-15"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"     * @param reason The string to test on an {@code Appointment}\u0027s reason.","lastModifiedDate":"2022-10-15"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"     * @param startDateTime Start date to test.","lastModifiedDate":"2022-10-15"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"     * @param endDateTime End date of test.","lastModifiedDate":"2022-10-15"},{"lineNumber":33,"author":{"gitId":"pwjj2000"},"content":"     * @param tagList List of tags to test.","lastModifiedDate":"2022-11-06"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-15"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"    public CombinedAppointmentPredicate(","lastModifiedDate":"2022-10-25"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"            String reason, LocalDateTime startDateTime, LocalDateTime endDateTime, List\u003cString\u003e tagList) {","lastModifiedDate":"2022-10-25"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"        requireNonNull(startDateTime);","lastModifiedDate":"2022-10-14"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"        requireNonNull(endDateTime);","lastModifiedDate":"2022-10-14"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":40,"author":{"gitId":"NicholasTYD"},"content":"        this.reason \u003d reason;","lastModifiedDate":"2022-10-13"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"        this.startDateTime \u003d startDateTime;","lastModifiedDate":"2022-10-13"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"        this.endDateTime \u003d endDateTime;","lastModifiedDate":"2022-10-13"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"        this.tagList \u003d tagList;","lastModifiedDate":"2022-10-25"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":45,"author":{"gitId":"NicholasTYD"},"content":"        combinedPredicate \u003d combineAllPredicates();","lastModifiedDate":"2022-10-13"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-13"},{"lineNumber":47,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"    private Predicate\u003cAppointment\u003e combineAllPredicates() {","lastModifiedDate":"2022-10-13"},{"lineNumber":49,"author":{"gitId":"NicholasTYD"},"content":"        assert startDateTime !\u003d null : \"startDateTime should not be null.\";","lastModifiedDate":"2022-10-14"},{"lineNumber":50,"author":{"gitId":"NicholasTYD"},"content":"        assert endDateTime !\u003d null : \"endDateTime should not be null.\";","lastModifiedDate":"2022-10-14"},{"lineNumber":51,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":52,"author":{"gitId":"NicholasTYD"},"content":"        List\u003cPredicate\u003cAppointment\u003e\u003e appointmentPredicates \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-13"},{"lineNumber":53,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":54,"author":{"gitId":"NicholasTYD"},"content":"        if (!reason.isEmpty()) {","lastModifiedDate":"2022-10-13"},{"lineNumber":55,"author":{"gitId":"NicholasTYD"},"content":"            addReasonPredicate(appointmentPredicates);","lastModifiedDate":"2022-10-16"},{"lineNumber":56,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-13"},{"lineNumber":57,"author":{"gitId":"NicholasTYD"},"content":"        addDatePredicate(appointmentPredicates);","lastModifiedDate":"2022-10-16"},{"lineNumber":58,"author":{"gitId":"NicholasTYD"},"content":"        if (!tagList.isEmpty()) {","lastModifiedDate":"2022-10-25"},{"lineNumber":59,"author":{"gitId":"NicholasTYD"},"content":"            addTagListPredicate(appointmentPredicates);","lastModifiedDate":"2022-10-25"},{"lineNumber":60,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-25"},{"lineNumber":61,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":62,"author":{"gitId":"NicholasTYD"},"content":"        return appointmentPredicates.stream().reduce(PREDICATE_SHOW_ALL_APPOINTMENTS, Predicate::and);","lastModifiedDate":"2022-10-28"},{"lineNumber":63,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-13"},{"lineNumber":64,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":65,"author":{"gitId":"NicholasTYD"},"content":"    private void addReasonPredicate(List\u003cPredicate\u003cAppointment\u003e\u003e appointmentPredicates) {","lastModifiedDate":"2022-10-16"},{"lineNumber":66,"author":{"gitId":"NicholasTYD"},"content":"        Predicate\u003cAppointment\u003e reasonContainsSequencePredicate \u003d","lastModifiedDate":"2022-10-16"},{"lineNumber":67,"author":{"gitId":"NicholasTYD"},"content":"                appointment -\u003e StringUtil.containsIgnoreCase(appointment.getReason(), reason);","lastModifiedDate":"2022-10-16"},{"lineNumber":68,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":69,"author":{"gitId":"NicholasTYD"},"content":"        appointmentPredicates.add(reasonContainsSequencePredicate);","lastModifiedDate":"2022-10-16"},{"lineNumber":70,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":71,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":72,"author":{"gitId":"NicholasTYD"},"content":"    private void addDatePredicate(List\u003cPredicate\u003cAppointment\u003e\u003e appointmentPredicates) {","lastModifiedDate":"2022-10-16"},{"lineNumber":73,"author":{"gitId":"NicholasTYD"},"content":"        Predicate\u003cAppointment\u003e dateTimeWithinRangePredicate \u003d","lastModifiedDate":"2022-10-16"},{"lineNumber":74,"author":{"gitId":"NicholasTYD"},"content":"                appointment -\u003e {","lastModifiedDate":"2022-10-16"},{"lineNumber":75,"author":{"gitId":"NicholasTYD"},"content":"                    LocalDateTime appointmentDateTime \u003d appointment.getDateTime();","lastModifiedDate":"2022-10-16"},{"lineNumber":76,"author":{"gitId":"NicholasTYD"},"content":"                    boolean isAtOrAfterStartTime \u003d","lastModifiedDate":"2022-10-16"},{"lineNumber":77,"author":{"gitId":"NicholasTYD"},"content":"                            appointmentDateTime.isEqual(startDateTime) || appointmentDateTime.isAfter(startDateTime);","lastModifiedDate":"2022-10-16"},{"lineNumber":78,"author":{"gitId":"NicholasTYD"},"content":"                    boolean isAtOrBeforeEndTime \u003d","lastModifiedDate":"2022-10-16"},{"lineNumber":79,"author":{"gitId":"NicholasTYD"},"content":"                            appointmentDateTime.isEqual(endDateTime) || appointmentDateTime.isBefore(endDateTime);","lastModifiedDate":"2022-10-16"},{"lineNumber":80,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":81,"author":{"gitId":"NicholasTYD"},"content":"                    return isAtOrAfterStartTime \u0026\u0026 isAtOrBeforeEndTime;","lastModifiedDate":"2022-10-16"},{"lineNumber":82,"author":{"gitId":"NicholasTYD"},"content":"                };","lastModifiedDate":"2022-10-16"},{"lineNumber":83,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":84,"author":{"gitId":"NicholasTYD"},"content":"        appointmentPredicates.add(dateTimeWithinRangePredicate);","lastModifiedDate":"2022-10-16"},{"lineNumber":85,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":86,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":87,"author":{"gitId":"NicholasTYD"},"content":"    private void addTagListPredicate(List\u003cPredicate\u003cAppointment\u003e\u003e appointmentPredicates) {","lastModifiedDate":"2022-10-25"},{"lineNumber":88,"author":{"gitId":"NicholasTYD"},"content":"        Predicate\u003cAppointment\u003e appointmentContainsTagsPredicate \u003d","lastModifiedDate":"2022-10-25"},{"lineNumber":89,"author":{"gitId":"NicholasTYD"},"content":"                appointment -\u003e StringUtil.containsAllTagsIgnoreCase(appointment.getTags(), tagList);","lastModifiedDate":"2022-10-25"},{"lineNumber":90,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":91,"author":{"gitId":"NicholasTYD"},"content":"        appointmentPredicates.add(appointmentContainsTagsPredicate);","lastModifiedDate":"2022-10-25"},{"lineNumber":92,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-25"},{"lineNumber":93,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":94,"author":{"gitId":"NicholasTYD"},"content":"    @Override","lastModifiedDate":"2022-10-13"},{"lineNumber":95,"author":{"gitId":"NicholasTYD"},"content":"    public boolean test(Appointment appointment) {","lastModifiedDate":"2022-10-13"},{"lineNumber":96,"author":{"gitId":"NicholasTYD"},"content":"        return combinedPredicate.test(appointment);","lastModifiedDate":"2022-10-13"},{"lineNumber":97,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-13"},{"lineNumber":98,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":99,"author":{"gitId":"NicholasTYD"},"content":"    @Override","lastModifiedDate":"2022-10-13"},{"lineNumber":100,"author":{"gitId":"NicholasTYD"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-13"},{"lineNumber":101,"author":{"gitId":"NicholasTYD"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-13"},{"lineNumber":102,"author":{"gitId":"NicholasTYD"},"content":"            return true;","lastModifiedDate":"2022-10-13"},{"lineNumber":103,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-13"},{"lineNumber":104,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":105,"author":{"gitId":"NicholasTYD"},"content":"        if (!(other instanceof CombinedAppointmentPredicate)) {","lastModifiedDate":"2022-10-13"},{"lineNumber":106,"author":{"gitId":"NicholasTYD"},"content":"            return false;","lastModifiedDate":"2022-10-13"},{"lineNumber":107,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-13"},{"lineNumber":108,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":109,"author":{"gitId":"NicholasTYD"},"content":"        CombinedAppointmentPredicate otherPredicate \u003d (CombinedAppointmentPredicate) other;","lastModifiedDate":"2022-10-13"},{"lineNumber":110,"author":{"gitId":"NicholasTYD"},"content":"        return reason.equals(otherPredicate.reason)","lastModifiedDate":"2022-10-13"},{"lineNumber":111,"author":{"gitId":"NicholasTYD"},"content":"                \u0026\u0026 startDateTime.equals(otherPredicate.startDateTime)","lastModifiedDate":"2022-10-13"},{"lineNumber":112,"author":{"gitId":"NicholasTYD"},"content":"                \u0026\u0026 endDateTime.equals(otherPredicate.endDateTime)","lastModifiedDate":"2022-10-25"},{"lineNumber":113,"author":{"gitId":"NicholasTYD"},"content":"                \u0026\u0026 tagList.equals(otherPredicate.tagList);","lastModifiedDate":"2022-10-25"},{"lineNumber":114,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-13"},{"lineNumber":115,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-13"}],"authorContributionMap":{"NicholasTYD":113,"pwjj2000":2}},{"path":"src/main/java/seedu/address/model/person/predicates/CombinedPersonPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2022-10-14"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2022-10-28"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-28"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-13"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"import java.util.List;","lastModifiedDate":"2022-10-13"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-13"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2022-10-16"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-14"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"/**","lastModifiedDate":"2022-10-15"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":" * A predicate the encapsulates the combination of several other Person predicates.","lastModifiedDate":"2022-10-15"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":" */","lastModifiedDate":"2022-10-15"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"public class CombinedPersonPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2022-10-13"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"    private final String name;","lastModifiedDate":"2022-10-13"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"    private final String phone;","lastModifiedDate":"2022-10-13"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"    private final String email;","lastModifiedDate":"2022-10-13"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"    private final String address;","lastModifiedDate":"2022-10-13"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"    private final List\u003cString\u003e tagList;","lastModifiedDate":"2022-10-13"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"    // There is no equals() method for predicates. Ensure this predicate and variables to generate it are always final!","lastModifiedDate":"2022-10-13"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"    private final Predicate\u003cPerson\u003e combinedPredicate;","lastModifiedDate":"2022-10-13"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-15"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"     * Creates a {@code CombinedPersonPredicate} object that tests if a given Person contains a given","lastModifiedDate":"2022-10-15"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"     * name, phone, email, address and has a word-for-word match for tags.","lastModifiedDate":"2022-10-15"},{"lineNumber":28,"author":{"gitId":"NicholasTYD"},"content":"     *","lastModifiedDate":"2022-10-15"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"     * @param name The string to test on a {@code Person}\u0027s name.","lastModifiedDate":"2022-10-15"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"     * @param phone The string to test on a {@code Person}\u0027s phone.","lastModifiedDate":"2022-10-15"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"     * @param email The string to test on a {@code Person}\u0027s email.","lastModifiedDate":"2022-10-15"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"     * @param address The string to test on a {@code Person}\u0027s address.","lastModifiedDate":"2022-10-15"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"     * @param tagList The string to test on a {@code Person}\u0027s list of tags.","lastModifiedDate":"2022-10-15"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-15"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"    public CombinedPersonPredicate(String name, String phone, String email, String address, List\u003cString\u003e tagList) {","lastModifiedDate":"2022-10-13"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"        this.name \u003d name;","lastModifiedDate":"2022-10-13"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2022-10-13"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"        this.email \u003d email;","lastModifiedDate":"2022-10-13"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"        this.address \u003d address;","lastModifiedDate":"2022-10-13"},{"lineNumber":40,"author":{"gitId":"NicholasTYD"},"content":"        this.tagList \u003d tagList;","lastModifiedDate":"2022-10-13"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"        combinedPredicate \u003d combineALlPredicates();","lastModifiedDate":"2022-10-13"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-13"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":45,"author":{"gitId":"NicholasTYD"},"content":"    private Predicate\u003cPerson\u003e combineALlPredicates() {","lastModifiedDate":"2022-10-13"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"        List\u003cPredicate\u003cPerson\u003e\u003e personPredicates \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-13"},{"lineNumber":47,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"        if (!name.isEmpty()) {","lastModifiedDate":"2022-10-13"},{"lineNumber":49,"author":{"gitId":"NicholasTYD"},"content":"            addNamePredicate(personPredicates);","lastModifiedDate":"2022-10-16"},{"lineNumber":50,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-13"},{"lineNumber":51,"author":{"gitId":"NicholasTYD"},"content":"        if (!phone.isEmpty()) {","lastModifiedDate":"2022-10-13"},{"lineNumber":52,"author":{"gitId":"NicholasTYD"},"content":"            addPhonePredicate(personPredicates);","lastModifiedDate":"2022-10-16"},{"lineNumber":53,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-13"},{"lineNumber":54,"author":{"gitId":"NicholasTYD"},"content":"        if (!email.isEmpty()) {","lastModifiedDate":"2022-10-13"},{"lineNumber":55,"author":{"gitId":"NicholasTYD"},"content":"            addEmailPredicate(personPredicates);","lastModifiedDate":"2022-10-16"},{"lineNumber":56,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-13"},{"lineNumber":57,"author":{"gitId":"NicholasTYD"},"content":"        if (!address.isEmpty()) {","lastModifiedDate":"2022-10-13"},{"lineNumber":58,"author":{"gitId":"NicholasTYD"},"content":"            addAddressPredicate(personPredicates);","lastModifiedDate":"2022-10-16"},{"lineNumber":59,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-13"},{"lineNumber":60,"author":{"gitId":"NicholasTYD"},"content":"        if (!tagList.isEmpty()) {","lastModifiedDate":"2022-10-13"},{"lineNumber":61,"author":{"gitId":"NicholasTYD"},"content":"            addTagListPredicate(personPredicates);","lastModifiedDate":"2022-10-16"},{"lineNumber":62,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-13"},{"lineNumber":63,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":64,"author":{"gitId":"NicholasTYD"},"content":"        return personPredicates.stream().reduce(PREDICATE_SHOW_ALL_PERSONS, Predicate::and);","lastModifiedDate":"2022-10-28"},{"lineNumber":65,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-13"},{"lineNumber":66,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":67,"author":{"gitId":"NicholasTYD"},"content":"    private void addNamePredicate(List\u003cPredicate\u003cPerson\u003e\u003e personPredicates) {","lastModifiedDate":"2022-10-16"},{"lineNumber":68,"author":{"gitId":"NicholasTYD"},"content":"        Predicate\u003cPerson\u003e nameContainsSequencePredicate \u003d","lastModifiedDate":"2022-10-16"},{"lineNumber":69,"author":{"gitId":"NicholasTYD"},"content":"                person -\u003e StringUtil.containsIgnoreCase(person.getName().fullName, name);","lastModifiedDate":"2022-10-16"},{"lineNumber":70,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":71,"author":{"gitId":"NicholasTYD"},"content":"        personPredicates.add(nameContainsSequencePredicate);","lastModifiedDate":"2022-10-16"},{"lineNumber":72,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":73,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":74,"author":{"gitId":"NicholasTYD"},"content":"    private void addPhonePredicate(List\u003cPredicate\u003cPerson\u003e\u003e personPredicates) {","lastModifiedDate":"2022-10-16"},{"lineNumber":75,"author":{"gitId":"NicholasTYD"},"content":"        Predicate\u003cPerson\u003e phoneContainsSequencePredicate \u003d","lastModifiedDate":"2022-10-16"},{"lineNumber":76,"author":{"gitId":"NicholasTYD"},"content":"                person -\u003e StringUtil.containsIgnoreCase(person.getPhone().value, phone);","lastModifiedDate":"2022-10-16"},{"lineNumber":77,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":78,"author":{"gitId":"NicholasTYD"},"content":"        personPredicates.add(phoneContainsSequencePredicate);","lastModifiedDate":"2022-10-16"},{"lineNumber":79,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":80,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":81,"author":{"gitId":"NicholasTYD"},"content":"    private void addEmailPredicate(List\u003cPredicate\u003cPerson\u003e\u003e personPredicates) {","lastModifiedDate":"2022-10-16"},{"lineNumber":82,"author":{"gitId":"NicholasTYD"},"content":"        Predicate\u003cPerson\u003e emailContainsSequencePredicate \u003d","lastModifiedDate":"2022-10-16"},{"lineNumber":83,"author":{"gitId":"NicholasTYD"},"content":"                person -\u003e StringUtil.containsIgnoreCase(person.getEmail().value, email);","lastModifiedDate":"2022-10-16"},{"lineNumber":84,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":85,"author":{"gitId":"NicholasTYD"},"content":"        personPredicates.add(emailContainsSequencePredicate);","lastModifiedDate":"2022-10-16"},{"lineNumber":86,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":87,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":88,"author":{"gitId":"NicholasTYD"},"content":"    private void addAddressPredicate(List\u003cPredicate\u003cPerson\u003e\u003e personPredicates) {","lastModifiedDate":"2022-10-16"},{"lineNumber":89,"author":{"gitId":"NicholasTYD"},"content":"        Predicate\u003cPerson\u003e addressContainsSequencePredicate \u003d","lastModifiedDate":"2022-10-16"},{"lineNumber":90,"author":{"gitId":"NicholasTYD"},"content":"                person -\u003e StringUtil.containsIgnoreCase(person.getAddress().value, address);","lastModifiedDate":"2022-10-16"},{"lineNumber":91,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":92,"author":{"gitId":"NicholasTYD"},"content":"        personPredicates.add(addressContainsSequencePredicate);","lastModifiedDate":"2022-10-16"},{"lineNumber":93,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":94,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":95,"author":{"gitId":"NicholasTYD"},"content":"    private void addTagListPredicate(List\u003cPredicate\u003cPerson\u003e\u003e personPredicates) {","lastModifiedDate":"2022-10-16"},{"lineNumber":96,"author":{"gitId":"NicholasTYD"},"content":"        Predicate\u003cPerson\u003e personContainsTagsPredicate \u003d","lastModifiedDate":"2022-10-16"},{"lineNumber":97,"author":{"gitId":"NicholasTYD"},"content":"                person -\u003e StringUtil.containsAllTagsIgnoreCase(person.getTags(), tagList);","lastModifiedDate":"2022-10-25"},{"lineNumber":98,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":99,"author":{"gitId":"NicholasTYD"},"content":"        personPredicates.add(personContainsTagsPredicate);","lastModifiedDate":"2022-10-16"},{"lineNumber":100,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":101,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":102,"author":{"gitId":"NicholasTYD"},"content":"    @Override","lastModifiedDate":"2022-10-13"},{"lineNumber":103,"author":{"gitId":"NicholasTYD"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2022-10-13"},{"lineNumber":104,"author":{"gitId":"NicholasTYD"},"content":"        return combinedPredicate.test(person);","lastModifiedDate":"2022-10-13"},{"lineNumber":105,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-13"},{"lineNumber":106,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":107,"author":{"gitId":"NicholasTYD"},"content":"    @Override","lastModifiedDate":"2022-10-13"},{"lineNumber":108,"author":{"gitId":"NicholasTYD"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-13"},{"lineNumber":109,"author":{"gitId":"NicholasTYD"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-13"},{"lineNumber":110,"author":{"gitId":"NicholasTYD"},"content":"            return true;","lastModifiedDate":"2022-10-13"},{"lineNumber":111,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-13"},{"lineNumber":112,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":113,"author":{"gitId":"NicholasTYD"},"content":"        if (!(other instanceof CombinedPersonPredicate)) {","lastModifiedDate":"2022-10-13"},{"lineNumber":114,"author":{"gitId":"NicholasTYD"},"content":"            return false;","lastModifiedDate":"2022-10-13"},{"lineNumber":115,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-13"},{"lineNumber":116,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":117,"author":{"gitId":"NicholasTYD"},"content":"        CombinedPersonPredicate otherPredicate \u003d (CombinedPersonPredicate) other;","lastModifiedDate":"2022-10-13"},{"lineNumber":118,"author":{"gitId":"NicholasTYD"},"content":"        return name.equals(otherPredicate.name) \u0026\u0026 phone.equals(otherPredicate.phone)","lastModifiedDate":"2022-10-13"},{"lineNumber":119,"author":{"gitId":"NicholasTYD"},"content":"                \u0026\u0026 email.equals(otherPredicate.email) \u0026\u0026 address.equals(otherPredicate.address)","lastModifiedDate":"2022-10-13"},{"lineNumber":120,"author":{"gitId":"NicholasTYD"},"content":"                \u0026\u0026 tagList.equals(otherPredicate.tagList);","lastModifiedDate":"2022-10-13"},{"lineNumber":121,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-13"},{"lineNumber":122,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-13"}],"authorContributionMap":{"NicholasTYD":122}},{"path":"src/main/java/seedu/address/model/person/predicates/HiddenPredicateSingleton.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2022-10-21"},{"lineNumber":2,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":3,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":4,"author":{"gitId":"guanzhou03"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-16"},{"lineNumber":5,"author":{"gitId":"guanzhou03"},"content":"import java.util.List;","lastModifiedDate":"2022-10-16"},{"lineNumber":6,"author":{"gitId":"guanzhou03"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-16"},{"lineNumber":7,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":8,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-16"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-21"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-21"},{"lineNumber":11,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":"/**","lastModifiedDate":"2022-10-16"},{"lineNumber":14,"author":{"gitId":"guanzhou03"},"content":" * Tests that a {@code Person}\u0027s {@code Name} is contained inside the current list of hidden persons.","lastModifiedDate":"2022-10-16"},{"lineNumber":15,"author":{"gitId":"guanzhou03"},"content":" */","lastModifiedDate":"2022-10-16"},{"lineNumber":16,"author":{"gitId":"guanzhou03"},"content":"public class HiddenPredicateSingleton implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2022-10-16"},{"lineNumber":17,"author":{"gitId":"guanzhou03"},"content":"    private static HiddenPredicateSingleton instance \u003d new HiddenPredicateSingleton();","lastModifiedDate":"2022-10-16"},{"lineNumber":18,"author":{"gitId":"guanzhou03"},"content":"    private Predicate\u003cPerson\u003e currPersonPredicate \u003d Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2022-11-05"},{"lineNumber":19,"author":{"gitId":"guanzhou03"},"content":"    private Predicate\u003cAppointment\u003e currApptPredicate \u003d Model.PREDICATE_SHOW_ALL_APPOINTMENTS;","lastModifiedDate":"2022-11-05"},{"lineNumber":20,"author":{"gitId":"guanzhou03"},"content":"    private List\u003cPerson\u003e hiddenPersons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-11-05"},{"lineNumber":21,"author":{"gitId":"guanzhou03"},"content":"    private List\u003cAppointment\u003e hiddenAppts \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-11-05"},{"lineNumber":22,"author":{"gitId":"guanzhou03"},"content":"    private HiddenPredicateSingleton() {}","lastModifiedDate":"2022-10-16"},{"lineNumber":23,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":24,"author":{"gitId":"guanzhou03"},"content":"    @Override","lastModifiedDate":"2022-10-16"},{"lineNumber":25,"author":{"gitId":"guanzhou03"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2022-10-16"},{"lineNumber":26,"author":{"gitId":"guanzhou03"},"content":"        if (hiddenPersons.contains(person)) {","lastModifiedDate":"2022-10-16"},{"lineNumber":27,"author":{"gitId":"guanzhou03"},"content":"            return true;","lastModifiedDate":"2022-10-16"},{"lineNumber":28,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":29,"author":{"gitId":"guanzhou03"},"content":"        return false;","lastModifiedDate":"2022-10-16"},{"lineNumber":30,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":31,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":32,"author":{"gitId":"guanzhou03"},"content":"    @Override","lastModifiedDate":"2022-10-16"},{"lineNumber":33,"author":{"gitId":"guanzhou03"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-16"},{"lineNumber":34,"author":{"gitId":"guanzhou03"},"content":"        return other \u003d\u003d this; // singleton only 1 instance","lastModifiedDate":"2022-10-16"},{"lineNumber":35,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":36,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":37,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":38,"author":{"gitId":"guanzhou03"},"content":"     * Adds to the current list of hidden persons.","lastModifiedDate":"2022-10-16"},{"lineNumber":39,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":40,"author":{"gitId":"guanzhou03"},"content":"     * @param p Person to be hidden.","lastModifiedDate":"2022-10-16"},{"lineNumber":41,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":42,"author":{"gitId":"guanzhou03"},"content":"    public void addToHiddenPersonList(Person p) {","lastModifiedDate":"2022-11-05"},{"lineNumber":43,"author":{"gitId":"guanzhou03"},"content":"        hiddenPersons.add(p);","lastModifiedDate":"2022-10-16"},{"lineNumber":44,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":45,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":46,"author":{"gitId":"guanzhou03"},"content":"    public static HiddenPredicateSingleton getInstance() {","lastModifiedDate":"2022-10-16"},{"lineNumber":47,"author":{"gitId":"guanzhou03"},"content":"        return instance;","lastModifiedDate":"2022-10-16"},{"lineNumber":48,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":49,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":50,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":51,"author":{"gitId":"guanzhou03"},"content":"     * Combines the current predicate shown on idENTify with the new predicate to hide patients by name or tag.","lastModifiedDate":"2022-10-16"},{"lineNumber":52,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":53,"author":{"gitId":"guanzhou03"},"content":"     * @param p Predicate to exclude patients by.","lastModifiedDate":"2022-10-16"},{"lineNumber":54,"author":{"gitId":"guanzhou03"},"content":"     * @return The predicate result of combining the exclusion predicate with the current predicate.","lastModifiedDate":"2022-10-16"},{"lineNumber":55,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":56,"author":{"gitId":"guanzhou03"},"content":"    public Predicate\u003cPerson\u003e combineWithHiddenPredicate(Predicate\u003cPerson\u003e p) {","lastModifiedDate":"2022-11-05"},{"lineNumber":57,"author":{"gitId":"guanzhou03"},"content":"        currPersonPredicate \u003d currPersonPredicate.and(Predicate.not(p));","lastModifiedDate":"2022-10-16"},{"lineNumber":58,"author":{"gitId":"guanzhou03"},"content":"        return currPersonPredicate;","lastModifiedDate":"2022-10-16"},{"lineNumber":59,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":60,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":61,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-10-27"},{"lineNumber":62,"author":{"gitId":"pwjj2000"},"content":"     * Combines the current predicate shown on idENTify with a new person predicate.","lastModifiedDate":"2022-11-06"},{"lineNumber":63,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":64,"author":{"gitId":"guanzhou03"},"content":"     * @param p Predicate for the current model.","lastModifiedDate":"2022-10-27"},{"lineNumber":65,"author":{"gitId":"guanzhou03"},"content":"     * @return The predicate result of combining the new predicate with the current predicate.","lastModifiedDate":"2022-10-27"},{"lineNumber":66,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-10-27"},{"lineNumber":67,"author":{"gitId":"guanzhou03"},"content":"    public Predicate\u003cPerson\u003e combineWithRegularPredicate(Predicate\u003cPerson\u003e p) {","lastModifiedDate":"2022-11-05"},{"lineNumber":68,"author":{"gitId":"guanzhou03"},"content":"        currPersonPredicate \u003d currPersonPredicate.and(p);","lastModifiedDate":"2022-10-27"},{"lineNumber":69,"author":{"gitId":"guanzhou03"},"content":"        return currPersonPredicate;","lastModifiedDate":"2022-10-27"},{"lineNumber":70,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-27"},{"lineNumber":71,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-27"},{"lineNumber":72,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-10-27"},{"lineNumber":73,"author":{"gitId":"pwjj2000"},"content":"     * Combines the current predicate shown on idENTify with a new appointment predicate.","lastModifiedDate":"2022-11-06"},{"lineNumber":74,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":75,"author":{"gitId":"guanzhou03"},"content":"     * @param p Predicate for the current model.","lastModifiedDate":"2022-10-27"},{"lineNumber":76,"author":{"gitId":"guanzhou03"},"content":"     * @return The predicate result of combining the new predicate with the current predicate.","lastModifiedDate":"2022-10-27"},{"lineNumber":77,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-10-27"},{"lineNumber":78,"author":{"gitId":"guanzhou03"},"content":"    public Predicate\u003cAppointment\u003e combineWithRegularApptPredicate(Predicate\u003cAppointment\u003e p) {","lastModifiedDate":"2022-11-05"},{"lineNumber":79,"author":{"gitId":"guanzhou03"},"content":"        currApptPredicate \u003d currApptPredicate.and(p);","lastModifiedDate":"2022-10-27"},{"lineNumber":80,"author":{"gitId":"guanzhou03"},"content":"        return currApptPredicate;","lastModifiedDate":"2022-10-27"},{"lineNumber":81,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-27"},{"lineNumber":82,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-27"},{"lineNumber":83,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-10-25"},{"lineNumber":84,"author":{"gitId":"guanzhou03"},"content":"     * Combines the current predicate shown on idENTify with the new predicate to unhide patients by name or tag.","lastModifiedDate":"2022-10-25"},{"lineNumber":85,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":86,"author":{"gitId":"guanzhou03"},"content":"     * @param p Predicate to show patients by.","lastModifiedDate":"2022-10-25"},{"lineNumber":87,"author":{"gitId":"guanzhou03"},"content":"     * @return The predicate result of combining the non-exclusion predicate with the current predicate.","lastModifiedDate":"2022-10-25"},{"lineNumber":88,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-10-25"},{"lineNumber":89,"author":{"gitId":"guanzhou03"},"content":"    public Predicate\u003cPerson\u003e combineWithUnhiddenPredicate(Predicate\u003cPerson\u003e p) {","lastModifiedDate":"2022-11-05"},{"lineNumber":90,"author":{"gitId":"guanzhou03"},"content":"        currPersonPredicate \u003d currPersonPredicate.or(p);","lastModifiedDate":"2022-10-25"},{"lineNumber":91,"author":{"gitId":"guanzhou03"},"content":"        return currPersonPredicate;","lastModifiedDate":"2022-10-25"},{"lineNumber":92,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-25"},{"lineNumber":93,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":94,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":95,"author":{"gitId":"guanzhou03"},"content":"     * Combines current predicate with the new appointment predicate.","lastModifiedDate":"2022-10-21"},{"lineNumber":96,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":97,"author":{"gitId":"guanzhou03"},"content":"     * @param a Predicate to exclude the appointment.","lastModifiedDate":"2022-10-21"},{"lineNumber":98,"author":{"gitId":"guanzhou03"},"content":"     * @return The predicate result of combining the appointment predicate with the current predicate.","lastModifiedDate":"2022-10-21"},{"lineNumber":99,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":100,"author":{"gitId":"guanzhou03"},"content":"    public Predicate\u003cAppointment\u003e combineWithApptPredicate(Predicate\u003cAppointment\u003e a) {","lastModifiedDate":"2022-11-05"},{"lineNumber":101,"author":{"gitId":"guanzhou03"},"content":"        currApptPredicate \u003d currApptPredicate.and(Predicate.not(a));","lastModifiedDate":"2022-10-16"},{"lineNumber":102,"author":{"gitId":"guanzhou03"},"content":"        return currApptPredicate;","lastModifiedDate":"2022-10-16"},{"lineNumber":103,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":104,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":105,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-10-25"},{"lineNumber":106,"author":{"gitId":"guanzhou03"},"content":"     * Combines current predicate with the new appointment predicate.","lastModifiedDate":"2022-10-25"},{"lineNumber":107,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":108,"author":{"gitId":"guanzhou03"},"content":"     * @param a Predicate to include the appointment.","lastModifiedDate":"2022-10-25"},{"lineNumber":109,"author":{"gitId":"guanzhou03"},"content":"     * @return The predicate result of combining the appointment predicate with the current predicate.","lastModifiedDate":"2022-10-25"},{"lineNumber":110,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-10-25"},{"lineNumber":111,"author":{"gitId":"guanzhou03"},"content":"    public Predicate\u003cAppointment\u003e combineWithUnhiddenApptPredicate(Predicate\u003cAppointment\u003e a) {","lastModifiedDate":"2022-11-05"},{"lineNumber":112,"author":{"gitId":"guanzhou03"},"content":"        currApptPredicate \u003d currApptPredicate.or(a);","lastModifiedDate":"2022-10-25"},{"lineNumber":113,"author":{"gitId":"guanzhou03"},"content":"        return currApptPredicate;","lastModifiedDate":"2022-10-25"},{"lineNumber":114,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-25"},{"lineNumber":115,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":116,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":117,"author":{"gitId":"guanzhou03"},"content":"     * Resets the list of hidden patients to empty.","lastModifiedDate":"2022-10-21"},{"lineNumber":118,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":119,"author":{"gitId":"guanzhou03"},"content":"    public void clearHiddenPatients() {","lastModifiedDate":"2022-11-05"},{"lineNumber":120,"author":{"gitId":"guanzhou03"},"content":"        currPersonPredicate \u003d Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2022-10-17"},{"lineNumber":121,"author":{"gitId":"guanzhou03"},"content":"        hiddenPersons.clear();","lastModifiedDate":"2022-10-16"},{"lineNumber":122,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":123,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":124,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":125,"author":{"gitId":"guanzhou03"},"content":"     * Resets the list of hidden appointments to empty.","lastModifiedDate":"2022-10-21"},{"lineNumber":126,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":127,"author":{"gitId":"guanzhou03"},"content":"    public void clearHiddenAppts() {","lastModifiedDate":"2022-11-05"},{"lineNumber":128,"author":{"gitId":"guanzhou03"},"content":"        currApptPredicate \u003d Model.PREDICATE_SHOW_ALL_APPOINTMENTS;","lastModifiedDate":"2022-10-17"},{"lineNumber":129,"author":{"gitId":"guanzhou03"},"content":"        hiddenAppts.clear();","lastModifiedDate":"2022-10-16"},{"lineNumber":130,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":131,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":132,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-24"},{"lineNumber":133,"author":{"gitId":"NicholasTYD"},"content":"     * Resets the list of hidden patients and appointments to empty.","lastModifiedDate":"2022-10-24"},{"lineNumber":134,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-24"},{"lineNumber":135,"author":{"gitId":"guanzhou03"},"content":"    public void clearHiddenAll() {","lastModifiedDate":"2022-11-05"},{"lineNumber":136,"author":{"gitId":"NicholasTYD"},"content":"        clearHiddenPatients();","lastModifiedDate":"2022-10-24"},{"lineNumber":137,"author":{"gitId":"NicholasTYD"},"content":"        clearHiddenAppts();","lastModifiedDate":"2022-10-24"},{"lineNumber":138,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":139,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":140,"author":{"gitId":"guanzhou03"},"content":"    public Predicate\u003cPerson\u003e getCurrPersonPredicate() {","lastModifiedDate":"2022-11-05"},{"lineNumber":141,"author":{"gitId":"NicholasTYD"},"content":"        return currPersonPredicate;","lastModifiedDate":"2022-10-27"},{"lineNumber":142,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-27"},{"lineNumber":143,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-27"},{"lineNumber":144,"author":{"gitId":"guanzhou03"},"content":"    public Predicate\u003cAppointment\u003e getCurrApptPredicate() {","lastModifiedDate":"2022-11-05"},{"lineNumber":145,"author":{"gitId":"guanzhou03"},"content":"        return currApptPredicate;","lastModifiedDate":"2022-10-16"},{"lineNumber":146,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":147,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":148,"author":{"gitId":"guanzhou03"},"content":"}","lastModifiedDate":"2022-10-16"}],"authorContributionMap":{"NicholasTYD":10,"JovonLim":3,"guanzhou03":126,"pwjj2000":9}},{"path":"src/main/java/seedu/address/model/person/predicates/HideAppointmentPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2022-10-21"},{"lineNumber":2,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":3,"author":{"gitId":"guanzhou03"},"content":"import java.util.List;","lastModifiedDate":"2022-10-16"},{"lineNumber":4,"author":{"gitId":"guanzhou03"},"content":"import java.util.Set;","lastModifiedDate":"2022-10-16"},{"lineNumber":5,"author":{"gitId":"guanzhou03"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-16"},{"lineNumber":6,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2022-10-27"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-21"},{"lineNumber":9,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2022-10-16"},{"lineNumber":10,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":11,"author":{"gitId":"guanzhou03"},"content":"/**","lastModifiedDate":"2022-10-16"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2022-10-16"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":" */","lastModifiedDate":"2022-10-16"},{"lineNumber":14,"author":{"gitId":"guanzhou03"},"content":"public class HideAppointmentPredicate implements Predicate\u003cAppointment\u003e {","lastModifiedDate":"2022-10-16"},{"lineNumber":15,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":16,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"guanzhou03"},"content":"     * The conditions that we can hide the appointments by.","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":19,"author":{"gitId":"guanzhou03"},"content":"    public enum HideBy {","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"guanzhou03"},"content":"        TAG, KEYWORD, IS_MARKED","lastModifiedDate":"2022-10-16"},{"lineNumber":21,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":22,"author":{"gitId":"guanzhou03"},"content":"    private final HideBy condition;","lastModifiedDate":"2022-10-21"},{"lineNumber":23,"author":{"gitId":"guanzhou03"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2022-10-26"},{"lineNumber":24,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":25,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":26,"author":{"gitId":"guanzhou03"},"content":"     * Constructor to initialise the hide appointment predicate.","lastModifiedDate":"2022-10-21"},{"lineNumber":27,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":28,"author":{"gitId":"guanzhou03"},"content":"     * @param condition The condition to hide appointment by.","lastModifiedDate":"2022-10-21"},{"lineNumber":29,"author":{"gitId":"guanzhou03"},"content":"     * @param keywords The keywords to search for within the tag/reason/status.","lastModifiedDate":"2022-10-21"},{"lineNumber":30,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":31,"author":{"gitId":"guanzhou03"},"content":"    public HideAppointmentPredicate(HideBy condition, List\u003cString\u003e keywords) {","lastModifiedDate":"2022-10-26"},{"lineNumber":32,"author":{"gitId":"guanzhou03"},"content":"        this.condition \u003d condition;","lastModifiedDate":"2022-10-16"},{"lineNumber":33,"author":{"gitId":"guanzhou03"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2022-10-16"},{"lineNumber":34,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":35,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":36,"author":{"gitId":"guanzhou03"},"content":"    @Override","lastModifiedDate":"2022-10-16"},{"lineNumber":37,"author":{"gitId":"guanzhou03"},"content":"    public boolean test(Appointment appt) {","lastModifiedDate":"2022-10-16"},{"lineNumber":38,"author":{"gitId":"guanzhou03"},"content":"        boolean passed \u003d false;","lastModifiedDate":"2022-10-21"},{"lineNumber":39,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":40,"author":{"gitId":"guanzhou03"},"content":"        switch (condition) {","lastModifiedDate":"2022-10-16"},{"lineNumber":41,"author":{"gitId":"guanzhou03"},"content":"        case KEYWORD:","lastModifiedDate":"2022-10-16"},{"lineNumber":42,"author":{"gitId":"guanzhou03"},"content":"            passed \u003d keywords.stream()","lastModifiedDate":"2022-10-26"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsIgnoreCase(appt.getReason(), keyword));","lastModifiedDate":"2022-10-27"},{"lineNumber":44,"author":{"gitId":"guanzhou03"},"content":"            break;","lastModifiedDate":"2022-10-16"},{"lineNumber":45,"author":{"gitId":"guanzhou03"},"content":"        case TAG:","lastModifiedDate":"2022-10-21"},{"lineNumber":46,"author":{"gitId":"guanzhou03"},"content":"            Set\u003cTag\u003e tags \u003d appt.getTags();","lastModifiedDate":"2022-10-21"},{"lineNumber":47,"author":{"gitId":"guanzhou03"},"content":"            for (Tag t: tags) {","lastModifiedDate":"2022-10-21"},{"lineNumber":48,"author":{"gitId":"guanzhou03"},"content":"                if (keywords.stream().anyMatch(t.toString()::equalsIgnoreCase)) {","lastModifiedDate":"2022-10-26"},{"lineNumber":49,"author":{"gitId":"guanzhou03"},"content":"                    passed \u003d true;","lastModifiedDate":"2022-10-21"},{"lineNumber":50,"author":{"gitId":"guanzhou03"},"content":"                }","lastModifiedDate":"2022-10-21"},{"lineNumber":51,"author":{"gitId":"guanzhou03"},"content":"            }","lastModifiedDate":"2022-10-21"},{"lineNumber":52,"author":{"gitId":"guanzhou03"},"content":"            break;","lastModifiedDate":"2022-10-21"},{"lineNumber":53,"author":{"gitId":"guanzhou03"},"content":"        case IS_MARKED:","lastModifiedDate":"2022-10-16"},{"lineNumber":54,"author":{"gitId":"guanzhou03"},"content":"            String kw \u003d keywords.get(0);","lastModifiedDate":"2022-10-26"},{"lineNumber":55,"author":{"gitId":"guanzhou03"},"content":"            passed \u003d kw.equalsIgnoreCase(\"marked\") || kw.equalsIgnoreCase(\"m\")","lastModifiedDate":"2022-11-05"},{"lineNumber":56,"author":{"gitId":"guanzhou03"},"content":"                    ? appt.isMarked() : !appt.isMarked();","lastModifiedDate":"2022-11-05"},{"lineNumber":57,"author":{"gitId":"guanzhou03"},"content":"            break;","lastModifiedDate":"2022-10-16"},{"lineNumber":58,"author":{"gitId":"guanzhou03"},"content":"        default:","lastModifiedDate":"2022-10-16"},{"lineNumber":59,"author":{"gitId":"guanzhou03"},"content":"            assert false : condition; //should not reach here","lastModifiedDate":"2022-10-16"},{"lineNumber":60,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-16"},{"lineNumber":61,"author":{"gitId":"guanzhou03"},"content":"        return passed;","lastModifiedDate":"2022-10-16"},{"lineNumber":62,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":63,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":64,"author":{"gitId":"guanzhou03"},"content":"    @Override","lastModifiedDate":"2022-10-16"},{"lineNumber":65,"author":{"gitId":"guanzhou03"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-16"},{"lineNumber":66,"author":{"gitId":"guanzhou03"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-16"},{"lineNumber":67,"author":{"gitId":"guanzhou03"},"content":"                || (other instanceof HideAppointmentPredicate // instanceof handles nulls","lastModifiedDate":"2022-10-16"},{"lineNumber":68,"author":{"gitId":"guanzhou03"},"content":"                \u0026\u0026 keywords.equals(((HideAppointmentPredicate) other).keywords)); // state check","lastModifiedDate":"2022-10-16"},{"lineNumber":69,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":70,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":71,"author":{"gitId":"guanzhou03"},"content":"}","lastModifiedDate":"2022-10-16"}],"authorContributionMap":{"NicholasTYD":2,"JovonLim":2,"guanzhou03":66,"pwjj2000":1}},{"path":"src/main/java/seedu/address/model/person/predicates/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2022-10-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2018-01-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2018-01-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":21,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-27"},{"lineNumber":22,"author":{"gitId":"guanzhou03"},"content":"        if (keywords.stream()","lastModifiedDate":"2022-10-14"},{"lineNumber":23,"author":{"gitId":"guanzhou03"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsIgnoreCase(person.getName().fullName, keyword))) {","lastModifiedDate":"2022-10-27"},{"lineNumber":24,"author":{"gitId":"guanzhou03"},"content":"            HiddenPredicateSingleton.getInstance().addToHiddenPersonList(person);","lastModifiedDate":"2022-11-05"},{"lineNumber":25,"author":{"gitId":"guanzhou03"},"content":"            return true;","lastModifiedDate":"2022-10-14"},{"lineNumber":26,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-14"},{"lineNumber":27,"author":{"gitId":"guanzhou03"},"content":"        return false;","lastModifiedDate":"2022-10-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"NicholasTYD":2,"-":28,"guanzhou03":7}},{"path":"src/main/java/seedu/address/model/person/predicates/TagContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2022-10-21"},{"lineNumber":2,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":3,"author":{"gitId":"guanzhou03"},"content":"import java.util.List;","lastModifiedDate":"2022-10-12"},{"lineNumber":4,"author":{"gitId":"guanzhou03"},"content":"import java.util.Set;","lastModifiedDate":"2022-10-12"},{"lineNumber":5,"author":{"gitId":"guanzhou03"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-12"},{"lineNumber":6,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-21"},{"lineNumber":8,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2022-10-12"},{"lineNumber":9,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":10,"author":{"gitId":"guanzhou03"},"content":"/**","lastModifiedDate":"2022-10-12"},{"lineNumber":11,"author":{"gitId":"guanzhou03"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2022-10-12"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":" */","lastModifiedDate":"2022-10-12"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":"public class TagContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2022-10-12"},{"lineNumber":14,"author":{"gitId":"guanzhou03"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2022-10-26"},{"lineNumber":15,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":16,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"guanzhou03"},"content":"     * Constructor for the tag predicate.","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":19,"author":{"gitId":"pwjj2000"},"content":"     * @param keywords List of keywords to be tested against.","lastModifiedDate":"2022-11-06"},{"lineNumber":20,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":21,"author":{"gitId":"guanzhou03"},"content":"    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2022-10-26"},{"lineNumber":22,"author":{"gitId":"guanzhou03"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2022-10-13"},{"lineNumber":23,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":24,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":25,"author":{"gitId":"guanzhou03"},"content":"    @Override","lastModifiedDate":"2022-10-12"},{"lineNumber":26,"author":{"gitId":"guanzhou03"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2022-10-12"},{"lineNumber":27,"author":{"gitId":"guanzhou03"},"content":"        Set\u003cTag\u003e tags \u003d person.getTags();","lastModifiedDate":"2022-10-12"},{"lineNumber":28,"author":{"gitId":"guanzhou03"},"content":"        for (Tag t: tags) {","lastModifiedDate":"2022-10-12"},{"lineNumber":29,"author":{"gitId":"guanzhou03"},"content":"            if (keywords.stream().anyMatch(t.toString()::equalsIgnoreCase)) {","lastModifiedDate":"2022-10-26"},{"lineNumber":30,"author":{"gitId":"guanzhou03"},"content":"                HiddenPredicateSingleton.getInstance().addToHiddenPersonList(person);","lastModifiedDate":"2022-11-05"},{"lineNumber":31,"author":{"gitId":"guanzhou03"},"content":"                return true;","lastModifiedDate":"2022-10-12"},{"lineNumber":32,"author":{"gitId":"guanzhou03"},"content":"            }","lastModifiedDate":"2022-10-12"},{"lineNumber":33,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-12"},{"lineNumber":34,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":35,"author":{"gitId":"guanzhou03"},"content":"        return false;","lastModifiedDate":"2022-10-12"},{"lineNumber":36,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":37,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":38,"author":{"gitId":"guanzhou03"},"content":"    @Override","lastModifiedDate":"2022-10-12"},{"lineNumber":39,"author":{"gitId":"guanzhou03"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-12"},{"lineNumber":40,"author":{"gitId":"guanzhou03"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-12"},{"lineNumber":41,"author":{"gitId":"guanzhou03"},"content":"                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2022-10-12"},{"lineNumber":42,"author":{"gitId":"guanzhou03"},"content":"                \u0026\u0026 keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2022-10-13"},{"lineNumber":43,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-12"},{"lineNumber":44,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-12"},{"lineNumber":45,"author":{"gitId":"guanzhou03"},"content":"}","lastModifiedDate":"2022-10-12"}],"authorContributionMap":{"JovonLim":2,"guanzhou03":41,"pwjj2000":2}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.tag;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Tag in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"pwjj2000"},"content":"public enum Tag {","lastModifiedDate":"2022-10-21"},{"lineNumber":11,"author":{"gitId":"pwjj2000"},"content":"    EAR(\"Ear\"), NOSE(\"Nose\"), THROAT(\"Throat\");","lastModifiedDate":"2022-10-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"pwjj2000"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Tag names should be ear, nose or throat (not case sensitive).\";","lastModifiedDate":"2022-10-21"},{"lineNumber":14,"author":{"gitId":"pwjj2000"},"content":"    private String tagName;","lastModifiedDate":"2022-10-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"pwjj2000"},"content":"    Tag(String tagName) {","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(tagName);","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"pwjj2000"},"content":"    public String toString() {","lastModifiedDate":"2022-10-21"},{"lineNumber":24,"author":{"gitId":"pwjj2000"},"content":"        return tagName;","lastModifiedDate":"2022-10-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"pwjj2000"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":28,"author":{"gitId":"pwjj2000"},"content":"     * Checks whether the given input is in the restricted list of possible names.","lastModifiedDate":"2022-10-21"},{"lineNumber":29,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-10-21"},{"lineNumber":30,"author":{"gitId":"pwjj2000"},"content":"     * @param test The given input.","lastModifiedDate":"2022-10-21"},{"lineNumber":31,"author":{"gitId":"pwjj2000"},"content":"     * @return Whether tag name is valid.","lastModifiedDate":"2022-11-06"},{"lineNumber":32,"author":{"gitId":"pwjj2000"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":33,"author":{"gitId":"pwjj2000"},"content":"    public static boolean isValidTagName(String test) {","lastModifiedDate":"2022-10-21"},{"lineNumber":34,"author":{"gitId":"pwjj2000"},"content":"        return test.equalsIgnoreCase(\"ear\")","lastModifiedDate":"2022-10-21"},{"lineNumber":35,"author":{"gitId":"pwjj2000"},"content":"                || test.equalsIgnoreCase(\"nose\")","lastModifiedDate":"2022-10-21"},{"lineNumber":36,"author":{"gitId":"pwjj2000"},"content":"                || test.equalsIgnoreCase(\"throat\");","lastModifiedDate":"2022-10-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":40,"author":{"gitId":"pwjj2000"},"content":"     * Converts the given input to {@code Tag} if possible.","lastModifiedDate":"2022-10-21"},{"lineNumber":41,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-10-21"},{"lineNumber":42,"author":{"gitId":"pwjj2000"},"content":"     * @param tagName The given input.","lastModifiedDate":"2022-10-21"},{"lineNumber":43,"author":{"gitId":"pwjj2000"},"content":"     * @return The resulting {@code Tag}.","lastModifiedDate":"2022-10-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":45,"author":{"gitId":"pwjj2000"},"content":"    public static Tag convertToTag(String tagName) {","lastModifiedDate":"2022-10-21"},{"lineNumber":46,"author":{"gitId":"pwjj2000"},"content":"        requireNonNull(tagName);","lastModifiedDate":"2022-10-21"},{"lineNumber":47,"author":{"gitId":"pwjj2000"},"content":"        if (tagName.equalsIgnoreCase(\"ear\")) {","lastModifiedDate":"2022-10-21"},{"lineNumber":48,"author":{"gitId":"pwjj2000"},"content":"            return Tag.EAR;","lastModifiedDate":"2022-10-21"},{"lineNumber":49,"author":{"gitId":"pwjj2000"},"content":"        } else if (tagName.equalsIgnoreCase(\"nose\")) {","lastModifiedDate":"2022-10-21"},{"lineNumber":50,"author":{"gitId":"pwjj2000"},"content":"            return Tag.NOSE;","lastModifiedDate":"2022-10-21"},{"lineNumber":51,"author":{"gitId":"pwjj2000"},"content":"        } else if (tagName.equalsIgnoreCase(\"throat\")) {","lastModifiedDate":"2022-10-21"},{"lineNumber":52,"author":{"gitId":"pwjj2000"},"content":"            return Tag.THROAT;","lastModifiedDate":"2022-10-21"},{"lineNumber":53,"author":{"gitId":"pwjj2000"},"content":"        } else {","lastModifiedDate":"2022-10-21"},{"lineNumber":54,"author":{"gitId":"pwjj2000"},"content":"            throw new IllegalArgumentException(MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":55,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"-":25,"pwjj2000":32}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;","lastModifiedDate":"2016-12-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-26"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-01"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"import java.util.Collections;","lastModifiedDate":"2022-10-26"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import java.util.List;","lastModifiedDate":"2022-10-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2016-12-20"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2016-12-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2016-12-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2016-12-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"    private static final Appointment appointmentAlex1 \u003d","lastModifiedDate":"2022-10-26"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"            new Appointment(\"Tinnitus\", LocalDateTime.parse(\"2022-12-10T13:30\"),","lastModifiedDate":"2022-10-26"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"                    List.of(0, 0, 0), Set.of(Tag.EAR), false);","lastModifiedDate":"2022-10-26"},{"lineNumber":28,"author":{"gitId":"NicholasTYD"},"content":"    private static final Appointment appointmentAlex2 \u003d","lastModifiedDate":"2022-10-26"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"            new Appointment(\"Monthly Checkup\", LocalDateTime.parse(\"2022-12-01T10:00\"),","lastModifiedDate":"2022-10-26"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"                    List.of(0, 1, 0), Collections.emptySet(), false);","lastModifiedDate":"2022-10-26"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"    private static final Appointment appointmentBernice1 \u003d","lastModifiedDate":"2022-10-26"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"            new Appointment(\"Sinus\", LocalDateTime.parse(\"2022-12-15T14:30\"),","lastModifiedDate":"2022-10-26"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"                    List.of(0, 0, 0), Set.of(Tag.NOSE), false);","lastModifiedDate":"2022-10-26"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"    private static final Appointment appointmentBernice2 \u003d","lastModifiedDate":"2022-10-26"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"            new Appointment(\"Tonsillitis\", LocalDateTime.parse(\"2022-12-11T16:30\"),","lastModifiedDate":"2022-10-26"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"                    List.of(0, 0, 0), Set.of(Tag.THROAT), false);","lastModifiedDate":"2022-10-26"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"    private static final Appointment appointmentCharlotte \u003d","lastModifiedDate":"2022-10-26"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"            new Appointment(\"Yearly Checkup\", LocalDateTime.parse(\"2023-01-17T10:00\"),","lastModifiedDate":"2022-10-26"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"                    List.of(1, 0, 0), Collections.emptySet(), false);","lastModifiedDate":"2022-10-26"},{"lineNumber":40,"author":{"gitId":"NicholasTYD"},"content":"    private static final Appointment appointmentDavid1 \u003d","lastModifiedDate":"2022-10-26"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"            new Appointment(\"COVID\", LocalDateTime.parse(\"2022-10-10T08:30\"),","lastModifiedDate":"2022-10-26"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"                    List.of(0, 0, 0), Set.of(Tag.THROAT), true);","lastModifiedDate":"2022-10-26"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"    private static final Appointment appointmentDavid2 \u003d","lastModifiedDate":"2022-10-26"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"            new Appointment(\"Sore Throat\", LocalDateTime.parse(\"2022-12-13T10:00\"),","lastModifiedDate":"2022-10-26"},{"lineNumber":45,"author":{"gitId":"NicholasTYD"},"content":"                    List.of(0, 0, 0), Set.of(Tag.THROAT), false);","lastModifiedDate":"2022-10-26"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"    private static final Appointment appointmentRoy \u003d","lastModifiedDate":"2022-10-26"},{"lineNumber":47,"author":{"gitId":"NicholasTYD"},"content":"            new Appointment(\"Sinus\", LocalDateTime.parse(\"2022-12-28T19:30\"),","lastModifiedDate":"2022-10-26"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"                    List.of(0, 0, 0), Set.of(Tag.NOSE), false);","lastModifiedDate":"2022-10-26"},{"lineNumber":49,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {","lastModifiedDate":"2016-12-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new Person[] {","lastModifiedDate":"2016-12-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":53,"author":{"gitId":"NicholasTYD"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"), List.of(appointmentAlex1, appointmentAlex2),","lastModifiedDate":"2022-10-26"},{"lineNumber":54,"author":{"gitId":"NicholasTYD"},"content":"                getTagSet(\"Ear\", \"Throat\")),","lastModifiedDate":"2022-10-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),","lastModifiedDate":"2022-10-26"},{"lineNumber":57,"author":{"gitId":"NicholasTYD"},"content":"                    List.of(appointmentBernice1, appointmentBernice2), getTagSet(\"Nose\", \"Throat\")),","lastModifiedDate":"2022-10-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":59,"author":{"gitId":"NicholasTYD"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), List.of(appointmentCharlotte),","lastModifiedDate":"2022-10-26"},{"lineNumber":60,"author":{"gitId":"JovonLim"},"content":"                getTagSet(\"Ear\")),","lastModifiedDate":"2022-10-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),","lastModifiedDate":"2022-10-26"},{"lineNumber":63,"author":{"gitId":"NicholasTYD"},"content":"                    List.of(appointmentDavid1, appointmentDavid2), getTagSet(\"Throat\")),","lastModifiedDate":"2022-10-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":65,"author":{"gitId":"JovonLim"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new ArrayList\u003c\u003e(),","lastModifiedDate":"2022-10-01"},{"lineNumber":66,"author":{"gitId":"JovonLim"},"content":"                getTagSet(\"Ear\")),","lastModifiedDate":"2022-10-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":68,"author":{"gitId":"NicholasTYD"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), List.of(appointmentRoy),","lastModifiedDate":"2022-10-26"},{"lineNumber":69,"author":{"gitId":"JovonLim"},"content":"                getTagSet(\"Nose\"))","lastModifiedDate":"2022-10-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":73,"author":{"gitId":"NicholasTYD"},"content":"    public static Appointment[] getSampleAppointments() {","lastModifiedDate":"2022-10-26"},{"lineNumber":74,"author":{"gitId":"NicholasTYD"},"content":"        return new Appointment[] {appointmentAlex1, appointmentAlex2, appointmentBernice1, appointmentBernice2,","lastModifiedDate":"2022-10-26"},{"lineNumber":75,"author":{"gitId":"NicholasTYD"},"content":"            appointmentCharlotte, appointmentDavid1, appointmentDavid2, appointmentRoy};","lastModifiedDate":"2022-10-26"},{"lineNumber":76,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-26"},{"lineNumber":77,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {","lastModifiedDate":"2016-12-20"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();","lastModifiedDate":"2017-04-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {","lastModifiedDate":"2022-10-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);","lastModifiedDate":"2022-10-26"},{"lineNumber":82,"author":{"gitId":"NicholasTYD"},"content":"            addAppointmentsIntoAddressBook(samplePerson, sampleAb);","lastModifiedDate":"2022-10-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2022-10-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":87,"author":{"gitId":"NicholasTYD"},"content":"    private static void addAppointmentsIntoAddressBook(Person samplePerson, AddressBook addressBook) {","lastModifiedDate":"2022-10-26"},{"lineNumber":88,"author":{"gitId":"NicholasTYD"},"content":"        for (Appointment appointment : samplePerson.getAppointments()) {","lastModifiedDate":"2022-10-26"},{"lineNumber":89,"author":{"gitId":"NicholasTYD"},"content":"            addressBook.addAppointment(appointment);","lastModifiedDate":"2022-10-26"},{"lineNumber":90,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-26"},{"lineNumber":91,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-26"},{"lineNumber":92,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":98,"author":{"gitId":"pwjj2000"},"content":"                .map(Tag::convertToTag)","lastModifiedDate":"2022-10-21"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"NicholasTYD":47,"JovonLim":5,"-":49,"pwjj2000":1}},{"path":"src/main/java/seedu/address/storage/AddressBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Represents a storage for {@link seedu.address.model.AddressBook}.","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public interface AddressBookStorage {","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}.","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2016-09-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @see #getAddressBookFilePath()","lastModifiedDate":"2016-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @param addressBook cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @see #saveAddressBook(ReadOnlyAddressBook)","lastModifiedDate":"2016-10-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;","lastModifiedDate":"2018-04-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"-":45,"pwjj2000":2}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedAppointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.storage;","lastModifiedDate":"2022-10-01"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":3,"author":{"gitId":"pwjj2000"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-21"},{"lineNumber":4,"author":{"gitId":"pwjj2000"},"content":"import java.util.HashSet;","lastModifiedDate":"2022-10-21"},{"lineNumber":5,"author":{"gitId":"pwjj2000"},"content":"import java.util.List;","lastModifiedDate":"2022-10-21"},{"lineNumber":6,"author":{"gitId":"pwjj2000"},"content":"import java.util.Set;","lastModifiedDate":"2022-10-21"},{"lineNumber":7,"author":{"gitId":"pwjj2000"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2022-10-21"},{"lineNumber":8,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2022-10-01"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2022-10-01"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2022-10-01"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":14,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2022-10-21"},{"lineNumber":15,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"/**","lastModifiedDate":"2022-10-01"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":" * Jackson-friendly version of {@link Appointment}.","lastModifiedDate":"2022-10-01"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":" */","lastModifiedDate":"2022-10-01"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"public class JsonAdaptedAppointment {","lastModifiedDate":"2022-10-01"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"    private final String reason;","lastModifiedDate":"2022-10-01"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"    private final String dateTime;","lastModifiedDate":"2022-10-01"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"    private final String period;","lastModifiedDate":"2022-10-14"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"    private final boolean isMarked;","lastModifiedDate":"2022-10-02"},{"lineNumber":25,"author":{"gitId":"pwjj2000"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-21"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"     * Converts a given {@code Appointment} into this class for Jackson use.","lastModifiedDate":"2022-10-01"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"    @JsonCreator","lastModifiedDate":"2022-10-01"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"    public JsonAdaptedAppointment(@JsonProperty(\"reason\") String reason,","lastModifiedDate":"2022-10-02"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"                                  @JsonProperty(\"dateTime\") String dateTime,","lastModifiedDate":"2022-10-02"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"                                  @JsonProperty(\"period\") String period,","lastModifiedDate":"2022-10-14"},{"lineNumber":34,"author":{"gitId":"pwjj2000"},"content":"                                  @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,","lastModifiedDate":"2022-10-21"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"                                  @JsonProperty(\"isMarked\") boolean isMarked) {","lastModifiedDate":"2022-10-02"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"        this.reason \u003d reason;","lastModifiedDate":"2022-10-01"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2022-10-01"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"        this.period \u003d period;","lastModifiedDate":"2022-10-14"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"        this.isMarked \u003d isMarked;","lastModifiedDate":"2022-10-02"},{"lineNumber":40,"author":{"gitId":"pwjj2000"},"content":"        if (tagged !\u003d null) {","lastModifiedDate":"2022-10-21"},{"lineNumber":41,"author":{"gitId":"pwjj2000"},"content":"            this.tagged.addAll(tagged);","lastModifiedDate":"2022-10-21"},{"lineNumber":42,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":46,"author":{"gitId":"JovonLim"},"content":"     * Converts a given {@code Appointment} into this class for Jackson use.","lastModifiedDate":"2022-10-01"},{"lineNumber":47,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":48,"author":{"gitId":"pwjj2000"},"content":"     * @param source Given appointment to be converted.","lastModifiedDate":"2022-11-06"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"    public JsonAdaptedAppointment(Appointment source) {","lastModifiedDate":"2022-10-01"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"        this.reason \u003d source.getReason();","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"JovonLim"},"content":"        this.dateTime \u003d source.getDateTime().format(Appointment.STORAGE_FORMATTER);","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"JovonLim"},"content":"        this.period \u003d source.getFormattedPeriod();","lastModifiedDate":"2022-10-14"},{"lineNumber":54,"author":{"gitId":"NicholasTYD"},"content":"        this.isMarked \u003d source.isMarked();","lastModifiedDate":"2022-10-02"},{"lineNumber":55,"author":{"gitId":"pwjj2000"},"content":"        tagged.addAll(source.getTags().stream()","lastModifiedDate":"2022-10-21"},{"lineNumber":56,"author":{"gitId":"pwjj2000"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2022-10-21"},{"lineNumber":57,"author":{"gitId":"pwjj2000"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2022-10-21"},{"lineNumber":58,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":59,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":60,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":61,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":62,"author":{"gitId":"JovonLim"},"content":"     * Converts this Jackson-friendly adapted appointment object into the model\u0027s {@code Appointment} object.","lastModifiedDate":"2022-10-01"},{"lineNumber":63,"author":{"gitId":"JovonLim"},"content":"     *","lastModifiedDate":"2022-10-01"},{"lineNumber":64,"author":{"gitId":"JovonLim"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted appointment.","lastModifiedDate":"2022-10-01"},{"lineNumber":65,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":66,"author":{"gitId":"JovonLim"},"content":"    public Appointment toModelType() throws IllegalValueException {","lastModifiedDate":"2022-10-01"},{"lineNumber":67,"author":{"gitId":"pwjj2000"},"content":"        final List\u003cTag\u003e appointmentTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-21"},{"lineNumber":68,"author":{"gitId":"pwjj2000"},"content":"        for (JsonAdaptedTag tag : tagged) {","lastModifiedDate":"2022-10-21"},{"lineNumber":69,"author":{"gitId":"pwjj2000"},"content":"            appointmentTags.add(tag.toModelType());","lastModifiedDate":"2022-10-21"},{"lineNumber":70,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":71,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":72,"author":{"gitId":"JovonLim"},"content":"        if (!Appointment.isValidReason(reason)) {","lastModifiedDate":"2022-10-01"},{"lineNumber":73,"author":{"gitId":"JovonLim"},"content":"            throw new IllegalValueException(Appointment.REASON_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-01"},{"lineNumber":74,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":75,"author":{"gitId":"JovonLim"},"content":"        if (!Appointment.isValidDateTime(dateTime)) {","lastModifiedDate":"2022-10-01"},{"lineNumber":76,"author":{"gitId":"JovonLim"},"content":"            throw new IllegalValueException(Appointment.DATE_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-01"},{"lineNumber":77,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":78,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":79,"author":{"gitId":"JovonLim"},"content":"        if (!Appointment.isValidTimePeriod(period)) {","lastModifiedDate":"2022-10-14"},{"lineNumber":80,"author":{"gitId":"JovonLim"},"content":"            throw new IllegalValueException(Appointment.TIME_PERIOD_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-14"},{"lineNumber":81,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-14"},{"lineNumber":82,"author":{"gitId":"pwjj2000"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(appointmentTags);","lastModifiedDate":"2022-10-21"},{"lineNumber":83,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":84,"author":{"gitId":"pwjj2000"},"content":"        return new Appointment(reason, dateTime, period, modelTags, isMarked);","lastModifiedDate":"2022-10-21"},{"lineNumber":85,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":86,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-01"}],"authorContributionMap":{"NicholasTYD":6,"JovonLim":55,"pwjj2000":25}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {","lastModifiedDate":"2018-12-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final String address;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"    private final List\u003cJsonAdaptedAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"            @JsonProperty(\"appointments\") List\u003cJsonAdaptedAppointment\u003e appointments,","lastModifiedDate":"2022-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"        if (appointments !\u003d null) {","lastModifiedDate":"2022-10-01"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"            this.appointments.addAll(appointments);","lastModifiedDate":"2022-10-01"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":58,"author":{"gitId":"pwjj2000"},"content":"     * @param source Given person to be converted.","lastModifiedDate":"2022-11-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"JovonLim"},"content":"        appointments.addAll(source.getAppointments().stream()","lastModifiedDate":"2022-10-01"},{"lineNumber":66,"author":{"gitId":"JovonLim"},"content":"                .map(JsonAdaptedAppointment::new)","lastModifiedDate":"2022-10-01"},{"lineNumber":67,"author":{"gitId":"JovonLim"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2022-10-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"JovonLim"},"content":"        final List\u003cAppointment\u003e modelAppointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-01"},{"lineNumber":85,"author":{"gitId":"JovonLim"},"content":"        for (JsonAdaptedAppointment appointment : appointments) {","lastModifiedDate":"2022-10-01"},{"lineNumber":86,"author":{"gitId":"JovonLim"},"content":"            modelAppointments.add(appointment.toModelType());","lastModifiedDate":"2022-10-01"},{"lineNumber":87,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":88,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"WingKei67"},"content":"        if (!email.isEmpty() \u0026\u0026 !Email.isValidEmail(email)) {","lastModifiedDate":"2022-10-11"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"WingKei67"},"content":"        if (!address.isEmpty() \u0026\u0026 !Address.isValidAddress(address)) {","lastModifiedDate":"2022-10-11"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2018-08-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":122,"author":{"gitId":"pwjj2000"},"content":"        Person person \u003d new Person(modelName, modelPhone, modelEmail, modelAddress, modelAppointments, modelTags);","lastModifiedDate":"2022-10-06"},{"lineNumber":123,"author":{"gitId":"pwjj2000"},"content":"        for (Appointment appointment : modelAppointments) {","lastModifiedDate":"2022-10-06"},{"lineNumber":124,"author":{"gitId":"pwjj2000"},"content":"            appointment.setPatient(person);","lastModifiedDate":"2022-10-06"},{"lineNumber":125,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":126,"author":{"gitId":"pwjj2000"},"content":"        return person;","lastModifiedDate":"2022-10-06"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"JovonLim":14,"WingKei67":2,"-":106,"pwjj2000":7}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedTag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Tag}.","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"class JsonAdaptedTag {","lastModifiedDate":"2018-12-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final String tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}.","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":19,"author":{"gitId":"pwjj2000"},"content":"     * @param tagName Given tag name to be converted.","lastModifiedDate":"2022-11-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(String tagName) {","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Converts a given {@code Tag} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":29,"author":{"gitId":"pwjj2000"},"content":"     * @param source Given tag to be converted.","lastModifiedDate":"2022-11-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(Tag source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"WingKei67"},"content":"        tagName \u003d source.toString();","lastModifiedDate":"2022-10-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public String getTagName() {","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag.","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public Tag toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"pwjj2000"},"content":"        return Tag.convertToTag(tagName);","lastModifiedDate":"2022-10-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"WingKei67":1,"-":46,"pwjj2000":5}},{"path":"src/main/java/seedu/address/storage/JsonAddressBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.FileUtil;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A class to access AddressBook data stored as a json file on the hard disk.","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorage implements AddressBookStorage {","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Path filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public JsonAddressBookStorage(Path filePath) {","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return readAddressBook(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Similar to {@link #readAddressBook()}.","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"pwjj2000"},"content":"     * @return An address book if possible.","lastModifiedDate":"2022-11-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format.","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                filePath, JsonSerializableAddressBook.class);","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (!jsonAddressBook.isPresent()) {","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return Optional.of(jsonAddressBook.get().toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            throw new DataConversionException(ive);","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}.","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"pwjj2000"},"content":"     * @param addressBook Address book to be saved.","lastModifiedDate":"2022-11-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        requireNonNull(addressBook);","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"-":80,"pwjj2000":2}},{"path":"src/main/java/seedu/address/storage/JsonCommandHistoryStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.storage;","lastModifiedDate":"2022-10-21"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-21"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"import java.io.IOException;","lastModifiedDate":"2022-10-21"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import java.nio.file.Path;","lastModifiedDate":"2022-10-21"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"import java.util.Optional;","lastModifiedDate":"2022-10-21"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2022-10-21"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"import seedu.address.commons.util.FileUtil;","lastModifiedDate":"2022-10-21"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2022-10-21"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.CommandHistory;","lastModifiedDate":"2022-10-21"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"/**","lastModifiedDate":"2022-10-21"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":" * A class to access CommandHistory data stored as a json file on the hard disk.","lastModifiedDate":"2022-10-21"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":" */","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"public class JsonCommandHistoryStorage {","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"    private Path filePath;","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"    public JsonCommandHistoryStorage(Path filePath) {","lastModifiedDate":"2022-10-21"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2022-10-21"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"    public Path getCommandHistoryFilePath() {","lastModifiedDate":"2022-10-21"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"        return filePath;","lastModifiedDate":"2022-10-21"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"     * Reads the json file for the command history.","lastModifiedDate":"2022-10-21"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"     *","lastModifiedDate":"2022-10-21"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2022-10-21"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"     * @throws DataConversionException if the file is not in the correct format.","lastModifiedDate":"2022-10-21"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"    public Optional\u003cCommandHistory\u003e readCommandHistory(Path filePath) throws DataConversionException {","lastModifiedDate":"2022-10-21"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2022-10-21"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"        Optional\u003cCommandHistory\u003e commandHistory \u003d JsonUtil.readJsonFile(filePath, CommandHistory.class);","lastModifiedDate":"2022-10-21"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"        if (commandHistory.isEmpty()) {","lastModifiedDate":"2022-10-21"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"            return Optional.empty();","lastModifiedDate":"2022-10-21"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"        return commandHistory;","lastModifiedDate":"2022-10-21"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-21"},{"lineNumber":46,"author":{"gitId":"JovonLim"},"content":"     * Saves the command history into a json file.","lastModifiedDate":"2022-10-21"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"     *","lastModifiedDate":"2022-10-21"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"     * @param commandHistory The commandHistory of idENTify.","lastModifiedDate":"2022-10-21"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"     * @param filePath       location of the data. Cannot be null.","lastModifiedDate":"2022-10-21"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-21"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"    public void saveCommandHistory(CommandHistory commandHistory, Path filePath) throws IOException {","lastModifiedDate":"2022-10-21"},{"lineNumber":52,"author":{"gitId":"JovonLim"},"content":"        requireNonNull(commandHistory);","lastModifiedDate":"2022-10-21"},{"lineNumber":53,"author":{"gitId":"JovonLim"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2022-10-21"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2022-10-21"},{"lineNumber":55,"author":{"gitId":"JovonLim"},"content":"        JsonUtil.saveJsonFile(commandHistory, filePath);","lastModifiedDate":"2022-10-21"},{"lineNumber":56,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":57,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-21"}],"authorContributionMap":{"JovonLim":57}},{"path":"src/main/java/seedu/address/storage/JsonSerializableAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to JSON format.","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"@JsonRootName(value \u003d \"idENTify\")","lastModifiedDate":"2022-10-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"class JsonSerializableAddressBook {","lastModifiedDate":"2018-12-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonSerializableAddressBook} with the given persons.","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.persons.addAll(persons);","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}.","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Converts this address book into the model\u0027s {@code AddressBook} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            Person person \u003d jsonAdaptedPerson.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            if (addressBook.hasPerson(person)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"pwjj2000"},"content":"            List\u003cAppointment\u003e appointments \u003d person.getAppointments();","lastModifiedDate":"2022-10-06"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            addressBook.addPerson(person);","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"pwjj2000"},"content":"            for (Appointment appointment : appointments) {","lastModifiedDate":"2022-10-06"},{"lineNumber":59,"author":{"gitId":"pwjj2000"},"content":"                appointment.setPatient(person);","lastModifiedDate":"2022-10-06"},{"lineNumber":60,"author":{"gitId":"pwjj2000"},"content":"                addressBook.addAppointment(appointment);","lastModifiedDate":"2022-10-06"},{"lineNumber":61,"author":{"gitId":"pwjj2000"},"content":"            }","lastModifiedDate":"2022-10-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"JovonLim":1,"-":59,"pwjj2000":6}},{"path":"src/main/java/seedu/address/storage/JsonUserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2016-10-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A class to access UserPrefs stored in the hard disk as a json file","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorage implements UserPrefsStorage {","lastModifiedDate":"2016-10-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path filePath;","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public JsonUserPrefsStorage(Path filePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2017-02-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return readUserPrefs(filePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Similar to {@link #readUserPrefs()}","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @param prefsFilePath location of the data. Cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"pwjj2000"},"content":"     * @return User preferences if possible.","lastModifiedDate":"2022-11-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(userPrefs, filePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"-":47,"pwjj2000":2}},{"path":"src/main/java/seedu/address/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.CommandHistory;","lastModifiedDate":"2022-10-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-09-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * API of the Storage component","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public interface Storage extends AddressBookStorage, UserPrefsStorage {","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;","lastModifiedDate":"2016-10-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"    void saveCommandHistory(CommandHistory commandHistory) throws IOException;","lastModifiedDate":"2022-10-21"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"    Optional\u003cCommandHistory\u003e readCommandHistory() throws DataConversionException, IOException;","lastModifiedDate":"2022-10-21"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"JovonLim":4,"-":32}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-24"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.CommandHistory;","lastModifiedDate":"2022-10-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Manages storage of AddressBook data in local storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private AddressBookStorage addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"    private JsonCommandHistoryStorage commandHistoryStorage;","lastModifiedDate":"2022-10-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"     * Creates a {@code StorageManager} with the given {@code AddressBookStorage}, {@code UserPrefStorage} and","lastModifiedDate":"2022-10-21"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"     * {@code JsonCommandHistoryStorage}.","lastModifiedDate":"2022-10-21"},{"lineNumber":28,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":29,"author":{"gitId":"pwjj2000"},"content":"     * @param addressBookStorage Storage of address book entries.","lastModifiedDate":"2022-11-06"},{"lineNumber":30,"author":{"gitId":"pwjj2000"},"content":"     * @param userPrefsStorage Storage of user preferences.","lastModifiedDate":"2022-11-06"},{"lineNumber":31,"author":{"gitId":"pwjj2000"},"content":"     * @param commandHistoryStorage Storage of the command history of the app.","lastModifiedDate":"2022-11-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage,","lastModifiedDate":"2022-10-21"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"                          JsonCommandHistoryStorage commandHistoryStorage) {","lastModifiedDate":"2022-10-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"        this.commandHistoryStorage \u003d commandHistoryStorage;","lastModifiedDate":"2022-10-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();","lastModifiedDate":"2017-02-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();","lastModifiedDate":"2016-10-01"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-01"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {","lastModifiedDate":"2016-10-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"JovonLim"},"content":"    @Override","lastModifiedDate":"2022-10-21"},{"lineNumber":88,"author":{"gitId":"JovonLim"},"content":"    public void saveCommandHistory(CommandHistory commandHistory) throws IOException {","lastModifiedDate":"2022-10-21"},{"lineNumber":89,"author":{"gitId":"JovonLim"},"content":"        saveCommandHistory(commandHistory, commandHistoryStorage.getCommandHistoryFilePath());","lastModifiedDate":"2022-10-21"},{"lineNumber":90,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":91,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":92,"author":{"gitId":"JovonLim"},"content":"    private void saveCommandHistory(CommandHistory commandHistory, Path filePath) throws IOException {","lastModifiedDate":"2022-10-21"},{"lineNumber":93,"author":{"gitId":"JovonLim"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2022-10-21"},{"lineNumber":94,"author":{"gitId":"JovonLim"},"content":"        commandHistoryStorage.saveCommandHistory(commandHistory, filePath);","lastModifiedDate":"2022-10-21"},{"lineNumber":95,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":96,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":97,"author":{"gitId":"JovonLim"},"content":"    @Override","lastModifiedDate":"2022-10-21"},{"lineNumber":98,"author":{"gitId":"JovonLim"},"content":"    public Optional\u003cCommandHistory\u003e readCommandHistory() throws DataConversionException {","lastModifiedDate":"2022-10-21"},{"lineNumber":99,"author":{"gitId":"JovonLim"},"content":"        return readCommandHistory(commandHistoryStorage.getCommandHistoryFilePath());","lastModifiedDate":"2022-10-21"},{"lineNumber":100,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":101,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":102,"author":{"gitId":"JovonLim"},"content":"    private Optional\u003cCommandHistory\u003e readCommandHistory(Path filePath) throws DataConversionException {","lastModifiedDate":"2022-10-21"},{"lineNumber":103,"author":{"gitId":"JovonLim"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2022-10-21"},{"lineNumber":104,"author":{"gitId":"JovonLim"},"content":"        return commandHistoryStorage.readCommandHistory(filePath);","lastModifiedDate":"2022-10-21"},{"lineNumber":105,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"JovonLim":26,"-":76,"pwjj2000":4}},{"path":"src/main/java/seedu/address/storage/UserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents a storage for {@link seedu.address.model.UserPrefs}.","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface UserPrefsStorage {","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the UserPrefs data file.","lastModifiedDate":"2017-02-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Path getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns UserPrefs data from storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Saves the given {@link seedu.address.model.ReadOnlyUserPrefs} to the storage.","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param userPrefs cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"-":36,"pwjj2000":2}},{"path":"src/main/java/seedu/address/ui/AppointmentCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pwjj2000"},"content":"package seedu.address.ui;","lastModifiedDate":"2022-10-06"},{"lineNumber":2,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":3,"author":{"gitId":"pwjj2000"},"content":"import java.util.Comparator;","lastModifiedDate":"2022-10-21"},{"lineNumber":4,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":5,"author":{"gitId":"pwjj2000"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-10-06"},{"lineNumber":6,"author":{"gitId":"pwjj2000"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2022-10-06"},{"lineNumber":7,"author":{"gitId":"pwjj2000"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2022-10-21"},{"lineNumber":8,"author":{"gitId":"pwjj2000"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2022-10-06"},{"lineNumber":9,"author":{"gitId":"pwjj2000"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2022-10-06"},{"lineNumber":10,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-06"},{"lineNumber":11,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":12,"author":{"gitId":"pwjj2000"},"content":"/**","lastModifiedDate":"2022-10-06"},{"lineNumber":13,"author":{"gitId":"pwjj2000"},"content":" * A UI component that displays information of an {@code Appointment}.","lastModifiedDate":"2022-10-06"},{"lineNumber":14,"author":{"gitId":"pwjj2000"},"content":" */","lastModifiedDate":"2022-10-06"},{"lineNumber":15,"author":{"gitId":"pwjj2000"},"content":"public class AppointmentCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2022-10-06"},{"lineNumber":16,"author":{"gitId":"pwjj2000"},"content":"    private static final String FXML \u003d \"AppointmentListCard.fxml\";","lastModifiedDate":"2022-10-06"},{"lineNumber":17,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":18,"author":{"gitId":"pwjj2000"},"content":"    public final Appointment appointment;","lastModifiedDate":"2022-10-06"},{"lineNumber":19,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":20,"author":{"gitId":"pwjj2000"},"content":"    @FXML","lastModifiedDate":"2022-10-06"},{"lineNumber":21,"author":{"gitId":"pwjj2000"},"content":"    private HBox cardPane;","lastModifiedDate":"2022-10-06"},{"lineNumber":22,"author":{"gitId":"pwjj2000"},"content":"    @FXML","lastModifiedDate":"2022-10-06"},{"lineNumber":23,"author":{"gitId":"pwjj2000"},"content":"    private Label id;","lastModifiedDate":"2022-10-06"},{"lineNumber":24,"author":{"gitId":"pwjj2000"},"content":"    @FXML","lastModifiedDate":"2022-10-06"},{"lineNumber":25,"author":{"gitId":"pwjj2000"},"content":"    private Label patientName;","lastModifiedDate":"2022-10-06"},{"lineNumber":26,"author":{"gitId":"pwjj2000"},"content":"    @FXML","lastModifiedDate":"2022-10-06"},{"lineNumber":27,"author":{"gitId":"pwjj2000"},"content":"    private Label reason;","lastModifiedDate":"2022-10-06"},{"lineNumber":28,"author":{"gitId":"pwjj2000"},"content":"    @FXML","lastModifiedDate":"2022-10-06"},{"lineNumber":29,"author":{"gitId":"pwjj2000"},"content":"    private Label dateTime;","lastModifiedDate":"2022-10-06"},{"lineNumber":30,"author":{"gitId":"pwjj2000"},"content":"    @FXML","lastModifiedDate":"2022-10-06"},{"lineNumber":31,"author":{"gitId":"pwjj2000"},"content":"    private Label status;","lastModifiedDate":"2022-10-06"},{"lineNumber":32,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"    @FXML","lastModifiedDate":"2022-10-24"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"    private Label recurring;","lastModifiedDate":"2022-10-24"},{"lineNumber":35,"author":{"gitId":"pwjj2000"},"content":"    @FXML","lastModifiedDate":"2022-10-21"},{"lineNumber":36,"author":{"gitId":"pwjj2000"},"content":"    private FlowPane tags;","lastModifiedDate":"2022-10-21"},{"lineNumber":37,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":38,"author":{"gitId":"pwjj2000"},"content":"    /**","lastModifiedDate":"2022-10-06"},{"lineNumber":39,"author":{"gitId":"pwjj2000"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2022-10-06"},{"lineNumber":40,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":41,"author":{"gitId":"pwjj2000"},"content":"     * @param appointment Appointment to be shown on the UI.","lastModifiedDate":"2022-11-06"},{"lineNumber":42,"author":{"gitId":"pwjj2000"},"content":"     * @param displayedIndex Index to be shown on the UI.","lastModifiedDate":"2022-11-06"},{"lineNumber":43,"author":{"gitId":"pwjj2000"},"content":"     */","lastModifiedDate":"2022-10-06"},{"lineNumber":44,"author":{"gitId":"pwjj2000"},"content":"    public AppointmentCard(Appointment appointment, int displayedIndex) {","lastModifiedDate":"2022-10-06"},{"lineNumber":45,"author":{"gitId":"pwjj2000"},"content":"        super(FXML);","lastModifiedDate":"2022-10-06"},{"lineNumber":46,"author":{"gitId":"pwjj2000"},"content":"        this.appointment \u003d appointment;","lastModifiedDate":"2022-10-06"},{"lineNumber":47,"author":{"gitId":"pwjj2000"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2022-10-06"},{"lineNumber":48,"author":{"gitId":"pwjj2000"},"content":"        patientName.setText(appointment.getPatientName());","lastModifiedDate":"2022-10-06"},{"lineNumber":49,"author":{"gitId":"pwjj2000"},"content":"        reason.setText(appointment.getReason());","lastModifiedDate":"2022-10-06"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"        dateTime.setText(appointment.getFormattedDateTime());","lastModifiedDate":"2022-10-24"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"        recurring.setText(appointment.getRecurringStatus());","lastModifiedDate":"2022-10-24"},{"lineNumber":52,"author":{"gitId":"pwjj2000"},"content":"        status.setText(appointment.getStatus());","lastModifiedDate":"2022-10-06"},{"lineNumber":53,"author":{"gitId":"pwjj2000"},"content":"        appointment.getTags().stream()","lastModifiedDate":"2022-10-21"},{"lineNumber":54,"author":{"gitId":"WingKei67"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.toString()))","lastModifiedDate":"2022-10-22"},{"lineNumber":55,"author":{"gitId":"WingKei67"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.toString())));","lastModifiedDate":"2022-10-22"},{"lineNumber":56,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":57,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":58,"author":{"gitId":"pwjj2000"},"content":"    @Override","lastModifiedDate":"2022-10-06"},{"lineNumber":59,"author":{"gitId":"pwjj2000"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-06"},{"lineNumber":60,"author":{"gitId":"pwjj2000"},"content":"        // short circuit if same object","lastModifiedDate":"2022-10-06"},{"lineNumber":61,"author":{"gitId":"pwjj2000"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-06"},{"lineNumber":62,"author":{"gitId":"pwjj2000"},"content":"            return true;","lastModifiedDate":"2022-10-06"},{"lineNumber":63,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":64,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":65,"author":{"gitId":"pwjj2000"},"content":"        // instanceof handles nulls","lastModifiedDate":"2022-10-06"},{"lineNumber":66,"author":{"gitId":"pwjj2000"},"content":"        if (!(other instanceof AppointmentCard)) {","lastModifiedDate":"2022-10-06"},{"lineNumber":67,"author":{"gitId":"pwjj2000"},"content":"            return false;","lastModifiedDate":"2022-10-06"},{"lineNumber":68,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":69,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":70,"author":{"gitId":"pwjj2000"},"content":"        // state check","lastModifiedDate":"2022-10-06"},{"lineNumber":71,"author":{"gitId":"pwjj2000"},"content":"        AppointmentCard card \u003d (AppointmentCard) other;","lastModifiedDate":"2022-10-06"},{"lineNumber":72,"author":{"gitId":"pwjj2000"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2022-10-06"},{"lineNumber":73,"author":{"gitId":"pwjj2000"},"content":"                \u0026\u0026 appointment.equals(card.appointment);","lastModifiedDate":"2022-10-06"},{"lineNumber":74,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":75,"author":{"gitId":"pwjj2000"},"content":"}","lastModifiedDate":"2022-10-06"}],"authorContributionMap":{"JovonLim":4,"WingKei67":2,"pwjj2000":69}},{"path":"src/main/java/seedu/address/ui/AppointmentListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pwjj2000"},"content":"package seedu.address.ui;","lastModifiedDate":"2022-10-06"},{"lineNumber":2,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":3,"author":{"gitId":"pwjj2000"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2022-10-06"},{"lineNumber":4,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":5,"author":{"gitId":"pwjj2000"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-10-06"},{"lineNumber":6,"author":{"gitId":"pwjj2000"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-10-06"},{"lineNumber":7,"author":{"gitId":"pwjj2000"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2022-10-06"},{"lineNumber":8,"author":{"gitId":"pwjj2000"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2022-10-06"},{"lineNumber":9,"author":{"gitId":"pwjj2000"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2022-10-06"},{"lineNumber":10,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2022-10-06"},{"lineNumber":11,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-06"},{"lineNumber":12,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":13,"author":{"gitId":"pwjj2000"},"content":"/**","lastModifiedDate":"2022-10-06"},{"lineNumber":14,"author":{"gitId":"pwjj2000"},"content":" * Panel containing the list of appointments.","lastModifiedDate":"2022-10-06"},{"lineNumber":15,"author":{"gitId":"pwjj2000"},"content":" */","lastModifiedDate":"2022-10-06"},{"lineNumber":16,"author":{"gitId":"pwjj2000"},"content":"public class AppointmentListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2022-10-06"},{"lineNumber":17,"author":{"gitId":"pwjj2000"},"content":"    private static final String FXML \u003d \"AppointmentListPanel.fxml\";","lastModifiedDate":"2022-10-06"},{"lineNumber":18,"author":{"gitId":"pwjj2000"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(AppointmentListPanel.class);","lastModifiedDate":"2022-10-06"},{"lineNumber":19,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":20,"author":{"gitId":"pwjj2000"},"content":"    @FXML","lastModifiedDate":"2022-10-06"},{"lineNumber":21,"author":{"gitId":"pwjj2000"},"content":"    private ListView\u003cAppointment\u003e appointmentListView;","lastModifiedDate":"2022-10-06"},{"lineNumber":22,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":23,"author":{"gitId":"pwjj2000"},"content":"    /**","lastModifiedDate":"2022-10-06"},{"lineNumber":24,"author":{"gitId":"pwjj2000"},"content":"     * Creates a {@code AppointmentListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2022-10-06"},{"lineNumber":25,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":26,"author":{"gitId":"pwjj2000"},"content":"     * @param appointmentList List of appointments to show on the UI.","lastModifiedDate":"2022-11-06"},{"lineNumber":27,"author":{"gitId":"pwjj2000"},"content":"     */","lastModifiedDate":"2022-10-06"},{"lineNumber":28,"author":{"gitId":"pwjj2000"},"content":"    public AppointmentListPanel(ObservableList\u003cAppointment\u003e appointmentList) {","lastModifiedDate":"2022-10-06"},{"lineNumber":29,"author":{"gitId":"pwjj2000"},"content":"        super(FXML);","lastModifiedDate":"2022-10-06"},{"lineNumber":30,"author":{"gitId":"pwjj2000"},"content":"        appointmentListView.setItems(appointmentList);","lastModifiedDate":"2022-10-06"},{"lineNumber":31,"author":{"gitId":"pwjj2000"},"content":"        appointmentListView.setCellFactory(listView -\u003e new AppointmentListPanel.AppointmentListViewCell());","lastModifiedDate":"2022-10-06"},{"lineNumber":32,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":33,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":34,"author":{"gitId":"pwjj2000"},"content":"    /**","lastModifiedDate":"2022-10-06"},{"lineNumber":35,"author":{"gitId":"pwjj2000"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Appointment} using a {@code AppointmentCard}.","lastModifiedDate":"2022-10-06"},{"lineNumber":36,"author":{"gitId":"pwjj2000"},"content":"     */","lastModifiedDate":"2022-10-06"},{"lineNumber":37,"author":{"gitId":"pwjj2000"},"content":"    class AppointmentListViewCell extends ListCell\u003cAppointment\u003e {","lastModifiedDate":"2022-10-06"},{"lineNumber":38,"author":{"gitId":"pwjj2000"},"content":"        @Override","lastModifiedDate":"2022-10-06"},{"lineNumber":39,"author":{"gitId":"pwjj2000"},"content":"        protected void updateItem(Appointment appointment, boolean empty) {","lastModifiedDate":"2022-10-06"},{"lineNumber":40,"author":{"gitId":"pwjj2000"},"content":"            super.updateItem(appointment, empty);","lastModifiedDate":"2022-10-06"},{"lineNumber":41,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":42,"author":{"gitId":"pwjj2000"},"content":"            if (empty || appointment \u003d\u003d null) {","lastModifiedDate":"2022-10-06"},{"lineNumber":43,"author":{"gitId":"pwjj2000"},"content":"                setGraphic(null);","lastModifiedDate":"2022-10-06"},{"lineNumber":44,"author":{"gitId":"pwjj2000"},"content":"                setText(null);","lastModifiedDate":"2022-10-06"},{"lineNumber":45,"author":{"gitId":"pwjj2000"},"content":"            } else {","lastModifiedDate":"2022-10-06"},{"lineNumber":46,"author":{"gitId":"pwjj2000"},"content":"                setGraphic(new AppointmentCard(appointment, getIndex() + 1).getRoot());","lastModifiedDate":"2022-10-06"},{"lineNumber":47,"author":{"gitId":"pwjj2000"},"content":"            }","lastModifiedDate":"2022-10-06"},{"lineNumber":48,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":49,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":50,"author":{"gitId":"pwjj2000"},"content":"}","lastModifiedDate":"2022-10-06"}],"authorContributionMap":{"pwjj2000":50}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2022-10-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.CommandHistory;","lastModifiedDate":"2022-10-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-10-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * The UI component that is responsible for receiving user command inputs.","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";","lastModifiedDate":"2017-02-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final CommandExecutor commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"    private final CommandHistory commandHistory;","lastModifiedDate":"2022-10-21"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"    private boolean isHistoryDisplayed \u003d false;","lastModifiedDate":"2022-10-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private TextField commandTextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Creates a {@code CommandBox} with the given {@code CommandExecutor}.","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":30,"author":{"gitId":"pwjj2000"},"content":"     * @param commandExecutor","lastModifiedDate":"2022-11-06"},{"lineNumber":31,"author":{"gitId":"pwjj2000"},"content":"     * @param resultDisplay","lastModifiedDate":"2022-11-06"},{"lineNumber":32,"author":{"gitId":"pwjj2000"},"content":"     * @param commandHistory Command history of the app.","lastModifiedDate":"2022-11-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"    public CommandBox(CommandExecutor commandExecutor, ResultDisplay resultDisplay, CommandHistory commandHistory) {","lastModifiedDate":"2022-10-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.commandExecutor \u003d commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"        this.commandHistory \u003d commandHistory;","lastModifiedDate":"2022-10-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box.","lastModifiedDate":"2017-06-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());","lastModifiedDate":"2017-06-28"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"        // Solution adapted from https://stackoverflow.com/a/33224297","lastModifiedDate":"2022-10-26"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"        commandTextField.setOnKeyPressed(e -\u003e displayHistory(e, resultDisplay));","lastModifiedDate":"2022-10-21"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"    private void displayHistory(KeyEvent e, ResultDisplay resultDisplay) {","lastModifiedDate":"2022-10-21"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"        switch (e.getCode()) {","lastModifiedDate":"2022-10-23"},{"lineNumber":46,"author":{"gitId":"JovonLim"},"content":"        case CONTROL:","lastModifiedDate":"2022-10-26"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"            if (!isHistoryDisplayed) {","lastModifiedDate":"2022-10-21"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"                resultDisplay.setFeedbackToUser(commandHistory.getHistoryString());","lastModifiedDate":"2022-10-21"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"                isHistoryDisplayed \u003d true;","lastModifiedDate":"2022-10-21"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"            } else {","lastModifiedDate":"2022-10-26"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"                resultDisplay.setFeedbackToUser(\"\");","lastModifiedDate":"2022-10-21"},{"lineNumber":52,"author":{"gitId":"JovonLim"},"content":"                isHistoryDisplayed \u003d false;","lastModifiedDate":"2022-10-21"},{"lineNumber":53,"author":{"gitId":"JovonLim"},"content":"            }","lastModifiedDate":"2022-10-21"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"            break;","lastModifiedDate":"2022-10-23"},{"lineNumber":55,"author":{"gitId":"JovonLim"},"content":"        case UP:","lastModifiedDate":"2022-10-23"},{"lineNumber":56,"author":{"gitId":"JovonLim"},"content":"            commandTextField.setText(commandHistory.getIncrementCommand());","lastModifiedDate":"2022-10-23"},{"lineNumber":57,"author":{"gitId":"JovonLim"},"content":"            break;","lastModifiedDate":"2022-10-23"},{"lineNumber":58,"author":{"gitId":"JovonLim"},"content":"        case DOWN:","lastModifiedDate":"2022-10-23"},{"lineNumber":59,"author":{"gitId":"JovonLim"},"content":"            commandTextField.setText(commandHistory.getDecrementCommand());","lastModifiedDate":"2022-10-23"},{"lineNumber":60,"author":{"gitId":"JovonLim"},"content":"            break;","lastModifiedDate":"2022-10-23"},{"lineNumber":61,"author":{"gitId":"JovonLim"},"content":"        default:","lastModifiedDate":"2022-10-23"},{"lineNumber":62,"author":{"gitId":"JovonLim"},"content":"            break;","lastModifiedDate":"2022-10-23"},{"lineNumber":63,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Handles the Enter button pressed event.","lastModifiedDate":"2017-08-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    private void handleCommandEntered() {","lastModifiedDate":"2018-04-01"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        String commandText \u003d commandTextField.getText();","lastModifiedDate":"2020-12-04"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        if (commandText.equals(\"\")) {","lastModifiedDate":"2020-12-04"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2020-12-04"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-04"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-04"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-02-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            commandExecutor.execute(commandText);","lastModifiedDate":"2020-12-04"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            commandTextField.setText(\"\");","lastModifiedDate":"2016-09-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2017-03-11"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            setStyleToIndicateCommandFailure();","lastModifiedDate":"2017-02-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Sets the command box style to use the default style.","lastModifiedDate":"2017-06-28"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private void setStyleToDefault() {","lastModifiedDate":"2017-06-28"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-02-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Sets the command box style to indicate a failed command.","lastModifiedDate":"2017-02-05"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    private void setStyleToIndicateCommandFailure() {","lastModifiedDate":"2017-02-05"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();","lastModifiedDate":"2017-03-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2017-03-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-03-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Represents a function that can execute commands.","lastModifiedDate":"2018-12-09"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @FunctionalInterface","lastModifiedDate":"2018-12-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public interface CommandExecutor {","lastModifiedDate":"2018-12-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-12-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"         * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2018-12-09"},{"lineNumber":112,"author":{"gitId":"-"},"content":"         * @see seedu.address.logic.Logic#execute(String)","lastModifiedDate":"2018-12-09"},{"lineNumber":113,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-12-09"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"}],"authorContributionMap":{"JovonLim":30,"-":83,"pwjj2000":4}},{"path":"src/main/java/seedu/address/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2019-08-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2019-08-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;","lastModifiedDate":"2019-08-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-12-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"guanzhou03"},"content":"    public static final String USERGUIDE_URL \u003d","lastModifiedDate":"2022-10-11"},{"lineNumber":19,"author":{"gitId":"guanzhou03"},"content":"            \"https://ay2223s1-cs2103t-t17-4.github.io/tp/UserGuide.html\";","lastModifiedDate":"2022-10-25"},{"lineNumber":20,"author":{"gitId":"guanzhou03"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to idENTify\u0027s user guide: \" + USERGUIDE_URL;","lastModifiedDate":"2022-10-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";","lastModifiedDate":"2016-09-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Button copyButton;","lastModifiedDate":"2019-08-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Label helpMessage;","lastModifiedDate":"2019-08-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-12-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {","lastModifiedDate":"2017-12-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        super(FXML, root);","lastModifiedDate":"2017-12-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);","lastModifiedDate":"2019-08-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public HelpWindow() {","lastModifiedDate":"2017-12-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this(new Stage());","lastModifiedDate":"2017-12-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-01"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Shows the help window.","lastModifiedDate":"2017-08-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException","lastModifiedDate":"2017-08-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *     \u003cul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *             if this method is called on a thread other than the JavaFX Application Thread.","lastModifiedDate":"2017-08-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *             if this method is called during animation or layout processing.","lastModifiedDate":"2017-08-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *             if this method is called on the primary stage.","lastModifiedDate":"2017-08-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *             if {@code dialogStage} is already showing.","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     *     \u003c/ul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void show() {","lastModifiedDate":"2016-08-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");","lastModifiedDate":"2016-12-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().show();","lastModifiedDate":"2018-02-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2019-08-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown.","lastModifiedDate":"2018-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public boolean isShowing() {","lastModifiedDate":"2018-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2018-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Hides the help window.","lastModifiedDate":"2018-12-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void hide() {","lastModifiedDate":"2018-12-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        getRoot().hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Focuses on the help window.","lastModifiedDate":"2018-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void focus() {","lastModifiedDate":"2018-03-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2018-03-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-08-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard.","lastModifiedDate":"2019-08-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-08-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void copyUrl() {","lastModifiedDate":"2019-08-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();","lastModifiedDate":"2019-08-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();","lastModifiedDate":"2019-08-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);","lastModifiedDate":"2019-08-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);","lastModifiedDate":"2019-08-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-08-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"-":100,"guanzhou03":3}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":7,"author":{"gitId":"WingKei67"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2022-10-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2016-09-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-06-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":30,"author":{"gitId":"WingKei67"},"content":"    private final String lightThemeUrl \u003d getClass().getResource(\"/view/LightMode.css\").toExternalForm();","lastModifiedDate":"2022-10-26"},{"lineNumber":31,"author":{"gitId":"WingKei67"},"content":"    private final String darkThemeUrl \u003d getClass().getResource(\"/view/DarkMode.css\").toExternalForm();","lastModifiedDate":"2022-10-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;","lastModifiedDate":"2016-08-18"},{"lineNumber":38,"author":{"gitId":"pwjj2000"},"content":"    private AppointmentListPanel appointmentListPanel;","lastModifiedDate":"2022-10-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"pwjj2000"},"content":"    @FXML","lastModifiedDate":"2022-10-06"},{"lineNumber":52,"author":{"gitId":"pwjj2000"},"content":"    private StackPane appointmentListPanelPlaceholder;","lastModifiedDate":"2022-10-06"},{"lineNumber":53,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":65,"author":{"gitId":"WingKei67"},"content":"        System.out.println(darkThemeUrl);","lastModifiedDate":"2022-10-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":77,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":78,"author":{"gitId":"WingKei67"},"content":"        helpWindow.getRoot().getScene().getStylesheets()","lastModifiedDate":"2022-10-26"},{"lineNumber":79,"author":{"gitId":"WingKei67"},"content":"                .add(logic.getGuiSettings().getStylesheet());","lastModifiedDate":"2022-10-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":127,"author":{"gitId":"pwjj2000"},"content":"        appointmentListPanel \u003d new AppointmentListPanel(logic.getFilteredAppointmentList());","lastModifiedDate":"2022-10-06"},{"lineNumber":128,"author":{"gitId":"pwjj2000"},"content":"        appointmentListPanelPlaceholder.getChildren().add(appointmentListPanel.getRoot());","lastModifiedDate":"2022-10-06"},{"lineNumber":129,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());","lastModifiedDate":"2019-01-25"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":136,"author":{"gitId":"JovonLim"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand, resultDisplay, logic.getCommandHistory());","lastModifiedDate":"2022-10-21"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":146,"author":{"gitId":"WingKei67"},"content":"        primaryStage.getScene().getStylesheets().add(guiSettings.getStylesheet());","lastModifiedDate":"2022-10-26"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":153,"author":{"gitId":"WingKei67"},"content":"    /**","lastModifiedDate":"2022-10-26"},{"lineNumber":154,"author":{"gitId":"WingKei67"},"content":"     * Enables the light theme.","lastModifiedDate":"2022-10-26"},{"lineNumber":155,"author":{"gitId":"WingKei67"},"content":"     */","lastModifiedDate":"2022-10-26"},{"lineNumber":156,"author":{"gitId":"WingKei67"},"content":"    @FXML","lastModifiedDate":"2022-10-26"},{"lineNumber":157,"author":{"gitId":"WingKei67"},"content":"    private void useLightTheme() {","lastModifiedDate":"2022-10-26"},{"lineNumber":158,"author":{"gitId":"WingKei67"},"content":"        Scene scene \u003d primaryStage.getScene();","lastModifiedDate":"2022-10-26"},{"lineNumber":159,"author":{"gitId":"WingKei67"},"content":"        assert lightThemeUrl !\u003d null;","lastModifiedDate":"2022-10-26"},{"lineNumber":160,"author":{"gitId":"WingKei67"},"content":"        assert darkThemeUrl !\u003d null;","lastModifiedDate":"2022-10-26"},{"lineNumber":161,"author":{"gitId":"WingKei67"},"content":"        if (scene.getStylesheets().contains(darkThemeUrl)) {","lastModifiedDate":"2022-10-26"},{"lineNumber":162,"author":{"gitId":"WingKei67"},"content":"            scene.getStylesheets().remove(darkThemeUrl);","lastModifiedDate":"2022-10-26"},{"lineNumber":163,"author":{"gitId":"WingKei67"},"content":"            scene.getStylesheets().add(lightThemeUrl);","lastModifiedDate":"2022-10-26"},{"lineNumber":164,"author":{"gitId":"WingKei67"},"content":"        }","lastModifiedDate":"2022-10-26"},{"lineNumber":165,"author":{"gitId":"WingKei67"},"content":"        Scene helpScene \u003d helpWindow.getRoot().getScene();","lastModifiedDate":"2022-10-26"},{"lineNumber":166,"author":{"gitId":"WingKei67"},"content":"        if (helpScene.getStylesheets().contains(darkThemeUrl)) {","lastModifiedDate":"2022-10-26"},{"lineNumber":167,"author":{"gitId":"WingKei67"},"content":"            helpScene.getStylesheets().remove(darkThemeUrl);","lastModifiedDate":"2022-10-26"},{"lineNumber":168,"author":{"gitId":"WingKei67"},"content":"            helpScene.getStylesheets().add(lightThemeUrl);","lastModifiedDate":"2022-10-26"},{"lineNumber":169,"author":{"gitId":"WingKei67"},"content":"        }","lastModifiedDate":"2022-10-26"},{"lineNumber":170,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-26"},{"lineNumber":171,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":172,"author":{"gitId":"WingKei67"},"content":"    /**","lastModifiedDate":"2022-10-26"},{"lineNumber":173,"author":{"gitId":"WingKei67"},"content":"     * Enables the dark theme.","lastModifiedDate":"2022-10-26"},{"lineNumber":174,"author":{"gitId":"WingKei67"},"content":"     */","lastModifiedDate":"2022-10-26"},{"lineNumber":175,"author":{"gitId":"WingKei67"},"content":"    @FXML","lastModifiedDate":"2022-10-26"},{"lineNumber":176,"author":{"gitId":"WingKei67"},"content":"    private void useDarkTheme() {","lastModifiedDate":"2022-10-26"},{"lineNumber":177,"author":{"gitId":"WingKei67"},"content":"        Scene scene \u003d primaryStage.getScene();","lastModifiedDate":"2022-10-26"},{"lineNumber":178,"author":{"gitId":"WingKei67"},"content":"        assert lightThemeUrl !\u003d null;","lastModifiedDate":"2022-10-26"},{"lineNumber":179,"author":{"gitId":"WingKei67"},"content":"        assert darkThemeUrl !\u003d null;","lastModifiedDate":"2022-10-26"},{"lineNumber":180,"author":{"gitId":"WingKei67"},"content":"        if (scene.getStylesheets().contains(lightThemeUrl)) {","lastModifiedDate":"2022-10-26"},{"lineNumber":181,"author":{"gitId":"WingKei67"},"content":"            scene.getStylesheets().remove(lightThemeUrl);","lastModifiedDate":"2022-10-26"},{"lineNumber":182,"author":{"gitId":"WingKei67"},"content":"            scene.getStylesheets().add(darkThemeUrl);","lastModifiedDate":"2022-10-26"},{"lineNumber":183,"author":{"gitId":"WingKei67"},"content":"        }","lastModifiedDate":"2022-10-26"},{"lineNumber":184,"author":{"gitId":"WingKei67"},"content":"        Scene helpScene \u003d helpWindow.getRoot().getScene();","lastModifiedDate":"2022-10-26"},{"lineNumber":185,"author":{"gitId":"WingKei67"},"content":"        if (helpScene.getStylesheets().contains(lightThemeUrl)) {","lastModifiedDate":"2022-10-26"},{"lineNumber":186,"author":{"gitId":"WingKei67"},"content":"            helpScene.getStylesheets().remove(lightThemeUrl);","lastModifiedDate":"2022-10-26"},{"lineNumber":187,"author":{"gitId":"WingKei67"},"content":"            helpScene.getStylesheets().add(darkThemeUrl);","lastModifiedDate":"2022-10-26"},{"lineNumber":188,"author":{"gitId":"WingKei67"},"content":"        }","lastModifiedDate":"2022-10-26"},{"lineNumber":189,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-26"},{"lineNumber":190,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":192,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":193,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":208,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":209,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":213,"author":{"gitId":"WingKei67"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY(), primaryStage.getScene().getStylesheets().get(1));","lastModifiedDate":"2022-10-26"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {","lastModifiedDate":"2016-08-25"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        return personListPanel;","lastModifiedDate":"2018-08-14"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-25"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":224,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":225,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":226,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)","lastModifiedDate":"2018-12-09"},{"lineNumber":227,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":230,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":232,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":234,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":235,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":236,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":238,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":239,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":240,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":242,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":244,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":245,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":246,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":249,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"WingKei67":47,"JovonLim":1,"-":194,"pwjj2000":7}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;","lastModifiedDate":"2019-01-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-01-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"pwjj2000"},"content":" * A UI component that displays information of a {@code Person}.","lastModifiedDate":"2022-10-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";","lastModifiedDate":"2016-09-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public final Person person;","lastModifiedDate":"2018-01-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"    private Label particulars;","lastModifiedDate":"2022-10-15"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private FlowPane tags;","lastModifiedDate":"2016-12-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2020-05-27"},{"lineNumber":43,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":44,"author":{"gitId":"pwjj2000"},"content":"     * @param person Person to be shown in the UI","lastModifiedDate":"2022-11-06"},{"lineNumber":45,"author":{"gitId":"pwjj2000"},"content":"     * @param displayedIndex Index of the person in the list.","lastModifiedDate":"2022-11-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2018-01-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.person \u003d person;","lastModifiedDate":"2017-07-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);","lastModifiedDate":"2017-12-20"},{"lineNumber":52,"author":{"gitId":"JovonLim"},"content":"        particulars.setText(person.getParticulars());","lastModifiedDate":"2022-10-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        person.getTags().stream()","lastModifiedDate":"2019-01-02"},{"lineNumber":54,"author":{"gitId":"WingKei67"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.toString()))","lastModifiedDate":"2022-10-22"},{"lineNumber":55,"author":{"gitId":"WingKei67"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.toString())));","lastModifiedDate":"2022-10-22"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-07-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-07-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-07-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-07-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-07-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {","lastModifiedDate":"2017-07-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-07-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-07-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;","lastModifiedDate":"2017-07-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2017-07-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);","lastModifiedDate":"2017-07-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"JovonLim":3,"WingKei67":2,"-":66,"pwjj2000":4}},{"path":"src/main/java/seedu/address/ui/PersonListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2016-08-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Panel containing the list of persons.","lastModifiedDate":"2016-09-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class PersonListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListPanel.fxml\";","lastModifiedDate":"2016-09-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private ListView\u003cPerson\u003e personListView;","lastModifiedDate":"2018-02-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":26,"author":{"gitId":"pwjj2000"},"content":"     * @param personList List of person to be shown in the UI.","lastModifiedDate":"2022-11-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {","lastModifiedDate":"2019-01-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        personListView.setItems(personList);","lastModifiedDate":"2018-02-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());","lastModifiedDate":"2016-08-18"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}.","lastModifiedDate":"2018-02-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    class PersonListViewCell extends ListCell\u003cPerson\u003e {","lastModifiedDate":"2018-02-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        protected void updateItem(Person person, boolean empty) {","lastModifiedDate":"2018-02-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            super.updateItem(person, empty);","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            if (empty || person \u003d\u003d null) {","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                setGraphic(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                setText(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());","lastModifiedDate":"2018-02-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"-":49,"pwjj2000":2}},{"path":"src/main/java/seedu/address/ui/StatusBarFooter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2018-12-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Label saveLocationStatus;","lastModifiedDate":"2018-12-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code StatusBarFooter} with the given {@code Path}.","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-11-06"},{"lineNumber":23,"author":{"gitId":"pwjj2000"},"content":"     * @param saveLocation Location that the app is saved.","lastModifiedDate":"2022-11-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public StatusBarFooter(Path saveLocation) {","lastModifiedDate":"2019-01-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2017-04-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());","lastModifiedDate":"2018-12-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":28,"pwjj2000":2}},{"path":"src/main/java/seedu/address/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Platform;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;","lastModifiedDate":"2016-08-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.MainApp;","lastModifiedDate":"2016-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The manager of the UI component.","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";","lastModifiedDate":"2017-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":23,"author":{"gitId":"WingKei67"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/hospital.png\";","lastModifiedDate":"2022-10-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        //Set the application icon.","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));","lastModifiedDate":"2016-08-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {","lastModifiedDate":"2016-08-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);","lastModifiedDate":"2016-08-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters.","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                                               String contentText) {","lastModifiedDate":"2016-08-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);","lastModifiedDate":"2016-08-18"},{"lineNumber":68,"author":{"gitId":"WingKei67"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/Alert.css\");","lastModifiedDate":"2022-10-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        alert.setTitle(title);","lastModifiedDate":"2016-08-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);","lastModifiedDate":"2016-08-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);","lastModifiedDate":"2016-10-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        alert.showAndWait();","lastModifiedDate":"2016-08-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {","lastModifiedDate":"2016-09-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());","lastModifiedDate":"2016-08-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        Platform.exit();","lastModifiedDate":"2016-08-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        System.exit(1);","lastModifiedDate":"2016-08-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"WingKei67":2,"-":86}},{"path":"src/main/resources/view/Alert.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WingKei67"},"content":".background {","lastModifiedDate":"2022-10-26"},{"lineNumber":2,"author":{"gitId":"WingKei67"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2022-10-26"},{"lineNumber":3,"author":{"gitId":"WingKei67"},"content":"    background-color: #383838; /* Used in the default.html file */","lastModifiedDate":"2022-10-26"},{"lineNumber":4,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-26"},{"lineNumber":5,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":6,"author":{"gitId":"WingKei67"},"content":".label {","lastModifiedDate":"2022-10-26"},{"lineNumber":7,"author":{"gitId":"WingKei67"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2022-10-26"},{"lineNumber":8,"author":{"gitId":"WingKei67"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-10-26"},{"lineNumber":9,"author":{"gitId":"WingKei67"},"content":"    -fx-text-fill: #555555;","lastModifiedDate":"2022-10-26"},{"lineNumber":10,"author":{"gitId":"WingKei67"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2022-10-26"},{"lineNumber":11,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-26"},{"lineNumber":12,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":13,"author":{"gitId":"WingKei67"},"content":".label-bright {","lastModifiedDate":"2022-10-26"},{"lineNumber":14,"author":{"gitId":"WingKei67"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2022-10-26"},{"lineNumber":15,"author":{"gitId":"WingKei67"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-10-26"},{"lineNumber":16,"author":{"gitId":"WingKei67"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2022-10-26"},{"lineNumber":17,"author":{"gitId":"WingKei67"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2022-10-26"},{"lineNumber":18,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-26"},{"lineNumber":19,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":20,"author":{"gitId":"WingKei67"},"content":".label-header {","lastModifiedDate":"2022-10-26"},{"lineNumber":21,"author":{"gitId":"WingKei67"},"content":"    -fx-font-size: 32pt;","lastModifiedDate":"2022-10-26"},{"lineNumber":22,"author":{"gitId":"WingKei67"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-10-26"},{"lineNumber":23,"author":{"gitId":"WingKei67"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2022-10-26"},{"lineNumber":24,"author":{"gitId":"WingKei67"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2022-10-26"},{"lineNumber":25,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-26"},{"lineNumber":26,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":27,"author":{"gitId":"WingKei67"},"content":"/*","lastModifiedDate":"2022-10-26"},{"lineNumber":28,"author":{"gitId":"WingKei67"},"content":" * Metro style Push Button","lastModifiedDate":"2022-10-26"},{"lineNumber":29,"author":{"gitId":"WingKei67"},"content":" * Author: Pedro Duque Vieira","lastModifiedDate":"2022-10-26"},{"lineNumber":30,"author":{"gitId":"WingKei67"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/","lastModifiedDate":"2022-10-26"},{"lineNumber":31,"author":{"gitId":"WingKei67"},"content":" */","lastModifiedDate":"2022-10-26"},{"lineNumber":32,"author":{"gitId":"WingKei67"},"content":".button {","lastModifiedDate":"2022-10-26"},{"lineNumber":33,"author":{"gitId":"WingKei67"},"content":"    -fx-padding: 5 22 5 22;","lastModifiedDate":"2022-10-26"},{"lineNumber":34,"author":{"gitId":"WingKei67"},"content":"    -fx-border-color: #e2e2e2;","lastModifiedDate":"2022-10-26"},{"lineNumber":35,"author":{"gitId":"WingKei67"},"content":"    -fx-border-width: 2;","lastModifiedDate":"2022-10-26"},{"lineNumber":36,"author":{"gitId":"WingKei67"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2022-10-26"},{"lineNumber":37,"author":{"gitId":"WingKei67"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2022-10-26"},{"lineNumber":38,"author":{"gitId":"WingKei67"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;","lastModifiedDate":"2022-10-26"},{"lineNumber":39,"author":{"gitId":"WingKei67"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2022-10-26"},{"lineNumber":40,"author":{"gitId":"WingKei67"},"content":"    -fx-text-fill: #d8d8d8;","lastModifiedDate":"2022-10-26"},{"lineNumber":41,"author":{"gitId":"WingKei67"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;","lastModifiedDate":"2022-10-26"},{"lineNumber":42,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-26"},{"lineNumber":43,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":44,"author":{"gitId":"WingKei67"},"content":".button:hover {","lastModifiedDate":"2022-10-26"},{"lineNumber":45,"author":{"gitId":"WingKei67"},"content":"    -fx-background-color: #3a3a3a;","lastModifiedDate":"2022-10-26"},{"lineNumber":46,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-26"},{"lineNumber":47,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":48,"author":{"gitId":"WingKei67"},"content":".button:pressed, .button:default:hover:pressed {","lastModifiedDate":"2022-10-26"},{"lineNumber":49,"author":{"gitId":"WingKei67"},"content":"    -fx-background-color: white;","lastModifiedDate":"2022-10-26"},{"lineNumber":50,"author":{"gitId":"WingKei67"},"content":"    -fx-text-fill: #1d1d1d;","lastModifiedDate":"2022-10-26"},{"lineNumber":51,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-26"},{"lineNumber":52,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":53,"author":{"gitId":"WingKei67"},"content":".button:focused {","lastModifiedDate":"2022-10-26"},{"lineNumber":54,"author":{"gitId":"WingKei67"},"content":"    -fx-border-color: white, white;","lastModifiedDate":"2022-10-26"},{"lineNumber":55,"author":{"gitId":"WingKei67"},"content":"    -fx-border-width: 1, 1;","lastModifiedDate":"2022-10-26"},{"lineNumber":56,"author":{"gitId":"WingKei67"},"content":"    -fx-border-style: solid, segments(1, 1);","lastModifiedDate":"2022-10-26"},{"lineNumber":57,"author":{"gitId":"WingKei67"},"content":"    -fx-border-radius: 0, 0;","lastModifiedDate":"2022-10-26"},{"lineNumber":58,"author":{"gitId":"WingKei67"},"content":"    -fx-border-insets: 1 1 1 1, 0;","lastModifiedDate":"2022-10-26"},{"lineNumber":59,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-26"},{"lineNumber":60,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":61,"author":{"gitId":"WingKei67"},"content":".button:disabled, .button:default:disabled {","lastModifiedDate":"2022-10-26"},{"lineNumber":62,"author":{"gitId":"WingKei67"},"content":"    -fx-opacity: 0.4;","lastModifiedDate":"2022-10-26"},{"lineNumber":63,"author":{"gitId":"WingKei67"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2022-10-26"},{"lineNumber":64,"author":{"gitId":"WingKei67"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2022-10-26"},{"lineNumber":65,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-26"},{"lineNumber":66,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":67,"author":{"gitId":"WingKei67"},"content":".button:default {","lastModifiedDate":"2022-10-26"},{"lineNumber":68,"author":{"gitId":"WingKei67"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2022-10-26"},{"lineNumber":69,"author":{"gitId":"WingKei67"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2022-10-26"},{"lineNumber":70,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-26"},{"lineNumber":71,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":72,"author":{"gitId":"WingKei67"},"content":".button:default:hover {","lastModifiedDate":"2022-10-26"},{"lineNumber":73,"author":{"gitId":"WingKei67"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);","lastModifiedDate":"2022-10-26"},{"lineNumber":74,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-26"},{"lineNumber":75,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":76,"author":{"gitId":"WingKei67"},"content":".dialog-pane {","lastModifiedDate":"2022-10-26"},{"lineNumber":77,"author":{"gitId":"WingKei67"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2022-10-26"},{"lineNumber":78,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-26"},{"lineNumber":79,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":80,"author":{"gitId":"WingKei67"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {","lastModifiedDate":"2022-10-26"},{"lineNumber":81,"author":{"gitId":"WingKei67"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2022-10-26"},{"lineNumber":82,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-26"},{"lineNumber":83,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":84,"author":{"gitId":"WingKei67"},"content":".dialog-pane \u003e *.label.content {","lastModifiedDate":"2022-10-26"},{"lineNumber":85,"author":{"gitId":"WingKei67"},"content":"    -fx-font-size: 14px;","lastModifiedDate":"2022-10-26"},{"lineNumber":86,"author":{"gitId":"WingKei67"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2022-10-26"},{"lineNumber":87,"author":{"gitId":"WingKei67"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2022-10-26"},{"lineNumber":88,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-26"},{"lineNumber":89,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":90,"author":{"gitId":"WingKei67"},"content":".dialog-pane:header *.header-panel {","lastModifiedDate":"2022-10-26"},{"lineNumber":91,"author":{"gitId":"WingKei67"},"content":"    -fx-background-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2022-10-26"},{"lineNumber":92,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-26"},{"lineNumber":93,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":94,"author":{"gitId":"WingKei67"},"content":".dialog-pane:header *.header-panel *.label {","lastModifiedDate":"2022-10-26"},{"lineNumber":95,"author":{"gitId":"WingKei67"},"content":"    -fx-font-size: 18px;","lastModifiedDate":"2022-10-26"},{"lineNumber":96,"author":{"gitId":"WingKei67"},"content":"    -fx-font-style: italic;","lastModifiedDate":"2022-10-26"},{"lineNumber":97,"author":{"gitId":"WingKei67"},"content":"    -fx-fill: white;","lastModifiedDate":"2022-10-26"},{"lineNumber":98,"author":{"gitId":"WingKei67"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2022-10-26"},{"lineNumber":99,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-26"}],"authorContributionMap":{"WingKei67":99}},{"path":"src/main/resources/view/AppointmentListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pwjj2000"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":2,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":3,"author":{"gitId":"pwjj2000"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":4,"author":{"gitId":"pwjj2000"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":5,"author":{"gitId":"pwjj2000"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":6,"author":{"gitId":"pwjj2000"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":7,"author":{"gitId":"pwjj2000"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":8,"author":{"gitId":"pwjj2000"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":9,"author":{"gitId":"pwjj2000"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":10,"author":{"gitId":"pwjj2000"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":11,"author":{"gitId":"pwjj2000"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":12,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":13,"author":{"gitId":"WingKei67"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":14,"author":{"gitId":"pwjj2000"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":15,"author":{"gitId":"pwjj2000"},"content":"        \u003ccolumnConstraints\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":16,"author":{"gitId":"pwjj2000"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":17,"author":{"gitId":"pwjj2000"},"content":"        \u003c/columnConstraints\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":18,"author":{"gitId":"pwjj2000"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":19,"author":{"gitId":"pwjj2000"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":20,"author":{"gitId":"pwjj2000"},"content":"                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":21,"author":{"gitId":"pwjj2000"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":22,"author":{"gitId":"pwjj2000"},"content":"            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":23,"author":{"gitId":"pwjj2000"},"content":"                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":24,"author":{"gitId":"pwjj2000"},"content":"                    \u003cminWidth\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":25,"author":{"gitId":"pwjj2000"},"content":"                        \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":26,"author":{"gitId":"pwjj2000"},"content":"                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":27,"author":{"gitId":"pwjj2000"},"content":"                    \u003c/minWidth\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":28,"author":{"gitId":"pwjj2000"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":29,"author":{"gitId":"pwjj2000"},"content":"                \u003cLabel fx:id\u003d\"patientName\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":30,"author":{"gitId":"pwjj2000"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":31,"author":{"gitId":"pwjj2000"},"content":"            \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2022-10-21"},{"lineNumber":32,"author":{"gitId":"pwjj2000"},"content":"            \u003cLabel fx:id\u003d\"reason\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$reason\" /\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":33,"author":{"gitId":"pwjj2000"},"content":"            \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$status\" /\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":34,"author":{"gitId":"pwjj2000"},"content":"            \u003cLabel fx:id\u003d\"dateTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"            \u003cLabel fx:id\u003d\"recurring\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$recurring\" /\u003e","lastModifiedDate":"2022-10-24"},{"lineNumber":36,"author":{"gitId":"pwjj2000"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":37,"author":{"gitId":"pwjj2000"},"content":"        \u003crowConstraints\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":38,"author":{"gitId":"pwjj2000"},"content":"            \u003cRowConstraints /\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":39,"author":{"gitId":"pwjj2000"},"content":"        \u003c/rowConstraints\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":40,"author":{"gitId":"pwjj2000"},"content":"    \u003c/GridPane\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":41,"author":{"gitId":"pwjj2000"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2022-10-06"}],"authorContributionMap":{"WingKei67":1,"JovonLim":1,"pwjj2000":39}},{"path":"src/main/resources/view/AppointmentListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pwjj2000"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":2,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":3,"author":{"gitId":"pwjj2000"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":4,"author":{"gitId":"pwjj2000"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":5,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":6,"author":{"gitId":"WingKei67"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":7,"author":{"gitId":"WingKei67"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":8,"author":{"gitId":"WingKei67"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":9,"author":{"gitId":"WingKei67"},"content":"   \u003cHBox alignment\u003d\"CENTER\" fillHeight\u003d\"false\" maxHeight\u003d\"20.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":10,"author":{"gitId":"WingKei67"},"content":"      \u003cchildren\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":11,"author":{"gitId":"WingKei67"},"content":"         \u003cLabel fx:id\u003d\"appointmentHeading\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" styleClass\u003d\"label-listHeader\"","lastModifiedDate":"2022-10-26"},{"lineNumber":12,"author":{"gitId":"WingKei67"},"content":"                text\u003d\"APPOINTMENTS\" textAlignment\u003d\"CENTER\"/\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":13,"author":{"gitId":"WingKei67"},"content":"      \u003c/children\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":14,"author":{"gitId":"WingKei67"},"content":"   \u003c/HBox\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":15,"author":{"gitId":"pwjj2000"},"content":"   \u003cListView fx:id\u003d\"appointmentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":16,"author":{"gitId":"pwjj2000"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2022-10-06"}],"authorContributionMap":{"WingKei67":9,"pwjj2000":7}},{"path":"src/main/resources/view/MainWindow.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WingKei67"},"content":".label, .result-display, #commandTextField {","lastModifiedDate":"2022-10-26"},{"lineNumber":2,"author":{"gitId":"WingKei67"},"content":"    -fx-font-size: 15px;","lastModifiedDate":"2022-10-26"},{"lineNumber":3,"author":{"gitId":"WingKei67"},"content":"    -fx-font-family: \"Segoe UI\", sans-serif;","lastModifiedDate":"2022-10-26"},{"lineNumber":4,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-26"},{"lineNumber":5,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":6,"author":{"gitId":"WingKei67"},"content":".error {","lastModifiedDate":"2022-10-26"},{"lineNumber":7,"author":{"gitId":"WingKei67"},"content":"    -fx-text-fill: #d06651 !important;","lastModifiedDate":"2022-10-26"},{"lineNumber":8,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-26"},{"lineNumber":9,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":10,"author":{"gitId":"WingKei67"},"content":".list-view {","lastModifiedDate":"2022-10-26"},{"lineNumber":11,"author":{"gitId":"WingKei67"},"content":"    -fx-padding: 0;","lastModifiedDate":"2022-10-26"},{"lineNumber":12,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-26"},{"lineNumber":13,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":14,"author":{"gitId":"WingKei67"},"content":".list-cell:filled {","lastModifiedDate":"2022-10-26"},{"lineNumber":15,"author":{"gitId":"WingKei67"},"content":"    -fx-background-radius: 14px;","lastModifiedDate":"2022-10-26"},{"lineNumber":16,"author":{"gitId":"WingKei67"},"content":"    -fx-border-width: 2px;","lastModifiedDate":"2022-10-26"},{"lineNumber":17,"author":{"gitId":"WingKei67"},"content":"    -fx-border-radius: 10px;","lastModifiedDate":"2022-10-26"},{"lineNumber":18,"author":{"gitId":"WingKei67"},"content":"    -fx-padding: 8px;","lastModifiedDate":"2022-10-26"},{"lineNumber":19,"author":{"gitId":"WingKei67"},"content":"    -fx-border-insets: 5px 9px;","lastModifiedDate":"2022-10-26"},{"lineNumber":20,"author":{"gitId":"WingKei67"},"content":"    -fx-background-insets: 5px 9px;","lastModifiedDate":"2022-10-26"},{"lineNumber":21,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-26"},{"lineNumber":22,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":23,"author":{"gitId":"WingKei67"},"content":".list-cell .label, #optionalFields .label {","lastModifiedDate":"2022-10-26"},{"lineNumber":24,"author":{"gitId":"WingKei67"},"content":"    -fx-wrap-text: \"true\";","lastModifiedDate":"2022-10-26"},{"lineNumber":25,"author":{"gitId":"WingKei67"},"content":"    -fx-font-size: 13px;","lastModifiedDate":"2022-10-26"},{"lineNumber":26,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-26"},{"lineNumber":27,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":28,"author":{"gitId":"WingKei67"},"content":".list-cell .cell_big_label {","lastModifiedDate":"2022-10-26"},{"lineNumber":29,"author":{"gitId":"WingKei67"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2022-10-26"},{"lineNumber":30,"author":{"gitId":"WingKei67"},"content":"    -fx-font-size: 15px;","lastModifiedDate":"2022-10-26"},{"lineNumber":31,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-26"},{"lineNumber":32,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":33,"author":{"gitId":"WingKei67"},"content":".result-display {","lastModifiedDate":"2022-10-26"},{"lineNumber":34,"author":{"gitId":"WingKei67"},"content":"    -fx-wrap-text: \"true\";","lastModifiedDate":"2022-10-26"},{"lineNumber":35,"author":{"gitId":"WingKei67"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2022-10-26"},{"lineNumber":36,"author":{"gitId":"WingKei67"},"content":"    -fx-border-radius: 8px;","lastModifiedDate":"2022-10-26"},{"lineNumber":37,"author":{"gitId":"WingKei67"},"content":"    -fx-padding: 2px;","lastModifiedDate":"2022-10-26"},{"lineNumber":38,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-26"},{"lineNumber":39,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":40,"author":{"gitId":"WingKei67"},"content":".result-display .content {","lastModifiedDate":"2022-10-26"},{"lineNumber":41,"author":{"gitId":"WingKei67"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2022-10-26"},{"lineNumber":42,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-26"},{"lineNumber":43,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":44,"author":{"gitId":"WingKei67"},"content":".status-bar .label {","lastModifiedDate":"2022-10-26"},{"lineNumber":45,"author":{"gitId":"WingKei67"},"content":"    -fx-font-weight: lighter;","lastModifiedDate":"2022-10-26"},{"lineNumber":46,"author":{"gitId":"WingKei67"},"content":"    -fx-padding: 10px;","lastModifiedDate":"2022-10-26"},{"lineNumber":47,"author":{"gitId":"WingKei67"},"content":"    -fx-pref-height: 30px;","lastModifiedDate":"2022-10-26"},{"lineNumber":48,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-26"},{"lineNumber":49,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":50,"author":{"gitId":"WingKei67"},"content":".increment-button, .decrement-button {","lastModifiedDate":"2022-10-26"},{"lineNumber":51,"author":{"gitId":"WingKei67"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2022-10-26"},{"lineNumber":52,"author":{"gitId":"WingKei67"},"content":"    -fx-padding: 0;","lastModifiedDate":"2022-10-26"},{"lineNumber":53,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-26"},{"lineNumber":54,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":55,"author":{"gitId":"WingKei67"},"content":".increment-arrow, .decrement-arrow {","lastModifiedDate":"2022-10-26"},{"lineNumber":56,"author":{"gitId":"WingKei67"},"content":"    -fx-shape: \" \";","lastModifiedDate":"2022-10-26"},{"lineNumber":57,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-26"},{"lineNumber":58,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":59,"author":{"gitId":"WingKei67"},"content":"#resultPane {","lastModifiedDate":"2022-10-26"},{"lineNumber":60,"author":{"gitId":"WingKei67"},"content":"    -fx-border-width: 0 0 2px 0;","lastModifiedDate":"2022-10-26"},{"lineNumber":61,"author":{"gitId":"WingKei67"},"content":"    -fx-padding: 10px 9px 20px 9px;","lastModifiedDate":"2022-10-26"},{"lineNumber":62,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-26"},{"lineNumber":63,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":64,"author":{"gitId":"WingKei67"},"content":"#commandTextField {","lastModifiedDate":"2022-10-26"},{"lineNumber":65,"author":{"gitId":"WingKei67"},"content":"    -fx-border-width: 0 0 2px 0;","lastModifiedDate":"2022-10-26"},{"lineNumber":66,"author":{"gitId":"WingKei67"},"content":"    -fx-font-weight: bolder;","lastModifiedDate":"2022-10-26"},{"lineNumber":67,"author":{"gitId":"WingKei67"},"content":"    -fx-font-size: 16px;","lastModifiedDate":"2022-10-26"},{"lineNumber":68,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-26"},{"lineNumber":69,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":70,"author":{"gitId":"WingKei67"},"content":"#pid {","lastModifiedDate":"2022-10-26"},{"lineNumber":71,"author":{"gitId":"WingKei67"},"content":"    -fx-font-weight: bolder;","lastModifiedDate":"2022-10-26"},{"lineNumber":72,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-26"},{"lineNumber":73,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":74,"author":{"gitId":"WingKei67"},"content":"#tags, #memberships {","lastModifiedDate":"2022-10-26"},{"lineNumber":75,"author":{"gitId":"WingKei67"},"content":"    -fx-hgap: 7px;","lastModifiedDate":"2022-10-26"},{"lineNumber":76,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-26"},{"lineNumber":77,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":78,"author":{"gitId":"WingKei67"},"content":"#tags .label, #memberships .label {","lastModifiedDate":"2022-10-26"},{"lineNumber":79,"author":{"gitId":"WingKei67"},"content":"    -fx-font-weight: bolder;","lastModifiedDate":"2022-10-26"},{"lineNumber":80,"author":{"gitId":"WingKei67"},"content":"    -fx-padding: 6px;","lastModifiedDate":"2022-10-26"},{"lineNumber":81,"author":{"gitId":"WingKei67"},"content":"    -fx-border-radius: 4px;","lastModifiedDate":"2022-10-26"},{"lineNumber":82,"author":{"gitId":"WingKei67"},"content":"    -fx-background-radius: 4px;","lastModifiedDate":"2022-10-26"},{"lineNumber":83,"author":{"gitId":"WingKei67"},"content":"    -fx-font-size: 11px;","lastModifiedDate":"2022-10-26"},{"lineNumber":84,"author":{"gitId":"WingKei67"},"content":"    -fx-border-insets: 3px 0;","lastModifiedDate":"2022-10-26"},{"lineNumber":85,"author":{"gitId":"WingKei67"},"content":"    -fx-background-insets: 3px 0;","lastModifiedDate":"2022-10-26"},{"lineNumber":86,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-26"}],"authorContributionMap":{"WingKei67":86}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":10,"author":{"gitId":"WingKei67"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":13,"author":{"gitId":"WingKei67"},"content":"\u003c?import javafx.stage.Stage?\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":15,"author":{"gitId":"WingKei67"},"content":"\u003cfx:root minHeight\u003d\"700\" minWidth\u003d\"1000.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"idENTify\" type\u003d\"javafx.stage.Stage\"","lastModifiedDate":"2022-11-06"},{"lineNumber":16,"author":{"gitId":"WingKei67"},"content":"         xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":18,"author":{"gitId":"WingKei67"},"content":"    \u003cImage url\u003d\"@/images/hospital.png\" /\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"WingKei67"},"content":"        \u003cURL value\u003d\"@MainWindow.css\" /\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2017-06-13"},{"lineNumber":27,"author":{"gitId":"WingKei67"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\" styleClass\u003d\"menuText\"\u003e","lastModifiedDate":"2022-10-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"WingKei67"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Theme\"\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":31,"author":{"gitId":"WingKei67"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#useLightTheme\" text\u003d\"Light\" /\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":32,"author":{"gitId":"WingKei67"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#useDarkTheme\" text\u003d\"Dark\" /\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":33,"author":{"gitId":"WingKei67"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"WingKei67"},"content":"        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":40,"author":{"gitId":"WingKei67"},"content":"            \u003cInsets bottom\u003d\"5\" left\u003d\"20\" right\u003d\"20\" top\u003d\"10\" /\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":43,"author":{"gitId":"WingKei67"},"content":"        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" minHeight\u003d\"150\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":45,"author":{"gitId":"WingKei67"},"content":"            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"WingKei67"},"content":"        \u003cHBox prefHeight\u003d\"500.0\" prefWidth\u003d\"200.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":49,"author":{"gitId":"WingKei67"},"content":"          \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"300.0\" prefWidth\u003d\"300.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":51,"author":{"gitId":"WingKei67"},"content":"              \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2017-06-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"          \u003c/VBox\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":55,"author":{"gitId":"WingKei67"},"content":"          \u003cVBox fx:id\u003d\"appointmentList\" minWidth\u003d\"300.0\" prefWidth\u003d\"300.0\" styleClass\u003d\"pane-with-border\"","lastModifiedDate":"2022-10-26"},{"lineNumber":56,"author":{"gitId":"WingKei67"},"content":"                HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":57,"author":{"gitId":"pwjj2000"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":58,"author":{"gitId":"WingKei67"},"content":"              \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":59,"author":{"gitId":"pwjj2000"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":60,"author":{"gitId":"pwjj2000"},"content":"            \u003cStackPane fx:id\u003d\"appointmentListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":61,"author":{"gitId":"pwjj2000"},"content":"          \u003c/VBox\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":62,"author":{"gitId":"WingKei67"},"content":"        \u003c/HBox\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"WingKei67":22,"-":41,"pwjj2000":4}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"      \u003cLabel fx:id\u003d\"particulars\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$particulars\" /\u003e","lastModifiedDate":"2022-10-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"      \u003crowConstraints\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"         \u003cRowConstraints /\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"      \u003c/rowConstraints\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"JovonLim":8,"-":30}},{"path":"src/main/resources/view/PersonListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"WingKei67"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":7,"author":{"gitId":"WingKei67"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":9,"author":{"gitId":"WingKei67"},"content":"      \u003cHBox alignment\u003d\"CENTER\" fillHeight\u003d\"false\" maxHeight\u003d\"20.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":10,"author":{"gitId":"WingKei67"},"content":"         \u003cchildren\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":11,"author":{"gitId":"WingKei67"},"content":"            \u003cLabel fx:id\u003d\"patientHeading\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" styleClass\u003d\"label-listHeader\"","lastModifiedDate":"2022-10-26"},{"lineNumber":12,"author":{"gitId":"WingKei67"},"content":"                   text\u003d\"PATIENTS\" textAlignment\u003d\"CENTER\"/\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":13,"author":{"gitId":"WingKei67"},"content":"         \u003c/children\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":14,"author":{"gitId":"WingKei67"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"WingKei67":8,"-":8}},{"path":"src/main/resources/view/ResultDisplay.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.TextArea?\u003e","lastModifiedDate":"2016-10-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-06-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"WingKei67"},"content":"\u003cStackPane fx:id\u003d\"resultPane\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\"","lastModifiedDate":"2022-10-26"},{"lineNumber":7,"author":{"gitId":"WingKei67"},"content":"           xmlns:fx\u003d\"http://javafx.com/fxml/1\" \u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e","lastModifiedDate":"2022-10-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c/StackPane\u003e","lastModifiedDate":"2017-06-22"}],"authorContributionMap":{"WingKei67":2,"-":7}},{"path":"src/test/java/seedu/address/commons/util/AppUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;","lastModifiedDate":"2016-09-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class AppUtilTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public void getImage_exitingImage() {","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"WingKei67"},"content":"        assertNotNull(AppUtil.getImage(\"/images/hospital.png\"));","lastModifiedDate":"2022-10-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void checkArgument_true_nothingHappens() {","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true);","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true, \"\");","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String errorMessage \u003d \"error message\";","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"WingKei67":1,"-":35}},{"path":"src/test/java/seedu/address/logic/CommandHistoryTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.logic;","lastModifiedDate":"2022-10-21"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-10-21"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-21"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import java.util.Collections;","lastModifiedDate":"2022-10-21"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"import java.util.List;","lastModifiedDate":"2022-10-21"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-21"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"public class CommandHistoryTest {","lastModifiedDate":"2022-10-21"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"    private final CommandHistory history \u003d new CommandHistory();","lastModifiedDate":"2022-10-21"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"    public void execute_maxSizeTen_success() {","lastModifiedDate":"2022-10-21"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"        String str \u003d \"list patients\";","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"        for (int i \u003d 0; i \u003c 20; i++) {","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"            history.addCommand(str);","lastModifiedDate":"2022-11-05"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"        assertEquals(10, history.getHistory().size());","lastModifiedDate":"2022-10-21"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":"    public void execute_reverseString_success() {","lastModifiedDate":"2022-10-21"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"        List\u003cString\u003e strings \u003d Arrays.asList(\"list patients\", \"list appts\", \"mark 1\");","lastModifiedDate":"2022-10-21"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"        for (String str : strings) {","lastModifiedDate":"2022-10-21"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"            history.addCommand(str);","lastModifiedDate":"2022-11-05"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-21"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"        Collections.reverse(strings);","lastModifiedDate":"2022-10-21"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"        String expectedMessage \u003d String.join(\"\\n\", strings);","lastModifiedDate":"2022-10-21"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"        assertEquals(expectedMessage, history.getHistoryString());","lastModifiedDate":"2022-10-21"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-21"}],"authorContributionMap":{"JovonLim":33}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2017-01-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"import seedu.address.storage.JsonCommandHistoryStorage;","lastModifiedDate":"2022-10-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"        JsonCommandHistoryStorage commandHistoryStorage \u003d new JsonCommandHistoryStorage(","lastModifiedDate":"2022-10-21"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"                temporaryFolder.resolve(\"commandHistory.json\"));","lastModifiedDate":"2022-10-21"},{"lineNumber":52,"author":{"gitId":"JovonLim"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, commandHistoryStorage);","lastModifiedDate":"2022-10-21"},{"lineNumber":53,"author":{"gitId":"JovonLim"},"content":"        logic \u003d new LogicManager(model, storage, new CommandHistory());","lastModifiedDate":"2022-10-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";","lastModifiedDate":"2017-06-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-06-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":70,"author":{"gitId":"pwjj2000"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD + \" patients\";","lastModifiedDate":"2022-10-06"},{"lineNumber":71,"author":{"gitId":"pwjj2000"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS_PATIENTS, model);","lastModifiedDate":"2022-10-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":81,"author":{"gitId":"JovonLim"},"content":"        JsonCommandHistoryStorage commandHistoryStorage \u003d new JsonCommandHistoryStorage(","lastModifiedDate":"2022-10-21"},{"lineNumber":82,"author":{"gitId":"JovonLim"},"content":"                temporaryFolder.resolve(\"commandHistory.json\"));","lastModifiedDate":"2022-10-21"},{"lineNumber":83,"author":{"gitId":"JovonLim"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, commandHistoryStorage);","lastModifiedDate":"2022-10-21"},{"lineNumber":84,"author":{"gitId":"JovonLim"},"content":"        logic \u003d new LogicManager(model, storage, new CommandHistory());","lastModifiedDate":"2022-10-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // Execute add command","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2018-12-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);","lastModifiedDate":"2018-12-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":97,"author":{"gitId":"pwjj2000"},"content":"    public void getFilteredPatientList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2022-10-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":99,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":100,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":101,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":102,"author":{"gitId":"pwjj2000"},"content":"    public void getFilteredAppointmentList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2022-10-08"},{"lineNumber":103,"author":{"gitId":"pwjj2000"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredAppointmentList().remove(0));","lastModifiedDate":"2022-10-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-05-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {","lastModifiedDate":"2018-12-09"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2018-12-09"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-12-09"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"JovonLim":9,"-":155,"pwjj2000":8}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"WingKei67"},"content":"import java.util.Comparator;","lastModifiedDate":"2022-10-22"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"import java.util.List;","lastModifiedDate":"2022-10-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-05-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-05-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class AddCommandTest {","lastModifiedDate":"2017-05-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);","lastModifiedDate":"2019-01-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);","lastModifiedDate":"2017-05-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2019-05-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":119,"author":{"gitId":"pwjj2000"},"content":"        @Override","lastModifiedDate":"2022-10-06"},{"lineNumber":120,"author":{"gitId":"pwjj2000"},"content":"        public void addAppointment(Appointment appointment) {","lastModifiedDate":"2022-10-06"},{"lineNumber":121,"author":{"gitId":"pwjj2000"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-06"},{"lineNumber":122,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":123,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2018-11-27"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-12"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2018-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":144,"author":{"gitId":"pwjj2000"},"content":"        @Override","lastModifiedDate":"2022-10-06"},{"lineNumber":145,"author":{"gitId":"pwjj2000"},"content":"        public void deleteAppointment(Appointment target) {","lastModifiedDate":"2022-10-06"},{"lineNumber":146,"author":{"gitId":"pwjj2000"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-06"},{"lineNumber":147,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":148,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":149,"author":{"gitId":"JovonLim"},"content":"        @Override","lastModifiedDate":"2022-10-09"},{"lineNumber":150,"author":{"gitId":"JovonLim"},"content":"        public void deleteAppointments(List\u003cAppointment\u003e appointmentList) {","lastModifiedDate":"2022-10-09"},{"lineNumber":151,"author":{"gitId":"JovonLim"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-09"},{"lineNumber":152,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-09"},{"lineNumber":153,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":154,"author":{"gitId":"JovonLim"},"content":"        @Override","lastModifiedDate":"2022-10-09"},{"lineNumber":155,"author":{"gitId":"JovonLim"},"content":"        public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2022-10-09"},{"lineNumber":156,"author":{"gitId":"JovonLim"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-09"},{"lineNumber":157,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-09"},{"lineNumber":158,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":169,"author":{"gitId":"pwjj2000"},"content":"        @Override","lastModifiedDate":"2022-10-06"},{"lineNumber":170,"author":{"gitId":"pwjj2000"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2022-10-06"},{"lineNumber":171,"author":{"gitId":"pwjj2000"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-06"},{"lineNumber":172,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":173,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":178,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":179,"author":{"gitId":"pwjj2000"},"content":"        @Override","lastModifiedDate":"2022-10-06"},{"lineNumber":180,"author":{"gitId":"pwjj2000"},"content":"        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {","lastModifiedDate":"2022-10-06"},{"lineNumber":181,"author":{"gitId":"pwjj2000"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-06"},{"lineNumber":182,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":183,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":184,"author":{"gitId":"WingKei67"},"content":"        @Override","lastModifiedDate":"2022-10-22"},{"lineNumber":185,"author":{"gitId":"WingKei67"},"content":"        public void updatePersonComparator(Comparator\u003cPerson\u003e comparator) {","lastModifiedDate":"2022-10-22"},{"lineNumber":186,"author":{"gitId":"WingKei67"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-22"},{"lineNumber":187,"author":{"gitId":"WingKei67"},"content":"        }","lastModifiedDate":"2022-10-22"},{"lineNumber":188,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":189,"author":{"gitId":"WingKei67"},"content":"        @Override","lastModifiedDate":"2022-10-22"},{"lineNumber":190,"author":{"gitId":"WingKei67"},"content":"        public void updateAppointmentComparator(Comparator\u003cAppointment\u003e comparator) {","lastModifiedDate":"2022-10-22"},{"lineNumber":191,"author":{"gitId":"WingKei67"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-22"},{"lineNumber":192,"author":{"gitId":"WingKei67"},"content":"        }","lastModifiedDate":"2022-10-22"},{"lineNumber":193,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-11-06"},{"lineNumber":194,"author":{"gitId":"JovonLim"},"content":"        @Override","lastModifiedDate":"2022-11-06"},{"lineNumber":195,"author":{"gitId":"JovonLim"},"content":"        public void updateFilteredLists(Predicate\u003cPerson\u003e predicate, Predicate\u003cAppointment\u003e appointmentPredicate) {","lastModifiedDate":"2022-11-06"},{"lineNumber":196,"author":{"gitId":"JovonLim"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-11-06"},{"lineNumber":197,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-11-06"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":201,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":202,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2018-08-07"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2018-08-07"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2018-08-07"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":219,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":220,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2017-05-12"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":226,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":227,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-08"},{"lineNumber":232,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":233,"author":{"gitId":"-"},"content":"            personsAdded.add(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-04"},{"lineNumber":238,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2017-05-04"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":242,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"WingKei67":11,"JovonLim":16,"-":194,"pwjj2000":21}},{"path":"src/test/java/seedu/address/logic/commands/BookCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-01"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-10-01"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-01"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-10-01"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-01"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-01"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-01"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-01"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-01"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-10-01"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-10-01"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-01"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2022-10-01"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"public class BookCommandTest {","lastModifiedDate":"2022-10-01"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-01"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"    private final Appointment appointment \u003d new Appointment(\"Sore Throat\", \"2022-12-10 16:30\", \"2M\", false);","lastModifiedDate":"2022-10-14"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-01"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"    public void execute_validIndexBooking_success() {","lastModifiedDate":"2022-10-01"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"        Person personToBookFor \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2022-10-01"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"        Person editedPerson \u003d new PersonBuilder(personToBookFor).withAppointment(appointment).build();","lastModifiedDate":"2022-10-01"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"        BookCommand bookCommand \u003d new BookCommand(INDEX_FIRST_PERSON, appointment);","lastModifiedDate":"2022-10-01"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"        String expectedMessage \u003d String.format(BookCommand.MESSAGE_BOOK_APPOINTMENT_SUCCESS, editedPerson);","lastModifiedDate":"2022-10-01"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-01"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"        expectedModel.setPerson(personToBookFor, editedPerson);","lastModifiedDate":"2022-10-01"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"        expectedModel.addAppointment(appointment);","lastModifiedDate":"2022-10-09"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"        assertCommandSuccess(bookCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-01"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-01"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2022-10-01"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2022-10-01"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"        BookCommand bookCommand \u003d new BookCommand(outOfBoundIndex, appointment);","lastModifiedDate":"2022-10-01"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":46,"author":{"gitId":"JovonLim"},"content":"        assertCommandFailure(bookCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-01"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-01"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"    public void execute_invalidAppointmentBooking_throwsCommandException() {","lastModifiedDate":"2022-10-01"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"        Person personToBookFor \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2022-10-01"},{"lineNumber":52,"author":{"gitId":"JovonLim"},"content":"        Person editedPerson \u003d new PersonBuilder(personToBookFor).withAppointment(appointment).build();","lastModifiedDate":"2022-10-01"},{"lineNumber":53,"author":{"gitId":"JovonLim"},"content":"        model.setPerson(personToBookFor, editedPerson);","lastModifiedDate":"2022-10-01"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":55,"author":{"gitId":"JovonLim"},"content":"        BookCommand bookCommand \u003d new BookCommand(INDEX_FIRST_PERSON, appointment);","lastModifiedDate":"2022-10-01"},{"lineNumber":56,"author":{"gitId":"JovonLim"},"content":"        assertCommandFailure(bookCommand, model, BookCommand.MESSAGE_DUPLICATE_APPOINTMENT);","lastModifiedDate":"2022-10-01"},{"lineNumber":57,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":58,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-01"}],"authorContributionMap":{"JovonLim":58}},{"path":"src/test/java/seedu/address/logic/commands/CancelCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"guanzhou03"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-04"},{"lineNumber":2,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":3,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-10-04"},{"lineNumber":4,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-04"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-18"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_NON_EXISTENT;","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_APPOINTMENT;","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-04"},{"lineNumber":10,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-18"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-04"},{"lineNumber":14,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":15,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-04"},{"lineNumber":16,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-04"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2022-10-18"},{"lineNumber":18,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-04"},{"lineNumber":19,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-10-04"},{"lineNumber":20,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-10-04"},{"lineNumber":21,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-04"},{"lineNumber":22,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2022-10-04"},{"lineNumber":23,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":24,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":25,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":26,"author":{"gitId":"guanzhou03"},"content":"/**","lastModifiedDate":"2022-10-04"},{"lineNumber":27,"author":{"gitId":"guanzhou03"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2022-10-04"},{"lineNumber":28,"author":{"gitId":"guanzhou03"},"content":" * {@code DeleteCommand}.","lastModifiedDate":"2022-10-04"},{"lineNumber":29,"author":{"gitId":"guanzhou03"},"content":" */","lastModifiedDate":"2022-10-04"},{"lineNumber":30,"author":{"gitId":"guanzhou03"},"content":"public class CancelCommandTest {","lastModifiedDate":"2022-10-04"},{"lineNumber":31,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":32,"author":{"gitId":"guanzhou03"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-04"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":34,"author":{"gitId":"guanzhou03"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":35,"author":{"gitId":"guanzhou03"},"content":"    public void execute_validIndexCancel_success() {","lastModifiedDate":"2022-10-04"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"        Person person \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2022-10-18"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"        Person personWithNoBooking \u003d new PersonBuilder(person).withAppointmentList(new ArrayList\u003c\u003e()).build();","lastModifiedDate":"2022-10-18"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"        CancelCommand cancelCommand \u003d new CancelCommand(INDEX_SECOND_APPOINTMENT);","lastModifiedDate":"2022-10-18"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"        String expectedCancelMessage \u003d String.format(CancelCommand.MESSAGE_CANCEL_APPOINTMENT_SUCCESS,","lastModifiedDate":"2022-10-18"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"                INDEX_FIRST_APPOINTMENT.getOneBased())","lastModifiedDate":"2022-10-18"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"                + personWithNoBooking.getName();","lastModifiedDate":"2022-10-18"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"        ModelManager expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2022-10-18"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"        expectedModel.deleteAppointment(expectedModel.getFilteredAppointmentList().get(1));","lastModifiedDate":"2022-10-18"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"        assertCommandSuccess(cancelCommand, model, expectedCancelMessage, expectedModel);","lastModifiedDate":"2022-10-18"},{"lineNumber":48,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":49,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":50,"author":{"gitId":"guanzhou03"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":51,"author":{"gitId":"guanzhou03"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2022-10-04"},{"lineNumber":52,"author":{"gitId":"guanzhou03"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2022-10-04"},{"lineNumber":53,"author":{"gitId":"guanzhou03"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2022-10-04"},{"lineNumber":54,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":55,"author":{"gitId":"guanzhou03"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-04"},{"lineNumber":56,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":57,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":58,"author":{"gitId":"guanzhou03"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":59,"author":{"gitId":"guanzhou03"},"content":"    public void execute_invalidAppointmentCancelling_throwsCommandException() {","lastModifiedDate":"2022-10-04"},{"lineNumber":60,"author":{"gitId":"NicholasTYD"},"content":"        CancelCommand cancelCommand \u003d new CancelCommand(INDEX_NON_EXISTENT);","lastModifiedDate":"2022-10-18"},{"lineNumber":61,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":62,"author":{"gitId":"guanzhou03"},"content":"        assertCommandFailure(cancelCommand, model, Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-04"},{"lineNumber":63,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":64,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":65,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":66,"author":{"gitId":"guanzhou03"},"content":"}","lastModifiedDate":"2022-10-04"}],"authorContributionMap":{"NicholasTYD":8,"JovonLim":13,"guanzhou03":45}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-10-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REASON;","lastModifiedDate":"2022-10-08"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RECURRING_PERIOD;","lastModifiedDate":"2022-10-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_APPOINTMENT;","lastModifiedDate":"2022-10-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2018-01-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-06-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-06-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.predicates.NameContainsKeywordsPredicate;","lastModifiedDate":"2022-10-15"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"import seedu.address.testutil.EditAppointmentDescriptorBuilder;","lastModifiedDate":"2022-10-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-07-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"    public static final String EMPTY_STRING \u003d \"\";","lastModifiedDate":"2022-10-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":45,"author":{"gitId":"pwjj2000"},"content":"    public static final String VALID_TAG_EAR \u003d \"ear\";","lastModifiedDate":"2022-10-21"},{"lineNumber":46,"author":{"gitId":"pwjj2000"},"content":"    public static final String VALID_TAG_NOSE \u003d \"nose\";","lastModifiedDate":"2022-10-21"},{"lineNumber":47,"author":{"gitId":"pwjj2000"},"content":"    public static final String VALID_TAG_THROAT \u003d \"throat\";","lastModifiedDate":"2022-10-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"    public static final String VALID_REASON_AMY \u003d \"Sore Throat\";","lastModifiedDate":"2022-10-08"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"    public static final String VALID_DATE_AMY \u003d \"2019-12-10 16:30\";","lastModifiedDate":"2022-10-08"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"    public static final String VALID_REASON_BOB \u003d \"Ear Infection\";","lastModifiedDate":"2022-10-08"},{"lineNumber":52,"author":{"gitId":"JovonLim"},"content":"    public static final String VALID_DATE_BOB \u003d \"2019-12-20 16:30\";","lastModifiedDate":"2022-10-08"},{"lineNumber":53,"author":{"gitId":"JovonLim"},"content":"    public static final String VALID_TIME_PERIOD_AMY \u003d \"1Y\";","lastModifiedDate":"2022-10-14"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"    public static final String VALID_TIME_PERIOD_BOB \u003d \"\";","lastModifiedDate":"2022-10-14"},{"lineNumber":55,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":65,"author":{"gitId":"pwjj2000"},"content":"    public static final String TAG_DESC_NOSE \u003d \" \" + PREFIX_TAG + VALID_TAG_NOSE;","lastModifiedDate":"2022-10-21"},{"lineNumber":66,"author":{"gitId":"pwjj2000"},"content":"    public static final String TAG_DESC_EAR \u003d \" \" + PREFIX_TAG + VALID_TAG_EAR;","lastModifiedDate":"2022-10-21"},{"lineNumber":67,"author":{"gitId":"pwjj2000"},"content":"    public static final String TAG_DESC_THROAT \u003d \" \" + PREFIX_TAG + VALID_TAG_THROAT;","lastModifiedDate":"2022-10-21"},{"lineNumber":68,"author":{"gitId":"NicholasTYD"},"content":"    public static final String TAG_APPOINTMENT_DESC_NOSE \u003d \" \" + PREFIX_TAG_APPOINTMENT + VALID_TAG_NOSE;","lastModifiedDate":"2022-10-25"},{"lineNumber":69,"author":{"gitId":"NicholasTYD"},"content":"    public static final String TAG_APPOINTMENT_DESC_EAR \u003d \" \" + PREFIX_TAG_APPOINTMENT + VALID_TAG_EAR;","lastModifiedDate":"2022-10-25"},{"lineNumber":70,"author":{"gitId":"NicholasTYD"},"content":"    public static final String TAG_APPOINTMENT_DESC_THROAT \u003d \" \" + PREFIX_TAG_APPOINTMENT + VALID_TAG_THROAT;","lastModifiedDate":"2022-10-25"},{"lineNumber":71,"author":{"gitId":"JovonLim"},"content":"    public static final String REASON_DESC_AMY \u003d \" \" + PREFIX_REASON + VALID_REASON_AMY;","lastModifiedDate":"2022-10-08"},{"lineNumber":72,"author":{"gitId":"JovonLim"},"content":"    public static final String DATE_DESC_AMY \u003d \" \" + PREFIX_DATE + VALID_DATE_AMY;","lastModifiedDate":"2022-10-08"},{"lineNumber":73,"author":{"gitId":"JovonLim"},"content":"    public static final String REASON_DESC_BOB \u003d \" \" + PREFIX_REASON + VALID_REASON_BOB;","lastModifiedDate":"2022-10-08"},{"lineNumber":74,"author":{"gitId":"JovonLim"},"content":"    public static final String DATE_DESC_BOB \u003d \" \" + PREFIX_DATE + VALID_DATE_BOB;","lastModifiedDate":"2022-10-08"},{"lineNumber":75,"author":{"gitId":"JovonLim"},"content":"    public static final String TIME_PERIOD_DESC_AMY \u003d \" \" + PREFIX_RECURRING_PERIOD + VALID_TIME_PERIOD_AMY;","lastModifiedDate":"2022-10-14"},{"lineNumber":76,"author":{"gitId":"JovonLim"},"content":"    public static final String TIME_PERIOD_DESC_BOB \u003d \" \" + PREFIX_RECURRING_PERIOD + VALID_TIME_PERIOD_BOB;","lastModifiedDate":"2022-10-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses","lastModifiedDate":"2017-07-05"},{"lineNumber":82,"author":{"gitId":"JovonLim"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"Sick\";","lastModifiedDate":"2022-10-31"},{"lineNumber":83,"author":{"gitId":"JovonLim"},"content":"    public static final String INVALID_REASON_DESC \u003d \" \" + PREFIX_REASON + \"\";","lastModifiedDate":"2022-10-08"},{"lineNumber":84,"author":{"gitId":"JovonLim"},"content":"    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"2022-15-12 16:30\";","lastModifiedDate":"2022-10-08"},{"lineNumber":85,"author":{"gitId":"JovonLim"},"content":"    public static final String INVALID_TIME_PERIOD_DESC \u003d \" \" + PREFIX_RECURRING_PERIOD + \"0C\";","lastModifiedDate":"2022-10-14"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":89,"author":{"gitId":"JovonLim"},"content":"    public static final EditPatientCommand.EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2022-10-08"},{"lineNumber":90,"author":{"gitId":"JovonLim"},"content":"    public static final EditPatientCommand.EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2022-10-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":95,"author":{"gitId":"pwjj2000"},"content":"                .withTags(VALID_TAG_NOSE).build();","lastModifiedDate":"2022-10-21"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":98,"author":{"gitId":"pwjj2000"},"content":"                .withTags(VALID_TAG_EAR, VALID_TAG_NOSE).build();","lastModifiedDate":"2022-10-21"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":101,"author":{"gitId":"JovonLim"},"content":"    public static final EditAppointmentCommand.EditAppointmentDescriptor DESC_APPT_AMY;","lastModifiedDate":"2022-10-31"},{"lineNumber":102,"author":{"gitId":"JovonLim"},"content":"    public static final EditAppointmentCommand.EditAppointmentDescriptor DESC_APPT_BOB;","lastModifiedDate":"2022-10-31"},{"lineNumber":103,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":104,"author":{"gitId":"JovonLim"},"content":"    static {","lastModifiedDate":"2022-10-31"},{"lineNumber":105,"author":{"gitId":"JovonLim"},"content":"        DESC_APPT_AMY \u003d new EditAppointmentDescriptorBuilder().withReason(VALID_REASON_AMY)","lastModifiedDate":"2022-10-31"},{"lineNumber":106,"author":{"gitId":"JovonLim"},"content":"                .withDateTime(LocalDateTime.parse(VALID_DATE_AMY, Appointment.DATE_FORMATTER))","lastModifiedDate":"2022-10-31"},{"lineNumber":107,"author":{"gitId":"JovonLim"},"content":"                .withTimePeriod(List.of(1, 0, 0))","lastModifiedDate":"2022-10-31"},{"lineNumber":108,"author":{"gitId":"JovonLim"},"content":"                .withTags(VALID_TAG_EAR).build();","lastModifiedDate":"2022-10-31"},{"lineNumber":109,"author":{"gitId":"JovonLim"},"content":"        DESC_APPT_BOB \u003d new EditAppointmentDescriptorBuilder().withReason(VALID_REASON_BOB)","lastModifiedDate":"2022-10-31"},{"lineNumber":110,"author":{"gitId":"JovonLim"},"content":"                .withDateTime(LocalDateTime.parse(VALID_DATE_BOB, Appointment.DATE_FORMATTER))","lastModifiedDate":"2022-10-31"},{"lineNumber":111,"author":{"gitId":"JovonLim"},"content":"                .withTimePeriod(List.of(0, 0, 0))","lastModifiedDate":"2022-10-31"},{"lineNumber":112,"author":{"gitId":"JovonLim"},"content":"                .withTags(VALID_TAG_NOSE).build();","lastModifiedDate":"2022-10-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-10-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2019-01-25"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2018-01-10"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());","lastModifiedDate":"2017-06-05"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":158,"author":{"gitId":"NicholasTYD"},"content":"     * Updates {@code model}\u0027s filtered person list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2022-10-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2018-01-31"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-20"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2017-07-20"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":171,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-24"},{"lineNumber":172,"author":{"gitId":"NicholasTYD"},"content":"     * Updates {@code model}\u0027s filtered appointment list to show only the appointment at the given {@code targetIndex}","lastModifiedDate":"2022-10-24"},{"lineNumber":173,"author":{"gitId":"NicholasTYD"},"content":"     * in the {@code model}\u0027s address book.","lastModifiedDate":"2022-10-24"},{"lineNumber":174,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-24"},{"lineNumber":175,"author":{"gitId":"NicholasTYD"},"content":"    public static void showAppointmentAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2022-10-24"},{"lineNumber":176,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredAppointmentList().size());","lastModifiedDate":"2022-10-24"},{"lineNumber":177,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":178,"author":{"gitId":"NicholasTYD"},"content":"        Appointment appointmentToShow \u003d model.getFilteredAppointmentList().get(targetIndex.getZeroBased());","lastModifiedDate":"2022-10-24"},{"lineNumber":179,"author":{"gitId":"NicholasTYD"},"content":"        model.updateFilteredAppointmentList(appointment -\u003e appointment.isSameAppointment(appointmentToShow));","lastModifiedDate":"2022-10-24"},{"lineNumber":180,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":181,"author":{"gitId":"NicholasTYD"},"content":"        assertEquals(1, model.getFilteredAppointmentList().size());","lastModifiedDate":"2022-10-24"},{"lineNumber":182,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"NicholasTYD":20,"JovonLim":36,"-":119,"pwjj2000":8}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2018-01-31"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2020-12-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}.","lastModifiedDate":"2018-01-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"guanzhou03"},"content":"        String expectedMessage \u003d String.format(Messages.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);","lastModifiedDate":"2022-10-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-06-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":57,"author":{"gitId":"guanzhou03"},"content":"        String expectedMessage \u003d String.format(Messages.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);","lastModifiedDate":"2022-10-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-06-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-06-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-06-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {","lastModifiedDate":"2017-06-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);","lastModifiedDate":"2017-06-12"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());","lastModifiedDate":"2018-02-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"-":107,"guanzhou03":2}},{"path":"src/test/java/seedu/address/logic/commands/EditAppointmentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-08"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-10-08"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-08"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-08"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-08"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-31"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"import java.util.HashSet;","lastModifiedDate":"2022-10-31"},{"lineNumber":11,"author":{"gitId":"WingKei67"},"content":"import java.util.Set;","lastModifiedDate":"2022-11-01"},{"lineNumber":12,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-01"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-08"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-08"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-08"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditAppointmentCommand.EditAppointmentDescriptor;","lastModifiedDate":"2022-10-08"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2022-10-08"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-08"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-10-08"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-10-08"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-08"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-08"},{"lineNumber":24,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.person.predicates.HiddenPredicateSingleton;","lastModifiedDate":"2022-10-27"},{"lineNumber":25,"author":{"gitId":"WingKei67"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2022-11-01"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"import seedu.address.testutil.EditAppointmentDescriptorBuilder;","lastModifiedDate":"2022-10-08"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"public class EditAppointmentCommandTest {","lastModifiedDate":"2022-10-08"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-15"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2022-10-08"},{"lineNumber":33,"author":{"gitId":"WingKei67"},"content":"        Appointment appointment \u003d new Appointment(\"Sore Throat\", \"2019-10-10 16:30\", \"1Y2M\",","lastModifiedDate":"2022-11-01"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"                new HashSet\u003c\u003e(Arrays.asList(Tag.convertToTag(\"Ear\"), Tag.convertToTag(\"Nose\"))), true);","lastModifiedDate":"2022-10-31"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"        Person person \u003d model.getFilteredPersonList().get(INDEX_THIRD_PERSON.getZeroBased());","lastModifiedDate":"2022-10-18"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"        appointment.setPatient(person);","lastModifiedDate":"2022-10-09"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder(appointment).build();","lastModifiedDate":"2022-10-18"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentCommand editAppointmentCommand \u003d new EditAppointmentCommand(INDEX_FIRST_APPOINTMENT, descriptor);","lastModifiedDate":"2022-10-18"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"        String expectedMessage \u003d String.format(EditAppointmentCommand.MESSAGE_EDIT_APPOINTMENT_SUCCESS,","lastModifiedDate":"2022-10-08"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"                person.getName(), appointment);","lastModifiedDate":"2022-10-18"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2022-10-18"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"        expectedModel.setAppointment(expectedModel.getFilteredAppointmentList().get(0), appointment);","lastModifiedDate":"2022-10-18"},{"lineNumber":46,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"        assertCommandSuccess(editAppointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-18"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"    public void execute_oneFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2022-10-08"},{"lineNumber":52,"author":{"gitId":"WingKei67"},"content":"        Appointment appointment \u003d new Appointment(\"Sore Throat\", \"2010-12-31 23:45\", \"\",","lastModifiedDate":"2022-11-01"},{"lineNumber":53,"author":{"gitId":"WingKei67"},"content":"                Set.of(Tag.THROAT), true);","lastModifiedDate":"2022-11-01"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"        Person person \u003d model.getFilteredPersonList().get(INDEX_THIRD_PERSON.getZeroBased());","lastModifiedDate":"2022-10-18"},{"lineNumber":55,"author":{"gitId":"JovonLim"},"content":"        appointment.setPatient(person);","lastModifiedDate":"2022-10-15"},{"lineNumber":56,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":57,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder().withReason(\"Sore Throat\").build();","lastModifiedDate":"2022-10-18"},{"lineNumber":58,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentCommand editAppointmentCommand \u003d new EditAppointmentCommand(INDEX_FIRST_APPOINTMENT, descriptor);","lastModifiedDate":"2022-10-18"},{"lineNumber":59,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":60,"author":{"gitId":"JovonLim"},"content":"        String expectedMessage \u003d String.format(EditAppointmentCommand.MESSAGE_EDIT_APPOINTMENT_SUCCESS,","lastModifiedDate":"2022-10-08"},{"lineNumber":61,"author":{"gitId":"JovonLim"},"content":"                person.getName(), appointment);","lastModifiedDate":"2022-10-18"},{"lineNumber":62,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":63,"author":{"gitId":"JovonLim"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2022-10-18"},{"lineNumber":64,"author":{"gitId":"JovonLim"},"content":"        expectedModel.setAppointment(expectedModel.getFilteredAppointmentList().get(0), appointment);","lastModifiedDate":"2022-10-18"},{"lineNumber":65,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":66,"author":{"gitId":"JovonLim"},"content":"        assertCommandSuccess(editAppointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-18"},{"lineNumber":67,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":68,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":69,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":70,"author":{"gitId":"JovonLim"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2022-10-15"},{"lineNumber":71,"author":{"gitId":"guanzhou03"},"content":"        HiddenPredicateSingleton.getInstance().clearHiddenAll();","lastModifiedDate":"2022-11-05"},{"lineNumber":72,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentCommand editAppointmentCommand \u003d new EditAppointmentCommand(INDEX_FIRST_APPOINTMENT,","lastModifiedDate":"2022-10-15"},{"lineNumber":73,"author":{"gitId":"JovonLim"},"content":"                new EditAppointmentDescriptor());","lastModifiedDate":"2022-10-18"},{"lineNumber":74,"author":{"gitId":"JovonLim"},"content":"        Person person \u003d model.getFilteredPersonList().get(INDEX_THIRD_PERSON.getZeroBased());","lastModifiedDate":"2022-10-18"},{"lineNumber":75,"author":{"gitId":"JovonLim"},"content":"        Appointment appointment \u003d person.getAppointments().get(0);","lastModifiedDate":"2022-10-18"},{"lineNumber":76,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":77,"author":{"gitId":"JovonLim"},"content":"        String expectedMessage \u003d String.format(EditAppointmentCommand.MESSAGE_EDIT_APPOINTMENT_SUCCESS,","lastModifiedDate":"2022-10-15"},{"lineNumber":78,"author":{"gitId":"JovonLim"},"content":"                person.getName(), appointment);","lastModifiedDate":"2022-10-15"},{"lineNumber":79,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":80,"author":{"gitId":"JovonLim"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2022-10-18"},{"lineNumber":81,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":82,"author":{"gitId":"JovonLim"},"content":"        assertCommandSuccess(editAppointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-18"},{"lineNumber":83,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":84,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":85,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":86,"author":{"gitId":"JovonLim"},"content":"    public void execute_duplicateAppointmentTimeUnfilteredList_failure() {","lastModifiedDate":"2022-10-08"},{"lineNumber":87,"author":{"gitId":"JovonLim"},"content":"        Appointment appointment \u003d new Appointment(\"Cough\", \"2019-12-10 16:30\", \"\", true);","lastModifiedDate":"2022-10-14"},{"lineNumber":88,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder(appointment).build();","lastModifiedDate":"2022-10-08"},{"lineNumber":89,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentCommand editAppointmentCommand \u003d new EditAppointmentCommand(INDEX_FIRST_APPOINTMENT, descriptor);","lastModifiedDate":"2022-10-15"},{"lineNumber":90,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":91,"author":{"gitId":"JovonLim"},"content":"        assertCommandFailure(editAppointmentCommand, model, EditAppointmentCommand.MESSAGE_DUPLICATE_APPOINTMENT);","lastModifiedDate":"2022-10-08"},{"lineNumber":92,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":93,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":94,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":95,"author":{"gitId":"JovonLim"},"content":"    public void execute_invalidAppointmentIndexUnfilteredList_failure() {","lastModifiedDate":"2022-10-08"},{"lineNumber":96,"author":{"gitId":"JovonLim"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAppointmentList().size() + 1);","lastModifiedDate":"2022-10-15"},{"lineNumber":97,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder().withReason(\"Cough\").build();","lastModifiedDate":"2022-10-08"},{"lineNumber":98,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentCommand editAppointmentCommand \u003d new EditAppointmentCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2022-10-15"},{"lineNumber":99,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":100,"author":{"gitId":"JovonLim"},"content":"        assertCommandFailure(editAppointmentCommand, model, Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-08"},{"lineNumber":101,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":102,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-08"}],"authorContributionMap":{"JovonLim":94,"WingKei67":6,"guanzhou03":2}},{"path":"src/test/java/seedu/address/logic/commands/EditAppointmentDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-31"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-31"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-31"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_APPT_AMY;","lastModifiedDate":"2022-10-31"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_APPT_BOB;","lastModifiedDate":"2022-10-31"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_BOB;","lastModifiedDate":"2022-10-31"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REASON_BOB;","lastModifiedDate":"2022-10-31"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NOSE;","lastModifiedDate":"2022-10-31"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-31"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"import java.util.List;","lastModifiedDate":"2022-10-31"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-31"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditAppointmentCommand.EditAppointmentDescriptor;","lastModifiedDate":"2022-10-31"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-31"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"import seedu.address.testutil.EditAppointmentDescriptorBuilder;","lastModifiedDate":"2022-10-31"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"public class EditAppointmentDescriptorTest {","lastModifiedDate":"2022-10-31"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-31"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"    public void equals() {","lastModifiedDate":"2022-10-31"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-10-31"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentDescriptor descriptorWithSameValues \u003d new EditAppointmentDescriptor(DESC_APPT_AMY);","lastModifiedDate":"2022-10-31"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"        assertTrue(DESC_APPT_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2022-10-31"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-10-31"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"        assertTrue(DESC_APPT_AMY.equals(DESC_APPT_AMY));","lastModifiedDate":"2022-10-31"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-10-31"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"        assertFalse(DESC_APPT_AMY.equals(null));","lastModifiedDate":"2022-10-31"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2022-10-31"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"        assertFalse(DESC_APPT_AMY.equals(5));","lastModifiedDate":"2022-10-31"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2022-10-31"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"        assertFalse(DESC_APPT_AMY.equals(DESC_APPT_BOB));","lastModifiedDate":"2022-10-31"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"        // different reason -\u003e returns false","lastModifiedDate":"2022-10-31"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentDescriptor editedAmyAppt \u003d new EditAppointmentDescriptorBuilder(DESC_APPT_AMY)","lastModifiedDate":"2022-10-31"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"                .withReason(VALID_REASON_BOB).build();","lastModifiedDate":"2022-10-31"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"        assertFalse(DESC_APPT_AMY.equals(editedAmyAppt));","lastModifiedDate":"2022-10-31"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"        // different dateTime -\u003e returns false","lastModifiedDate":"2022-10-31"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"        editedAmyAppt \u003d new EditAppointmentDescriptorBuilder(DESC_APPT_AMY)","lastModifiedDate":"2022-10-31"},{"lineNumber":46,"author":{"gitId":"JovonLim"},"content":"                .withDateTime(LocalDateTime.parse(VALID_DATE_BOB, Appointment.DATE_FORMATTER)).build();","lastModifiedDate":"2022-10-31"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"        assertFalse(DESC_APPT_AMY.equals(editedAmyAppt));","lastModifiedDate":"2022-10-31"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"        // different timePeriod -\u003e returns false","lastModifiedDate":"2022-10-31"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"        editedAmyAppt \u003d new EditAppointmentDescriptorBuilder(DESC_APPT_AMY).withTimePeriod(List.of(0, 0, 0)).build();","lastModifiedDate":"2022-10-31"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"        assertFalse(DESC_APPT_AMY.equals(editedAmyAppt));","lastModifiedDate":"2022-10-31"},{"lineNumber":52,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":53,"author":{"gitId":"JovonLim"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2022-10-31"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"        editedAmyAppt \u003d new EditAppointmentDescriptorBuilder(DESC_APPT_AMY).withTags(VALID_TAG_NOSE).build();","lastModifiedDate":"2022-10-31"},{"lineNumber":55,"author":{"gitId":"JovonLim"},"content":"        assertFalse(DESC_APPT_AMY.equals(editedAmyAppt));","lastModifiedDate":"2022-10-31"},{"lineNumber":56,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-31"},{"lineNumber":57,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-31"}],"authorContributionMap":{"JovonLim":57}},{"path":"src/test/java/seedu/address/logic/commands/EditPatientCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_EAR;","lastModifiedDate":"2022-10-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2018-01-31"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-05-04"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditPatientCommand.EditPersonDescriptor;","lastModifiedDate":"2022-10-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-05-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-04"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditPatientCommand.","lastModifiedDate":"2022-10-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"public class EditPatientCommandTest {","lastModifiedDate":"2022-10-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"        String expectedMessage \u003d String.format(EditPatientCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2022-10-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"        assertCommandSuccess(editPatientCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":58,"author":{"gitId":"pwjj2000"},"content":"                .withTags(VALID_TAG_EAR).build();","lastModifiedDate":"2022-10-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":61,"author":{"gitId":"pwjj2000"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_EAR).build();","lastModifiedDate":"2022-10-21"},{"lineNumber":62,"author":{"gitId":"JovonLim"},"content":"        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(indexLastPerson, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":64,"author":{"gitId":"JovonLim"},"content":"        String expectedMessage \u003d String.format(EditPatientCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2022-10-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":69,"author":{"gitId":"JovonLim"},"content":"        assertCommandSuccess(editPatientCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":74,"author":{"gitId":"JovonLim"},"content":"        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());","lastModifiedDate":"2022-10-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":77,"author":{"gitId":"JovonLim"},"content":"        String expectedMessage \u003d String.format(EditPatientCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2022-10-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":81,"author":{"gitId":"JovonLim"},"content":"        assertCommandSuccess(editPatientCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":89,"author":{"gitId":"JovonLim"},"content":"        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(INDEX_SECOND_PERSON, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":91,"author":{"gitId":"JovonLim"},"content":"        assertCommandFailure(editPatientCommand, model, EditPatientCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2022-10-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book","lastModifiedDate":"2017-05-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":100,"author":{"gitId":"JovonLim"},"content":"        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2022-10-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"JovonLim"},"content":"        assertCommandFailure(editPatientCommand, model, EditPatientCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2022-10-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-05-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-22"},{"lineNumber":110,"author":{"gitId":"JovonLim"},"content":"        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":112,"author":{"gitId":"JovonLim"},"content":"        assertCommandFailure(editPatientCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * but smaller than size of address book","lastModifiedDate":"2017-05-18"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-18"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-05-18"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":126,"author":{"gitId":"JovonLim"},"content":"        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(outOfBoundIndex,","lastModifiedDate":"2022-10-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":129,"author":{"gitId":"JovonLim"},"content":"        assertCommandFailure(editPatientCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":134,"author":{"gitId":"JovonLim"},"content":"        final EditPatientCommand standardCommand \u003d new EditPatientCommand(INDEX_FIRST_PERSON, DESC_AMY);","lastModifiedDate":"2022-10-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-08"},{"lineNumber":138,"author":{"gitId":"JovonLim"},"content":"        EditPatientCommand commandWithSameValues \u003d new EditPatientCommand(INDEX_FIRST_PERSON, copyDescriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-05-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":151,"author":{"gitId":"JovonLim"},"content":"        assertFalse(standardCommand.equals(new EditPatientCommand(INDEX_SECOND_PERSON, DESC_AMY)));","lastModifiedDate":"2022-10-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":154,"author":{"gitId":"JovonLim"},"content":"        assertFalse(standardCommand.equals(new EditPatientCommand(INDEX_FIRST_PERSON, DESC_BOB)));","lastModifiedDate":"2022-10-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":157,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"JovonLim":24,"-":130,"pwjj2000":3}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_EAR;","lastModifiedDate":"2022-10-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditPatientCommand.EditPersonDescriptor;","lastModifiedDate":"2022-10-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorTest {","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));","lastModifiedDate":"2017-05-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":55,"author":{"gitId":"pwjj2000"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_EAR).build();","lastModifiedDate":"2022-10-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"JovonLim":1,"-":55,"pwjj2000":2}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_RESULTS_LISTED_OVERVIEW;","lastModifiedDate":"2022-10-10"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMPTY_STRING;","lastModifiedDate":"2022-10-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2018-08-08"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.PredicateGeneratorUtil.generateCombinedAppointmentPredicateWithOnlyDateTime;","lastModifiedDate":"2022-10-16"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.PredicateGeneratorUtil.generateCombinedAppointmentPredicateWithOnlyReason;","lastModifiedDate":"2022-10-16"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.PredicateGeneratorUtil.generateCombinedPersonPredicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.PredicateGeneratorUtil.generateCombinedPersonPredicateWithOnlyName;","lastModifiedDate":"2022-10-16"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.PredicateGeneratorUtil.generateCombinedPersonPredicateWithOnlyPhone;","lastModifiedDate":"2022-10-16"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.PredicateGeneratorUtil.generateEmptyCombinedAppointmentPredicate;","lastModifiedDate":"2022-10-16"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.PredicateGeneratorUtil.generateEmptyCombinedPersonPredicate;","lastModifiedDate":"2022-10-16"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalAppointments.APPOINTMENT_BENSON;","lastModifiedDate":"2022-10-15"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalAppointments.APPOINTMENT_CARL;","lastModifiedDate":"2022-10-15"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalAppointments.SECOND_APPOINTMENT_CARL;","lastModifiedDate":"2022-10-15"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2022-10-15"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2022-10-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;","lastModifiedDate":"2022-10-15"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;","lastModifiedDate":"2022-10-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;","lastModifiedDate":"2022-10-15"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;","lastModifiedDate":"2022-10-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"import java.util.List;","lastModifiedDate":"2022-10-15"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-15"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-15"},{"lineNumber":40,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.predicates.CombinedAppointmentPredicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.predicates.CombinedPersonPredicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":42,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.person.predicates.HiddenPredicateSingleton;","lastModifiedDate":"2022-10-27"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.predicates.NameContainsKeywordsPredicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}.","lastModifiedDate":"2017-06-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"public class FindCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2018-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"NicholasTYD"},"content":"        CombinedPersonPredicate firstCombinedPersonPredicate \u003d","lastModifiedDate":"2022-10-14"},{"lineNumber":55,"author":{"gitId":"NicholasTYD"},"content":"                new CombinedPersonPredicate(\"first\", \"\", \"\", \"\" ,","lastModifiedDate":"2022-10-14"},{"lineNumber":56,"author":{"gitId":"NicholasTYD"},"content":"                        Collections.singletonList(\"test\"));","lastModifiedDate":"2022-10-14"},{"lineNumber":57,"author":{"gitId":"NicholasTYD"},"content":"        CombinedAppointmentPredicate firstCombinedAppointmentPredicate \u003d","lastModifiedDate":"2022-10-15"},{"lineNumber":58,"author":{"gitId":"NicholasTYD"},"content":"                new CombinedAppointmentPredicate(\"reason1\", LocalDateTime.MIN, LocalDateTime.MAX,","lastModifiedDate":"2022-10-25"},{"lineNumber":59,"author":{"gitId":"NicholasTYD"},"content":"                        Collections.emptyList());","lastModifiedDate":"2022-10-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":61,"author":{"gitId":"NicholasTYD"},"content":"        CombinedPersonPredicate secondCombinedPersonPredicate \u003d","lastModifiedDate":"2022-10-14"},{"lineNumber":62,"author":{"gitId":"NicholasTYD"},"content":"                new CombinedPersonPredicate(\"second\", \"\", \"\", \"\" ,","lastModifiedDate":"2022-10-14"},{"lineNumber":63,"author":{"gitId":"NicholasTYD"},"content":"                        Collections.singletonList(\"test\"));","lastModifiedDate":"2022-10-14"},{"lineNumber":64,"author":{"gitId":"NicholasTYD"},"content":"        CombinedAppointmentPredicate secondCombinedAppointmentPredicate \u003d","lastModifiedDate":"2022-10-15"},{"lineNumber":65,"author":{"gitId":"NicholasTYD"},"content":"                new CombinedAppointmentPredicate(\"reason2\", LocalDateTime.MIN, LocalDateTime.MAX,","lastModifiedDate":"2022-10-25"},{"lineNumber":66,"author":{"gitId":"NicholasTYD"},"content":"                        Collections.emptyList());","lastModifiedDate":"2022-10-25"},{"lineNumber":67,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":68,"author":{"gitId":"NicholasTYD"},"content":"        FindCommand findFirstCommand \u003d","lastModifiedDate":"2022-10-14"},{"lineNumber":69,"author":{"gitId":"NicholasTYD"},"content":"                new FindCommand(firstCombinedPersonPredicate, firstCombinedAppointmentPredicate,","lastModifiedDate":"2022-10-14"},{"lineNumber":70,"author":{"gitId":"NicholasTYD"},"content":"                        true);","lastModifiedDate":"2022-10-14"},{"lineNumber":71,"author":{"gitId":"NicholasTYD"},"content":"        FindCommand findSecondCommand \u003d","lastModifiedDate":"2022-10-14"},{"lineNumber":72,"author":{"gitId":"NicholasTYD"},"content":"                new FindCommand(secondCombinedPersonPredicate, secondCombinedAppointmentPredicate,","lastModifiedDate":"2022-10-14"},{"lineNumber":73,"author":{"gitId":"NicholasTYD"},"content":"                        true);","lastModifiedDate":"2022-10-14"},{"lineNumber":74,"author":{"gitId":"NicholasTYD"},"content":"        FindCommand findFirstCommandWithFalseFlag \u003d","lastModifiedDate":"2022-10-14"},{"lineNumber":75,"author":{"gitId":"NicholasTYD"},"content":"                new FindCommand(firstCombinedPersonPredicate, firstCombinedAppointmentPredicate,","lastModifiedDate":"2022-10-14"},{"lineNumber":76,"author":{"gitId":"NicholasTYD"},"content":"                        false);","lastModifiedDate":"2022-10-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":82,"author":{"gitId":"NicholasTYD"},"content":"        FindCommand findFirstCommandCopy \u003d","lastModifiedDate":"2022-10-14"},{"lineNumber":83,"author":{"gitId":"NicholasTYD"},"content":"                new FindCommand(firstCombinedPersonPredicate, firstCombinedAppointmentPredicate,","lastModifiedDate":"2022-10-14"},{"lineNumber":84,"author":{"gitId":"NicholasTYD"},"content":"                        true);","lastModifiedDate":"2022-10-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"NicholasTYD"},"content":"        // different arguments -\u003e returns false","lastModifiedDate":"2022-10-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":96,"author":{"gitId":"NicholasTYD"},"content":"        // different boolean -\u003e return false","lastModifiedDate":"2022-10-14"},{"lineNumber":97,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(findFirstCommand.equals(findFirstCommandWithFalseFlag));","lastModifiedDate":"2022-10-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":101,"author":{"gitId":"NicholasTYD"},"content":"    public void execute_zeroKeywords_allPersonsAndAppointmentsListed() {","lastModifiedDate":"2022-10-15"},{"lineNumber":102,"author":{"gitId":"guanzhou03"},"content":"        HiddenPredicateSingleton.getInstance().clearHiddenAll();","lastModifiedDate":"2022-11-05"},{"lineNumber":103,"author":{"gitId":"NicholasTYD"},"content":"        String expectedMessage \u003d String.format(MESSAGE_RESULTS_LISTED_OVERVIEW,","lastModifiedDate":"2022-10-14"},{"lineNumber":104,"author":{"gitId":"NicholasTYD"},"content":"                model.getFilteredPersonList().size(),","lastModifiedDate":"2022-10-14"},{"lineNumber":105,"author":{"gitId":"NicholasTYD"},"content":"                model.getFilteredAppointmentList().size());","lastModifiedDate":"2022-10-14"},{"lineNumber":106,"author":{"gitId":"NicholasTYD"},"content":"        CombinedPersonPredicate personPredicate \u003d generateEmptyCombinedPersonPredicate();","lastModifiedDate":"2022-10-16"},{"lineNumber":107,"author":{"gitId":"NicholasTYD"},"content":"        CombinedAppointmentPredicate appointmentPredicate \u003d generateEmptyCombinedAppointmentPredicate();","lastModifiedDate":"2022-10-16"},{"lineNumber":108,"author":{"gitId":"NicholasTYD"},"content":"        FindCommand command \u003d new FindCommand(personPredicate, appointmentPredicate, false);","lastModifiedDate":"2022-10-14"},{"lineNumber":109,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":110,"author":{"gitId":"NicholasTYD"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-14"},{"lineNumber":111,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":112,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":113,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-14"},{"lineNumber":114,"author":{"gitId":"NicholasTYD"},"content":"    public void execute_findAllAppointments_onlyPersonsWithAppointmentsListed() {","lastModifiedDate":"2022-10-15"},{"lineNumber":115,"author":{"gitId":"guanzhou03"},"content":"        HiddenPredicateSingleton.getInstance().clearHiddenAll();","lastModifiedDate":"2022-11-05"},{"lineNumber":116,"author":{"gitId":"NicholasTYD"},"content":"        String expectedMessage \u003d String.format(MESSAGE_RESULTS_LISTED_OVERVIEW, 2, 3);","lastModifiedDate":"2022-10-14"},{"lineNumber":117,"author":{"gitId":"NicholasTYD"},"content":"        CombinedPersonPredicate personPredicate \u003d generateEmptyCombinedPersonPredicate();","lastModifiedDate":"2022-10-16"},{"lineNumber":118,"author":{"gitId":"NicholasTYD"},"content":"        CombinedAppointmentPredicate appointmentPredicate \u003d generateEmptyCombinedAppointmentPredicate();","lastModifiedDate":"2022-10-16"},{"lineNumber":119,"author":{"gitId":"NicholasTYD"},"content":"        FindCommand command \u003d new FindCommand(personPredicate, appointmentPredicate, true);","lastModifiedDate":"2022-10-14"},{"lineNumber":120,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":121,"author":{"gitId":"NicholasTYD"},"content":"        Predicate\u003cPerson\u003e atLeastOneAppointment \u003d person -\u003e !person.getAppointments().isEmpty();","lastModifiedDate":"2022-10-14"},{"lineNumber":122,"author":{"gitId":"NicholasTYD"},"content":"        expectedModel.updateFilteredPersonList(personPredicate.and(atLeastOneAppointment));","lastModifiedDate":"2022-10-14"},{"lineNumber":123,"author":{"gitId":"NicholasTYD"},"content":"        expectedModel.updateFilteredAppointmentList(appointmentPredicate);","lastModifiedDate":"2022-10-10"},{"lineNumber":124,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":126,"author":{"gitId":"NicholasTYD"},"content":"        assertEquals(Arrays.asList(BENSON, CARL), model.getFilteredPersonList());","lastModifiedDate":"2022-10-15"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":130,"author":{"gitId":"NicholasTYD"},"content":"    public void execute_findPersonName_onlyAppointmentsFromFoundPersonsListed() {","lastModifiedDate":"2022-10-15"},{"lineNumber":131,"author":{"gitId":"NicholasTYD"},"content":"        // Search for patients whose names contain \"e\".","lastModifiedDate":"2022-10-15"},{"lineNumber":132,"author":{"gitId":"NicholasTYD"},"content":"        // Should only find Alice, Benson, Daniel, Elle and George, and display Benson\u0027s appointment.","lastModifiedDate":"2022-10-15"},{"lineNumber":133,"author":{"gitId":"guanzhou03"},"content":"        HiddenPredicateSingleton.getInstance().clearHiddenAll();","lastModifiedDate":"2022-11-05"},{"lineNumber":134,"author":{"gitId":"NicholasTYD"},"content":"        String searchName \u003d \"e\";","lastModifiedDate":"2022-10-15"},{"lineNumber":135,"author":{"gitId":"NicholasTYD"},"content":"        String expectedMessage \u003d String.format(MESSAGE_RESULTS_LISTED_OVERVIEW, 5, 1);","lastModifiedDate":"2022-10-15"},{"lineNumber":136,"author":{"gitId":"NicholasTYD"},"content":"        CombinedPersonPredicate personPredicate \u003d generateCombinedPersonPredicateWithOnlyName(searchName);","lastModifiedDate":"2022-10-16"},{"lineNumber":137,"author":{"gitId":"NicholasTYD"},"content":"        CombinedAppointmentPredicate appointmentPredicate \u003d generateEmptyCombinedAppointmentPredicate();","lastModifiedDate":"2022-10-16"},{"lineNumber":138,"author":{"gitId":"NicholasTYD"},"content":"        FindCommand command \u003d new FindCommand(personPredicate, appointmentPredicate, false);","lastModifiedDate":"2022-10-15"},{"lineNumber":139,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":140,"author":{"gitId":"NicholasTYD"},"content":"        Predicate\u003cAppointment\u003e onlyBensonAppointment \u003d appointment -\u003e appointment.getPatient().isSamePerson(BENSON);","lastModifiedDate":"2022-10-15"},{"lineNumber":141,"author":{"gitId":"NicholasTYD"},"content":"        expectedModel.updateFilteredPersonList(personPredicate);","lastModifiedDate":"2022-10-15"},{"lineNumber":142,"author":{"gitId":"NicholasTYD"},"content":"        expectedModel.updateFilteredAppointmentList(onlyBensonAppointment);","lastModifiedDate":"2022-10-15"},{"lineNumber":143,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-15"},{"lineNumber":145,"author":{"gitId":"NicholasTYD"},"content":"        assertEquals(Arrays.asList(ALICE, BENSON, DANIEL, ELLE, GEORGE), model.getFilteredPersonList());","lastModifiedDate":"2022-10-15"},{"lineNumber":146,"author":{"gitId":"NicholasTYD"},"content":"        assertEquals(List.of(APPOINTMENT_BENSON), model.getFilteredAppointmentList());","lastModifiedDate":"2022-10-15"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2022-10-15"},{"lineNumber":150,"author":{"gitId":"NicholasTYD"},"content":"    public void execute_findAppointmentReason_onlyPersonsFromFoundAppointmentsListed() {","lastModifiedDate":"2022-10-15"},{"lineNumber":151,"author":{"gitId":"NicholasTYD"},"content":"        // Search for appointment with reason \"cough\".","lastModifiedDate":"2022-10-15"},{"lineNumber":152,"author":{"gitId":"NicholasTYD"},"content":"        // Should only find Carl, and display only the cough appointment.","lastModifiedDate":"2022-10-15"},{"lineNumber":153,"author":{"gitId":"guanzhou03"},"content":"        HiddenPredicateSingleton.getInstance().clearHiddenAll();","lastModifiedDate":"2022-11-05"},{"lineNumber":154,"author":{"gitId":"NicholasTYD"},"content":"        String searchReason \u003d \"cough\";","lastModifiedDate":"2022-10-15"},{"lineNumber":155,"author":{"gitId":"NicholasTYD"},"content":"        String expectedMessage \u003d String.format(MESSAGE_RESULTS_LISTED_OVERVIEW, 1, 1);","lastModifiedDate":"2022-10-15"},{"lineNumber":156,"author":{"gitId":"NicholasTYD"},"content":"        CombinedPersonPredicate personPredicate \u003d generateEmptyCombinedPersonPredicate();","lastModifiedDate":"2022-10-16"},{"lineNumber":157,"author":{"gitId":"NicholasTYD"},"content":"        CombinedAppointmentPredicate appointmentPredicate \u003d","lastModifiedDate":"2022-10-15"},{"lineNumber":158,"author":{"gitId":"NicholasTYD"},"content":"                generateCombinedAppointmentPredicateWithOnlyReason(searchReason);","lastModifiedDate":"2022-10-16"},{"lineNumber":159,"author":{"gitId":"NicholasTYD"},"content":"        FindCommand command \u003d new FindCommand(personPredicate, appointmentPredicate, true);","lastModifiedDate":"2022-10-15"},{"lineNumber":160,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":161,"author":{"gitId":"NicholasTYD"},"content":"        Predicate\u003cPerson\u003e justCarl \u003d person -\u003e person.isSamePerson(CARL);","lastModifiedDate":"2022-10-15"},{"lineNumber":162,"author":{"gitId":"NicholasTYD"},"content":"        expectedModel.updateFilteredPersonList(justCarl);","lastModifiedDate":"2022-10-15"},{"lineNumber":163,"author":{"gitId":"NicholasTYD"},"content":"        expectedModel.updateFilteredAppointmentList(appointmentPredicate);","lastModifiedDate":"2022-10-10"},{"lineNumber":164,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-10"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":166,"author":{"gitId":"NicholasTYD"},"content":"        assertEquals(List.of(CARL), model.getFilteredPersonList());","lastModifiedDate":"2022-10-15"},{"lineNumber":167,"author":{"gitId":"NicholasTYD"},"content":"        assertEquals(List.of(APPOINTMENT_CARL), model.getFilteredAppointmentList());","lastModifiedDate":"2022-10-15"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":170,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-15"},{"lineNumber":171,"author":{"gitId":"NicholasTYD"},"content":"    public void execute_findAppointmentReason_onlyRelevantAppointmentsListed() {","lastModifiedDate":"2022-10-15"},{"lineNumber":172,"author":{"gitId":"NicholasTYD"},"content":"        // Search for appointment with reason \"throat\".","lastModifiedDate":"2022-10-15"},{"lineNumber":173,"author":{"gitId":"NicholasTYD"},"content":"        // Should find Carl and Benson, and only display the Sore throat appointment from each of them","lastModifiedDate":"2022-10-15"},{"lineNumber":174,"author":{"gitId":"NicholasTYD"},"content":"        // (Benson\u0027s first and Carl\u0027s second appointment).","lastModifiedDate":"2022-10-15"},{"lineNumber":175,"author":{"gitId":"NicholasTYD"},"content":"        String searchReason \u003d \"throat\";","lastModifiedDate":"2022-10-15"},{"lineNumber":176,"author":{"gitId":"NicholasTYD"},"content":"        String expectedMessage \u003d String.format(MESSAGE_RESULTS_LISTED_OVERVIEW, 2, 2);","lastModifiedDate":"2022-10-15"},{"lineNumber":177,"author":{"gitId":"NicholasTYD"},"content":"        CombinedPersonPredicate personPredicate \u003d generateEmptyCombinedPersonPredicate();","lastModifiedDate":"2022-10-16"},{"lineNumber":178,"author":{"gitId":"NicholasTYD"},"content":"        CombinedAppointmentPredicate appointmentPredicate \u003d","lastModifiedDate":"2022-10-15"},{"lineNumber":179,"author":{"gitId":"NicholasTYD"},"content":"                generateCombinedAppointmentPredicateWithOnlyReason(searchReason);","lastModifiedDate":"2022-10-16"},{"lineNumber":180,"author":{"gitId":"NicholasTYD"},"content":"        FindCommand command \u003d new FindCommand(personPredicate, appointmentPredicate, true);","lastModifiedDate":"2022-10-15"},{"lineNumber":181,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":182,"author":{"gitId":"NicholasTYD"},"content":"        Predicate\u003cPerson\u003e justCarlAndBenson \u003d person -\u003e person.isSamePerson(BENSON) || person.isSamePerson(CARL);","lastModifiedDate":"2022-10-15"},{"lineNumber":183,"author":{"gitId":"NicholasTYD"},"content":"        Predicate\u003cAppointment\u003e correctAppointment \u003d appointment -\u003e appointment.equals(APPOINTMENT_BENSON)","lastModifiedDate":"2022-10-15"},{"lineNumber":184,"author":{"gitId":"NicholasTYD"},"content":"                || appointment.equals(SECOND_APPOINTMENT_CARL);","lastModifiedDate":"2022-10-15"},{"lineNumber":185,"author":{"gitId":"NicholasTYD"},"content":"        expectedModel.updateFilteredPersonList(justCarlAndBenson);","lastModifiedDate":"2022-10-15"},{"lineNumber":186,"author":{"gitId":"NicholasTYD"},"content":"        expectedModel.updateFilteredAppointmentList(correctAppointment);","lastModifiedDate":"2022-10-15"},{"lineNumber":187,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":188,"author":{"gitId":"NicholasTYD"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-15"},{"lineNumber":189,"author":{"gitId":"NicholasTYD"},"content":"        assertEquals(List.of(BENSON, CARL), model.getFilteredPersonList());","lastModifiedDate":"2022-10-15"},{"lineNumber":190,"author":{"gitId":"NicholasTYD"},"content":"        assertEquals(List.of(APPOINTMENT_BENSON, SECOND_APPOINTMENT_CARL), model.getFilteredAppointmentList());","lastModifiedDate":"2022-10-15"},{"lineNumber":191,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":192,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":193,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-15"},{"lineNumber":194,"author":{"gitId":"NicholasTYD"},"content":"    public void execute_personAndAppointmentFind_onlyRelevantResultsListed() {","lastModifiedDate":"2022-10-15"},{"lineNumber":195,"author":{"gitId":"NicholasTYD"},"content":"        // Search for phones containing the number \"3\" and appointments before 2015.","lastModifiedDate":"2022-10-15"},{"lineNumber":196,"author":{"gitId":"NicholasTYD"},"content":"        // Should only find Carl, and only display the cough appointment from Carl (his first appointment).","lastModifiedDate":"2022-10-15"},{"lineNumber":197,"author":{"gitId":"NicholasTYD"},"content":"        String searchPhone \u003d \"3\";","lastModifiedDate":"2022-10-15"},{"lineNumber":198,"author":{"gitId":"NicholasTYD"},"content":"        String searchDateEnd \u003d \"2015-01-01 00:00\";","lastModifiedDate":"2022-10-15"},{"lineNumber":199,"author":{"gitId":"NicholasTYD"},"content":"        String expectedMessage \u003d String.format(MESSAGE_RESULTS_LISTED_OVERVIEW, 1, 1);","lastModifiedDate":"2022-10-15"},{"lineNumber":200,"author":{"gitId":"NicholasTYD"},"content":"        CombinedPersonPredicate personPredicate \u003d generateCombinedPersonPredicateWithOnlyPhone(searchPhone);","lastModifiedDate":"2022-10-16"},{"lineNumber":201,"author":{"gitId":"NicholasTYD"},"content":"        CombinedAppointmentPredicate appointmentPredicate \u003d","lastModifiedDate":"2022-10-15"},{"lineNumber":202,"author":{"gitId":"NicholasTYD"},"content":"                generateCombinedAppointmentPredicateWithOnlyDateTime(EMPTY_STRING, searchDateEnd);","lastModifiedDate":"2022-10-16"},{"lineNumber":203,"author":{"gitId":"NicholasTYD"},"content":"        FindCommand command \u003d new FindCommand(personPredicate, appointmentPredicate, true);","lastModifiedDate":"2022-10-15"},{"lineNumber":204,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":205,"author":{"gitId":"NicholasTYD"},"content":"        Predicate\u003cPerson\u003e justCarl \u003d person -\u003e person.isSamePerson(CARL);","lastModifiedDate":"2022-10-15"},{"lineNumber":206,"author":{"gitId":"NicholasTYD"},"content":"        Predicate\u003cAppointment\u003e onlyCarlFirstAppointment \u003d","lastModifiedDate":"2022-10-15"},{"lineNumber":207,"author":{"gitId":"NicholasTYD"},"content":"                appointment -\u003e appointment.equals(APPOINTMENT_CARL);","lastModifiedDate":"2022-10-15"},{"lineNumber":208,"author":{"gitId":"NicholasTYD"},"content":"        expectedModel.updateFilteredPersonList(justCarl);","lastModifiedDate":"2022-10-15"},{"lineNumber":209,"author":{"gitId":"NicholasTYD"},"content":"        expectedModel.updateFilteredAppointmentList(onlyCarlFirstAppointment);","lastModifiedDate":"2022-10-15"},{"lineNumber":210,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":211,"author":{"gitId":"NicholasTYD"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-15"},{"lineNumber":212,"author":{"gitId":"NicholasTYD"},"content":"        assertEquals(List.of(CARL), model.getFilteredPersonList());","lastModifiedDate":"2022-10-15"},{"lineNumber":213,"author":{"gitId":"NicholasTYD"},"content":"        assertEquals(List.of(APPOINTMENT_CARL), model.getFilteredAppointmentList());","lastModifiedDate":"2022-10-15"},{"lineNumber":214,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":215,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":216,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-15"},{"lineNumber":217,"author":{"gitId":"NicholasTYD"},"content":"    public void execute_findTagsAndEmail_onlyRelevantResultsListed() {","lastModifiedDate":"2022-10-15"},{"lineNumber":218,"author":{"gitId":"NicholasTYD"},"content":"        // Search for persons with tag \"friends\" and email containing \"li\".","lastModifiedDate":"2022-10-15"},{"lineNumber":219,"author":{"gitId":"NicholasTYD"},"content":"        // Should only find Alice and Daniel, and no appointments.","lastModifiedDate":"2022-10-15"},{"lineNumber":220,"author":{"gitId":"NicholasTYD"},"content":"        String searchEmail \u003d \"li\";","lastModifiedDate":"2022-10-15"},{"lineNumber":221,"author":{"gitId":"pwjj2000"},"content":"        String searchTag \u003d \"nose\";","lastModifiedDate":"2022-10-21"},{"lineNumber":222,"author":{"gitId":"NicholasTYD"},"content":"        String expectedMessage \u003d String.format(MESSAGE_RESULTS_LISTED_OVERVIEW, 2, 0);","lastModifiedDate":"2022-10-15"},{"lineNumber":223,"author":{"gitId":"NicholasTYD"},"content":"        CombinedPersonPredicate personPredicate \u003d","lastModifiedDate":"2022-10-15"},{"lineNumber":224,"author":{"gitId":"NicholasTYD"},"content":"                generateCombinedPersonPredicate(EMPTY_STRING, EMPTY_STRING, searchEmail, EMPTY_STRING, searchTag);","lastModifiedDate":"2022-10-15"},{"lineNumber":225,"author":{"gitId":"NicholasTYD"},"content":"        CombinedAppointmentPredicate appointmentPredicate \u003d generateEmptyCombinedAppointmentPredicate();","lastModifiedDate":"2022-10-16"},{"lineNumber":226,"author":{"gitId":"NicholasTYD"},"content":"        FindCommand command \u003d new FindCommand(personPredicate, appointmentPredicate, false);","lastModifiedDate":"2022-10-15"},{"lineNumber":227,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":228,"author":{"gitId":"NicholasTYD"},"content":"        Predicate\u003cPerson\u003e onlyAliceAndDaniel \u003d person -\u003e person.isSamePerson(ALICE) || person.isSamePerson(DANIEL);","lastModifiedDate":"2022-10-15"},{"lineNumber":229,"author":{"gitId":"NicholasTYD"},"content":"        Predicate\u003cAppointment\u003e alwaysFalse \u003d unused -\u003e false;","lastModifiedDate":"2022-10-15"},{"lineNumber":230,"author":{"gitId":"NicholasTYD"},"content":"        expectedModel.updateFilteredPersonList(onlyAliceAndDaniel);","lastModifiedDate":"2022-10-15"},{"lineNumber":231,"author":{"gitId":"NicholasTYD"},"content":"        expectedModel.updateFilteredAppointmentList(alwaysFalse);","lastModifiedDate":"2022-10-15"},{"lineNumber":232,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-15"},{"lineNumber":234,"author":{"gitId":"NicholasTYD"},"content":"        assertEquals(List.of(ALICE, DANIEL), model.getFilteredPersonList());","lastModifiedDate":"2022-10-15"},{"lineNumber":235,"author":{"gitId":"NicholasTYD"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredAppointmentList());","lastModifiedDate":"2022-10-15"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-12"},{"lineNumber":239,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2018-08-08"},{"lineNumber":240,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-12"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2018-08-08"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2018-08-08"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":244,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"NicholasTYD":171,"-":67,"guanzhou03":5,"pwjj2000":1}},{"path":"src/test/java/seedu/address/logic/commands/GroupAppointmentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"WingKei67"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-24"},{"lineNumber":2,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":3,"author":{"gitId":"WingKei67"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-11-03"},{"lineNumber":4,"author":{"gitId":"WingKei67"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-11-03"},{"lineNumber":5,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-24"},{"lineNumber":6,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-24"},{"lineNumber":7,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":8,"author":{"gitId":"WingKei67"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2022-10-24"},{"lineNumber":9,"author":{"gitId":"WingKei67"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-24"},{"lineNumber":10,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":11,"author":{"gitId":"WingKei67"},"content":"import seedu.address.model.Key;","lastModifiedDate":"2022-10-24"},{"lineNumber":12,"author":{"gitId":"WingKei67"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-24"},{"lineNumber":13,"author":{"gitId":"WingKei67"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-10-24"},{"lineNumber":14,"author":{"gitId":"WingKei67"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-10-24"},{"lineNumber":15,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":16,"author":{"gitId":"WingKei67"},"content":"/**","lastModifiedDate":"2022-10-24"},{"lineNumber":17,"author":{"gitId":"WingKei67"},"content":" * Contains integration tests (interaction with the Model) and unit tests for GroupAppointmentCommand.","lastModifiedDate":"2022-10-24"},{"lineNumber":18,"author":{"gitId":"WingKei67"},"content":" */","lastModifiedDate":"2022-10-24"},{"lineNumber":19,"author":{"gitId":"WingKei67"},"content":"public class GroupAppointmentCommandTest {","lastModifiedDate":"2022-10-24"},{"lineNumber":20,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":21,"author":{"gitId":"WingKei67"},"content":"    private Model model;","lastModifiedDate":"2022-10-24"},{"lineNumber":22,"author":{"gitId":"WingKei67"},"content":"    private Model expectedModel1;","lastModifiedDate":"2022-10-24"},{"lineNumber":23,"author":{"gitId":"WingKei67"},"content":"    private Model expectedModel2;","lastModifiedDate":"2022-10-24"},{"lineNumber":24,"author":{"gitId":"WingKei67"},"content":"    private Model expectedModel3;","lastModifiedDate":"2022-10-25"},{"lineNumber":25,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":26,"author":{"gitId":"WingKei67"},"content":"    @BeforeEach","lastModifiedDate":"2022-10-24"},{"lineNumber":27,"author":{"gitId":"WingKei67"},"content":"    public void setUp() {","lastModifiedDate":"2022-10-24"},{"lineNumber":28,"author":{"gitId":"WingKei67"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-24"},{"lineNumber":29,"author":{"gitId":"WingKei67"},"content":"        expectedModel1 \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-24"},{"lineNumber":30,"author":{"gitId":"WingKei67"},"content":"        expectedModel1.updateAppointmentComparator(Model.COMPARATOR_GROUP_TAG_APPOINTMENTS);","lastModifiedDate":"2022-10-24"},{"lineNumber":31,"author":{"gitId":"WingKei67"},"content":"        expectedModel2 \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-24"},{"lineNumber":32,"author":{"gitId":"WingKei67"},"content":"        expectedModel2.updateAppointmentComparator(Model.COMPARATOR_GROUP_PATIENT_APPOINTMENTS);","lastModifiedDate":"2022-10-24"},{"lineNumber":33,"author":{"gitId":"WingKei67"},"content":"        expectedModel3 \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-25"},{"lineNumber":34,"author":{"gitId":"WingKei67"},"content":"        expectedModel3.updateAppointmentComparator(Model.COMPARATOR_GROUP_MARK_APPOINTMENTS);","lastModifiedDate":"2022-10-25"},{"lineNumber":35,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":36,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":37,"author":{"gitId":"WingKei67"},"content":"    @Test","lastModifiedDate":"2022-10-24"},{"lineNumber":38,"author":{"gitId":"WingKei67"},"content":"    public void execute_patientListSorted_showsSameList() {","lastModifiedDate":"2022-10-24"},{"lineNumber":39,"author":{"gitId":"WingKei67"},"content":"        assertCommandSuccess(","lastModifiedDate":"2022-10-24"},{"lineNumber":40,"author":{"gitId":"WingKei67"},"content":"                new GroupAppointmentCommand(Key.TAG), model,","lastModifiedDate":"2022-10-24"},{"lineNumber":41,"author":{"gitId":"WingKei67"},"content":"                String.format(GroupAppointmentCommand.MESSAGE_SUCCESS_APPOINTMENTS, \"tag\"),","lastModifiedDate":"2022-10-24"},{"lineNumber":42,"author":{"gitId":"WingKei67"},"content":"                expectedModel1);","lastModifiedDate":"2022-10-24"},{"lineNumber":43,"author":{"gitId":"WingKei67"},"content":"        assertCommandSuccess(","lastModifiedDate":"2022-10-24"},{"lineNumber":44,"author":{"gitId":"WingKei67"},"content":"                new GroupAppointmentCommand(Key.PATIENT), model,","lastModifiedDate":"2022-10-24"},{"lineNumber":45,"author":{"gitId":"WingKei67"},"content":"                String.format(GroupAppointmentCommand.MESSAGE_SUCCESS_APPOINTMENTS, \"patient\"),","lastModifiedDate":"2022-10-24"},{"lineNumber":46,"author":{"gitId":"WingKei67"},"content":"                expectedModel2);","lastModifiedDate":"2022-10-24"},{"lineNumber":47,"author":{"gitId":"WingKei67"},"content":"        assertCommandSuccess(","lastModifiedDate":"2022-10-25"},{"lineNumber":48,"author":{"gitId":"WingKei67"},"content":"                new GroupAppointmentCommand(Key.MARK), model,","lastModifiedDate":"2022-10-25"},{"lineNumber":49,"author":{"gitId":"WingKei67"},"content":"                String.format(GroupAppointmentCommand.MESSAGE_SUCCESS_APPOINTMENTS, \"mark\"),","lastModifiedDate":"2022-10-25"},{"lineNumber":50,"author":{"gitId":"WingKei67"},"content":"                expectedModel3);","lastModifiedDate":"2022-10-25"},{"lineNumber":51,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":52,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":53,"author":{"gitId":"WingKei67"},"content":"    @Test","lastModifiedDate":"2022-11-03"},{"lineNumber":54,"author":{"gitId":"WingKei67"},"content":"    public void equals() {","lastModifiedDate":"2022-11-03"},{"lineNumber":55,"author":{"gitId":"WingKei67"},"content":"        GroupAppointmentCommand ungroupAppointmentCommand \u003d new GroupAppointmentCommand(Key.TAG);","lastModifiedDate":"2022-11-03"},{"lineNumber":56,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":57,"author":{"gitId":"WingKei67"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-11-03"},{"lineNumber":58,"author":{"gitId":"WingKei67"},"content":"        assertTrue(ungroupAppointmentCommand.equals(ungroupAppointmentCommand));","lastModifiedDate":"2022-11-03"},{"lineNumber":59,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":60,"author":{"gitId":"WingKei67"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-11-03"},{"lineNumber":61,"author":{"gitId":"WingKei67"},"content":"        GroupAppointmentCommand ungroupAppointmentCommandCopy \u003d new GroupAppointmentCommand(Key.TAG);","lastModifiedDate":"2022-11-03"},{"lineNumber":62,"author":{"gitId":"WingKei67"},"content":"        assertTrue(ungroupAppointmentCommand.equals(ungroupAppointmentCommandCopy));","lastModifiedDate":"2022-11-03"},{"lineNumber":63,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":64,"author":{"gitId":"WingKei67"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2022-11-03"},{"lineNumber":65,"author":{"gitId":"WingKei67"},"content":"        GroupAppointmentCommand ungroupAppointmentCommand2 \u003d new GroupAppointmentCommand(Key.MARK);","lastModifiedDate":"2022-11-03"},{"lineNumber":66,"author":{"gitId":"WingKei67"},"content":"        assertFalse(ungroupAppointmentCommand2.equals(ungroupAppointmentCommand));","lastModifiedDate":"2022-11-03"},{"lineNumber":67,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-11-03"},{"lineNumber":68,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-24"}],"authorContributionMap":{"WingKei67":68}},{"path":"src/test/java/seedu/address/logic/commands/GroupPatientCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"WingKei67"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-24"},{"lineNumber":2,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":3,"author":{"gitId":"WingKei67"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-11-03"},{"lineNumber":4,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-24"},{"lineNumber":5,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-24"},{"lineNumber":6,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":7,"author":{"gitId":"WingKei67"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2022-10-24"},{"lineNumber":8,"author":{"gitId":"WingKei67"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-24"},{"lineNumber":9,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":10,"author":{"gitId":"WingKei67"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-24"},{"lineNumber":11,"author":{"gitId":"WingKei67"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-10-24"},{"lineNumber":12,"author":{"gitId":"WingKei67"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-10-24"},{"lineNumber":13,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":14,"author":{"gitId":"WingKei67"},"content":"/**","lastModifiedDate":"2022-10-24"},{"lineNumber":15,"author":{"gitId":"WingKei67"},"content":" * Contains integration tests (interaction with the Model) and unit tests for GroupPatientCommand.","lastModifiedDate":"2022-10-24"},{"lineNumber":16,"author":{"gitId":"WingKei67"},"content":" */","lastModifiedDate":"2022-10-24"},{"lineNumber":17,"author":{"gitId":"WingKei67"},"content":"public class GroupPatientCommandTest {","lastModifiedDate":"2022-10-24"},{"lineNumber":18,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":19,"author":{"gitId":"WingKei67"},"content":"    private Model model;","lastModifiedDate":"2022-10-24"},{"lineNumber":20,"author":{"gitId":"WingKei67"},"content":"    private Model expectedModel;","lastModifiedDate":"2022-10-24"},{"lineNumber":21,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":22,"author":{"gitId":"WingKei67"},"content":"    @BeforeEach","lastModifiedDate":"2022-10-24"},{"lineNumber":23,"author":{"gitId":"WingKei67"},"content":"    public void setUp() {","lastModifiedDate":"2022-10-24"},{"lineNumber":24,"author":{"gitId":"WingKei67"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-24"},{"lineNumber":25,"author":{"gitId":"WingKei67"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-24"},{"lineNumber":26,"author":{"gitId":"WingKei67"},"content":"        expectedModel.updatePersonComparator(Model.COMPARATOR_GROUP_PATIENTS);","lastModifiedDate":"2022-10-24"},{"lineNumber":27,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":28,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":29,"author":{"gitId":"WingKei67"},"content":"    @Test","lastModifiedDate":"2022-10-24"},{"lineNumber":30,"author":{"gitId":"WingKei67"},"content":"    public void execute_patientListSorted_showsSameList() {","lastModifiedDate":"2022-10-24"},{"lineNumber":31,"author":{"gitId":"WingKei67"},"content":"        assertCommandSuccess(","lastModifiedDate":"2022-10-24"},{"lineNumber":32,"author":{"gitId":"WingKei67"},"content":"                new GroupPatientCommand(), model, GroupPatientCommand.MESSAGE_SUCCESS_PATIENTS, expectedModel);","lastModifiedDate":"2022-10-24"},{"lineNumber":33,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":34,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":35,"author":{"gitId":"WingKei67"},"content":"    @Test","lastModifiedDate":"2022-11-03"},{"lineNumber":36,"author":{"gitId":"WingKei67"},"content":"    public void equals() {","lastModifiedDate":"2022-11-03"},{"lineNumber":37,"author":{"gitId":"WingKei67"},"content":"        GroupPatientCommand groupPatientCommand \u003d new GroupPatientCommand();","lastModifiedDate":"2022-11-03"},{"lineNumber":38,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":39,"author":{"gitId":"WingKei67"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-11-03"},{"lineNumber":40,"author":{"gitId":"WingKei67"},"content":"        assertTrue(groupPatientCommand.equals(groupPatientCommand));","lastModifiedDate":"2022-11-03"},{"lineNumber":41,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-11-03"},{"lineNumber":42,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-24"}],"authorContributionMap":{"WingKei67":42}},{"path":"src/test/java/seedu/address/logic/commands/HidePatientsCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"guanzhou03"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-13"},{"lineNumber":2,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":3,"author":{"gitId":"guanzhou03"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-13"},{"lineNumber":4,"author":{"gitId":"guanzhou03"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-13"},{"lineNumber":5,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_RESULTS_LISTED_OVERVIEW;","lastModifiedDate":"2022-10-13"},{"lineNumber":6,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-13"},{"lineNumber":7,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-13"},{"lineNumber":8,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":9,"author":{"gitId":"guanzhou03"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-13"},{"lineNumber":10,"author":{"gitId":"guanzhou03"},"content":"import java.util.Collections;","lastModifiedDate":"2022-10-13"},{"lineNumber":11,"author":{"gitId":"guanzhou03"},"content":"import java.util.List;","lastModifiedDate":"2022-10-13"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-13"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":14,"author":{"gitId":"guanzhou03"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-13"},{"lineNumber":15,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":16,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-13"},{"lineNumber":17,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-10-13"},{"lineNumber":18,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-10-13"},{"lineNumber":19,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-15"},{"lineNumber":20,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.person.predicates.AppointmentOfFilteredPersonsPredicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":21,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.person.predicates.HiddenPredicateSingleton;","lastModifiedDate":"2022-10-27"},{"lineNumber":22,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.person.predicates.NameContainsKeywordsPredicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":23,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":24,"author":{"gitId":"guanzhou03"},"content":"/**","lastModifiedDate":"2022-10-13"},{"lineNumber":25,"author":{"gitId":"guanzhou03"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}.","lastModifiedDate":"2022-10-13"},{"lineNumber":26,"author":{"gitId":"guanzhou03"},"content":" */","lastModifiedDate":"2022-10-13"},{"lineNumber":27,"author":{"gitId":"guanzhou03"},"content":"public class HidePatientsCommandTest {","lastModifiedDate":"2022-10-13"},{"lineNumber":28,"author":{"gitId":"guanzhou03"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-13"},{"lineNumber":29,"author":{"gitId":"guanzhou03"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-13"},{"lineNumber":30,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":31,"author":{"gitId":"guanzhou03"},"content":"    @Test","lastModifiedDate":"2022-10-13"},{"lineNumber":32,"author":{"gitId":"guanzhou03"},"content":"    public void equals() {","lastModifiedDate":"2022-10-13"},{"lineNumber":33,"author":{"gitId":"guanzhou03"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2022-10-13"},{"lineNumber":34,"author":{"gitId":"guanzhou03"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2022-10-13"},{"lineNumber":35,"author":{"gitId":"guanzhou03"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2022-10-13"},{"lineNumber":36,"author":{"gitId":"guanzhou03"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2022-10-13"},{"lineNumber":37,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":38,"author":{"gitId":"guanzhou03"},"content":"        HidePatientsCommand hideFirstCommand \u003d new HidePatientsCommand(firstPredicate);","lastModifiedDate":"2022-10-13"},{"lineNumber":39,"author":{"gitId":"guanzhou03"},"content":"        HidePatientsCommand hideSecondCommand \u003d new HidePatientsCommand(secondPredicate);","lastModifiedDate":"2022-10-13"},{"lineNumber":40,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":41,"author":{"gitId":"guanzhou03"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-10-13"},{"lineNumber":42,"author":{"gitId":"guanzhou03"},"content":"        assertTrue(hideFirstCommand.equals(hideFirstCommand));","lastModifiedDate":"2022-10-13"},{"lineNumber":43,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":44,"author":{"gitId":"guanzhou03"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-10-13"},{"lineNumber":45,"author":{"gitId":"guanzhou03"},"content":"        HidePatientsCommand hideFirstCommandCopy \u003d new HidePatientsCommand(firstPredicate);","lastModifiedDate":"2022-10-13"},{"lineNumber":46,"author":{"gitId":"guanzhou03"},"content":"        assertTrue(hideFirstCommand.equals(hideFirstCommandCopy));","lastModifiedDate":"2022-10-13"},{"lineNumber":47,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":48,"author":{"gitId":"guanzhou03"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2022-10-13"},{"lineNumber":49,"author":{"gitId":"guanzhou03"},"content":"        assertFalse(hideFirstCommand.equals(1));","lastModifiedDate":"2022-10-13"},{"lineNumber":50,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":51,"author":{"gitId":"guanzhou03"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-10-13"},{"lineNumber":52,"author":{"gitId":"guanzhou03"},"content":"        assertFalse(hideFirstCommand.equals(null));","lastModifiedDate":"2022-10-13"},{"lineNumber":53,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":54,"author":{"gitId":"guanzhou03"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2022-10-13"},{"lineNumber":55,"author":{"gitId":"guanzhou03"},"content":"        assertFalse(hideFirstCommand.equals(hideSecondCommand));","lastModifiedDate":"2022-10-13"},{"lineNumber":56,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-13"},{"lineNumber":57,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":58,"author":{"gitId":"guanzhou03"},"content":"    @Test","lastModifiedDate":"2022-10-13"},{"lineNumber":59,"author":{"gitId":"guanzhou03"},"content":"    public void execute_multipleKeywords_multiplePersonsHidden() {","lastModifiedDate":"2022-10-14"},{"lineNumber":60,"author":{"gitId":"guanzhou03"},"content":"        HiddenPredicateSingleton.getInstance().clearHiddenAll();","lastModifiedDate":"2022-11-05"},{"lineNumber":61,"author":{"gitId":"guanzhou03"},"content":"        String expectedMessage \u003d String.format(MESSAGE_RESULTS_LISTED_OVERVIEW, 6, 2);","lastModifiedDate":"2022-10-14"},{"lineNumber":62,"author":{"gitId":"guanzhou03"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Benson\");","lastModifiedDate":"2022-10-14"},{"lineNumber":63,"author":{"gitId":"guanzhou03"},"content":"        HidePatientsCommand command \u003d new HidePatientsCommand(predicate);","lastModifiedDate":"2022-10-13"},{"lineNumber":64,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":65,"author":{"gitId":"guanzhou03"},"content":"        expectedModel.updateFilteredPersonList(Predicate.not(predicate));","lastModifiedDate":"2022-10-14"},{"lineNumber":66,"author":{"gitId":"guanzhou03"},"content":"        List\u003cPerson\u003e validPersons \u003d expectedModel.getFilteredPersonList();","lastModifiedDate":"2022-10-13"},{"lineNumber":67,"author":{"gitId":"guanzhou03"},"content":"        AppointmentOfFilteredPersonsPredicate appointmentPredicate \u003d","lastModifiedDate":"2022-10-13"},{"lineNumber":68,"author":{"gitId":"guanzhou03"},"content":"                new AppointmentOfFilteredPersonsPredicate(validPersons);","lastModifiedDate":"2022-10-13"},{"lineNumber":69,"author":{"gitId":"guanzhou03"},"content":"        expectedModel.updateFilteredAppointmentList(appointmentPredicate);","lastModifiedDate":"2022-10-13"},{"lineNumber":70,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":71,"author":{"gitId":"guanzhou03"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-13"},{"lineNumber":72,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-13"},{"lineNumber":73,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":74,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-10-13"},{"lineNumber":75,"author":{"gitId":"guanzhou03"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2022-10-13"},{"lineNumber":76,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-10-13"},{"lineNumber":77,"author":{"gitId":"guanzhou03"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2022-10-13"},{"lineNumber":78,"author":{"gitId":"guanzhou03"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2022-10-13"},{"lineNumber":79,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-13"},{"lineNumber":80,"author":{"gitId":"guanzhou03"},"content":"}","lastModifiedDate":"2022-10-13"}],"authorContributionMap":{"guanzhou03":80}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showAppointmentAtIndex;","lastModifiedDate":"2022-10-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2018-01-31"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2018-01-31"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand.","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class ListCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"pwjj2000"},"content":"    public void execute_patientListIsNotFiltered_showsSameList() {","lastModifiedDate":"2022-10-08"},{"lineNumber":33,"author":{"gitId":"pwjj2000"},"content":"        assertCommandSuccess(","lastModifiedDate":"2022-10-06"},{"lineNumber":34,"author":{"gitId":"pwjj2000"},"content":"                new ListCommand(\"patients\"), model, ListCommand.MESSAGE_SUCCESS_PATIENTS, expectedModel);","lastModifiedDate":"2022-10-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"pwjj2000"},"content":"    public void execute_patientListIsFiltered_showsEverything() {","lastModifiedDate":"2022-10-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":40,"author":{"gitId":"pwjj2000"},"content":"        assertCommandSuccess(","lastModifiedDate":"2022-10-06"},{"lineNumber":41,"author":{"gitId":"pwjj2000"},"content":"                new ListCommand(\"patients\"), model, ListCommand.MESSAGE_SUCCESS_PATIENTS, expectedModel);","lastModifiedDate":"2022-10-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":43,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":44,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":45,"author":{"gitId":"pwjj2000"},"content":"    public void execute_appointmentListIsNotFiltered_showsSameList() {","lastModifiedDate":"2022-10-08"},{"lineNumber":46,"author":{"gitId":"pwjj2000"},"content":"        assertCommandSuccess(","lastModifiedDate":"2022-10-08"},{"lineNumber":47,"author":{"gitId":"pwjj2000"},"content":"                new ListCommand(\"appts\"), model, ListCommand.MESSAGE_SUCCESS_APPOINTMENTS, expectedModel);","lastModifiedDate":"2022-10-08"},{"lineNumber":48,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":49,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":50,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-24"},{"lineNumber":51,"author":{"gitId":"NicholasTYD"},"content":"    public void execute_appointmentListIsFiltered_showsEverything() {","lastModifiedDate":"2022-10-24"},{"lineNumber":52,"author":{"gitId":"NicholasTYD"},"content":"        showAppointmentAtIndex(model, INDEX_FIRST_APPOINTMENT);","lastModifiedDate":"2022-10-24"},{"lineNumber":53,"author":{"gitId":"NicholasTYD"},"content":"        assertCommandSuccess(","lastModifiedDate":"2022-10-24"},{"lineNumber":54,"author":{"gitId":"NicholasTYD"},"content":"                new ListCommand(\"appts\"), model, ListCommand.MESSAGE_SUCCESS_APPOINTMENTS, expectedModel);","lastModifiedDate":"2022-10-24"},{"lineNumber":55,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":56,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":57,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-24"},{"lineNumber":58,"author":{"gitId":"NicholasTYD"},"content":"    public void execute_patientAndAppointmentListIsNotFiltered_showsSameList() {","lastModifiedDate":"2022-10-24"},{"lineNumber":59,"author":{"gitId":"NicholasTYD"},"content":"        assertCommandSuccess(","lastModifiedDate":"2022-10-24"},{"lineNumber":60,"author":{"gitId":"NicholasTYD"},"content":"                new ListCommand(\"all\"), model, ListCommand.MESSAGE_SUCCESS_ALL, expectedModel);","lastModifiedDate":"2022-10-24"},{"lineNumber":61,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":62,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":63,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-24"},{"lineNumber":64,"author":{"gitId":"NicholasTYD"},"content":"    public void execute_patientAndAppointmentListIsFiltered_showsEverything() {","lastModifiedDate":"2022-10-24"},{"lineNumber":65,"author":{"gitId":"NicholasTYD"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2022-10-24"},{"lineNumber":66,"author":{"gitId":"NicholasTYD"},"content":"        showAppointmentAtIndex(model, INDEX_FIRST_APPOINTMENT);","lastModifiedDate":"2022-10-24"},{"lineNumber":67,"author":{"gitId":"NicholasTYD"},"content":"        assertCommandSuccess(","lastModifiedDate":"2022-10-24"},{"lineNumber":68,"author":{"gitId":"NicholasTYD"},"content":"                new ListCommand(\"all\"), model, ListCommand.MESSAGE_SUCCESS_ALL, expectedModel);","lastModifiedDate":"2022-10-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"NicholasTYD":22,"-":36,"pwjj2000":12}},{"path":"src/test/java/seedu/address/logic/commands/MarkCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-02"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-10-02"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-02"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-02"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_NON_EXISTENT;","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_APPOINTMENT;","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_APPOINTMENT;","lastModifiedDate":"2022-10-02"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2022-10-18"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-02"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-02"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-02"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-02"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-10-02"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-10-02"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-02"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-02"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"class MarkCommandTest {","lastModifiedDate":"2022-10-02"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-18"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-02"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"    public void execute_markUnmarkedAppointment_success() {","lastModifiedDate":"2022-10-02"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"        Appointment appointment \u003d new Appointment(\"Sore Throat\", \"2019-12-10 16:30\", \"\", true);","lastModifiedDate":"2022-10-18"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"        Person person \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2022-10-18"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"        appointment.setPatient(person);","lastModifiedDate":"2022-10-18"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"        MarkCommand markCommand \u003d new MarkCommand(INDEX_SECOND_APPOINTMENT);","lastModifiedDate":"2022-10-18"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"        String expectedMessage \u003d String.format(MarkCommand.MESSAGE_MARK_PERSON_SUCCESS,","lastModifiedDate":"2022-10-02"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"                INDEX_SECOND_APPOINTMENT.getOneBased());","lastModifiedDate":"2022-10-25"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2022-10-18"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"        expectedModel.setAppointment(expectedModel.getFilteredAppointmentList().get(1), appointment);","lastModifiedDate":"2022-10-18"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"        assertCommandSuccess(markCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-18"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-14"},{"lineNumber":46,"author":{"gitId":"JovonLim"},"content":"    public void execute_recurringBooking_success() {","lastModifiedDate":"2022-10-14"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"        Appointment appointment \u003d new Appointment(\"Sore Throat\", \"2019-12-10 16:30\", \"1Y\", true);","lastModifiedDate":"2022-10-18"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"        Person person \u003d model.getFilteredPersonList().get(INDEX_THIRD_PERSON.getZeroBased());","lastModifiedDate":"2022-10-18"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"        appointment.setPatient(person);","lastModifiedDate":"2022-10-18"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"        Appointment recurringAppointment \u003d new Appointment(appointment);","lastModifiedDate":"2022-10-18"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":52,"author":{"gitId":"JovonLim"},"content":"        MarkCommand markCommand \u003d new MarkCommand(INDEX_THIRD_APPOINTMENT);","lastModifiedDate":"2022-10-18"},{"lineNumber":53,"author":{"gitId":"JovonLim"},"content":"        String markSuccessMessage \u003d String.format(MarkCommand.MESSAGE_MARK_PERSON_SUCCESS,","lastModifiedDate":"2022-10-18"},{"lineNumber":54,"author":{"gitId":"NicholasTYD"},"content":"                INDEX_THIRD_APPOINTMENT.getOneBased());","lastModifiedDate":"2022-10-25"},{"lineNumber":55,"author":{"gitId":"JovonLim"},"content":"        String recurringMessage \u003d \"\\nA recurring appointment has been automatically added\";","lastModifiedDate":"2022-10-15"},{"lineNumber":56,"author":{"gitId":"JovonLim"},"content":"        String expectedMessage \u003d markSuccessMessage + recurringMessage;","lastModifiedDate":"2022-10-18"},{"lineNumber":57,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":58,"author":{"gitId":"JovonLim"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2022-10-18"},{"lineNumber":59,"author":{"gitId":"JovonLim"},"content":"        expectedModel.setAppointment(expectedModel.getFilteredAppointmentList().get(2), appointment);","lastModifiedDate":"2022-10-18"},{"lineNumber":60,"author":{"gitId":"JovonLim"},"content":"        expectedModel.addAppointment(recurringAppointment);","lastModifiedDate":"2022-10-14"},{"lineNumber":61,"author":{"gitId":"JovonLim"},"content":"        assertCommandSuccess(markCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-18"},{"lineNumber":62,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":63,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":64,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":65,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":66,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-02"},{"lineNumber":67,"author":{"gitId":"NicholasTYD"},"content":"    public void execute_markAlreadyMarkedAppointment_throwsCommandException() {","lastModifiedDate":"2022-10-02"},{"lineNumber":68,"author":{"gitId":"JovonLim"},"content":"        Index targetAppointmentIndex \u003d INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-18"},{"lineNumber":69,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":70,"author":{"gitId":"NicholasTYD"},"content":"        MarkCommand markCommand \u003d new MarkCommand(targetAppointmentIndex);","lastModifiedDate":"2022-10-18"},{"lineNumber":71,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":72,"author":{"gitId":"JovonLim"},"content":"        assertCommandFailure(markCommand, model, MarkCommand.MESSAGE_ALREADY_MARKED);","lastModifiedDate":"2022-10-18"},{"lineNumber":73,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":74,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":75,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-02"},{"lineNumber":76,"author":{"gitId":"NicholasTYD"},"content":"    public void execute_markNonExistentAppointment_throwsCommandException() {","lastModifiedDate":"2022-10-02"},{"lineNumber":77,"author":{"gitId":"NicholasTYD"},"content":"        Index targetAppointmentIndex \u003d INDEX_NON_EXISTENT;","lastModifiedDate":"2022-10-18"},{"lineNumber":78,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":79,"author":{"gitId":"NicholasTYD"},"content":"        MarkCommand markCommand \u003d new MarkCommand(targetAppointmentIndex);","lastModifiedDate":"2022-10-18"},{"lineNumber":80,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":81,"author":{"gitId":"JovonLim"},"content":"        assertCommandFailure(markCommand, model, Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-18"},{"lineNumber":82,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":83,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-02"}],"authorContributionMap":{"NicholasTYD":47,"JovonLim":36}},{"path":"src/test/java/seedu/address/logic/commands/UngroupCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"WingKei67"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-24"},{"lineNumber":2,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":3,"author":{"gitId":"WingKei67"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-11-03"},{"lineNumber":4,"author":{"gitId":"WingKei67"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-11-03"},{"lineNumber":5,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-24"},{"lineNumber":6,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-24"},{"lineNumber":7,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":8,"author":{"gitId":"WingKei67"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2022-10-24"},{"lineNumber":9,"author":{"gitId":"WingKei67"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-24"},{"lineNumber":10,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":11,"author":{"gitId":"WingKei67"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-24"},{"lineNumber":12,"author":{"gitId":"WingKei67"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-10-24"},{"lineNumber":13,"author":{"gitId":"WingKei67"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-10-24"},{"lineNumber":14,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":15,"author":{"gitId":"WingKei67"},"content":"/**","lastModifiedDate":"2022-10-24"},{"lineNumber":16,"author":{"gitId":"WingKei67"},"content":" * Contains integration tests (interaction with the Model) and unit tests for UngroupPatientCommand.","lastModifiedDate":"2022-10-24"},{"lineNumber":17,"author":{"gitId":"WingKei67"},"content":" */","lastModifiedDate":"2022-10-24"},{"lineNumber":18,"author":{"gitId":"WingKei67"},"content":"public class UngroupCommandTest {","lastModifiedDate":"2022-10-24"},{"lineNumber":19,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":20,"author":{"gitId":"WingKei67"},"content":"    private Model model;","lastModifiedDate":"2022-10-24"},{"lineNumber":21,"author":{"gitId":"WingKei67"},"content":"    private Model expectedModel;","lastModifiedDate":"2022-10-24"},{"lineNumber":22,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":23,"author":{"gitId":"WingKei67"},"content":"    @BeforeEach","lastModifiedDate":"2022-10-24"},{"lineNumber":24,"author":{"gitId":"WingKei67"},"content":"    public void setUp() {","lastModifiedDate":"2022-10-24"},{"lineNumber":25,"author":{"gitId":"WingKei67"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-24"},{"lineNumber":26,"author":{"gitId":"WingKei67"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-24"},{"lineNumber":27,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":28,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":29,"author":{"gitId":"WingKei67"},"content":"    @Test","lastModifiedDate":"2022-10-24"},{"lineNumber":30,"author":{"gitId":"WingKei67"},"content":"    public void execute_originalPatientList_showsSameList() {","lastModifiedDate":"2022-10-24"},{"lineNumber":31,"author":{"gitId":"WingKei67"},"content":"        assertCommandSuccess(","lastModifiedDate":"2022-10-24"},{"lineNumber":32,"author":{"gitId":"WingKei67"},"content":"                new UngroupCommand(\"patients\"), model, UngroupCommand.MESSAGE_SUCCESS_PATIENTS, expectedModel);","lastModifiedDate":"2022-10-24"},{"lineNumber":33,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":34,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":35,"author":{"gitId":"WingKei67"},"content":"    @Test","lastModifiedDate":"2022-10-24"},{"lineNumber":36,"author":{"gitId":"WingKei67"},"content":"    public void execute_unsortedPatientListAfterSorted_showsSameList() {","lastModifiedDate":"2022-10-24"},{"lineNumber":37,"author":{"gitId":"WingKei67"},"content":"        expectedModel.updatePersonComparator(Model.COMPARATOR_UNGROUP_PATIENTS);","lastModifiedDate":"2022-10-24"},{"lineNumber":38,"author":{"gitId":"WingKei67"},"content":"        assertCommandSuccess(","lastModifiedDate":"2022-10-24"},{"lineNumber":39,"author":{"gitId":"WingKei67"},"content":"                new UngroupCommand(\"patients\"), model, UngroupCommand.MESSAGE_SUCCESS_PATIENTS, expectedModel);","lastModifiedDate":"2022-10-24"},{"lineNumber":40,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":41,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":42,"author":{"gitId":"WingKei67"},"content":"    @Test","lastModifiedDate":"2022-11-03"},{"lineNumber":43,"author":{"gitId":"WingKei67"},"content":"    public void execute_originalAppointmentList_showsSameList() {","lastModifiedDate":"2022-11-03"},{"lineNumber":44,"author":{"gitId":"WingKei67"},"content":"        assertCommandSuccess(","lastModifiedDate":"2022-11-03"},{"lineNumber":45,"author":{"gitId":"WingKei67"},"content":"                new UngroupCommand(\"appts\"), model, UngroupCommand.MESSAGE_SUCCESS_APPOINTMENTS, expectedModel);","lastModifiedDate":"2022-11-03"},{"lineNumber":46,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-11-03"},{"lineNumber":47,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":48,"author":{"gitId":"WingKei67"},"content":"    @Test","lastModifiedDate":"2022-11-03"},{"lineNumber":49,"author":{"gitId":"WingKei67"},"content":"    public void execute_unsortedAppointmentListAfterSorted_showsSameList() {","lastModifiedDate":"2022-11-03"},{"lineNumber":50,"author":{"gitId":"WingKei67"},"content":"        expectedModel.updateAppointmentComparator(Model.COMPARATOR_UNGROUP_APPOINTMENTS);","lastModifiedDate":"2022-11-03"},{"lineNumber":51,"author":{"gitId":"WingKei67"},"content":"        assertCommandSuccess(","lastModifiedDate":"2022-11-03"},{"lineNumber":52,"author":{"gitId":"WingKei67"},"content":"                new UngroupCommand(\"appts\"), model, UngroupCommand.MESSAGE_SUCCESS_APPOINTMENTS, expectedModel);","lastModifiedDate":"2022-11-03"},{"lineNumber":53,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-11-03"},{"lineNumber":54,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":55,"author":{"gitId":"WingKei67"},"content":"    @Test","lastModifiedDate":"2022-11-03"},{"lineNumber":56,"author":{"gitId":"WingKei67"},"content":"    public void equals() {","lastModifiedDate":"2022-11-03"},{"lineNumber":57,"author":{"gitId":"WingKei67"},"content":"        UngroupCommand ungroupPatientCommand \u003d new UngroupCommand(\"patients\");","lastModifiedDate":"2022-11-03"},{"lineNumber":58,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":59,"author":{"gitId":"WingKei67"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-11-03"},{"lineNumber":60,"author":{"gitId":"WingKei67"},"content":"        assertTrue(ungroupPatientCommand.equals(ungroupPatientCommand));","lastModifiedDate":"2022-11-03"},{"lineNumber":61,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":62,"author":{"gitId":"WingKei67"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-11-03"},{"lineNumber":63,"author":{"gitId":"WingKei67"},"content":"        UngroupCommand ungroupPatientCommandCopy \u003d new UngroupCommand(\"patients\");","lastModifiedDate":"2022-11-03"},{"lineNumber":64,"author":{"gitId":"WingKei67"},"content":"        assertTrue(ungroupPatientCommand.equals(ungroupPatientCommandCopy));","lastModifiedDate":"2022-11-03"},{"lineNumber":65,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":66,"author":{"gitId":"WingKei67"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2022-11-03"},{"lineNumber":67,"author":{"gitId":"WingKei67"},"content":"        UngroupCommand ungroupAppointmentCommand \u003d new UngroupCommand(\"appts\");","lastModifiedDate":"2022-11-03"},{"lineNumber":68,"author":{"gitId":"WingKei67"},"content":"        assertFalse(ungroupPatientCommand.equals(ungroupAppointmentCommand));","lastModifiedDate":"2022-11-03"},{"lineNumber":69,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-11-03"},{"lineNumber":70,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-24"}],"authorContributionMap":{"WingKei67":70}},{"path":"src/test/java/seedu/address/logic/commands/UnmarkCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-03"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_NON_EXISTENT;","lastModifiedDate":"2022-10-18"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_APPOINTMENT;","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2022-10-18"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"class UnmarkCommandTest {","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-18"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"    void execute_unmarkMarkedAppointment_success() {","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"        Appointment appointment \u003d new Appointment(\"Cough\", \"2010-12-31 23:45\", \"\", false);","lastModifiedDate":"2022-10-18"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"        Person person \u003d model.getFilteredPersonList().get(INDEX_THIRD_PERSON.getZeroBased());","lastModifiedDate":"2022-10-18"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"        appointment.setPatient(person);","lastModifiedDate":"2022-10-18"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"        UnmarkCommand unmarkCommand \u003d new UnmarkCommand(INDEX_FIRST_APPOINTMENT);","lastModifiedDate":"2022-10-18"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"        String expectedMessage \u003d String.format(UnmarkCommand.MESSAGE_UNMARK_PERSON_SUCCESS,","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"                INDEX_FIRST_APPOINTMENT.getOneBased(), person.getName());","lastModifiedDate":"2022-10-18"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2022-10-18"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"        expectedModel.setAppointment(expectedModel.getFilteredAppointmentList().get(0), appointment);","lastModifiedDate":"2022-10-18"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"        assertCommandSuccess(unmarkCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-18"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"    void execute_unmarkAlreadyUnmarkedAppointment_throwsCommandException() {","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"        Index targetAppointmentIndex \u003d INDEX_SECOND_APPOINTMENT;","lastModifiedDate":"2022-10-18"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"NicholasTYD"},"content":"        UnmarkCommand unmarkCommand \u003d new UnmarkCommand(targetAppointmentIndex);","lastModifiedDate":"2022-10-18"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"        assertCommandFailure(unmarkCommand, model, UnmarkCommand.MESSAGE_ALREADY_UNMARKED);","lastModifiedDate":"2022-10-18"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"NicholasTYD"},"content":"    public void execute_unmarkNonExistentAppointment_throwsCommandException() {","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"NicholasTYD"},"content":"        Index targetAppointmentIndex \u003d INDEX_NON_EXISTENT;","lastModifiedDate":"2022-10-18"},{"lineNumber":53,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":54,"author":{"gitId":"NicholasTYD"},"content":"        UnmarkCommand unmarkCommand \u003d new UnmarkCommand(targetAppointmentIndex);","lastModifiedDate":"2022-10-18"},{"lineNumber":55,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"JovonLim"},"content":"        assertCommandFailure(unmarkCommand, model, Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-18"},{"lineNumber":57,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"NicholasTYD":46,"JovonLim":12}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2017-12-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2017-12-23"},{"lineNumber":19,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_EAR;","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_NOSE;","lastModifiedDate":"2022-10-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":25,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_EAR;","lastModifiedDate":"2022-10-21"},{"lineNumber":26,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NOSE;","lastModifiedDate":"2022-10-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2022-10-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2022-10-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-06-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-06-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-06-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-06-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-06-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();","lastModifiedDate":"2017-06-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":47,"author":{"gitId":"pwjj2000"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_NOSE).build();","lastModifiedDate":"2022-10-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // whitespace only preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":51,"author":{"gitId":"pwjj2000"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_NOSE, new AddCommand(expectedPerson));","lastModifiedDate":"2022-10-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":55,"author":{"gitId":"pwjj2000"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_NOSE, new AddCommand(expectedPerson));","lastModifiedDate":"2022-10-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":59,"author":{"gitId":"pwjj2000"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_NOSE, new AddCommand(expectedPerson));","lastModifiedDate":"2022-10-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":63,"author":{"gitId":"pwjj2000"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_NOSE, new AddCommand(expectedPerson));","lastModifiedDate":"2022-10-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY","lastModifiedDate":"2017-12-23"},{"lineNumber":67,"author":{"gitId":"pwjj2000"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_NOSE, new AddCommand(expectedPerson));","lastModifiedDate":"2022-10-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":70,"author":{"gitId":"pwjj2000"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_NOSE, VALID_TAG_EAR)","lastModifiedDate":"2022-10-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-07-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":73,"author":{"gitId":"pwjj2000"},"content":"                + TAG_DESC_EAR + TAG_DESC_NOSE, new AddCommand(expectedPersonMultipleTags));","lastModifiedDate":"2022-10-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // zero tags","lastModifiedDate":"2017-06-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2018-07-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,","lastModifiedDate":"2017-12-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":82,"author":{"gitId":"WingKei67"},"content":"        // no email","lastModifiedDate":"2022-10-06"},{"lineNumber":83,"author":{"gitId":"WingKei67"},"content":"        Person expectedPerson3 \u003d new PersonBuilder(AMY).withEmail(\"\").withTags().build();","lastModifiedDate":"2022-10-06"},{"lineNumber":84,"author":{"gitId":"WingKei67"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY,","lastModifiedDate":"2022-10-06"},{"lineNumber":85,"author":{"gitId":"WingKei67"},"content":"                new AddCommand(expectedPerson3));","lastModifiedDate":"2022-10-06"},{"lineNumber":86,"author":{"gitId":"WingKei67"},"content":"        // no address","lastModifiedDate":"2022-10-06"},{"lineNumber":87,"author":{"gitId":"WingKei67"},"content":"        Person expectedPerson4 \u003d new PersonBuilder(BOB).withAddress(\"\").withTags().build();","lastModifiedDate":"2022-10-06"},{"lineNumber":88,"author":{"gitId":"WingKei67"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB,","lastModifiedDate":"2022-10-06"},{"lineNumber":89,"author":{"gitId":"WingKei67"},"content":"                new AddCommand(expectedPerson4));","lastModifiedDate":"2022-10-06"},{"lineNumber":90,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":91,"author":{"gitId":"WingKei67"},"content":"        // empty address","lastModifiedDate":"2022-10-11"},{"lineNumber":92,"author":{"gitId":"WingKei67"},"content":"        Person expectedPerson5 \u003d new PersonBuilder(BOB).withAddress(\"\").withTags().build();","lastModifiedDate":"2022-10-11"},{"lineNumber":93,"author":{"gitId":"WingKei67"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,","lastModifiedDate":"2022-10-11"},{"lineNumber":94,"author":{"gitId":"WingKei67"},"content":"                new AddCommand(expectedPerson5));","lastModifiedDate":"2022-10-11"},{"lineNumber":95,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-06-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // missing name prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        // missing phone prefix","lastModifiedDate":"2022-10-06"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2022-10-06"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":119,"author":{"gitId":"pwjj2000"},"content":"                + TAG_DESC_EAR + TAG_DESC_NOSE, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2017-06-15"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":123,"author":{"gitId":"pwjj2000"},"content":"                + TAG_DESC_EAR + TAG_DESC_NOSE, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2017-06-15"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":127,"author":{"gitId":"pwjj2000"},"content":"                + TAG_DESC_EAR + TAG_DESC_NOSE, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        // invalid tag","lastModifiedDate":"2017-06-15"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":131,"author":{"gitId":"pwjj2000"},"content":"                + INVALID_TAG_DESC + VALID_TAG_NOSE, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-06-15"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,","lastModifiedDate":"2017-12-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        // non-empty preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":139,"author":{"gitId":"pwjj2000"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_EAR + TAG_DESC_NOSE,","lastModifiedDate":"2022-10-21"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-12-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":142,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"WingKei67":14,"-":111,"pwjj2000":17}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2022-10-13"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_TIME_END;","lastModifiedDate":"2022-10-13"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_TIME_START;","lastModifiedDate":"2022-10-13"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2022-10-13"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2022-10-13"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2022-10-13"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REASON;","lastModifiedDate":"2022-10-13"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-10-13"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_APPOINTMENT;","lastModifiedDate":"2022-10-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_APPOINTMENT;","lastModifiedDate":"2022-10-09"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_APPOINTMENT;","lastModifiedDate":"2022-10-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-13"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-13"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"import java.util.Collections;","lastModifiedDate":"2022-10-13"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"import java.util.HashSet;","lastModifiedDate":"2022-10-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.BookCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":32,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.logic.commands.CancelCommand;","lastModifiedDate":"2022-10-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditAppointmentCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditAppointmentCommand.EditAppointmentDescriptor;","lastModifiedDate":"2022-10-08"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditPatientCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditPatientCommand.EditPersonDescriptor;","lastModifiedDate":"2022-10-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.logic.commands.HideAppointmentsCommand;","lastModifiedDate":"2022-10-17"},{"lineNumber":43,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.logic.commands.HidePatientsCommand;","lastModifiedDate":"2022-10-17"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.commands.MarkCommand;","lastModifiedDate":"2022-10-09"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.commands.UnmarkCommand;","lastModifiedDate":"2022-10-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.predicates.CombinedAppointmentPredicate;","lastModifiedDate":"2022-10-15"},{"lineNumber":51,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.predicates.CombinedPersonPredicate;","lastModifiedDate":"2022-10-15"},{"lineNumber":52,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.predicates.HideAppointmentPredicate;","lastModifiedDate":"2022-10-22"},{"lineNumber":53,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.person.predicates.HideAppointmentPredicate.HideBy;","lastModifiedDate":"2022-11-05"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.predicates.TagContainsKeywordsPredicate;","lastModifiedDate":"2022-10-22"},{"lineNumber":55,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2022-10-31"},{"lineNumber":56,"author":{"gitId":"JovonLim"},"content":"import seedu.address.testutil.AppointmentUtil;","lastModifiedDate":"2022-10-08"},{"lineNumber":57,"author":{"gitId":"JovonLim"},"content":"import seedu.address.testutil.EditAppointmentDescriptorBuilder;","lastModifiedDate":"2022-10-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {","lastModifiedDate":"2017-07-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();","lastModifiedDate":"2017-07-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"JovonLim"},"content":"    public void parseCommand_add() throws ParseException {","lastModifiedDate":"2022-10-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":74,"author":{"gitId":"JovonLim"},"content":"    public void parseCommand_clear() throws ParseException {","lastModifiedDate":"2022-10-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2022-10-09"},{"lineNumber":80,"author":{"gitId":"JovonLim"},"content":"    public void parseCommand_mark() throws ParseException {","lastModifiedDate":"2022-10-09"},{"lineNumber":81,"author":{"gitId":"NicholasTYD"},"content":"        MarkCommand command \u003d (MarkCommand) parser.parseCommand(","lastModifiedDate":"2022-10-09"},{"lineNumber":82,"author":{"gitId":"NicholasTYD"},"content":"                MarkCommand.COMMAND_WORD + \" \" + INDEX_FIRST_APPOINTMENT.getOneBased());","lastModifiedDate":"2022-10-18"},{"lineNumber":83,"author":{"gitId":"NicholasTYD"},"content":"        assertEquals(new MarkCommand(INDEX_FIRST_APPOINTMENT), command);","lastModifiedDate":"2022-10-18"},{"lineNumber":84,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":85,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":86,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-09"},{"lineNumber":87,"author":{"gitId":"JovonLim"},"content":"    public void parseCommand_unmark() throws ParseException {","lastModifiedDate":"2022-10-09"},{"lineNumber":88,"author":{"gitId":"NicholasTYD"},"content":"        UnmarkCommand command \u003d (UnmarkCommand) parser.parseCommand(","lastModifiedDate":"2022-10-09"},{"lineNumber":89,"author":{"gitId":"NicholasTYD"},"content":"                UnmarkCommand.COMMAND_WORD + \" \" + INDEX_SECOND_APPOINTMENT.getOneBased());","lastModifiedDate":"2022-10-18"},{"lineNumber":90,"author":{"gitId":"NicholasTYD"},"content":"        assertEquals(new UnmarkCommand(INDEX_SECOND_APPOINTMENT), command);","lastModifiedDate":"2022-10-18"},{"lineNumber":91,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":92,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":93,"author":{"gitId":"guanzhou03"},"content":"    @Test","lastModifiedDate":"2022-10-09"},{"lineNumber":94,"author":{"gitId":"guanzhou03"},"content":"    public void parseCommand_cancel() throws Exception {","lastModifiedDate":"2022-10-09"},{"lineNumber":95,"author":{"gitId":"guanzhou03"},"content":"        CancelCommand command \u003d (CancelCommand) parser.parseCommand(CancelCommand.COMMAND_WORD","lastModifiedDate":"2022-10-09"},{"lineNumber":96,"author":{"gitId":"NicholasTYD"},"content":"                + \" \" + INDEX_THIRD_APPOINTMENT.getOneBased());","lastModifiedDate":"2022-10-18"},{"lineNumber":97,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":98,"author":{"gitId":"NicholasTYD"},"content":"        assertEquals(new CancelCommand(INDEX_THIRD_APPOINTMENT), command);","lastModifiedDate":"2022-10-18"},{"lineNumber":99,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":100,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"JovonLim"},"content":"    public void parseCommand_delete() throws ParseException {","lastModifiedDate":"2022-10-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2017-06-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":109,"author":{"gitId":"JovonLim"},"content":"    public void parseCommand_book() throws ParseException {","lastModifiedDate":"2022-10-09"},{"lineNumber":110,"author":{"gitId":"JovonLim"},"content":"        Appointment appointment \u003d new Appointment(\"Cough\", \"2022-12-16 17:30\", \"\", false);","lastModifiedDate":"2022-10-14"},{"lineNumber":111,"author":{"gitId":"JovonLim"},"content":"        String str \u003d AppointmentUtil.getBookCommand(appointment);","lastModifiedDate":"2022-10-09"},{"lineNumber":112,"author":{"gitId":"JovonLim"},"content":"        BookCommand command \u003d (BookCommand) parser.parseCommand(str);","lastModifiedDate":"2022-10-09"},{"lineNumber":113,"author":{"gitId":"JovonLim"},"content":"        assertEquals(new BookCommand(INDEX_FIRST_PERSON, appointment), command);","lastModifiedDate":"2022-10-08"},{"lineNumber":114,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":115,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":116,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":117,"author":{"gitId":"JovonLim"},"content":"    public void parseCommand_editPatient() throws ParseException {","lastModifiedDate":"2022-10-09"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();","lastModifiedDate":"2017-06-27"},{"lineNumber":120,"author":{"gitId":"JovonLim"},"content":"        EditPatientCommand command \u003d (EditPatientCommand) parser.parseCommand(EditPatientCommand.COMMAND_WORD","lastModifiedDate":"2022-10-08"},{"lineNumber":121,"author":{"gitId":"JovonLim"},"content":"                + \" \" + EditPatientCommand.DESCRIPTOR_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()","lastModifiedDate":"2022-10-08"},{"lineNumber":122,"author":{"gitId":"JovonLim"},"content":"                + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2022-10-08"},{"lineNumber":123,"author":{"gitId":"JovonLim"},"content":"        assertEquals(new EditPatientCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2022-10-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":127,"author":{"gitId":"JovonLim"},"content":"    public void parseCommand_editAppointment() throws ParseException {","lastModifiedDate":"2022-10-09"},{"lineNumber":128,"author":{"gitId":"JovonLim"},"content":"        Appointment appointment \u003d new Appointment(\"Cough\", \"2022-12-16 17:30\", \"\",","lastModifiedDate":"2022-10-31"},{"lineNumber":129,"author":{"gitId":"JovonLim"},"content":"                new HashSet\u003c\u003e(List.of(Tag.convertToTag(\"Nose\"))), false);","lastModifiedDate":"2022-10-31"},{"lineNumber":130,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder(appointment).build();","lastModifiedDate":"2022-10-08"},{"lineNumber":131,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentCommand command \u003d (EditAppointmentCommand)","lastModifiedDate":"2022-10-08"},{"lineNumber":132,"author":{"gitId":"JovonLim"},"content":"                parser.parseCommand(EditAppointmentCommand.COMMAND_WORD","lastModifiedDate":"2022-10-08"},{"lineNumber":133,"author":{"gitId":"JovonLim"},"content":"                + \" \" + EditAppointmentCommand.DESCRIPTOR_WORD","lastModifiedDate":"2022-10-15"},{"lineNumber":134,"author":{"gitId":"JovonLim"},"content":"                + \" \" + INDEX_FIRST_APPOINTMENT.getOneBased()","lastModifiedDate":"2022-10-08"},{"lineNumber":135,"author":{"gitId":"JovonLim"},"content":"                + \" \" + AppointmentUtil.getEditAppointmentDescriptorDetails(descriptor));","lastModifiedDate":"2022-10-08"},{"lineNumber":136,"author":{"gitId":"JovonLim"},"content":"        assertEquals(new EditAppointmentCommand(INDEX_FIRST_APPOINTMENT, descriptor), command);","lastModifiedDate":"2022-10-15"},{"lineNumber":137,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":138,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":140,"author":{"gitId":"JovonLim"},"content":"    public void parseCommand_exit() throws ParseException {","lastModifiedDate":"2022-10-09"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":146,"author":{"gitId":"JovonLim"},"content":"    public void parseCommand_find() throws ParseException {","lastModifiedDate":"2022-10-09"},{"lineNumber":147,"author":{"gitId":"NicholasTYD"},"content":"        List\u003cString\u003e searchString \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-13"},{"lineNumber":148,"author":{"gitId":"NicholasTYD"},"content":"        String name \u003d \"John\";","lastModifiedDate":"2022-10-13"},{"lineNumber":149,"author":{"gitId":"NicholasTYD"},"content":"        String phone \u003d \"1234\";","lastModifiedDate":"2022-10-13"},{"lineNumber":150,"author":{"gitId":"NicholasTYD"},"content":"        String email \u003d \"abcd\";","lastModifiedDate":"2022-10-13"},{"lineNumber":151,"author":{"gitId":"NicholasTYD"},"content":"        String address \u003d \"clementi\";","lastModifiedDate":"2022-10-13"},{"lineNumber":152,"author":{"gitId":"NicholasTYD"},"content":"        String personTag \u003d \"throat\";","lastModifiedDate":"2022-10-25"},{"lineNumber":153,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":154,"author":{"gitId":"NicholasTYD"},"content":"        String reason \u003d \"cough\";","lastModifiedDate":"2022-10-13"},{"lineNumber":155,"author":{"gitId":"NicholasTYD"},"content":"        String dateTimeStart \u003d \"2022-12-13 12:12\";","lastModifiedDate":"2022-10-13"},{"lineNumber":156,"author":{"gitId":"NicholasTYD"},"content":"        String dateTimeStartToParse \u003d \"2022-12-13T12:12\";","lastModifiedDate":"2022-10-13"},{"lineNumber":157,"author":{"gitId":"NicholasTYD"},"content":"        String dateTimeEnd \u003d \"2025-12-13 12:12\";","lastModifiedDate":"2022-10-13"},{"lineNumber":158,"author":{"gitId":"NicholasTYD"},"content":"        String dateTimeEndToParse \u003d \"2025-12-13T12:12\";","lastModifiedDate":"2022-10-13"},{"lineNumber":159,"author":{"gitId":"NicholasTYD"},"content":"        String appointmentTag \u003d \"ear\";","lastModifiedDate":"2022-10-25"},{"lineNumber":160,"author":{"gitId":"NicholasTYD"},"content":"        searchString.add(PREFIX_NAME + name);","lastModifiedDate":"2022-10-13"},{"lineNumber":161,"author":{"gitId":"NicholasTYD"},"content":"        searchString.add(PREFIX_PHONE + phone);","lastModifiedDate":"2022-10-13"},{"lineNumber":162,"author":{"gitId":"NicholasTYD"},"content":"        searchString.add(PREFIX_EMAIL + email);","lastModifiedDate":"2022-10-13"},{"lineNumber":163,"author":{"gitId":"NicholasTYD"},"content":"        searchString.add(PREFIX_ADDRESS + address);","lastModifiedDate":"2022-10-13"},{"lineNumber":164,"author":{"gitId":"NicholasTYD"},"content":"        searchString.add(PREFIX_REASON + reason);","lastModifiedDate":"2022-10-13"},{"lineNumber":165,"author":{"gitId":"NicholasTYD"},"content":"        searchString.add(PREFIX_TAG + personTag);","lastModifiedDate":"2022-10-25"},{"lineNumber":166,"author":{"gitId":"NicholasTYD"},"content":"        searchString.add(PREFIX_DATE_TIME_START + dateTimeStart);","lastModifiedDate":"2022-10-13"},{"lineNumber":167,"author":{"gitId":"NicholasTYD"},"content":"        searchString.add(PREFIX_DATE_TIME_END + dateTimeEnd);","lastModifiedDate":"2022-10-13"},{"lineNumber":168,"author":{"gitId":"NicholasTYD"},"content":"        searchString.add(PREFIX_TAG_APPOINTMENT + appointmentTag);","lastModifiedDate":"2022-10-25"},{"lineNumber":169,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":171,"author":{"gitId":"NicholasTYD"},"content":"                FindCommand.COMMAND_WORD + \" \" + String.join(\" \", searchString));","lastModifiedDate":"2022-10-13"},{"lineNumber":172,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":173,"author":{"gitId":"NicholasTYD"},"content":"        CombinedPersonPredicate expectedPersonPredicate \u003d","lastModifiedDate":"2022-10-13"},{"lineNumber":174,"author":{"gitId":"NicholasTYD"},"content":"                new CombinedPersonPredicate(name, phone, email, address, Collections.singletonList(personTag));","lastModifiedDate":"2022-10-25"},{"lineNumber":175,"author":{"gitId":"NicholasTYD"},"content":"        CombinedAppointmentPredicate expectedAppointmentPredicate \u003d new CombinedAppointmentPredicate(reason,","lastModifiedDate":"2022-10-13"},{"lineNumber":176,"author":{"gitId":"NicholasTYD"},"content":"                LocalDateTime.parse(dateTimeStartToParse), LocalDateTime.parse(dateTimeEndToParse),","lastModifiedDate":"2022-10-25"},{"lineNumber":177,"author":{"gitId":"NicholasTYD"},"content":"                Collections.singletonList(appointmentTag));","lastModifiedDate":"2022-10-25"},{"lineNumber":178,"author":{"gitId":"NicholasTYD"},"content":"        boolean isAnyAppointmentFieldSpecified \u003d true;","lastModifiedDate":"2022-10-13"},{"lineNumber":179,"author":{"gitId":"NicholasTYD"},"content":"        assertEquals(new FindCommand(expectedPersonPredicate, expectedAppointmentPredicate,","lastModifiedDate":"2022-10-13"},{"lineNumber":180,"author":{"gitId":"NicholasTYD"},"content":"                        isAnyAppointmentFieldSpecified), command);","lastModifiedDate":"2022-10-13"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":184,"author":{"gitId":"JovonLim"},"content":"    public void parseCommand_help() throws ParseException {","lastModifiedDate":"2022-10-09"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2022-10-17"},{"lineNumber":190,"author":{"gitId":"guanzhou03"},"content":"    public void parseCommand_hidePatients() throws ParseException {","lastModifiedDate":"2022-10-17"},{"lineNumber":191,"author":{"gitId":"guanzhou03"},"content":"        HidePatientsCommand command \u003d (HidePatientsCommand) parser.parseCommand(","lastModifiedDate":"2022-10-17"},{"lineNumber":192,"author":{"gitId":"guanzhou03"},"content":"                HidePatientsCommand.COMMAND_WORD + \" patients\" + \" t/ear t/nose\");","lastModifiedDate":"2022-10-31"},{"lineNumber":193,"author":{"gitId":"guanzhou03"},"content":"        List\u003cString\u003e l \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-26"},{"lineNumber":194,"author":{"gitId":"guanzhou03"},"content":"        l.add(\"ear\");","lastModifiedDate":"2022-10-31"},{"lineNumber":195,"author":{"gitId":"guanzhou03"},"content":"        l.add(\"nose\");","lastModifiedDate":"2022-10-31"},{"lineNumber":196,"author":{"gitId":"guanzhou03"},"content":"        assertEquals(new HidePatientsCommand(new TagContainsKeywordsPredicate(l)), command);","lastModifiedDate":"2022-10-26"},{"lineNumber":197,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":198,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":199,"author":{"gitId":"guanzhou03"},"content":"    @Test","lastModifiedDate":"2022-10-17"},{"lineNumber":200,"author":{"gitId":"guanzhou03"},"content":"    public void parseCommand_hideAppointments() throws ParseException {","lastModifiedDate":"2022-10-17"},{"lineNumber":201,"author":{"gitId":"guanzhou03"},"content":"        HideAppointmentsCommand command \u003d (HideAppointmentsCommand) parser.parseCommand(","lastModifiedDate":"2022-10-17"},{"lineNumber":202,"author":{"gitId":"guanzhou03"},"content":"                HideAppointmentsCommand.COMMAND_WORD + \" appts\" + \" r/ear r/nose\");","lastModifiedDate":"2022-10-26"},{"lineNumber":203,"author":{"gitId":"guanzhou03"},"content":"        List\u003cString\u003e l \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-26"},{"lineNumber":204,"author":{"gitId":"guanzhou03"},"content":"        l.add(\"ear\");","lastModifiedDate":"2022-10-26"},{"lineNumber":205,"author":{"gitId":"guanzhou03"},"content":"        l.add(\"nose\");","lastModifiedDate":"2022-10-26"},{"lineNumber":206,"author":{"gitId":"guanzhou03"},"content":"        assertEquals(new HideAppointmentsCommand(","lastModifiedDate":"2022-10-17"},{"lineNumber":207,"author":{"gitId":"guanzhou03"},"content":"                new HideAppointmentPredicate(","lastModifiedDate":"2022-10-17"},{"lineNumber":208,"author":{"gitId":"guanzhou03"},"content":"                        HideBy.KEYWORD, l)), command);","lastModifiedDate":"2022-11-05"},{"lineNumber":209,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-17"},{"lineNumber":210,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-17"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":212,"author":{"gitId":"JovonLim"},"content":"    public void parseCommand_list() throws ParseException {","lastModifiedDate":"2022-10-09"},{"lineNumber":213,"author":{"gitId":"pwjj2000"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" patients\") instanceof ListCommand);","lastModifiedDate":"2022-10-06"},{"lineNumber":214,"author":{"gitId":"pwjj2000"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" appts\") instanceof ListCommand);","lastModifiedDate":"2022-10-06"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":217,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-09"},{"lineNumber":218,"author":{"gitId":"NicholasTYD"},"content":"    public void parseCommand_exitCommandCaseInsensitive_success() throws ParseException {","lastModifiedDate":"2022-10-09"},{"lineNumber":219,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD.toLowerCase()) instanceof ExitCommand);","lastModifiedDate":"2022-10-09"},{"lineNumber":220,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD.toUpperCase()) instanceof ExitCommand);","lastModifiedDate":"2022-10-09"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":233,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"NicholasTYD":70,"JovonLim":47,"-":85,"guanzhou03":29,"pwjj2000":2}},{"path":"src/test/java/seedu/address/logic/parser/BookCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-01"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-01"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-10-01"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-10-01"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-10-01"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-31"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"import java.util.HashSet;","lastModifiedDate":"2022-10-31"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-01"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.BookCommand;","lastModifiedDate":"2022-10-01"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2022-10-31"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"public class BookCommandParserTest {","lastModifiedDate":"2022-10-01"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"    private final BookCommandParser parser \u003d new BookCommandParser();","lastModifiedDate":"2022-10-01"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"    private HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(Arrays.asList(Tag.convertToTag(\"Ear\"), Tag.convertToTag(\"Nose\")));","lastModifiedDate":"2022-10-31"},{"lineNumber":21,"author":{"gitId":"pwjj2000"},"content":"    private final Appointment appointment \u003d","lastModifiedDate":"2022-10-06"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"            new Appointment(\"Sore Throat\", \"2022-12-10 16:30\", \"\", false);","lastModifiedDate":"2022-10-14"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":"    private final Appointment recurringAppointment \u003d","lastModifiedDate":"2022-10-14"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"            new Appointment(\"Sore Throat\", \"2022-12-10 16:30\", \"2M\", false);","lastModifiedDate":"2022-10-14"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"    private final Appointment taggedAppointment \u003d","lastModifiedDate":"2022-10-31"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"            new Appointment(\"Sore Throat\", \"2022-12-10 16:30\", \"\", tags, false);","lastModifiedDate":"2022-10-31"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-01"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"    public void parse_validArgs_returnsBookCommand() {","lastModifiedDate":"2022-10-01"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"        assertParseSuccess(parser, \"1 r/Sore Throat d/2022-12-10 16:30\",","lastModifiedDate":"2022-10-01"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"                new BookCommand(INDEX_FIRST_PERSON, appointment));","lastModifiedDate":"2022-10-01"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"        assertParseSuccess(parser, \"1 r/Sore Throat d/16:30 2022-12-10\",","lastModifiedDate":"2022-10-01"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"                new BookCommand(INDEX_FIRST_PERSON, appointment));","lastModifiedDate":"2022-10-01"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"        assertParseSuccess(parser, \"1 r/Sore Throat d/2022-12-10 16:30 pe/\",","lastModifiedDate":"2022-10-31"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"                new BookCommand(INDEX_FIRST_PERSON, appointment));","lastModifiedDate":"2022-10-31"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-14"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"    public void parse_validRecurringArgs_returnsBookCommand() {","lastModifiedDate":"2022-10-31"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"        assertParseSuccess(parser, \"1 r/Sore Throat d/2022-12-10 16:30 pe/2M\",","lastModifiedDate":"2022-10-14"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"                new BookCommand(INDEX_FIRST_PERSON, recurringAppointment));","lastModifiedDate":"2022-10-14"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":46,"author":{"gitId":"JovonLim"},"content":"        assertParseSuccess(parser, \"1 r/Sore Throat d/2022-12-10 16:30 pe/ 0Y  2M  0D\",","lastModifiedDate":"2022-10-14"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"                new BookCommand(INDEX_FIRST_PERSON, recurringAppointment));","lastModifiedDate":"2022-10-14"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"        assertParseSuccess(parser, \"1 r/Sore Throat d/2022-12-10 16:30 pe/ 2M  0D\",","lastModifiedDate":"2022-10-31"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"                new BookCommand(INDEX_FIRST_PERSON, recurringAppointment));","lastModifiedDate":"2022-10-31"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-31"},{"lineNumber":52,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":53,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-31"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"    public void parse_validTagArgs_returnsBookCommand() {","lastModifiedDate":"2022-10-31"},{"lineNumber":55,"author":{"gitId":"JovonLim"},"content":"        assertParseSuccess(parser, \"1 r/Sore Throat d/2022-12-10 16:30 t/Ear t/Throat\",","lastModifiedDate":"2022-10-31"},{"lineNumber":56,"author":{"gitId":"JovonLim"},"content":"                new BookCommand(INDEX_FIRST_PERSON, taggedAppointment));","lastModifiedDate":"2022-10-31"},{"lineNumber":57,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":58,"author":{"gitId":"JovonLim"},"content":"        assertParseSuccess(parser, \"1 r/Sore Throat d/2022-12-10 16:30 t/EAR t/THROAT\",","lastModifiedDate":"2022-10-31"},{"lineNumber":59,"author":{"gitId":"JovonLim"},"content":"                new BookCommand(INDEX_FIRST_PERSON, taggedAppointment));","lastModifiedDate":"2022-10-31"},{"lineNumber":60,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":61,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":62,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-01"},{"lineNumber":63,"author":{"gitId":"JovonLim"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2022-10-01"},{"lineNumber":64,"author":{"gitId":"JovonLim"},"content":"        assertParseFailure(parser, \"a r/Sore Throat d/2022-12-10 16:30\",","lastModifiedDate":"2022-10-01"},{"lineNumber":65,"author":{"gitId":"JovonLim"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, BookCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-01"},{"lineNumber":66,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":67,"author":{"gitId":"JovonLim"},"content":"        assertParseFailure(parser, \"1 r/ d/2022-12-10 16:30\", Appointment.REASON_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-31"},{"lineNumber":68,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":69,"author":{"gitId":"JovonLim"},"content":"        assertParseFailure(parser, \"1 r/Sore Throat d/2022-25-10 16:30\", Appointment.DATE_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-31"},{"lineNumber":70,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":71,"author":{"gitId":"JovonLim"},"content":"        assertParseFailure(parser, \"1 r/Sore Throat d/2022-12-10 16:30 pe/S\",","lastModifiedDate":"2022-10-31"},{"lineNumber":72,"author":{"gitId":"JovonLim"},"content":"                Appointment.TIME_PERIOD_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-31"},{"lineNumber":73,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":74,"author":{"gitId":"JovonLim"},"content":"        assertParseFailure(parser, \"1 r/Sore Throat d/2022-12-10 16:30 pe/1M t/Sick\", Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-31"},{"lineNumber":75,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":76,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-01"}],"authorContributionMap":{"JovonLim":75,"pwjj2000":1}},{"path":"src/test/java/seedu/address/logic/parser/EditAppointmentCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-08"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-08"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_AMY;","lastModifiedDate":"2022-10-08"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_BOB;","lastModifiedDate":"2022-10-08"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;","lastModifiedDate":"2022-10-08"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_REASON_DESC;","lastModifiedDate":"2022-10-08"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2022-10-31"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIME_PERIOD_DESC;","lastModifiedDate":"2022-10-14"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REASON_DESC_AMY;","lastModifiedDate":"2022-10-08"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REASON_DESC_BOB;","lastModifiedDate":"2022-10-08"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_EAR;","lastModifiedDate":"2022-10-31"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_NOSE;","lastModifiedDate":"2022-10-31"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TIME_PERIOD_DESC_AMY;","lastModifiedDate":"2022-10-14"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TIME_PERIOD_DESC_BOB;","lastModifiedDate":"2022-10-14"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_AMY;","lastModifiedDate":"2022-10-08"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_BOB;","lastModifiedDate":"2022-10-08"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REASON_AMY;","lastModifiedDate":"2022-10-08"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REASON_BOB;","lastModifiedDate":"2022-10-08"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-10-08"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-10-08"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-08"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-08"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"import java.util.List;","lastModifiedDate":"2022-10-14"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-08"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-08"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditAppointmentCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditAppointmentCommand.EditAppointmentDescriptor;","lastModifiedDate":"2022-10-08"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-08"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2022-10-31"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"import seedu.address.testutil.EditAppointmentDescriptorBuilder;","lastModifiedDate":"2022-10-08"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"public class EditAppointmentCommandParserTest {","lastModifiedDate":"2022-10-08"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2022-10-08"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditAppointmentCommand.MESSAGE_USAGE);","lastModifiedDate":"2022-10-08"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"    private final EditAppointmentCommandParser parser \u003d new EditAppointmentCommandParser();","lastModifiedDate":"2022-10-08"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2022-10-08"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"        // no index specified","lastModifiedDate":"2022-10-08"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"        assertParseFailure(parser, VALID_REASON_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-10-08"},{"lineNumber":46,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"        // no field specified","lastModifiedDate":"2022-10-08"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"        assertParseFailure(parser, \"1\", EditAppointmentCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2022-10-15"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"        // no index and no field specified","lastModifiedDate":"2022-10-08"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-10-08"},{"lineNumber":52,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":53,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":55,"author":{"gitId":"JovonLim"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2022-10-08"},{"lineNumber":56,"author":{"gitId":"JovonLim"},"content":"        // negative index","lastModifiedDate":"2022-10-08"},{"lineNumber":57,"author":{"gitId":"JovonLim"},"content":"        assertParseFailure(parser, \"-5\" + REASON_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-10-15"},{"lineNumber":58,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":59,"author":{"gitId":"JovonLim"},"content":"        // zero index","lastModifiedDate":"2022-10-08"},{"lineNumber":60,"author":{"gitId":"JovonLim"},"content":"        assertParseFailure(parser, \"0\" + REASON_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-10-15"},{"lineNumber":61,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":62,"author":{"gitId":"JovonLim"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2022-10-08"},{"lineNumber":63,"author":{"gitId":"JovonLim"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-10-08"},{"lineNumber":64,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":65,"author":{"gitId":"JovonLim"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2022-10-08"},{"lineNumber":66,"author":{"gitId":"JovonLim"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-10-15"},{"lineNumber":67,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":68,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":69,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":70,"author":{"gitId":"JovonLim"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2022-10-08"},{"lineNumber":71,"author":{"gitId":"JovonLim"},"content":"        // invalid reason","lastModifiedDate":"2022-10-08"},{"lineNumber":72,"author":{"gitId":"JovonLim"},"content":"        assertParseFailure(parser, \"1\" + INVALID_REASON_DESC, Appointment.REASON_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-15"},{"lineNumber":73,"author":{"gitId":"JovonLim"},"content":"        // invalid date","lastModifiedDate":"2022-10-08"},{"lineNumber":74,"author":{"gitId":"JovonLim"},"content":"        assertParseFailure(parser, \"1\" + INVALID_DATE_DESC, Appointment.DATE_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-15"},{"lineNumber":75,"author":{"gitId":"JovonLim"},"content":"        // invalid timePeriod","lastModifiedDate":"2022-10-14"},{"lineNumber":76,"author":{"gitId":"JovonLim"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TIME_PERIOD_DESC, Appointment.TIME_PERIOD_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-15"},{"lineNumber":77,"author":{"gitId":"JovonLim"},"content":"        // invalid tag","lastModifiedDate":"2022-10-31"},{"lineNumber":78,"author":{"gitId":"JovonLim"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-31"},{"lineNumber":79,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":80,"author":{"gitId":"JovonLim"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2022-10-08"},{"lineNumber":81,"author":{"gitId":"JovonLim"},"content":"        assertParseFailure(parser, \"1\" + INVALID_REASON_DESC + INVALID_DATE_DESC,","lastModifiedDate":"2022-10-15"},{"lineNumber":82,"author":{"gitId":"JovonLim"},"content":"                Appointment.REASON_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-08"},{"lineNumber":83,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":84,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":85,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":86,"author":{"gitId":"JovonLim"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2022-10-08"},{"lineNumber":87,"author":{"gitId":"JovonLim"},"content":"        Index appointmentIndex \u003d INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-08"},{"lineNumber":88,"author":{"gitId":"JovonLim"},"content":"        String userInput \u003d appointmentIndex.getOneBased()","lastModifiedDate":"2022-10-15"},{"lineNumber":89,"author":{"gitId":"JovonLim"},"content":"                + REASON_DESC_AMY + DATE_DESC_AMY + TIME_PERIOD_DESC_AMY + TAG_DESC_EAR + TAG_DESC_NOSE;","lastModifiedDate":"2022-10-31"},{"lineNumber":90,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":91,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder().withReason(VALID_REASON_AMY)","lastModifiedDate":"2022-10-08"},{"lineNumber":92,"author":{"gitId":"JovonLim"},"content":"                .withDateTime(LocalDateTime.parse(VALID_DATE_AMY, Appointment.DATE_FORMATTER))","lastModifiedDate":"2022-10-14"},{"lineNumber":93,"author":{"gitId":"JovonLim"},"content":"                .withTimePeriod(List.of(1, 0, 0))","lastModifiedDate":"2022-10-31"},{"lineNumber":94,"author":{"gitId":"JovonLim"},"content":"                .withTags(\"Ear\", \"Nose\")","lastModifiedDate":"2022-10-31"},{"lineNumber":95,"author":{"gitId":"JovonLim"},"content":"                .build();","lastModifiedDate":"2022-10-31"},{"lineNumber":96,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentCommand expectedCommand \u003d new EditAppointmentCommand(appointmentIndex, descriptor);","lastModifiedDate":"2022-10-15"},{"lineNumber":97,"author":{"gitId":"JovonLim"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-10-08"},{"lineNumber":98,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":99,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":100,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":101,"author":{"gitId":"JovonLim"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2022-10-08"},{"lineNumber":102,"author":{"gitId":"JovonLim"},"content":"        Index appointmentIndex \u003d INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-08"},{"lineNumber":103,"author":{"gitId":"JovonLim"},"content":"        String userInput \u003d appointmentIndex.getOneBased() + REASON_DESC_AMY;","lastModifiedDate":"2022-10-15"},{"lineNumber":104,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":105,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()","lastModifiedDate":"2022-10-08"},{"lineNumber":106,"author":{"gitId":"JovonLim"},"content":"                .withReason(VALID_REASON_AMY).build();","lastModifiedDate":"2022-10-08"},{"lineNumber":107,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentCommand expectedCommand \u003d new EditAppointmentCommand(appointmentIndex, descriptor);","lastModifiedDate":"2022-10-15"},{"lineNumber":108,"author":{"gitId":"JovonLim"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-10-08"},{"lineNumber":109,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":110,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":111,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":112,"author":{"gitId":"JovonLim"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2022-10-08"},{"lineNumber":113,"author":{"gitId":"JovonLim"},"content":"        Index appointmentIndex \u003d INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-08"},{"lineNumber":114,"author":{"gitId":"JovonLim"},"content":"        String userInput \u003d appointmentIndex.getOneBased()","lastModifiedDate":"2022-10-15"},{"lineNumber":115,"author":{"gitId":"JovonLim"},"content":"                + REASON_DESC_AMY + DATE_DESC_AMY + TIME_PERIOD_DESC_AMY","lastModifiedDate":"2022-10-14"},{"lineNumber":116,"author":{"gitId":"JovonLim"},"content":"                + REASON_DESC_BOB + DATE_DESC_BOB + TIME_PERIOD_DESC_BOB;","lastModifiedDate":"2022-10-14"},{"lineNumber":117,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":118,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder().withReason(VALID_REASON_BOB)","lastModifiedDate":"2022-10-08"},{"lineNumber":119,"author":{"gitId":"JovonLim"},"content":"                .withDateTime(LocalDateTime.parse(VALID_DATE_BOB, Appointment.DATE_FORMATTER))","lastModifiedDate":"2022-10-14"},{"lineNumber":120,"author":{"gitId":"JovonLim"},"content":"                .withTimePeriod(List.of(0, 0, 0)).build();","lastModifiedDate":"2022-10-14"},{"lineNumber":121,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentCommand expectedCommand \u003d new EditAppointmentCommand(appointmentIndex, descriptor);","lastModifiedDate":"2022-10-15"},{"lineNumber":122,"author":{"gitId":"JovonLim"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-10-08"},{"lineNumber":123,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":124,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":125,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":126,"author":{"gitId":"JovonLim"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2022-10-08"},{"lineNumber":127,"author":{"gitId":"JovonLim"},"content":"        Index appointmentIndex \u003d INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-08"},{"lineNumber":128,"author":{"gitId":"JovonLim"},"content":"        String userInput \u003d appointmentIndex.getOneBased()","lastModifiedDate":"2022-10-15"},{"lineNumber":129,"author":{"gitId":"JovonLim"},"content":"                + INVALID_REASON_DESC + REASON_DESC_BOB;","lastModifiedDate":"2022-10-08"},{"lineNumber":130,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":131,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder().withReason(VALID_REASON_BOB)","lastModifiedDate":"2022-10-08"},{"lineNumber":132,"author":{"gitId":"JovonLim"},"content":"                .build();","lastModifiedDate":"2022-10-08"},{"lineNumber":133,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentCommand expectedCommand \u003d new EditAppointmentCommand(appointmentIndex, descriptor);","lastModifiedDate":"2022-10-15"},{"lineNumber":134,"author":{"gitId":"JovonLim"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-10-08"},{"lineNumber":135,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":136,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-08"}],"authorContributionMap":{"JovonLim":136}},{"path":"src/test/java/seedu/address/logic/parser/EditPatientCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-05-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":16,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_EAR;","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_NOSE;","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":25,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_EAR;","lastModifiedDate":"2022-10-21"},{"lineNumber":26,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NOSE;","lastModifiedDate":"2022-10-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditPatientCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditPatientCommand.EditPersonDescriptor;","lastModifiedDate":"2022-10-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-05-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-05-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-05-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-05-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"public class EditPatientCommandParserTest {","lastModifiedDate":"2022-10-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPatientCommand.MESSAGE_USAGE);","lastModifiedDate":"2022-10-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"JovonLim"},"content":"    private EditPatientCommandParser parser \u003d new EditPatientCommandParser();","lastModifiedDate":"2022-10-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // no index specified","lastModifiedDate":"2017-05-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":60,"author":{"gitId":"JovonLim"},"content":"        assertParseFailure(parser, \"1\", EditPatientCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2022-10-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // no index and no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-06-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // negative index","lastModifiedDate":"2017-05-04"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // zero index","lastModifiedDate":"2017-06-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2018-09-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2018-09-22"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2018-09-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag","lastModifiedDate":"2018-09-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email","lastModifiedDate":"2017-05-04"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone","lastModifiedDate":"2017-05-04"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2017-05-04"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,","lastModifiedDate":"2017-05-04"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error","lastModifiedDate":"2017-05-04"},{"lineNumber":97,"author":{"gitId":"pwjj2000"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_NOSE + TAG_DESC_EAR + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":98,"author":{"gitId":"pwjj2000"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_NOSE + TAG_EMPTY + TAG_DESC_EAR, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":99,"author":{"gitId":"pwjj2000"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_NOSE + TAG_DESC_EAR, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2017-05-04"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,","lastModifiedDate":"2017-07-06"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":109,"author":{"gitId":"pwjj2000"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_EAR","lastModifiedDate":"2022-10-21"},{"lineNumber":110,"author":{"gitId":"pwjj2000"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_NOSE;","lastModifiedDate":"2022-10-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":114,"author":{"gitId":"pwjj2000"},"content":"                .withTags(VALID_TAG_EAR, VALID_TAG_NOSE).build();","lastModifiedDate":"2022-10-21"},{"lineNumber":115,"author":{"gitId":"JovonLim"},"content":"        EditPatientCommand expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":127,"author":{"gitId":"JovonLim"},"content":"        EditPatientCommand expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"WingKei67"},"content":"    @Test","lastModifiedDate":"2022-10-11"},{"lineNumber":132,"author":{"gitId":"WingKei67"},"content":"    public void parse_someEmptyOptionalFieldsSpecified_success() {","lastModifiedDate":"2022-10-11"},{"lineNumber":133,"author":{"gitId":"WingKei67"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-10-11"},{"lineNumber":134,"author":{"gitId":"WingKei67"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_ADDRESS_DESC;","lastModifiedDate":"2022-10-11"},{"lineNumber":135,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":136,"author":{"gitId":"WingKei67"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withAddress(\"\").build();","lastModifiedDate":"2022-10-11"},{"lineNumber":137,"author":{"gitId":"WingKei67"},"content":"        EditPatientCommand expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2022-10-11"},{"lineNumber":138,"author":{"gitId":"WingKei67"},"content":"        assertParseSuccess(parser, userInput, expectedCommand); // empty address","lastModifiedDate":"2022-10-11"},{"lineNumber":139,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":140,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-11"},{"lineNumber":141,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-11"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // name","lastModifiedDate":"2017-05-04"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":148,"author":{"gitId":"JovonLim"},"content":"        EditPatientCommand expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        // phone","lastModifiedDate":"2017-05-04"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":154,"author":{"gitId":"JovonLim"},"content":"        expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        // email","lastModifiedDate":"2017-05-04"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":160,"author":{"gitId":"JovonLim"},"content":"        expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        // address","lastModifiedDate":"2017-05-04"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":166,"author":{"gitId":"JovonLim"},"content":"        expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        // tags","lastModifiedDate":"2017-05-04"},{"lineNumber":170,"author":{"gitId":"pwjj2000"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_NOSE;","lastModifiedDate":"2022-10-21"},{"lineNumber":171,"author":{"gitId":"pwjj2000"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_NOSE).build();","lastModifiedDate":"2022-10-21"},{"lineNumber":172,"author":{"gitId":"JovonLim"},"content":"        expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2017-08-15"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2017-05-25"},{"lineNumber":180,"author":{"gitId":"pwjj2000"},"content":"                + TAG_DESC_NOSE + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_NOSE","lastModifiedDate":"2022-10-21"},{"lineNumber":181,"author":{"gitId":"pwjj2000"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_EAR;","lastModifiedDate":"2022-10-21"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":184,"author":{"gitId":"pwjj2000"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_NOSE, VALID_TAG_EAR)","lastModifiedDate":"2022-10-21"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2017-05-04"},{"lineNumber":186,"author":{"gitId":"JovonLim"},"content":"        EditPatientCommand expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        // no other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":197,"author":{"gitId":"JovonLim"},"content":"        EditPatientCommand expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        // other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-05-25"},{"lineNumber":202,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":204,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":205,"author":{"gitId":"JovonLim"},"content":"        expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;","lastModifiedDate":"2017-05-25"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();","lastModifiedDate":"2017-05-04"},{"lineNumber":215,"author":{"gitId":"JovonLim"},"content":"        EditPatientCommand expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":219,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"JovonLim":17,"WingKei67":11,"-":176,"pwjj2000":15}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-27"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.commons.core.Messages.START_DATE_AFTER_END_DATE;","lastModifiedDate":"2022-10-16"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2022-10-14"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2022-10-14"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMPTY_STRING;","lastModifiedDate":"2022-10-14"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2022-10-14"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2022-10-14"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2022-10-14"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2022-10-14"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2022-10-14"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2022-10-14"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REASON_DESC_AMY;","lastModifiedDate":"2022-10-14"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_APPOINTMENT_DESC_EAR;","lastModifiedDate":"2022-10-25"},{"lineNumber":16,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_EAR;","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_THROAT;","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2022-10-14"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2022-10-14"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2022-10-14"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2022-10-14"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REASON_AMY;","lastModifiedDate":"2022-10-14"},{"lineNumber":23,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_EAR;","lastModifiedDate":"2022-10-21"},{"lineNumber":24,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_THROAT;","lastModifiedDate":"2022-10-21"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_TIME_END;","lastModifiedDate":"2022-10-14"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_TIME_START;","lastModifiedDate":"2022-10-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.PredicateGeneratorUtil.generateCombinedAppointmentPredicate;","lastModifiedDate":"2022-10-16"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.PredicateGeneratorUtil.generateCombinedAppointmentPredicateWithOnlyDateTime;","lastModifiedDate":"2022-10-16"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.PredicateGeneratorUtil.generateCombinedAppointmentPredicateWithOnlyReason;","lastModifiedDate":"2022-10-16"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.PredicateGeneratorUtil.generateCombinedPersonPredicate;","lastModifiedDate":"2022-10-16"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.PredicateGeneratorUtil.generateCombinedPersonPredicateWithOnlyTags;","lastModifiedDate":"2022-10-16"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.PredicateGeneratorUtil.generateEmptyCombinedAppointmentPredicate;","lastModifiedDate":"2022-10-16"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.PredicateGeneratorUtil.generateEmptyCombinedPersonPredicate;","lastModifiedDate":"2022-10-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2022-10-15"},{"lineNumber":40,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-14"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2022-10-14"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2022-10-14"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.predicates.CombinedAppointmentPredicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.predicates.CombinedPersonPredicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":45,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2022-10-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"NicholasTYD"},"content":"    private String validDateTimeStart \u003d \"2022-12-13 12:12\";","lastModifiedDate":"2022-10-15"},{"lineNumber":52,"author":{"gitId":"NicholasTYD"},"content":"    private String validDateTimeEnd \u003d \"2025-12-13 12:12\";","lastModifiedDate":"2022-10-15"},{"lineNumber":53,"author":{"gitId":"NicholasTYD"},"content":"    private String invalidDate \u003d \"2999-99-99 99-99\";","lastModifiedDate":"2022-10-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"NicholasTYD"},"content":"    private String dateTimeStartDesc \u003d \" \" + PREFIX_DATE_TIME_START + validDateTimeStart;","lastModifiedDate":"2022-10-15"},{"lineNumber":56,"author":{"gitId":"NicholasTYD"},"content":"    private String dateTimeEndDesc \u003d \" \" + PREFIX_DATE_TIME_END + validDateTimeEnd;","lastModifiedDate":"2022-10-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2022-10-14"},{"lineNumber":59,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_validArgsAllFieldsProvided_returnsFindCommand() {","lastModifiedDate":"2022-10-14"},{"lineNumber":60,"author":{"gitId":"NicholasTYD"},"content":"        CombinedPersonPredicate expectedPersonPredicate \u003d generateCombinedPersonPredicate(","lastModifiedDate":"2022-10-16"},{"lineNumber":61,"author":{"gitId":"pwjj2000"},"content":"                VALID_NAME_AMY, VALID_PHONE_AMY, VALID_EMAIL_AMY, VALID_ADDRESS_AMY, VALID_TAG_THROAT);","lastModifiedDate":"2022-10-21"},{"lineNumber":62,"author":{"gitId":"NicholasTYD"},"content":"        CombinedAppointmentPredicate expectedAppointmentPredicate \u003d","lastModifiedDate":"2022-10-14"},{"lineNumber":63,"author":{"gitId":"NicholasTYD"},"content":"                generateCombinedAppointmentPredicate(VALID_REASON_AMY, validDateTimeStart, validDateTimeEnd,","lastModifiedDate":"2022-10-25"},{"lineNumber":64,"author":{"gitId":"NicholasTYD"},"content":"                        VALID_TAG_EAR);","lastModifiedDate":"2022-10-25"},{"lineNumber":65,"author":{"gitId":"NicholasTYD"},"content":"        boolean isAnyAppointmentFieldSpecified \u003d true;","lastModifiedDate":"2022-10-13"},{"lineNumber":66,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":69,"author":{"gitId":"NicholasTYD"},"content":"                new FindCommand(expectedPersonPredicate, expectedAppointmentPredicate, isAnyAppointmentFieldSpecified);","lastModifiedDate":"2022-10-14"},{"lineNumber":70,"author":{"gitId":"NicholasTYD"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY","lastModifiedDate":"2022-10-14"},{"lineNumber":71,"author":{"gitId":"NicholasTYD"},"content":"                + TAG_DESC_THROAT","lastModifiedDate":"2022-10-25"},{"lineNumber":72,"author":{"gitId":"NicholasTYD"},"content":"                + REASON_DESC_AMY + dateTimeStartDesc + dateTimeEndDesc","lastModifiedDate":"2022-10-25"},{"lineNumber":73,"author":{"gitId":"NicholasTYD"},"content":"                + TAG_APPOINTMENT_DESC_EAR, expectedFindCommand);","lastModifiedDate":"2022-10-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2017-06-27"},{"lineNumber":76,"author":{"gitId":"NicholasTYD"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_AMY + PREAMBLE_WHITESPACE","lastModifiedDate":"2022-10-14"},{"lineNumber":77,"author":{"gitId":"NicholasTYD"},"content":"                + PREAMBLE_WHITESPACE + PHONE_DESC_AMY + PREAMBLE_WHITESPACE","lastModifiedDate":"2022-10-14"},{"lineNumber":78,"author":{"gitId":"NicholasTYD"},"content":"                + PREAMBLE_WHITESPACE + EMAIL_DESC_AMY + PREAMBLE_WHITESPACE","lastModifiedDate":"2022-10-14"},{"lineNumber":79,"author":{"gitId":"NicholasTYD"},"content":"                + PREAMBLE_WHITESPACE + ADDRESS_DESC_AMY + PREAMBLE_WHITESPACE","lastModifiedDate":"2022-10-14"},{"lineNumber":80,"author":{"gitId":"pwjj2000"},"content":"                + PREAMBLE_WHITESPACE + TAG_DESC_THROAT + PREAMBLE_WHITESPACE","lastModifiedDate":"2022-10-21"},{"lineNumber":81,"author":{"gitId":"NicholasTYD"},"content":"                + PREAMBLE_WHITESPACE + REASON_DESC_AMY + PREAMBLE_WHITESPACE","lastModifiedDate":"2022-10-14"},{"lineNumber":82,"author":{"gitId":"NicholasTYD"},"content":"                + PREAMBLE_WHITESPACE + dateTimeStartDesc + PREAMBLE_WHITESPACE","lastModifiedDate":"2022-10-14"},{"lineNumber":83,"author":{"gitId":"NicholasTYD"},"content":"                + PREAMBLE_WHITESPACE + dateTimeEndDesc + PREAMBLE_WHITESPACE","lastModifiedDate":"2022-10-25"},{"lineNumber":84,"author":{"gitId":"NicholasTYD"},"content":"                + PREAMBLE_WHITESPACE + TAG_APPOINTMENT_DESC_EAR + PREAMBLE_WHITESPACE, expectedFindCommand);","lastModifiedDate":"2022-10-25"},{"lineNumber":85,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":86,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":87,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-14"},{"lineNumber":88,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_noAppointmentFieldsProvided_returnsFindCommandWithFalseBoolean() {","lastModifiedDate":"2022-10-14"},{"lineNumber":89,"author":{"gitId":"NicholasTYD"},"content":"        CombinedPersonPredicate expectedPersonPredicate \u003d generateCombinedPersonPredicate(","lastModifiedDate":"2022-10-16"},{"lineNumber":90,"author":{"gitId":"pwjj2000"},"content":"                VALID_NAME_AMY, VALID_PHONE_AMY, VALID_EMAIL_AMY, VALID_ADDRESS_AMY, VALID_TAG_THROAT);","lastModifiedDate":"2022-10-21"},{"lineNumber":91,"author":{"gitId":"NicholasTYD"},"content":"        CombinedAppointmentPredicate expectedAppointmentPredicate \u003d generateEmptyCombinedAppointmentPredicate();","lastModifiedDate":"2022-10-16"},{"lineNumber":92,"author":{"gitId":"NicholasTYD"},"content":"        boolean isAnyAppointmentFieldSpecified \u003d false;","lastModifiedDate":"2022-10-14"},{"lineNumber":93,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":94,"author":{"gitId":"NicholasTYD"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2022-10-14"},{"lineNumber":95,"author":{"gitId":"NicholasTYD"},"content":"                new FindCommand(expectedPersonPredicate, expectedAppointmentPredicate, isAnyAppointmentFieldSpecified);","lastModifiedDate":"2022-10-14"},{"lineNumber":96,"author":{"gitId":"NicholasTYD"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY","lastModifiedDate":"2022-10-14"},{"lineNumber":97,"author":{"gitId":"pwjj2000"},"content":"                + TAG_DESC_THROAT, expectedFindCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":100,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-14"},{"lineNumber":101,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_somePersonFieldsProvided_success() {","lastModifiedDate":"2022-10-14"},{"lineNumber":102,"author":{"gitId":"NicholasTYD"},"content":"        CombinedAppointmentPredicate expectedAppointmentPredicate \u003d generateEmptyCombinedAppointmentPredicate();","lastModifiedDate":"2022-10-16"},{"lineNumber":103,"author":{"gitId":"NicholasTYD"},"content":"        boolean hasApptFields \u003d false;","lastModifiedDate":"2022-10-14"},{"lineNumber":104,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":105,"author":{"gitId":"NicholasTYD"},"content":"        CombinedPersonPredicate expectedPersonPredicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":106,"author":{"gitId":"NicholasTYD"},"content":"        FindCommand expectedFindCommand;","lastModifiedDate":"2022-10-14"},{"lineNumber":107,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":108,"author":{"gitId":"NicholasTYD"},"content":"        // Only name and phone provided","lastModifiedDate":"2022-10-14"},{"lineNumber":109,"author":{"gitId":"NicholasTYD"},"content":"        expectedPersonPredicate \u003d generateCombinedPersonPredicate(","lastModifiedDate":"2022-10-16"},{"lineNumber":110,"author":{"gitId":"NicholasTYD"},"content":"                VALID_NAME_AMY, VALID_PHONE_AMY, EMPTY_STRING, EMPTY_STRING, EMPTY_STRING);","lastModifiedDate":"2022-10-14"},{"lineNumber":111,"author":{"gitId":"NicholasTYD"},"content":"        expectedFindCommand \u003d new FindCommand(expectedPersonPredicate, expectedAppointmentPredicate, hasApptFields);","lastModifiedDate":"2022-10-14"},{"lineNumber":112,"author":{"gitId":"NicholasTYD"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY, expectedFindCommand);","lastModifiedDate":"2022-10-14"},{"lineNumber":113,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":114,"author":{"gitId":"NicholasTYD"},"content":"        // Only email and address provided","lastModifiedDate":"2022-10-14"},{"lineNumber":115,"author":{"gitId":"NicholasTYD"},"content":"        expectedPersonPredicate \u003d generateCombinedPersonPredicate(","lastModifiedDate":"2022-10-16"},{"lineNumber":116,"author":{"gitId":"NicholasTYD"},"content":"                EMPTY_STRING, EMPTY_STRING, VALID_EMAIL_AMY, VALID_ADDRESS_AMY, EMPTY_STRING);","lastModifiedDate":"2022-10-14"},{"lineNumber":117,"author":{"gitId":"NicholasTYD"},"content":"        expectedFindCommand \u003d new FindCommand(expectedPersonPredicate, expectedAppointmentPredicate, hasApptFields);","lastModifiedDate":"2022-10-14"},{"lineNumber":118,"author":{"gitId":"NicholasTYD"},"content":"        assertParseSuccess(parser, EMAIL_DESC_AMY + ADDRESS_DESC_AMY, expectedFindCommand);","lastModifiedDate":"2022-10-14"},{"lineNumber":119,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":120,"author":{"gitId":"NicholasTYD"},"content":"        // Only tags provided","lastModifiedDate":"2022-10-14"},{"lineNumber":121,"author":{"gitId":"pwjj2000"},"content":"        expectedPersonPredicate \u003d generateCombinedPersonPredicateWithOnlyTags(VALID_TAG_THROAT);","lastModifiedDate":"2022-10-21"},{"lineNumber":122,"author":{"gitId":"NicholasTYD"},"content":"        expectedFindCommand \u003d new FindCommand(expectedPersonPredicate, expectedAppointmentPredicate, hasApptFields);","lastModifiedDate":"2022-10-14"},{"lineNumber":123,"author":{"gitId":"pwjj2000"},"content":"        assertParseSuccess(parser, TAG_DESC_THROAT, expectedFindCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":124,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":125,"author":{"gitId":"NicholasTYD"},"content":"        // Multiple tags provided","lastModifiedDate":"2022-10-14"},{"lineNumber":126,"author":{"gitId":"pwjj2000"},"content":"        expectedPersonPredicate \u003d generateCombinedPersonPredicateWithOnlyTags(VALID_TAG_THROAT, VALID_TAG_EAR);","lastModifiedDate":"2022-10-21"},{"lineNumber":127,"author":{"gitId":"NicholasTYD"},"content":"        expectedFindCommand \u003d new FindCommand(expectedPersonPredicate, expectedAppointmentPredicate, hasApptFields);","lastModifiedDate":"2022-10-14"},{"lineNumber":128,"author":{"gitId":"pwjj2000"},"content":"        assertParseSuccess(parser, TAG_DESC_THROAT + TAG_DESC_EAR, expectedFindCommand);","lastModifiedDate":"2022-10-21"},{"lineNumber":129,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":130,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":131,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-14"},{"lineNumber":132,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_someAppointmentFieldsProvided_success() {","lastModifiedDate":"2022-10-14"},{"lineNumber":133,"author":{"gitId":"NicholasTYD"},"content":"        CombinedPersonPredicate expectedPersonPredicate \u003d generateEmptyCombinedPersonPredicate();","lastModifiedDate":"2022-10-16"},{"lineNumber":134,"author":{"gitId":"NicholasTYD"},"content":"        boolean hasApptFields \u003d true;","lastModifiedDate":"2022-10-14"},{"lineNumber":135,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":136,"author":{"gitId":"NicholasTYD"},"content":"        CombinedAppointmentPredicate expectedAppointmentPredicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":137,"author":{"gitId":"NicholasTYD"},"content":"        FindCommand expectedFindCommand;","lastModifiedDate":"2022-10-14"},{"lineNumber":138,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":139,"author":{"gitId":"NicholasTYD"},"content":"        // Only reason provided","lastModifiedDate":"2022-10-14"},{"lineNumber":140,"author":{"gitId":"NicholasTYD"},"content":"        expectedAppointmentPredicate \u003d generateCombinedAppointmentPredicateWithOnlyReason(VALID_REASON_AMY);","lastModifiedDate":"2022-10-16"},{"lineNumber":141,"author":{"gitId":"NicholasTYD"},"content":"        expectedFindCommand \u003d new FindCommand(expectedPersonPredicate, expectedAppointmentPredicate, hasApptFields);","lastModifiedDate":"2022-10-14"},{"lineNumber":142,"author":{"gitId":"NicholasTYD"},"content":"        assertParseSuccess(parser, REASON_DESC_AMY, expectedFindCommand);","lastModifiedDate":"2022-10-14"},{"lineNumber":143,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":144,"author":{"gitId":"NicholasTYD"},"content":"        // Only start date provided","lastModifiedDate":"2022-10-14"},{"lineNumber":145,"author":{"gitId":"NicholasTYD"},"content":"        expectedAppointmentPredicate \u003d","lastModifiedDate":"2022-10-16"},{"lineNumber":146,"author":{"gitId":"NicholasTYD"},"content":"                generateCombinedAppointmentPredicateWithOnlyDateTime(validDateTimeStart, EMPTY_STRING);","lastModifiedDate":"2022-10-16"},{"lineNumber":147,"author":{"gitId":"NicholasTYD"},"content":"        expectedFindCommand \u003d new FindCommand(expectedPersonPredicate, expectedAppointmentPredicate, hasApptFields);","lastModifiedDate":"2022-10-14"},{"lineNumber":148,"author":{"gitId":"NicholasTYD"},"content":"        assertParseSuccess(parser, dateTimeStartDesc, expectedFindCommand);","lastModifiedDate":"2022-10-14"},{"lineNumber":149,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":150,"author":{"gitId":"NicholasTYD"},"content":"        // Only end date provided","lastModifiedDate":"2022-10-14"},{"lineNumber":151,"author":{"gitId":"NicholasTYD"},"content":"        expectedAppointmentPredicate \u003d","lastModifiedDate":"2022-10-16"},{"lineNumber":152,"author":{"gitId":"NicholasTYD"},"content":"                generateCombinedAppointmentPredicateWithOnlyDateTime(EMPTY_STRING, validDateTimeEnd);","lastModifiedDate":"2022-10-16"},{"lineNumber":153,"author":{"gitId":"NicholasTYD"},"content":"        expectedFindCommand \u003d new FindCommand(expectedPersonPredicate, expectedAppointmentPredicate, hasApptFields);","lastModifiedDate":"2022-10-14"},{"lineNumber":154,"author":{"gitId":"NicholasTYD"},"content":"        assertParseSuccess(parser, dateTimeEndDesc, expectedFindCommand);","lastModifiedDate":"2022-10-14"},{"lineNumber":155,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":156,"author":{"gitId":"NicholasTYD"},"content":"        // Only start and end date provided","lastModifiedDate":"2022-10-14"},{"lineNumber":157,"author":{"gitId":"NicholasTYD"},"content":"        expectedAppointmentPredicate \u003d","lastModifiedDate":"2022-10-16"},{"lineNumber":158,"author":{"gitId":"NicholasTYD"},"content":"                generateCombinedAppointmentPredicateWithOnlyDateTime(validDateTimeStart, validDateTimeEnd);","lastModifiedDate":"2022-10-16"},{"lineNumber":159,"author":{"gitId":"NicholasTYD"},"content":"        expectedFindCommand \u003d new FindCommand(expectedPersonPredicate, expectedAppointmentPredicate, hasApptFields);","lastModifiedDate":"2022-10-14"},{"lineNumber":160,"author":{"gitId":"NicholasTYD"},"content":"        assertParseSuccess(parser, dateTimeStartDesc + dateTimeEndDesc, expectedFindCommand);","lastModifiedDate":"2022-10-14"},{"lineNumber":161,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":162,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":163,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-14"},{"lineNumber":164,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2022-10-14"},{"lineNumber":165,"author":{"gitId":"NicholasTYD"},"content":"        // Address, emails and reasons are considered always valid since they don\u0027t need to be","lastModifiedDate":"2022-10-14"},{"lineNumber":166,"author":{"gitId":"NicholasTYD"},"content":"        // proper emails/addresses/reasons (E.g finding \"google\" in john@google.com is fine).","lastModifiedDate":"2022-10-14"},{"lineNumber":167,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":168,"author":{"gitId":"NicholasTYD"},"content":"        // Invalid name","lastModifiedDate":"2022-10-14"},{"lineNumber":169,"author":{"gitId":"NicholasTYD"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-14"},{"lineNumber":170,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":171,"author":{"gitId":"NicholasTYD"},"content":"        // Invalid Phone","lastModifiedDate":"2022-10-14"},{"lineNumber":172,"author":{"gitId":"NicholasTYD"},"content":"        assertParseFailure(parser, INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-14"},{"lineNumber":173,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":174,"author":{"gitId":"NicholasTYD"},"content":"        // Invalid Tag","lastModifiedDate":"2022-10-14"},{"lineNumber":175,"author":{"gitId":"NicholasTYD"},"content":"        assertParseFailure(parser, INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-14"},{"lineNumber":176,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":177,"author":{"gitId":"NicholasTYD"},"content":"        // Invalid startDate","lastModifiedDate":"2022-10-14"},{"lineNumber":178,"author":{"gitId":"NicholasTYD"},"content":"        assertParseFailure(parser, \" \" + PREFIX_DATE_TIME_START + invalidDate,","lastModifiedDate":"2022-10-14"},{"lineNumber":179,"author":{"gitId":"NicholasTYD"},"content":"                Appointment.DATE_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-14"},{"lineNumber":180,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":181,"author":{"gitId":"NicholasTYD"},"content":"        // Invalid endDate","lastModifiedDate":"2022-10-14"},{"lineNumber":182,"author":{"gitId":"NicholasTYD"},"content":"        assertParseFailure(parser, \" \" + PREFIX_DATE_TIME_END + invalidDate,","lastModifiedDate":"2022-10-14"},{"lineNumber":183,"author":{"gitId":"NicholasTYD"},"content":"                Appointment.DATE_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-14"},{"lineNumber":184,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":185,"author":{"gitId":"NicholasTYD"},"content":"        // startDate after endDate -\u003e Invalid","lastModifiedDate":"2022-10-16"},{"lineNumber":186,"author":{"gitId":"NicholasTYD"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2022-10-16"},{"lineNumber":187,"author":{"gitId":"NicholasTYD"},"content":"                \" \" + PREFIX_DATE_TIME_START + validDateTimeEnd","lastModifiedDate":"2022-10-16"},{"lineNumber":188,"author":{"gitId":"NicholasTYD"},"content":"                        + \" \" + PREFIX_DATE_TIME_END + validDateTimeStart,","lastModifiedDate":"2022-10-16"},{"lineNumber":189,"author":{"gitId":"NicholasTYD"},"content":"                START_DATE_AFTER_END_DATE);","lastModifiedDate":"2022-10-16"},{"lineNumber":190,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":191,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":192,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-14"},{"lineNumber":193,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_emptyArgs_throwsParseException() {","lastModifiedDate":"2022-10-14"},{"lineNumber":194,"author":{"gitId":"NicholasTYD"},"content":"        assertParseFailure(parser, \"     \",","lastModifiedDate":"2022-10-14"},{"lineNumber":195,"author":{"gitId":"NicholasTYD"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-14"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":197,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-27"}],"authorContributionMap":{"NicholasTYD":160,"-":25,"pwjj2000":12}},{"path":"src/test/java/seedu/address/logic/parser/GroupAppointmentCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"WingKei67"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-24"},{"lineNumber":2,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":3,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-24"},{"lineNumber":4,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-10-24"},{"lineNumber":5,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-10-24"},{"lineNumber":6,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2022-11-03"},{"lineNumber":7,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":8,"author":{"gitId":"WingKei67"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-24"},{"lineNumber":9,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":10,"author":{"gitId":"WingKei67"},"content":"import seedu.address.logic.commands.GroupAppointmentCommand;","lastModifiedDate":"2022-10-24"},{"lineNumber":11,"author":{"gitId":"WingKei67"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-11-03"},{"lineNumber":12,"author":{"gitId":"WingKei67"},"content":"import seedu.address.model.Key;","lastModifiedDate":"2022-10-24"},{"lineNumber":13,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":14,"author":{"gitId":"WingKei67"},"content":"public class GroupAppointmentCommandParserTest {","lastModifiedDate":"2022-10-24"},{"lineNumber":15,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":16,"author":{"gitId":"WingKei67"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2022-10-24"},{"lineNumber":17,"author":{"gitId":"WingKei67"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, GroupAppointmentCommand.MESSAGE_USAGE);","lastModifiedDate":"2022-10-24"},{"lineNumber":18,"author":{"gitId":"WingKei67"},"content":"    private GroupAppointmentCommandParser parser \u003d new GroupAppointmentCommandParser();","lastModifiedDate":"2022-10-24"},{"lineNumber":19,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":20,"author":{"gitId":"WingKei67"},"content":"    @Test","lastModifiedDate":"2022-10-24"},{"lineNumber":21,"author":{"gitId":"WingKei67"},"content":"    public void parse_validArg_returnGroupAppointmentCommand() {","lastModifiedDate":"2022-10-24"},{"lineNumber":22,"author":{"gitId":"WingKei67"},"content":"        assertParseSuccess(parser, \" k/tag\", new GroupAppointmentCommand(","lastModifiedDate":"2022-10-24"},{"lineNumber":23,"author":{"gitId":"WingKei67"},"content":"                Key.TAG));","lastModifiedDate":"2022-10-24"},{"lineNumber":24,"author":{"gitId":"WingKei67"},"content":"        assertParseSuccess(parser, \" k/Tag\", new GroupAppointmentCommand(","lastModifiedDate":"2022-10-24"},{"lineNumber":25,"author":{"gitId":"WingKei67"},"content":"                Key.TAG));","lastModifiedDate":"2022-10-24"},{"lineNumber":26,"author":{"gitId":"WingKei67"},"content":"        assertParseSuccess(parser, \" k/taG\", new GroupAppointmentCommand(","lastModifiedDate":"2022-10-24"},{"lineNumber":27,"author":{"gitId":"WingKei67"},"content":"                Key.TAG));","lastModifiedDate":"2022-10-24"},{"lineNumber":28,"author":{"gitId":"WingKei67"},"content":"        assertParseSuccess(parser, \" k/patient\", new GroupAppointmentCommand(","lastModifiedDate":"2022-10-24"},{"lineNumber":29,"author":{"gitId":"WingKei67"},"content":"                Key.PATIENT));","lastModifiedDate":"2022-10-24"},{"lineNumber":30,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":31,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":32,"author":{"gitId":"WingKei67"},"content":"    @Test","lastModifiedDate":"2022-10-24"},{"lineNumber":33,"author":{"gitId":"WingKei67"},"content":"    public void parse_invalidArg_fails() {","lastModifiedDate":"2022-10-24"},{"lineNumber":34,"author":{"gitId":"WingKei67"},"content":"        assertParseFailure(parser, \"k/ds\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-10-24"},{"lineNumber":35,"author":{"gitId":"WingKei67"},"content":"        assertParseFailure(parser, \"ear\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-10-24"},{"lineNumber":36,"author":{"gitId":"WingKei67"},"content":"        assertThrows(ParseException.class, () -\u003e new GroupAppointmentCommandParser().parse(\"leg\"));","lastModifiedDate":"2022-11-03"},{"lineNumber":37,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":38,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-24"}],"authorContributionMap":{"WingKei67":38}},{"path":"src/test/java/seedu/address/logic/parser/HideAppointmentsCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"guanzhou03"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-21"},{"lineNumber":2,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":3,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-21"},{"lineNumber":4,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-10-21"},{"lineNumber":5,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-10-21"},{"lineNumber":6,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":7,"author":{"gitId":"guanzhou03"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-26"},{"lineNumber":8,"author":{"gitId":"guanzhou03"},"content":"import java.util.List;","lastModifiedDate":"2022-10-26"},{"lineNumber":9,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-26"},{"lineNumber":10,"author":{"gitId":"guanzhou03"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-21"},{"lineNumber":11,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.logic.commands.HideAppointmentsCommand;","lastModifiedDate":"2022-10-21"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.predicates.HideAppointmentPredicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":14,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.person.predicates.HideAppointmentPredicate.HideBy;","lastModifiedDate":"2022-11-05"},{"lineNumber":15,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":16,"author":{"gitId":"guanzhou03"},"content":"public class HideAppointmentsCommandParserTest {","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"guanzhou03"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2022-10-21"},{"lineNumber":19,"author":{"gitId":"guanzhou03"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, HideAppointmentsCommand.MESSAGE_USAGE);","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"guanzhou03"},"content":"    private HideAppointmentsCommandParser parser \u003d new HideAppointmentsCommandParser();","lastModifiedDate":"2022-10-21"},{"lineNumber":21,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":22,"author":{"gitId":"guanzhou03"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":23,"author":{"gitId":"guanzhou03"},"content":"    public void parse_validReasonArgs_returnHideCommand() {","lastModifiedDate":"2022-10-21"},{"lineNumber":24,"author":{"gitId":"guanzhou03"},"content":"        List\u003cString\u003e l \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-26"},{"lineNumber":25,"author":{"gitId":"guanzhou03"},"content":"        l.add(\"ear\");","lastModifiedDate":"2022-10-26"},{"lineNumber":26,"author":{"gitId":"guanzhou03"},"content":"        assertParseSuccess(parser, \" r/ear\", new HideAppointmentsCommand(","lastModifiedDate":"2022-10-21"},{"lineNumber":27,"author":{"gitId":"guanzhou03"},"content":"                new HideAppointmentPredicate(HideBy.KEYWORD, l)));","lastModifiedDate":"2022-11-05"},{"lineNumber":28,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":29,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":30,"author":{"gitId":"guanzhou03"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":31,"author":{"gitId":"guanzhou03"},"content":"    public void parse_validIsMarkedArgs_returnHideCommand() {","lastModifiedDate":"2022-10-21"},{"lineNumber":32,"author":{"gitId":"guanzhou03"},"content":"        List\u003cString\u003e l \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-26"},{"lineNumber":33,"author":{"gitId":"guanzhou03"},"content":"        l.add(\"marked\");","lastModifiedDate":"2022-10-26"},{"lineNumber":34,"author":{"gitId":"guanzhou03"},"content":"        assertParseSuccess(parser, \" s/marked\", new HideAppointmentsCommand(","lastModifiedDate":"2022-10-21"},{"lineNumber":35,"author":{"gitId":"guanzhou03"},"content":"                new HideAppointmentPredicate(HideBy.IS_MARKED, l)));","lastModifiedDate":"2022-11-05"},{"lineNumber":36,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":37,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":38,"author":{"gitId":"guanzhou03"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":39,"author":{"gitId":"guanzhou03"},"content":"    public void parse_invalidArgs_fails() {","lastModifiedDate":"2022-10-21"},{"lineNumber":40,"author":{"gitId":"guanzhou03"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-10-21"},{"lineNumber":41,"author":{"gitId":"guanzhou03"},"content":"        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-10-21"},{"lineNumber":42,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":43,"author":{"gitId":"guanzhou03"},"content":"}","lastModifiedDate":"2022-10-21"}],"authorContributionMap":{"JovonLim":1,"guanzhou03":42}},{"path":"src/test/java/seedu/address/logic/parser/HidePatientsCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"guanzhou03"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-21"},{"lineNumber":2,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":3,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-21"},{"lineNumber":4,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-10-21"},{"lineNumber":5,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-10-21"},{"lineNumber":6,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":7,"author":{"gitId":"guanzhou03"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-21"},{"lineNumber":8,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":9,"author":{"gitId":"guanzhou03"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-21"},{"lineNumber":10,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":11,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.logic.commands.HidePatientsCommand;","lastModifiedDate":"2022-10-21"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.person.predicates.NameContainsKeywordsPredicate;","lastModifiedDate":"2022-10-21"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":14,"author":{"gitId":"guanzhou03"},"content":"public class HidePatientsCommandParserTest {","lastModifiedDate":"2022-10-21"},{"lineNumber":15,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":16,"author":{"gitId":"guanzhou03"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d String.format(","lastModifiedDate":"2022-10-21"},{"lineNumber":17,"author":{"gitId":"guanzhou03"},"content":"            MESSAGE_INVALID_COMMAND_FORMAT, HidePatientsCommand.MESSAGE_USAGE);","lastModifiedDate":"2022-10-21"},{"lineNumber":18,"author":{"gitId":"guanzhou03"},"content":"    private HidePatientsCommandParser parser \u003d new HidePatientsCommandParser();","lastModifiedDate":"2022-10-21"},{"lineNumber":19,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":20,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":21,"author":{"gitId":"guanzhou03"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":22,"author":{"gitId":"guanzhou03"},"content":"    public void parse_validArgs_returnHideCommand() {","lastModifiedDate":"2022-10-21"},{"lineNumber":23,"author":{"gitId":"guanzhou03"},"content":"        assertParseSuccess(parser, \"patients n/sam\", new HidePatientsCommand(","lastModifiedDate":"2022-10-25"},{"lineNumber":24,"author":{"gitId":"guanzhou03"},"content":"                new NameContainsKeywordsPredicate(Arrays.asList(\"sam\"))));","lastModifiedDate":"2022-10-21"},{"lineNumber":25,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":26,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-21"},{"lineNumber":27,"author":{"gitId":"guanzhou03"},"content":"    @Test","lastModifiedDate":"2022-10-21"},{"lineNumber":28,"author":{"gitId":"guanzhou03"},"content":"    public void parse_invalidArgs_fails() {","lastModifiedDate":"2022-10-21"},{"lineNumber":29,"author":{"gitId":"guanzhou03"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-10-21"},{"lineNumber":30,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-21"},{"lineNumber":31,"author":{"gitId":"guanzhou03"},"content":"}","lastModifiedDate":"2022-10-21"}],"authorContributionMap":{"guanzhou03":31}},{"path":"src/test/java/seedu/address/logic/parser/MarkCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-04"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-04"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-10-04"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-10-04"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-04"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_APPOINTMENT;","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-04"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.commands.MarkCommand;","lastModifiedDate":"2022-10-04"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"class MarkCommandParserTest {","lastModifiedDate":"2022-10-04"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"    private final MarkCommandParser parser \u003d new MarkCommandParser();","lastModifiedDate":"2022-10-04"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"    private final String parseExceptionInvalidCommandMessage \u003d","lastModifiedDate":"2022-10-04"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkCommand.MESSAGE_USAGE);","lastModifiedDate":"2022-10-04"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_validArgs1_returnsMarkCommand() {","lastModifiedDate":"2022-10-04"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"        assertParseSuccess(parser, \"1\", new MarkCommand(INDEX_FIRST_APPOINTMENT));","lastModifiedDate":"2022-10-18"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_validArgs2_returnsMarkCommand() {","lastModifiedDate":"2022-10-04"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"        assertParseSuccess(parser, \"  3   \", new MarkCommand(INDEX_THIRD_APPOINTMENT));","lastModifiedDate":"2022-10-18"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":28,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_noArgs_throwsParseException() {","lastModifiedDate":"2022-10-04"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"        assertParseFailure(parser, \"\", parseExceptionInvalidCommandMessage);","lastModifiedDate":"2022-10-04"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2022-10-04"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"        assertParseFailure(parser, \"a\", parseExceptionInvalidCommandMessage);","lastModifiedDate":"2022-10-04"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":40,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_tooManyArgs_throwsParseException() {","lastModifiedDate":"2022-10-04"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"        assertParseFailure(parser, \"1 2\", parseExceptionInvalidCommandMessage);","lastModifiedDate":"2022-10-18"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-04"}],"authorContributionMap":{"NicholasTYD":43}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2017-06-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-05-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-05-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-05-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-05-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-05-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-05-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-05-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-05-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2017-05-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2017-05-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2017-05-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";","lastModifiedDate":"2017-05-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":34,"author":{"gitId":"pwjj2000"},"content":"    private static final String VALID_TAG_1 \u003d \"ear\";","lastModifiedDate":"2022-10-21"},{"lineNumber":35,"author":{"gitId":"pwjj2000"},"content":"    private static final String VALID_TAG_2 \u003d \"nose\";","lastModifiedDate":"2022-10-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2017-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2017-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2017-05-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2017-05-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));","lastModifiedDate":"2019-03-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));","lastModifiedDate":"2017-05-30"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-22"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2017-05-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-30"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));","lastModifiedDate":"2019-03-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":163,"author":{"gitId":"pwjj2000"},"content":"        Tag expectedTag \u003d Tag.convertToTag(VALID_TAG_1);","lastModifiedDate":"2022-10-21"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));","lastModifiedDate":"2017-05-30"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":170,"author":{"gitId":"pwjj2000"},"content":"        Tag expectedTag \u003d Tag.convertToTag(VALID_TAG_1);","lastModifiedDate":"2022-10-21"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));","lastModifiedDate":"2019-03-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());","lastModifiedDate":"2017-05-22"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));","lastModifiedDate":"2017-05-22"},{"lineNumber":192,"author":{"gitId":"pwjj2000"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(Tag.convertToTag(VALID_TAG_1),","lastModifiedDate":"2022-10-21"},{"lineNumber":193,"author":{"gitId":"pwjj2000"},"content":"                Tag.convertToTag(VALID_TAG_2)));","lastModifiedDate":"2022-10-21"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);","lastModifiedDate":"2017-05-22"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":197,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"-":191,"pwjj2000":6}},{"path":"src/test/java/seedu/address/logic/parser/UnmarkCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-04"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-04"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-10-04"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-10-04"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-04"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_APPOINTMENT;","lastModifiedDate":"2022-10-18"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-04"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.commands.UnmarkCommand;","lastModifiedDate":"2022-10-04"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"class UnmarkCommandParserTest {","lastModifiedDate":"2022-10-04"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"    private final UnmarkCommandParser parser \u003d new UnmarkCommandParser();","lastModifiedDate":"2022-10-04"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"    private final String parseExceptionInvalidCommandMessage \u003d","lastModifiedDate":"2022-10-04"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnmarkCommand.MESSAGE_USAGE);","lastModifiedDate":"2022-10-04"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_validArgs1_returnsMarkCommand() {","lastModifiedDate":"2022-10-04"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"        assertParseSuccess(parser, \"1\", new UnmarkCommand(INDEX_FIRST_APPOINTMENT));","lastModifiedDate":"2022-10-18"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_validArgs2_returnsMarkCommand() {","lastModifiedDate":"2022-10-04"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"        assertParseSuccess(parser, \"  3 \", new UnmarkCommand(INDEX_THIRD_APPOINTMENT));","lastModifiedDate":"2022-10-18"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":28,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_noArgs_throwsParseException() {","lastModifiedDate":"2022-10-04"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"        assertParseFailure(parser, \"\", parseExceptionInvalidCommandMessage);","lastModifiedDate":"2022-10-04"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2022-10-04"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"        assertParseFailure(parser, \"a\", parseExceptionInvalidCommandMessage);","lastModifiedDate":"2022-10-04"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_tooManyArgs_throwsParseException() {","lastModifiedDate":"2022-10-04"},{"lineNumber":40,"author":{"gitId":"NicholasTYD"},"content":"        assertParseFailure(parser, \"1 2\", parseExceptionInvalidCommandMessage);","lastModifiedDate":"2022-10-18"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-04"}],"authorContributionMap":{"NicholasTYD":42}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-12-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":7,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_EAR;","lastModifiedDate":"2022-10-21"},{"lineNumber":8,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.model.Model.COMPARATOR_GROUP_MARK_APPOINTMENTS;","lastModifiedDate":"2022-10-25"},{"lineNumber":9,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.model.Model.COMPARATOR_GROUP_PATIENTS;","lastModifiedDate":"2022-10-24"},{"lineNumber":10,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.model.Model.COMPARATOR_GROUP_PATIENT_APPOINTMENTS;","lastModifiedDate":"2022-10-24"},{"lineNumber":11,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.model.Model.COMPARATOR_GROUP_TAG_APPOINTMENTS;","lastModifiedDate":"2022-10-24"},{"lineNumber":12,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.model.Model.COMPARATOR_UNGROUP_APPOINTMENTS;","lastModifiedDate":"2022-10-24"},{"lineNumber":13,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.model.Model.COMPARATOR_UNGROUP_PATIENTS;","lastModifiedDate":"2022-10-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":15,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.testutil.TypicalAppointments.getDefaultAppointments;","lastModifiedDate":"2022-10-24"},{"lineNumber":16,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.testutil.TypicalAppointments.getGroupedAppointmentsByMark;","lastModifiedDate":"2022-10-25"},{"lineNumber":17,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.testutil.TypicalAppointments.getGroupedAppointmentsByPatient;","lastModifiedDate":"2022-10-24"},{"lineNumber":18,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.testutil.TypicalAppointments.getGroupedAppointmentsByTag;","lastModifiedDate":"2022-10-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":20,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.testutil.TypicalPersons.getGroupedPersons;","lastModifiedDate":"2022-10-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":22,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;","lastModifiedDate":"2022-10-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":24,"author":{"gitId":"pwjj2000"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2018-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"public class AddressBookTest {","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2016-12-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2016-12-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);","lastModifiedDate":"2016-12-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);","lastModifiedDate":"2016-12-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"pwjj2000"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_EAR)","lastModifiedDate":"2022-10-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"pwjj2000"},"content":"        List\u003cAppointment\u003e newAppointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-06"},{"lineNumber":67,"author":{"gitId":"pwjj2000"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newAppointments);","lastModifiedDate":"2022-10-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2019-03-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"pwjj2000"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_EAR)","lastModifiedDate":"2022-10-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-06"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));","lastModifiedDate":"2018-08-06"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints.","lastModifiedDate":"2018-03-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {","lastModifiedDate":"2016-12-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();","lastModifiedDate":"2018-01-10"},{"lineNumber":106,"author":{"gitId":"pwjj2000"},"content":"        private final ObservableList\u003cAppointment\u003e appointments \u003d FXCollections.observableArrayList();","lastModifiedDate":"2022-10-06"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":108,"author":{"gitId":"pwjj2000"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003cAppointment\u003e appointments) {","lastModifiedDate":"2022-10-06"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);","lastModifiedDate":"2016-12-24"},{"lineNumber":110,"author":{"gitId":"pwjj2000"},"content":"            this.appointments.setAll(appointments);","lastModifiedDate":"2022-10-06"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            return persons;","lastModifiedDate":"2016-12-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":117,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":118,"author":{"gitId":"pwjj2000"},"content":"        @Override","lastModifiedDate":"2022-10-06"},{"lineNumber":119,"author":{"gitId":"pwjj2000"},"content":"        public ObservableList\u003cAppointment\u003e getAppointmentList() {","lastModifiedDate":"2022-10-06"},{"lineNumber":120,"author":{"gitId":"pwjj2000"},"content":"            return appointments;","lastModifiedDate":"2022-10-06"},{"lineNumber":121,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":124,"author":{"gitId":"WingKei67"},"content":"    @Test","lastModifiedDate":"2022-10-24"},{"lineNumber":125,"author":{"gitId":"WingKei67"},"content":"    public void patientCompares() {","lastModifiedDate":"2022-10-24"},{"lineNumber":126,"author":{"gitId":"WingKei67"},"content":"        addressBook.setPersons(getTypicalPersons());","lastModifiedDate":"2022-10-24"},{"lineNumber":127,"author":{"gitId":"WingKei67"},"content":"        List\u003cPerson\u003e ungrouped \u003d getTypicalPersons();","lastModifiedDate":"2022-10-24"},{"lineNumber":128,"author":{"gitId":"WingKei67"},"content":"        List\u003cPerson\u003e grouped \u003d getGroupedPersons();","lastModifiedDate":"2022-10-24"},{"lineNumber":129,"author":{"gitId":"WingKei67"},"content":"        assertEquals(addressBook.getPersonList(), ungrouped);","lastModifiedDate":"2022-10-24"},{"lineNumber":130,"author":{"gitId":"WingKei67"},"content":"        addressBook.sortPersons(COMPARATOR_GROUP_PATIENTS);","lastModifiedDate":"2022-10-24"},{"lineNumber":131,"author":{"gitId":"WingKei67"},"content":"        assertEquals(addressBook.getPersonList(), grouped);","lastModifiedDate":"2022-10-24"},{"lineNumber":132,"author":{"gitId":"WingKei67"},"content":"        addressBook.sortPersons(COMPARATOR_UNGROUP_PATIENTS);","lastModifiedDate":"2022-10-24"},{"lineNumber":133,"author":{"gitId":"WingKei67"},"content":"        assertEquals(addressBook.getPersonList(), ungrouped);","lastModifiedDate":"2022-10-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":136,"author":{"gitId":"WingKei67"},"content":"    @Test","lastModifiedDate":"2022-10-24"},{"lineNumber":137,"author":{"gitId":"WingKei67"},"content":"    public void appointmentCompared() {","lastModifiedDate":"2022-10-24"},{"lineNumber":138,"author":{"gitId":"WingKei67"},"content":"        addressBook.setAppointments(getDefaultAppointments());","lastModifiedDate":"2022-10-24"},{"lineNumber":139,"author":{"gitId":"WingKei67"},"content":"        List\u003cAppointment\u003e ungrouped \u003d getDefaultAppointments();","lastModifiedDate":"2022-10-24"},{"lineNumber":140,"author":{"gitId":"WingKei67"},"content":"        assertEquals(addressBook.getAppointmentList(), ungrouped);","lastModifiedDate":"2022-10-24"},{"lineNumber":141,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":142,"author":{"gitId":"WingKei67"},"content":"        addressBook.sortAppointments(COMPARATOR_GROUP_TAG_APPOINTMENTS);","lastModifiedDate":"2022-10-24"},{"lineNumber":143,"author":{"gitId":"WingKei67"},"content":"        List\u003cAppointment\u003e groupedByTag \u003d getGroupedAppointmentsByTag();","lastModifiedDate":"2022-10-25"},{"lineNumber":144,"author":{"gitId":"WingKei67"},"content":"        assertEquals(addressBook.getAppointmentList(), groupedByTag);","lastModifiedDate":"2022-10-24"},{"lineNumber":145,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":146,"author":{"gitId":"WingKei67"},"content":"        addressBook.sortAppointments(COMPARATOR_GROUP_PATIENT_APPOINTMENTS);","lastModifiedDate":"2022-10-24"},{"lineNumber":147,"author":{"gitId":"WingKei67"},"content":"        List\u003cAppointment\u003e groupedByPatient \u003d getGroupedAppointmentsByPatient();","lastModifiedDate":"2022-10-25"},{"lineNumber":148,"author":{"gitId":"WingKei67"},"content":"        assertEquals(addressBook.getAppointmentList(), groupedByPatient);","lastModifiedDate":"2022-10-24"},{"lineNumber":149,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":150,"author":{"gitId":"WingKei67"},"content":"        addressBook.sortAppointments(COMPARATOR_GROUP_MARK_APPOINTMENTS);","lastModifiedDate":"2022-10-25"},{"lineNumber":151,"author":{"gitId":"WingKei67"},"content":"        List\u003cAppointment\u003e groupedByMark \u003d getGroupedAppointmentsByMark();","lastModifiedDate":"2022-10-25"},{"lineNumber":152,"author":{"gitId":"WingKei67"},"content":"        assertEquals(addressBook.getAppointmentList(), groupedByMark);","lastModifiedDate":"2022-10-25"},{"lineNumber":153,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":154,"author":{"gitId":"WingKei67"},"content":"        addressBook.sortAppointments(COMPARATOR_UNGROUP_APPOINTMENTS);","lastModifiedDate":"2022-10-24"},{"lineNumber":155,"author":{"gitId":"WingKei67"},"content":"        assertEquals(addressBook.getAppointmentList(), ungrouped);","lastModifiedDate":"2022-10-24"},{"lineNumber":156,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":157,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"WingKei67":43,"-":99,"pwjj2000":15}},{"path":"src/test/java/seedu/address/model/KeyTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"WingKei67"},"content":"package seedu.address.model;","lastModifiedDate":"2022-10-24"},{"lineNumber":2,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":3,"author":{"gitId":"WingKei67"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-10-24"},{"lineNumber":4,"author":{"gitId":"WingKei67"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-11-03"},{"lineNumber":5,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-24"},{"lineNumber":6,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":7,"author":{"gitId":"WingKei67"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-24"},{"lineNumber":8,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":9,"author":{"gitId":"WingKei67"},"content":"public class KeyTest {","lastModifiedDate":"2022-10-24"},{"lineNumber":10,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":11,"author":{"gitId":"WingKei67"},"content":"    @Test","lastModifiedDate":"2022-10-24"},{"lineNumber":12,"author":{"gitId":"WingKei67"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2022-10-24"},{"lineNumber":13,"author":{"gitId":"WingKei67"},"content":"        assertThrows(NullPointerException.class, () -\u003e Key.convertToKey(null));","lastModifiedDate":"2022-10-24"},{"lineNumber":14,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":15,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":16,"author":{"gitId":"WingKei67"},"content":"    @Test","lastModifiedDate":"2022-10-24"},{"lineNumber":17,"author":{"gitId":"WingKei67"},"content":"    public void constructor_invalidKeyName_throwsIllegalArgumentException() {","lastModifiedDate":"2022-10-24"},{"lineNumber":18,"author":{"gitId":"WingKei67"},"content":"        String invalidKeyName \u003d \"\";","lastModifiedDate":"2022-10-24"},{"lineNumber":19,"author":{"gitId":"WingKei67"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Key.convertToKey(invalidKeyName));","lastModifiedDate":"2022-10-24"},{"lineNumber":20,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":21,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":22,"author":{"gitId":"WingKei67"},"content":"    @Test","lastModifiedDate":"2022-10-24"},{"lineNumber":23,"author":{"gitId":"WingKei67"},"content":"    public void isValidKeyName() {","lastModifiedDate":"2022-10-24"},{"lineNumber":24,"author":{"gitId":"WingKei67"},"content":"        // null tag name","lastModifiedDate":"2022-10-24"},{"lineNumber":25,"author":{"gitId":"WingKei67"},"content":"        assertThrows(NullPointerException.class, () -\u003e Key.isValidKey(null));","lastModifiedDate":"2022-10-24"},{"lineNumber":26,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":27,"author":{"gitId":"WingKei67"},"content":"        // valid tag names","lastModifiedDate":"2022-11-03"},{"lineNumber":28,"author":{"gitId":"WingKei67"},"content":"        assertTrue(Key.isValidKey(\"patIent\"));","lastModifiedDate":"2022-11-03"},{"lineNumber":29,"author":{"gitId":"WingKei67"},"content":"        assertTrue(Key.isValidKey(\"marK\"));","lastModifiedDate":"2022-11-03"},{"lineNumber":30,"author":{"gitId":"WingKei67"},"content":"        assertTrue(Key.isValidKey(\"TaG\"));","lastModifiedDate":"2022-11-03"},{"lineNumber":31,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-11-03"},{"lineNumber":32,"author":{"gitId":"WingKei67"},"content":"        // shortcuts","lastModifiedDate":"2022-11-03"},{"lineNumber":33,"author":{"gitId":"WingKei67"},"content":"        assertTrue(Key.isValidKey(\"p\"));","lastModifiedDate":"2022-11-03"},{"lineNumber":34,"author":{"gitId":"WingKei67"},"content":"        assertTrue(Key.isValidKey(\"m\"));","lastModifiedDate":"2022-11-03"},{"lineNumber":35,"author":{"gitId":"WingKei67"},"content":"        assertTrue(Key.isValidKey(\"t\"));","lastModifiedDate":"2022-11-03"},{"lineNumber":36,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":37,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":38,"author":{"gitId":"WingKei67"},"content":"    @Test","lastModifiedDate":"2022-10-24"},{"lineNumber":39,"author":{"gitId":"WingKei67"},"content":"    public void isKeyNameCorrect() {","lastModifiedDate":"2022-10-24"},{"lineNumber":40,"author":{"gitId":"WingKei67"},"content":"        assertEquals(Key.TAG.toString(), \"Tag\");","lastModifiedDate":"2022-10-24"},{"lineNumber":41,"author":{"gitId":"WingKei67"},"content":"        assertEquals(Key.PATIENT.toString(), \"Patient\");","lastModifiedDate":"2022-10-24"},{"lineNumber":42,"author":{"gitId":"WingKei67"},"content":"        assertEquals(Key.MARK.toString(), \"Mark\");","lastModifiedDate":"2022-10-25"},{"lineNumber":43,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":44,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":45,"author":{"gitId":"WingKei67"},"content":"    @Test","lastModifiedDate":"2022-10-24"},{"lineNumber":46,"author":{"gitId":"WingKei67"},"content":"    public void isKeyConversionCorrect() {","lastModifiedDate":"2022-10-24"},{"lineNumber":47,"author":{"gitId":"WingKei67"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Key.convertToKey(\"Date\"));","lastModifiedDate":"2022-10-24"},{"lineNumber":48,"author":{"gitId":"WingKei67"},"content":"        assertEquals(Key.convertToKey(\"Tag\"), Key.TAG);","lastModifiedDate":"2022-10-24"},{"lineNumber":49,"author":{"gitId":"WingKei67"},"content":"        assertEquals(Key.convertToKey(\"p\"), Key.PATIENT);","lastModifiedDate":"2022-10-25"},{"lineNumber":50,"author":{"gitId":"WingKei67"},"content":"        assertEquals(Key.convertToKey(\"m\"), Key.MARK);","lastModifiedDate":"2022-10-25"},{"lineNumber":51,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":52,"author":{"gitId":"WingKei67"},"content":"}","lastModifiedDate":"2022-10-24"}],"authorContributionMap":{"WingKei67":52}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2017-05-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2017-07-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.predicates.NameContainsKeywordsPredicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;","lastModifiedDate":"2017-05-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"WingKei67"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4,","lastModifiedDate":"2022-10-26"},{"lineNumber":42,"author":{"gitId":"WingKei67"},"content":"                getClass().getResource(\"/view/LightMode.css\").toExternalForm()));","lastModifiedDate":"2022-10-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2018-12-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"WingKei67"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4,","lastModifiedDate":"2022-10-26"},{"lineNumber":60,"author":{"gitId":"WingKei67"},"content":"                getClass().getResource(\"/view/LightMode.css\").toExternalForm());","lastModifiedDate":"2022-10-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":98,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":99,"author":{"gitId":"pwjj2000"},"content":"    public void getFilteredAppointmentList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2022-10-08"},{"lineNumber":100,"author":{"gitId":"pwjj2000"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredAppointmentList().remove(0));","lastModifiedDate":"2022-10-08"},{"lineNumber":101,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":102,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();","lastModifiedDate":"2017-07-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2018-08-06"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2017-05-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-19"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2017-06-12"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2018-08-09"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));","lastModifiedDate":"2018-11-27"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":139,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"NicholasTYD":1,"WingKei67":4,"-":129,"pwjj2000":5}},{"path":"src/test/java/seedu/address/model/person/AddressTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2017-01-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class AddressTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Address(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"WingKei67"},"content":"    /*","lastModifiedDate":"2022-10-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidAddress \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"WingKei67"},"content":"    */","lastModifiedDate":"2022-10-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidAddress() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null address","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // valid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"-\")); // one character","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"WingKei67":2,"-":34}},{"path":"src/test/java/seedu/address/model/person/AppointmentTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pwjj2000"},"content":"package seedu.address.model.person;","lastModifiedDate":"2022-10-08"},{"lineNumber":2,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":3,"author":{"gitId":"WingKei67"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-10-22"},{"lineNumber":4,"author":{"gitId":"WingKei67"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-22"},{"lineNumber":5,"author":{"gitId":"WingKei67"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-22"},{"lineNumber":6,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-08"},{"lineNumber":7,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.testutil.TypicalAppointments.APPOINTMENT_BENSON;","lastModifiedDate":"2022-10-22"},{"lineNumber":8,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.testutil.TypicalAppointments.APPOINTMENT_CARL;","lastModifiedDate":"2022-10-22"},{"lineNumber":9,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.testutil.TypicalAppointments.APPOINTMENT_DANIEL;","lastModifiedDate":"2022-10-24"},{"lineNumber":10,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.testutil.TypicalAppointments.APPOINTMENT_ELLE;","lastModifiedDate":"2022-10-24"},{"lineNumber":11,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.testutil.TypicalAppointments.APPOINTMENT_GEORGE;","lastModifiedDate":"2022-10-24"},{"lineNumber":12,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.testutil.TypicalAppointments.SECOND_APPOINTMENT_CARL;","lastModifiedDate":"2022-10-22"},{"lineNumber":13,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.testutil.TypicalAppointments.SECOND_APPOINTMENT_GEORGE;","lastModifiedDate":"2022-10-24"},{"lineNumber":14,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2022-10-25"},{"lineNumber":15,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;","lastModifiedDate":"2022-10-25"},{"lineNumber":16,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;","lastModifiedDate":"2022-10-25"},{"lineNumber":17,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":18,"author":{"gitId":"pwjj2000"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-08"},{"lineNumber":19,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":20,"author":{"gitId":"WingKei67"},"content":"import seedu.address.model.Key;","lastModifiedDate":"2022-10-24"},{"lineNumber":21,"author":{"gitId":"WingKei67"},"content":"import seedu.address.testutil.AppointmentBuilder;","lastModifiedDate":"2022-10-25"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":23,"author":{"gitId":"pwjj2000"},"content":"public class AppointmentTest {","lastModifiedDate":"2022-10-08"},{"lineNumber":24,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":25,"author":{"gitId":"pwjj2000"},"content":"    public void constructor_nullReason_throwsNullPointerException() {","lastModifiedDate":"2022-10-08"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Appointment(null, \"2022-09-09 16:00\", \"\", false));","lastModifiedDate":"2022-10-14"},{"lineNumber":27,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":28,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":29,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":30,"author":{"gitId":"pwjj2000"},"content":"    public void constructor_nullDateTime_throwsNullPointerException() {","lastModifiedDate":"2022-10-08"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Appointment(\"nose pain\", (String) null, \"\", false));","lastModifiedDate":"2022-10-14"},{"lineNumber":32,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":33,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":34,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":35,"author":{"gitId":"pwjj2000"},"content":"    public void isValidAppointment() {","lastModifiedDate":"2022-10-08"},{"lineNumber":36,"author":{"gitId":"pwjj2000"},"content":"        // invalid appointments","lastModifiedDate":"2022-10-08"},{"lineNumber":37,"author":{"gitId":"pwjj2000"},"content":"        assertFalse(Appointment.isValidReason(\"\")); // empty string for reason","lastModifiedDate":"2022-10-08"},{"lineNumber":38,"author":{"gitId":"pwjj2000"},"content":"        assertFalse(Appointment.isValidDateTime(\"\")); // empty string for date and time","lastModifiedDate":"2022-10-08"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"        assertFalse(Appointment.isValidTimePeriod(\"s\")); // invalid string for period","lastModifiedDate":"2022-10-14"},{"lineNumber":40,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":41,"author":{"gitId":"pwjj2000"},"content":"        // valid appointments","lastModifiedDate":"2022-10-08"},{"lineNumber":42,"author":{"gitId":"pwjj2000"},"content":"        assertTrue(Appointment.isValidReason(\"ear pain\"));","lastModifiedDate":"2022-10-08"},{"lineNumber":43,"author":{"gitId":"pwjj2000"},"content":"        assertTrue(Appointment.isValidDateTime(\"2022-09-08 00:00\")); // follows date/time format","lastModifiedDate":"2022-10-08"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"        assertTrue(Appointment.isValidTimePeriod(\"\")); // empty period allowed;","lastModifiedDate":"2022-10-14"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"        assertTrue(Appointment.isValidTimePeriod(\"2D\")); // a single value is sufficient","lastModifiedDate":"2022-10-14"},{"lineNumber":46,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":47,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":48,"author":{"gitId":"WingKei67"},"content":"    @Test","lastModifiedDate":"2022-10-22"},{"lineNumber":49,"author":{"gitId":"WingKei67"},"content":"    public void isYearCompareToCorrect() {","lastModifiedDate":"2022-10-24"},{"lineNumber":50,"author":{"gitId":"WingKei67"},"content":"        APPOINTMENT_BENSON.setPatient(BENSON);","lastModifiedDate":"2022-10-25"},{"lineNumber":51,"author":{"gitId":"WingKei67"},"content":"        APPOINTMENT_CARL.setPatient(CARL);","lastModifiedDate":"2022-10-25"},{"lineNumber":52,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":53,"author":{"gitId":"WingKei67"},"content":"        // 2010-12-31 23:45 \u003c 2019-12-10 16:30","lastModifiedDate":"2022-10-22"},{"lineNumber":54,"author":{"gitId":"WingKei67"},"content":"        assertEquals(APPOINTMENT_CARL.compareTo(APPOINTMENT_BENSON), -1);","lastModifiedDate":"2022-10-22"},{"lineNumber":55,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":56,"author":{"gitId":"WingKei67"},"content":"        // 2019-12-10 16:30 \u003d 2019-12-10 16:30","lastModifiedDate":"2022-10-22"},{"lineNumber":57,"author":{"gitId":"WingKei67"},"content":"        // BENSON \u003c CARL","lastModifiedDate":"2022-10-25"},{"lineNumber":58,"author":{"gitId":"WingKei67"},"content":"        APPOINTMENT_BENSON.setPatient(BENSON);","lastModifiedDate":"2022-10-25"},{"lineNumber":59,"author":{"gitId":"WingKei67"},"content":"        SECOND_APPOINTMENT_CARL.setPatient(CARL);","lastModifiedDate":"2022-10-25"},{"lineNumber":60,"author":{"gitId":"WingKei67"},"content":"        assertEquals(APPOINTMENT_BENSON.compareTo(SECOND_APPOINTMENT_CARL), -1);","lastModifiedDate":"2022-10-25"},{"lineNumber":61,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":62,"author":{"gitId":"WingKei67"},"content":"        // 2019-12-10 16:30 \u003e 2010-12-31 23:45","lastModifiedDate":"2022-10-22"},{"lineNumber":63,"author":{"gitId":"WingKei67"},"content":"        assertEquals(APPOINTMENT_BENSON.compareTo(APPOINTMENT_CARL), 1);","lastModifiedDate":"2022-10-22"},{"lineNumber":64,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-22"},{"lineNumber":65,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":66,"author":{"gitId":"WingKei67"},"content":"    @Test","lastModifiedDate":"2022-10-22"},{"lineNumber":67,"author":{"gitId":"WingKei67"},"content":"    public void isSecondCompareToCorrect() {","lastModifiedDate":"2022-10-24"},{"lineNumber":68,"author":{"gitId":"WingKei67"},"content":"        APPOINTMENT_BENSON.setPatient(BENSON);","lastModifiedDate":"2022-10-25"},{"lineNumber":69,"author":{"gitId":"WingKei67"},"content":"        APPOINTMENT_CARL.setPatient(CARL);","lastModifiedDate":"2022-10-25"},{"lineNumber":70,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":71,"author":{"gitId":"WingKei67"},"content":"        // 2010-12-31 23:45 \u003c 2019-12-10 16:30","lastModifiedDate":"2022-10-22"},{"lineNumber":72,"author":{"gitId":"WingKei67"},"content":"        assertEquals(APPOINTMENT_CARL.compareTo(APPOINTMENT_BENSON), -1);","lastModifiedDate":"2022-10-22"},{"lineNumber":73,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":74,"author":{"gitId":"WingKei67"},"content":"        // 2019-12-10 16:30 \u003d 2019-12-10 16:30","lastModifiedDate":"2022-10-22"},{"lineNumber":75,"author":{"gitId":"WingKei67"},"content":"        // CARL \u003e BENSON","lastModifiedDate":"2022-10-25"},{"lineNumber":76,"author":{"gitId":"WingKei67"},"content":"        APPOINTMENT_BENSON.setPatient(CARL);","lastModifiedDate":"2022-10-25"},{"lineNumber":77,"author":{"gitId":"WingKei67"},"content":"        SECOND_APPOINTMENT_CARL.setPatient(BENSON);","lastModifiedDate":"2022-10-25"},{"lineNumber":78,"author":{"gitId":"WingKei67"},"content":"        assertEquals(SECOND_APPOINTMENT_CARL.compareTo(APPOINTMENT_BENSON), -1);","lastModifiedDate":"2022-10-25"},{"lineNumber":79,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":80,"author":{"gitId":"WingKei67"},"content":"        // 2019-12-10 16:30 \u003e 2010-12-31 23:45","lastModifiedDate":"2022-10-22"},{"lineNumber":81,"author":{"gitId":"WingKei67"},"content":"        assertEquals(APPOINTMENT_BENSON.compareTo(APPOINTMENT_CARL), 1);","lastModifiedDate":"2022-10-22"},{"lineNumber":82,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":83,"author":{"gitId":"WingKei67"},"content":"        // 2010-12-31 23:45 \u003c 2010-12-31 23:46","lastModifiedDate":"2022-10-22"},{"lineNumber":84,"author":{"gitId":"WingKei67"},"content":"        assertEquals(APPOINTMENT_CARL.compareTo(APPOINTMENT_DANIEL), -1);","lastModifiedDate":"2022-10-24"},{"lineNumber":85,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":86,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":87,"author":{"gitId":"WingKei67"},"content":"    @Test","lastModifiedDate":"2022-10-24"},{"lineNumber":88,"author":{"gitId":"WingKei67"},"content":"    public void isCompareToCorrect() {","lastModifiedDate":"2022-10-24"},{"lineNumber":89,"author":{"gitId":"WingKei67"},"content":"        APPOINTMENT_BENSON.setPatient(BENSON);","lastModifiedDate":"2022-10-25"},{"lineNumber":90,"author":{"gitId":"WingKei67"},"content":"        APPOINTMENT_CARL.setPatient(CARL);","lastModifiedDate":"2022-10-25"},{"lineNumber":91,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":92,"author":{"gitId":"WingKei67"},"content":"        // APPOINTMENT_CARL \u003c APPOINTMENT_BENSON","lastModifiedDate":"2022-10-24"},{"lineNumber":93,"author":{"gitId":"WingKei67"},"content":"        assertEquals(APPOINTMENT_CARL.compareTo(APPOINTMENT_BENSON), -1);","lastModifiedDate":"2022-10-24"},{"lineNumber":94,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":95,"author":{"gitId":"WingKei67"},"content":"        // APPOINTMENT_BENSON \u003d\u003d APPOINTMENT_BENSON","lastModifiedDate":"2022-10-24"},{"lineNumber":96,"author":{"gitId":"WingKei67"},"content":"        APPOINTMENT_BENSON.setPatient(BENSON);","lastModifiedDate":"2022-10-25"},{"lineNumber":97,"author":{"gitId":"WingKei67"},"content":"        assertEquals(APPOINTMENT_BENSON.compareTo(APPOINTMENT_BENSON), 0);","lastModifiedDate":"2022-10-24"},{"lineNumber":98,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":99,"author":{"gitId":"WingKei67"},"content":"        // APPOINTMENT_BENSON \u003e APPOINTMENT_DAVID","lastModifiedDate":"2022-10-24"},{"lineNumber":100,"author":{"gitId":"WingKei67"},"content":"        assertEquals(APPOINTMENT_BENSON.compareTo(APPOINTMENT_DANIEL), 1);","lastModifiedDate":"2022-10-24"},{"lineNumber":101,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":102,"author":{"gitId":"WingKei67"},"content":"        Appointment appointmentWithLowerPatient \u003d","lastModifiedDate":"2022-10-25"},{"lineNumber":103,"author":{"gitId":"WingKei67"},"content":"                new AppointmentBuilder(APPOINTMENT_BENSON).withPatient(BENSON).build();","lastModifiedDate":"2022-10-25"},{"lineNumber":104,"author":{"gitId":"WingKei67"},"content":"        Appointment appointmentWithHigherPatient \u003d","lastModifiedDate":"2022-10-25"},{"lineNumber":105,"author":{"gitId":"WingKei67"},"content":"                new AppointmentBuilder(SECOND_APPOINTMENT_CARL).withPatient(CARL).build();","lastModifiedDate":"2022-10-25"},{"lineNumber":106,"author":{"gitId":"WingKei67"},"content":"        assertEquals(appointmentWithLowerPatient.compareTo(appointmentWithHigherPatient), -1);","lastModifiedDate":"2022-10-25"},{"lineNumber":107,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":108,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":109,"author":{"gitId":"WingKei67"},"content":"    @Test","lastModifiedDate":"2022-10-24"},{"lineNumber":110,"author":{"gitId":"WingKei67"},"content":"    public void isGetGroupNumberCorrect() {","lastModifiedDate":"2022-10-24"},{"lineNumber":111,"author":{"gitId":"WingKei67"},"content":"        assertEquals(SECOND_APPOINTMENT_GEORGE.getGroupNumber(), 1);","lastModifiedDate":"2022-10-24"},{"lineNumber":112,"author":{"gitId":"WingKei67"},"content":"        assertEquals(APPOINTMENT_GEORGE.getGroupNumber(), 4);","lastModifiedDate":"2022-10-24"},{"lineNumber":113,"author":{"gitId":"WingKei67"},"content":"        assertEquals(APPOINTMENT_DANIEL.getGroupNumber(), 0);","lastModifiedDate":"2022-10-24"},{"lineNumber":114,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":115,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":116,"author":{"gitId":"WingKei67"},"content":"    @Test","lastModifiedDate":"2022-10-24"},{"lineNumber":117,"author":{"gitId":"WingKei67"},"content":"    public void isGroupCompareToCorrect() {","lastModifiedDate":"2022-10-24"},{"lineNumber":118,"author":{"gitId":"WingKei67"},"content":"        // Same tag group","lastModifiedDate":"2022-10-24"},{"lineNumber":119,"author":{"gitId":"WingKei67"},"content":"        assertEquals(APPOINTMENT_ELLE.groupCompareTo(APPOINTMENT_GEORGE, Key.TAG), -1);","lastModifiedDate":"2022-10-24"},{"lineNumber":120,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":121,"author":{"gitId":"WingKei67"},"content":"        // Single tag vs no tag","lastModifiedDate":"2022-10-24"},{"lineNumber":122,"author":{"gitId":"WingKei67"},"content":"        assertEquals(APPOINTMENT_DANIEL.groupCompareTo(SECOND_APPOINTMENT_GEORGE, Key.TAG), -9);","lastModifiedDate":"2022-10-24"},{"lineNumber":123,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":124,"author":{"gitId":"WingKei67"},"content":"        // Single tag vs single tag","lastModifiedDate":"2022-10-24"},{"lineNumber":125,"author":{"gitId":"WingKei67"},"content":"        SECOND_APPOINTMENT_GEORGE.setPatient(GEORGE);","lastModifiedDate":"2022-10-25"},{"lineNumber":126,"author":{"gitId":"WingKei67"},"content":"        assertEquals(SECOND_APPOINTMENT_GEORGE.groupCompareTo(SECOND_APPOINTMENT_GEORGE, Key.TAG), 0);","lastModifiedDate":"2022-10-24"},{"lineNumber":127,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":128,"author":{"gitId":"WingKei67"},"content":"        // Single tag vs double tag","lastModifiedDate":"2022-10-24"},{"lineNumber":129,"author":{"gitId":"WingKei67"},"content":"        assertEquals(SECOND_APPOINTMENT_GEORGE.groupCompareTo(APPOINTMENT_GEORGE, Key.TAG), -31);","lastModifiedDate":"2022-10-24"},{"lineNumber":130,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":131,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-22"},{"lineNumber":132,"author":{"gitId":"pwjj2000"},"content":"}","lastModifiedDate":"2022-10-08"}],"authorContributionMap":{"WingKei67":100,"JovonLim":6,"pwjj2000":26}},{"path":"src/test/java/seedu/address/model/person/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2017-01-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"WingKei67"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-10-22"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class NameTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Name(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));","lastModifiedDate":"2019-03-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void isValidName() {","lastModifiedDate":"2017-01-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // null name","lastModifiedDate":"2017-12-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // valid name","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":41,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":42,"author":{"gitId":"WingKei67"},"content":"    @Test","lastModifiedDate":"2022-10-22"},{"lineNumber":43,"author":{"gitId":"WingKei67"},"content":"    public void isCompareToCorrect() {","lastModifiedDate":"2022-10-24"},{"lineNumber":44,"author":{"gitId":"WingKei67"},"content":"        // ALICE \u003c BOB","lastModifiedDate":"2022-10-22"},{"lineNumber":45,"author":{"gitId":"WingKei67"},"content":"        assertEquals(new Name(\"Alice\").compareTo(new Name(\"Elle\")), -4);","lastModifiedDate":"2022-10-24"},{"lineNumber":46,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":47,"author":{"gitId":"WingKei67"},"content":"        // ALICE \u003d\u003d ALICE","lastModifiedDate":"2022-10-22"},{"lineNumber":48,"author":{"gitId":"WingKei67"},"content":"        assertEquals(new Name(\"Alice\").compareTo(new Name(\"Alice\")), 0);","lastModifiedDate":"2022-10-22"},{"lineNumber":49,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":50,"author":{"gitId":"WingKei67"},"content":"        // BOB \u003e ALICE","lastModifiedDate":"2022-10-22"},{"lineNumber":51,"author":{"gitId":"WingKei67"},"content":"        assertEquals(new Name(\"Carl\").compareTo(new Name(\"Alice\")), 2);","lastModifiedDate":"2022-10-24"},{"lineNumber":52,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-22"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"WingKei67":13,"-":40}},{"path":"src/test/java/seedu/address/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2018-03-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"WingKei67"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-10-22"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2022-10-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":8,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2022-10-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":11,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2022-10-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":13,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_EAR;","lastModifiedDate":"2022-10-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2018-04-19"},{"lineNumber":16,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2022-10-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;","lastModifiedDate":"2022-10-24"},{"lineNumber":19,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;","lastModifiedDate":"2022-10-22"},{"lineNumber":20,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;","lastModifiedDate":"2022-10-24"},{"lineNumber":21,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;","lastModifiedDate":"2022-10-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-03-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class PersonTest {","lastModifiedDate":"2018-03-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2018-03-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void isSamePerson() {","lastModifiedDate":"2018-04-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"WingKei67"},"content":"        // same name, all other attributes different -\u003e returns false","lastModifiedDate":"2022-10-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2020-12-18"},{"lineNumber":45,"author":{"gitId":"pwjj2000"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_EAR).build();","lastModifiedDate":"2022-10-21"},{"lineNumber":46,"author":{"gitId":"WingKei67"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2022-10-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";","lastModifiedDate":"2020-12-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":60,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":61,"author":{"gitId":"WingKei67"},"content":"        // same name and phone, all other attributes different -\u003e returns true","lastModifiedDate":"2022-10-25"},{"lineNumber":62,"author":{"gitId":"WingKei67"},"content":"        editedBob \u003d new PersonBuilder(BOB).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)","lastModifiedDate":"2022-10-25"},{"lineNumber":63,"author":{"gitId":"WingKei67"},"content":"                .withAddress(VALID_ADDRESS_AMY).build();","lastModifiedDate":"2022-10-25"},{"lineNumber":64,"author":{"gitId":"WingKei67"},"content":"        assertTrue(BOB.isSamePerson(editedBob));","lastModifiedDate":"2022-10-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2018-04-18"},{"lineNumber":102,"author":{"gitId":"pwjj2000"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_EAR).build();","lastModifiedDate":"2022-10-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":105,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":106,"author":{"gitId":"WingKei67"},"content":"    @Test","lastModifiedDate":"2022-10-22"},{"lineNumber":107,"author":{"gitId":"WingKei67"},"content":"    public void isCompareToCorrect() {","lastModifiedDate":"2022-10-24"},{"lineNumber":108,"author":{"gitId":"WingKei67"},"content":"        // ALICE \u003c BOB","lastModifiedDate":"2022-10-22"},{"lineNumber":109,"author":{"gitId":"WingKei67"},"content":"        assertEquals(ALICE.compareTo(BOB), -1);","lastModifiedDate":"2022-10-22"},{"lineNumber":110,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":111,"author":{"gitId":"WingKei67"},"content":"        // ALICE \u003d\u003d ALICE","lastModifiedDate":"2022-10-22"},{"lineNumber":112,"author":{"gitId":"WingKei67"},"content":"        assertEquals(ALICE.compareTo(ALICE), 0);","lastModifiedDate":"2022-10-22"},{"lineNumber":113,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":114,"author":{"gitId":"WingKei67"},"content":"        // BOB \u003e ALICE","lastModifiedDate":"2022-10-22"},{"lineNumber":115,"author":{"gitId":"WingKei67"},"content":"        assertEquals(BOB.compareTo(ALICE), 1);","lastModifiedDate":"2022-10-22"},{"lineNumber":116,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":117,"author":{"gitId":"WingKei67"},"content":"        Person aliceWithLowerPhoneNumber \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2022-10-25"},{"lineNumber":118,"author":{"gitId":"WingKei67"},"content":"        Person aliceWithHigherPhoneNumber \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2022-10-25"},{"lineNumber":119,"author":{"gitId":"WingKei67"},"content":"        assertEquals(aliceWithLowerPhoneNumber.compareTo(aliceWithHigherPhoneNumber), -1);","lastModifiedDate":"2022-10-25"},{"lineNumber":120,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-22"},{"lineNumber":121,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":122,"author":{"gitId":"WingKei67"},"content":"    @Test","lastModifiedDate":"2022-10-22"},{"lineNumber":123,"author":{"gitId":"WingKei67"},"content":"    public void isGetGroupNumberCorrect() {","lastModifiedDate":"2022-10-24"},{"lineNumber":124,"author":{"gitId":"WingKei67"},"content":"        assertEquals(ALICE.getGroupNumber(), 2);","lastModifiedDate":"2022-10-24"},{"lineNumber":125,"author":{"gitId":"WingKei67"},"content":"        assertEquals(CARL.getGroupNumber(), 0);","lastModifiedDate":"2022-10-24"},{"lineNumber":126,"author":{"gitId":"WingKei67"},"content":"        assertEquals(GEORGE.getGroupNumber(), 4);","lastModifiedDate":"2022-10-24"},{"lineNumber":127,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":128,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":129,"author":{"gitId":"WingKei67"},"content":"    @Test","lastModifiedDate":"2022-10-24"},{"lineNumber":130,"author":{"gitId":"WingKei67"},"content":"    public void isGroupCompareToCorrect() {","lastModifiedDate":"2022-10-24"},{"lineNumber":131,"author":{"gitId":"WingKei67"},"content":"        // Same tag group","lastModifiedDate":"2022-10-24"},{"lineNumber":132,"author":{"gitId":"WingKei67"},"content":"        assertEquals(ALICE.groupCompareTo(DANIEL), -1);","lastModifiedDate":"2022-10-22"},{"lineNumber":133,"author":{"gitId":"WingKei67"},"content":"        assertEquals(BENSON.groupCompareTo(GEORGE), -1);","lastModifiedDate":"2022-10-24"},{"lineNumber":134,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":135,"author":{"gitId":"WingKei67"},"content":"        // Single tag vs no tag","lastModifiedDate":"2022-10-24"},{"lineNumber":136,"author":{"gitId":"WingKei67"},"content":"        assertEquals(CARL.groupCompareTo(ELLE), -11);","lastModifiedDate":"2022-10-24"},{"lineNumber":137,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":138,"author":{"gitId":"WingKei67"},"content":"        // Single tag vs single tag","lastModifiedDate":"2022-10-24"},{"lineNumber":139,"author":{"gitId":"WingKei67"},"content":"        assertEquals(ALICE.groupCompareTo(ELLE), 9);","lastModifiedDate":"2022-10-24"},{"lineNumber":140,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":141,"author":{"gitId":"WingKei67"},"content":"        // Single tag vs double tag","lastModifiedDate":"2022-10-24"},{"lineNumber":142,"author":{"gitId":"WingKei67"},"content":"        assertEquals(BENSON.groupCompareTo(ELLE), 29);","lastModifiedDate":"2022-10-24"},{"lineNumber":143,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-22"},{"lineNumber":144,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"WingKei67":55,"-":86,"pwjj2000":3}},{"path":"src/test/java/seedu/address/model/person/PhoneTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2017-01-16"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"WingKei67"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-10-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class PhoneTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Phone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        String invalidPhone \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));","lastModifiedDate":"2019-03-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void isValidPhone() {","lastModifiedDate":"2017-01-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // null phone number","lastModifiedDate":"2017-12-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // invalid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // valid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":41,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":42,"author":{"gitId":"WingKei67"},"content":"    @Test","lastModifiedDate":"2022-10-25"},{"lineNumber":43,"author":{"gitId":"WingKei67"},"content":"    public void isCompareCorrect() {","lastModifiedDate":"2022-10-25"},{"lineNumber":44,"author":{"gitId":"WingKei67"},"content":"        // 88888888 \u003c 88888889","lastModifiedDate":"2022-10-25"},{"lineNumber":45,"author":{"gitId":"WingKei67"},"content":"        assertEquals(new Phone(\"88888888\").compareTo(new Phone(\"99999999\")), -1);","lastModifiedDate":"2022-10-25"},{"lineNumber":46,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":47,"author":{"gitId":"WingKei67"},"content":"        // 88888888 \u003c 88888888","lastModifiedDate":"2022-10-25"},{"lineNumber":48,"author":{"gitId":"WingKei67"},"content":"        assertEquals(new Phone(\"88888888\").compareTo(new Phone(\"88888888\")), 0);","lastModifiedDate":"2022-10-25"},{"lineNumber":49,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":50,"author":{"gitId":"WingKei67"},"content":"        // 88888889 \u003c 88888888","lastModifiedDate":"2022-10-25"},{"lineNumber":51,"author":{"gitId":"WingKei67"},"content":"        assertEquals(new Phone(\"99999999\").compareTo(new Phone(\"88888888\")), 1);","lastModifiedDate":"2022-10-25"},{"lineNumber":52,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":53,"author":{"gitId":"WingKei67"},"content":"        // 8888 \u003c 88888888","lastModifiedDate":"2022-10-25"},{"lineNumber":54,"author":{"gitId":"WingKei67"},"content":"        assertEquals(new Phone(\"8888\").compareTo(new Phone(\"88888888\")), -1);","lastModifiedDate":"2022-10-25"},{"lineNumber":55,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"WingKei67":16,"-":40}},{"path":"src/test/java/seedu/address/model/person/UniqueAppointmentListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pwjj2000"},"content":"package seedu.address.model.person;","lastModifiedDate":"2022-10-08"},{"lineNumber":2,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":3,"author":{"gitId":"pwjj2000"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-10-08"},{"lineNumber":4,"author":{"gitId":"pwjj2000"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-08"},{"lineNumber":5,"author":{"gitId":"pwjj2000"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-08"},{"lineNumber":6,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.model.Model.COMPARATOR_GROUP_MARK_APPOINTMENTS;","lastModifiedDate":"2022-10-25"},{"lineNumber":7,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.model.Model.COMPARATOR_GROUP_PATIENT_APPOINTMENTS;","lastModifiedDate":"2022-10-24"},{"lineNumber":8,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.model.Model.COMPARATOR_GROUP_TAG_APPOINTMENTS;","lastModifiedDate":"2022-10-24"},{"lineNumber":9,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.model.Model.COMPARATOR_UNGROUP_APPOINTMENTS;","lastModifiedDate":"2022-10-24"},{"lineNumber":10,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-08"},{"lineNumber":11,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.testutil.TypicalAppointments.APPOINTMENT_BENSON;","lastModifiedDate":"2022-10-08"},{"lineNumber":12,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.testutil.TypicalAppointments.APPOINTMENT_CARL;","lastModifiedDate":"2022-10-08"},{"lineNumber":13,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.testutil.TypicalAppointments.getDefaultAppointments;","lastModifiedDate":"2022-10-24"},{"lineNumber":14,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.testutil.TypicalAppointments.getGroupedAppointmentsByMark;","lastModifiedDate":"2022-10-25"},{"lineNumber":15,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.testutil.TypicalAppointments.getGroupedAppointmentsByPatient;","lastModifiedDate":"2022-10-24"},{"lineNumber":16,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.testutil.TypicalAppointments.getGroupedAppointmentsByTag;","lastModifiedDate":"2022-10-24"},{"lineNumber":17,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":18,"author":{"gitId":"pwjj2000"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-08"},{"lineNumber":19,"author":{"gitId":"pwjj2000"},"content":"import java.util.Collections;","lastModifiedDate":"2022-10-08"},{"lineNumber":20,"author":{"gitId":"pwjj2000"},"content":"import java.util.List;","lastModifiedDate":"2022-10-08"},{"lineNumber":21,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":22,"author":{"gitId":"pwjj2000"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-08"},{"lineNumber":23,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":24,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.person.exceptions.AppointmentNotFoundException;","lastModifiedDate":"2022-10-08"},{"lineNumber":25,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.person.exceptions.DuplicateAppointmentException;","lastModifiedDate":"2022-10-08"},{"lineNumber":26,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":27,"author":{"gitId":"pwjj2000"},"content":"public class UniqueAppointmentListTest {","lastModifiedDate":"2022-10-08"},{"lineNumber":28,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":29,"author":{"gitId":"pwjj2000"},"content":"    private final UniqueAppointmentList uniqueAppointmentList \u003d new UniqueAppointmentList();","lastModifiedDate":"2022-10-08"},{"lineNumber":30,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":31,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":32,"author":{"gitId":"pwjj2000"},"content":"    public void contains_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2022-10-08"},{"lineNumber":33,"author":{"gitId":"pwjj2000"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueAppointmentList.contains(null));","lastModifiedDate":"2022-10-08"},{"lineNumber":34,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":35,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":36,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":37,"author":{"gitId":"pwjj2000"},"content":"    public void contains_appointmentNotInList_returnsFalse() {","lastModifiedDate":"2022-10-08"},{"lineNumber":38,"author":{"gitId":"pwjj2000"},"content":"        assertFalse(uniqueAppointmentList.contains(APPOINTMENT_BENSON));","lastModifiedDate":"2022-10-08"},{"lineNumber":39,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":40,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":41,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":42,"author":{"gitId":"pwjj2000"},"content":"    public void contains_appointmentInList_returnsTrue() {","lastModifiedDate":"2022-10-08"},{"lineNumber":43,"author":{"gitId":"pwjj2000"},"content":"        uniqueAppointmentList.add(APPOINTMENT_BENSON);","lastModifiedDate":"2022-10-08"},{"lineNumber":44,"author":{"gitId":"pwjj2000"},"content":"        assertTrue(uniqueAppointmentList.contains(APPOINTMENT_BENSON));","lastModifiedDate":"2022-10-08"},{"lineNumber":45,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":46,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":47,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":48,"author":{"gitId":"pwjj2000"},"content":"    public void add_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2022-10-08"},{"lineNumber":49,"author":{"gitId":"pwjj2000"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueAppointmentList.add(null));","lastModifiedDate":"2022-10-08"},{"lineNumber":50,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":51,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":52,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":53,"author":{"gitId":"pwjj2000"},"content":"    public void add_duplicateAppointment_throwsDuplicateAppointmentException() {","lastModifiedDate":"2022-10-08"},{"lineNumber":54,"author":{"gitId":"pwjj2000"},"content":"        uniqueAppointmentList.add(APPOINTMENT_BENSON);","lastModifiedDate":"2022-10-08"},{"lineNumber":55,"author":{"gitId":"pwjj2000"},"content":"        assertThrows(DuplicateAppointmentException.class, () -\u003e uniqueAppointmentList.add(APPOINTMENT_BENSON));","lastModifiedDate":"2022-10-08"},{"lineNumber":56,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":57,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":58,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":59,"author":{"gitId":"pwjj2000"},"content":"    public void remove_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2022-10-08"},{"lineNumber":60,"author":{"gitId":"pwjj2000"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueAppointmentList.remove(null));","lastModifiedDate":"2022-10-08"},{"lineNumber":61,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":62,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":63,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":64,"author":{"gitId":"pwjj2000"},"content":"    public void remove_appointmentDoesNotExist_throwsAppointmentNotFoundException() {","lastModifiedDate":"2022-10-08"},{"lineNumber":65,"author":{"gitId":"pwjj2000"},"content":"        assertThrows(AppointmentNotFoundException.class, () -\u003e uniqueAppointmentList.remove(APPOINTMENT_BENSON));","lastModifiedDate":"2022-10-08"},{"lineNumber":66,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":67,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":68,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":69,"author":{"gitId":"pwjj2000"},"content":"    public void remove_existingAppointment_removesAppointment() {","lastModifiedDate":"2022-10-08"},{"lineNumber":70,"author":{"gitId":"pwjj2000"},"content":"        uniqueAppointmentList.add(APPOINTMENT_BENSON);","lastModifiedDate":"2022-10-08"},{"lineNumber":71,"author":{"gitId":"pwjj2000"},"content":"        uniqueAppointmentList.remove(APPOINTMENT_BENSON);","lastModifiedDate":"2022-10-08"},{"lineNumber":72,"author":{"gitId":"pwjj2000"},"content":"        UniqueAppointmentList expectedUniqueAppointmentList \u003d new UniqueAppointmentList();","lastModifiedDate":"2022-10-08"},{"lineNumber":73,"author":{"gitId":"pwjj2000"},"content":"        assertEquals(expectedUniqueAppointmentList, uniqueAppointmentList);","lastModifiedDate":"2022-10-08"},{"lineNumber":74,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":75,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":76,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":77,"author":{"gitId":"pwjj2000"},"content":"    public void setAppointments_nullUniqueAppointmentList_throwsNullPointerException() {","lastModifiedDate":"2022-10-08"},{"lineNumber":78,"author":{"gitId":"pwjj2000"},"content":"        assertThrows(NullPointerException.class, () -\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":79,"author":{"gitId":"pwjj2000"},"content":"                uniqueAppointmentList.setAppointments((UniqueAppointmentList) null));","lastModifiedDate":"2022-10-08"},{"lineNumber":80,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":81,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":82,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":83,"author":{"gitId":"pwjj2000"},"content":"    public void setPersons_uniqueAppointmentList_replacesOwnListWithProvidedUniqueAppointmentList() {","lastModifiedDate":"2022-10-08"},{"lineNumber":84,"author":{"gitId":"pwjj2000"},"content":"        uniqueAppointmentList.add(APPOINTMENT_BENSON);","lastModifiedDate":"2022-10-08"},{"lineNumber":85,"author":{"gitId":"pwjj2000"},"content":"        UniqueAppointmentList expectedUniqueAppointmentList \u003d new UniqueAppointmentList();","lastModifiedDate":"2022-10-08"},{"lineNumber":86,"author":{"gitId":"pwjj2000"},"content":"        expectedUniqueAppointmentList.add(APPOINTMENT_CARL);","lastModifiedDate":"2022-10-08"},{"lineNumber":87,"author":{"gitId":"pwjj2000"},"content":"        uniqueAppointmentList.setAppointments(expectedUniqueAppointmentList);","lastModifiedDate":"2022-10-08"},{"lineNumber":88,"author":{"gitId":"pwjj2000"},"content":"        assertEquals(expectedUniqueAppointmentList, uniqueAppointmentList);","lastModifiedDate":"2022-10-08"},{"lineNumber":89,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":90,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":91,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":92,"author":{"gitId":"pwjj2000"},"content":"    public void setAppointments_nullList_throwsNullPointerException() {","lastModifiedDate":"2022-10-08"},{"lineNumber":93,"author":{"gitId":"pwjj2000"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueAppointmentList.setAppointments((List\u003cAppointment\u003e) null));","lastModifiedDate":"2022-10-08"},{"lineNumber":94,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":95,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":96,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":97,"author":{"gitId":"pwjj2000"},"content":"    public void setAppointments_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2022-10-08"},{"lineNumber":98,"author":{"gitId":"pwjj2000"},"content":"        uniqueAppointmentList.add(APPOINTMENT_BENSON);","lastModifiedDate":"2022-10-08"},{"lineNumber":99,"author":{"gitId":"pwjj2000"},"content":"        List\u003cAppointment\u003e appointmentList \u003d Collections.singletonList(APPOINTMENT_CARL);","lastModifiedDate":"2022-10-08"},{"lineNumber":100,"author":{"gitId":"pwjj2000"},"content":"        uniqueAppointmentList.setAppointments(appointmentList);","lastModifiedDate":"2022-10-08"},{"lineNumber":101,"author":{"gitId":"pwjj2000"},"content":"        UniqueAppointmentList expectedUniqueAppointmentList \u003d new UniqueAppointmentList();","lastModifiedDate":"2022-10-08"},{"lineNumber":102,"author":{"gitId":"pwjj2000"},"content":"        expectedUniqueAppointmentList.add(APPOINTMENT_CARL);","lastModifiedDate":"2022-10-08"},{"lineNumber":103,"author":{"gitId":"pwjj2000"},"content":"        assertEquals(expectedUniqueAppointmentList, uniqueAppointmentList);","lastModifiedDate":"2022-10-08"},{"lineNumber":104,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":105,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":106,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":107,"author":{"gitId":"pwjj2000"},"content":"    public void setAppointments_listWithDuplicateAppointments_throwsDuplicateAppointmentException() {","lastModifiedDate":"2022-10-08"},{"lineNumber":108,"author":{"gitId":"pwjj2000"},"content":"        List\u003cAppointment\u003e listWithDuplicateAppointments \u003d Arrays.asList(APPOINTMENT_CARL, APPOINTMENT_CARL);","lastModifiedDate":"2022-10-08"},{"lineNumber":109,"author":{"gitId":"pwjj2000"},"content":"        assertThrows(DuplicateAppointmentException.class, () -\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":110,"author":{"gitId":"pwjj2000"},"content":"                uniqueAppointmentList.setAppointments(listWithDuplicateAppointments));","lastModifiedDate":"2022-10-08"},{"lineNumber":111,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":112,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":113,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":114,"author":{"gitId":"pwjj2000"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2022-10-08"},{"lineNumber":115,"author":{"gitId":"pwjj2000"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2022-10-08"},{"lineNumber":116,"author":{"gitId":"pwjj2000"},"content":"                -\u003e uniqueAppointmentList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2022-10-08"},{"lineNumber":117,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":118,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":119,"author":{"gitId":"WingKei67"},"content":"    @Test","lastModifiedDate":"2022-10-24"},{"lineNumber":120,"author":{"gitId":"WingKei67"},"content":"    public void appointmentCompared() {","lastModifiedDate":"2022-10-24"},{"lineNumber":121,"author":{"gitId":"WingKei67"},"content":"        uniqueAppointmentList.setAppointments(getDefaultAppointments());","lastModifiedDate":"2022-10-24"},{"lineNumber":122,"author":{"gitId":"WingKei67"},"content":"        List\u003cAppointment\u003e ungrouped \u003d getDefaultAppointments();","lastModifiedDate":"2022-10-24"},{"lineNumber":123,"author":{"gitId":"WingKei67"},"content":"        assertEquals(uniqueAppointmentList.asUnmodifiableObservableList(), ungrouped);","lastModifiedDate":"2022-10-24"},{"lineNumber":124,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":125,"author":{"gitId":"WingKei67"},"content":"        uniqueAppointmentList.sort(COMPARATOR_GROUP_TAG_APPOINTMENTS);","lastModifiedDate":"2022-10-24"},{"lineNumber":126,"author":{"gitId":"WingKei67"},"content":"        List\u003cAppointment\u003e groupedByTag \u003d getGroupedAppointmentsByTag();","lastModifiedDate":"2022-10-25"},{"lineNumber":127,"author":{"gitId":"WingKei67"},"content":"        assertEquals(uniqueAppointmentList.asUnmodifiableObservableList(), groupedByTag);","lastModifiedDate":"2022-10-24"},{"lineNumber":128,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":129,"author":{"gitId":"WingKei67"},"content":"        uniqueAppointmentList.sort(COMPARATOR_GROUP_PATIENT_APPOINTMENTS);","lastModifiedDate":"2022-10-24"},{"lineNumber":130,"author":{"gitId":"WingKei67"},"content":"        List\u003cAppointment\u003e groupedByPatient \u003d getGroupedAppointmentsByPatient();","lastModifiedDate":"2022-10-25"},{"lineNumber":131,"author":{"gitId":"WingKei67"},"content":"        assertEquals(uniqueAppointmentList.asUnmodifiableObservableList(), groupedByPatient);","lastModifiedDate":"2022-10-24"},{"lineNumber":132,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":133,"author":{"gitId":"WingKei67"},"content":"        uniqueAppointmentList.sort(COMPARATOR_GROUP_MARK_APPOINTMENTS);","lastModifiedDate":"2022-10-25"},{"lineNumber":134,"author":{"gitId":"WingKei67"},"content":"        List\u003cAppointment\u003e groupedByMark \u003d getGroupedAppointmentsByMark();","lastModifiedDate":"2022-10-25"},{"lineNumber":135,"author":{"gitId":"WingKei67"},"content":"        assertEquals(uniqueAppointmentList.asUnmodifiableObservableList(), groupedByMark);","lastModifiedDate":"2022-10-25"},{"lineNumber":136,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":137,"author":{"gitId":"WingKei67"},"content":"        uniqueAppointmentList.sort(COMPARATOR_UNGROUP_APPOINTMENTS);","lastModifiedDate":"2022-10-24"},{"lineNumber":138,"author":{"gitId":"WingKei67"},"content":"        assertEquals(uniqueAppointmentList.asUnmodifiableObservableList(), ungrouped);","lastModifiedDate":"2022-10-24"},{"lineNumber":139,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":140,"author":{"gitId":"pwjj2000"},"content":"}","lastModifiedDate":"2022-10-08"}],"authorContributionMap":{"WingKei67":30,"pwjj2000":110}},{"path":"src/test/java/seedu/address/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2018-08-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-08-08"},{"lineNumber":7,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_EAR;","lastModifiedDate":"2022-10-21"},{"lineNumber":8,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.model.Model.COMPARATOR_GROUP_PATIENTS;","lastModifiedDate":"2022-10-24"},{"lineNumber":9,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.model.Model.COMPARATOR_UNGROUP_PATIENTS;","lastModifiedDate":"2022-10-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.testutil.TypicalPersons.getGroupedPersons;","lastModifiedDate":"2022-10-24"},{"lineNumber":14,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;","lastModifiedDate":"2022-10-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2018-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2018-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class UniquePersonListTest {","lastModifiedDate":"2017-09-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {","lastModifiedDate":"2018-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"pwjj2000"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_EAR)","lastModifiedDate":"2022-10-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(editedAlice));","lastModifiedDate":"2018-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));","lastModifiedDate":"2019-03-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":92,"author":{"gitId":"pwjj2000"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_EAR)","lastModifiedDate":"2022-10-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        uniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));","lastModifiedDate":"2019-03-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {","lastModifiedDate":"2018-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        uniquePersonList.remove(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(expectedUniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(personList);","lastModifiedDate":"2018-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));","lastModifiedDate":"2019-03-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2018-04-05"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":174,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":175,"author":{"gitId":"WingKei67"},"content":"    @Test","lastModifiedDate":"2022-10-24"},{"lineNumber":176,"author":{"gitId":"WingKei67"},"content":"    public void patientCompares() {","lastModifiedDate":"2022-10-24"},{"lineNumber":177,"author":{"gitId":"WingKei67"},"content":"        uniquePersonList.setPersons(getTypicalPersons());","lastModifiedDate":"2022-10-24"},{"lineNumber":178,"author":{"gitId":"WingKei67"},"content":"        List\u003cPerson\u003e ungrouped \u003d getTypicalPersons();","lastModifiedDate":"2022-10-24"},{"lineNumber":179,"author":{"gitId":"WingKei67"},"content":"        List\u003cPerson\u003e grouped \u003d getGroupedPersons();","lastModifiedDate":"2022-10-24"},{"lineNumber":180,"author":{"gitId":"WingKei67"},"content":"        assertEquals(uniquePersonList.asUnmodifiableObservableList(), ungrouped);","lastModifiedDate":"2022-10-24"},{"lineNumber":181,"author":{"gitId":"WingKei67"},"content":"        uniquePersonList.sort(COMPARATOR_GROUP_PATIENTS);","lastModifiedDate":"2022-10-24"},{"lineNumber":182,"author":{"gitId":"WingKei67"},"content":"        assertEquals(uniquePersonList.asUnmodifiableObservableList(), grouped);","lastModifiedDate":"2022-10-24"},{"lineNumber":183,"author":{"gitId":"WingKei67"},"content":"        uniquePersonList.sort(COMPARATOR_UNGROUP_PATIENTS);","lastModifiedDate":"2022-10-24"},{"lineNumber":184,"author":{"gitId":"WingKei67"},"content":"        assertEquals(uniquePersonList.asUnmodifiableObservableList(), ungrouped);","lastModifiedDate":"2022-10-24"},{"lineNumber":185,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":186,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"WingKei67":16,"-":167,"pwjj2000":3}},{"path":"src/test/java/seedu/address/model/person/predicates/AppointmentOfFilteredPersonsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2022-10-14"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-14"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-14"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-14"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import java.util.List;","lastModifiedDate":"2022-10-14"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-14"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-14"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-14"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.testutil.TypicalPersons;","lastModifiedDate":"2022-10-14"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"class AppointmentOfFilteredPersonsPredicateTest {","lastModifiedDate":"2022-10-14"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-14"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"    public void equals() {","lastModifiedDate":"2022-10-14"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"        List\u003cPerson\u003e firstPersonList \u003d TypicalPersons.getTypicalPersons();","lastModifiedDate":"2022-10-14"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"        List\u003cPerson\u003e secondPersonList \u003d Arrays.asList(TypicalPersons.ALICE, TypicalPersons.BENSON);","lastModifiedDate":"2022-10-14"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"        AppointmentOfFilteredPersonsPredicate firstPredicate \u003d","lastModifiedDate":"2022-10-14"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"                new AppointmentOfFilteredPersonsPredicate(firstPersonList);","lastModifiedDate":"2022-10-14"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"        AppointmentOfFilteredPersonsPredicate firstPredicateCopy \u003d","lastModifiedDate":"2022-10-14"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"                new AppointmentOfFilteredPersonsPredicate(firstPersonList);","lastModifiedDate":"2022-10-14"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"        AppointmentOfFilteredPersonsPredicate secondPredicate \u003d","lastModifiedDate":"2022-10-14"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"                new AppointmentOfFilteredPersonsPredicate(secondPersonList);","lastModifiedDate":"2022-10-14"},{"lineNumber":28,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"        PredicateTestUtil.assertBasicEqualities(firstPredicate, firstPredicateCopy, secondPredicate);","lastModifiedDate":"2022-10-14"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-14"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"    public void test_personListContainsAppointment_returnsTrue() {","lastModifiedDate":"2022-10-14"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"        List\u003cPerson\u003e personList \u003d Arrays.asList(TypicalPersons.ALICE, TypicalPersons.BENSON, TypicalPersons.CARL);","lastModifiedDate":"2022-10-14"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"        Appointment appointmentInList \u003d TypicalPersons.BENSON.getAppointments().get(0);","lastModifiedDate":"2022-10-14"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"        AppointmentOfFilteredPersonsPredicate predicate \u003d new AppointmentOfFilteredPersonsPredicate(personList);","lastModifiedDate":"2022-10-14"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(appointmentInList));","lastModifiedDate":"2022-10-14"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":40,"author":{"gitId":"NicholasTYD"},"content":"        Appointment anotherAppointmentInList \u003d TypicalPersons.CARL.getAppointments().get(1);","lastModifiedDate":"2022-10-14"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d new AppointmentOfFilteredPersonsPredicate(personList);","lastModifiedDate":"2022-10-14"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(appointmentInList));","lastModifiedDate":"2022-10-14"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":45,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-14"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"    public void test_personListDoesNotContainsAppointment_returnsFalse() {","lastModifiedDate":"2022-10-14"},{"lineNumber":47,"author":{"gitId":"NicholasTYD"},"content":"        List\u003cPerson\u003e personList \u003d List.of(TypicalPersons.BENSON);","lastModifiedDate":"2022-10-14"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"        Appointment appointmentNotInList \u003d TypicalPersons.CARL.getAppointments().get(1);","lastModifiedDate":"2022-10-14"},{"lineNumber":49,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":50,"author":{"gitId":"NicholasTYD"},"content":"        AppointmentOfFilteredPersonsPredicate predicate \u003d new AppointmentOfFilteredPersonsPredicate(personList);","lastModifiedDate":"2022-10-14"},{"lineNumber":51,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(appointmentNotInList));","lastModifiedDate":"2022-10-14"},{"lineNumber":52,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":53,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-14"}],"authorContributionMap":{"NicholasTYD":53}},{"path":"src/test/java/seedu/address/model/person/predicates/CombinedAppointmentPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2022-10-14"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-15"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2022-10-15"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-15"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMPTY_STRING;","lastModifiedDate":"2022-10-15"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_EAR;","lastModifiedDate":"2022-10-25"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NOSE;","lastModifiedDate":"2022-10-25"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_THROAT;","lastModifiedDate":"2022-10-25"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.PredicateGeneratorUtil.generateCombinedAppointmentPredicateWithOnlyDateTime;","lastModifiedDate":"2022-10-16"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.PredicateGeneratorUtil.generateCombinedAppointmentPredicateWithOnlyReason;","lastModifiedDate":"2022-10-16"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.PredicateGeneratorUtil.generateCombinedAppointmentPredicateWithOnlyTags;","lastModifiedDate":"2022-10-25"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-14"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"import java.util.Collections;","lastModifiedDate":"2022-10-25"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"import java.util.List;","lastModifiedDate":"2022-10-25"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-14"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-14"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.testutil.AppointmentBuilder;","lastModifiedDate":"2022-10-14"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"class CombinedAppointmentPredicateTest {","lastModifiedDate":"2022-10-14"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"    private final LocalDateTime minTime \u003d LocalDateTime.MIN;","lastModifiedDate":"2022-10-14"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"    private final LocalDateTime maxTime \u003d LocalDateTime.MAX;","lastModifiedDate":"2022-10-14"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":28,"author":{"gitId":"NicholasTYD"},"content":"    private final String reason \u003d \"Sleep Apnea\";","lastModifiedDate":"2022-10-14"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"    private final String differentReason \u003d \"Tinnitus\";","lastModifiedDate":"2022-10-14"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"    private final LocalDateTime targetTime \u003d LocalDateTime.parse(\"2000-12-31T12:34\");","lastModifiedDate":"2022-10-14"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"    private final LocalDateTime beforeTargetTime \u003d LocalDateTime.parse(\"1900-01-01T00:00\");","lastModifiedDate":"2022-10-14"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"    private final LocalDateTime afterTargetTime \u003d LocalDateTime.parse(\"2100-01-01T00:00\");","lastModifiedDate":"2022-10-14"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"    private final LocalDateTime beforeBeforeTargetTime \u003d beforeTargetTime.minusMinutes(10);","lastModifiedDate":"2022-10-16"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"    private final LocalDateTime afterAfterTargetTime \u003d afterTargetTime.plusMinutes(10);","lastModifiedDate":"2022-10-16"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"    // 4 different LocalDateTimes, with each being later than the last.","lastModifiedDate":"2022-10-14"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"    private final LocalDateTime time0 \u003d LocalDateTime.parse(\"2000-12-31T12:34\");","lastModifiedDate":"2022-10-14"},{"lineNumber":40,"author":{"gitId":"NicholasTYD"},"content":"    private final LocalDateTime time1 \u003d LocalDateTime.parse(\"2001-12-31T12:34\");","lastModifiedDate":"2022-10-14"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"    private final LocalDateTime time2 \u003d LocalDateTime.parse(\"2002-12-31T12:34\");","lastModifiedDate":"2022-10-14"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"    private final LocalDateTime time3 \u003d LocalDateTime.parse(\"2003-12-31T12:34\");","lastModifiedDate":"2022-10-14"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"    private final LocalDateTime time4 \u003d LocalDateTime.parse(\"2004-12-31T12:34\");","lastModifiedDate":"2022-10-14"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":45,"author":{"gitId":"NicholasTYD"},"content":"    private final String tag1 \u003d VALID_TAG_EAR;","lastModifiedDate":"2022-10-25"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"    private final String tag2 \u003d VALID_TAG_NOSE;","lastModifiedDate":"2022-10-25"},{"lineNumber":47,"author":{"gitId":"NicholasTYD"},"content":"    private final String tag3 \u003d VALID_TAG_THROAT;","lastModifiedDate":"2022-10-25"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"    private final List\u003cString\u003e emptyList \u003d Collections.emptyList();","lastModifiedDate":"2022-10-25"},{"lineNumber":49,"author":{"gitId":"NicholasTYD"},"content":"    private final List\u003cString\u003e listWithTag1And2 \u003d List.of(tag1, tag2);","lastModifiedDate":"2022-10-25"},{"lineNumber":50,"author":{"gitId":"NicholasTYD"},"content":"    private final List\u003cString\u003e listWithAllTags \u003d List.of(tag1, tag2, tag3);","lastModifiedDate":"2022-10-25"},{"lineNumber":51,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":52,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":53,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-14"},{"lineNumber":54,"author":{"gitId":"NicholasTYD"},"content":"    public void equals() {","lastModifiedDate":"2022-10-14"},{"lineNumber":55,"author":{"gitId":"NicholasTYD"},"content":"        CombinedAppointmentPredicate firstPredicate \u003d new CombinedAppointmentPredicate(reason, time1, time2, emptyList);","lastModifiedDate":"2022-10-25"},{"lineNumber":56,"author":{"gitId":"NicholasTYD"},"content":"        CombinedAppointmentPredicate firstPredicateCopy \u003d","lastModifiedDate":"2022-10-25"},{"lineNumber":57,"author":{"gitId":"NicholasTYD"},"content":"                new CombinedAppointmentPredicate(reason, time1, time2, emptyList);","lastModifiedDate":"2022-10-25"},{"lineNumber":58,"author":{"gitId":"NicholasTYD"},"content":"        CombinedAppointmentPredicate differentPredicate \u003d","lastModifiedDate":"2022-10-14"},{"lineNumber":59,"author":{"gitId":"NicholasTYD"},"content":"                new CombinedAppointmentPredicate(differentReason, time3, time4, listWithTag1And2);","lastModifiedDate":"2022-10-25"},{"lineNumber":60,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":61,"author":{"gitId":"NicholasTYD"},"content":"        PredicateTestUtil.assertBasicEqualities(firstPredicate, firstPredicateCopy, differentPredicate);","lastModifiedDate":"2022-10-14"},{"lineNumber":62,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":63,"author":{"gitId":"NicholasTYD"},"content":"        // Different reason not equals","lastModifiedDate":"2022-10-14"},{"lineNumber":64,"author":{"gitId":"NicholasTYD"},"content":"        CombinedAppointmentPredicate testPredicate \u003d","lastModifiedDate":"2022-10-25"},{"lineNumber":65,"author":{"gitId":"NicholasTYD"},"content":"                new CombinedAppointmentPredicate(differentReason, time1, time2, emptyList);","lastModifiedDate":"2022-10-25"},{"lineNumber":66,"author":{"gitId":"NicholasTYD"},"content":"        assertNotEquals(testPredicate, firstPredicate);","lastModifiedDate":"2022-10-14"},{"lineNumber":67,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":68,"author":{"gitId":"NicholasTYD"},"content":"        // Different different startTime not equals","lastModifiedDate":"2022-10-14"},{"lineNumber":69,"author":{"gitId":"NicholasTYD"},"content":"        testPredicate \u003d new CombinedAppointmentPredicate(reason, time0, time2, emptyList);","lastModifiedDate":"2022-10-25"},{"lineNumber":70,"author":{"gitId":"NicholasTYD"},"content":"        assertNotEquals(testPredicate, firstPredicate);","lastModifiedDate":"2022-10-14"},{"lineNumber":71,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":72,"author":{"gitId":"NicholasTYD"},"content":"        // Different endTime not equals","lastModifiedDate":"2022-10-14"},{"lineNumber":73,"author":{"gitId":"NicholasTYD"},"content":"        testPredicate \u003d new CombinedAppointmentPredicate(reason, time1, time3, emptyList);","lastModifiedDate":"2022-10-25"},{"lineNumber":74,"author":{"gitId":"NicholasTYD"},"content":"        assertNotEquals(testPredicate, firstPredicate);","lastModifiedDate":"2022-10-25"},{"lineNumber":75,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":76,"author":{"gitId":"NicholasTYD"},"content":"        // Different list not equals","lastModifiedDate":"2022-10-25"},{"lineNumber":77,"author":{"gitId":"NicholasTYD"},"content":"        testPredicate \u003d new CombinedAppointmentPredicate(reason, time1, time3, listWithTag1And2);","lastModifiedDate":"2022-10-25"},{"lineNumber":78,"author":{"gitId":"NicholasTYD"},"content":"        assertNotEquals(testPredicate, firstPredicate);","lastModifiedDate":"2022-10-14"},{"lineNumber":79,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":80,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":81,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-14"},{"lineNumber":82,"author":{"gitId":"NicholasTYD"},"content":"    public void test_appointmentFufillsPredicate_returnsTrue() {","lastModifiedDate":"2022-10-14"},{"lineNumber":83,"author":{"gitId":"NicholasTYD"},"content":"        Appointment appointmentToTest \u003d","lastModifiedDate":"2022-10-25"},{"lineNumber":84,"author":{"gitId":"NicholasTYD"},"content":"                new AppointmentBuilder().withReason(reason).withDateTime(targetTime).withTags(tag1, tag2).build();","lastModifiedDate":"2022-10-25"},{"lineNumber":85,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":86,"author":{"gitId":"NicholasTYD"},"content":"        // Within search criteria","lastModifiedDate":"2022-10-14"},{"lineNumber":87,"author":{"gitId":"NicholasTYD"},"content":"        CombinedAppointmentPredicate predicate \u003d","lastModifiedDate":"2022-10-14"},{"lineNumber":88,"author":{"gitId":"NicholasTYD"},"content":"                new CombinedAppointmentPredicate(reason, beforeTargetTime, afterTargetTime, emptyList);","lastModifiedDate":"2022-10-25"},{"lineNumber":89,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-14"},{"lineNumber":90,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":91,"author":{"gitId":"NicholasTYD"},"content":"        // Exact search criteria","lastModifiedDate":"2022-10-14"},{"lineNumber":92,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d new CombinedAppointmentPredicate(reason, targetTime, targetTime, listWithTag1And2);","lastModifiedDate":"2022-10-25"},{"lineNumber":93,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-14"},{"lineNumber":94,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":95,"author":{"gitId":"NicholasTYD"},"content":"        // Can find reason without full match","lastModifiedDate":"2022-10-14"},{"lineNumber":96,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d new CombinedAppointmentPredicate(\"Sleep Ap\", targetTime, targetTime, listWithTag1And2);","lastModifiedDate":"2022-10-25"},{"lineNumber":97,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-14"},{"lineNumber":98,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":99,"author":{"gitId":"NicholasTYD"},"content":"        // No start time restriction","lastModifiedDate":"2022-10-14"},{"lineNumber":100,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d new CombinedAppointmentPredicate(reason, minTime, targetTime, listWithTag1And2);","lastModifiedDate":"2022-10-25"},{"lineNumber":101,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-14"},{"lineNumber":102,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":103,"author":{"gitId":"NicholasTYD"},"content":"        // No end time restriction","lastModifiedDate":"2022-10-14"},{"lineNumber":104,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d new CombinedAppointmentPredicate(reason, targetTime, maxTime, listWithTag1And2);","lastModifiedDate":"2022-10-25"},{"lineNumber":105,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-14"},{"lineNumber":106,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":107,"author":{"gitId":"NicholasTYD"},"content":"        // No time restriction","lastModifiedDate":"2022-10-14"},{"lineNumber":108,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d new CombinedAppointmentPredicate(reason, minTime, maxTime, listWithTag1And2);","lastModifiedDate":"2022-10-25"},{"lineNumber":109,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-14"},{"lineNumber":110,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":111,"author":{"gitId":"NicholasTYD"},"content":"        // Empty reason","lastModifiedDate":"2022-10-14"},{"lineNumber":112,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d new CombinedAppointmentPredicate(EMPTY_STRING, beforeTargetTime, afterTargetTime, listWithTag1And2);","lastModifiedDate":"2022-10-25"},{"lineNumber":113,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-14"},{"lineNumber":114,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":115,"author":{"gitId":"NicholasTYD"},"content":"        // No reason, No time restriction, No tag restriction","lastModifiedDate":"2022-10-25"},{"lineNumber":116,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d new CombinedAppointmentPredicate(EMPTY_STRING, minTime, maxTime, emptyList);","lastModifiedDate":"2022-10-25"},{"lineNumber":117,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-14"},{"lineNumber":118,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":119,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":120,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-14"},{"lineNumber":121,"author":{"gitId":"NicholasTYD"},"content":"    public void test_appointmentNotFufillPredicate_returnsFalse() {","lastModifiedDate":"2022-10-14"},{"lineNumber":122,"author":{"gitId":"NicholasTYD"},"content":"        Appointment appointmentToTest \u003d","lastModifiedDate":"2022-10-25"},{"lineNumber":123,"author":{"gitId":"NicholasTYD"},"content":"                new AppointmentBuilder().withReason(reason).withDateTime(targetTime).withTags(tag1).build();","lastModifiedDate":"2022-10-25"},{"lineNumber":124,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":125,"author":{"gitId":"NicholasTYD"},"content":"        // Outside search criteria","lastModifiedDate":"2022-10-14"},{"lineNumber":126,"author":{"gitId":"NicholasTYD"},"content":"        CombinedAppointmentPredicate predicate \u003d","lastModifiedDate":"2022-10-14"},{"lineNumber":127,"author":{"gitId":"NicholasTYD"},"content":"                new CombinedAppointmentPredicate(differentReason, afterTargetTime, afterAfterTargetTime, emptyList);","lastModifiedDate":"2022-10-25"},{"lineNumber":128,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-14"},{"lineNumber":129,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":130,"author":{"gitId":"NicholasTYD"},"content":"        // Different search criteria, no time restriction","lastModifiedDate":"2022-10-14"},{"lineNumber":131,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d new CombinedAppointmentPredicate(differentReason, minTime, maxTime, emptyList);","lastModifiedDate":"2022-10-25"},{"lineNumber":132,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-14"},{"lineNumber":133,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":134,"author":{"gitId":"NicholasTYD"},"content":"        // Same reason, outside time range","lastModifiedDate":"2022-10-14"},{"lineNumber":135,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d new CombinedAppointmentPredicate(reason, beforeBeforeTargetTime, beforeTargetTime, emptyList);","lastModifiedDate":"2022-10-25"},{"lineNumber":136,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-14"},{"lineNumber":137,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":138,"author":{"gitId":"NicholasTYD"},"content":"        // Incomplete reason match","lastModifiedDate":"2022-10-14"},{"lineNumber":139,"author":{"gitId":"NicholasTYD"},"content":"        String stricterReason \u003d reason + \" and sore throat\";","lastModifiedDate":"2022-10-14"},{"lineNumber":140,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d new CombinedAppointmentPredicate(stricterReason, minTime, maxTime, emptyList);","lastModifiedDate":"2022-10-25"},{"lineNumber":141,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-25"},{"lineNumber":142,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":143,"author":{"gitId":"NicholasTYD"},"content":"        // Doesn\u0027t contain tag","lastModifiedDate":"2022-10-25"},{"lineNumber":144,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d new CombinedAppointmentPredicate(reason, minTime, maxTime, listWithTag1And2);","lastModifiedDate":"2022-10-25"},{"lineNumber":145,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-14"},{"lineNumber":146,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":147,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":148,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-16"},{"lineNumber":149,"author":{"gitId":"NicholasTYD"},"content":"    public void test_appointmentFufillsPredicateReasonOnly_returnsTrue() {","lastModifiedDate":"2022-10-25"},{"lineNumber":150,"author":{"gitId":"NicholasTYD"},"content":"        String reasonToTest \u003d \"Sore Throat\";","lastModifiedDate":"2022-10-16"},{"lineNumber":151,"author":{"gitId":"NicholasTYD"},"content":"        Appointment appointmentToTest \u003d new AppointmentBuilder().withReason(reasonToTest).build();","lastModifiedDate":"2022-10-16"},{"lineNumber":152,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":153,"author":{"gitId":"NicholasTYD"},"content":"        // Same reason","lastModifiedDate":"2022-10-16"},{"lineNumber":154,"author":{"gitId":"NicholasTYD"},"content":"        CombinedAppointmentPredicate predicate \u003d generateCombinedAppointmentPredicateWithOnlyReason(reasonToTest);","lastModifiedDate":"2022-10-16"},{"lineNumber":155,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":156,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":157,"author":{"gitId":"NicholasTYD"},"content":"        // Contains sequence, can find reason through spaces","lastModifiedDate":"2022-10-16"},{"lineNumber":158,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedAppointmentPredicateWithOnlyReason(\"re Thro\");","lastModifiedDate":"2022-10-16"},{"lineNumber":159,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":160,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":161,"author":{"gitId":"NicholasTYD"},"content":"        // Mixed-case sequence","lastModifiedDate":"2022-10-16"},{"lineNumber":162,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedAppointmentPredicateWithOnlyReason(\"OrE tHROAt\");","lastModifiedDate":"2022-10-16"},{"lineNumber":163,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":164,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":165,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":166,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-16"},{"lineNumber":167,"author":{"gitId":"NicholasTYD"},"content":"    public void test_appointmentNotFufillPredicateReasonOnly_returnsFalse() {","lastModifiedDate":"2022-10-25"},{"lineNumber":168,"author":{"gitId":"NicholasTYD"},"content":"        String reasonToTest \u003d \"Sore Throat\";","lastModifiedDate":"2022-10-16"},{"lineNumber":169,"author":{"gitId":"NicholasTYD"},"content":"        Appointment appointmentToTest \u003d new AppointmentBuilder().withReason(reasonToTest).build();","lastModifiedDate":"2022-10-16"},{"lineNumber":170,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":171,"author":{"gitId":"NicholasTYD"},"content":"        // Non-matching sequence","lastModifiedDate":"2022-10-16"},{"lineNumber":172,"author":{"gitId":"NicholasTYD"},"content":"        CombinedAppointmentPredicate predicate \u003d generateCombinedAppointmentPredicateWithOnlyReason(\"Cough\");","lastModifiedDate":"2022-10-16"},{"lineNumber":173,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":174,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":175,"author":{"gitId":"NicholasTYD"},"content":"        // Incomplete match","lastModifiedDate":"2022-10-16"},{"lineNumber":176,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedAppointmentPredicateWithOnlyReason(\"Sore Throats\");","lastModifiedDate":"2022-10-16"},{"lineNumber":177,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":178,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":179,"author":{"gitId":"NicholasTYD"},"content":"        // Incomplete match","lastModifiedDate":"2022-10-16"},{"lineNumber":180,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedAppointmentPredicateWithOnlyReason(\"Canker Sore\");","lastModifiedDate":"2022-10-16"},{"lineNumber":181,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":182,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":183,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":184,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-16"},{"lineNumber":185,"author":{"gitId":"NicholasTYD"},"content":"    public void test_appointmentFufillsPredicateDateTimeOnly_returnsTrue() {","lastModifiedDate":"2022-10-25"},{"lineNumber":186,"author":{"gitId":"NicholasTYD"},"content":"        Appointment appointmentToTest \u003d new AppointmentBuilder().withDateTime(targetTime).build();","lastModifiedDate":"2022-10-16"},{"lineNumber":187,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":188,"author":{"gitId":"NicholasTYD"},"content":"        // Within range","lastModifiedDate":"2022-10-16"},{"lineNumber":189,"author":{"gitId":"NicholasTYD"},"content":"        CombinedAppointmentPredicate predicate \u003d","lastModifiedDate":"2022-10-16"},{"lineNumber":190,"author":{"gitId":"NicholasTYD"},"content":"                generateCombinedAppointmentPredicateWithOnlyDateTime(beforeTargetTime, afterTargetTime);","lastModifiedDate":"2022-10-16"},{"lineNumber":191,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":192,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":193,"author":{"gitId":"NicholasTYD"},"content":"        // Same dateTime with startDateTime","lastModifiedDate":"2022-10-16"},{"lineNumber":194,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedAppointmentPredicateWithOnlyDateTime(targetTime, afterTargetTime);","lastModifiedDate":"2022-10-16"},{"lineNumber":195,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":196,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":197,"author":{"gitId":"NicholasTYD"},"content":"        // Same dateTime with endDateTime","lastModifiedDate":"2022-10-16"},{"lineNumber":198,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedAppointmentPredicateWithOnlyDateTime(beforeTargetTime, targetTime);","lastModifiedDate":"2022-10-16"},{"lineNumber":199,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":200,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":201,"author":{"gitId":"NicholasTYD"},"content":"        // Exact same time","lastModifiedDate":"2022-10-16"},{"lineNumber":202,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedAppointmentPredicateWithOnlyDateTime(targetTime, targetTime);","lastModifiedDate":"2022-10-16"},{"lineNumber":203,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":204,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":205,"author":{"gitId":"NicholasTYD"},"content":"        // Within range, no startTime restriction","lastModifiedDate":"2022-10-16"},{"lineNumber":206,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedAppointmentPredicateWithOnlyDateTime(minTime, afterTargetTime);","lastModifiedDate":"2022-10-16"},{"lineNumber":207,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":208,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":209,"author":{"gitId":"NicholasTYD"},"content":"        // Within range, no endTime restriction","lastModifiedDate":"2022-10-16"},{"lineNumber":210,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedAppointmentPredicateWithOnlyDateTime(beforeTargetTime, maxTime);","lastModifiedDate":"2022-10-16"},{"lineNumber":211,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":212,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":213,"author":{"gitId":"NicholasTYD"},"content":"        // Within range, no startTime restriction, same time as endTime","lastModifiedDate":"2022-10-16"},{"lineNumber":214,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedAppointmentPredicateWithOnlyDateTime(minTime, targetTime);","lastModifiedDate":"2022-10-16"},{"lineNumber":215,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":216,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":217,"author":{"gitId":"NicholasTYD"},"content":"        // Within range, no endTime restriction, same time as startTime","lastModifiedDate":"2022-10-16"},{"lineNumber":218,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedAppointmentPredicateWithOnlyDateTime(targetTime, maxTime);","lastModifiedDate":"2022-10-16"},{"lineNumber":219,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":220,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":221,"author":{"gitId":"NicholasTYD"},"content":"        // No restrictions","lastModifiedDate":"2022-10-16"},{"lineNumber":222,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedAppointmentPredicateWithOnlyDateTime(minTime, maxTime);","lastModifiedDate":"2022-10-16"},{"lineNumber":223,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":224,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":225,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":226,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-16"},{"lineNumber":227,"author":{"gitId":"NicholasTYD"},"content":"    public void test_appointmentNotFufillPredicateDateTimeOnly_returnsFalse() {","lastModifiedDate":"2022-10-25"},{"lineNumber":228,"author":{"gitId":"NicholasTYD"},"content":"        Appointment appointmentToTest \u003d new AppointmentBuilder().withDateTime(targetTime).build();","lastModifiedDate":"2022-10-16"},{"lineNumber":229,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":230,"author":{"gitId":"NicholasTYD"},"content":"        // Before range","lastModifiedDate":"2022-10-16"},{"lineNumber":231,"author":{"gitId":"NicholasTYD"},"content":"        CombinedAppointmentPredicate predicate \u003d","lastModifiedDate":"2022-10-16"},{"lineNumber":232,"author":{"gitId":"NicholasTYD"},"content":"                generateCombinedAppointmentPredicateWithOnlyDateTime(afterTargetTime, afterAfterTargetTime);","lastModifiedDate":"2022-10-16"},{"lineNumber":233,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":234,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":235,"author":{"gitId":"NicholasTYD"},"content":"        // After range","lastModifiedDate":"2022-10-16"},{"lineNumber":236,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedAppointmentPredicateWithOnlyDateTime(beforeBeforeTargetTime, beforeTargetTime);","lastModifiedDate":"2022-10-16"},{"lineNumber":237,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":238,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":239,"author":{"gitId":"NicholasTYD"},"content":"        // Before range, no endTime restriction","lastModifiedDate":"2022-10-16"},{"lineNumber":240,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedAppointmentPredicateWithOnlyDateTime(afterTargetTime, maxTime);","lastModifiedDate":"2022-10-16"},{"lineNumber":241,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":242,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":243,"author":{"gitId":"NicholasTYD"},"content":"        // After range, noStartTime restriction","lastModifiedDate":"2022-10-16"},{"lineNumber":244,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedAppointmentPredicateWithOnlyDateTime(minTime, beforeTargetTime);","lastModifiedDate":"2022-10-16"},{"lineNumber":245,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":246,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":247,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":248,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-25"},{"lineNumber":249,"author":{"gitId":"NicholasTYD"},"content":"    public void test_appointmentFufillsPredicateTagOnly_returnsTrue() {","lastModifiedDate":"2022-10-25"},{"lineNumber":250,"author":{"gitId":"NicholasTYD"},"content":"        Appointment appointmentToTest \u003d new AppointmentBuilder().withDateTime(targetTime).withTags(tag1, tag2).build();","lastModifiedDate":"2022-10-25"},{"lineNumber":251,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":252,"author":{"gitId":"NicholasTYD"},"content":"        // Contains all tags","lastModifiedDate":"2022-10-25"},{"lineNumber":253,"author":{"gitId":"NicholasTYD"},"content":"        CombinedAppointmentPredicate predicate \u003d generateCombinedAppointmentPredicateWithOnlyTags(tag1, tag2);","lastModifiedDate":"2022-10-25"},{"lineNumber":254,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-25"},{"lineNumber":255,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":256,"author":{"gitId":"NicholasTYD"},"content":"        // Contains only 1 tag","lastModifiedDate":"2022-10-25"},{"lineNumber":257,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedAppointmentPredicateWithOnlyTags(tag2);","lastModifiedDate":"2022-10-25"},{"lineNumber":258,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-25"},{"lineNumber":259,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":260,"author":{"gitId":"NicholasTYD"},"content":"        // Contains tag, mixed-case works","lastModifiedDate":"2022-10-25"},{"lineNumber":261,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedAppointmentPredicateWithOnlyTags(\"EaR\");","lastModifiedDate":"2022-10-25"},{"lineNumber":262,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-25"},{"lineNumber":263,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-25"},{"lineNumber":264,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":265,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-25"},{"lineNumber":266,"author":{"gitId":"NicholasTYD"},"content":"    public void test_appointmentNotFufillsPredicateTagOnly_returnsFalse() {","lastModifiedDate":"2022-10-25"},{"lineNumber":267,"author":{"gitId":"NicholasTYD"},"content":"        Appointment appointmentToTest \u003d new AppointmentBuilder().withDateTime(targetTime).withTags(tag1, tag2).build();","lastModifiedDate":"2022-10-25"},{"lineNumber":268,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":269,"author":{"gitId":"NicholasTYD"},"content":"        // Non-matching tag","lastModifiedDate":"2022-10-25"},{"lineNumber":270,"author":{"gitId":"NicholasTYD"},"content":"        CombinedAppointmentPredicate predicate \u003d generateCombinedAppointmentPredicateWithOnlyTags(tag3);","lastModifiedDate":"2022-10-25"},{"lineNumber":271,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-25"},{"lineNumber":272,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":273,"author":{"gitId":"NicholasTYD"},"content":"        // Some tags not match","lastModifiedDate":"2022-10-25"},{"lineNumber":274,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedAppointmentPredicateWithOnlyTags(tag1, tag2, tag3);","lastModifiedDate":"2022-10-25"},{"lineNumber":275,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(appointmentToTest));","lastModifiedDate":"2022-10-25"},{"lineNumber":276,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-25"},{"lineNumber":277,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-14"}],"authorContributionMap":{"NicholasTYD":277}},{"path":"src/test/java/seedu/address/model/person/predicates/CombinedPersonPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2022-10-14"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-15"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2022-10-15"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-15"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMPTY_STRING;","lastModifiedDate":"2022-10-15"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.PredicateGeneratorUtil.generateCombinedPersonPredicate;","lastModifiedDate":"2022-10-16"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.PredicateGeneratorUtil.generateCombinedPersonPredicateWithOnlyAddress;","lastModifiedDate":"2022-10-16"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.PredicateGeneratorUtil.generateCombinedPersonPredicateWithOnlyEmail;","lastModifiedDate":"2022-10-16"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.PredicateGeneratorUtil.generateCombinedPersonPredicateWithOnlyName;","lastModifiedDate":"2022-10-16"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.PredicateGeneratorUtil.generateCombinedPersonPredicateWithOnlyPhone;","lastModifiedDate":"2022-10-16"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.PredicateGeneratorUtil.generateCombinedPersonPredicateWithOnlyTags;","lastModifiedDate":"2022-10-16"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-14"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-14"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2022-10-14"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"class CombinedPersonPredicateTest {","lastModifiedDate":"2022-10-14"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"    private final String name \u003d \"John\";","lastModifiedDate":"2022-10-14"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"    private final String phone \u003d \"12345678\";","lastModifiedDate":"2022-10-14"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"    private final String email \u003d \"john@gmail.com\";","lastModifiedDate":"2022-10-14"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"    private final String address \u003d \"Blk 123 Code Road\";","lastModifiedDate":"2022-10-14"},{"lineNumber":25,"author":{"gitId":"pwjj2000"},"content":"    private final String tag1 \u003d \"EAR\";","lastModifiedDate":"2022-10-21"},{"lineNumber":26,"author":{"gitId":"pwjj2000"},"content":"    private final String tag2 \u003d \"NOSE\";","lastModifiedDate":"2022-10-21"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"    private final String combinedTags \u003d tag1 + \" \" + tag2;","lastModifiedDate":"2022-10-14"},{"lineNumber":28,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"    private final String differentName \u003d \"Max\";","lastModifiedDate":"2022-10-14"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"    private final String differentPhone \u003d \"999999\";","lastModifiedDate":"2022-10-14"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"    private final String differentEmail \u003d \"max@gmail.com\";","lastModifiedDate":"2022-10-14"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"    private final String differentAddress \u003d \"Max road\";","lastModifiedDate":"2022-10-14"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"    private final String differentTagString \u003d \"Tag3\";","lastModifiedDate":"2022-10-14"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-14"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"    public void equals() {","lastModifiedDate":"2022-10-14"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"        CombinedPersonPredicate firstPredicate \u003d generateCombinedPersonPredicate(name, phone, email, address, tag1);","lastModifiedDate":"2022-10-16"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"        CombinedPersonPredicate firstPredicateCopy \u003d generateCombinedPersonPredicate(name, phone, email, address, tag1);","lastModifiedDate":"2022-10-16"},{"lineNumber":40,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"        CombinedPersonPredicate differentPredicate \u003d generateCombinedPersonPredicate(","lastModifiedDate":"2022-10-16"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"                differentName, differentPhone, differentEmail, differentAddress, differentTagString);","lastModifiedDate":"2022-10-14"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"        PredicateTestUtil.assertBasicEqualities(firstPredicate, firstPredicateCopy, differentPredicate);","lastModifiedDate":"2022-10-14"},{"lineNumber":45,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"        // Empty predicate not equals","lastModifiedDate":"2022-10-14"},{"lineNumber":47,"author":{"gitId":"NicholasTYD"},"content":"        CombinedPersonPredicate testPredicate \u003d generateCombinedPersonPredicate(","lastModifiedDate":"2022-10-16"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"                EMPTY_STRING, EMPTY_STRING, EMPTY_STRING, EMPTY_STRING, EMPTY_STRING);","lastModifiedDate":"2022-10-15"},{"lineNumber":49,"author":{"gitId":"NicholasTYD"},"content":"        assertNotEquals(testPredicate, firstPredicate);","lastModifiedDate":"2022-10-14"},{"lineNumber":50,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":51,"author":{"gitId":"NicholasTYD"},"content":"        // Different name not equals","lastModifiedDate":"2022-10-14"},{"lineNumber":52,"author":{"gitId":"NicholasTYD"},"content":"        testPredicate \u003d generateCombinedPersonPredicate(differentName, phone, email, address, tag1);","lastModifiedDate":"2022-10-16"},{"lineNumber":53,"author":{"gitId":"NicholasTYD"},"content":"        assertNotEquals(testPredicate, firstPredicate);","lastModifiedDate":"2022-10-14"},{"lineNumber":54,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":55,"author":{"gitId":"NicholasTYD"},"content":"        // Different phone not equals","lastModifiedDate":"2022-10-14"},{"lineNumber":56,"author":{"gitId":"NicholasTYD"},"content":"        testPredicate \u003d generateCombinedPersonPredicate(name, differentPhone, email, address, tag1);","lastModifiedDate":"2022-10-16"},{"lineNumber":57,"author":{"gitId":"NicholasTYD"},"content":"        assertNotEquals(testPredicate, firstPredicate);","lastModifiedDate":"2022-10-14"},{"lineNumber":58,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":59,"author":{"gitId":"NicholasTYD"},"content":"        // Different email not equals","lastModifiedDate":"2022-10-14"},{"lineNumber":60,"author":{"gitId":"NicholasTYD"},"content":"        testPredicate \u003d generateCombinedPersonPredicate(name, phone, differentEmail, address, tag1);","lastModifiedDate":"2022-10-16"},{"lineNumber":61,"author":{"gitId":"NicholasTYD"},"content":"        assertNotEquals(testPredicate, firstPredicate);","lastModifiedDate":"2022-10-14"},{"lineNumber":62,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":63,"author":{"gitId":"NicholasTYD"},"content":"        // Different address not equals","lastModifiedDate":"2022-10-14"},{"lineNumber":64,"author":{"gitId":"NicholasTYD"},"content":"        testPredicate \u003d generateCombinedPersonPredicate(name, phone, email, differentAddress, tag1);","lastModifiedDate":"2022-10-16"},{"lineNumber":65,"author":{"gitId":"NicholasTYD"},"content":"        assertNotEquals(testPredicate, firstPredicate);","lastModifiedDate":"2022-10-14"},{"lineNumber":66,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":67,"author":{"gitId":"NicholasTYD"},"content":"        // Different tag not equals","lastModifiedDate":"2022-10-14"},{"lineNumber":68,"author":{"gitId":"NicholasTYD"},"content":"        testPredicate \u003d generateCombinedPersonPredicate(name, phone, email, address, differentTagString);","lastModifiedDate":"2022-10-16"},{"lineNumber":69,"author":{"gitId":"NicholasTYD"},"content":"        assertNotEquals(testPredicate, firstPredicate);","lastModifiedDate":"2022-10-14"},{"lineNumber":70,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":71,"author":{"gitId":"NicholasTYD"},"content":"        // Not full tag match not equals","lastModifiedDate":"2022-10-14"},{"lineNumber":72,"author":{"gitId":"NicholasTYD"},"content":"        String extraTagString \u003d tag1 + \" \" + \"ExtraTag\";","lastModifiedDate":"2022-10-14"},{"lineNumber":73,"author":{"gitId":"NicholasTYD"},"content":"        testPredicate \u003d generateCombinedPersonPredicate(name, phone, email, address, extraTagString);","lastModifiedDate":"2022-10-16"},{"lineNumber":74,"author":{"gitId":"NicholasTYD"},"content":"        assertNotEquals(testPredicate, firstPredicate);","lastModifiedDate":"2022-10-14"},{"lineNumber":75,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":76,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":77,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-14"},{"lineNumber":78,"author":{"gitId":"pwjj2000"},"content":"    public void test_personFulfillsPredicateMixedFields_returnsTrue() {","lastModifiedDate":"2022-10-21"},{"lineNumber":79,"author":{"gitId":"NicholasTYD"},"content":"        Person personToTest \u003d new PersonBuilder().withName(name).withPhone(phone).withEmail(email)","lastModifiedDate":"2022-10-14"},{"lineNumber":80,"author":{"gitId":"NicholasTYD"},"content":"                .withAddress(address).withTags(tag1, tag2).build();","lastModifiedDate":"2022-10-14"},{"lineNumber":81,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":82,"author":{"gitId":"NicholasTYD"},"content":"        // Same search criteria","lastModifiedDate":"2022-10-14"},{"lineNumber":83,"author":{"gitId":"NicholasTYD"},"content":"        CombinedPersonPredicate predicate \u003d generateCombinedPersonPredicate(name, phone, email, address, combinedTags);","lastModifiedDate":"2022-10-16"},{"lineNumber":84,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(personToTest));","lastModifiedDate":"2022-10-14"},{"lineNumber":85,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":86,"author":{"gitId":"NicholasTYD"},"content":"        // Can find without full match (Except tags which needs to be word for word)","lastModifiedDate":"2022-10-14"},{"lineNumber":87,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedPersonPredicate(\"John\", \"1234\", \"john\", \"123\", tag1);","lastModifiedDate":"2022-10-16"},{"lineNumber":88,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(personToTest));","lastModifiedDate":"2022-10-14"},{"lineNumber":89,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":90,"author":{"gitId":"NicholasTYD"},"content":"        // Some fields empty, but matches","lastModifiedDate":"2022-10-14"},{"lineNumber":91,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedPersonPredicate(EMPTY_STRING, EMPTY_STRING, EMPTY_STRING, EMPTY_STRING, tag2);","lastModifiedDate":"2022-10-16"},{"lineNumber":92,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(personToTest));","lastModifiedDate":"2022-10-14"},{"lineNumber":93,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":94,"author":{"gitId":"NicholasTYD"},"content":"        // No criteria","lastModifiedDate":"2022-10-14"},{"lineNumber":95,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedPersonPredicate(","lastModifiedDate":"2022-10-16"},{"lineNumber":96,"author":{"gitId":"NicholasTYD"},"content":"                EMPTY_STRING, EMPTY_STRING, EMPTY_STRING, EMPTY_STRING, EMPTY_STRING);","lastModifiedDate":"2022-10-15"},{"lineNumber":97,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(personToTest));","lastModifiedDate":"2022-10-14"},{"lineNumber":98,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":99,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":100,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-14"},{"lineNumber":101,"author":{"gitId":"pwjj2000"},"content":"    public void test_personNotFulfillPredicateMixedFields_returnsFalse() {","lastModifiedDate":"2022-10-21"},{"lineNumber":102,"author":{"gitId":"NicholasTYD"},"content":"        Person personToTest \u003d new PersonBuilder().withName(name).withPhone(phone).withEmail(email)","lastModifiedDate":"2022-10-14"},{"lineNumber":103,"author":{"gitId":"NicholasTYD"},"content":"                .withAddress(address).withTags(tag1, tag2).build();","lastModifiedDate":"2022-10-14"},{"lineNumber":104,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":105,"author":{"gitId":"NicholasTYD"},"content":"        // Different search criteria","lastModifiedDate":"2022-10-14"},{"lineNumber":106,"author":{"gitId":"NicholasTYD"},"content":"        CombinedPersonPredicate predicate \u003d generateCombinedPersonPredicate(","lastModifiedDate":"2022-10-16"},{"lineNumber":107,"author":{"gitId":"NicholasTYD"},"content":"                differentName, differentPhone, differentEmail, differentAddress, differentTagString);","lastModifiedDate":"2022-10-14"},{"lineNumber":108,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(personToTest));","lastModifiedDate":"2022-10-14"},{"lineNumber":109,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":110,"author":{"gitId":"NicholasTYD"},"content":"        // Different search criteria but some fields empty","lastModifiedDate":"2022-10-14"},{"lineNumber":111,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedPersonPredicate(","lastModifiedDate":"2022-10-16"},{"lineNumber":112,"author":{"gitId":"NicholasTYD"},"content":"                differentName, EMPTY_STRING, EMPTY_STRING, EMPTY_STRING, EMPTY_STRING);","lastModifiedDate":"2022-10-15"},{"lineNumber":113,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(personToTest));","lastModifiedDate":"2022-10-14"},{"lineNumber":114,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":115,"author":{"gitId":"NicholasTYD"},"content":"        // Not match all tags","lastModifiedDate":"2022-10-14"},{"lineNumber":116,"author":{"gitId":"NicholasTYD"},"content":"        String someTagsNotInPerson \u003d tag1 + \" \" + tag2 + \" \" + \"notInPerson\";","lastModifiedDate":"2022-10-14"},{"lineNumber":117,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedPersonPredicate(","lastModifiedDate":"2022-10-16"},{"lineNumber":118,"author":{"gitId":"NicholasTYD"},"content":"                EMPTY_STRING, EMPTY_STRING, EMPTY_STRING, EMPTY_STRING, someTagsNotInPerson);","lastModifiedDate":"2022-10-15"},{"lineNumber":119,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(personToTest));","lastModifiedDate":"2022-10-14"},{"lineNumber":120,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":121,"author":{"gitId":"NicholasTYD"},"content":"        // Matches all but 1 field","lastModifiedDate":"2022-10-14"},{"lineNumber":122,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedPersonPredicate(name, phone, differentEmail, address, combinedTags);","lastModifiedDate":"2022-10-16"},{"lineNumber":123,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(personToTest));","lastModifiedDate":"2022-10-14"},{"lineNumber":124,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":125,"author":{"gitId":"NicholasTYD"},"content":"        // Tag not word for word match","lastModifiedDate":"2022-10-14"},{"lineNumber":126,"author":{"gitId":"NicholasTYD"},"content":"        String similarLookingButDifferentTag \u003d \"Tag\";","lastModifiedDate":"2022-10-14"},{"lineNumber":127,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedPersonPredicate(","lastModifiedDate":"2022-10-16"},{"lineNumber":128,"author":{"gitId":"NicholasTYD"},"content":"                EMPTY_STRING, EMPTY_STRING, EMPTY_STRING, EMPTY_STRING, similarLookingButDifferentTag);","lastModifiedDate":"2022-10-15"},{"lineNumber":129,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(personToTest));","lastModifiedDate":"2022-10-14"},{"lineNumber":130,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":131,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":132,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-16"},{"lineNumber":133,"author":{"gitId":"pwjj2000"},"content":"    public void test_personFulfillsPredicateNameOnly_returnsTrue() {","lastModifiedDate":"2022-10-21"},{"lineNumber":134,"author":{"gitId":"NicholasTYD"},"content":"        String nameToTest \u003d \"Alice Yeoh\";","lastModifiedDate":"2022-10-16"},{"lineNumber":135,"author":{"gitId":"NicholasTYD"},"content":"        Person personToTest \u003d new PersonBuilder().withName(nameToTest).build();","lastModifiedDate":"2022-10-16"},{"lineNumber":136,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":137,"author":{"gitId":"NicholasTYD"},"content":"        // Same name","lastModifiedDate":"2022-10-16"},{"lineNumber":138,"author":{"gitId":"NicholasTYD"},"content":"        CombinedPersonPredicate predicate \u003d generateCombinedPersonPredicateWithOnlyName(nameToTest);","lastModifiedDate":"2022-10-16"},{"lineNumber":139,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(personToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":140,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":141,"author":{"gitId":"NicholasTYD"},"content":"        // Contains sequence","lastModifiedDate":"2022-10-16"},{"lineNumber":142,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedPersonPredicateWithOnlyName(\"Ali\");","lastModifiedDate":"2022-10-16"},{"lineNumber":143,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(personToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":144,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":145,"author":{"gitId":"NicholasTYD"},"content":"        // Can find names through spaces","lastModifiedDate":"2022-10-16"},{"lineNumber":146,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedPersonPredicateWithOnlyName(\"ce Ye\");","lastModifiedDate":"2022-10-16"},{"lineNumber":147,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(personToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":148,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":149,"author":{"gitId":"NicholasTYD"},"content":"        // Mixed-case sequence","lastModifiedDate":"2022-10-16"},{"lineNumber":150,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedPersonPredicateWithOnlyName(\"iCE yEO\");","lastModifiedDate":"2022-10-16"},{"lineNumber":151,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(personToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":152,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":153,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":154,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-16"},{"lineNumber":155,"author":{"gitId":"pwjj2000"},"content":"    public void test_personNotFulfillPredicateNameOnly_returnsFalse() {","lastModifiedDate":"2022-10-21"},{"lineNumber":156,"author":{"gitId":"NicholasTYD"},"content":"        String nameToTest \u003d \"John Doe\";","lastModifiedDate":"2022-10-16"},{"lineNumber":157,"author":{"gitId":"NicholasTYD"},"content":"        Person personToTest \u003d new PersonBuilder().withName(nameToTest).build();","lastModifiedDate":"2022-10-16"},{"lineNumber":158,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":159,"author":{"gitId":"NicholasTYD"},"content":"        // Non-matching sequence","lastModifiedDate":"2022-10-16"},{"lineNumber":160,"author":{"gitId":"NicholasTYD"},"content":"        CombinedPersonPredicate predicate \u003d generateCombinedPersonPredicateWithOnlyName(\"Alice\");","lastModifiedDate":"2022-10-16"},{"lineNumber":161,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(personToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":162,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":163,"author":{"gitId":"NicholasTYD"},"content":"        // Incomplete match","lastModifiedDate":"2022-10-16"},{"lineNumber":164,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedPersonPredicateWithOnlyName(\"Johnny\");","lastModifiedDate":"2022-10-16"},{"lineNumber":165,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(personToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":166,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":167,"author":{"gitId":"NicholasTYD"},"content":"        // Incomplete match","lastModifiedDate":"2022-10-16"},{"lineNumber":168,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedPersonPredicateWithOnlyName(\"John Does\");","lastModifiedDate":"2022-10-16"},{"lineNumber":169,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(personToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":170,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":171,"author":{"gitId":"NicholasTYD"},"content":"        // Keywords match phone, email and address, but does not match name","lastModifiedDate":"2022-10-16"},{"lineNumber":172,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedPersonPredicateWithOnlyName(\"John\");","lastModifiedDate":"2022-10-16"},{"lineNumber":173,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"12345\").withPhone(\"12345\")","lastModifiedDate":"2022-10-16"},{"lineNumber":174,"author":{"gitId":"NicholasTYD"},"content":"                .withEmail(\"John@gmail.com\").withAddress(\"John Street\").build()));","lastModifiedDate":"2022-10-16"},{"lineNumber":175,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":176,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":177,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-16"},{"lineNumber":178,"author":{"gitId":"pwjj2000"},"content":"    public void test_personFulfillsPredicatePhoneOnly_returnsTrue() {","lastModifiedDate":"2022-10-21"},{"lineNumber":179,"author":{"gitId":"NicholasTYD"},"content":"        String phoneToTest \u003d \"44556677\";","lastModifiedDate":"2022-10-16"},{"lineNumber":180,"author":{"gitId":"NicholasTYD"},"content":"        Person personToTest \u003d new PersonBuilder().withPhone(phoneToTest).build();","lastModifiedDate":"2022-10-16"},{"lineNumber":181,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":182,"author":{"gitId":"NicholasTYD"},"content":"        // Same phone","lastModifiedDate":"2022-10-16"},{"lineNumber":183,"author":{"gitId":"NicholasTYD"},"content":"        CombinedPersonPredicate predicate \u003d generateCombinedPersonPredicateWithOnlyPhone(phoneToTest);","lastModifiedDate":"2022-10-16"},{"lineNumber":184,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(personToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":185,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":186,"author":{"gitId":"NicholasTYD"},"content":"        // Contains sequence","lastModifiedDate":"2022-10-16"},{"lineNumber":187,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedPersonPredicateWithOnlyPhone(\"5667\");","lastModifiedDate":"2022-10-16"},{"lineNumber":188,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(personToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":189,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":190,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":191,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-16"},{"lineNumber":192,"author":{"gitId":"pwjj2000"},"content":"    public void test_personNotFulfillPredicatePhoneOnly_returnsFalse() {","lastModifiedDate":"2022-10-21"},{"lineNumber":193,"author":{"gitId":"NicholasTYD"},"content":"        String phoneToTest \u003d \"12345678\";","lastModifiedDate":"2022-10-16"},{"lineNumber":194,"author":{"gitId":"NicholasTYD"},"content":"        Person personToTest \u003d new PersonBuilder().withPhone(phoneToTest).build();","lastModifiedDate":"2022-10-16"},{"lineNumber":195,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":196,"author":{"gitId":"NicholasTYD"},"content":"        // Non-matching sequence","lastModifiedDate":"2022-10-16"},{"lineNumber":197,"author":{"gitId":"NicholasTYD"},"content":"        CombinedPersonPredicate predicate \u003d generateCombinedPersonPredicateWithOnlyPhone(\"99999\");","lastModifiedDate":"2022-10-16"},{"lineNumber":198,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(personToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":199,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":200,"author":{"gitId":"NicholasTYD"},"content":"        // Incomplete match","lastModifiedDate":"2022-10-16"},{"lineNumber":201,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedPersonPredicateWithOnlyPhone(\"24\");","lastModifiedDate":"2022-10-16"},{"lineNumber":202,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(personToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":203,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":204,"author":{"gitId":"NicholasTYD"},"content":"        // Incomplete match","lastModifiedDate":"2022-10-16"},{"lineNumber":205,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedPersonPredicateWithOnlyPhone(\"1234567890\");","lastModifiedDate":"2022-10-16"},{"lineNumber":206,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(personToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":207,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":208,"author":{"gitId":"NicholasTYD"},"content":"        // Sequence match name, email and address, but does not match phone","lastModifiedDate":"2022-10-16"},{"lineNumber":209,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedPersonPredicateWithOnlyPhone(\"12345\");","lastModifiedDate":"2022-10-16"},{"lineNumber":210,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"12345\").withPhone(\"99999\")","lastModifiedDate":"2022-10-16"},{"lineNumber":211,"author":{"gitId":"NicholasTYD"},"content":"                .withEmail(\"12345@email.com\").withAddress(\"12345 Street\").build()));","lastModifiedDate":"2022-10-16"},{"lineNumber":212,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":213,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":214,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-16"},{"lineNumber":215,"author":{"gitId":"pwjj2000"},"content":"    public void test_personFulfillsPredicateEmailOnly_returnsTrue() {","lastModifiedDate":"2022-10-21"},{"lineNumber":216,"author":{"gitId":"NicholasTYD"},"content":"        String emailToTest \u003d \"Alice@gmail.com\";","lastModifiedDate":"2022-10-16"},{"lineNumber":217,"author":{"gitId":"NicholasTYD"},"content":"        Person personToTest \u003d new PersonBuilder().withEmail(emailToTest).build();","lastModifiedDate":"2022-10-16"},{"lineNumber":218,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":219,"author":{"gitId":"NicholasTYD"},"content":"        // Same email","lastModifiedDate":"2022-10-16"},{"lineNumber":220,"author":{"gitId":"NicholasTYD"},"content":"        CombinedPersonPredicate predicate \u003d generateCombinedPersonPredicateWithOnlyEmail(emailToTest);","lastModifiedDate":"2022-10-16"},{"lineNumber":221,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(personToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":222,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":223,"author":{"gitId":"NicholasTYD"},"content":"        // Contains sequence","lastModifiedDate":"2022-10-16"},{"lineNumber":224,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedPersonPredicateWithOnlyEmail(\"gmail\");","lastModifiedDate":"2022-10-16"},{"lineNumber":225,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(personToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":226,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":227,"author":{"gitId":"NicholasTYD"},"content":"        // Can find non-alphanumeric characters","lastModifiedDate":"2022-10-16"},{"lineNumber":228,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedPersonPredicateWithOnlyEmail(\"ce@gmail.c\");","lastModifiedDate":"2022-10-16"},{"lineNumber":229,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(personToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":230,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":231,"author":{"gitId":"NicholasTYD"},"content":"        // Mixed-case sequence","lastModifiedDate":"2022-10-16"},{"lineNumber":232,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedPersonPredicateWithOnlyEmail(\"ICE@GMail.cOM\");","lastModifiedDate":"2022-10-16"},{"lineNumber":233,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(personToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":234,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":235,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":236,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-16"},{"lineNumber":237,"author":{"gitId":"pwjj2000"},"content":"    public void test_personNotFulfillPredicateEmailOnly_returnsFalse() {","lastModifiedDate":"2022-10-21"},{"lineNumber":238,"author":{"gitId":"NicholasTYD"},"content":"        String emailToTest \u003d \"John@gmail.com\";","lastModifiedDate":"2022-10-16"},{"lineNumber":239,"author":{"gitId":"NicholasTYD"},"content":"        Person personToTest \u003d new PersonBuilder().withEmail(emailToTest).build();","lastModifiedDate":"2022-10-16"},{"lineNumber":240,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":241,"author":{"gitId":"NicholasTYD"},"content":"        // Non-matching sequence","lastModifiedDate":"2022-10-16"},{"lineNumber":242,"author":{"gitId":"NicholasTYD"},"content":"        CombinedPersonPredicate predicate \u003d generateCombinedPersonPredicateWithOnlyEmail(\"google\");","lastModifiedDate":"2022-10-16"},{"lineNumber":243,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(personToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":244,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":245,"author":{"gitId":"NicholasTYD"},"content":"        // Incomplete match","lastModifiedDate":"2022-10-16"},{"lineNumber":246,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedPersonPredicateWithOnlyEmail(\"Johnny\");","lastModifiedDate":"2022-10-16"},{"lineNumber":247,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(personToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":248,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":249,"author":{"gitId":"NicholasTYD"},"content":"        // Incomplete match","lastModifiedDate":"2022-10-16"},{"lineNumber":250,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedPersonPredicateWithOnlyEmail(\"John@gmail.com.sg\");","lastModifiedDate":"2022-10-16"},{"lineNumber":251,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(personToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":252,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":253,"author":{"gitId":"NicholasTYD"},"content":"        // Sequence match name, phone and address, but does not match email","lastModifiedDate":"2022-10-16"},{"lineNumber":254,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedPersonPredicateWithOnlyEmail(\"John\");","lastModifiedDate":"2022-10-16"},{"lineNumber":255,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"John\").withPhone(\"12345\")","lastModifiedDate":"2022-10-16"},{"lineNumber":256,"author":{"gitId":"NicholasTYD"},"content":"                .withEmail(\"Alice@gmail.com\").withAddress(\"John Street\").build()));","lastModifiedDate":"2022-10-16"},{"lineNumber":257,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":258,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":259,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-16"},{"lineNumber":260,"author":{"gitId":"pwjj2000"},"content":"    public void test_personFulfillsPredicateAddressOnly_returnsTrue() {","lastModifiedDate":"2022-10-21"},{"lineNumber":261,"author":{"gitId":"NicholasTYD"},"content":"        String addressToTest \u003d \"Blk 22 Potato Street 29, #06-40, Singapore 123456\";","lastModifiedDate":"2022-10-16"},{"lineNumber":262,"author":{"gitId":"NicholasTYD"},"content":"        Person personToTest \u003d new PersonBuilder().withAddress(addressToTest).build();","lastModifiedDate":"2022-10-16"},{"lineNumber":263,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":264,"author":{"gitId":"NicholasTYD"},"content":"        // Same address","lastModifiedDate":"2022-10-16"},{"lineNumber":265,"author":{"gitId":"NicholasTYD"},"content":"        CombinedPersonPredicate predicate \u003d","lastModifiedDate":"2022-10-16"},{"lineNumber":266,"author":{"gitId":"NicholasTYD"},"content":"                generateCombinedPersonPredicateWithOnlyAddress(addressToTest);","lastModifiedDate":"2022-10-16"},{"lineNumber":267,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(personToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":268,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":269,"author":{"gitId":"NicholasTYD"},"content":"        // Contains sequence","lastModifiedDate":"2022-10-16"},{"lineNumber":270,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedPersonPredicateWithOnlyAddress(\"ato Str\");","lastModifiedDate":"2022-10-16"},{"lineNumber":271,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(personToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":272,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":273,"author":{"gitId":"NicholasTYD"},"content":"        // Mixed-case sequence","lastModifiedDate":"2022-10-16"},{"lineNumber":274,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedPersonPredicateWithOnlyAddress(\"SINgAPORE\");","lastModifiedDate":"2022-10-16"},{"lineNumber":275,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(personToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":276,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":277,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":278,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-16"},{"lineNumber":279,"author":{"gitId":"pwjj2000"},"content":"    public void test_personNotFulfillPredicateAddressOnly_returnsFalse() {","lastModifiedDate":"2022-10-21"},{"lineNumber":280,"author":{"gitId":"NicholasTYD"},"content":"        String addressToTest \u003d \"Potato Street, Blk 123 #12-34, Singapore 123456\";","lastModifiedDate":"2022-10-16"},{"lineNumber":281,"author":{"gitId":"NicholasTYD"},"content":"        Person personToTest \u003d new PersonBuilder().withAddress(addressToTest).build();","lastModifiedDate":"2022-10-16"},{"lineNumber":282,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":283,"author":{"gitId":"NicholasTYD"},"content":"        // Non-matching sequence","lastModifiedDate":"2022-10-16"},{"lineNumber":284,"author":{"gitId":"NicholasTYD"},"content":"        CombinedPersonPredicate predicate \u003d generateCombinedPersonPredicateWithOnlyAddress(\"Malaysia\");","lastModifiedDate":"2022-10-16"},{"lineNumber":285,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(personToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":286,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":287,"author":{"gitId":"NicholasTYD"},"content":"        // Incomplete match","lastModifiedDate":"2022-10-16"},{"lineNumber":288,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedPersonPredicateWithOnlyAddress(\"Blk 123a\");","lastModifiedDate":"2022-10-16"},{"lineNumber":289,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(personToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":290,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":291,"author":{"gitId":"NicholasTYD"},"content":"        // Incomplete match","lastModifiedDate":"2022-10-16"},{"lineNumber":292,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedPersonPredicateWithOnlyAddress(","lastModifiedDate":"2022-10-16"},{"lineNumber":293,"author":{"gitId":"NicholasTYD"},"content":"                \"Potato Street, Blk 123 #12-34, Singapore 123456789\");","lastModifiedDate":"2022-10-16"},{"lineNumber":294,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(personToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":295,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":296,"author":{"gitId":"NicholasTYD"},"content":"        // Sequence match name, phone, email, but does not match address","lastModifiedDate":"2022-10-16"},{"lineNumber":297,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedPersonPredicateWithOnlyAddress(\"12345\");","lastModifiedDate":"2022-10-16"},{"lineNumber":298,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"12345\").withPhone(\"12345\")","lastModifiedDate":"2022-10-16"},{"lineNumber":299,"author":{"gitId":"NicholasTYD"},"content":"                .withEmail(\"12345@gmail.com\").withAddress(\"Clementi Street Singapore 88888\").build()));","lastModifiedDate":"2022-10-16"},{"lineNumber":300,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":301,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":302,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-16"},{"lineNumber":303,"author":{"gitId":"pwjj2000"},"content":"    public void test_personFulfillsPredicateTagsOnly_returnsTrue() {","lastModifiedDate":"2022-10-21"},{"lineNumber":304,"author":{"gitId":"pwjj2000"},"content":"        String[] tagsToTest \u003d new String[]{\"ear\", \"nose\", \"throat\"};","lastModifiedDate":"2022-10-21"},{"lineNumber":305,"author":{"gitId":"NicholasTYD"},"content":"        Person personToTest \u003d new PersonBuilder().withTags(tagsToTest).build();","lastModifiedDate":"2022-10-16"},{"lineNumber":306,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":307,"author":{"gitId":"NicholasTYD"},"content":"        // Same tags","lastModifiedDate":"2022-10-16"},{"lineNumber":308,"author":{"gitId":"NicholasTYD"},"content":"        CombinedPersonPredicate predicate \u003d generateCombinedPersonPredicateWithOnlyTags(tagsToTest);","lastModifiedDate":"2022-10-16"},{"lineNumber":309,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(personToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":310,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":311,"author":{"gitId":"NicholasTYD"},"content":"        // Matches all search tags, mixed-case works","lastModifiedDate":"2022-10-16"},{"lineNumber":312,"author":{"gitId":"pwjj2000"},"content":"        predicate \u003d generateCombinedPersonPredicateWithOnlyTags(\"EAR\", \"NoSE\");","lastModifiedDate":"2022-10-21"},{"lineNumber":313,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(predicate.test(personToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":314,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":315,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":316,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-16"},{"lineNumber":317,"author":{"gitId":"pwjj2000"},"content":"    public void test_personNotFulfillPredicateTagsOnly_returnsFalse() {","lastModifiedDate":"2022-10-21"},{"lineNumber":318,"author":{"gitId":"pwjj2000"},"content":"        String[] tagsToTest \u003d new String[]{\"EAR\", \"NOSE\"};","lastModifiedDate":"2022-10-21"},{"lineNumber":319,"author":{"gitId":"NicholasTYD"},"content":"        Person personToTest \u003d new PersonBuilder().withTags(tagsToTest).build();","lastModifiedDate":"2022-10-16"},{"lineNumber":320,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":321,"author":{"gitId":"NicholasTYD"},"content":"        // Non-matching tag","lastModifiedDate":"2022-10-16"},{"lineNumber":322,"author":{"gitId":"pwjj2000"},"content":"        CombinedPersonPredicate predicate \u003d generateCombinedPersonPredicateWithOnlyTags(\"THROAT\");","lastModifiedDate":"2022-10-21"},{"lineNumber":323,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(personToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":324,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":325,"author":{"gitId":"NicholasTYD"},"content":"        // Different tag","lastModifiedDate":"2022-10-16"},{"lineNumber":326,"author":{"gitId":"NicholasTYD"},"content":"        predicate \u003d generateCombinedPersonPredicateWithOnlyTags(\"Tag60\");","lastModifiedDate":"2022-10-16"},{"lineNumber":327,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(personToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":328,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":329,"author":{"gitId":"NicholasTYD"},"content":"        // Some tags not match","lastModifiedDate":"2022-10-16"},{"lineNumber":330,"author":{"gitId":"pwjj2000"},"content":"        predicate \u003d generateCombinedPersonPredicateWithOnlyTags(\"EAR\", \"NOSE\", \"THROAT\");","lastModifiedDate":"2022-10-21"},{"lineNumber":331,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(predicate.test(personToTest));","lastModifiedDate":"2022-10-16"},{"lineNumber":332,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":333,"author":{"gitId":"NicholasTYD"},"content":"        // Tags match name and address, but does not match tag","lastModifiedDate":"2022-10-16"},{"lineNumber":334,"author":{"gitId":"pwjj2000"},"content":"        predicate \u003d generateCombinedPersonPredicateWithOnlyTags(\"EAR\");","lastModifiedDate":"2022-10-21"},{"lineNumber":335,"author":{"gitId":"pwjj2000"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"EAR\").withEmail(\"Tag@gmail.com\")","lastModifiedDate":"2022-10-21"},{"lineNumber":336,"author":{"gitId":"pwjj2000"},"content":"                .withAddress(\"EAR\").withTags(\"NOSE\").build()));","lastModifiedDate":"2022-10-21"},{"lineNumber":337,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":338,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-14"}],"authorContributionMap":{"NicholasTYD":316,"pwjj2000":22}},{"path":"src/test/java/seedu/address/model/person/predicates/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2022-10-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicateTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2022-10-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"        PredicateTestUtil.assertBasicEqualities(firstPredicate, firstPredicateCopy, secondPredicate);","lastModifiedDate":"2022-10-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2017-08-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // One keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // Multiple keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // Only one matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // Mixed-case keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2017-08-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // Zero keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // Non-matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // Keywords match phone, email and address, but does not match name","lastModifiedDate":"2017-06-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"NicholasTYD":3,"-":59}},{"path":"src/test/java/seedu/address/model/person/predicates/PredicateTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.model.person.predicates;","lastModifiedDate":"2022-10-14"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-10-14"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-14"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2022-10-14"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"/**","lastModifiedDate":"2022-10-14"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":" * Contains helper methods for testing Predicates.","lastModifiedDate":"2022-10-14"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":" */","lastModifiedDate":"2022-10-14"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"public class PredicateTestUtil {","lastModifiedDate":"2022-10-14"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-14"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"     * Checks that 2 Predicates are equal to each other according to their equals() method.","lastModifiedDate":"2022-10-14"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"     *","lastModifiedDate":"2022-10-14"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"     * @param firstPredicate A predicate to compare","lastModifiedDate":"2022-10-14"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"     * @param firstPredicateCopy A copy of the firstPredicate that should be equal to {@code firstPredicate}","lastModifiedDate":"2022-10-14"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"     * @param secondPredicate Another predicate that should be not equal to {@code firstPredicate}","lastModifiedDate":"2022-10-14"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"     * @param \u003cT\u003e Any class that extends {@code Predicate}","lastModifiedDate":"2022-10-16"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-14"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"    public static \u003cT extends Predicate\u003c?\u003e\u003e void assertBasicEqualities(T firstPredicate, T firstPredicateCopy,","lastModifiedDate":"2022-10-14"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"                                                                      T secondPredicate) {","lastModifiedDate":"2022-10-14"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"        // same object -\u003e equals","lastModifiedDate":"2022-10-14"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"        assertEquals(firstPredicate, firstPredicate);","lastModifiedDate":"2022-10-14"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"        // same values -\u003e equals","lastModifiedDate":"2022-10-14"},{"lineNumber":28,"author":{"gitId":"NicholasTYD"},"content":"        assertEquals(firstPredicate, firstPredicateCopy);","lastModifiedDate":"2022-10-14"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2022-10-14"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2022-10-14"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"        // null -\u003e not equal","lastModifiedDate":"2022-10-14"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"        assertNotEquals(null, firstPredicate);","lastModifiedDate":"2022-10-14"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"        // different search info -\u003e not equal","lastModifiedDate":"2022-10-14"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"        assertNotEquals(firstPredicate, secondPredicate);","lastModifiedDate":"2022-10-14"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-14"}],"authorContributionMap":{"NicholasTYD":39}},{"path":"src/test/java/seedu/address/model/tag/TagTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.tag;","lastModifiedDate":"2017-12-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":3,"author":{"gitId":"WingKei67"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-10-22"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TagTest {","lastModifiedDate":"2017-12-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"pwjj2000"},"content":"        assertThrows(NullPointerException.class, () -\u003e Tag.convertToTag(null));","lastModifiedDate":"2022-10-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void constructor_invalidTagName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        String invalidTagName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"pwjj2000"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Tag.convertToTag(invalidTagName));","lastModifiedDate":"2022-10-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void isValidTagName() {","lastModifiedDate":"2017-12-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        // null tag name","lastModifiedDate":"2017-12-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"WingKei67"},"content":"    @Test","lastModifiedDate":"2022-10-22"},{"lineNumber":28,"author":{"gitId":"WingKei67"},"content":"    public void isTagNameCorrect() {","lastModifiedDate":"2022-10-22"},{"lineNumber":29,"author":{"gitId":"WingKei67"},"content":"        assertEquals(Tag.EAR.toString(), \"Ear\");","lastModifiedDate":"2022-10-22"},{"lineNumber":30,"author":{"gitId":"WingKei67"},"content":"        assertEquals(Tag.NOSE.toString(), \"Nose\");","lastModifiedDate":"2022-10-22"},{"lineNumber":31,"author":{"gitId":"WingKei67"},"content":"        assertEquals(Tag.THROAT.toString(), \"Throat\");","lastModifiedDate":"2022-10-22"},{"lineNumber":32,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-22"},{"lineNumber":33,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":34,"author":{"gitId":"WingKei67"},"content":"    @Test","lastModifiedDate":"2022-10-22"},{"lineNumber":35,"author":{"gitId":"WingKei67"},"content":"    public void isTagConversionCorrect() {","lastModifiedDate":"2022-10-22"},{"lineNumber":36,"author":{"gitId":"WingKei67"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Tag.convertToTag(\"Eye\"));","lastModifiedDate":"2022-10-22"},{"lineNumber":37,"author":{"gitId":"WingKei67"},"content":"        assertEquals(Tag.convertToTag(\"Ear\"), Tag.EAR);","lastModifiedDate":"2022-10-22"},{"lineNumber":38,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-12-04"}],"authorContributionMap":{"WingKei67":13,"-":24,"pwjj2000":2}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"    private static final String INVALID_REASON \u003d \"\";","lastModifiedDate":"2022-10-01"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"    private static final String INVALID_DATE \u003d \"2019-14-10 25:30\";","lastModifiedDate":"2022-10-01"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"    private static final String INVALID_TIME_PERIOD \u003d \"43M\";","lastModifiedDate":"2022-10-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"    private static final List\u003cJsonAdaptedAppointment\u003e VALID_APPOINTMENTS \u003d BENSON.getAppointments().stream()","lastModifiedDate":"2022-10-01"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"            .map(JsonAdaptedAppointment::new)","lastModifiedDate":"2022-10-01"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2022-10-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_APPOINTMENTS,","lastModifiedDate":"2022-10-01"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"                        VALID_TAGS);","lastModifiedDate":"2022-10-01"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"JovonLim"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2022-10-01"},{"lineNumber":59,"author":{"gitId":"JovonLim"},"content":"                VALID_APPOINTMENTS, VALID_TAGS);","lastModifiedDate":"2022-10-01"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"JovonLim"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_APPOINTMENTS,","lastModifiedDate":"2022-10-01"},{"lineNumber":68,"author":{"gitId":"JovonLim"},"content":"                        VALID_TAGS);","lastModifiedDate":"2022-10-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"JovonLim"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2022-10-01"},{"lineNumber":76,"author":{"gitId":"JovonLim"},"content":"                VALID_APPOINTMENTS, VALID_TAGS);","lastModifiedDate":"2022-10-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"JovonLim"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_APPOINTMENTS,","lastModifiedDate":"2022-10-01"},{"lineNumber":85,"author":{"gitId":"JovonLim"},"content":"                        VALID_TAGS);","lastModifiedDate":"2022-10-01"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"JovonLim"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,","lastModifiedDate":"2022-10-01"},{"lineNumber":93,"author":{"gitId":"JovonLim"},"content":"                VALID_APPOINTMENTS, VALID_TAGS);","lastModifiedDate":"2022-10-01"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"JovonLim"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_APPOINTMENTS,","lastModifiedDate":"2022-10-01"},{"lineNumber":102,"author":{"gitId":"JovonLim"},"content":"                        VALID_TAGS);","lastModifiedDate":"2022-10-01"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"JovonLim"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,","lastModifiedDate":"2022-10-01"},{"lineNumber":110,"author":{"gitId":"JovonLim"},"content":"                VALID_APPOINTMENTS, VALID_TAGS);","lastModifiedDate":"2022-10-01"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2018-08-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":120,"author":{"gitId":"JovonLim"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_APPOINTMENTS,","lastModifiedDate":"2022-10-01"},{"lineNumber":121,"author":{"gitId":"JovonLim"},"content":"                        invalidTags);","lastModifiedDate":"2022-10-01"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":125,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-01"},{"lineNumber":126,"author":{"gitId":"JovonLim"},"content":"    public void toModelType_invalidReason_throwsIllegalValueException() {","lastModifiedDate":"2022-10-01"},{"lineNumber":127,"author":{"gitId":"JovonLim"},"content":"        List\u003cJsonAdaptedAppointment\u003e invalidAppointments \u003d new ArrayList\u003c\u003e(VALID_APPOINTMENTS);","lastModifiedDate":"2022-10-01"},{"lineNumber":128,"author":{"gitId":"pwjj2000"},"content":"        invalidAppointments.add(new JsonAdaptedAppointment(INVALID_REASON, \"2019-12-16 16:30\",","lastModifiedDate":"2022-10-21"},{"lineNumber":129,"author":{"gitId":"pwjj2000"},"content":"                \"\", new ArrayList\u003c\u003e(), false));","lastModifiedDate":"2022-10-21"},{"lineNumber":130,"author":{"gitId":"JovonLim"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2022-10-01"},{"lineNumber":131,"author":{"gitId":"JovonLim"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidAppointments,","lastModifiedDate":"2022-10-01"},{"lineNumber":132,"author":{"gitId":"JovonLim"},"content":"                        VALID_TAGS);","lastModifiedDate":"2022-10-01"},{"lineNumber":133,"author":{"gitId":"JovonLim"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2022-10-01"},{"lineNumber":134,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":135,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":136,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-01"},{"lineNumber":137,"author":{"gitId":"JovonLim"},"content":"    public void toModelType_invalidDate_throwsIllegalValueException() {","lastModifiedDate":"2022-10-01"},{"lineNumber":138,"author":{"gitId":"JovonLim"},"content":"        List\u003cJsonAdaptedAppointment\u003e invalidAppointments \u003d new ArrayList\u003c\u003e(VALID_APPOINTMENTS);","lastModifiedDate":"2022-10-01"},{"lineNumber":139,"author":{"gitId":"pwjj2000"},"content":"        invalidAppointments.add(new JsonAdaptedAppointment(\"Sore Throat\", INVALID_DATE, \"\",","lastModifiedDate":"2022-10-21"},{"lineNumber":140,"author":{"gitId":"pwjj2000"},"content":"                new ArrayList\u003c\u003e(), false));","lastModifiedDate":"2022-10-21"},{"lineNumber":141,"author":{"gitId":"JovonLim"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2022-10-14"},{"lineNumber":142,"author":{"gitId":"JovonLim"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidAppointments,","lastModifiedDate":"2022-10-14"},{"lineNumber":143,"author":{"gitId":"JovonLim"},"content":"                        VALID_TAGS);","lastModifiedDate":"2022-10-14"},{"lineNumber":144,"author":{"gitId":"JovonLim"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2022-10-14"},{"lineNumber":145,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":146,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":147,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-14"},{"lineNumber":148,"author":{"gitId":"JovonLim"},"content":"    public void toModelType_invalidTimePeriod_throwsIllegalValueException() {","lastModifiedDate":"2022-10-14"},{"lineNumber":149,"author":{"gitId":"JovonLim"},"content":"        List\u003cJsonAdaptedAppointment\u003e invalidAppointments \u003d new ArrayList\u003c\u003e(VALID_APPOINTMENTS);","lastModifiedDate":"2022-10-14"},{"lineNumber":150,"author":{"gitId":"JovonLim"},"content":"        invalidAppointments.add(new JsonAdaptedAppointment(\"Sore Throat\", \"2019-12-14 15:30\",","lastModifiedDate":"2022-10-14"},{"lineNumber":151,"author":{"gitId":"pwjj2000"},"content":"                INVALID_TIME_PERIOD, new ArrayList\u003c\u003e(), false));","lastModifiedDate":"2022-10-21"},{"lineNumber":152,"author":{"gitId":"JovonLim"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2022-10-01"},{"lineNumber":153,"author":{"gitId":"JovonLim"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidAppointments,","lastModifiedDate":"2022-10-01"},{"lineNumber":154,"author":{"gitId":"JovonLim"},"content":"                        VALID_TAGS);","lastModifiedDate":"2022-10-01"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2022-10-01"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":158,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"JovonLim":49,"-":104,"pwjj2000":5}},{"path":"src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-09-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {","lastModifiedDate":"2016-10-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {","lastModifiedDate":"2017-02-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":75,"author":{"gitId":"WingKei67"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100,","lastModifiedDate":"2022-10-26"},{"lineNumber":76,"author":{"gitId":"WingKei67"},"content":"                getClass().getResource(\"/view/LightMode.css\").toExternalForm()));","lastModifiedDate":"2022-10-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2017-02-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath.","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {","lastModifiedDate":"2017-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))","lastModifiedDate":"2016-10-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-12"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":107,"author":{"gitId":"WingKei67"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2,","lastModifiedDate":"2022-10-26"},{"lineNumber":108,"author":{"gitId":"WingKei67"},"content":"                getClass().getResource(\"/view/LightMode.css\").toExternalForm()));","lastModifiedDate":"2022-10-26"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":119,"author":{"gitId":"WingKei67"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5,","lastModifiedDate":"2022-10-26"},{"lineNumber":120,"author":{"gitId":"WingKei67"},"content":"                getClass().getResource(\"/view/LightMode.css\").toExternalForm()));","lastModifiedDate":"2022-10-26"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"WingKei67":6,"-":120}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;","lastModifiedDate":"2017-04-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));","lastModifiedDate":"2017-02-25"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"        JsonCommandHistoryStorage commandHistoryStorage \u003d new JsonCommandHistoryStorage(getTempFilePath(\"ch\"));","lastModifiedDate":"2022-10-21"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage, commandHistoryStorage);","lastModifiedDate":"2022-10-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);","lastModifiedDate":"2019-04-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {","lastModifiedDate":"2016-10-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-09-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-09-28"},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-09-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"WingKei67"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6,","lastModifiedDate":"2022-10-26"},{"lineNumber":46,"author":{"gitId":"WingKei67"},"content":"                getClass().getResource(\"/view/LightMode.css\").toExternalForm()));","lastModifiedDate":"2022-10-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void addressBookReadSave() throws Exception {","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-10-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"         * {@link JsonAddressBookStorage} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        storageManager.saveAddressBook(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-01"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void getAddressBookFilePath() {","lastModifiedDate":"2016-10-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"JovonLim":2,"WingKei67":2,"-":66}},{"path":"src/test/java/seedu/address/testutil/AppointmentBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.testutil;","lastModifiedDate":"2022-10-14"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-14"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-15"},{"lineNumber":5,"author":{"gitId":"WingKei67"},"content":"import java.util.HashSet;","lastModifiedDate":"2022-10-24"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"import java.util.List;","lastModifiedDate":"2022-10-15"},{"lineNumber":7,"author":{"gitId":"WingKei67"},"content":"import java.util.Set;","lastModifiedDate":"2022-10-24"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-14"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-14"},{"lineNumber":11,"author":{"gitId":"WingKei67"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2022-10-24"},{"lineNumber":12,"author":{"gitId":"WingKei67"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2022-10-24"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"/**","lastModifiedDate":"2022-10-15"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":" * A utility class to help with building Appointment objects.","lastModifiedDate":"2022-10-15"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":" */","lastModifiedDate":"2022-10-15"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"public class AppointmentBuilder {","lastModifiedDate":"2022-10-14"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"    public static final String DEFAULT_REASON \u003d \"Cough\";","lastModifiedDate":"2022-10-14"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"    public static final LocalDateTime DEFAULT_DATE_TIME \u003d LocalDateTime.parse(\"2000-12-31T00:00\");","lastModifiedDate":"2022-10-14"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"    public static final List\u003cInteger\u003e DEFAULT_TIME_PERIOD \u003d Arrays.asList(0, 0, 0);","lastModifiedDate":"2022-10-15"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"    public static final boolean DEFAULT_MARK_STATUS \u003d false;","lastModifiedDate":"2022-10-14"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"    public static final Person DEFAULT_PATIENT \u003d new PersonBuilder().build();","lastModifiedDate":"2022-10-14"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"    private String reason;","lastModifiedDate":"2022-10-14"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"    private LocalDateTime dateTime;","lastModifiedDate":"2022-10-14"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"    private List\u003cInteger\u003e timePeriod;","lastModifiedDate":"2022-10-15"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"    private boolean isMarked;","lastModifiedDate":"2022-10-14"},{"lineNumber":28,"author":{"gitId":"NicholasTYD"},"content":"    private Person patient;","lastModifiedDate":"2022-10-14"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":30,"author":{"gitId":"WingKei67"},"content":"    private Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2022-10-24"},{"lineNumber":31,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-15"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"     * Creates a {@code AppointmentBuilder} with the default details.","lastModifiedDate":"2022-10-15"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-15"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"    public AppointmentBuilder() {","lastModifiedDate":"2022-10-14"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"        reason \u003d DEFAULT_REASON;","lastModifiedDate":"2022-10-14"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"        dateTime \u003d DEFAULT_DATE_TIME;","lastModifiedDate":"2022-10-14"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"        isMarked \u003d DEFAULT_MARK_STATUS;","lastModifiedDate":"2022-10-14"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"        patient \u003d DEFAULT_PATIENT;","lastModifiedDate":"2022-10-14"},{"lineNumber":40,"author":{"gitId":"NicholasTYD"},"content":"        timePeriod \u003d DEFAULT_TIME_PERIOD;","lastModifiedDate":"2022-10-15"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-15"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"     * Initializes the AppointmentBuilder with the data of {@code appointmentToCopy}.","lastModifiedDate":"2022-10-15"},{"lineNumber":45,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-15"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"    public AppointmentBuilder(Appointment appointmentToCopy) {","lastModifiedDate":"2022-10-14"},{"lineNumber":47,"author":{"gitId":"NicholasTYD"},"content":"        reason \u003d appointmentToCopy.getReason();","lastModifiedDate":"2022-10-14"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"        dateTime \u003d appointmentToCopy.getDateTime();","lastModifiedDate":"2022-10-14"},{"lineNumber":49,"author":{"gitId":"NicholasTYD"},"content":"        isMarked \u003d appointmentToCopy.isMarked();","lastModifiedDate":"2022-10-14"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"        timePeriod \u003d appointmentToCopy.getTimePeriod();","lastModifiedDate":"2022-10-18"},{"lineNumber":51,"author":{"gitId":"NicholasTYD"},"content":"        patient \u003d new PersonBuilder(appointmentToCopy.getPatient()).build();","lastModifiedDate":"2022-10-14"},{"lineNumber":52,"author":{"gitId":"WingKei67"},"content":"        tags.addAll(appointmentToCopy.getTags());","lastModifiedDate":"2022-10-24"},{"lineNumber":53,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":54,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":55,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":56,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-15"},{"lineNumber":57,"author":{"gitId":"NicholasTYD"},"content":"     * Sets the {@code reason} of the {@code Appointment} that we are building.","lastModifiedDate":"2022-10-15"},{"lineNumber":58,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-15"},{"lineNumber":59,"author":{"gitId":"NicholasTYD"},"content":"    public AppointmentBuilder withReason(String reason) {","lastModifiedDate":"2022-10-14"},{"lineNumber":60,"author":{"gitId":"NicholasTYD"},"content":"        this.reason \u003d reason;","lastModifiedDate":"2022-10-14"},{"lineNumber":61,"author":{"gitId":"NicholasTYD"},"content":"        return this;","lastModifiedDate":"2022-10-14"},{"lineNumber":62,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":63,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":64,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-15"},{"lineNumber":65,"author":{"gitId":"NicholasTYD"},"content":"     * Sets the {@code dateTime} of the {@code Appointment} that we are building.","lastModifiedDate":"2022-10-15"},{"lineNumber":66,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-15"},{"lineNumber":67,"author":{"gitId":"NicholasTYD"},"content":"    public AppointmentBuilder withDateTime(LocalDateTime dateTime) {","lastModifiedDate":"2022-10-14"},{"lineNumber":68,"author":{"gitId":"NicholasTYD"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2022-10-14"},{"lineNumber":69,"author":{"gitId":"NicholasTYD"},"content":"        return this;","lastModifiedDate":"2022-10-14"},{"lineNumber":70,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":71,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":72,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-15"},{"lineNumber":73,"author":{"gitId":"NicholasTYD"},"content":"     * Sets the {@code timePeriod} of the {@code Appointment} that we are building.","lastModifiedDate":"2022-10-15"},{"lineNumber":74,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-15"},{"lineNumber":75,"author":{"gitId":"NicholasTYD"},"content":"    public AppointmentBuilder withTimePeriod(List\u003cInteger\u003e timePeriod) {","lastModifiedDate":"2022-10-15"},{"lineNumber":76,"author":{"gitId":"NicholasTYD"},"content":"        this.timePeriod \u003d timePeriod;","lastModifiedDate":"2022-10-15"},{"lineNumber":77,"author":{"gitId":"NicholasTYD"},"content":"        return this;","lastModifiedDate":"2022-10-15"},{"lineNumber":78,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-15"},{"lineNumber":79,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-15"},{"lineNumber":80,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-15"},{"lineNumber":81,"author":{"gitId":"NicholasTYD"},"content":"     * Sets the {@code status} of the {@code Appointment} that we are building.","lastModifiedDate":"2022-10-15"},{"lineNumber":82,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-15"},{"lineNumber":83,"author":{"gitId":"NicholasTYD"},"content":"    public AppointmentBuilder withMarkStatus(boolean status) {","lastModifiedDate":"2022-10-14"},{"lineNumber":84,"author":{"gitId":"NicholasTYD"},"content":"        this.isMarked \u003d status;","lastModifiedDate":"2022-10-14"},{"lineNumber":85,"author":{"gitId":"NicholasTYD"},"content":"        return this;","lastModifiedDate":"2022-10-14"},{"lineNumber":86,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":87,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":88,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-15"},{"lineNumber":89,"author":{"gitId":"NicholasTYD"},"content":"     * Sets the {@code patient} of the {@code Appointment} that we are building.","lastModifiedDate":"2022-10-15"},{"lineNumber":90,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-15"},{"lineNumber":91,"author":{"gitId":"NicholasTYD"},"content":"    public AppointmentBuilder withPatient(Person patient) {","lastModifiedDate":"2022-10-14"},{"lineNumber":92,"author":{"gitId":"NicholasTYD"},"content":"        this.patient \u003d patient;","lastModifiedDate":"2022-10-14"},{"lineNumber":93,"author":{"gitId":"NicholasTYD"},"content":"        return this;","lastModifiedDate":"2022-10-14"},{"lineNumber":94,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":95,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":96,"author":{"gitId":"WingKei67"},"content":"    /**","lastModifiedDate":"2022-10-24"},{"lineNumber":97,"author":{"gitId":"WingKei67"},"content":"     * Sets the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Appointment} that we are building.","lastModifiedDate":"2022-10-24"},{"lineNumber":98,"author":{"gitId":"WingKei67"},"content":"     */","lastModifiedDate":"2022-10-24"},{"lineNumber":99,"author":{"gitId":"WingKei67"},"content":"    public AppointmentBuilder withTags(String ... tags) {","lastModifiedDate":"2022-10-24"},{"lineNumber":100,"author":{"gitId":"WingKei67"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2022-10-24"},{"lineNumber":101,"author":{"gitId":"WingKei67"},"content":"        return this;","lastModifiedDate":"2022-10-24"},{"lineNumber":102,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":103,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":104,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-15"},{"lineNumber":105,"author":{"gitId":"NicholasTYD"},"content":"     * Builds an {@code Appointment} object based on the info we have.","lastModifiedDate":"2022-10-15"},{"lineNumber":106,"author":{"gitId":"NicholasTYD"},"content":"     *","lastModifiedDate":"2022-10-15"},{"lineNumber":107,"author":{"gitId":"NicholasTYD"},"content":"     * @return An {@code Appointment}","lastModifiedDate":"2022-10-15"},{"lineNumber":108,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-15"},{"lineNumber":109,"author":{"gitId":"NicholasTYD"},"content":"    public Appointment build() {","lastModifiedDate":"2022-10-14"},{"lineNumber":110,"author":{"gitId":"WingKei67"},"content":"        Appointment appointment \u003d new Appointment(reason, dateTime, timePeriod, tags, isMarked);","lastModifiedDate":"2022-10-24"},{"lineNumber":111,"author":{"gitId":"NicholasTYD"},"content":"        appointment.setPatient(patient);","lastModifiedDate":"2022-10-14"},{"lineNumber":112,"author":{"gitId":"NicholasTYD"},"content":"        return appointment;","lastModifiedDate":"2022-10-14"},{"lineNumber":113,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":114,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-14"}],"authorContributionMap":{"NicholasTYD":96,"WingKei67":17,"JovonLim":1}},{"path":"src/test/java/seedu/address/testutil/AppointmentUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.testutil;","lastModifiedDate":"2022-10-08"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-10-08"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REASON;","lastModifiedDate":"2022-10-08"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RECURRING_PERIOD;","lastModifiedDate":"2022-10-14"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2022-10-31"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-10-08"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"import java.util.List;","lastModifiedDate":"2022-10-14"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"import java.util.Set;","lastModifiedDate":"2022-10-31"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.BookCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditAppointmentCommand.EditAppointmentDescriptor;","lastModifiedDate":"2022-10-08"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-08"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2022-10-31"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"/**","lastModifiedDate":"2022-10-08"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":" * A utility class for Appointment.","lastModifiedDate":"2022-10-08"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":" */","lastModifiedDate":"2022-10-08"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"public class AppointmentUtil {","lastModifiedDate":"2022-10-08"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"    public static String getBookCommand(Appointment appointment) {","lastModifiedDate":"2022-10-08"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"        return BookCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()","lastModifiedDate":"2022-10-08"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":"                + \" \" + getAppointmentDetails(appointment);","lastModifiedDate":"2022-10-08"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-08"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"     * Returns the part of command string for the given {@code appointment}\u0027s details.","lastModifiedDate":"2022-10-08"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-08"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"    public static String getAppointmentDetails(Appointment appointment) {","lastModifiedDate":"2022-10-08"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"        return PREFIX_REASON + \" \" + appointment.getReason() + \" \" + PREFIX_DATE","lastModifiedDate":"2022-10-08"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"                + \" \" + appointment.getDateTime().format(Appointment.DATE_FORMATTER);","lastModifiedDate":"2022-10-08"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-08"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"     * Returns the part of command string for the given {@code EditAppointmentDescriptor}\u0027s details.","lastModifiedDate":"2022-10-08"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-08"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"    public static String getEditAppointmentDescriptorDetails(EditAppointmentDescriptor descriptor) {","lastModifiedDate":"2022-10-08"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2022-10-08"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"        descriptor.getReason().ifPresent(reason -\u003e sb.append(PREFIX_REASON).append(reason).append(\" \"));","lastModifiedDate":"2022-10-08"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"        descriptor.getDateTime().ifPresent(dateTime -\u003e sb.append(PREFIX_DATE)","lastModifiedDate":"2022-10-08"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"                .append(dateTime.format(Appointment.DATE_FORMATTER)).append(\" \"));","lastModifiedDate":"2022-10-08"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"        descriptor.getTimePeriod().ifPresent(timePeriod -\u003e sb.append(PREFIX_RECURRING_PERIOD)","lastModifiedDate":"2022-10-14"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"                .append(getFormattedPeriod(timePeriod)).append(\" \"));","lastModifiedDate":"2022-10-14"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"        if (descriptor.getTags().isPresent()) {","lastModifiedDate":"2022-10-31"},{"lineNumber":46,"author":{"gitId":"JovonLim"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();","lastModifiedDate":"2022-10-31"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"            if (tags.isEmpty()) {","lastModifiedDate":"2022-10-31"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"                sb.append(PREFIX_TAG);","lastModifiedDate":"2022-10-31"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"            } else {","lastModifiedDate":"2022-10-31"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.toString()).append(\" \"));","lastModifiedDate":"2022-10-31"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"            }","lastModifiedDate":"2022-10-31"},{"lineNumber":52,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-31"},{"lineNumber":53,"author":{"gitId":"JovonLim"},"content":"        return sb.toString();","lastModifiedDate":"2022-10-08"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":55,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":56,"author":{"gitId":"JovonLim"},"content":"    private static String getFormattedPeriod(List\u003cInteger\u003e timePeriod) {","lastModifiedDate":"2022-10-14"},{"lineNumber":57,"author":{"gitId":"JovonLim"},"content":"        String str \u003d \"%sY%sM%sD\";","lastModifiedDate":"2022-10-14"},{"lineNumber":58,"author":{"gitId":"JovonLim"},"content":"        str \u003d String.format(str, timePeriod.get(0), timePeriod.get(1), timePeriod.get(2));","lastModifiedDate":"2022-10-14"},{"lineNumber":59,"author":{"gitId":"JovonLim"},"content":"        return str;","lastModifiedDate":"2022-10-14"},{"lineNumber":60,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":61,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-08"}],"authorContributionMap":{"JovonLim":61}},{"path":"src/test/java/seedu/address/testutil/EditAppointmentDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.testutil;","lastModifiedDate":"2022-10-08"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-08"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"import java.util.List;","lastModifiedDate":"2022-10-14"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"import java.util.Set;","lastModifiedDate":"2022-10-31"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2022-10-31"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2022-10-31"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditAppointmentCommand.EditAppointmentDescriptor;","lastModifiedDate":"2022-10-08"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-08"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2022-10-31"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"/**","lastModifiedDate":"2022-10-08"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":" * A utility class to help with building EditAppointmentDescriptor objects.","lastModifiedDate":"2022-10-08"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":" */","lastModifiedDate":"2022-10-08"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"public class EditAppointmentDescriptorBuilder {","lastModifiedDate":"2022-10-08"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"    private EditAppointmentDescriptor descriptor;","lastModifiedDate":"2022-10-08"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"    public EditAppointmentDescriptorBuilder() {","lastModifiedDate":"2022-10-08"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"        descriptor \u003d new EditAppointmentDescriptor();","lastModifiedDate":"2022-10-08"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"    public EditAppointmentDescriptorBuilder(EditAppointmentDescriptor descriptor) {","lastModifiedDate":"2022-10-08"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":"        this.descriptor \u003d new EditAppointmentDescriptor(descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-08"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"     * Returns an {@code EditAppointmentDescriptor} with fields containing {@code appointment}\u0027s details","lastModifiedDate":"2022-10-08"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-08"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"    public EditAppointmentDescriptorBuilder(Appointment appointment) {","lastModifiedDate":"2022-10-08"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"        descriptor \u003d new EditAppointmentDescriptor();","lastModifiedDate":"2022-10-08"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"        descriptor.setReason(appointment.getReason());","lastModifiedDate":"2022-10-08"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"        descriptor.setDateTime(appointment.getDateTime());","lastModifiedDate":"2022-10-08"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"        descriptor.setTimePeriod(appointment.getTimePeriod());","lastModifiedDate":"2022-10-14"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"        descriptor.setTags(appointment.getTags());","lastModifiedDate":"2022-10-31"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-08"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"     * Sets the reason of the {@code EditAppointmentDescriptor} that we are building.","lastModifiedDate":"2022-10-08"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-08"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"    public EditAppointmentDescriptorBuilder withReason(String reason) {","lastModifiedDate":"2022-10-08"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"        descriptor.setReason(reason);","lastModifiedDate":"2022-10-08"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"        return this;","lastModifiedDate":"2022-10-08"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":46,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-08"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"     * Sets the dateTime of the {@code EditAppointmentDescriptor} that we are building.","lastModifiedDate":"2022-10-08"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-08"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"    public EditAppointmentDescriptorBuilder withDateTime(LocalDateTime dateTime) {","lastModifiedDate":"2022-10-08"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"        descriptor.setDateTime(dateTime);","lastModifiedDate":"2022-10-08"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"        return this;","lastModifiedDate":"2022-10-08"},{"lineNumber":52,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":53,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-14"},{"lineNumber":55,"author":{"gitId":"JovonLim"},"content":"     * Sets the timePeriod of the {@code EditAppointmentDescriptor} that we are building.","lastModifiedDate":"2022-10-14"},{"lineNumber":56,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-14"},{"lineNumber":57,"author":{"gitId":"JovonLim"},"content":"    public EditAppointmentDescriptorBuilder withTimePeriod(List\u003cInteger\u003e timePeriod) {","lastModifiedDate":"2022-10-14"},{"lineNumber":58,"author":{"gitId":"JovonLim"},"content":"        descriptor.setTimePeriod(timePeriod);","lastModifiedDate":"2022-10-14"},{"lineNumber":59,"author":{"gitId":"JovonLim"},"content":"        return this;","lastModifiedDate":"2022-10-14"},{"lineNumber":60,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":61,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":62,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-31"},{"lineNumber":63,"author":{"gitId":"JovonLim"},"content":"     * Sets the tags of the {@code EditAppointmentDescriptor} that we are building.","lastModifiedDate":"2022-10-31"},{"lineNumber":64,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-31"},{"lineNumber":65,"author":{"gitId":"JovonLim"},"content":"    public EditAppointmentDescriptorBuilder withTags(String ... tags) {","lastModifiedDate":"2022-10-31"},{"lineNumber":66,"author":{"gitId":"JovonLim"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::convertToTag).collect(Collectors.toSet());","lastModifiedDate":"2022-10-31"},{"lineNumber":67,"author":{"gitId":"JovonLim"},"content":"        descriptor.setTags(tagSet);","lastModifiedDate":"2022-10-31"},{"lineNumber":68,"author":{"gitId":"JovonLim"},"content":"        return this;","lastModifiedDate":"2022-10-31"},{"lineNumber":69,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-31"},{"lineNumber":70,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-31"},{"lineNumber":71,"author":{"gitId":"JovonLim"},"content":"    public EditAppointmentDescriptor build() {","lastModifiedDate":"2022-11-05"},{"lineNumber":72,"author":{"gitId":"JovonLim"},"content":"        return descriptor;","lastModifiedDate":"2022-10-08"},{"lineNumber":73,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":74,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-08"}],"authorContributionMap":{"JovonLim":74}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-12-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-12-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-12-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditPatientCommand.EditPersonDescriptor;","lastModifiedDate":"2022-10-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-12-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-12-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-12-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-12-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-12-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        descriptor.setAddress(person.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        descriptor.setTags(person.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2017-12-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2017-12-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2017-12-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));","lastModifiedDate":"2017-12-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}","lastModifiedDate":"2017-07-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":79,"author":{"gitId":"pwjj2000"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::convertToTag).collect(Collectors.toSet());","lastModifiedDate":"2022-10-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);","lastModifiedDate":"2017-12-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {","lastModifiedDate":"2017-05-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"JovonLim":1,"-":85,"pwjj2000":1}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-01"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"import java.util.List;","lastModifiedDate":"2022-10-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-01-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-01-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-04-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-01-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-04-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Address address;","lastModifiedDate":"2017-12-20"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"    private List\u003cAppointment\u003e listOfAppointments;","lastModifiedDate":"2022-10-02"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-12-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"        listOfAppointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2017-12-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();","lastModifiedDate":"2017-12-20"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"        listOfAppointments \u003d new ArrayList\u003c\u003e(personToCopy.getAppointments());","lastModifiedDate":"2022-10-01"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());","lastModifiedDate":"2017-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2022-10-11"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2022-10-11"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":98,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":99,"author":{"gitId":"JovonLim"},"content":"     * Adds the {@code Appointment} of the {@code Person} that we are building.","lastModifiedDate":"2022-10-01"},{"lineNumber":100,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":101,"author":{"gitId":"JovonLim"},"content":"    public PersonBuilder withAppointment(Appointment appointment) {","lastModifiedDate":"2022-10-01"},{"lineNumber":102,"author":{"gitId":"JovonLim"},"content":"        this.listOfAppointments.add(appointment);","lastModifiedDate":"2022-10-01"},{"lineNumber":103,"author":{"gitId":"JovonLim"},"content":"        return this;","lastModifiedDate":"2022-10-01"},{"lineNumber":104,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":105,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":106,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-02"},{"lineNumber":107,"author":{"gitId":"NicholasTYD"},"content":"     * Sets the List of {@code Appointment} of the {@code Person} that we are building.","lastModifiedDate":"2022-10-02"},{"lineNumber":108,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-02"},{"lineNumber":109,"author":{"gitId":"NicholasTYD"},"content":"    public PersonBuilder withAppointmentList(List\u003cAppointment\u003e listOfAppointments) {","lastModifiedDate":"2022-10-02"},{"lineNumber":110,"author":{"gitId":"NicholasTYD"},"content":"        this.listOfAppointments \u003d listOfAppointments;","lastModifiedDate":"2022-10-02"},{"lineNumber":111,"author":{"gitId":"NicholasTYD"},"content":"        return this;","lastModifiedDate":"2022-10-02"},{"lineNumber":112,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":113,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":114,"author":{"gitId":"pwjj2000"},"content":"    /**","lastModifiedDate":"2022-10-06"},{"lineNumber":115,"author":{"gitId":"pwjj2000"},"content":"     * Builds a {@code Person} object based on the info we have.","lastModifiedDate":"2022-10-06"},{"lineNumber":116,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-10-06"},{"lineNumber":117,"author":{"gitId":"pwjj2000"},"content":"     * @return A {@code Person}","lastModifiedDate":"2022-10-06"},{"lineNumber":118,"author":{"gitId":"pwjj2000"},"content":"     */","lastModifiedDate":"2022-10-06"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public Person build() {","lastModifiedDate":"2017-04-05"},{"lineNumber":120,"author":{"gitId":"pwjj2000"},"content":"        Person person \u003d new Person(name, phone, email, address, listOfAppointments, tags);","lastModifiedDate":"2022-10-06"},{"lineNumber":121,"author":{"gitId":"pwjj2000"},"content":"        for (Appointment appointment : listOfAppointments) {","lastModifiedDate":"2022-10-06"},{"lineNumber":122,"author":{"gitId":"pwjj2000"},"content":"            appointment.setPatient(person);","lastModifiedDate":"2022-10-06"},{"lineNumber":123,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":124,"author":{"gitId":"pwjj2000"},"content":"        return person;","lastModifiedDate":"2022-10-06"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"NicholasTYD":9,"JovonLim":13,"-":95,"pwjj2000":10}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-04-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-03-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-03-29"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditPatientCommand.EditPersonDescriptor;","lastModifiedDate":"2022-10-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-03-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class for Person.","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonUtil {","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}.","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);","lastModifiedDate":"2017-03-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2017-04-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");","lastModifiedDate":"2017-06-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        person.getTags().stream().forEach(","lastModifiedDate":"2017-05-09"},{"lineNumber":38,"author":{"gitId":"WingKei67"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.toString() + \" \")","lastModifiedDate":"2022-10-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2017-05-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details.","lastModifiedDate":"2018-03-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {","lastModifiedDate":"2018-03-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();","lastModifiedDate":"2018-03-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                sb.append(PREFIX_TAG);","lastModifiedDate":"2018-03-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2018-03-26"},{"lineNumber":57,"author":{"gitId":"WingKei67"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.toString()).append(\" \"));","lastModifiedDate":"2022-10-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-03-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"JovonLim":1,"WingKei67":2,"-":59}},{"path":"src/test/java/seedu/address/testutil/PredicateGeneratorUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.testutil;","lastModifiedDate":"2022-10-14"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMPTY_STRING;","lastModifiedDate":"2022-10-16"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-14"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-14"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import java.util.Collections;","lastModifiedDate":"2022-10-14"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"import java.util.List;","lastModifiedDate":"2022-10-14"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-14"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.predicates.CombinedAppointmentPredicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.predicates.CombinedPersonPredicate;","lastModifiedDate":"2022-10-14"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"/**","lastModifiedDate":"2022-10-14"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":" * A helper class consisting of methods to generate predicates more easily for testing without needing to create","lastModifiedDate":"2022-10-14"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":" * classes to pass into the predicate constructor as arguments.","lastModifiedDate":"2022-10-14"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":" */","lastModifiedDate":"2022-10-14"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"public class PredicateGeneratorUtil {","lastModifiedDate":"2022-10-14"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-14"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"     * Provides a simple way to generate a {@code CombinedPersonPredicate} without needing to make a list from scratch.","lastModifiedDate":"2022-10-14"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"     *","lastModifiedDate":"2022-10-14"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"     * @param name name string to test","lastModifiedDate":"2022-10-15"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"     * @param phone phone string to test","lastModifiedDate":"2022-10-15"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"     * @param email email string to test","lastModifiedDate":"2022-10-15"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"     * @param address address string to test","lastModifiedDate":"2022-10-15"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"     * @param tagString tags to test, separated by spaces.","lastModifiedDate":"2022-10-15"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"     * @return a {@code CombinedPersonPredicate} with the given inputs.","lastModifiedDate":"2022-10-16"},{"lineNumber":28,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-14"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"    public static CombinedPersonPredicate generateCombinedPersonPredicate(String name, String phone, String email,","lastModifiedDate":"2022-10-14"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"                                                                    String address, String tagString) {","lastModifiedDate":"2022-10-14"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"        List\u003cString\u003e tagList \u003d tagString.isEmpty()","lastModifiedDate":"2022-10-14"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"                ? Collections.emptyList()","lastModifiedDate":"2022-10-14"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"                : Arrays.asList(tagString.split(\"\\\\s+\"));","lastModifiedDate":"2022-10-14"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"        return new CombinedPersonPredicate(name, phone, email, address, tagList);","lastModifiedDate":"2022-10-14"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"     * Creates a {@code CombinedPersonPredicate} with all empty fields.","lastModifiedDate":"2022-10-16"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"     *","lastModifiedDate":"2022-10-16"},{"lineNumber":40,"author":{"gitId":"NicholasTYD"},"content":"     * @return Creates a {@code CombinedPersonPredicate} with all empty fields.","lastModifiedDate":"2022-10-16"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"    public static CombinedPersonPredicate generateEmptyCombinedPersonPredicate() {","lastModifiedDate":"2022-10-16"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"        return generateCombinedPersonPredicate(EMPTY_STRING, EMPTY_STRING, EMPTY_STRING, EMPTY_STRING, EMPTY_STRING);","lastModifiedDate":"2022-10-16"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":45,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":47,"author":{"gitId":"NicholasTYD"},"content":"     * Creates a {@code CombinedPersonPredicate} with only name present and other fields empty.","lastModifiedDate":"2022-10-16"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"     *","lastModifiedDate":"2022-10-16"},{"lineNumber":49,"author":{"gitId":"NicholasTYD"},"content":"     * @param name name string to test","lastModifiedDate":"2022-10-16"},{"lineNumber":50,"author":{"gitId":"NicholasTYD"},"content":"     * @return a {@code CombinedPersonPredicate} with only name present and other fields empty.","lastModifiedDate":"2022-10-16"},{"lineNumber":51,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":52,"author":{"gitId":"NicholasTYD"},"content":"    public static CombinedPersonPredicate generateCombinedPersonPredicateWithOnlyName(String name) {","lastModifiedDate":"2022-10-16"},{"lineNumber":53,"author":{"gitId":"NicholasTYD"},"content":"        return generateCombinedPersonPredicate(name, EMPTY_STRING, EMPTY_STRING, EMPTY_STRING, EMPTY_STRING);","lastModifiedDate":"2022-10-16"},{"lineNumber":54,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":55,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":56,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":57,"author":{"gitId":"NicholasTYD"},"content":"     * Creates a {@code CombinedPersonPredicate} with only phone present and other fields empty.","lastModifiedDate":"2022-10-16"},{"lineNumber":58,"author":{"gitId":"NicholasTYD"},"content":"     *","lastModifiedDate":"2022-10-16"},{"lineNumber":59,"author":{"gitId":"NicholasTYD"},"content":"     * @param phone phone string to test","lastModifiedDate":"2022-10-16"},{"lineNumber":60,"author":{"gitId":"NicholasTYD"},"content":"     * @return a {@code CombinedPersonPredicate} with only phone present and other fields empty.","lastModifiedDate":"2022-10-16"},{"lineNumber":61,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":62,"author":{"gitId":"NicholasTYD"},"content":"    public static CombinedPersonPredicate generateCombinedPersonPredicateWithOnlyPhone(String phone) {","lastModifiedDate":"2022-10-16"},{"lineNumber":63,"author":{"gitId":"NicholasTYD"},"content":"        return generateCombinedPersonPredicate(EMPTY_STRING, phone, EMPTY_STRING, EMPTY_STRING, EMPTY_STRING);","lastModifiedDate":"2022-10-16"},{"lineNumber":64,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":65,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":66,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":67,"author":{"gitId":"NicholasTYD"},"content":"     * Creates a {@code CombinedPersonPredicate} with only email present and other fields empty.","lastModifiedDate":"2022-10-16"},{"lineNumber":68,"author":{"gitId":"NicholasTYD"},"content":"     *","lastModifiedDate":"2022-10-16"},{"lineNumber":69,"author":{"gitId":"NicholasTYD"},"content":"     * @param email email string to test","lastModifiedDate":"2022-10-16"},{"lineNumber":70,"author":{"gitId":"NicholasTYD"},"content":"     * @return a {@code CombinedPersonPredicate} with only email present and other fields empty.","lastModifiedDate":"2022-10-16"},{"lineNumber":71,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":72,"author":{"gitId":"NicholasTYD"},"content":"    public static CombinedPersonPredicate generateCombinedPersonPredicateWithOnlyEmail(String email) {","lastModifiedDate":"2022-10-16"},{"lineNumber":73,"author":{"gitId":"NicholasTYD"},"content":"        return generateCombinedPersonPredicate(EMPTY_STRING, EMPTY_STRING, email, EMPTY_STRING, EMPTY_STRING);","lastModifiedDate":"2022-10-16"},{"lineNumber":74,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":75,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":76,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":77,"author":{"gitId":"NicholasTYD"},"content":"     * Creates a {@code CombinedPersonPredicate} with only address present and other fields empty.","lastModifiedDate":"2022-10-16"},{"lineNumber":78,"author":{"gitId":"NicholasTYD"},"content":"     *","lastModifiedDate":"2022-10-16"},{"lineNumber":79,"author":{"gitId":"NicholasTYD"},"content":"     * @param address address string to test","lastModifiedDate":"2022-10-16"},{"lineNumber":80,"author":{"gitId":"NicholasTYD"},"content":"     * @return a {@code CombinedPersonPredicate} with only address present and other fields empty.","lastModifiedDate":"2022-10-16"},{"lineNumber":81,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":82,"author":{"gitId":"NicholasTYD"},"content":"    public static CombinedPersonPredicate generateCombinedPersonPredicateWithOnlyAddress(String address) {","lastModifiedDate":"2022-10-16"},{"lineNumber":83,"author":{"gitId":"NicholasTYD"},"content":"        return generateCombinedPersonPredicate(EMPTY_STRING, EMPTY_STRING, EMPTY_STRING, address, EMPTY_STRING);","lastModifiedDate":"2022-10-16"},{"lineNumber":84,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":85,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":86,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":87,"author":{"gitId":"NicholasTYD"},"content":"     * Creates a {@code CombinedPersonPredicate} with only tags present and other fields empty.","lastModifiedDate":"2022-10-16"},{"lineNumber":88,"author":{"gitId":"NicholasTYD"},"content":"     *","lastModifiedDate":"2022-10-16"},{"lineNumber":89,"author":{"gitId":"NicholasTYD"},"content":"     * @param tags tags to test. Tags can be passed in separately or as a single string separated by spaces.","lastModifiedDate":"2022-10-16"},{"lineNumber":90,"author":{"gitId":"NicholasTYD"},"content":"     * @return a {@code CombinedPersonPredicate} with only tags present and other fields empty.","lastModifiedDate":"2022-10-16"},{"lineNumber":91,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":92,"author":{"gitId":"NicholasTYD"},"content":"    public static CombinedPersonPredicate generateCombinedPersonPredicateWithOnlyTags(String... tags) {","lastModifiedDate":"2022-10-16"},{"lineNumber":93,"author":{"gitId":"NicholasTYD"},"content":"        String tagString \u003d String.join(\" \", tags);","lastModifiedDate":"2022-10-16"},{"lineNumber":94,"author":{"gitId":"NicholasTYD"},"content":"        return generateCombinedPersonPredicate(EMPTY_STRING, EMPTY_STRING, EMPTY_STRING, EMPTY_STRING, tagString);","lastModifiedDate":"2022-10-16"},{"lineNumber":95,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":96,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":97,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-14"},{"lineNumber":98,"author":{"gitId":"NicholasTYD"},"content":"     * Provides a simple way to generate a {@code CombinedAppointmentPredicate} without needing to directly provide","lastModifiedDate":"2022-10-14"},{"lineNumber":99,"author":{"gitId":"NicholasTYD"},"content":"     * {@code LocalDateTime}s but a string parsable according to the DateTimeFormatter in {@code Appointment} instead.","lastModifiedDate":"2022-10-16"},{"lineNumber":100,"author":{"gitId":"NicholasTYD"},"content":"     *","lastModifiedDate":"2022-10-14"},{"lineNumber":101,"author":{"gitId":"NicholasTYD"},"content":"     * @param reason reason string to test","lastModifiedDate":"2022-10-15"},{"lineNumber":102,"author":{"gitId":"NicholasTYD"},"content":"     * @param startDateTime Tests for appointments after {@code startDateTime}.","lastModifiedDate":"2022-10-15"},{"lineNumber":103,"author":{"gitId":"NicholasTYD"},"content":"     *                      Empty string denotes no {@code startDateTime} requirement.","lastModifiedDate":"2022-10-14"},{"lineNumber":104,"author":{"gitId":"NicholasTYD"},"content":"     * @param endDateTime Tests for appointments before {@code endDateTime}.","lastModifiedDate":"2022-10-15"},{"lineNumber":105,"author":{"gitId":"NicholasTYD"},"content":"     *                    Empty string denotes no {@code endDateTime} requirement.","lastModifiedDate":"2022-10-14"},{"lineNumber":106,"author":{"gitId":"NicholasTYD"},"content":"     * @param tagString tags to test, separated by spaces.","lastModifiedDate":"2022-10-25"},{"lineNumber":107,"author":{"gitId":"NicholasTYD"},"content":"     * @return a {@Code CombinedAppointmentPredicate} with the given reason and date range.","lastModifiedDate":"2022-10-16"},{"lineNumber":108,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-14"},{"lineNumber":109,"author":{"gitId":"NicholasTYD"},"content":"    public static CombinedAppointmentPredicate generateCombinedAppointmentPredicate(","lastModifiedDate":"2022-10-16"},{"lineNumber":110,"author":{"gitId":"NicholasTYD"},"content":"            String reason, String startDateTime, String endDateTime, String tagString) {","lastModifiedDate":"2022-10-25"},{"lineNumber":111,"author":{"gitId":"NicholasTYD"},"content":"        List\u003cString\u003e tagList \u003d tagString.isEmpty()","lastModifiedDate":"2022-10-25"},{"lineNumber":112,"author":{"gitId":"NicholasTYD"},"content":"                ? Collections.emptyList()","lastModifiedDate":"2022-10-25"},{"lineNumber":113,"author":{"gitId":"NicholasTYD"},"content":"                : Arrays.asList(tagString.split(\"\\\\s+\"));","lastModifiedDate":"2022-10-25"},{"lineNumber":114,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":115,"author":{"gitId":"NicholasTYD"},"content":"        LocalDateTime start \u003d parseStartDateTime(startDateTime);","lastModifiedDate":"2022-10-14"},{"lineNumber":116,"author":{"gitId":"NicholasTYD"},"content":"        LocalDateTime end \u003d parseEndDateTime(endDateTime);","lastModifiedDate":"2022-10-14"},{"lineNumber":117,"author":{"gitId":"NicholasTYD"},"content":"        return new CombinedAppointmentPredicate(reason, start, end, tagList);","lastModifiedDate":"2022-10-25"},{"lineNumber":118,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":119,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":120,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":121,"author":{"gitId":"NicholasTYD"},"content":"     * Creates a {@code CombinedAppointmentPredicate} with all empty fields.","lastModifiedDate":"2022-10-16"},{"lineNumber":122,"author":{"gitId":"NicholasTYD"},"content":"     *","lastModifiedDate":"2022-10-16"},{"lineNumber":123,"author":{"gitId":"NicholasTYD"},"content":"     * @return a {@code CombinedAppointmentPredicate} with all empty fields.","lastModifiedDate":"2022-10-16"},{"lineNumber":124,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":125,"author":{"gitId":"NicholasTYD"},"content":"    public static CombinedAppointmentPredicate generateEmptyCombinedAppointmentPredicate() {","lastModifiedDate":"2022-10-16"},{"lineNumber":126,"author":{"gitId":"NicholasTYD"},"content":"        return generateCombinedAppointmentPredicate(EMPTY_STRING, EMPTY_STRING, EMPTY_STRING, EMPTY_STRING);","lastModifiedDate":"2022-10-25"},{"lineNumber":127,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":128,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":129,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":130,"author":{"gitId":"NicholasTYD"},"content":"     * Creates a {@code CombinedAppointmentPredicate} with only reason present and other fields empty.","lastModifiedDate":"2022-10-16"},{"lineNumber":131,"author":{"gitId":"NicholasTYD"},"content":"     *","lastModifiedDate":"2022-10-16"},{"lineNumber":132,"author":{"gitId":"NicholasTYD"},"content":"     * @param reason reason to test","lastModifiedDate":"2022-10-16"},{"lineNumber":133,"author":{"gitId":"NicholasTYD"},"content":"     * @return a {@code CombinedAppointmentPredicate} with only reason present and other fields empty.","lastModifiedDate":"2022-10-16"},{"lineNumber":134,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":135,"author":{"gitId":"NicholasTYD"},"content":"    public static CombinedAppointmentPredicate generateCombinedAppointmentPredicateWithOnlyReason(String reason) {","lastModifiedDate":"2022-10-16"},{"lineNumber":136,"author":{"gitId":"NicholasTYD"},"content":"        return generateCombinedAppointmentPredicate(reason, EMPTY_STRING, EMPTY_STRING, EMPTY_STRING);","lastModifiedDate":"2022-10-25"},{"lineNumber":137,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":138,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":139,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":140,"author":{"gitId":"NicholasTYD"},"content":"     * Creates a {@code CombinedAppointmentPredicate} with only dateTime fields present and other fields empty.","lastModifiedDate":"2022-10-16"},{"lineNumber":141,"author":{"gitId":"NicholasTYD"},"content":"     * Use strings parsable according to the DateTimeFormatter in {@code Appointment} as input.","lastModifiedDate":"2022-10-16"},{"lineNumber":142,"author":{"gitId":"NicholasTYD"},"content":"     *","lastModifiedDate":"2022-10-16"},{"lineNumber":143,"author":{"gitId":"NicholasTYD"},"content":"     * @param startDateTime Tests for appointments after {@code startDateTime}.","lastModifiedDate":"2022-10-16"},{"lineNumber":144,"author":{"gitId":"NicholasTYD"},"content":"     *                      Empty string denotes no {@code startDateTime} requirement.","lastModifiedDate":"2022-10-16"},{"lineNumber":145,"author":{"gitId":"NicholasTYD"},"content":"     * @param endDateTime Tests for appointments before {@code endDateTime}.","lastModifiedDate":"2022-10-16"},{"lineNumber":146,"author":{"gitId":"NicholasTYD"},"content":"     *                    Empty string denotes no {@code endDateTime} requirement.","lastModifiedDate":"2022-10-16"},{"lineNumber":147,"author":{"gitId":"NicholasTYD"},"content":"     * @return a {@code CombinedAppointmentPredicate} with only dateTime fields present and other fields empty.","lastModifiedDate":"2022-10-16"},{"lineNumber":148,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":149,"author":{"gitId":"NicholasTYD"},"content":"    public static CombinedAppointmentPredicate generateCombinedAppointmentPredicateWithOnlyDateTime(","lastModifiedDate":"2022-10-16"},{"lineNumber":150,"author":{"gitId":"NicholasTYD"},"content":"            String startDateTime, String endDateTime) {","lastModifiedDate":"2022-10-16"},{"lineNumber":151,"author":{"gitId":"NicholasTYD"},"content":"        return generateCombinedAppointmentPredicate(EMPTY_STRING, startDateTime, endDateTime, EMPTY_STRING);","lastModifiedDate":"2022-10-25"},{"lineNumber":152,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":153,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":154,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-16"},{"lineNumber":155,"author":{"gitId":"NicholasTYD"},"content":"     * Creates a {@code CombinedAppointmentPredicate} with only dateTime fields present and other fields empty.","lastModifiedDate":"2022-10-16"},{"lineNumber":156,"author":{"gitId":"NicholasTYD"},"content":"     * Uses {@code LocalDateTime} as inputs.","lastModifiedDate":"2022-10-16"},{"lineNumber":157,"author":{"gitId":"NicholasTYD"},"content":"     *","lastModifiedDate":"2022-10-16"},{"lineNumber":158,"author":{"gitId":"NicholasTYD"},"content":"     * @param startDateTime Tests for appointments after {@code startDateTime}.","lastModifiedDate":"2022-10-16"},{"lineNumber":159,"author":{"gitId":"NicholasTYD"},"content":"     * @param endDateTime Tests for appointments before {@code endDateTime}.","lastModifiedDate":"2022-10-16"},{"lineNumber":160,"author":{"gitId":"NicholasTYD"},"content":"     * @return a {@code CombinedAppointmentPredicate} with only dateTime fields present and other fields empty.","lastModifiedDate":"2022-10-16"},{"lineNumber":161,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-16"},{"lineNumber":162,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":163,"author":{"gitId":"NicholasTYD"},"content":"    public static CombinedAppointmentPredicate generateCombinedAppointmentPredicateWithOnlyDateTime(","lastModifiedDate":"2022-10-16"},{"lineNumber":164,"author":{"gitId":"NicholasTYD"},"content":"            LocalDateTime startDateTime, LocalDateTime endDateTime) {","lastModifiedDate":"2022-10-16"},{"lineNumber":165,"author":{"gitId":"NicholasTYD"},"content":"        return new CombinedAppointmentPredicate(EMPTY_STRING, startDateTime, endDateTime, Collections.emptyList());","lastModifiedDate":"2022-10-25"},{"lineNumber":166,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-25"},{"lineNumber":167,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":168,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-25"},{"lineNumber":169,"author":{"gitId":"NicholasTYD"},"content":"     * Creates a {@code CombinedAppointmentPredicate} with only tags present and other fields empty.","lastModifiedDate":"2022-10-25"},{"lineNumber":170,"author":{"gitId":"NicholasTYD"},"content":"     *","lastModifiedDate":"2022-10-25"},{"lineNumber":171,"author":{"gitId":"NicholasTYD"},"content":"     * @param tags tags to test. Tags can be passed in separately or as a single string separated by spaces.","lastModifiedDate":"2022-10-25"},{"lineNumber":172,"author":{"gitId":"NicholasTYD"},"content":"     * @return a {@code CombinedAppointmentPredicate} with only tags present and other fields empty.","lastModifiedDate":"2022-10-25"},{"lineNumber":173,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-25"},{"lineNumber":174,"author":{"gitId":"NicholasTYD"},"content":"    public static CombinedAppointmentPredicate generateCombinedAppointmentPredicateWithOnlyTags(String... tags) {","lastModifiedDate":"2022-10-25"},{"lineNumber":175,"author":{"gitId":"NicholasTYD"},"content":"        String tagString \u003d String.join(\" \", tags);","lastModifiedDate":"2022-10-25"},{"lineNumber":176,"author":{"gitId":"NicholasTYD"},"content":"        return generateCombinedAppointmentPredicate(EMPTY_STRING, EMPTY_STRING, EMPTY_STRING, tagString);","lastModifiedDate":"2022-10-25"},{"lineNumber":177,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-16"},{"lineNumber":178,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-16"},{"lineNumber":179,"author":{"gitId":"NicholasTYD"},"content":"    private static LocalDateTime parseStartDateTime(String startDateTime) {","lastModifiedDate":"2022-10-14"},{"lineNumber":180,"author":{"gitId":"NicholasTYD"},"content":"        return startDateTime.isEmpty()","lastModifiedDate":"2022-10-14"},{"lineNumber":181,"author":{"gitId":"NicholasTYD"},"content":"                ? LocalDateTime.MIN","lastModifiedDate":"2022-10-14"},{"lineNumber":182,"author":{"gitId":"NicholasTYD"},"content":"                : LocalDateTime.parse(startDateTime, Appointment.DATE_FORMATTER);","lastModifiedDate":"2022-10-14"},{"lineNumber":183,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":184,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-14"},{"lineNumber":185,"author":{"gitId":"NicholasTYD"},"content":"    private static LocalDateTime parseEndDateTime(String endDateTime) {","lastModifiedDate":"2022-10-14"},{"lineNumber":186,"author":{"gitId":"NicholasTYD"},"content":"        return endDateTime.isEmpty()","lastModifiedDate":"2022-10-14"},{"lineNumber":187,"author":{"gitId":"NicholasTYD"},"content":"                ? LocalDateTime.MAX","lastModifiedDate":"2022-10-14"},{"lineNumber":188,"author":{"gitId":"NicholasTYD"},"content":"                : LocalDateTime.parse(endDateTime, Appointment.DATE_FORMATTER);","lastModifiedDate":"2022-10-14"},{"lineNumber":189,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-14"},{"lineNumber":190,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-14"}],"authorContributionMap":{"NicholasTYD":190}},{"path":"src/test/java/seedu/address/testutil/TypicalAppointments.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pwjj2000"},"content":"package seedu.address.testutil;","lastModifiedDate":"2022-10-06"},{"lineNumber":2,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":3,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2022-10-06"},{"lineNumber":4,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;","lastModifiedDate":"2022-10-06"},{"lineNumber":5,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;","lastModifiedDate":"2022-10-24"},{"lineNumber":6,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;","lastModifiedDate":"2022-10-24"},{"lineNumber":7,"author":{"gitId":"WingKei67"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;","lastModifiedDate":"2022-10-24"},{"lineNumber":8,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":9,"author":{"gitId":"pwjj2000"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-06"},{"lineNumber":10,"author":{"gitId":"pwjj2000"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-06"},{"lineNumber":11,"author":{"gitId":"pwjj2000"},"content":"import java.util.List;","lastModifiedDate":"2022-10-06"},{"lineNumber":12,"author":{"gitId":"WingKei67"},"content":"import java.util.Set;","lastModifiedDate":"2022-10-24"},{"lineNumber":13,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":14,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-06"},{"lineNumber":15,"author":{"gitId":"WingKei67"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2022-10-24"},{"lineNumber":16,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":17,"author":{"gitId":"pwjj2000"},"content":"/**","lastModifiedDate":"2022-10-06"},{"lineNumber":18,"author":{"gitId":"pwjj2000"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2022-10-06"},{"lineNumber":19,"author":{"gitId":"pwjj2000"},"content":" */","lastModifiedDate":"2022-10-06"},{"lineNumber":20,"author":{"gitId":"pwjj2000"},"content":"public class TypicalAppointments {","lastModifiedDate":"2022-10-06"},{"lineNumber":21,"author":{"gitId":"pwjj2000"},"content":"    public static final Appointment APPOINTMENT_BENSON \u003d","lastModifiedDate":"2022-10-06"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"            new Appointment(\"Sore Throat\", \"2019-12-10 16:30\", \"\", false);","lastModifiedDate":"2022-10-14"},{"lineNumber":23,"author":{"gitId":"pwjj2000"},"content":"    public static final Appointment APPOINTMENT_CARL \u003d","lastModifiedDate":"2022-10-06"},{"lineNumber":24,"author":{"gitId":"WingKei67"},"content":"            new Appointment(\"Cough\", \"2010-12-31 23:45\", \"\",","lastModifiedDate":"2022-10-24"},{"lineNumber":25,"author":{"gitId":"WingKei67"},"content":"                    Set.of(Tag.THROAT), true);","lastModifiedDate":"2022-10-24"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"    public static final Appointment SECOND_APPOINTMENT_CARL \u003d","lastModifiedDate":"2022-10-09"},{"lineNumber":27,"author":{"gitId":"WingKei67"},"content":"            new Appointment(\"Sore Throat\", \"2019-12-10 16:30\", \"1Y\",","lastModifiedDate":"2022-10-24"},{"lineNumber":28,"author":{"gitId":"WingKei67"},"content":"                    Set.of(Tag.EAR), false);","lastModifiedDate":"2022-10-24"},{"lineNumber":29,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":30,"author":{"gitId":"WingKei67"},"content":"    public static final Appointment APPOINTMENT_DANIEL \u003d","lastModifiedDate":"2022-10-24"},{"lineNumber":31,"author":{"gitId":"WingKei67"},"content":"            new Appointment(\"Consultation\", \"2013-12-23 21:43\", \"\",","lastModifiedDate":"2022-10-24"},{"lineNumber":32,"author":{"gitId":"WingKei67"},"content":"                    Set.of(), true);","lastModifiedDate":"2022-10-24"},{"lineNumber":33,"author":{"gitId":"WingKei67"},"content":"    public static final Appointment APPOINTMENT_ELLE \u003d","lastModifiedDate":"2022-10-24"},{"lineNumber":34,"author":{"gitId":"WingKei67"},"content":"            new Appointment(\"Hearing Impairment and Nosebleed\", \"2016-02-21 20:36\", \"\",","lastModifiedDate":"2022-10-24"},{"lineNumber":35,"author":{"gitId":"WingKei67"},"content":"                    Set.of(Tag.EAR, Tag.NOSE), false);","lastModifiedDate":"2022-10-24"},{"lineNumber":36,"author":{"gitId":"WingKei67"},"content":"    public static final Appointment APPOINTMENT_GEORGE \u003d","lastModifiedDate":"2022-10-24"},{"lineNumber":37,"author":{"gitId":"WingKei67"},"content":"            new Appointment(\"Rhinitis\", \"2020-04-31 03:46\", \"\",","lastModifiedDate":"2022-10-24"},{"lineNumber":38,"author":{"gitId":"WingKei67"},"content":"                    Set.of(Tag.EAR, Tag.NOSE), true);","lastModifiedDate":"2022-10-24"},{"lineNumber":39,"author":{"gitId":"WingKei67"},"content":"    public static final Appointment SECOND_APPOINTMENT_GEORGE \u003d","lastModifiedDate":"2022-10-24"},{"lineNumber":40,"author":{"gitId":"WingKei67"},"content":"            new Appointment(\"Hearing Impairment\", \"2010-12-31 23:46\", \"\",","lastModifiedDate":"2022-10-24"},{"lineNumber":41,"author":{"gitId":"WingKei67"},"content":"                    Set.of(Tag.EAR), false);","lastModifiedDate":"2022-10-24"},{"lineNumber":42,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":43,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-22"},{"lineNumber":44,"author":{"gitId":"pwjj2000"},"content":"    public static List\u003cAppointment\u003e getTypicalAppointments() {","lastModifiedDate":"2022-10-06"},{"lineNumber":45,"author":{"gitId":"pwjj2000"},"content":"        APPOINTMENT_BENSON.setPatient(BENSON);","lastModifiedDate":"2022-10-06"},{"lineNumber":46,"author":{"gitId":"pwjj2000"},"content":"        APPOINTMENT_CARL.setPatient(CARL);","lastModifiedDate":"2022-10-06"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"        SECOND_APPOINTMENT_CARL.setPatient(CARL);","lastModifiedDate":"2022-10-09"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(new AppointmentBuilder(APPOINTMENT_CARL).build(),","lastModifiedDate":"2022-10-18"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"                new AppointmentBuilder(APPOINTMENT_BENSON).build(),","lastModifiedDate":"2022-10-18"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"                new AppointmentBuilder(SECOND_APPOINTMENT_CARL).build()));","lastModifiedDate":"2022-10-18"},{"lineNumber":51,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":52,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":53,"author":{"gitId":"WingKei67"},"content":"    public static void setAll() {","lastModifiedDate":"2022-10-24"},{"lineNumber":54,"author":{"gitId":"WingKei67"},"content":"        APPOINTMENT_BENSON.setPatient(BENSON);","lastModifiedDate":"2022-10-24"},{"lineNumber":55,"author":{"gitId":"WingKei67"},"content":"        APPOINTMENT_CARL.setPatient(CARL);","lastModifiedDate":"2022-10-24"},{"lineNumber":56,"author":{"gitId":"WingKei67"},"content":"        SECOND_APPOINTMENT_CARL.setPatient(CARL);","lastModifiedDate":"2022-10-24"},{"lineNumber":57,"author":{"gitId":"WingKei67"},"content":"        APPOINTMENT_DANIEL.setPatient(DANIEL);","lastModifiedDate":"2022-10-24"},{"lineNumber":58,"author":{"gitId":"WingKei67"},"content":"        APPOINTMENT_ELLE.setPatient(ELLE);","lastModifiedDate":"2022-10-24"},{"lineNumber":59,"author":{"gitId":"WingKei67"},"content":"        APPOINTMENT_GEORGE.setPatient(GEORGE);","lastModifiedDate":"2022-10-24"},{"lineNumber":60,"author":{"gitId":"WingKei67"},"content":"        SECOND_APPOINTMENT_GEORGE.setPatient(GEORGE);","lastModifiedDate":"2022-10-24"},{"lineNumber":61,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":62,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":63,"author":{"gitId":"WingKei67"},"content":"    public static List\u003cAppointment\u003e getDefaultAppointments() {","lastModifiedDate":"2022-10-24"},{"lineNumber":64,"author":{"gitId":"WingKei67"},"content":"        setAll();","lastModifiedDate":"2022-10-24"},{"lineNumber":65,"author":{"gitId":"WingKei67"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(","lastModifiedDate":"2022-10-24"},{"lineNumber":66,"author":{"gitId":"WingKei67"},"content":"                new AppointmentBuilder(APPOINTMENT_CARL).withTags(\"throat\").build(),","lastModifiedDate":"2022-10-24"},{"lineNumber":67,"author":{"gitId":"WingKei67"},"content":"                new AppointmentBuilder(SECOND_APPOINTMENT_GEORGE).build(),","lastModifiedDate":"2022-10-24"},{"lineNumber":68,"author":{"gitId":"WingKei67"},"content":"                new AppointmentBuilder(APPOINTMENT_DANIEL).build(),","lastModifiedDate":"2022-10-24"},{"lineNumber":69,"author":{"gitId":"WingKei67"},"content":"                new AppointmentBuilder(APPOINTMENT_ELLE).build(),","lastModifiedDate":"2022-10-24"},{"lineNumber":70,"author":{"gitId":"WingKei67"},"content":"                new AppointmentBuilder(APPOINTMENT_BENSON).withTags(\"nose\").build(),","lastModifiedDate":"2022-10-24"},{"lineNumber":71,"author":{"gitId":"WingKei67"},"content":"                new AppointmentBuilder(SECOND_APPOINTMENT_CARL).withTags(\"ear\").build(),","lastModifiedDate":"2022-10-24"},{"lineNumber":72,"author":{"gitId":"WingKei67"},"content":"                new AppointmentBuilder(APPOINTMENT_GEORGE).build()));","lastModifiedDate":"2022-10-24"},{"lineNumber":73,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":74,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":75,"author":{"gitId":"WingKei67"},"content":"    public static List\u003cAppointment\u003e getGroupedAppointmentsByTag() {","lastModifiedDate":"2022-10-24"},{"lineNumber":76,"author":{"gitId":"WingKei67"},"content":"        setAll();","lastModifiedDate":"2022-10-24"},{"lineNumber":77,"author":{"gitId":"WingKei67"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(new AppointmentBuilder(APPOINTMENT_DANIEL).build(),","lastModifiedDate":"2022-10-24"},{"lineNumber":78,"author":{"gitId":"WingKei67"},"content":"                new AppointmentBuilder(SECOND_APPOINTMENT_GEORGE).build(),","lastModifiedDate":"2022-10-24"},{"lineNumber":79,"author":{"gitId":"WingKei67"},"content":"                new AppointmentBuilder(SECOND_APPOINTMENT_CARL).withTags(\"ear\").build(),","lastModifiedDate":"2022-10-24"},{"lineNumber":80,"author":{"gitId":"WingKei67"},"content":"                new AppointmentBuilder(APPOINTMENT_BENSON).withTags(\"nose\").build(),","lastModifiedDate":"2022-10-24"},{"lineNumber":81,"author":{"gitId":"WingKei67"},"content":"                new AppointmentBuilder(APPOINTMENT_CARL).withTags(\"throat\").build(),","lastModifiedDate":"2022-10-24"},{"lineNumber":82,"author":{"gitId":"WingKei67"},"content":"                new AppointmentBuilder(APPOINTMENT_ELLE).build(),","lastModifiedDate":"2022-10-24"},{"lineNumber":83,"author":{"gitId":"WingKei67"},"content":"                new AppointmentBuilder(APPOINTMENT_GEORGE).build()));","lastModifiedDate":"2022-10-24"},{"lineNumber":84,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":85,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":86,"author":{"gitId":"WingKei67"},"content":"    public static List\u003cAppointment\u003e getGroupedAppointmentsByPatient() {","lastModifiedDate":"2022-10-24"},{"lineNumber":87,"author":{"gitId":"WingKei67"},"content":"        setAll();","lastModifiedDate":"2022-10-24"},{"lineNumber":88,"author":{"gitId":"WingKei67"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(","lastModifiedDate":"2022-10-24"},{"lineNumber":89,"author":{"gitId":"WingKei67"},"content":"                new AppointmentBuilder(APPOINTMENT_BENSON).withTags(\"nose\").build(),","lastModifiedDate":"2022-10-24"},{"lineNumber":90,"author":{"gitId":"WingKei67"},"content":"                new AppointmentBuilder(APPOINTMENT_CARL).withTags(\"throat\").build(),","lastModifiedDate":"2022-10-24"},{"lineNumber":91,"author":{"gitId":"WingKei67"},"content":"                new AppointmentBuilder(SECOND_APPOINTMENT_CARL).withTags(\"ear\").build(),","lastModifiedDate":"2022-10-24"},{"lineNumber":92,"author":{"gitId":"WingKei67"},"content":"                new AppointmentBuilder(APPOINTMENT_DANIEL).build(),","lastModifiedDate":"2022-10-24"},{"lineNumber":93,"author":{"gitId":"WingKei67"},"content":"                new AppointmentBuilder(APPOINTMENT_ELLE).build(),","lastModifiedDate":"2022-10-24"},{"lineNumber":94,"author":{"gitId":"WingKei67"},"content":"                new AppointmentBuilder(SECOND_APPOINTMENT_GEORGE).build(),","lastModifiedDate":"2022-10-24"},{"lineNumber":95,"author":{"gitId":"WingKei67"},"content":"                new AppointmentBuilder(APPOINTMENT_GEORGE).build()));","lastModifiedDate":"2022-10-24"},{"lineNumber":96,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":97,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-25"},{"lineNumber":98,"author":{"gitId":"WingKei67"},"content":"    public static List\u003cAppointment\u003e getGroupedAppointmentsByMark() {","lastModifiedDate":"2022-10-25"},{"lineNumber":99,"author":{"gitId":"WingKei67"},"content":"        setAll();","lastModifiedDate":"2022-10-25"},{"lineNumber":100,"author":{"gitId":"WingKei67"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(","lastModifiedDate":"2022-10-25"},{"lineNumber":101,"author":{"gitId":"WingKei67"},"content":"                new AppointmentBuilder(SECOND_APPOINTMENT_GEORGE).build(),","lastModifiedDate":"2022-10-25"},{"lineNumber":102,"author":{"gitId":"WingKei67"},"content":"                new AppointmentBuilder(APPOINTMENT_ELLE).build(),","lastModifiedDate":"2022-10-25"},{"lineNumber":103,"author":{"gitId":"WingKei67"},"content":"                new AppointmentBuilder(APPOINTMENT_BENSON).withTags(\"nose\").build(),","lastModifiedDate":"2022-10-25"},{"lineNumber":104,"author":{"gitId":"WingKei67"},"content":"                new AppointmentBuilder(SECOND_APPOINTMENT_CARL).withTags(\"ear\").build(),","lastModifiedDate":"2022-10-25"},{"lineNumber":105,"author":{"gitId":"WingKei67"},"content":"                new AppointmentBuilder(APPOINTMENT_CARL).withTags(\"throat\").build(),","lastModifiedDate":"2022-10-25"},{"lineNumber":106,"author":{"gitId":"WingKei67"},"content":"                new AppointmentBuilder(APPOINTMENT_DANIEL).build(),","lastModifiedDate":"2022-10-25"},{"lineNumber":107,"author":{"gitId":"WingKei67"},"content":"                new AppointmentBuilder(APPOINTMENT_GEORGE).build()));","lastModifiedDate":"2022-10-25"},{"lineNumber":108,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-25"},{"lineNumber":109,"author":{"gitId":"pwjj2000"},"content":"}","lastModifiedDate":"2022-10-06"}],"authorContributionMap":{"WingKei67":80,"JovonLim":6,"pwjj2000":23}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-08-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"    public static final Index INDEX_NON_EXISTENT \u003d Index.fromOneBased(99999);","lastModifiedDate":"2022-10-18"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);","lastModifiedDate":"2017-08-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);","lastModifiedDate":"2017-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);","lastModifiedDate":"2017-08-05"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"    public static final Index INDEX_FIRST_APPOINTMENT \u003d Index.fromOneBased(1);","lastModifiedDate":"2022-10-02"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"    public static final Index INDEX_SECOND_APPOINTMENT \u003d Index.fromOneBased(2);","lastModifiedDate":"2022-10-02"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"    public static final Index INDEX_THIRD_APPOINTMENT \u003d Index.fromOneBased(3);","lastModifiedDate":"2022-10-02"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-05"}],"authorContributionMap":{"NicholasTYD":5,"-":12}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":11,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_EAR;","lastModifiedDate":"2022-10-21"},{"lineNumber":12,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_NOSE;","lastModifiedDate":"2022-10-21"},{"lineNumber":13,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.testutil.TypicalAppointments.APPOINTMENT_BENSON;","lastModifiedDate":"2022-10-06"},{"lineNumber":14,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.testutil.TypicalAppointments.APPOINTMENT_CARL;","lastModifiedDate":"2022-10-06"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.testutil.TypicalAppointments.SECOND_APPOINTMENT_CARL;","lastModifiedDate":"2022-10-09"},{"lineNumber":16,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.testutil.TypicalAppointments.getTypicalAppointments;","lastModifiedDate":"2022-10-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2018-01-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            .withPhone(\"94351253\")","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"pwjj2000"},"content":"            .withTags(\"nose\").build();","lastModifiedDate":"2022-10-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2018-01-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")","lastModifiedDate":"2017-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")","lastModifiedDate":"2017-04-05"},{"lineNumber":38,"author":{"gitId":"pwjj2000"},"content":"            .withAppointment(APPOINTMENT_BENSON)","lastModifiedDate":"2022-10-06"},{"lineNumber":39,"author":{"gitId":"pwjj2000"},"content":"            .withTags(\"ear\", \"nose\").build();","lastModifiedDate":"2022-10-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")","lastModifiedDate":"2018-01-10"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\")","lastModifiedDate":"2022-10-02"},{"lineNumber":42,"author":{"gitId":"pwjj2000"},"content":"            .withAppointment(APPOINTMENT_CARL)","lastModifiedDate":"2022-10-06"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"            .withAppointment(SECOND_APPOINTMENT_CARL)","lastModifiedDate":"2022-10-09"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"            .build();","lastModifiedDate":"2022-10-02"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")","lastModifiedDate":"2018-01-10"},{"lineNumber":46,"author":{"gitId":"pwjj2000"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"nose\").build();","lastModifiedDate":"2022-10-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")","lastModifiedDate":"2018-01-10"},{"lineNumber":48,"author":{"gitId":"WingKei67"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withTags(\"ear\").build();","lastModifiedDate":"2022-10-22"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")","lastModifiedDate":"2018-01-10"},{"lineNumber":50,"author":{"gitId":"WingKei67"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withTags(\"throat\").build();","lastModifiedDate":"2022-10-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")","lastModifiedDate":"2018-01-10"},{"lineNumber":52,"author":{"gitId":"WingKei67"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withTags(\"nose\", \"ear\").build();","lastModifiedDate":"2022-10-22"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")","lastModifiedDate":"2018-01-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")","lastModifiedDate":"2018-01-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2018-01-10"},{"lineNumber":62,"author":{"gitId":"pwjj2000"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_NOSE).build();","lastModifiedDate":"2022-10-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2018-01-10"},{"lineNumber":64,"author":{"gitId":"pwjj2000"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_EAR, VALID_TAG_NOSE)","lastModifiedDate":"2022-10-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            .build();","lastModifiedDate":"2017-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation","lastModifiedDate":"2017-07-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2017-08-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2017-08-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2017-08-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2018-01-10"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            ab.addPerson(person);","lastModifiedDate":"2017-08-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":79,"author":{"gitId":"pwjj2000"},"content":"        for (Appointment appointment : getTypicalAppointments()) {","lastModifiedDate":"2022-10-06"},{"lineNumber":80,"author":{"gitId":"pwjj2000"},"content":"            ab.addAppointment(appointment);","lastModifiedDate":"2022-10-06"},{"lineNumber":81,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {","lastModifiedDate":"2018-01-10"},{"lineNumber":86,"author":{"gitId":"JovonLim"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(new PersonBuilder(ALICE).build(),","lastModifiedDate":"2022-10-01"},{"lineNumber":87,"author":{"gitId":"JovonLim"},"content":"                new PersonBuilder(BENSON).build(),","lastModifiedDate":"2022-10-01"},{"lineNumber":88,"author":{"gitId":"JovonLim"},"content":"                new PersonBuilder(CARL).build(),","lastModifiedDate":"2022-10-01"},{"lineNumber":89,"author":{"gitId":"JovonLim"},"content":"                new PersonBuilder(DANIEL).build(),","lastModifiedDate":"2022-10-01"},{"lineNumber":90,"author":{"gitId":"JovonLim"},"content":"                new PersonBuilder(ELLE).build(),","lastModifiedDate":"2022-10-01"},{"lineNumber":91,"author":{"gitId":"JovonLim"},"content":"                new PersonBuilder(FIONA).build(),","lastModifiedDate":"2022-10-01"},{"lineNumber":92,"author":{"gitId":"JovonLim"},"content":"                new PersonBuilder(GEORGE).build()));","lastModifiedDate":"2022-10-01"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":94,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-24"},{"lineNumber":95,"author":{"gitId":"WingKei67"},"content":"    public static List\u003cPerson\u003e getGroupedPersons() {","lastModifiedDate":"2022-10-24"},{"lineNumber":96,"author":{"gitId":"WingKei67"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(new PersonBuilder(CARL).build(),","lastModifiedDate":"2022-10-24"},{"lineNumber":97,"author":{"gitId":"WingKei67"},"content":"                new PersonBuilder(ELLE).build(),","lastModifiedDate":"2022-10-24"},{"lineNumber":98,"author":{"gitId":"WingKei67"},"content":"                new PersonBuilder(ALICE).build(),","lastModifiedDate":"2022-10-24"},{"lineNumber":99,"author":{"gitId":"WingKei67"},"content":"                new PersonBuilder(DANIEL).build(),","lastModifiedDate":"2022-10-24"},{"lineNumber":100,"author":{"gitId":"WingKei67"},"content":"                new PersonBuilder(FIONA).build(),","lastModifiedDate":"2022-10-24"},{"lineNumber":101,"author":{"gitId":"WingKei67"},"content":"                new PersonBuilder(BENSON).build(),","lastModifiedDate":"2022-10-24"},{"lineNumber":102,"author":{"gitId":"WingKei67"},"content":"                new PersonBuilder(GEORGE).build()));","lastModifiedDate":"2022-10-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-10-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"NicholasTYD":2,"JovonLim":10,"WingKei67":12,"-":65,"pwjj2000":15}}]
