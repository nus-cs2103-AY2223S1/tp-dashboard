[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"guanzhou03"},"content":"[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2223S1-CS2103T-T17-4/tp/actions)","lastModifiedDate":"2022-09-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"guanzhou03"},"content":"* **idENTify** is a desktop application targeted at admin staff working at an ENT department. ","lastModifiedDate":"2022-09-27"},{"lineNumber":6,"author":{"gitId":"guanzhou03"},"content":"Patients often have chronic conditions and our product will make it easier for the staff to keep track of these patients,","lastModifiedDate":"2022-09-27"},{"lineNumber":7,"author":{"gitId":"guanzhou03"},"content":"such as their appointment dates, the severity of their condition, their diagnosis, and allow admin staff to filter different types of patients. \u003cbr\u003e","lastModifiedDate":"2022-09-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  Example usages:","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"guanzhou03"},"content":"  * allows staff to check for upcoming appointments easily.","lastModifiedDate":"2022-09-27"},{"lineNumber":10,"author":{"gitId":"guanzhou03"},"content":"  * as a tracking tool for staff to easily find information and identify a patient.","lastModifiedDate":"2022-09-27"},{"lineNumber":11,"author":{"gitId":"guanzhou03"},"content":"  ","lastModifiedDate":"2022-09-27"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":"* For the detailed documentation of this project, see **[our project documentation](https://docs.google.com/document/d/1eVVKl_EY8rYMw-LWZk-CzaibCmX1WDeAZGJ3qqkGgoQ/edit)**.","lastModifiedDate":"2022-09-27"},{"lineNumber":14,"author":{"gitId":"guanzhou03"},"content":"* This project is based on the AddressBook-Level3 project created by the  [SE-EDU initiative](https://se-education.org#https://se-education.org/#contributing).","lastModifiedDate":"2022-09-27"}],"authorContributionMap":{"guanzhou03":10,"-":4}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`","lastModifiedDate":"2020-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"### Chen Guanzhou","lastModifiedDate":"2022-09-20"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":"\u003cimg src\u003d\"images/guanzhou03.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-09-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"guanzhou03"},"content":"[[github](https://github.com/guanzhou03)]","lastModifiedDate":"2022-09-20"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"[[portfolio](team/guanzhou03.md)]","lastModifiedDate":"2022-09-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"guanzhou03"},"content":"* Role: Team Lead","lastModifiedDate":"2022-09-20"},{"lineNumber":19,"author":{"gitId":"guanzhou03"},"content":"* Responsibilities: In charge of Model","lastModifiedDate":"2022-09-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"pwjj2000"},"content":"### Perry Wong Jun Jie","lastModifiedDate":"2022-09-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"pwjj2000"},"content":"\u003cimg src\u003d\"images/pwjj2000.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-09-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"pwjj2000"},"content":"[[github](https://github.com/pwjj2000)]","lastModifiedDate":"2022-09-20"},{"lineNumber":26,"author":{"gitId":"pwjj2000"},"content":"[[portfolio](team/pwjj2000.md)]","lastModifiedDate":"2022-09-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"pwjj2000"},"content":"* Role: Developer","lastModifiedDate":"2022-09-27"},{"lineNumber":29,"author":{"gitId":"pwjj2000"},"content":"* Responsibilities: Documentation and Testing","lastModifiedDate":"2022-09-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"### Lim Hong Wei, Jovon","lastModifiedDate":"2022-09-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"\u003cimg src\u003d\"images/jovonlim.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-09-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"[[github](http://github.com/jovonlim)] [[portfolio](team/jovonlim.md)]","lastModifiedDate":"2022-09-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"* Responsibilities: Storage","lastModifiedDate":"2022-09-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"NicholasTYD"},"content":"### Nicholas Tan","lastModifiedDate":"2022-09-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"\u003cimg src\u003d\"images/nicholastyd.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-09-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"[[github](https://github.com/NicholasTYD)]","lastModifiedDate":"2022-09-20"},{"lineNumber":45,"author":{"gitId":"NicholasTYD"},"content":"[[portfolio](team/nicholastyd.md)]","lastModifiedDate":"2022-09-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"* Responsibilities: UI","lastModifiedDate":"2022-09-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"WingKei67"},"content":"### Zhao Yao","lastModifiedDate":"2022-09-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"WingKei67"},"content":"\u003cimg src\u003d\"images/wingkei67.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-09-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"WingKei67"},"content":"[[github](http://github.com/wingkei67)]","lastModifiedDate":"2022-09-20"},{"lineNumber":55,"author":{"gitId":"WingKei67"},"content":"[[portfolio](team/wingkei67.md)]","lastModifiedDate":"2022-09-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"WingKei67"},"content":"* Responsibilities: Logic","lastModifiedDate":"2022-09-20"}],"authorContributionMap":{"NicholasTYD":6,"JovonLim":4,"WingKei67":5,"-":32,"guanzhou03":5,"pwjj2000":6}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* {list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well}","lastModifiedDate":"2021-07-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2021-07-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-07-31"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":83,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":84,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":85,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"**API** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2021-07-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `AddCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to add a person).","lastModifiedDate":"2021-07-31"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2021-07-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2021-07-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-07-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique tag, instead of each `Person` needing their own `Tag` objects.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/BetterModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"* can save both address book data and user preference data in json format, and read them back into corresponding objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/CommitActivityDiagram.png\" width\u003d\"250\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":247,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":248,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":249,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":250,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"pwjj2000"},"content":"**Target User Profile:**","lastModifiedDate":"2022-09-27"},{"lineNumber":259,"author":{"gitId":"pwjj2000"},"content":"* Tech savvy admin staff in Ear, Nose, Throat (ENT) department","lastModifiedDate":"2022-09-27"},{"lineNumber":260,"author":{"gitId":"pwjj2000"},"content":"* Has a need to manage a significant number of contacts","lastModifiedDate":"2022-09-27"},{"lineNumber":261,"author":{"gitId":"pwjj2000"},"content":"* Prefer desktop apps over other types","lastModifiedDate":"2022-09-27"},{"lineNumber":262,"author":{"gitId":"pwjj2000"},"content":"* Can type fast","lastModifiedDate":"2022-09-27"},{"lineNumber":263,"author":{"gitId":"pwjj2000"},"content":"* Prefer typing to mouse interactions","lastModifiedDate":"2022-09-27"},{"lineNumber":264,"author":{"gitId":"pwjj2000"},"content":"* Is reasonably comfortable using Command-Line Interface (CLI) apps","lastModifiedDate":"2022-09-27"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"pwjj2000"},"content":"**Value proposition:**","lastModifiedDate":"2022-09-27"},{"lineNumber":267,"author":{"gitId":"pwjj2000"},"content":"* ENT doctors treat patients who often have chronic conditions and our product will make it easier for the staff to keep track of these patients, such as their appointment dates, the severity of their condition, their diagnosis, etc","lastModifiedDate":"2022-09-27"},{"lineNumber":268,"author":{"gitId":"pwjj2000"},"content":"* ENT department offers a lot of services including head \u0026 neck surgery, voice clinic, and otology / skull base, etc; therefore, they need this app to filter different types of patients","lastModifiedDate":"2022-09-27"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"| Priority | As a …​                                    | I want to …​                   | So that I can…​                                                        |","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"JovonLim"},"content":"| `* * *`  | starting user                              | view a help screen             | understand how this application works                                  |","lastModifiedDate":"2022-09-27"},{"lineNumber":278,"author":{"gitId":"JovonLim"},"content":"| `* * *`  | user                                       | search idENTify                | find specific patients and information faster                          |","lastModifiedDate":"2022-09-27"},{"lineNumber":279,"author":{"gitId":"JovonLim"},"content":"| `* * *`  | user                                       | add a contact of the patient   | keep track of the patient\u0027s contact details                            |","lastModifiedDate":"2022-09-27"},{"lineNumber":280,"author":{"gitId":"JovonLim"},"content":"| `* * *`  | user                                       | delete a contact of the patient| remove the patient from my contacts when no longer needed              |","lastModifiedDate":"2022-09-27"},{"lineNumber":281,"author":{"gitId":"JovonLim"},"content":"| `* * *`  | user                                       | book an appointment for the patient | schedule the patient to meet the doctor                           |","lastModifiedDate":"2022-09-27"},{"lineNumber":282,"author":{"gitId":"JovonLim"},"content":"| `* * *`  | user                                       | cancel an appointment for the patient | ensure that the appointment schedule is updated and accurate    |","lastModifiedDate":"2022-09-27"},{"lineNumber":283,"author":{"gitId":"JovonLim"},"content":"| `* * *`  | user                                       | save the data of my contacts when I exit the app  | not lose the contacts when I open the app again     |","lastModifiedDate":"2022-09-27"},{"lineNumber":284,"author":{"gitId":"JovonLim"},"content":"| `* * *`  | user                                       | mark an appointment as done    |  know that the patient has already visited                             |","lastModifiedDate":"2022-09-28"},{"lineNumber":285,"author":{"gitId":"JovonLim"},"content":"| `* *`    | user                                       | edit information about a patient | merge and keep his information up to date                            |","lastModifiedDate":"2022-10-08"},{"lineNumber":286,"author":{"gitId":"JovonLim"},"content":"| `* *`    | clumsy user                                | edit an existing appointment   | fix my error in setting their appointment details                      |","lastModifiedDate":"2022-10-08"},{"lineNumber":287,"author":{"gitId":"JovonLim"},"content":"| `* *`    | clumsy user                         | unmark an appointment as done  | change my appointment state without deleting and adding the appointment again |","lastModifiedDate":"2022-09-28"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"guanzhou03"},"content":"(For all use cases below, the **System** is the `idENTify` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2022-09-27"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"guanzhou03"},"content":"**Use Case: UC01 - Add a Patient** ","lastModifiedDate":"2022-09-27"},{"lineNumber":296,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":297,"author":{"gitId":"guanzhou03"},"content":"**Guarantees**: A patient contact is added into idENTify.","lastModifiedDate":"2022-09-27"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"guanzhou03"},"content":"1. User adds the patient by entering the command and the patient details.","lastModifiedDate":"2022-09-27"},{"lineNumber":302,"author":{"gitId":"guanzhou03"},"content":"2. idENTify adds the patient.","lastModifiedDate":"2022-09-27"},{"lineNumber":303,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":304,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":305,"author":{"gitId":"guanzhou03"},"content":"    Use case ends","lastModifiedDate":"2022-09-27"},{"lineNumber":306,"author":{"gitId":"-"},"content":"    ","lastModifiedDate":"2020-05-23"},{"lineNumber":307,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":308,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":309,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":310,"author":{"gitId":"guanzhou03"},"content":"* 1a. idENTify detects an error in the entered data.","lastModifiedDate":"2022-09-27"},{"lineNumber":311,"author":{"gitId":"guanzhou03"},"content":"  - 1a1. idENTify shows an error message.","lastModifiedDate":"2022-09-27"},{"lineNumber":312,"author":{"gitId":"guanzhou03"},"content":"  - 1a2. User enters new data.","lastModifiedDate":"2022-09-27"},{"lineNumber":313,"author":{"gitId":"guanzhou03"},"content":"  - Steps 1a1-1a2 are repeated until the data entered are correct.","lastModifiedDate":"2022-09-27"},{"lineNumber":314,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":315,"author":{"gitId":"guanzhou03"},"content":"  Use case resumes at step 2.","lastModifiedDate":"2022-09-27"},{"lineNumber":316,"author":{"gitId":"guanzhou03"},"content":"  ","lastModifiedDate":"2022-09-27"},{"lineNumber":317,"author":{"gitId":"guanzhou03"},"content":"**Use Case: UC02 - Show a list of patients**","lastModifiedDate":"2022-09-27"},{"lineNumber":318,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":319,"author":{"gitId":"guanzhou03"},"content":"**Guarantees**: A list of patients’ contact is shown.","lastModifiedDate":"2022-09-27"},{"lineNumber":320,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":321,"author":{"gitId":"guanzhou03"},"content":"**MSS**","lastModifiedDate":"2022-09-27"},{"lineNumber":322,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":323,"author":{"gitId":"guanzhou03"},"content":"1. User requests to list patients","lastModifiedDate":"2022-09-27"},{"lineNumber":324,"author":{"gitId":"guanzhou03"},"content":"2. idENTify shows a list of patients.","lastModifiedDate":"2022-09-27"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":326,"author":{"gitId":"guanzhou03"},"content":"    Use case ends","lastModifiedDate":"2022-09-27"},{"lineNumber":327,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":328,"author":{"gitId":"guanzhou03"},"content":"**Extensions**","lastModifiedDate":"2022-09-27"},{"lineNumber":329,"author":{"gitId":"guanzhou03"},"content":"- 2a. The list is empty.","lastModifiedDate":"2022-09-27"},{"lineNumber":330,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":331,"author":{"gitId":"guanzhou03"},"content":" ","lastModifiedDate":"2022-09-27"},{"lineNumber":332,"author":{"gitId":"guanzhou03"},"content":"     Use case ends","lastModifiedDate":"2022-09-27"},{"lineNumber":333,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":334,"author":{"gitId":"guanzhou03"},"content":"**Use Case: UC03 - Show a list of appointments**","lastModifiedDate":"2022-09-27"},{"lineNumber":335,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":336,"author":{"gitId":"guanzhou03"},"content":"**Guarantees**: A list of appointments is shown.","lastModifiedDate":"2022-09-27"},{"lineNumber":337,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":338,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":339,"author":{"gitId":"guanzhou03"},"content":"1. User requests to list appointments","lastModifiedDate":"2022-09-27"},{"lineNumber":340,"author":{"gitId":"guanzhou03"},"content":"2. idENTify shows a list of appointments","lastModifiedDate":"2022-09-27"},{"lineNumber":341,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":342,"author":{"gitId":"guanzhou03"},"content":"   Use case ends","lastModifiedDate":"2022-09-27"},{"lineNumber":343,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":344,"author":{"gitId":"guanzhou03"},"content":"**Extensions**","lastModifiedDate":"2022-09-27"},{"lineNumber":345,"author":{"gitId":"guanzhou03"},"content":"- 2a. The list is empty.","lastModifiedDate":"2022-09-27"},{"lineNumber":346,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":347,"author":{"gitId":"guanzhou03"},"content":"    Use case ends","lastModifiedDate":"2022-09-27"},{"lineNumber":348,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":349,"author":{"gitId":"guanzhou03"},"content":"**Use Case: UC04 - Delete a patient**","lastModifiedDate":"2022-09-27"},{"lineNumber":350,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":351,"author":{"gitId":"guanzhou03"},"content":"**Guarantees**: The patient will be deleted from the patient list only if the data entered are correct.","lastModifiedDate":"2022-09-27"},{"lineNumber":352,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":353,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2022-09-27"},{"lineNumber":354,"author":{"gitId":"JovonLim"},"content":"1. User gets the \u003cins\u003elist of patients(UC02)\u003cins\u003e.","lastModifiedDate":"2022-09-28"},{"lineNumber":355,"author":{"gitId":"guanzhou03"},"content":"2. User requests to delete a specific patient in the list.","lastModifiedDate":"2022-09-27"},{"lineNumber":356,"author":{"gitId":"guanzhou03"},"content":"3. idENTify deletes the patient.","lastModifiedDate":"2022-09-27"},{"lineNumber":357,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":358,"author":{"gitId":"guanzhou03"},"content":"    Use case ends","lastModifiedDate":"2022-09-27"},{"lineNumber":359,"author":{"gitId":"guanzhou03"},"content":"    ","lastModifiedDate":"2022-09-27"},{"lineNumber":360,"author":{"gitId":"NicholasTYD"},"content":"**Use Case: UC05 - find a patient**","lastModifiedDate":"2022-09-27"},{"lineNumber":361,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":362,"author":{"gitId":"NicholasTYD"},"content":"**Guarantees:**  A list of patients that matches the given query if applicable.","lastModifiedDate":"2022-09-27"},{"lineNumber":363,"author":{"gitId":"NicholasTYD"},"content":"1.  User requests to find a patient.","lastModifiedDate":"2022-09-27"},{"lineNumber":364,"author":{"gitId":"NicholasTYD"},"content":"2.  idENTify shows a list of patients that matches the given query.","lastModifiedDate":"2022-09-27"},{"lineNumber":365,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":366,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":367,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":368,"author":{"gitId":"-"},"content":"    ","lastModifiedDate":"2020-05-23"},{"lineNumber":369,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":370,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":371,"author":{"gitId":"NicholasTYD"},"content":"- 2a. The list is empty.","lastModifiedDate":"2022-09-27"},{"lineNumber":372,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":373,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":374,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":376,"author":{"gitId":"NicholasTYD"},"content":"**Use Case: UC06 -  Book an appointment**","lastModifiedDate":"2022-09-27"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":378,"author":{"gitId":"NicholasTYD"},"content":"**Guarantees:** An appointment is booked for the patient only if the data entered are correct.","lastModifiedDate":"2022-09-27"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":380,"author":{"gitId":"NicholasTYD"},"content":"**MSS**","lastModifiedDate":"2022-09-27"},{"lineNumber":381,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":382,"author":{"gitId":"JovonLim"},"content":"1.  User gets the \u003cins\u003elist of patients(UC02)\u003cins\u003e.","lastModifiedDate":"2022-09-28"},{"lineNumber":383,"author":{"gitId":"NicholasTYD"},"content":"2.  User requests to book an appointment for a specified patient.","lastModifiedDate":"2022-09-27"},{"lineNumber":384,"author":{"gitId":"NicholasTYD"},"content":"3.  idENTify shows that an appointment has been booked for that patient.","lastModifiedDate":"2022-09-27"},{"lineNumber":385,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":386,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":387,"author":{"gitId":"NicholasTYD"},"content":"    Use case ends.","lastModifiedDate":"2022-09-27"},{"lineNumber":388,"author":{"gitId":"NicholasTYD"},"content":"    ","lastModifiedDate":"2022-09-27"},{"lineNumber":389,"author":{"gitId":"NicholasTYD"},"content":"**Extensions**  ","lastModifiedDate":"2022-09-27"},{"lineNumber":390,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":391,"author":{"gitId":"NicholasTYD"},"content":"* 2a.  idENTify detects an error in the entered data.","lastModifiedDate":"2022-09-27"},{"lineNumber":392,"author":{"gitId":"NicholasTYD"},"content":"  - 2a1. idENTify shows an error message.","lastModifiedDate":"2022-09-27"},{"lineNumber":393,"author":{"gitId":"NicholasTYD"},"content":"  - 2a2. User enters new data.","lastModifiedDate":"2022-09-27"},{"lineNumber":394,"author":{"gitId":"NicholasTYD"},"content":"  - Steps 2a1-2a2 are repeated until the data entered are correct.","lastModifiedDate":"2022-09-27"},{"lineNumber":395,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":396,"author":{"gitId":"NicholasTYD"},"content":"  Use case resumes at step 3.","lastModifiedDate":"2022-09-27"},{"lineNumber":397,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":398,"author":{"gitId":"NicholasTYD"},"content":"**Use Case: UC07 - cancel an appointment**","lastModifiedDate":"2022-09-27"},{"lineNumber":399,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":400,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":401,"author":{"gitId":"NicholasTYD"},"content":"**Guarantees:** The appointment will be deleted from the appointment list only if the data entered are correct.","lastModifiedDate":"2022-09-27"},{"lineNumber":402,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":403,"author":{"gitId":"NicholasTYD"},"content":"**MSS**","lastModifiedDate":"2022-09-27"},{"lineNumber":404,"author":{"gitId":"JovonLim"},"content":"1.  User gets the \u003cins\u003elist of appointments(UC03)\u003cins\u003e.","lastModifiedDate":"2022-09-28"},{"lineNumber":405,"author":{"gitId":"NicholasTYD"},"content":"2.  User requests to cancel a specific appointment in the list.","lastModifiedDate":"2022-09-27"},{"lineNumber":406,"author":{"gitId":"NicholasTYD"},"content":"3.  idENTify shows that the appointment has been cancelled.","lastModifiedDate":"2022-09-27"},{"lineNumber":407,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":408,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2022-09-27"},{"lineNumber":409,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":410,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2022-09-27"},{"lineNumber":411,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":412,"author":{"gitId":"NicholasTYD"},"content":"* 2a. idENTify detects an error in the entered data.","lastModifiedDate":"2022-09-27"},{"lineNumber":413,"author":{"gitId":"NicholasTYD"},"content":"  - 2a1. idENTify shows an error message.","lastModifiedDate":"2022-09-27"},{"lineNumber":414,"author":{"gitId":"NicholasTYD"},"content":"  - 2a2. User enters new data.","lastModifiedDate":"2022-09-27"},{"lineNumber":415,"author":{"gitId":"NicholasTYD"},"content":"  - Steps 2a1-2a2 are repeated until the data entered are correct.","lastModifiedDate":"2022-09-27"},{"lineNumber":416,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":417,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":418,"author":{"gitId":"NicholasTYD"},"content":"  Use case resumes at step 3.","lastModifiedDate":"2022-09-27"},{"lineNumber":419,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":420,"author":{"gitId":"NicholasTYD"},"content":"**Use Case: UC08 - mark an appointment**","lastModifiedDate":"2022-09-27"},{"lineNumber":421,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":422,"author":{"gitId":"NicholasTYD"},"content":"**Guarantees:** The appointment will be marked as done only if the data entered are correct.","lastModifiedDate":"2022-09-27"},{"lineNumber":423,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":424,"author":{"gitId":"NicholasTYD"},"content":"**MSS**","lastModifiedDate":"2022-09-27"},{"lineNumber":425,"author":{"gitId":"JovonLim"},"content":"1.  User gets the \u003cins\u003elist of appointments(UC03)\u003cins\u003e.","lastModifiedDate":"2022-09-28"},{"lineNumber":426,"author":{"gitId":"NicholasTYD"},"content":"2.  User requests to mark a specified appointment for a specified patient.","lastModifiedDate":"2022-09-27"},{"lineNumber":427,"author":{"gitId":"NicholasTYD"},"content":"3.  idENTify marks the selected appointment.","lastModifiedDate":"2022-09-27"},{"lineNumber":428,"author":{"gitId":"NicholasTYD"},"content":"    Use case ends.","lastModifiedDate":"2022-09-27"},{"lineNumber":429,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":430,"author":{"gitId":"NicholasTYD"},"content":"**Extensions**","lastModifiedDate":"2022-09-27"},{"lineNumber":431,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":432,"author":{"gitId":"NicholasTYD"},"content":"* 2a. idENTify detects an error in the entered data.","lastModifiedDate":"2022-09-27"},{"lineNumber":433,"author":{"gitId":"NicholasTYD"},"content":"  - 2a1. idENTify shows an error message.","lastModifiedDate":"2022-09-27"},{"lineNumber":434,"author":{"gitId":"NicholasTYD"},"content":"  - 2a2. User enters new data.","lastModifiedDate":"2022-09-27"},{"lineNumber":435,"author":{"gitId":"NicholasTYD"},"content":"  - Steps 2a1-2a2 are repeated until the data entered are correct.","lastModifiedDate":"2022-09-27"},{"lineNumber":436,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":437,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":438,"author":{"gitId":"NicholasTYD"},"content":"  Use case resumes at step 3.","lastModifiedDate":"2022-09-27"},{"lineNumber":439,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":440,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":441,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":442,"author":{"gitId":"WingKei67"},"content":"1. Should work on Windows, Linux, OS-X Operating System (OS) as long as it has Java 11.","lastModifiedDate":"2022-09-27"},{"lineNumber":443,"author":{"gitId":"-"},"content":"2. Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":444,"author":{"gitId":"WingKei67"},"content":"3. A user with above average typing speed for regular English text should be able to accomplish most of the tasks ","lastModifiedDate":"2022-09-27"},{"lineNumber":445,"author":{"gitId":"WingKei67"},"content":"   faster using commands than using the mouse.","lastModifiedDate":"2022-09-27"},{"lineNumber":446,"author":{"gitId":"WingKei67"},"content":"4. Should not be used with offensive language.","lastModifiedDate":"2022-09-27"},{"lineNumber":447,"author":{"gitId":"WingKei67"},"content":"5. Expected to adhere to a schedule that delivers a feature set every one month.","lastModifiedDate":"2022-09-27"},{"lineNumber":448,"author":{"gitId":"WingKei67"},"content":"6. Should respond to each command at most 1 second long.","lastModifiedDate":"2022-09-27"},{"lineNumber":449,"author":{"gitId":"WingKei67"},"content":"7. Not required to make calls to contacts.","lastModifiedDate":"2022-09-27"},{"lineNumber":450,"author":{"gitId":"WingKei67"},"content":"8. Should be able to store data locally in a human editable text file.","lastModifiedDate":"2022-09-27"},{"lineNumber":451,"author":{"gitId":"WingKei67"},"content":"9. Should not use Database Management System to store data.","lastModifiedDate":"2022-09-27"},{"lineNumber":452,"author":{"gitId":"WingKei67"},"content":"10. Product should be a result of evolving the given code base.","lastModifiedDate":"2022-09-27"},{"lineNumber":453,"author":{"gitId":"WingKei67"},"content":"11. Should be for a single user.","lastModifiedDate":"2022-09-27"},{"lineNumber":454,"author":{"gitId":"WingKei67"},"content":"12. Should be able to be used at any time (even beyond this semester)","lastModifiedDate":"2022-09-27"},{"lineNumber":455,"author":{"gitId":"WingKei67"},"content":"13. Should not exceed 100MB in size.","lastModifiedDate":"2022-09-27"},{"lineNumber":456,"author":{"gitId":"WingKei67"},"content":"14. Should not require external software to run.","lastModifiedDate":"2022-09-27"},{"lineNumber":457,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":458,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":459,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":460,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":461,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":462,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":463,"author":{"gitId":"WingKei67"},"content":"* **Regular English text**: Basic text that is keyed in by a user. Not code or not system admin commands.","lastModifiedDate":"2022-09-27"},{"lineNumber":464,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":465,"author":{"gitId":"WingKei67"},"content":"* **Operating System (OS)**: The low-level software that supports a computer\u0027s basic functions, common ones include ","lastModifiedDate":"2022-09-27"},{"lineNumber":466,"author":{"gitId":"WingKei67"},"content":"  Windows, macOS, Linux.","lastModifiedDate":"2022-09-27"},{"lineNumber":467,"author":{"gitId":"WingKei67"},"content":"* **Search string**: The text that a user uses to find a specific patient (such as a part of the patient’s name).","lastModifiedDate":"2022-09-27"},{"lineNumber":468,"author":{"gitId":"WingKei67"},"content":"* **Command-Line Interface (CLI)**: A text-based user interface (UI) used to run programs, manage computer files and ","lastModifiedDate":"2022-09-27"},{"lineNumber":469,"author":{"gitId":"WingKei67"},"content":"  interact with the computer.","lastModifiedDate":"2022-09-27"},{"lineNumber":470,"author":{"gitId":"WingKei67"},"content":"* **Graphical User Interface (GUI)**: A graphics-based operating system interface that uses icons, menus and a mouse ","lastModifiedDate":"2022-09-27"},{"lineNumber":471,"author":{"gitId":"WingKei67"},"content":"  (to click on the icon or pull down the menus) to manage interaction with the system.","lastModifiedDate":"2022-09-27"},{"lineNumber":472,"author":{"gitId":"WingKei67"},"content":"* **Main Success Scenario**: Describes the most straightforward interaction for a given use case, which assumes that nothing goes wrong.","lastModifiedDate":"2022-09-27"},{"lineNumber":473,"author":{"gitId":"WingKei67"},"content":"* **Actor**: A role played by a user. An actor can be a human or another system. Actors are not part of the system; they reside outside the system.","lastModifiedDate":"2022-09-27"},{"lineNumber":474,"author":{"gitId":"WingKei67"},"content":"* **Backward compatible**: Refers to a hardware or software system that can use the interface of an older version of the same product.","lastModifiedDate":"2022-09-27"},{"lineNumber":475,"author":{"gitId":"WingKei67"},"content":"* **Store data locally**: Allow the required data to be stored in a file in the user’s computer.","lastModifiedDate":"2022-09-27"},{"lineNumber":476,"author":{"gitId":"WingKei67"},"content":"* **Database Management Systems (DBMS)**: Software systems used to store, retrieve, and run queries on data. A DBMS serves as an interface between an end-user and a database, allowing users to create, read, update, and delete data in the database.","lastModifiedDate":"2022-09-27"},{"lineNumber":477,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":478,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":479,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":480,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":481,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":482,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":483,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":484,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":485,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":486,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":487,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":488,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":489,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":490,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":491,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":492,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":493,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":494,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":495,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":496,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":497,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":498,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":499,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":500,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":501,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":502,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":503,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":504,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":505,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":506,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":507,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":508,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":509,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":510,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":511,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":512,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":513,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":514,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":515,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":516,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":517,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":518,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":519,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":520,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":521,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":522,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":523,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":524,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":525,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":526,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":527,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":528,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":529,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":530,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"NicholasTYD":55,"JovonLim":15,"WingKei67":30,"-":369,"pwjj2000":10,"guanzhou03":51}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"IdENTify is a **desktop app for managing contacts, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, idENTify can get your contact management tasks done faster than traditional GUI apps.","lastModifiedDate":"2022-09-20"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc.","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken.","lastModifiedDate":"2021-02-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-02-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-02-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"### Viewing help : `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"Shows a message explaning how to access the help page.","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"Format: `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"### Adding a person: `add`","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"Adds a patient into idENTify.","lastModifiedDate":"2022-09-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"WingKei67"},"content":"Format: `Format: add n/NAME p/PHONE_NUMBER a/ADDRESS [e/EMAIL] [t/TAG]…​`","lastModifiedDate":"2022-09-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"A person can have any number of tags (including 0)","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"WingKei67"},"content":"* `add n/John Doe p/98765432 a/John street, block 123, #01-01`","lastModifiedDate":"2022-09-20"},{"lineNumber":58,"author":{"gitId":"WingKei67"},"content":"* `add n/Betsy Crowe p/88888888 a/Newgate Prison t/e`","lastModifiedDate":"2022-09-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"pwjj2000"},"content":"### Listing all patients/appointments : `list`","lastModifiedDate":"2022-09-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"pwjj2000"},"content":"Shows a list of all patients or appointments, depending on the parameter given.","lastModifiedDate":"2022-09-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"pwjj2000"},"content":"Format:","lastModifiedDate":"2022-09-20"},{"lineNumber":65,"author":{"gitId":"pwjj2000"},"content":"* `list patients`","lastModifiedDate":"2022-09-20"},{"lineNumber":66,"author":{"gitId":"pwjj2000"},"content":"* `list appts`","lastModifiedDate":"2022-09-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"JovonLim"},"content":"### Editing a patient : `edit patients`","lastModifiedDate":"2022-10-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"JovonLim"},"content":"Edits an existing patient in idENTify.","lastModifiedDate":"2022-10-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"JovonLim"},"content":"Format: `edit patients INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`","lastModifiedDate":"2022-10-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"JovonLim"},"content":"* Edits the patient at the specified `INDEX`. The index refers to the index number shown in the displayed patient list. The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2022-10-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative.","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"JovonLim"},"content":"* You can remove all the patient’s tags by typing `t/` without","lastModifiedDate":"2022-10-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    specifying any tags after it.","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"JovonLim"},"content":"*  `edit patients 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st patient to be `91234567` and `johndoe@example.com` respectively.","lastModifiedDate":"2022-10-08"},{"lineNumber":84,"author":{"gitId":"JovonLim"},"content":"*  `edit patients 2 n/Betsy Crower t/` Edits the name of the 2nd patient to be `Betsy Crower` and clears all existing tags.","lastModifiedDate":"2022-10-08"},{"lineNumber":85,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":86,"author":{"gitId":"JovonLim"},"content":"### Editing an appointment: `edit appts`","lastModifiedDate":"2022-10-08"},{"lineNumber":87,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":88,"author":{"gitId":"JovonLim"},"content":"Edits an existing patient\u0027s appointment in idENTify.","lastModifiedDate":"2022-10-08"},{"lineNumber":89,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":90,"author":{"gitId":"JovonLim"},"content":"Format: `edit appts PATIENT_INDEX APPOINTMENT_INDEX [r/REASON] [d/DATE]`","lastModifiedDate":"2022-10-08"},{"lineNumber":91,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":92,"author":{"gitId":"JovonLim"},"content":"* `PATIENT_INDEX` refers to the index number of the patient shown in the displayed patient list.","lastModifiedDate":"2022-10-08"},{"lineNumber":93,"author":{"gitId":"JovonLim"},"content":"* `APPOINTMENT_INDEX` refers to the index number of the appointment to be unmarked for the desired patient.","lastModifiedDate":"2022-10-08"},{"lineNumber":94,"author":{"gitId":"JovonLim"},"content":"* Values of `PATIENT_INDEX` and `APPOINTMENT_INDEX` **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2022-10-08"},{"lineNumber":95,"author":{"gitId":"JovonLim"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2022-10-08"},{"lineNumber":96,"author":{"gitId":"JovonLim"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2022-10-08"},{"lineNumber":97,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":98,"author":{"gitId":"JovonLim"},"content":"Examples: ","lastModifiedDate":"2022-10-08"},{"lineNumber":99,"author":{"gitId":"JovonLim"},"content":"* `edit appts 1 1 r/Cough d/2022-12-10 16:30` Edits the reason and date of the first patient\u0027s first appointment to be `Cough` and `2022-12-10 16:30` ","lastModifiedDate":"2022-10-08"},{"lineNumber":100,"author":{"gitId":"JovonLim"},"content":"respectively.","lastModifiedDate":"2022-10-08"},{"lineNumber":101,"author":{"gitId":"JovonLim"},"content":"* `edit appts 1 1 r/Sore Throat` Edits the reason of the first patient\u0027s first appointment to be `Sore Throat`. Existing date will not be edited.","lastModifiedDate":"2022-10-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"### Locating persons by name: `find`","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"Finds persons whose names contain any of the given keywords.","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"* The search is case-insensitive. e.g `hans` will match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"* Only the name is searched.","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search).","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"* `find John` returns `john` and `John Doe`","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"* `find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"### Deleting a person : `delete`","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"NicholasTYD"},"content":"Deletes the specified person from idENTify.","lastModifiedDate":"2022-09-20"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"Format: `delete INDEX`","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* Deletes the person at the specified `INDEX`.","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"* The index refers to the index number shown in the displayed person list.","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"NicholasTYD"},"content":"* `list` followed by `delete 2` deletes the 2nd person in idENTify.","lastModifiedDate":"2022-09-20"},{"lineNumber":133,"author":{"gitId":"-"},"content":"* `find Betsy` followed by `delete 1` deletes the 1st person in the results of the `find` command.","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"JovonLim"},"content":"### Add an appointment:  `book`","lastModifiedDate":"2022-09-20"},{"lineNumber":136,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":137,"author":{"gitId":"JovonLim"},"content":"Books an appointment for the specified patient at INDEX with a given REASON and DATE. ","lastModifiedDate":"2022-09-20"},{"lineNumber":138,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":139,"author":{"gitId":"JovonLim"},"content":"Appointments added are sorted according to their date.","lastModifiedDate":"2022-10-05"},{"lineNumber":140,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-05"},{"lineNumber":141,"author":{"gitId":"JovonLim"},"content":"Format: `book INDEX r/REASON d/DATE`","lastModifiedDate":"2022-09-20"},{"lineNumber":142,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":143,"author":{"gitId":"JovonLim"},"content":"* The index refers to the index number shown in the displayed patient list.","lastModifiedDate":"2022-10-05"},{"lineNumber":144,"author":{"gitId":"JovonLim"},"content":"* The index must be a positive integer 1, 2, 3, …​","lastModifiedDate":"2022-09-20"},{"lineNumber":145,"author":{"gitId":"JovonLim"},"content":"* Dates should be inputted in a YYYY-MM-DD HH:MM format or HH:MM YYYY-MM-DD format.","lastModifiedDate":"2022-10-05"},{"lineNumber":146,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":147,"author":{"gitId":"JovonLim"},"content":"Examples:","lastModifiedDate":"2022-09-20"},{"lineNumber":148,"author":{"gitId":"JovonLim"},"content":"* `book 2 r/Ear Infection d/2022-12-31 18:00`","lastModifiedDate":"2022-10-05"},{"lineNumber":149,"author":{"gitId":"JovonLim"},"content":"* `book 2 r/Ear Infection d/16:30 2022-12-31`","lastModifiedDate":"2022-10-05"},{"lineNumber":150,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":151,"author":{"gitId":"NicholasTYD"},"content":"### Mark an appointment as completed:  `mark`","lastModifiedDate":"2022-09-27"},{"lineNumber":152,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":153,"author":{"gitId":"NicholasTYD"},"content":"Marks a specified appointment `APPOINTMENT_INDEX` for a specified patient at `PATIENT_INDEX` as completed.","lastModifiedDate":"2022-10-02"},{"lineNumber":154,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":155,"author":{"gitId":"NicholasTYD"},"content":"Format: `mark PATIENT_INDEX APPOINTMENT_INDEX`","lastModifiedDate":"2022-10-02"},{"lineNumber":156,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":157,"author":{"gitId":"NicholasTYD"},"content":"* `PATIENT_INDEX` refers to the index number of the patient shown in the displayed patient list.","lastModifiedDate":"2022-10-02"},{"lineNumber":158,"author":{"gitId":"NicholasTYD"},"content":"* `APPOINTMENT_INDEX` refers to the index number of the appointment to be marked for the desired patient.","lastModifiedDate":"2022-10-02"},{"lineNumber":159,"author":{"gitId":"NicholasTYD"},"content":"* Values of `PATIENT_INDEX` and `APPOINTMENT_INDEX` **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2022-10-02"},{"lineNumber":160,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":161,"author":{"gitId":"NicholasTYD"},"content":"Examples:","lastModifiedDate":"2022-09-27"},{"lineNumber":162,"author":{"gitId":"NicholasTYD"},"content":"* `mark 3 1`","lastModifiedDate":"2022-09-27"},{"lineNumber":163,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":164,"author":{"gitId":"NicholasTYD"},"content":"### Unmark an appointment as incomplete:  `unmark`","lastModifiedDate":"2022-10-04"},{"lineNumber":165,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":166,"author":{"gitId":"NicholasTYD"},"content":"Unmarks a specified appointment `APPOINTMENT_INDEX` for a specified patient at `PATIENT_INDEX` as incomplete.","lastModifiedDate":"2022-10-04"},{"lineNumber":167,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":168,"author":{"gitId":"NicholasTYD"},"content":"Format: `unmark PATIENT_INDEX APPOINTMENT_INDEX`","lastModifiedDate":"2022-10-04"},{"lineNumber":169,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":170,"author":{"gitId":"NicholasTYD"},"content":"* `PATIENT_INDEX` refers to the index number of the patient shown in the displayed patient list.","lastModifiedDate":"2022-10-04"},{"lineNumber":171,"author":{"gitId":"NicholasTYD"},"content":"* `APPOINTMENT_INDEX` refers to the index number of the appointment to be unmarked for the desired patient.","lastModifiedDate":"2022-10-04"},{"lineNumber":172,"author":{"gitId":"NicholasTYD"},"content":"* Values of `PATIENT_INDEX` and `APPOINTMENT_INDEX` **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2022-10-04"},{"lineNumber":173,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":174,"author":{"gitId":"NicholasTYD"},"content":"Examples:","lastModifiedDate":"2022-10-04"},{"lineNumber":175,"author":{"gitId":"NicholasTYD"},"content":"* `unmark 4 2`","lastModifiedDate":"2022-10-04"},{"lineNumber":176,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":177,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"NicholasTYD"},"content":"Clears all entries from idENTify.","lastModifiedDate":"2022-09-20"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"Format: `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"guanzhou03"},"content":"### Cancel","lastModifiedDate":"2022-09-20"},{"lineNumber":190,"author":{"gitId":"guanzhou03"},"content":"Cancels a specified appointment from the specified patient’s appointment list. \u003cbr\u003e","lastModifiedDate":"2022-09-20"},{"lineNumber":191,"author":{"gitId":"guanzhou03"},"content":"Format: ```cancel PATIENT_INDEX APPOINTMENT_INDEX```","lastModifiedDate":"2022-09-20"},{"lineNumber":192,"author":{"gitId":"NicholasTYD"},"content":"- Deletes the appointment with `APPOINTMENT_INDEX` for the patient at the specified `PATIENT_INDEX`.","lastModifiedDate":"2022-09-27"},{"lineNumber":193,"author":{"gitId":"guanzhou03"},"content":"- The index refers to the index number shown in the displayed appointment list.","lastModifiedDate":"2022-09-20"},{"lineNumber":194,"author":{"gitId":"guanzhou03"},"content":"- The indexes must be a positive integer 1, 2, 3, …​","lastModifiedDate":"2022-09-20"},{"lineNumber":195,"author":{"gitId":"-"},"content":"### Saving the data","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"AddressBook data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"### Editing the data file","lastModifiedDate":"2021-02-04"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":201,"author":{"gitId":"NicholasTYD"},"content":"IdENTify data are saved as a JSON file `[JAR file location]/data/addressbook.json`. Advanced users are welcome to update data directly by editing that data file.","lastModifiedDate":"2022-09-20"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":203,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2021-02-04"},{"lineNumber":204,"author":{"gitId":"NicholasTYD"},"content":"If your changes to the data file makes its format invalid, idENTify will discard all data and start with an empty data file at the next run.","lastModifiedDate":"2022-09-20"},{"lineNumber":205,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":207,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"Action | Format, Examples","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"--------|------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"WingKei67"},"content":"**Add** | `add n/NAME p/PHONE_NUMBER a/ADDRESS [e/EMAIL] [t/TAG]…​` \u003cbr\u003e e.g., `add n/James Ho p/22224444 a/123, Clementi Rd, 1234665`","lastModifiedDate":"2022-09-20"},{"lineNumber":214,"author":{"gitId":"-"},"content":"**Clear** | `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"JovonLim"},"content":"**Book** | `book INDEX r/REASON d/DATE`\u003cbr\u003e e.g., `book 2 r/Ear Infection d/2022-12-31 18:00`","lastModifiedDate":"2022-10-05"},{"lineNumber":218,"author":{"gitId":"JovonLim"},"content":"**Cancel** | `cancel PATIENT_INDEX APPOINTMENT_INDEX` \u003cbr\u003e e.g., `cancel 3 2`","lastModifiedDate":"2022-09-20"},{"lineNumber":219,"author":{"gitId":"JovonLim"},"content":"**Edit Patient** | `edit patients INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` \u003cbr\u003e e.g., `edit patients 1 n/Bernice Yu`","lastModifiedDate":"2022-10-08"},{"lineNumber":220,"author":{"gitId":"JovonLim"},"content":"**Edit Appointment** | `edit appts PATIENT_INDEX APPOINTMENT_INDEX [r/REASON] [d/DATE]` \u003cbr\u003e e.g., `edit appts 1 1 r/Cough` ","lastModifiedDate":"2022-10-08"},{"lineNumber":221,"author":{"gitId":"JovonLim"},"content":"**List** | `list patients` \u003cbr\u003e `list appointments`","lastModifiedDate":"2022-09-20"},{"lineNumber":222,"author":{"gitId":"-"},"content":"**Help** | `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"JovonLim"},"content":"**Exit** | `exit`","lastModifiedDate":"2022-09-20"}],"authorContributionMap":{"NicholasTYD":34,"WingKei67":4,"JovonLim":46,"-":129,"pwjj2000":5,"guanzhou03":5}},{"path":"docs/team/guanzhou03.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"guanzhou03"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":2,"author":{"gitId":"guanzhou03"},"content":"layout: page","lastModifiedDate":"2022-09-20"},{"lineNumber":3,"author":{"gitId":"guanzhou03"},"content":"title: Chen Guanzhou\u0027s Project Portfolio Page","lastModifiedDate":"2022-09-20"},{"lineNumber":4,"author":{"gitId":"guanzhou03"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":5,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":6,"author":{"gitId":"guanzhou03"},"content":"## Project: idENTify","lastModifiedDate":"2022-09-20"},{"lineNumber":7,"author":{"gitId":"guanzhou03"},"content":"### Overview","lastModifiedDate":"2022-09-20"},{"lineNumber":8,"author":{"gitId":"guanzhou03"},"content":"idENTify - ENT doctors treat patients who often have chronic conditions and our product will make it easier for the staff to keep track of these patients, such as their appointment dates, the severity of their condition, their diagnosis, and allow admin staff to filter different types of patients","lastModifiedDate":"2022-09-20"},{"lineNumber":9,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":10,"author":{"gitId":"guanzhou03"},"content":"### Summary of Contributions","lastModifiedDate":"2022-09-20"},{"lineNumber":11,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"* to be added","lastModifiedDate":"2022-09-20"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":14,"author":{"gitId":"guanzhou03"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2022-09-20"}],"authorContributionMap":{"guanzhou03":14}},{"path":"docs/team/johndoe.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"guanzhou03"},"content":"title: Chen Guanzhou\u0027s Project Portfolio Page","lastModifiedDate":"2022-09-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"guanzhou03"},"content":"### Project: idENTify","lastModifiedDate":"2022-09-20"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"* **New Feature**:","lastModifiedDate":"2022-09-20"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":"* **Code contributed**: [RepoSense link](https://github.com/AY2223S1-CS2103T-T17-4/tp)","lastModifiedDate":"2022-09-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"* **Project management**:","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"guanzhou03"},"content":"* **Contributions to the UG**:","lastModifiedDate":"2022-09-20"},{"lineNumber":17,"author":{"gitId":"guanzhou03"},"content":"* **Contributions to the DG**:","lastModifiedDate":"2022-09-20"},{"lineNumber":18,"author":{"gitId":"guanzhou03"},"content":"* **Contributions to team-based tasks**:","lastModifiedDate":"2022-09-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"guanzhou03"},"content":"* **Review/mentoring contributions**:","lastModifiedDate":"2022-09-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"* **Documentation**:","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* **Community**:","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"* **Tools**:","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"guanzhou03"},"content":"* **Contributions beyond the project team**:","lastModifiedDate":"2022-09-20"}],"authorContributionMap":{"-":15,"guanzhou03":9}},{"path":"docs/team/jovonlim.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"layout: page","lastModifiedDate":"2022-09-20"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"title: Jovon\u0027s Project Portfolio Page","lastModifiedDate":"2022-09-20"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"### Project: idENTify","lastModifiedDate":"2022-09-20"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"Overview:","lastModifiedDate":"2022-09-20"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"ENT doctors treat patients who often have chronic conditions and our product will make it easier","lastModifiedDate":"2022-09-20"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"for the staff to keep track of these patients, such as their appointment dates, the severity of their condition,","lastModifiedDate":"2022-09-20"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"their diagnosis, and allow admin staff to filter different types of patients.","lastModifiedDate":"2022-09-20"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-09-20"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"Code contributed: [RepoSense link](https://github.com/JovonLim/tp)","lastModifiedDate":"2022-09-20"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"Enhancements implemented:","lastModifiedDate":"2022-09-20"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"Contributions to the UG:","lastModifiedDate":"2022-09-20"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"Contributions to the DG:","lastModifiedDate":"2022-09-20"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"Contributions to team-based tasks:","lastModifiedDate":"2022-09-20"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"Review/mentoring contributions:","lastModifiedDate":"2022-09-20"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"Contributions beyond the project team:","lastModifiedDate":"2022-09-20"}],"authorContributionMap":{"JovonLim":25}},{"path":"docs/team/nicholastyd.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"layout: page","lastModifiedDate":"2022-09-20"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"title: Nicholas Tan\u0027s Project Portfolio Page","lastModifiedDate":"2022-09-20"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"## Project: idENTify","lastModifiedDate":"2022-09-20"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"### Overview","lastModifiedDate":"2022-09-20"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"idENTify - ENT doctors treat patients who often have chronic conditions and our product will make it easier for the staff to keep track of these patients, such as their appointment dates, the severity of their condition, their diagnosis, and allow admin staff to filter different types of patients","lastModifiedDate":"2022-09-20"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"### Summary of Contributions","lastModifiedDate":"2022-09-20"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-09-27"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"Code contributed: [RepoSense link](https://github.com/NicholasTYD/tp)","lastModifiedDate":"2022-09-27"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"Enhancements implemented:","lastModifiedDate":"2022-09-27"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"Contributions to the UG:","lastModifiedDate":"2022-09-27"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"Contributions to the DG:","lastModifiedDate":"2022-09-27"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"Contributions to team-based tasks:","lastModifiedDate":"2022-09-27"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"Review/mentoring contributions:","lastModifiedDate":"2022-09-27"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"Contributions beyond the project team:","lastModifiedDate":"2022-09-27"}],"authorContributionMap":{"NicholasTYD":26}},{"path":"docs/team/pwjj2000.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"pwjj2000"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":2,"author":{"gitId":"pwjj2000"},"content":"layout: page","lastModifiedDate":"2022-09-20"},{"lineNumber":3,"author":{"gitId":"pwjj2000"},"content":"title: Perry Wong\u0027s Project Portfolio Page","lastModifiedDate":"2022-09-27"},{"lineNumber":4,"author":{"gitId":"pwjj2000"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":5,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":6,"author":{"gitId":"pwjj2000"},"content":"### Project: idENTify","lastModifiedDate":"2022-09-27"},{"lineNumber":7,"author":{"gitId":"pwjj2000"},"content":"Overview:","lastModifiedDate":"2022-09-27"},{"lineNumber":8,"author":{"gitId":"pwjj2000"},"content":"ENT doctors treat patients who often have chronic conditions and our product will make it easier","lastModifiedDate":"2022-09-27"},{"lineNumber":9,"author":{"gitId":"pwjj2000"},"content":"for the staff to keep track of these patients, such as their appointment dates, the severity of their condition,","lastModifiedDate":"2022-09-27"},{"lineNumber":10,"author":{"gitId":"pwjj2000"},"content":"their diagnosis, and allow admin staff to filter different types of patients.","lastModifiedDate":"2022-09-27"},{"lineNumber":11,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":12,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":13,"author":{"gitId":"pwjj2000"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-09-20"},{"lineNumber":14,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":15,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":16,"author":{"gitId":"pwjj2000"},"content":"* **New Feature**: ","lastModifiedDate":"2022-09-27"},{"lineNumber":17,"author":{"gitId":"pwjj2000"},"content":"  * to be added soon","lastModifiedDate":"2022-09-27"},{"lineNumber":18,"author":{"gitId":"pwjj2000"},"content":"* **Code contributed**: [RepoSense link](https://github.com/pwjj2000/tp)","lastModifiedDate":"2022-09-27"},{"lineNumber":19,"author":{"gitId":"pwjj2000"},"content":"  * to be added soon","lastModifiedDate":"2022-09-27"},{"lineNumber":20,"author":{"gitId":"pwjj2000"},"content":"* **Enhancements implemented**:","lastModifiedDate":"2022-09-27"},{"lineNumber":21,"author":{"gitId":"pwjj2000"},"content":"  * to be added soon","lastModifiedDate":"2022-09-27"},{"lineNumber":22,"author":{"gitId":"pwjj2000"},"content":"* **Contributions to the UG**:","lastModifiedDate":"2022-09-27"},{"lineNumber":23,"author":{"gitId":"pwjj2000"},"content":"  * to be added soon","lastModifiedDate":"2022-09-27"},{"lineNumber":24,"author":{"gitId":"pwjj2000"},"content":"* **Contributions to the DG**:","lastModifiedDate":"2022-09-27"},{"lineNumber":25,"author":{"gitId":"pwjj2000"},"content":"  * to be added soon","lastModifiedDate":"2022-09-27"},{"lineNumber":26,"author":{"gitId":"pwjj2000"},"content":"* **Contributions to team-based tasks**:","lastModifiedDate":"2022-09-27"},{"lineNumber":27,"author":{"gitId":"pwjj2000"},"content":"* * to be added soon","lastModifiedDate":"2022-09-27"},{"lineNumber":28,"author":{"gitId":"pwjj2000"},"content":"* **Review/mentoring contributions**:","lastModifiedDate":"2022-09-27"},{"lineNumber":29,"author":{"gitId":"pwjj2000"},"content":"* * to be added soon","lastModifiedDate":"2022-09-27"},{"lineNumber":30,"author":{"gitId":"pwjj2000"},"content":"* **Contributions beyond the project team**:","lastModifiedDate":"2022-09-27"},{"lineNumber":31,"author":{"gitId":"pwjj2000"},"content":"*   * to be added soon","lastModifiedDate":"2022-09-27"}],"authorContributionMap":{"pwjj2000":31}},{"path":"docs/team/wingkei67.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"WingKei67"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":2,"author":{"gitId":"WingKei67"},"content":"layout: page","lastModifiedDate":"2022-09-20"},{"lineNumber":3,"author":{"gitId":"WingKei67"},"content":"title: Zhao Yao\u0027s Project Portfolio Page ","lastModifiedDate":"2022-09-20"},{"lineNumber":4,"author":{"gitId":"WingKei67"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":5,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":6,"author":{"gitId":"WingKei67"},"content":"### Project: AddressBook Level 3","lastModifiedDate":"2022-09-20"},{"lineNumber":7,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":8,"author":{"gitId":"WingKei67"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2022-09-20"},{"lineNumber":9,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":10,"author":{"gitId":"WingKei67"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-09-20"},{"lineNumber":11,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":12,"author":{"gitId":"WingKei67"},"content":"* **New Feature**: ","lastModifiedDate":"2022-09-20"},{"lineNumber":13,"author":{"gitId":"WingKei67"},"content":"* **Code contributed**: [RepoSense link](https://github.com/AY2223S1-CS2103T-T17-4/tp)","lastModifiedDate":"2022-09-20"},{"lineNumber":14,"author":{"gitId":"WingKei67"},"content":"* **Project management**:","lastModifiedDate":"2022-09-20"},{"lineNumber":15,"author":{"gitId":"WingKei67"},"content":"* **Contributions to the README**:","lastModifiedDate":"2022-09-27"},{"lineNumber":16,"author":{"gitId":"WingKei67"},"content":"* - Update UI mock image.","lastModifiedDate":"2022-09-27"},{"lineNumber":17,"author":{"gitId":"WingKei67"},"content":"* **Contributions to the UG**:","lastModifiedDate":"2022-09-20"},{"lineNumber":18,"author":{"gitId":"WingKei67"},"content":"* - Add the part about add function to the UG","lastModifiedDate":"2022-09-27"},{"lineNumber":19,"author":{"gitId":"WingKei67"},"content":"* - Reviewed teammates\u0027 pull requests and resolved conflicts","lastModifiedDate":"2022-09-27"},{"lineNumber":20,"author":{"gitId":"WingKei67"},"content":"* **Contributions to the DG**:","lastModifiedDate":"2022-09-20"},{"lineNumber":21,"author":{"gitId":"WingKei67"},"content":"* **Contributions to team-based tasks**:","lastModifiedDate":"2022-09-20"},{"lineNumber":22,"author":{"gitId":"WingKei67"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2022-09-20"},{"lineNumber":23,"author":{"gitId":"WingKei67"},"content":"* **Review/mentoring contributions**:","lastModifiedDate":"2022-09-20"},{"lineNumber":24,"author":{"gitId":"WingKei67"},"content":"* - Reviewed teammates\u0027 pull requests and resolved conflicts","lastModifiedDate":"2022-09-27"},{"lineNumber":25,"author":{"gitId":"WingKei67"},"content":"* **Documentation**:","lastModifiedDate":"2022-09-20"},{"lineNumber":26,"author":{"gitId":"WingKei67"},"content":"* **Community**:","lastModifiedDate":"2022-09-20"},{"lineNumber":27,"author":{"gitId":"WingKei67"},"content":"* **Tools**:","lastModifiedDate":"2022-09-20"},{"lineNumber":28,"author":{"gitId":"WingKei67"},"content":"* **Contributions beyond the project team**:","lastModifiedDate":"2022-09-20"}],"authorContributionMap":{"WingKei67":28}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"    public static final String INCOMPLETE_COMMAND \u003d \"Command is incomplete\";","lastModifiedDate":"2022-10-08"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":"    public static final String MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX \u003d","lastModifiedDate":"2022-10-04"},{"lineNumber":14,"author":{"gitId":"guanzhou03"},"content":"            \"The appointment index provided is invalid\";","lastModifiedDate":"2022-10-04"},{"lineNumber":15,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"JovonLim":1,"-":13,"guanzhou03":4}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":11,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Returns the AddressBook.","lastModifiedDate":"2018-12-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @see seedu.address.model.Model#getAddressBook()","lastModifiedDate":"2018-12-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */","lastModifiedDate":"2017-09-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":37,"author":{"gitId":"pwjj2000"},"content":"    /** Returns an unmodifiable view of the filtered list of appointments */","lastModifiedDate":"2022-10-06"},{"lineNumber":38,"author":{"gitId":"pwjj2000"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();","lastModifiedDate":"2022-10-06"},{"lineNumber":39,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"-":50,"pwjj2000":4}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":17,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();","lastModifiedDate":"2018-01-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2017-07-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2018-12-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return model.getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":68,"author":{"gitId":"pwjj2000"},"content":"    @Override","lastModifiedDate":"2022-10-06"},{"lineNumber":69,"author":{"gitId":"pwjj2000"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2022-10-06"},{"lineNumber":70,"author":{"gitId":"pwjj2000"},"content":"        return model.getFilteredAppointmentList();","lastModifiedDate":"2022-10-06"},{"lineNumber":71,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":72,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"-":81,"pwjj2000":6}},{"path":"src/main/java/seedu/address/logic/commands/BookCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-01"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-01"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-10-01"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REASON;","lastModifiedDate":"2022-10-01"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"import java.util.Comparator;","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"import java.util.List;","lastModifiedDate":"2022-10-01"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"import java.util.Set;","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-01"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-01"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-01"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-01"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-01"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"/**","lastModifiedDate":"2022-10-01"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":" * Books an appointment for the given patient.","lastModifiedDate":"2022-10-01"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":" */","lastModifiedDate":"2022-10-01"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"public class BookCommand extends Command {","lastModifiedDate":"2022-10-01"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"    public static final String COMMAND_WORD \u003d \"book\";","lastModifiedDate":"2022-10-01"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Books an appointment for the patient. \"","lastModifiedDate":"2022-10-01"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2022-10-01"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"            + PREFIX_REASON + \"REASON \"","lastModifiedDate":"2022-10-01"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"            + PREFIX_DATE + \"DATE \"","lastModifiedDate":"2022-10-01"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"            + \"Example: \" + COMMAND_WORD + \" 3 \"","lastModifiedDate":"2022-10-01"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"            + PREFIX_REASON + \"sore throat \"","lastModifiedDate":"2022-10-01"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"            + PREFIX_DATE + \"2022-10-12 16:30\";","lastModifiedDate":"2022-10-01"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"    public static final String MESSAGE_BOOK_APPOINTMENT_SUCCESS \u003d \"Booked Appointment for Person: %1$s\";","lastModifiedDate":"2022-10-01"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"This person already booked an appointment at this time\";","lastModifiedDate":"2022-10-01"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"    private final Appointment appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"    private final Index targetIndex;","lastModifiedDate":"2022-10-01"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":46,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"     * Creates a BookCommand with the given index and appointment.","lastModifiedDate":"2022-10-01"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"     *","lastModifiedDate":"2022-10-01"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"     * @param targetIndex The given index to retrieve the patient.","lastModifiedDate":"2022-10-01"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"     * @param appointment The given appointment to book for the patient.","lastModifiedDate":"2022-10-01"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":52,"author":{"gitId":"JovonLim"},"content":"    public BookCommand(Index targetIndex, Appointment appointment) {","lastModifiedDate":"2022-10-01"},{"lineNumber":53,"author":{"gitId":"JovonLim"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2022-10-01"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2022-10-01"},{"lineNumber":55,"author":{"gitId":"JovonLim"},"content":"        this.appointment \u003d appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":56,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":57,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":58,"author":{"gitId":"JovonLim"},"content":"    @Override","lastModifiedDate":"2022-10-01"},{"lineNumber":59,"author":{"gitId":"JovonLim"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-01"},{"lineNumber":60,"author":{"gitId":"JovonLim"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-01"},{"lineNumber":61,"author":{"gitId":"JovonLim"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2022-10-01"},{"lineNumber":62,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":63,"author":{"gitId":"JovonLim"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2022-10-01"},{"lineNumber":64,"author":{"gitId":"JovonLim"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-01"},{"lineNumber":65,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":66,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":67,"author":{"gitId":"JovonLim"},"content":"        Person personToBookFor \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2022-10-01"},{"lineNumber":68,"author":{"gitId":"JovonLim"},"content":"        PersonBookDescriptor personBookDescriptor \u003d new PersonBookDescriptor(personToBookFor);","lastModifiedDate":"2022-10-03"},{"lineNumber":69,"author":{"gitId":"JovonLim"},"content":"        personBookDescriptor.bookAppointment(appointment);","lastModifiedDate":"2022-10-03"},{"lineNumber":70,"author":{"gitId":"JovonLim"},"content":"        Person personWithBooking \u003d personBookDescriptor.createPersonWithBooking();","lastModifiedDate":"2022-10-03"},{"lineNumber":71,"author":{"gitId":"pwjj2000"},"content":"        appointment.setPatient(personWithBooking);","lastModifiedDate":"2022-10-06"},{"lineNumber":72,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":73,"author":{"gitId":"JovonLim"},"content":"        model.setPerson(personToBookFor, personWithBooking);","lastModifiedDate":"2022-10-03"},{"lineNumber":74,"author":{"gitId":"JovonLim"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2022-10-03"},{"lineNumber":75,"author":{"gitId":"pwjj2000"},"content":"        model.addAppointment(appointment);","lastModifiedDate":"2022-10-06"},{"lineNumber":76,"author":{"gitId":"JovonLim"},"content":"        return new CommandResult(String.format(MESSAGE_BOOK_APPOINTMENT_SUCCESS, personWithBooking));","lastModifiedDate":"2022-10-03"},{"lineNumber":77,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":78,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":79,"author":{"gitId":"JovonLim"},"content":"    @Override","lastModifiedDate":"2022-10-01"},{"lineNumber":80,"author":{"gitId":"JovonLim"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-01"},{"lineNumber":81,"author":{"gitId":"JovonLim"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-01"},{"lineNumber":82,"author":{"gitId":"JovonLim"},"content":"                || (other instanceof BookCommand // instanceof handles nulls","lastModifiedDate":"2022-10-01"},{"lineNumber":83,"author":{"gitId":"JovonLim"},"content":"                \u0026\u0026 targetIndex.equals(((BookCommand) other).targetIndex)","lastModifiedDate":"2022-10-01"},{"lineNumber":84,"author":{"gitId":"pwjj2000"},"content":"                \u0026\u0026 appointment.isSameAppointment(((BookCommand) other).appointment)); // state check","lastModifiedDate":"2022-10-06"},{"lineNumber":85,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":86,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":87,"author":{"gitId":"JovonLim"},"content":"    private static class PersonBookDescriptor {","lastModifiedDate":"2022-10-03"},{"lineNumber":88,"author":{"gitId":"JovonLim"},"content":"        private final Name name;","lastModifiedDate":"2022-10-03"},{"lineNumber":89,"author":{"gitId":"JovonLim"},"content":"        private final Phone phone;","lastModifiedDate":"2022-10-03"},{"lineNumber":90,"author":{"gitId":"JovonLim"},"content":"        private final Email email;","lastModifiedDate":"2022-10-03"},{"lineNumber":91,"author":{"gitId":"JovonLim"},"content":"        private final Address address;","lastModifiedDate":"2022-10-03"},{"lineNumber":92,"author":{"gitId":"JovonLim"},"content":"        private final List\u003cAppointment\u003e appointments;","lastModifiedDate":"2022-10-03"},{"lineNumber":93,"author":{"gitId":"JovonLim"},"content":"        private final Set\u003cTag\u003e tags;","lastModifiedDate":"2022-10-03"},{"lineNumber":94,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":95,"author":{"gitId":"JovonLim"},"content":"        private PersonBookDescriptor(Person toCopy) {","lastModifiedDate":"2022-10-03"},{"lineNumber":96,"author":{"gitId":"JovonLim"},"content":"            name \u003d toCopy.getName();","lastModifiedDate":"2022-10-03"},{"lineNumber":97,"author":{"gitId":"JovonLim"},"content":"            phone \u003d toCopy.getPhone();","lastModifiedDate":"2022-10-03"},{"lineNumber":98,"author":{"gitId":"JovonLim"},"content":"            email \u003d toCopy.getEmail();","lastModifiedDate":"2022-10-03"},{"lineNumber":99,"author":{"gitId":"JovonLim"},"content":"            address \u003d toCopy.getAddress();","lastModifiedDate":"2022-10-03"},{"lineNumber":100,"author":{"gitId":"JovonLim"},"content":"            appointments \u003d new ArrayList\u003c\u003e(toCopy.getAppointments());","lastModifiedDate":"2022-10-03"},{"lineNumber":101,"author":{"gitId":"JovonLim"},"content":"            tags \u003d toCopy.getTags();","lastModifiedDate":"2022-10-03"},{"lineNumber":102,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":103,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":104,"author":{"gitId":"JovonLim"},"content":"        private boolean hasSameAppointment(Appointment appointment) {","lastModifiedDate":"2022-10-03"},{"lineNumber":105,"author":{"gitId":"JovonLim"},"content":"            return appointments.stream().anyMatch(x -\u003e x.isSameTime(appointment));","lastModifiedDate":"2022-10-03"},{"lineNumber":106,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":107,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":108,"author":{"gitId":"JovonLim"},"content":"        private void bookAppointment(Appointment appointment) throws CommandException {","lastModifiedDate":"2022-10-03"},{"lineNumber":109,"author":{"gitId":"JovonLim"},"content":"            if (hasSameAppointment(appointment)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":110,"author":{"gitId":"JovonLim"},"content":"                throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);","lastModifiedDate":"2022-10-03"},{"lineNumber":111,"author":{"gitId":"JovonLim"},"content":"            }","lastModifiedDate":"2022-10-03"},{"lineNumber":112,"author":{"gitId":"JovonLim"},"content":"            appointments.add(appointment);","lastModifiedDate":"2022-10-03"},{"lineNumber":113,"author":{"gitId":"JovonLim"},"content":"            appointments.sort(Comparator.comparing(Appointment::getDateTime));","lastModifiedDate":"2022-10-03"},{"lineNumber":114,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":115,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":116,"author":{"gitId":"JovonLim"},"content":"        private Person createPersonWithBooking() {","lastModifiedDate":"2022-10-03"},{"lineNumber":117,"author":{"gitId":"JovonLim"},"content":"            return new Person(name, phone, email, address, appointments, tags);","lastModifiedDate":"2022-10-03"},{"lineNumber":118,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":119,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":120,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-01"}],"authorContributionMap":{"JovonLim":117,"pwjj2000":3}},{"path":"src/main/java/seedu/address/logic/commands/CancelCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"guanzhou03"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-01"},{"lineNumber":2,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":3,"author":{"gitId":"guanzhou03"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-04"},{"lineNumber":4,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;","lastModifiedDate":"2022-10-06"},{"lineNumber":5,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2022-10-06"},{"lineNumber":6,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":7,"author":{"gitId":"guanzhou03"},"content":"import java.util.List;","lastModifiedDate":"2022-10-04"},{"lineNumber":8,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":9,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-01"},{"lineNumber":10,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-01"},{"lineNumber":11,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-01"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-01"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":14,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-01"},{"lineNumber":15,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":16,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":17,"author":{"gitId":"guanzhou03"},"content":"/**","lastModifiedDate":"2022-10-01"},{"lineNumber":18,"author":{"gitId":"guanzhou03"},"content":" * A class that encapsulates the functionality of cancelling a patient\u0027s appointment.","lastModifiedDate":"2022-10-01"},{"lineNumber":19,"author":{"gitId":"guanzhou03"},"content":" */","lastModifiedDate":"2022-10-01"},{"lineNumber":20,"author":{"gitId":"guanzhou03"},"content":"public class CancelCommand extends SelectAppointmentCommand {","lastModifiedDate":"2022-10-09"},{"lineNumber":21,"author":{"gitId":"guanzhou03"},"content":"    public static final String COMMAND_WORD \u003d \"cancel\";","lastModifiedDate":"2022-10-01"},{"lineNumber":22,"author":{"gitId":"guanzhou03"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Cancels an appointment for the patient. \"","lastModifiedDate":"2022-10-01"},{"lineNumber":23,"author":{"gitId":"guanzhou03"},"content":"            + \"Parameters: patientIndex (must be a positive integer)\\n\"","lastModifiedDate":"2022-10-01"},{"lineNumber":24,"author":{"gitId":"guanzhou03"},"content":"            + \"apptIndex (must be a valid appointment index)\"","lastModifiedDate":"2022-10-01"},{"lineNumber":25,"author":{"gitId":"guanzhou03"},"content":"            + \"Example: \" + COMMAND_WORD + \" 3\"","lastModifiedDate":"2022-10-01"},{"lineNumber":26,"author":{"gitId":"guanzhou03"},"content":"            + \" 2\";","lastModifiedDate":"2022-10-01"},{"lineNumber":27,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":28,"author":{"gitId":"guanzhou03"},"content":"    public static final String MESSAGE_CANCEL_APPOINTMENT_SUCCESS \u003d \"Cancelled appointment for: \";","lastModifiedDate":"2022-10-04"},{"lineNumber":29,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":30,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":31,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":32,"author":{"gitId":"guanzhou03"},"content":"     * Creates a cancel command that specifies the patient and appointment index.","lastModifiedDate":"2022-10-01"},{"lineNumber":33,"author":{"gitId":"guanzhou03"},"content":"     * @param patientIndex The index of the patient that we want to cancel the appointment.","lastModifiedDate":"2022-10-01"},{"lineNumber":34,"author":{"gitId":"guanzhou03"},"content":"     * @param apptIndex The index of the appointment we want to cancel for that particular patient.","lastModifiedDate":"2022-10-01"},{"lineNumber":35,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":36,"author":{"gitId":"guanzhou03"},"content":"    public CancelCommand(Index patientIndex, Index apptIndex) {","lastModifiedDate":"2022-10-01"},{"lineNumber":37,"author":{"gitId":"guanzhou03"},"content":"        super(patientIndex, apptIndex);","lastModifiedDate":"2022-10-09"},{"lineNumber":38,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":39,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":40,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":41,"author":{"gitId":"guanzhou03"},"content":"     * Removes the appointment in the specified index for the specified patient.","lastModifiedDate":"2022-10-01"},{"lineNumber":42,"author":{"gitId":"guanzhou03"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2022-10-01"},{"lineNumber":43,"author":{"gitId":"guanzhou03"},"content":"     * @return Feedback to the user in the form of a success message.","lastModifiedDate":"2022-10-01"},{"lineNumber":44,"author":{"gitId":"guanzhou03"},"content":"     * @throws CommandException If the input index is out of valid range.","lastModifiedDate":"2022-10-01"},{"lineNumber":45,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":46,"author":{"gitId":"guanzhou03"},"content":"    @Override","lastModifiedDate":"2022-10-01"},{"lineNumber":47,"author":{"gitId":"guanzhou03"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-01"},{"lineNumber":48,"author":{"gitId":"guanzhou03"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-01"},{"lineNumber":49,"author":{"gitId":"guanzhou03"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2022-10-01"},{"lineNumber":50,"author":{"gitId":"guanzhou03"},"content":"        Person patientToCancelAppt \u003d getTargetPerson(model);","lastModifiedDate":"2022-10-09"},{"lineNumber":51,"author":{"gitId":"guanzhou03"},"content":"        Appointment toBeCancelledAppt \u003d getTargetAppointment(model);","lastModifiedDate":"2022-10-09"},{"lineNumber":52,"author":{"gitId":"guanzhou03"},"content":"        Index patientIndex \u003d super.indexOfPerson;","lastModifiedDate":"2022-10-09"},{"lineNumber":53,"author":{"gitId":"guanzhou03"},"content":"        Index apptIndex \u003d super.indexOfAppointment;","lastModifiedDate":"2022-10-09"},{"lineNumber":54,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":55,"author":{"gitId":"guanzhou03"},"content":"        if (patientIndex.getOneBased() \u003e lastShownList.size()) {","lastModifiedDate":"2022-10-09"},{"lineNumber":56,"author":{"gitId":"guanzhou03"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-01"},{"lineNumber":57,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":58,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":59,"author":{"gitId":"guanzhou03"},"content":"        if (patientToCancelAppt.getAppointments().size() \u003c apptIndex.getOneBased()) {","lastModifiedDate":"2022-10-09"},{"lineNumber":60,"author":{"gitId":"guanzhou03"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-01"},{"lineNumber":61,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":62,"author":{"gitId":"guanzhou03"},"content":"        patientToCancelAppt.cancelAppointment(super.indexOfAppointment.getZeroBased());","lastModifiedDate":"2022-10-09"},{"lineNumber":63,"author":{"gitId":"NicholasTYD"},"content":"        model.refreshPerson(patientToCancelAppt);","lastModifiedDate":"2022-10-05"},{"lineNumber":64,"author":{"gitId":"pwjj2000"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2022-10-06"},{"lineNumber":65,"author":{"gitId":"guanzhou03"},"content":"        model.deleteAppointment(toBeCancelledAppt);","lastModifiedDate":"2022-10-09"},{"lineNumber":66,"author":{"gitId":"pwjj2000"},"content":"        model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);","lastModifiedDate":"2022-10-06"},{"lineNumber":67,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":68,"author":{"gitId":"guanzhou03"},"content":"        return new CommandResult(MESSAGE_CANCEL_APPOINTMENT_SUCCESS + patientToCancelAppt.getName());","lastModifiedDate":"2022-10-04"},{"lineNumber":69,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":70,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":71,"author":{"gitId":"guanzhou03"},"content":"    @Override","lastModifiedDate":"2022-10-09"},{"lineNumber":72,"author":{"gitId":"guanzhou03"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-09"},{"lineNumber":73,"author":{"gitId":"guanzhou03"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-09"},{"lineNumber":74,"author":{"gitId":"guanzhou03"},"content":"            return true;","lastModifiedDate":"2022-10-09"},{"lineNumber":75,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-09"},{"lineNumber":76,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":77,"author":{"gitId":"guanzhou03"},"content":"        if (!(other instanceof CancelCommand)) {","lastModifiedDate":"2022-10-09"},{"lineNumber":78,"author":{"gitId":"guanzhou03"},"content":"            return false;","lastModifiedDate":"2022-10-09"},{"lineNumber":79,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-09"},{"lineNumber":80,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":81,"author":{"gitId":"guanzhou03"},"content":"        CancelCommand otherCommand \u003d (CancelCommand) other;","lastModifiedDate":"2022-10-09"},{"lineNumber":82,"author":{"gitId":"guanzhou03"},"content":"        return hasSameIndexOfPerson(otherCommand) \u0026\u0026 hasSameIndexOfAppointment(otherCommand);","lastModifiedDate":"2022-10-09"},{"lineNumber":83,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":84,"author":{"gitId":"guanzhou03"},"content":"}","lastModifiedDate":"2022-10-01"}],"authorContributionMap":{"NicholasTYD":1,"guanzhou03":79,"pwjj2000":4}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-09-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Deletes a person identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2018-04-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \": Deletes the person identified by the index number used in the displayed person list.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2016-09-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Index targetIndex;","lastModifiedDate":"2017-06-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {","lastModifiedDate":"2017-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2016-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"        model.deleteAppointments(personToDelete.getAppointments());","lastModifiedDate":"2022-10-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        model.deletePerson(personToDelete);","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));","lastModifiedDate":"2016-09-22"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"JovonLim":1,"-":53}},{"path":"src/main/java/seedu/address/logic/commands/EditAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-08"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-10-08"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REASON;","lastModifiedDate":"2022-10-08"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;","lastModifiedDate":"2022-10-09"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2022-10-08"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-08"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-08"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"import java.util.Comparator;","lastModifiedDate":"2022-10-08"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"import java.util.List;","lastModifiedDate":"2022-10-08"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"import java.util.Optional;","lastModifiedDate":"2022-10-08"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-08"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2022-10-08"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-08"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-08"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-08"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-08"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"/**","lastModifiedDate":"2022-10-08"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":" * Edits a given appointment\u0027s details.","lastModifiedDate":"2022-10-08"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":" */","lastModifiedDate":"2022-10-08"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"public class EditAppointmentCommand extends SelectAppointmentCommand {","lastModifiedDate":"2022-10-08"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2022-10-08"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"    public static final String DESCRIPTOR_WORD \u003d \"appts\";","lastModifiedDate":"2022-10-08"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"    public static final String MESSAGE_EDIT_APPOINTMENT_SUCCESS \u003d \"Edited Appointment for %1$s: %2$s\";","lastModifiedDate":"2022-10-08"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + DESCRIPTOR_WORD","lastModifiedDate":"2022-10-08"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"            + \": Edits the appointment details of the person identified \"","lastModifiedDate":"2022-10-08"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"            + \"by the patientIndex number used in the displayed person list and the appointmentIndex. \"","lastModifiedDate":"2022-10-08"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2022-10-08"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2022-10-08"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"            + \"[\" + PREFIX_REASON + \"REASON] \"","lastModifiedDate":"2022-10-08"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"            + \"[\" + PREFIX_DATE + \"DATE] \"","lastModifiedDate":"2022-10-08"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + DESCRIPTOR_WORD + \" 1 \"","lastModifiedDate":"2022-10-08"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"            + PREFIX_REASON + \"Sore Throat \"","lastModifiedDate":"2022-10-08"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"            + PREFIX_DATE + \"2022-10-12 16:30\";","lastModifiedDate":"2022-10-08"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2022-10-08"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d","lastModifiedDate":"2022-10-08"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"            \"This person already booked an appointment at this time\";","lastModifiedDate":"2022-10-08"},{"lineNumber":46,"author":{"gitId":"JovonLim"},"content":"    private final EditAppointmentDescriptor editAppointmentDescriptor;","lastModifiedDate":"2022-10-08"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-08"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"     * Creates an EditAppointmentCommand with the given patient and appointment index,","lastModifiedDate":"2022-10-08"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"     * and the editAppointmentDescriptor.","lastModifiedDate":"2022-10-08"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"     *","lastModifiedDate":"2022-10-08"},{"lineNumber":52,"author":{"gitId":"JovonLim"},"content":"     * @param patientIndex The index of the patient to edit the appointment.","lastModifiedDate":"2022-10-08"},{"lineNumber":53,"author":{"gitId":"JovonLim"},"content":"     * @param indexOfAppointment The index of the appointment to edit.","lastModifiedDate":"2022-10-08"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"     * @param editAppointmentDescriptor The descriptor that contains the edited details.","lastModifiedDate":"2022-10-08"},{"lineNumber":55,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-08"},{"lineNumber":56,"author":{"gitId":"JovonLim"},"content":"    public EditAppointmentCommand(Index patientIndex, Index indexOfAppointment,","lastModifiedDate":"2022-10-08"},{"lineNumber":57,"author":{"gitId":"JovonLim"},"content":"                                  EditAppointmentDescriptor editAppointmentDescriptor) {","lastModifiedDate":"2022-10-08"},{"lineNumber":58,"author":{"gitId":"JovonLim"},"content":"        super(patientIndex, indexOfAppointment);","lastModifiedDate":"2022-10-08"},{"lineNumber":59,"author":{"gitId":"JovonLim"},"content":"        this.editAppointmentDescriptor \u003d editAppointmentDescriptor;","lastModifiedDate":"2022-10-08"},{"lineNumber":60,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":61,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":62,"author":{"gitId":"JovonLim"},"content":"    @Override","lastModifiedDate":"2022-10-08"},{"lineNumber":63,"author":{"gitId":"JovonLim"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-08"},{"lineNumber":64,"author":{"gitId":"JovonLim"},"content":"        Person targetPerson \u003d getTargetPerson(model);","lastModifiedDate":"2022-10-08"},{"lineNumber":65,"author":{"gitId":"JovonLim"},"content":"        List\u003cAppointment\u003e appointmentList \u003d targetPerson.getAppointments();","lastModifiedDate":"2022-10-08"},{"lineNumber":66,"author":{"gitId":"JovonLim"},"content":"        Appointment targetAppointment \u003d getTargetAppointment(model);","lastModifiedDate":"2022-10-08"},{"lineNumber":67,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":68,"author":{"gitId":"JovonLim"},"content":"        Appointment editedAppointment \u003d createEditedAppointment(targetPerson,","lastModifiedDate":"2022-10-09"},{"lineNumber":69,"author":{"gitId":"JovonLim"},"content":"                targetAppointment, editAppointmentDescriptor);","lastModifiedDate":"2022-10-09"},{"lineNumber":70,"author":{"gitId":"JovonLim"},"content":"        if (hasSameTime(appointmentList, targetAppointment, editedAppointment)) {","lastModifiedDate":"2022-10-08"},{"lineNumber":71,"author":{"gitId":"JovonLim"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);","lastModifiedDate":"2022-10-08"},{"lineNumber":72,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":73,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":74,"author":{"gitId":"JovonLim"},"content":"        appointmentList.set(indexOfAppointment.getZeroBased(), editedAppointment);","lastModifiedDate":"2022-10-08"},{"lineNumber":75,"author":{"gitId":"JovonLim"},"content":"        appointmentList.sort(Comparator.comparing(Appointment::getDateTime));","lastModifiedDate":"2022-10-08"},{"lineNumber":76,"author":{"gitId":"JovonLim"},"content":"        updateDisplay(model, targetPerson, targetAppointment, editedAppointment);","lastModifiedDate":"2022-10-09"},{"lineNumber":77,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":78,"author":{"gitId":"JovonLim"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_APPOINTMENT_SUCCESS, targetPerson.getName(),","lastModifiedDate":"2022-10-08"},{"lineNumber":79,"author":{"gitId":"JovonLim"},"content":"                editedAppointment));","lastModifiedDate":"2022-10-08"},{"lineNumber":80,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":81,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":82,"author":{"gitId":"JovonLim"},"content":"    private static Appointment createEditedAppointment(Person patient, Appointment appointmentToEdit,","lastModifiedDate":"2022-10-09"},{"lineNumber":83,"author":{"gitId":"JovonLim"},"content":"                                                       EditAppointmentDescriptor editAppointmentDescriptor) {","lastModifiedDate":"2022-10-08"},{"lineNumber":84,"author":{"gitId":"JovonLim"},"content":"        assert appointmentToEdit !\u003d null;","lastModifiedDate":"2022-10-08"},{"lineNumber":85,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":86,"author":{"gitId":"JovonLim"},"content":"        String reason \u003d editAppointmentDescriptor.getReason().orElse(appointmentToEdit.getReason());","lastModifiedDate":"2022-10-08"},{"lineNumber":87,"author":{"gitId":"JovonLim"},"content":"        LocalDateTime dateTime \u003d editAppointmentDescriptor.getDateTime().orElse(appointmentToEdit.getDateTime());","lastModifiedDate":"2022-10-08"},{"lineNumber":88,"author":{"gitId":"JovonLim"},"content":"        Appointment editedAppointment \u003d new Appointment(reason, dateTime, appointmentToEdit.isMarked());","lastModifiedDate":"2022-10-09"},{"lineNumber":89,"author":{"gitId":"JovonLim"},"content":"        editedAppointment.setPatient(patient);","lastModifiedDate":"2022-10-09"},{"lineNumber":90,"author":{"gitId":"JovonLim"},"content":"        return editedAppointment;","lastModifiedDate":"2022-10-09"},{"lineNumber":91,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":92,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":93,"author":{"gitId":"JovonLim"},"content":"    private boolean hasSameTime(List\u003cAppointment\u003e appointments, Appointment originalAppointment,","lastModifiedDate":"2022-10-08"},{"lineNumber":94,"author":{"gitId":"JovonLim"},"content":"                                Appointment appointmentToCheck) {","lastModifiedDate":"2022-10-08"},{"lineNumber":95,"author":{"gitId":"JovonLim"},"content":"        List\u003cAppointment\u003e appointmentsToCheck \u003d new ArrayList\u003c\u003e(appointments);","lastModifiedDate":"2022-10-08"},{"lineNumber":96,"author":{"gitId":"JovonLim"},"content":"        appointmentsToCheck.remove(originalAppointment);","lastModifiedDate":"2022-10-08"},{"lineNumber":97,"author":{"gitId":"JovonLim"},"content":"        return appointmentsToCheck.stream().anyMatch(x -\u003e x.isSameTime(appointmentToCheck));","lastModifiedDate":"2022-10-08"},{"lineNumber":98,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":99,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":100,"author":{"gitId":"JovonLim"},"content":"    private void updateDisplay(Model model, Person person, Appointment appointment, Appointment editedAppointment) {","lastModifiedDate":"2022-10-09"},{"lineNumber":101,"author":{"gitId":"JovonLim"},"content":"        model.refreshPerson(person);","lastModifiedDate":"2022-10-09"},{"lineNumber":102,"author":{"gitId":"JovonLim"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2022-10-09"},{"lineNumber":103,"author":{"gitId":"JovonLim"},"content":"        model.setAppointment(appointment, editedAppointment);","lastModifiedDate":"2022-10-09"},{"lineNumber":104,"author":{"gitId":"JovonLim"},"content":"        model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);","lastModifiedDate":"2022-10-09"},{"lineNumber":105,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":106,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":107,"author":{"gitId":"JovonLim"},"content":"    @Override","lastModifiedDate":"2022-10-08"},{"lineNumber":108,"author":{"gitId":"JovonLim"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-08"},{"lineNumber":109,"author":{"gitId":"JovonLim"},"content":"        // short circuit if same object","lastModifiedDate":"2022-10-08"},{"lineNumber":110,"author":{"gitId":"JovonLim"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-08"},{"lineNumber":111,"author":{"gitId":"JovonLim"},"content":"            return true;","lastModifiedDate":"2022-10-08"},{"lineNumber":112,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":113,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":114,"author":{"gitId":"JovonLim"},"content":"        // instanceof handles nulls","lastModifiedDate":"2022-10-08"},{"lineNumber":115,"author":{"gitId":"JovonLim"},"content":"        if (!(other instanceof EditAppointmentCommand)) {","lastModifiedDate":"2022-10-08"},{"lineNumber":116,"author":{"gitId":"JovonLim"},"content":"            return false;","lastModifiedDate":"2022-10-08"},{"lineNumber":117,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":118,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":119,"author":{"gitId":"JovonLim"},"content":"        // state check","lastModifiedDate":"2022-10-08"},{"lineNumber":120,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentCommand e \u003d (EditAppointmentCommand) other;","lastModifiedDate":"2022-10-08"},{"lineNumber":121,"author":{"gitId":"JovonLim"},"content":"        return super.equals(other) \u0026\u0026 editAppointmentDescriptor.equals(e.editAppointmentDescriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":122,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":123,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":124,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-08"},{"lineNumber":125,"author":{"gitId":"JovonLim"},"content":"     * Stores the details to edit the appointment with. Each non-empty field value will replace the","lastModifiedDate":"2022-10-08"},{"lineNumber":126,"author":{"gitId":"JovonLim"},"content":"     * corresponding field value of the appointment.","lastModifiedDate":"2022-10-08"},{"lineNumber":127,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-08"},{"lineNumber":128,"author":{"gitId":"JovonLim"},"content":"    public static class EditAppointmentDescriptor {","lastModifiedDate":"2022-10-08"},{"lineNumber":129,"author":{"gitId":"JovonLim"},"content":"        private String reason;","lastModifiedDate":"2022-10-08"},{"lineNumber":130,"author":{"gitId":"JovonLim"},"content":"        private LocalDateTime dateTime;","lastModifiedDate":"2022-10-08"},{"lineNumber":131,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":132,"author":{"gitId":"JovonLim"},"content":"        public EditAppointmentDescriptor() {}","lastModifiedDate":"2022-10-08"},{"lineNumber":133,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":134,"author":{"gitId":"JovonLim"},"content":"        /**","lastModifiedDate":"2022-10-08"},{"lineNumber":135,"author":{"gitId":"JovonLim"},"content":"         * Copy constructor.","lastModifiedDate":"2022-10-08"},{"lineNumber":136,"author":{"gitId":"JovonLim"},"content":"         *","lastModifiedDate":"2022-10-08"},{"lineNumber":137,"author":{"gitId":"JovonLim"},"content":"         * @param toCopy The editAppointmentDescriptor to copy the details.","lastModifiedDate":"2022-10-08"},{"lineNumber":138,"author":{"gitId":"JovonLim"},"content":"         */","lastModifiedDate":"2022-10-08"},{"lineNumber":139,"author":{"gitId":"JovonLim"},"content":"        public EditAppointmentDescriptor(EditAppointmentDescriptor toCopy) {","lastModifiedDate":"2022-10-08"},{"lineNumber":140,"author":{"gitId":"JovonLim"},"content":"            setReason(toCopy.reason);","lastModifiedDate":"2022-10-08"},{"lineNumber":141,"author":{"gitId":"JovonLim"},"content":"            setDateTime(toCopy.dateTime);","lastModifiedDate":"2022-10-08"},{"lineNumber":142,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":143,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":144,"author":{"gitId":"JovonLim"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2022-10-08"},{"lineNumber":145,"author":{"gitId":"JovonLim"},"content":"            return CollectionUtil.isAnyNonNull(reason, dateTime);","lastModifiedDate":"2022-10-08"},{"lineNumber":146,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":147,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":148,"author":{"gitId":"JovonLim"},"content":"        public void setReason(String reason) {","lastModifiedDate":"2022-10-08"},{"lineNumber":149,"author":{"gitId":"JovonLim"},"content":"            this.reason \u003d reason;","lastModifiedDate":"2022-10-08"},{"lineNumber":150,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":151,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":152,"author":{"gitId":"JovonLim"},"content":"        public Optional\u003cString\u003e getReason() {","lastModifiedDate":"2022-10-08"},{"lineNumber":153,"author":{"gitId":"JovonLim"},"content":"            return Optional.ofNullable(reason);","lastModifiedDate":"2022-10-08"},{"lineNumber":154,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":155,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":156,"author":{"gitId":"JovonLim"},"content":"        public void setDateTime(LocalDateTime dateTime) {","lastModifiedDate":"2022-10-08"},{"lineNumber":157,"author":{"gitId":"JovonLim"},"content":"            this.dateTime \u003d dateTime;","lastModifiedDate":"2022-10-08"},{"lineNumber":158,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":159,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":160,"author":{"gitId":"JovonLim"},"content":"        public Optional\u003cLocalDateTime\u003e getDateTime() {","lastModifiedDate":"2022-10-08"},{"lineNumber":161,"author":{"gitId":"JovonLim"},"content":"            return Optional.ofNullable(dateTime);","lastModifiedDate":"2022-10-08"},{"lineNumber":162,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":163,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":164,"author":{"gitId":"JovonLim"},"content":"        @Override","lastModifiedDate":"2022-10-08"},{"lineNumber":165,"author":{"gitId":"JovonLim"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2022-10-08"},{"lineNumber":166,"author":{"gitId":"JovonLim"},"content":"            // short circuit if same object","lastModifiedDate":"2022-10-08"},{"lineNumber":167,"author":{"gitId":"JovonLim"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-08"},{"lineNumber":168,"author":{"gitId":"JovonLim"},"content":"                return true;","lastModifiedDate":"2022-10-08"},{"lineNumber":169,"author":{"gitId":"JovonLim"},"content":"            }","lastModifiedDate":"2022-10-08"},{"lineNumber":170,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":171,"author":{"gitId":"JovonLim"},"content":"            // instanceof handles nulls","lastModifiedDate":"2022-10-08"},{"lineNumber":172,"author":{"gitId":"JovonLim"},"content":"            if (!(other instanceof EditAppointmentDescriptor)) {","lastModifiedDate":"2022-10-08"},{"lineNumber":173,"author":{"gitId":"JovonLim"},"content":"                return false;","lastModifiedDate":"2022-10-08"},{"lineNumber":174,"author":{"gitId":"JovonLim"},"content":"            }","lastModifiedDate":"2022-10-08"},{"lineNumber":175,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":176,"author":{"gitId":"JovonLim"},"content":"            // state check","lastModifiedDate":"2022-10-08"},{"lineNumber":177,"author":{"gitId":"JovonLim"},"content":"            EditAppointmentDescriptor e \u003d (EditAppointmentDescriptor) other;","lastModifiedDate":"2022-10-08"},{"lineNumber":178,"author":{"gitId":"JovonLim"},"content":"            return getReason().equals(e.getReason()) \u0026\u0026 getDateTime().equals(e.getDateTime());","lastModifiedDate":"2022-10-08"},{"lineNumber":179,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":180,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":181,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-08"}],"authorContributionMap":{"JovonLim":181}},{"path":"src/main/java/seedu/address/logic/commands/EditPatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-12-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;","lastModifiedDate":"2022-10-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-01-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-01-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-12-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2016-12-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2016-12-26"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2016-12-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2016-12-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2016-12-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book.","lastModifiedDate":"2016-12-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"public class EditPatientCommand extends Command {","lastModifiedDate":"2022-10-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"    public static final String DESCRIPTOR_WORD \u003d \"patients\";","lastModifiedDate":"2022-10-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + DESCRIPTOR_WORD","lastModifiedDate":"2022-10-08"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"            + \": Edits the details of the person identified \"","lastModifiedDate":"2022-10-08"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"            + \"by the patientIndex number used in the displayed person list. \"","lastModifiedDate":"2022-10-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + DESCRIPTOR_WORD + \" 1 \"","lastModifiedDate":"2022-10-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2017-05-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";","lastModifiedDate":"2016-12-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2016-12-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit","lastModifiedDate":"2017-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2016-12-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":62,"author":{"gitId":"JovonLim"},"content":"    public EditPatientCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2022-10-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2022-10-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":85,"author":{"gitId":"JovonLim"},"content":"        updateDisplay(model, editedPerson, personToEdit.getAppointments());","lastModifiedDate":"2022-10-09"},{"lineNumber":86,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2017-08-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2018-01-10"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2016-12-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":103,"author":{"gitId":"JovonLim"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, personToEdit.getAppointments(),","lastModifiedDate":"2022-10-01"},{"lineNumber":104,"author":{"gitId":"JovonLim"},"content":"                updatedTags);","lastModifiedDate":"2022-10-01"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":107,"author":{"gitId":"JovonLim"},"content":"    private void updateDisplay(Model model, Person editedPerson, List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2022-10-09"},{"lineNumber":108,"author":{"gitId":"JovonLim"},"content":"        for (Appointment appointment : appointments) {","lastModifiedDate":"2022-10-09"},{"lineNumber":109,"author":{"gitId":"JovonLim"},"content":"            appointment.setPatient(editedPerson);","lastModifiedDate":"2022-10-09"},{"lineNumber":110,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-09"},{"lineNumber":111,"author":{"gitId":"JovonLim"},"content":"        model.refreshAppointments(appointments);","lastModifiedDate":"2022-10-09"},{"lineNumber":112,"author":{"gitId":"JovonLim"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2022-10-09"},{"lineNumber":113,"author":{"gitId":"JovonLim"},"content":"        model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);","lastModifiedDate":"2022-10-09"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":124,"author":{"gitId":"JovonLim"},"content":"        if (!(other instanceof EditPatientCommand)) {","lastModifiedDate":"2022-10-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":129,"author":{"gitId":"JovonLim"},"content":"        EditPatientCommand e \u003d (EditPatientCommand) other;","lastModifiedDate":"2022-10-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2017-05-25"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2016-12-26"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2016-12-26"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2016-12-26"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        private Address address;","lastModifiedDate":"2017-06-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-06-21"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}","lastModifiedDate":"2016-12-26"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":148,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":149,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":150,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2016-12-26"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2018-01-15"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2018-01-11"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":160,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":161,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);","lastModifiedDate":"2018-08-14"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2017-06-21"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            this.address \u003d address;","lastModifiedDate":"2017-06-21"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2016-12-26"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2017-06-21"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":199,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2018-01-11"},{"lineNumber":200,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":201,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-06-21"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2018-01-11"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":207,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2018-01-11"},{"lineNumber":208,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2018-01-11"},{"lineNumber":209,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2018-01-11"},{"lineNumber":210,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2018-01-11"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2017-05-05"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":219,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2017-05-05"},{"lineNumber":224,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":227,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2017-05-05"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2017-05-05"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":230,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2017-06-21"},{"lineNumber":231,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())","lastModifiedDate":"2017-06-21"},{"lineNumber":232,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())","lastModifiedDate":"2017-06-21"},{"lineNumber":233,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())","lastModifiedDate":"2017-06-21"},{"lineNumber":234,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":237,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"JovonLim":22,"-":215}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPOINTMENTS;","lastModifiedDate":"2022-10-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Lists all persons in the address book to the user.","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2016-09-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"pwjj2000"},"content":"    public static final String MESSAGE_SUCCESS_PATIENTS \u003d \"Listed all patients.\";","lastModifiedDate":"2022-10-06"},{"lineNumber":17,"author":{"gitId":"pwjj2000"},"content":"    public static final String MESSAGE_SUCCESS_APPOINTMENTS \u003d \"Listed all appointments.\";","lastModifiedDate":"2022-10-06"},{"lineNumber":18,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":19,"author":{"gitId":"pwjj2000"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" patients: List down all patients.\\n\"","lastModifiedDate":"2022-10-06"},{"lineNumber":20,"author":{"gitId":"pwjj2000"},"content":"            + COMMAND_WORD + \" appts: List down all appointments.\\n\";","lastModifiedDate":"2022-10-06"},{"lineNumber":21,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":22,"author":{"gitId":"pwjj2000"},"content":"    private final String type;","lastModifiedDate":"2022-10-06"},{"lineNumber":23,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":24,"author":{"gitId":"pwjj2000"},"content":"    public ListCommand(String type) {","lastModifiedDate":"2022-10-06"},{"lineNumber":25,"author":{"gitId":"pwjj2000"},"content":"        this.type \u003d type;","lastModifiedDate":"2022-10-06"},{"lineNumber":26,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":31,"author":{"gitId":"pwjj2000"},"content":"        if (this.type.equals(\"patients\")) {","lastModifiedDate":"2022-10-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":34,"author":{"gitId":"pwjj2000"},"content":"            return new CommandResult(MESSAGE_SUCCESS_PATIENTS);","lastModifiedDate":"2022-10-06"},{"lineNumber":35,"author":{"gitId":"pwjj2000"},"content":"        } else {","lastModifiedDate":"2022-10-06"},{"lineNumber":36,"author":{"gitId":"pwjj2000"},"content":"            requireNonNull(model);","lastModifiedDate":"2022-10-06"},{"lineNumber":37,"author":{"gitId":"pwjj2000"},"content":"            model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);","lastModifiedDate":"2022-10-06"},{"lineNumber":38,"author":{"gitId":"pwjj2000"},"content":"            return new CommandResult(MESSAGE_SUCCESS_APPOINTMENTS);","lastModifiedDate":"2022-10-06"},{"lineNumber":39,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":42,"author":{"gitId":"pwjj2000"},"content":"    @Override","lastModifiedDate":"2022-10-08"},{"lineNumber":43,"author":{"gitId":"pwjj2000"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-08"},{"lineNumber":44,"author":{"gitId":"pwjj2000"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-08"},{"lineNumber":45,"author":{"gitId":"pwjj2000"},"content":"                || (other instanceof ListCommand // instanceof handles nulls","lastModifiedDate":"2022-10-08"},{"lineNumber":46,"author":{"gitId":"pwjj2000"},"content":"                \u0026\u0026 type.equals(((ListCommand) other).type)); // state check","lastModifiedDate":"2022-10-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"-":23,"pwjj2000":25}},{"path":"src/main/java/seedu/address/logic/commands/MarkCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-02"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-02"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-02"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-02"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-02"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-04"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"/**","lastModifiedDate":"2022-10-02"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":" * Marks an appointment for the given patient as complete.","lastModifiedDate":"2022-10-02"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":" */","lastModifiedDate":"2022-10-02"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"public class MarkCommand extends SelectAppointmentCommand {","lastModifiedDate":"2022-10-02"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"    public static final String COMMAND_WORD \u003d \"mark\";","lastModifiedDate":"2022-10-02"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Marks the appointment of the person identified \"","lastModifiedDate":"2022-10-02"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"            + \"by the index numbers used in the displayed person and their corresponding appointment list. \"","lastModifiedDate":"2022-10-02"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2022-10-02"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"            + \"Parameters: INDEX_OF_PERSON (must be a positive integer) \"","lastModifiedDate":"2022-10-02"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"            + \"INDEX_OF_APPOINTMENT (must be a positive integer)\";","lastModifiedDate":"2022-10-02"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"    public static final String MESSAGE_MARK_PERSON_SUCCESS \u003d \"Marked appointment %1$s for Person: %2$s\";","lastModifiedDate":"2022-10-02"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"    public static final String MESSAGE_ALREADY_MARKED \u003d \"This appointment is already marked.\";","lastModifiedDate":"2022-10-02"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-02"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"     * Creates a mark command containing the index of a person and the index of an appointment.","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"     * @param indexOfPerson Index of the person in the filtered person list to mark.","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"NicholasTYD"},"content":"     * @param indexOfAppointment Index of the appointment of the specified person to mark.","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-02"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"    public MarkCommand(Index indexOfPerson, Index indexOfAppointment) {","lastModifiedDate":"2022-10-02"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"        super(indexOfPerson, indexOfAppointment);","lastModifiedDate":"2022-10-02"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"    @Override","lastModifiedDate":"2022-10-02"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-02"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"        Person personToMark \u003d getTargetPerson(model);","lastModifiedDate":"2022-10-04"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"        Appointment appointmentToMark \u003d getTargetAppointment(model);","lastModifiedDate":"2022-10-02"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"        if (appointmentToMark.isMarked()) {","lastModifiedDate":"2022-10-02"},{"lineNumber":40,"author":{"gitId":"NicholasTYD"},"content":"            throw new CommandException(MESSAGE_ALREADY_MARKED);","lastModifiedDate":"2022-10-02"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-02"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"        appointmentToMark.mark();","lastModifiedDate":"2022-10-02"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"        model.refreshPerson(personToMark);","lastModifiedDate":"2022-10-04"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"        model.refreshAppointment(appointmentToMark);","lastModifiedDate":"2022-10-09"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"        return new CommandResult(String.format(MESSAGE_MARK_PERSON_SUCCESS,","lastModifiedDate":"2022-10-02"},{"lineNumber":47,"author":{"gitId":"NicholasTYD"},"content":"                indexOfAppointment.getOneBased(),","lastModifiedDate":"2022-10-02"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"                getTargetPerson(model).getName()));","lastModifiedDate":"2022-10-02"},{"lineNumber":49,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":50,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":51,"author":{"gitId":"NicholasTYD"},"content":"    @Override","lastModifiedDate":"2022-10-04"},{"lineNumber":52,"author":{"gitId":"NicholasTYD"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-04"},{"lineNumber":53,"author":{"gitId":"NicholasTYD"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-04"},{"lineNumber":54,"author":{"gitId":"NicholasTYD"},"content":"            return true;","lastModifiedDate":"2022-10-04"},{"lineNumber":55,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-04"},{"lineNumber":56,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":57,"author":{"gitId":"NicholasTYD"},"content":"        if (!(other instanceof MarkCommand)) {","lastModifiedDate":"2022-10-04"},{"lineNumber":58,"author":{"gitId":"NicholasTYD"},"content":"            return false;","lastModifiedDate":"2022-10-04"},{"lineNumber":59,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-04"},{"lineNumber":60,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":61,"author":{"gitId":"NicholasTYD"},"content":"        MarkCommand otherCommand \u003d (MarkCommand) other;","lastModifiedDate":"2022-10-04"},{"lineNumber":62,"author":{"gitId":"NicholasTYD"},"content":"        return hasSameIndexOfPerson(otherCommand) \u0026\u0026 hasSameIndexOfAppointment(otherCommand);","lastModifiedDate":"2022-10-04"},{"lineNumber":63,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":64,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-02"}],"authorContributionMap":{"NicholasTYD":63,"JovonLim":1}},{"path":"src/main/java/seedu/address/logic/commands/SelectAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-02"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-02"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import java.util.List;","lastModifiedDate":"2022-10-02"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-02"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-02"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-02"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-02"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-02"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-02"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"/**","lastModifiedDate":"2022-10-02"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":" * A class of commands that involve selecting an appointment only with no additional arguments.","lastModifiedDate":"2022-10-02"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":" */","lastModifiedDate":"2022-10-02"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"public abstract class SelectAppointmentCommand extends Command {","lastModifiedDate":"2022-10-02"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"    protected final Index indexOfPerson;","lastModifiedDate":"2022-10-02"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"    protected final Index indexOfAppointment;","lastModifiedDate":"2022-10-02"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"     * Creates command that selects an appointment according to the index of a person and the index of the appointment.","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"     * @param indexOfPerson Index of the person in the filtered person list.","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"     * @param indexOfAppointment Index of the appointment of the specified person.","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"    public SelectAppointmentCommand(Index indexOfPerson, Index indexOfAppointment) {","lastModifiedDate":"2022-10-02"},{"lineNumber":28,"author":{"gitId":"NicholasTYD"},"content":"        requireNonNull(indexOfPerson);","lastModifiedDate":"2022-10-02"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"        requireNonNull(indexOfAppointment);","lastModifiedDate":"2022-10-02"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"        this.indexOfPerson \u003d indexOfPerson;","lastModifiedDate":"2022-10-02"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"        this.indexOfAppointment \u003d indexOfAppointment;","lastModifiedDate":"2022-10-02"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"    protected Appointment getTargetAppointment(Model model) throws CommandException {","lastModifiedDate":"2022-10-02"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"        Person targetPerson \u003d getTargetPerson(model);","lastModifiedDate":"2022-10-02"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"        List\u003cAppointment\u003e targetAppointmentList \u003d targetPerson.getAppointments();","lastModifiedDate":"2022-10-02"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"        if (indexOfAppointment.getZeroBased() \u003e\u003d targetAppointmentList.size()) {","lastModifiedDate":"2022-10-02"},{"lineNumber":40,"author":{"gitId":"NicholasTYD"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-02"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-02"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"        Appointment targetAppointment \u003d targetAppointmentList.get(indexOfAppointment.getZeroBased());","lastModifiedDate":"2022-10-02"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"        return targetAppointment;","lastModifiedDate":"2022-10-02"},{"lineNumber":45,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":47,"author":{"gitId":"NicholasTYD"},"content":"    protected Person getTargetPerson(Model model) throws CommandException {","lastModifiedDate":"2022-10-02"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-02"},{"lineNumber":49,"author":{"gitId":"NicholasTYD"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2022-10-02"},{"lineNumber":50,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":51,"author":{"gitId":"NicholasTYD"},"content":"        if (indexOfPerson.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2022-10-02"},{"lineNumber":52,"author":{"gitId":"NicholasTYD"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-02"},{"lineNumber":53,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-02"},{"lineNumber":54,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":55,"author":{"gitId":"NicholasTYD"},"content":"        Person targetPerson \u003d lastShownList.get(indexOfPerson.getZeroBased());","lastModifiedDate":"2022-10-02"},{"lineNumber":56,"author":{"gitId":"NicholasTYD"},"content":"        return targetPerson;","lastModifiedDate":"2022-10-02"},{"lineNumber":57,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":58,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":59,"author":{"gitId":"NicholasTYD"},"content":"    protected boolean hasSameIndexOfPerson(SelectAppointmentCommand other) {","lastModifiedDate":"2022-10-04"},{"lineNumber":60,"author":{"gitId":"NicholasTYD"},"content":"        return indexOfPerson.equals(other.indexOfPerson);","lastModifiedDate":"2022-10-04"},{"lineNumber":61,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":62,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":63,"author":{"gitId":"NicholasTYD"},"content":"    protected boolean hasSameIndexOfAppointment(SelectAppointmentCommand other) {","lastModifiedDate":"2022-10-04"},{"lineNumber":64,"author":{"gitId":"NicholasTYD"},"content":"        return indexOfAppointment.equals(other.indexOfAppointment);","lastModifiedDate":"2022-10-04"},{"lineNumber":65,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":66,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":67,"author":{"gitId":"JovonLim"},"content":"    @Override","lastModifiedDate":"2022-10-08"},{"lineNumber":68,"author":{"gitId":"JovonLim"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-08"},{"lineNumber":69,"author":{"gitId":"JovonLim"},"content":"        // short circuit if same object","lastModifiedDate":"2022-10-08"},{"lineNumber":70,"author":{"gitId":"JovonLim"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-08"},{"lineNumber":71,"author":{"gitId":"JovonLim"},"content":"            return true;","lastModifiedDate":"2022-10-08"},{"lineNumber":72,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":73,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":74,"author":{"gitId":"JovonLim"},"content":"        // instanceof handles nulls","lastModifiedDate":"2022-10-08"},{"lineNumber":75,"author":{"gitId":"JovonLim"},"content":"        if (!(other instanceof SelectAppointmentCommand)) {","lastModifiedDate":"2022-10-08"},{"lineNumber":76,"author":{"gitId":"JovonLim"},"content":"            return false;","lastModifiedDate":"2022-10-08"},{"lineNumber":77,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":78,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":79,"author":{"gitId":"JovonLim"},"content":"        // state check","lastModifiedDate":"2022-10-08"},{"lineNumber":80,"author":{"gitId":"JovonLim"},"content":"        SelectAppointmentCommand e \u003d (SelectAppointmentCommand) other;","lastModifiedDate":"2022-10-08"},{"lineNumber":81,"author":{"gitId":"JovonLim"},"content":"        return indexOfPerson.equals(e.indexOfPerson)","lastModifiedDate":"2022-10-08"},{"lineNumber":82,"author":{"gitId":"JovonLim"},"content":"                \u0026\u0026 indexOfAppointment.equals(e.indexOfAppointment);","lastModifiedDate":"2022-10-08"},{"lineNumber":83,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":84,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-02"}],"authorContributionMap":{"NicholasTYD":66,"JovonLim":18}},{"path":"src/main/java/seedu/address/logic/commands/UnmarkCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-02"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-02"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-02"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-02"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-02"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-04"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"/**","lastModifiedDate":"2022-10-02"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":" * Unmarks an appointment for the given patient as incomplete.","lastModifiedDate":"2022-10-02"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":" */","lastModifiedDate":"2022-10-02"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"public class UnmarkCommand extends SelectAppointmentCommand {","lastModifiedDate":"2022-10-02"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"    public static final String COMMAND_WORD \u003d \"unmark\";","lastModifiedDate":"2022-10-02"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Unmarks the appointment of the person identified \"","lastModifiedDate":"2022-10-02"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"            + \"by the index numbers used in the displayed person and their corresponding appointment list. \"","lastModifiedDate":"2022-10-02"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2022-10-02"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"            + \"Parameters: INDEX_OF_PERSON (must be a positive integer) \"","lastModifiedDate":"2022-10-02"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"            + \"INDEX_OF_APPOINTMENT (must be a positive integer)\";","lastModifiedDate":"2022-10-02"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"    public static final String MESSAGE_UNMARK_PERSON_SUCCESS \u003d \"Unmarked appointment %1$s for Person: %2$s\";","lastModifiedDate":"2022-10-02"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"    public static final String MESSAGE_ALREADY_UNMARKED \u003d \"This appointment is already unmarked.\";","lastModifiedDate":"2022-10-02"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-02"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"     * Creates an unmark command containing the index of a person and the index of an appointment.","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"     * @param indexOfPerson Index of the person in the filtered person list to unmark.","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"NicholasTYD"},"content":"     * @param indexOfAppointment Index of the appointment of the specified person to unmark.","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-02"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"    public UnmarkCommand(Index indexOfPerson, Index indexOfAppointment) {","lastModifiedDate":"2022-10-02"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"        super(indexOfPerson, indexOfAppointment);","lastModifiedDate":"2022-10-02"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"    @Override","lastModifiedDate":"2022-10-02"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-02"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"        Person personToMark \u003d getTargetPerson(model);","lastModifiedDate":"2022-10-04"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"        Appointment appointmentToUnmark \u003d getTargetAppointment(model);","lastModifiedDate":"2022-10-02"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"        if (!appointmentToUnmark.isMarked()) {","lastModifiedDate":"2022-10-02"},{"lineNumber":40,"author":{"gitId":"NicholasTYD"},"content":"            throw new CommandException(MESSAGE_ALREADY_UNMARKED);","lastModifiedDate":"2022-10-02"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-02"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"        appointmentToUnmark.unmark();","lastModifiedDate":"2022-10-02"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"        model.refreshPerson(personToMark);","lastModifiedDate":"2022-10-04"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"        model.refreshAppointment(appointmentToUnmark);","lastModifiedDate":"2022-10-09"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"        return new CommandResult(String.format(MESSAGE_UNMARK_PERSON_SUCCESS,","lastModifiedDate":"2022-10-02"},{"lineNumber":47,"author":{"gitId":"NicholasTYD"},"content":"                indexOfAppointment.getOneBased(),","lastModifiedDate":"2022-10-02"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"                getTargetPerson(model).getName()));","lastModifiedDate":"2022-10-02"},{"lineNumber":49,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":50,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":51,"author":{"gitId":"NicholasTYD"},"content":"    @Override","lastModifiedDate":"2022-10-04"},{"lineNumber":52,"author":{"gitId":"NicholasTYD"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-04"},{"lineNumber":53,"author":{"gitId":"NicholasTYD"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-04"},{"lineNumber":54,"author":{"gitId":"NicholasTYD"},"content":"            return true;","lastModifiedDate":"2022-10-04"},{"lineNumber":55,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-04"},{"lineNumber":56,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":57,"author":{"gitId":"NicholasTYD"},"content":"        if (!(other instanceof UnmarkCommand)) {","lastModifiedDate":"2022-10-04"},{"lineNumber":58,"author":{"gitId":"NicholasTYD"},"content":"            return false;","lastModifiedDate":"2022-10-04"},{"lineNumber":59,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-04"},{"lineNumber":60,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":61,"author":{"gitId":"NicholasTYD"},"content":"        UnmarkCommand otherCommand \u003d (UnmarkCommand) other;","lastModifiedDate":"2022-10-04"},{"lineNumber":62,"author":{"gitId":"NicholasTYD"},"content":"        return hasSameIndexOfPerson(otherCommand) \u0026\u0026 hasSameIndexOfAppointment(otherCommand);","lastModifiedDate":"2022-10-04"},{"lineNumber":63,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":64,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-02"}],"authorContributionMap":{"NicholasTYD":63,"JovonLim":1}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-02-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-03-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-03-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-03-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-03-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-03-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-17"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2017-02-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);","lastModifiedDate":"2017-06-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":37,"author":{"gitId":"WingKei67"},"content":"        if ((!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE))","lastModifiedDate":"2022-10-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                    || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":42,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":44,"author":{"gitId":"WingKei67"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).orElse(\"\"));","lastModifiedDate":"2022-10-06"},{"lineNumber":45,"author":{"gitId":"WingKei67"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).orElse(\"\"));","lastModifiedDate":"2022-10-06"},{"lineNumber":46,"author":{"gitId":"WingKei67"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).orElse(\"\"));","lastModifiedDate":"2022-10-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2017-03-17"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"        Person person \u003d new Person(name, phone, email, address, new ArrayList\u003c\u003e(), tagList);","lastModifiedDate":"2022-10-01"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new AddCommand(person);","lastModifiedDate":"2017-03-17"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"JovonLim":2,"WingKei67":5,"-":55}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.commons.core.Messages.INCOMPLETE_COMMAND;","lastModifiedDate":"2022-10-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.BookCommand;","lastModifiedDate":"2022-10-01"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.logic.commands.CancelCommand;","lastModifiedDate":"2022-10-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2017-01-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditAppointmentCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditPatientCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.commands.MarkCommand;","lastModifiedDate":"2022-10-02"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.commands.UnmarkCommand;","lastModifiedDate":"2022-10-02"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)\"","lastModifiedDate":"2022-10-08"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"            + \"(?\u003cdescriptor\u003e(?i:\\\\s+appts|\\\\s+patients)?)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2022-10-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"NicholasTYD"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\").toLowerCase();","lastModifiedDate":"2022-10-09"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"        final String descriptor \u003d matcher.group(\"descriptor\").trim().toLowerCase();","lastModifiedDate":"2022-10-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"JovonLim"},"content":"        case EditPatientCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-08"},{"lineNumber":59,"author":{"gitId":"JovonLim"},"content":"            if (descriptor.equals(EditPatientCommand.DESCRIPTOR_WORD)) {","lastModifiedDate":"2022-10-08"},{"lineNumber":60,"author":{"gitId":"JovonLim"},"content":"                return new EditPatientCommandParser().parse(arguments);","lastModifiedDate":"2022-10-08"},{"lineNumber":61,"author":{"gitId":"JovonLim"},"content":"            } else if (descriptor.equals(EditAppointmentCommand.DESCRIPTOR_WORD)) {","lastModifiedDate":"2022-10-08"},{"lineNumber":62,"author":{"gitId":"JovonLim"},"content":"                return new EditAppointmentCommandParser().parse(arguments);","lastModifiedDate":"2022-10-08"},{"lineNumber":63,"author":{"gitId":"JovonLim"},"content":"            } else {","lastModifiedDate":"2022-10-08"},{"lineNumber":64,"author":{"gitId":"JovonLim"},"content":"                throw new ParseException(INCOMPLETE_COMMAND);","lastModifiedDate":"2022-10-08"},{"lineNumber":65,"author":{"gitId":"JovonLim"},"content":"            }","lastModifiedDate":"2022-10-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"JovonLim"},"content":"        case BookCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-01"},{"lineNumber":77,"author":{"gitId":"JovonLim"},"content":"            return new BookCommandParser().parse(arguments);","lastModifiedDate":"2022-10-01"},{"lineNumber":78,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":79,"author":{"gitId":"guanzhou03"},"content":"        case CancelCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-01"},{"lineNumber":80,"author":{"gitId":"guanzhou03"},"content":"            return new CancelCommandParser().parse(arguments);","lastModifiedDate":"2022-10-01"},{"lineNumber":81,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":82,"author":{"gitId":"NicholasTYD"},"content":"        case MarkCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-02"},{"lineNumber":83,"author":{"gitId":"NicholasTYD"},"content":"            return new MarkCommandParser().parse(arguments);","lastModifiedDate":"2022-10-02"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":85,"author":{"gitId":"NicholasTYD"},"content":"        case UnmarkCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-02"},{"lineNumber":86,"author":{"gitId":"NicholasTYD"},"content":"            return new UnmarkCommandParser().parse(arguments);","lastModifiedDate":"2022-10-02"},{"lineNumber":87,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":89,"author":{"gitId":"JovonLim"},"content":"            if (!descriptor.isEmpty()) {","lastModifiedDate":"2022-10-09"},{"lineNumber":90,"author":{"gitId":"JovonLim"},"content":"                return new ListCommand(descriptor);","lastModifiedDate":"2022-10-09"},{"lineNumber":91,"author":{"gitId":"JovonLim"},"content":"            } else if (!arguments.isEmpty()) {","lastModifiedDate":"2022-10-09"},{"lineNumber":92,"author":{"gitId":"JovonLim"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-09"},{"lineNumber":93,"author":{"gitId":"JovonLim"},"content":"            } else {","lastModifiedDate":"2022-10-09"},{"lineNumber":94,"author":{"gitId":"JovonLim"},"content":"                throw new ParseException(INCOMPLETE_COMMAND);","lastModifiedDate":"2022-10-09"},{"lineNumber":95,"author":{"gitId":"JovonLim"},"content":"            }","lastModifiedDate":"2022-10-09"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"NicholasTYD":8,"JovonLim":25,"-":70,"guanzhou03":4}},{"path":"src/main/java/seedu/address/logic/parser/BookCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-01"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-01"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-01"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-10-01"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REASON;","lastModifiedDate":"2022-10-01"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2022-10-09"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-01"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.BookCommand;","lastModifiedDate":"2022-10-01"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-01"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"/**","lastModifiedDate":"2022-10-01"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":" * Parses input arguments and creates a new BookCommand object.","lastModifiedDate":"2022-10-01"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":" */","lastModifiedDate":"2022-10-01"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"public class BookCommandParser implements Parser\u003cBookCommand\u003e {","lastModifiedDate":"2022-10-01"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"    @Override","lastModifiedDate":"2022-10-01"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"    public BookCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-01"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"        requireNonNull(args);","lastModifiedDate":"2022-10-01"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_REASON, PREFIX_DATE);","lastModifiedDate":"2022-10-01"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"        Index index;","lastModifiedDate":"2022-10-01"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_REASON, PREFIX_DATE)","lastModifiedDate":"2022-10-09"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"                || argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2022-10-09"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, BookCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-09"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-09"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"        try {","lastModifiedDate":"2022-10-01"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2022-10-01"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"        } catch (ParseException e) {","lastModifiedDate":"2022-10-09"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, BookCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-09"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"        Appointment appointment \u003d ParserUtil.parseAppointment(argMultimap.getValue(PREFIX_REASON).get(),","lastModifiedDate":"2022-10-01"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"                argMultimap.getValue(PREFIX_DATE).get());","lastModifiedDate":"2022-10-01"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"        return new BookCommand(index, appointment);","lastModifiedDate":"2022-10-01"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-09"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2022-10-09"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2022-10-09"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-09"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2022-10-09"},{"lineNumber":46,"author":{"gitId":"JovonLim"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2022-10-09"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-01"}],"authorContributionMap":{"JovonLim":48}},{"path":"src/main/java/seedu/address/logic/parser/CancelCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"guanzhou03"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-01"},{"lineNumber":2,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":3,"author":{"gitId":"guanzhou03"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-04"},{"lineNumber":4,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX;","lastModifiedDate":"2022-10-04"},{"lineNumber":5,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":6,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-01"},{"lineNumber":7,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.logic.commands.CancelCommand;","lastModifiedDate":"2022-10-01"},{"lineNumber":8,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-01"},{"lineNumber":9,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":10,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":11,"author":{"gitId":"guanzhou03"},"content":"/**","lastModifiedDate":"2022-10-04"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":" * A class that encapsulates parsing of the input for cancel commands.","lastModifiedDate":"2022-10-04"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":" */","lastModifiedDate":"2022-10-04"},{"lineNumber":14,"author":{"gitId":"guanzhou03"},"content":"public class CancelCommandParser implements Parser\u003cCancelCommand\u003e {","lastModifiedDate":"2022-10-01"},{"lineNumber":15,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":16,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-10-04"},{"lineNumber":17,"author":{"gitId":"guanzhou03"},"content":"     * Reads the user input and generates the specified cancel command.","lastModifiedDate":"2022-10-04"},{"lineNumber":18,"author":{"gitId":"guanzhou03"},"content":"     * @param userInput Input string from user without the command word.","lastModifiedDate":"2022-10-04"},{"lineNumber":19,"author":{"gitId":"guanzhou03"},"content":"     * @return The specified cancel command to execute.","lastModifiedDate":"2022-10-04"},{"lineNumber":20,"author":{"gitId":"guanzhou03"},"content":"     * @throws ParseException If the input is not in the correct format.","lastModifiedDate":"2022-10-04"},{"lineNumber":21,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-10-04"},{"lineNumber":22,"author":{"gitId":"guanzhou03"},"content":"    @Override","lastModifiedDate":"2022-10-01"},{"lineNumber":23,"author":{"gitId":"guanzhou03"},"content":"    public CancelCommand parse(String userInput) throws ParseException {","lastModifiedDate":"2022-10-01"},{"lineNumber":24,"author":{"gitId":"guanzhou03"},"content":"        requireNonNull(userInput);","lastModifiedDate":"2022-10-01"},{"lineNumber":25,"author":{"gitId":"guanzhou03"},"content":"        String trimmedIndices \u003d userInput.trim();","lastModifiedDate":"2022-10-01"},{"lineNumber":26,"author":{"gitId":"guanzhou03"},"content":"        String[] patientAndApptIndex \u003d trimmedIndices.split(\" \");","lastModifiedDate":"2022-10-01"},{"lineNumber":27,"author":{"gitId":"guanzhou03"},"content":"        if (patientAndApptIndex.length !\u003d 2) {","lastModifiedDate":"2022-10-04"},{"lineNumber":28,"author":{"gitId":"guanzhou03"},"content":"            throw new ParseException(MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-04"},{"lineNumber":29,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-04"},{"lineNumber":30,"author":{"gitId":"guanzhou03"},"content":"        Index patientIndex \u003d ParserUtil.parseIndex(patientAndApptIndex[0]);","lastModifiedDate":"2022-10-01"},{"lineNumber":31,"author":{"gitId":"guanzhou03"},"content":"        Index apptIndex \u003d ParserUtil.parseIndex(patientAndApptIndex[1]);","lastModifiedDate":"2022-10-01"},{"lineNumber":32,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":33,"author":{"gitId":"guanzhou03"},"content":"        return new CancelCommand(patientIndex, apptIndex);","lastModifiedDate":"2022-10-01"},{"lineNumber":34,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":35,"author":{"gitId":"guanzhou03"},"content":"}","lastModifiedDate":"2022-10-01"},{"lineNumber":36,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"}],"authorContributionMap":{"guanzhou03":36}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"    public static final Prefix PREFIX_REASON \u003d new Prefix(\"r/\");","lastModifiedDate":"2022-10-01"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");","lastModifiedDate":"2022-10-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"JovonLim":2,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/EditAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-08"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-08"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-08"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-10-08"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REASON;","lastModifiedDate":"2022-10-08"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-08"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"import java.util.List;","lastModifiedDate":"2022-10-08"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-08"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditAppointmentCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditAppointmentCommand.EditAppointmentDescriptor;","lastModifiedDate":"2022-10-08"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-08"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-08"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"/**","lastModifiedDate":"2022-10-08"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":" *  Parses input arguments and creates a new EditAppointmentCommand object.","lastModifiedDate":"2022-10-08"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":" */","lastModifiedDate":"2022-10-08"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"public class EditAppointmentCommandParser implements Parser\u003cEditAppointmentCommand\u003e {","lastModifiedDate":"2022-10-08"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"    @Override","lastModifiedDate":"2022-10-08"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"    public EditAppointmentCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-08"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":"        requireNonNull(args);","lastModifiedDate":"2022-10-08"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_REASON, PREFIX_DATE);","lastModifiedDate":"2022-10-08"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"        Index patientIndex;","lastModifiedDate":"2022-10-08"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"        Index appointmentIndex;","lastModifiedDate":"2022-10-08"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"        try {","lastModifiedDate":"2022-10-08"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"            List\u003cIndex\u003e patientAndAppointmentIndexes \u003d ParserUtil.parseIndexes(argMultimap.getPreamble(), 2);","lastModifiedDate":"2022-10-08"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"            patientIndex \u003d patientAndAppointmentIndexes.get(0);","lastModifiedDate":"2022-10-08"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"            appointmentIndex \u003d patientAndAppointmentIndexes.get(1);","lastModifiedDate":"2022-10-08"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2022-10-08"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2022-10-08"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"                    EditAppointmentCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2022-10-08"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentDescriptor editAppointmentDescriptor \u003d new EditAppointmentDescriptor();","lastModifiedDate":"2022-10-08"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"        addReason(editAppointmentDescriptor, argMultimap);","lastModifiedDate":"2022-10-09"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"        addDate(editAppointmentDescriptor, argMultimap);","lastModifiedDate":"2022-10-09"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"        if (!editAppointmentDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2022-10-09"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"            throw new ParseException(EditAppointmentCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2022-10-09"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-09"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"        return new EditAppointmentCommand(patientIndex, appointmentIndex, editAppointmentDescriptor);","lastModifiedDate":"2022-10-09"},{"lineNumber":46,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"    private void addReason(EditAppointmentDescriptor descriptor, ArgumentMultimap argMultimap) throws ParseException {","lastModifiedDate":"2022-10-09"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"        if (argMultimap.getValue(PREFIX_REASON).isPresent()) {","lastModifiedDate":"2022-10-08"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"            String reason \u003d argMultimap.getValue(PREFIX_REASON).get().trim();","lastModifiedDate":"2022-10-08"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"            if (Appointment.isValidReason(reason)) {","lastModifiedDate":"2022-10-08"},{"lineNumber":52,"author":{"gitId":"JovonLim"},"content":"                descriptor.setReason(reason);","lastModifiedDate":"2022-10-09"},{"lineNumber":53,"author":{"gitId":"JovonLim"},"content":"            } else {","lastModifiedDate":"2022-10-08"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"                throw new ParseException(Appointment.REASON_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-08"},{"lineNumber":55,"author":{"gitId":"JovonLim"},"content":"            }","lastModifiedDate":"2022-10-08"},{"lineNumber":56,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":57,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":58,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":59,"author":{"gitId":"JovonLim"},"content":"    private void addDate(EditAppointmentDescriptor descriptor, ArgumentMultimap argMultimap) throws ParseException {","lastModifiedDate":"2022-10-09"},{"lineNumber":60,"author":{"gitId":"JovonLim"},"content":"        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {","lastModifiedDate":"2022-10-08"},{"lineNumber":61,"author":{"gitId":"JovonLim"},"content":"            String dateTime \u003d argMultimap.getValue(PREFIX_DATE).get().trim();","lastModifiedDate":"2022-10-08"},{"lineNumber":62,"author":{"gitId":"JovonLim"},"content":"            if (Appointment.isValidDateTime(dateTime)) {","lastModifiedDate":"2022-10-08"},{"lineNumber":63,"author":{"gitId":"JovonLim"},"content":"                String temp \u003d String.join(\" \", dateTime.split(\"\\\\s+\", 2));","lastModifiedDate":"2022-10-08"},{"lineNumber":64,"author":{"gitId":"JovonLim"},"content":"                descriptor.setDateTime(LocalDateTime.parse(temp, Appointment.DATE_FORMATTER));","lastModifiedDate":"2022-10-09"},{"lineNumber":65,"author":{"gitId":"JovonLim"},"content":"            } else {","lastModifiedDate":"2022-10-08"},{"lineNumber":66,"author":{"gitId":"JovonLim"},"content":"                throw new ParseException(Appointment.DATE_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-08"},{"lineNumber":67,"author":{"gitId":"JovonLim"},"content":"            }","lastModifiedDate":"2022-10-08"},{"lineNumber":68,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-08"},{"lineNumber":69,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":70,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-08"}],"authorContributionMap":{"JovonLim":70}},{"path":"src/main/java/seedu/address/logic/parser/EditPatientCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-01-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditPatientCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditPatientCommand.EditPersonDescriptor;","lastModifiedDate":"2022-10-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":" * Parses input arguments and creates a new EditPatientCommand object","lastModifiedDate":"2022-10-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"public class EditPatientCommandParser implements Parser\u003cEditPatientCommand\u003e {","lastModifiedDate":"2022-10-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"     * Parses the given {@code String} of arguments in the context of the EditPatientCommand","lastModifiedDate":"2022-10-08"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"     * and returns an EditPatientCommand object for execution.","lastModifiedDate":"2022-10-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"    public EditPatientCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);","lastModifiedDate":"2017-06-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2022-10-08"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"                    EditPatientCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2022-10-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-01-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);","lastModifiedDate":"2017-06-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":62,"author":{"gitId":"JovonLim"},"content":"            throw new ParseException(EditPatientCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2022-10-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":65,"author":{"gitId":"JovonLim"},"content":"        return new EditPatientCommand(index, editPersonDescriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2017-03-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2017-01-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags.","lastModifiedDate":"2017-03-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2017-01-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2017-01-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2017-01-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2017-01-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"JovonLim":11,"-":72}},{"path":"src/main/java/seedu/address/logic/parser/ListCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pwjj2000"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-06"},{"lineNumber":2,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":3,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-06"},{"lineNumber":4,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":5,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2022-10-06"},{"lineNumber":6,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-06"},{"lineNumber":7,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":8,"author":{"gitId":"pwjj2000"},"content":"/**","lastModifiedDate":"2022-10-06"},{"lineNumber":9,"author":{"gitId":"pwjj2000"},"content":" * Parses input arguments and creates a new ListCommand object.","lastModifiedDate":"2022-10-06"},{"lineNumber":10,"author":{"gitId":"pwjj2000"},"content":" */","lastModifiedDate":"2022-10-06"},{"lineNumber":11,"author":{"gitId":"pwjj2000"},"content":"public class ListCommandParser implements Parser\u003cListCommand\u003e {","lastModifiedDate":"2022-10-06"},{"lineNumber":12,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":13,"author":{"gitId":"pwjj2000"},"content":"    /**","lastModifiedDate":"2022-10-06"},{"lineNumber":14,"author":{"gitId":"pwjj2000"},"content":"     * Parses the given {@code String} of arguments in the context of the ListCommand","lastModifiedDate":"2022-10-06"},{"lineNumber":15,"author":{"gitId":"pwjj2000"},"content":"     * and returns a ListCommand object for execution.","lastModifiedDate":"2022-10-06"},{"lineNumber":16,"author":{"gitId":"pwjj2000"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2022-10-06"},{"lineNumber":17,"author":{"gitId":"pwjj2000"},"content":"     */","lastModifiedDate":"2022-10-06"},{"lineNumber":18,"author":{"gitId":"pwjj2000"},"content":"    public ListCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-06"},{"lineNumber":19,"author":{"gitId":"pwjj2000"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2022-10-06"},{"lineNumber":20,"author":{"gitId":"pwjj2000"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2022-10-06"},{"lineNumber":21,"author":{"gitId":"pwjj2000"},"content":"            throw new ParseException(","lastModifiedDate":"2022-10-06"},{"lineNumber":22,"author":{"gitId":"pwjj2000"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-06"},{"lineNumber":23,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":24,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":25,"author":{"gitId":"pwjj2000"},"content":"        String[] type \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2022-10-06"},{"lineNumber":26,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":27,"author":{"gitId":"pwjj2000"},"content":"        if (type.length \u003e 1 || (!type[0].equals(\"patients\") \u0026\u0026 !type[0].equals(\"appts\"))) {","lastModifiedDate":"2022-10-06"},{"lineNumber":28,"author":{"gitId":"pwjj2000"},"content":"            throw new ParseException(","lastModifiedDate":"2022-10-06"},{"lineNumber":29,"author":{"gitId":"pwjj2000"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-06"},{"lineNumber":30,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":31,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":32,"author":{"gitId":"pwjj2000"},"content":"        return new ListCommand(type[0]);","lastModifiedDate":"2022-10-06"},{"lineNumber":33,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":34,"author":{"gitId":"pwjj2000"},"content":"}","lastModifiedDate":"2022-10-06"}],"authorContributionMap":{"pwjj2000":34}},{"path":"src/main/java/seedu/address/logic/parser/MarkCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-02"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-02"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import java.util.List;","lastModifiedDate":"2022-10-02"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-02"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.commands.MarkCommand;","lastModifiedDate":"2022-10-02"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-02"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"/**","lastModifiedDate":"2022-10-02"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":" * Parses input arguments and creates a new MarkCommand object","lastModifiedDate":"2022-10-02"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":" */","lastModifiedDate":"2022-10-02"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"public class MarkCommandParser extends SelectAppointmentCommandParser\u003cMarkCommand\u003e {","lastModifiedDate":"2022-10-02"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"    @Override","lastModifiedDate":"2022-10-02"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"    public MarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-02"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"        try {","lastModifiedDate":"2022-10-02"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"            List\u003cIndex\u003e personAndAppointmentIndexes \u003d super.getPersonAndAppointmentIndexes(args);","lastModifiedDate":"2022-10-02"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"            Index indexOfPerson \u003d personAndAppointmentIndexes.get(0);","lastModifiedDate":"2022-10-02"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"            Index indexOfAppointment \u003d personAndAppointmentIndexes.get(1);","lastModifiedDate":"2022-10-02"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"            return new MarkCommand(indexOfPerson, indexOfAppointment);","lastModifiedDate":"2022-10-02"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2022-10-02"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2022-10-02"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-02"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-02"}],"authorContributionMap":{"NicholasTYD":27}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"import java.util.List;","lastModifiedDate":"2022-10-02"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-02-11"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-02-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-02-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-02-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-02-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"    public static final String MESSAGE_UNEXPECTED_INDEX_COUNT \u003d \"The amount of indexes parsed is not as expected.\";","lastModifiedDate":"2022-10-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-02"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"     * Parses a string of {@code oneBasedIndex}es seperated by spaces into a list of {@code Index} of exactly size","lastModifiedDate":"2022-10-02"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"     * {@code parseCount} and returns it. Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-10-02"},{"lineNumber":45,"author":{"gitId":"NicholasTYD"},"content":"     *","lastModifiedDate":"2022-10-02"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"     * @param parseCount The exact amount of indexes to parse.","lastModifiedDate":"2022-10-02"},{"lineNumber":47,"author":{"gitId":"NicholasTYD"},"content":"     * @throws ParseException if the specified indexes is invalid (not non-zero unsigned integer), or if the amount of","lastModifiedDate":"2022-10-02"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"     *     indexes is not exactly {@code parseCount}","lastModifiedDate":"2022-10-02"},{"lineNumber":49,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-02"},{"lineNumber":50,"author":{"gitId":"NicholasTYD"},"content":"    public static List\u003cIndex\u003e parseIndexes(String oneBasedIndexes, int parseCount) throws ParseException {","lastModifiedDate":"2022-10-02"},{"lineNumber":51,"author":{"gitId":"NicholasTYD"},"content":"        String indexSeparator \u003d \"\\\\s+\";","lastModifiedDate":"2022-10-04"},{"lineNumber":52,"author":{"gitId":"NicholasTYD"},"content":"        String trimmedIndexes \u003d oneBasedIndexes.trim();","lastModifiedDate":"2022-10-02"},{"lineNumber":53,"author":{"gitId":"NicholasTYD"},"content":"        String[] indexes \u003d trimmedIndexes.split(indexSeparator);","lastModifiedDate":"2022-10-02"},{"lineNumber":54,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":55,"author":{"gitId":"NicholasTYD"},"content":"        if (indexes.length !\u003d parseCount) {","lastModifiedDate":"2022-10-04"},{"lineNumber":56,"author":{"gitId":"NicholasTYD"},"content":"            throw new ParseException(MESSAGE_UNEXPECTED_INDEX_COUNT);","lastModifiedDate":"2022-10-04"},{"lineNumber":57,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-04"},{"lineNumber":58,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":59,"author":{"gitId":"NicholasTYD"},"content":"        List\u003cIndex\u003e indexList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-02"},{"lineNumber":60,"author":{"gitId":"NicholasTYD"},"content":"        for (String index : indexes) {","lastModifiedDate":"2022-10-02"},{"lineNumber":61,"author":{"gitId":"NicholasTYD"},"content":"            indexList.add(parseIndex(index));","lastModifiedDate":"2022-10-02"},{"lineNumber":62,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-02"},{"lineNumber":63,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":64,"author":{"gitId":"NicholasTYD"},"content":"        return indexList;","lastModifiedDate":"2022-10-02"},{"lineNumber":65,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":66,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2022-10-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":104,"author":{"gitId":"WingKei67"},"content":"        if (address \u003d\u003d \"\") {","lastModifiedDate":"2022-10-04"},{"lineNumber":105,"author":{"gitId":"WingKei67"},"content":"            return new Address();","lastModifiedDate":"2022-10-04"},{"lineNumber":106,"author":{"gitId":"WingKei67"},"content":"        }","lastModifiedDate":"2022-10-04"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":121,"author":{"gitId":"WingKei67"},"content":"        if (email \u003d\u003d \"\") {","lastModifiedDate":"2022-10-04"},{"lineNumber":122,"author":{"gitId":"WingKei67"},"content":"            return new Email();","lastModifiedDate":"2022-10-04"},{"lineNumber":123,"author":{"gitId":"WingKei67"},"content":"        }","lastModifiedDate":"2022-10-04"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":146,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":147,"author":{"gitId":"JovonLim"},"content":"     * Parses a {@code String reason} and {@code String dateTime} into a {@code Appointment}.","lastModifiedDate":"2022-10-01"},{"lineNumber":148,"author":{"gitId":"JovonLim"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-10-01"},{"lineNumber":149,"author":{"gitId":"JovonLim"},"content":"     *","lastModifiedDate":"2022-10-01"},{"lineNumber":150,"author":{"gitId":"JovonLim"},"content":"     * @throws ParseException if the given {@code reason} or {@code dateTime} is invalid.","lastModifiedDate":"2022-10-01"},{"lineNumber":151,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":152,"author":{"gitId":"NicholasTYD"},"content":"    public static Appointment parseAppointment(String reason, String dateTime) throws ParseException {","lastModifiedDate":"2022-10-02"},{"lineNumber":153,"author":{"gitId":"JovonLim"},"content":"        requireNonNull(dateTime);","lastModifiedDate":"2022-10-01"},{"lineNumber":154,"author":{"gitId":"JovonLim"},"content":"        requireNonNull(reason);","lastModifiedDate":"2022-10-01"},{"lineNumber":155,"author":{"gitId":"JovonLim"},"content":"        String trimmedReason \u003d reason.trim();","lastModifiedDate":"2022-10-01"},{"lineNumber":156,"author":{"gitId":"JovonLim"},"content":"        String trimmedDateTime \u003d dateTime.trim();","lastModifiedDate":"2022-10-01"},{"lineNumber":157,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":158,"author":{"gitId":"JovonLim"},"content":"        if (!Appointment.isValidReason(trimmedReason)) {","lastModifiedDate":"2022-10-01"},{"lineNumber":159,"author":{"gitId":"JovonLim"},"content":"            throw new ParseException(Appointment.REASON_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-01"},{"lineNumber":160,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":161,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":162,"author":{"gitId":"JovonLim"},"content":"        if (!Appointment.isValidDateTime(dateTime)) {","lastModifiedDate":"2022-10-01"},{"lineNumber":163,"author":{"gitId":"JovonLim"},"content":"            throw new ParseException(Appointment.DATE_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-01"},{"lineNumber":164,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":165,"author":{"gitId":"NicholasTYD"},"content":"        return new Appointment(trimmedReason, trimmedDateTime, false);","lastModifiedDate":"2022-10-02"},{"lineNumber":166,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":167,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":169,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":170,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":179,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"NicholasTYD":30,"JovonLim":21,"WingKei67":6,"-":122}},{"path":"src/main/java/seedu/address/logic/parser/SelectAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-02"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-02"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import java.util.List;","lastModifiedDate":"2022-10-02"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-02"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.commands.SelectAppointmentCommand;","lastModifiedDate":"2022-10-02"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-02"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"/**","lastModifiedDate":"2022-10-02"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":" * Parses input arguments and creates a new SelectAppointmentCommand object. Used for commands that involve selecting","lastModifiedDate":"2022-10-02"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":" * an appointment only with no additional arguments.","lastModifiedDate":"2022-10-02"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":" */","lastModifiedDate":"2022-10-02"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"public abstract class SelectAppointmentCommandParser\u003cT extends SelectAppointmentCommand\u003e implements Parser\u003cT\u003e {","lastModifiedDate":"2022-10-02"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-02"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"     * Gets the index of the person with the appointment and the index of the appointment itself.","lastModifiedDate":"2022-10-02"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"     *","lastModifiedDate":"2022-10-02"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"     * @param args The string to be parsed.","lastModifiedDate":"2022-10-02"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"     * @return A list of 2 indexes, denoting the index of the person with the appointment and the index of the","lastModifiedDate":"2022-10-02"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"     *     appointment itself respectively.","lastModifiedDate":"2022-10-02"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"     * @throws ParseException If there is not exactly 2 indexes found or if there is any invalid indexes.","lastModifiedDate":"2022-10-02"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-02"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"    protected List\u003cIndex\u003e getPersonAndAppointmentIndexes(String args) throws ParseException {","lastModifiedDate":"2022-10-02"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"        requireNonNull(args);","lastModifiedDate":"2022-10-02"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"        List\u003cIndex\u003e indexList;","lastModifiedDate":"2022-10-02"},{"lineNumber":28,"author":{"gitId":"NicholasTYD"},"content":"        int expectedIndexCount \u003d 2;","lastModifiedDate":"2022-10-02"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"        indexList \u003d ParserUtil.parseIndexes(args, expectedIndexCount);","lastModifiedDate":"2022-10-02"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"        return indexList;","lastModifiedDate":"2022-10-02"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-02"}],"authorContributionMap":{"NicholasTYD":33}},{"path":"src/main/java/seedu/address/logic/parser/UnmarkCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-02"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-02"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import java.util.List;","lastModifiedDate":"2022-10-02"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-02"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.commands.UnmarkCommand;","lastModifiedDate":"2022-10-02"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-02"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":" * Parses input arguments and creates a new UnmarkCommand object","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"public class UnmarkCommandParser extends SelectAppointmentCommandParser\u003cUnmarkCommand\u003e {","lastModifiedDate":"2022-10-02"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"    @Override","lastModifiedDate":"2022-10-02"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"    public UnmarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-02"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"        try {","lastModifiedDate":"2022-10-02"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"            List\u003cIndex\u003e personAndAppointmentIndexes \u003d super.getPersonAndAppointmentIndexes(args);","lastModifiedDate":"2022-10-02"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"            Index indexOfPerson \u003d personAndAppointmentIndexes.get(0);","lastModifiedDate":"2022-10-02"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"            Index indexOfAppointment \u003d personAndAppointmentIndexes.get(1);","lastModifiedDate":"2022-10-02"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"            return new UnmarkCommand(indexOfPerson, indexOfAppointment);","lastModifiedDate":"2022-10-02"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2022-10-02"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnmarkCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2022-10-02"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-02"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-02"}],"authorContributionMap":{"NicholasTYD":27}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.person.UniqueAppointmentList;","lastModifiedDate":"2022-10-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.UniquePersonList;","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)","lastModifiedDate":"2018-04-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;","lastModifiedDate":"2016-08-26"},{"lineNumber":20,"author":{"gitId":"pwjj2000"},"content":"    private final UniqueAppointmentList appointments;","lastModifiedDate":"2022-10-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();","lastModifiedDate":"2016-08-26"},{"lineNumber":31,"author":{"gitId":"pwjj2000"},"content":"        appointments \u003d new UniqueAppointmentList();","lastModifiedDate":"2022-10-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public AddressBook() {}","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}","lastModifiedDate":"2018-03-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);","lastModifiedDate":"2016-10-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"pwjj2000"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2022-10-06"},{"lineNumber":55,"author":{"gitId":"pwjj2000"},"content":"        this.appointments.setAppointments(appointments);","lastModifiedDate":"2022-10-06"},{"lineNumber":56,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":57,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":58,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}.","lastModifiedDate":"2017-08-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());","lastModifiedDate":"2018-03-29"},{"lineNumber":66,"author":{"gitId":"pwjj2000"},"content":"        setAppointments(newData.getAppointmentList());","lastModifiedDate":"2022-10-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    //// person-level operations","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return persons.contains(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Adds a person to the address book.","lastModifiedDate":"2016-09-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {","lastModifiedDate":"2018-08-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        persons.add(p);","lastModifiedDate":"2018-03-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2018-01-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);","lastModifiedDate":"2018-03-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":98,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-04"},{"lineNumber":99,"author":{"gitId":"NicholasTYD"},"content":"     * Refreshes the given person {@code target}, forcing the app to visually show any updated changes back to the user.","lastModifiedDate":"2022-10-04"},{"lineNumber":100,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-04"},{"lineNumber":101,"author":{"gitId":"NicholasTYD"},"content":"    public void refreshPerson(Person target) {","lastModifiedDate":"2022-10-04"},{"lineNumber":102,"author":{"gitId":"NicholasTYD"},"content":"        persons.setPerson(target, target);","lastModifiedDate":"2022-10-04"},{"lineNumber":103,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":104,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":105,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-09"},{"lineNumber":106,"author":{"gitId":"JovonLim"},"content":"     *  Replaces the given appointment {@code target} in the list with {@code editedAppointment}.","lastModifiedDate":"2022-10-09"},{"lineNumber":107,"author":{"gitId":"JovonLim"},"content":"     *  {@code target} must exist in the address book.","lastModifiedDate":"2022-10-09"},{"lineNumber":108,"author":{"gitId":"JovonLim"},"content":"     *  The appointment {@code editedAppointment} must not be the same as another existing","lastModifiedDate":"2022-10-09"},{"lineNumber":109,"author":{"gitId":"JovonLim"},"content":"     *  appointment in the address book.","lastModifiedDate":"2022-10-09"},{"lineNumber":110,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-09"},{"lineNumber":111,"author":{"gitId":"JovonLim"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2022-10-09"},{"lineNumber":112,"author":{"gitId":"JovonLim"},"content":"        requireNonNull(editedAppointment);","lastModifiedDate":"2022-10-09"},{"lineNumber":113,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":114,"author":{"gitId":"JovonLim"},"content":"        appointments.setAppointment(target, editedAppointment);","lastModifiedDate":"2022-10-09"},{"lineNumber":115,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":116,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":117,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-09"},{"lineNumber":118,"author":{"gitId":"JovonLim"},"content":"     * Refreshes the given appointment {@code target},","lastModifiedDate":"2022-10-09"},{"lineNumber":119,"author":{"gitId":"JovonLim"},"content":"     * forcing the app to visually show any updated changes back to the user.","lastModifiedDate":"2022-10-09"},{"lineNumber":120,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-09"},{"lineNumber":121,"author":{"gitId":"JovonLim"},"content":"    public void refreshAppointment(Appointment target) {","lastModifiedDate":"2022-10-09"},{"lineNumber":122,"author":{"gitId":"JovonLim"},"content":"        appointments.setAppointment(target, target);","lastModifiedDate":"2022-10-09"},{"lineNumber":123,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":124,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":125,"author":{"gitId":"JovonLim"},"content":"    public void refreshAppointments(List\u003cAppointment\u003e appointmentList) {","lastModifiedDate":"2022-10-09"},{"lineNumber":126,"author":{"gitId":"JovonLim"},"content":"        appointments.refreshAppointments(appointmentList);","lastModifiedDate":"2022-10-09"},{"lineNumber":127,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":128,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2017-08-16"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {","lastModifiedDate":"2018-08-07"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        persons.remove(key);","lastModifiedDate":"2018-02-28"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":138,"author":{"gitId":"pwjj2000"},"content":"    public void addAppointment(Appointment a) {","lastModifiedDate":"2022-10-06"},{"lineNumber":139,"author":{"gitId":"pwjj2000"},"content":"        appointments.add(a);","lastModifiedDate":"2022-10-06"},{"lineNumber":140,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":141,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":142,"author":{"gitId":"pwjj2000"},"content":"    public void removeAppointment(Appointment key) {","lastModifiedDate":"2022-10-06"},{"lineNumber":143,"author":{"gitId":"pwjj2000"},"content":"        appointments.remove(key);","lastModifiedDate":"2022-10-06"},{"lineNumber":144,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":145,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":146,"author":{"gitId":"JovonLim"},"content":"    public void removeAppointments(List\u003cAppointment\u003e keys) {","lastModifiedDate":"2022-10-09"},{"lineNumber":147,"author":{"gitId":"JovonLim"},"content":"        appointments.removeAppointments(keys);","lastModifiedDate":"2022-10-09"},{"lineNumber":148,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":149,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":150,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList().size() + \" persons\";","lastModifiedDate":"2018-04-05"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        // TODO: refine later","lastModifiedDate":"2016-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();","lastModifiedDate":"2018-04-05"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":164,"author":{"gitId":"pwjj2000"},"content":"    @Override","lastModifiedDate":"2022-10-06"},{"lineNumber":165,"author":{"gitId":"pwjj2000"},"content":"    public ObservableList\u003cAppointment\u003e getAppointmentList() {","lastModifiedDate":"2022-10-06"},{"lineNumber":166,"author":{"gitId":"pwjj2000"},"content":"        return appointments.asUnmodifiableObservableList();","lastModifiedDate":"2022-10-06"},{"lineNumber":167,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":168,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":172,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                \u0026\u0026 persons.equals(((AddressBook) other).persons));","lastModifiedDate":"2018-08-14"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        return persons.hashCode();","lastModifiedDate":"2018-03-29"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":180,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"NicholasTYD":7,"JovonLim":29,"-":120,"pwjj2000":24}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"import java.util.List;","lastModifiedDate":"2022-10-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2018-01-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":19,"author":{"gitId":"pwjj2000"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2022-10-06"},{"lineNumber":20,"author":{"gitId":"pwjj2000"},"content":"    Predicate\u003cAppointment\u003e PREDICATE_SHOW_ALL_APPOINTMENTS \u003d unused -\u003e true;","lastModifiedDate":"2022-10-06"},{"lineNumber":21,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */","lastModifiedDate":"2016-09-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Deletes the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * The person must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);","lastModifiedDate":"2018-08-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Adds the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    void addPerson(Person person);","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":77,"author":{"gitId":"pwjj2000"},"content":"    void addAppointment(Appointment appointment);","lastModifiedDate":"2022-10-06"},{"lineNumber":78,"author":{"gitId":"pwjj2000"},"content":"    void deleteAppointment(Appointment target);","lastModifiedDate":"2022-10-06"},{"lineNumber":79,"author":{"gitId":"JovonLim"},"content":"    void deleteAppointments(List\u003cAppointment\u003e appointments);","lastModifiedDate":"2022-10-09"},{"lineNumber":80,"author":{"gitId":"JovonLim"},"content":"    void setAppointment(Appointment target, Appointment editedAppointment);","lastModifiedDate":"2022-10-09"},{"lineNumber":81,"author":{"gitId":"JovonLim"},"content":"    void refreshAppointment(Appointment target);","lastModifiedDate":"2022-10-09"},{"lineNumber":82,"author":{"gitId":"JovonLim"},"content":"    void refreshAppointments(List\u003cAppointment\u003e appointments);","lastModifiedDate":"2022-10-09"},{"lineNumber":83,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":91,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-04"},{"lineNumber":92,"author":{"gitId":"NicholasTYD"},"content":"     * Refreshes the given person {@code target}, forcing the app to visually show any updated changes back to the user.","lastModifiedDate":"2022-10-04"},{"lineNumber":93,"author":{"gitId":"NicholasTYD"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2022-10-04"},{"lineNumber":94,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-04"},{"lineNumber":95,"author":{"gitId":"NicholasTYD"},"content":"    void refreshPerson(Person target);","lastModifiedDate":"2022-10-04"},{"lineNumber":96,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */","lastModifiedDate":"2017-09-01"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2018-01-10"},{"lineNumber":105,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":106,"author":{"gitId":"pwjj2000"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();","lastModifiedDate":"2022-10-06"},{"lineNumber":107,"author":{"gitId":"pwjj2000"},"content":"    void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate);","lastModifiedDate":"2022-10-06"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"NicholasTYD":6,"JovonLim":5,"-":87,"pwjj2000":10}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"import java.util.List;","lastModifiedDate":"2022-10-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":15,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2018-01-10"},{"lineNumber":27,"author":{"gitId":"pwjj2000"},"content":"    private final FilteredList\u003cAppointment\u003e filteredAppointments;","lastModifiedDate":"2022-10-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs.","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);","lastModifiedDate":"2017-05-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);","lastModifiedDate":"2016-12-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":40,"author":{"gitId":"pwjj2000"},"content":"        filteredAppointments \u003d new FilteredList\u003c\u003e(this.addressBook.getAppointmentList());","lastModifiedDate":"2022-10-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2016-09-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2018-08-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);","lastModifiedDate":"2019-01-25"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":111,"author":{"gitId":"pwjj2000"},"content":"    @Override","lastModifiedDate":"2022-10-06"},{"lineNumber":112,"author":{"gitId":"pwjj2000"},"content":"    public void deleteAppointment(Appointment target) {","lastModifiedDate":"2022-10-06"},{"lineNumber":113,"author":{"gitId":"pwjj2000"},"content":"        addressBook.removeAppointment(target);","lastModifiedDate":"2022-10-06"},{"lineNumber":114,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":115,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":116,"author":{"gitId":"JovonLim"},"content":"    @Override","lastModifiedDate":"2022-10-09"},{"lineNumber":117,"author":{"gitId":"JovonLim"},"content":"    public void deleteAppointments(List\u003cAppointment\u003e appointmentList) {","lastModifiedDate":"2022-10-09"},{"lineNumber":118,"author":{"gitId":"JovonLim"},"content":"        addressBook.removeAppointments(appointmentList);","lastModifiedDate":"2022-10-09"},{"lineNumber":119,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":120,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":121,"author":{"gitId":"JovonLim"},"content":"    @Override","lastModifiedDate":"2022-10-09"},{"lineNumber":122,"author":{"gitId":"JovonLim"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2022-10-09"},{"lineNumber":123,"author":{"gitId":"JovonLim"},"content":"        requireAllNonNull(target, editedAppointment);","lastModifiedDate":"2022-10-09"},{"lineNumber":124,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":125,"author":{"gitId":"JovonLim"},"content":"        addressBook.setAppointment(target, editedAppointment);","lastModifiedDate":"2022-10-09"},{"lineNumber":126,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":127,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":128,"author":{"gitId":"JovonLim"},"content":"    @Override","lastModifiedDate":"2022-10-09"},{"lineNumber":129,"author":{"gitId":"JovonLim"},"content":"    public void refreshAppointment(Appointment target) {","lastModifiedDate":"2022-10-09"},{"lineNumber":130,"author":{"gitId":"JovonLim"},"content":"        requireNonNull(target);","lastModifiedDate":"2022-10-09"},{"lineNumber":131,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":132,"author":{"gitId":"JovonLim"},"content":"        addressBook.refreshAppointment(target);","lastModifiedDate":"2022-10-09"},{"lineNumber":133,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":134,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":135,"author":{"gitId":"JovonLim"},"content":"    @Override","lastModifiedDate":"2022-10-09"},{"lineNumber":136,"author":{"gitId":"JovonLim"},"content":"    public void refreshAppointments(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2022-10-09"},{"lineNumber":137,"author":{"gitId":"JovonLim"},"content":"        requireNonNull(appointments);","lastModifiedDate":"2022-10-09"},{"lineNumber":138,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":139,"author":{"gitId":"JovonLim"},"content":"        addressBook.refreshAppointments(appointments);","lastModifiedDate":"2022-10-09"},{"lineNumber":140,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":141,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":142,"author":{"gitId":"pwjj2000"},"content":"    @Override","lastModifiedDate":"2022-10-06"},{"lineNumber":143,"author":{"gitId":"pwjj2000"},"content":"    public void addAppointment(Appointment appointment) {","lastModifiedDate":"2022-10-06"},{"lineNumber":144,"author":{"gitId":"pwjj2000"},"content":"        addressBook.addAppointment(appointment);","lastModifiedDate":"2022-10-06"},{"lineNumber":145,"author":{"gitId":"pwjj2000"},"content":"        updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENTS);","lastModifiedDate":"2022-10-06"},{"lineNumber":146,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":147,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);","lastModifiedDate":"2019-01-25"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":155,"author":{"gitId":"NicholasTYD"},"content":"    @Override","lastModifiedDate":"2022-10-04"},{"lineNumber":156,"author":{"gitId":"NicholasTYD"},"content":"    public void refreshPerson(Person target) {","lastModifiedDate":"2022-10-04"},{"lineNumber":157,"author":{"gitId":"NicholasTYD"},"content":"        requireNonNull(target);","lastModifiedDate":"2022-10-04"},{"lineNumber":158,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":159,"author":{"gitId":"NicholasTYD"},"content":"        addressBook.refreshPerson(target);","lastModifiedDate":"2022-10-04"},{"lineNumber":160,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":161,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2018-01-10"},{"lineNumber":166,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":167,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        return filteredPersons;","lastModifiedDate":"2018-12-09"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":179,"author":{"gitId":"pwjj2000"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Appointment List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2022-10-06"},{"lineNumber":180,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":181,"author":{"gitId":"pwjj2000"},"content":"    /**","lastModifiedDate":"2022-10-06"},{"lineNumber":182,"author":{"gitId":"pwjj2000"},"content":"     * Returns an unmodifiable view of the list of {@code Appointment} backed by the internal list of","lastModifiedDate":"2022-10-06"},{"lineNumber":183,"author":{"gitId":"pwjj2000"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2022-10-06"},{"lineNumber":184,"author":{"gitId":"pwjj2000"},"content":"     */","lastModifiedDate":"2022-10-06"},{"lineNumber":185,"author":{"gitId":"pwjj2000"},"content":"    @Override","lastModifiedDate":"2022-10-06"},{"lineNumber":186,"author":{"gitId":"pwjj2000"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2022-10-06"},{"lineNumber":187,"author":{"gitId":"pwjj2000"},"content":"        return filteredAppointments;","lastModifiedDate":"2022-10-06"},{"lineNumber":188,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":189,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":190,"author":{"gitId":"pwjj2000"},"content":"    @Override","lastModifiedDate":"2022-10-06"},{"lineNumber":191,"author":{"gitId":"pwjj2000"},"content":"    public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {","lastModifiedDate":"2022-10-06"},{"lineNumber":192,"author":{"gitId":"pwjj2000"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2022-10-06"},{"lineNumber":193,"author":{"gitId":"pwjj2000"},"content":"        filteredAppointments.setPredicate(predicate);","lastModifiedDate":"2022-10-06"},{"lineNumber":194,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":195,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)","lastModifiedDate":"2019-01-25"},{"lineNumber":211,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)","lastModifiedDate":"2018-11-27"},{"lineNumber":212,"author":{"gitId":"JovonLim"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons)","lastModifiedDate":"2022-10-09"},{"lineNumber":213,"author":{"gitId":"JovonLim"},"content":"                \u0026\u0026 filteredAppointments.equals(other.filteredAppointments);","lastModifiedDate":"2022-10-09"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":216,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"NicholasTYD":7,"JovonLim":29,"-":149,"pwjj2000":31}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {","lastModifiedDate":"2019-01-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list.","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":19,"author":{"gitId":"pwjj2000"},"content":"    ObservableList\u003cAppointment\u003e getAppointmentList();","lastModifiedDate":"2022-10-06"},{"lineNumber":20,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"-":17,"pwjj2000":4}},{"path":"src/main/java/seedu/address/model/person/Address.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s address in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Address {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"WingKei67"},"content":"    /**","lastModifiedDate":"2022-10-04"},{"lineNumber":23,"author":{"gitId":"WingKei67"},"content":"     * Constructs an {@code Address}.","lastModifiedDate":"2022-10-04"},{"lineNumber":24,"author":{"gitId":"WingKei67"},"content":"     *","lastModifiedDate":"2022-10-04"},{"lineNumber":25,"author":{"gitId":"WingKei67"},"content":"     */","lastModifiedDate":"2022-10-04"},{"lineNumber":26,"author":{"gitId":"WingKei67"},"content":"    public Address() {","lastModifiedDate":"2022-10-04"},{"lineNumber":27,"author":{"gitId":"WingKei67"},"content":"        value \u003d \"\";","lastModifiedDate":"2022-10-04"},{"lineNumber":28,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @param address A valid address.","lastModifiedDate":"2017-05-30"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public Address(String address) {","lastModifiedDate":"2017-05-30"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        value \u003d address;","lastModifiedDate":"2018-08-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static boolean isValidAddress(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                || (other instanceof Address // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Address) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"WingKei67":7,"-":57}},{"path":"src/main/java/seedu/address/model/person/Appointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.model.person;","lastModifiedDate":"2022-10-01"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":3,"author":{"gitId":"pwjj2000"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-08"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-10-01"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-01"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-10-01"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"import java.time.format.DateTimeFormatterBuilder;","lastModifiedDate":"2022-10-01"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-10-01"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"/**","lastModifiedDate":"2022-10-01"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":" * Represents the patient\u0027s appointments\u0027 details.","lastModifiedDate":"2022-10-01"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":" */","lastModifiedDate":"2022-10-01"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"public class Appointment {","lastModifiedDate":"2022-10-01"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"    public static final String REASON_MESSAGE_CONSTRAINTS \u003d \"Reason should not be empty\";","lastModifiedDate":"2022-10-01"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"    public static final String DATE_MESSAGE_CONSTRAINTS \u003d \"Date should contain YYYY-MM-DD and HH:MM values\";","lastModifiedDate":"2022-10-01"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"    public static final DateTimeFormatter DATE_FORMATTER \u003d","lastModifiedDate":"2022-10-01"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"            new DateTimeFormatterBuilder().appendOptional(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"))","lastModifiedDate":"2022-10-01"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"                    .appendOptional(DateTimeFormatter.ofPattern(\"HH:mm yyyy-MM-dd\")).toFormatter();","lastModifiedDate":"2022-10-01"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"    public static final DateTimeFormatter STORAGE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2022-10-01"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":"    private final String reason;","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"    private final LocalDateTime dateTime;","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"    private boolean isMarked;","lastModifiedDate":"2022-10-02"},{"lineNumber":27,"author":{"gitId":"pwjj2000"},"content":"    private Person patient;","lastModifiedDate":"2022-10-06"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"    private final DateTimeFormatter stringFormatter \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\");","lastModifiedDate":"2022-10-01"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"     * Creates an appointment object with the given reason, dateTime string, and status.","lastModifiedDate":"2022-10-08"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"     *","lastModifiedDate":"2022-10-01"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"     * @param reason The given reason for appointment.","lastModifiedDate":"2022-10-01"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"     * @param dateTime The given time to book the appointment.","lastModifiedDate":"2022-10-01"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"     * @param isMarked Status of the appointment.","lastModifiedDate":"2022-10-02"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"    public Appointment(String reason, String dateTime, boolean isMarked) {","lastModifiedDate":"2022-10-02"},{"lineNumber":40,"author":{"gitId":"pwjj2000"},"content":"        requireNonNull(reason);","lastModifiedDate":"2022-10-08"},{"lineNumber":41,"author":{"gitId":"pwjj2000"},"content":"        requireNonNull(dateTime);","lastModifiedDate":"2022-10-08"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"        checkArgument(isValidReason(reason), REASON_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-01"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"        checkArgument(isValidDateTime(dateTime), DATE_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-01"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"        this.reason \u003d reason;","lastModifiedDate":"2022-10-01"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"        String str \u003d String.join(\" \", dateTime.split(\"\\\\s+\", 2));","lastModifiedDate":"2022-10-01"},{"lineNumber":46,"author":{"gitId":"JovonLim"},"content":"        this.dateTime \u003d LocalDateTime.parse(str, DATE_FORMATTER);","lastModifiedDate":"2022-10-01"},{"lineNumber":47,"author":{"gitId":"NicholasTYD"},"content":"        this.isMarked \u003d isMarked;","lastModifiedDate":"2022-10-02"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-08"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"     * Creates an appointment object with the given reason, LocalDateTime dateTime, and status.","lastModifiedDate":"2022-10-08"},{"lineNumber":52,"author":{"gitId":"JovonLim"},"content":"     *","lastModifiedDate":"2022-10-08"},{"lineNumber":53,"author":{"gitId":"JovonLim"},"content":"     * @param reason The given reason for appointment.","lastModifiedDate":"2022-10-08"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"     * @param dateTime The given time to book the appointment.","lastModifiedDate":"2022-10-08"},{"lineNumber":55,"author":{"gitId":"JovonLim"},"content":"     * @param isMarked Status of the appointment.","lastModifiedDate":"2022-10-08"},{"lineNumber":56,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-08"},{"lineNumber":57,"author":{"gitId":"JovonLim"},"content":"    public Appointment(String reason, LocalDateTime dateTime, boolean isMarked) {","lastModifiedDate":"2022-10-08"},{"lineNumber":58,"author":{"gitId":"JovonLim"},"content":"        this.reason \u003d reason;","lastModifiedDate":"2022-10-08"},{"lineNumber":59,"author":{"gitId":"JovonLim"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2022-10-08"},{"lineNumber":60,"author":{"gitId":"JovonLim"},"content":"        this.isMarked \u003d isMarked;","lastModifiedDate":"2022-10-08"},{"lineNumber":61,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":62,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":63,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":64,"author":{"gitId":"JovonLim"},"content":"     * Checks whether the given appointment has the same time.","lastModifiedDate":"2022-10-01"},{"lineNumber":65,"author":{"gitId":"JovonLim"},"content":"     *","lastModifiedDate":"2022-10-01"},{"lineNumber":66,"author":{"gitId":"JovonLim"},"content":"     * @param other The given appointment.","lastModifiedDate":"2022-10-01"},{"lineNumber":67,"author":{"gitId":"JovonLim"},"content":"     * @return The result of the equals test.","lastModifiedDate":"2022-10-01"},{"lineNumber":68,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":69,"author":{"gitId":"JovonLim"},"content":"    public boolean isSameTime(Appointment other) {","lastModifiedDate":"2022-10-01"},{"lineNumber":70,"author":{"gitId":"JovonLim"},"content":"        return other.dateTime.equals(dateTime);","lastModifiedDate":"2022-10-01"},{"lineNumber":71,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":72,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":73,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":74,"author":{"gitId":"JovonLim"},"content":"     * Checks whether the given string is a valid reason.","lastModifiedDate":"2022-10-01"},{"lineNumber":75,"author":{"gitId":"JovonLim"},"content":"     *","lastModifiedDate":"2022-10-01"},{"lineNumber":76,"author":{"gitId":"JovonLim"},"content":"     * @param test The string to test.","lastModifiedDate":"2022-10-01"},{"lineNumber":77,"author":{"gitId":"JovonLim"},"content":"     * @return The result of the equals test.","lastModifiedDate":"2022-10-01"},{"lineNumber":78,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":79,"author":{"gitId":"JovonLim"},"content":"    public static boolean isValidReason(String test) {","lastModifiedDate":"2022-10-01"},{"lineNumber":80,"author":{"gitId":"JovonLim"},"content":"        return !test.equals(\"\");","lastModifiedDate":"2022-10-01"},{"lineNumber":81,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":82,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":83,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":84,"author":{"gitId":"JovonLim"},"content":"     * Checks whether the given string is a valid DateTime.","lastModifiedDate":"2022-10-01"},{"lineNumber":85,"author":{"gitId":"JovonLim"},"content":"     *","lastModifiedDate":"2022-10-01"},{"lineNumber":86,"author":{"gitId":"JovonLim"},"content":"     * @param test The string to test.","lastModifiedDate":"2022-10-01"},{"lineNumber":87,"author":{"gitId":"JovonLim"},"content":"     * @return The result of the LocalDateTime parse test.","lastModifiedDate":"2022-10-01"},{"lineNumber":88,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":89,"author":{"gitId":"JovonLim"},"content":"    public static boolean isValidDateTime(String test) {","lastModifiedDate":"2022-10-01"},{"lineNumber":90,"author":{"gitId":"JovonLim"},"content":"        try {","lastModifiedDate":"2022-10-01"},{"lineNumber":91,"author":{"gitId":"JovonLim"},"content":"            String str \u003d String.join(\" \", test.split(\"\\\\s+\", 2));","lastModifiedDate":"2022-10-01"},{"lineNumber":92,"author":{"gitId":"JovonLim"},"content":"            LocalDateTime.parse(str, DATE_FORMATTER);","lastModifiedDate":"2022-10-01"},{"lineNumber":93,"author":{"gitId":"JovonLim"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-10-01"},{"lineNumber":94,"author":{"gitId":"JovonLim"},"content":"            return false;","lastModifiedDate":"2022-10-01"},{"lineNumber":95,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":96,"author":{"gitId":"JovonLim"},"content":"        return true;","lastModifiedDate":"2022-10-01"},{"lineNumber":97,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":98,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":99,"author":{"gitId":"JovonLim"},"content":"    public LocalDateTime getDateTime() {","lastModifiedDate":"2022-10-03"},{"lineNumber":100,"author":{"gitId":"JovonLim"},"content":"        return dateTime;","lastModifiedDate":"2022-10-03"},{"lineNumber":101,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":102,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":103,"author":{"gitId":"pwjj2000"},"content":"    public String getFormattedDateTime() {","lastModifiedDate":"2022-10-06"},{"lineNumber":104,"author":{"gitId":"pwjj2000"},"content":"        return dateTime.format(stringFormatter);","lastModifiedDate":"2022-10-06"},{"lineNumber":105,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":106,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":107,"author":{"gitId":"JovonLim"},"content":"    public String getReason() {","lastModifiedDate":"2022-10-03"},{"lineNumber":108,"author":{"gitId":"JovonLim"},"content":"        return reason;","lastModifiedDate":"2022-10-03"},{"lineNumber":109,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":110,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":111,"author":{"gitId":"NicholasTYD"},"content":"    public boolean isMarked() {","lastModifiedDate":"2022-10-02"},{"lineNumber":112,"author":{"gitId":"NicholasTYD"},"content":"        return isMarked;","lastModifiedDate":"2022-10-02"},{"lineNumber":113,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":114,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":115,"author":{"gitId":"NicholasTYD"},"content":"    public void mark() {","lastModifiedDate":"2022-10-02"},{"lineNumber":116,"author":{"gitId":"NicholasTYD"},"content":"        this.isMarked \u003d true;","lastModifiedDate":"2022-10-02"},{"lineNumber":117,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":118,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":119,"author":{"gitId":"NicholasTYD"},"content":"    public void unmark() {","lastModifiedDate":"2022-10-02"},{"lineNumber":120,"author":{"gitId":"NicholasTYD"},"content":"        this.isMarked \u003d false;","lastModifiedDate":"2022-10-02"},{"lineNumber":121,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":122,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":123,"author":{"gitId":"pwjj2000"},"content":"    public void setPatient(Person patient) {","lastModifiedDate":"2022-10-06"},{"lineNumber":124,"author":{"gitId":"pwjj2000"},"content":"        this.patient \u003d patient;","lastModifiedDate":"2022-10-06"},{"lineNumber":125,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":126,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":127,"author":{"gitId":"pwjj2000"},"content":"    public String getPatientName() {","lastModifiedDate":"2022-10-06"},{"lineNumber":128,"author":{"gitId":"pwjj2000"},"content":"        return this.patient.getName().fullName;","lastModifiedDate":"2022-10-06"},{"lineNumber":129,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":130,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":131,"author":{"gitId":"pwjj2000"},"content":"    public String getStatus() {","lastModifiedDate":"2022-10-06"},{"lineNumber":132,"author":{"gitId":"pwjj2000"},"content":"        return \"[\" + getStateIcon() + \"]\";","lastModifiedDate":"2022-10-06"},{"lineNumber":133,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":134,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":135,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":136,"author":{"gitId":"JovonLim"},"content":"    @Override","lastModifiedDate":"2022-10-01"},{"lineNumber":137,"author":{"gitId":"JovonLim"},"content":"    public String toString() {","lastModifiedDate":"2022-10-01"},{"lineNumber":138,"author":{"gitId":"pwjj2000"},"content":"        return getStatus() + \" \" + getFormattedDateTime() + \" for \" + reason;","lastModifiedDate":"2022-10-06"},{"lineNumber":139,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":140,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":141,"author":{"gitId":"NicholasTYD"},"content":"    private String getStateIcon() {","lastModifiedDate":"2022-10-02"},{"lineNumber":142,"author":{"gitId":"NicholasTYD"},"content":"        String markedIcon \u003d \"✅\";","lastModifiedDate":"2022-10-02"},{"lineNumber":143,"author":{"gitId":"NicholasTYD"},"content":"        String unmarkedIcon \u003d \"❌\";","lastModifiedDate":"2022-10-02"},{"lineNumber":144,"author":{"gitId":"NicholasTYD"},"content":"        return isMarked ? markedIcon : unmarkedIcon;","lastModifiedDate":"2022-10-02"},{"lineNumber":145,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":146,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":147,"author":{"gitId":"JovonLim"},"content":"    @Override","lastModifiedDate":"2022-10-01"},{"lineNumber":148,"author":{"gitId":"JovonLim"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-01"},{"lineNumber":149,"author":{"gitId":"JovonLim"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-01"},{"lineNumber":150,"author":{"gitId":"JovonLim"},"content":"            return true;","lastModifiedDate":"2022-10-01"},{"lineNumber":151,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":152,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":153,"author":{"gitId":"JovonLim"},"content":"        if (!(other instanceof Appointment)) {","lastModifiedDate":"2022-10-01"},{"lineNumber":154,"author":{"gitId":"JovonLim"},"content":"            return false;","lastModifiedDate":"2022-10-01"},{"lineNumber":155,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":156,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":157,"author":{"gitId":"JovonLim"},"content":"        Appointment otherAppointment \u003d (Appointment) other;","lastModifiedDate":"2022-10-01"},{"lineNumber":158,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":159,"author":{"gitId":"pwjj2000"},"content":"        return otherAppointment.patient.getName().equals(patient.getName())","lastModifiedDate":"2022-10-06"},{"lineNumber":160,"author":{"gitId":"pwjj2000"},"content":"                \u0026\u0026 otherAppointment.reason.equals(reason)","lastModifiedDate":"2022-10-06"},{"lineNumber":161,"author":{"gitId":"NicholasTYD"},"content":"                \u0026\u0026 otherAppointment.dateTime.equals(dateTime)","lastModifiedDate":"2022-10-03"},{"lineNumber":162,"author":{"gitId":"NicholasTYD"},"content":"                \u0026\u0026 (otherAppointment.isMarked \u003d\u003d isMarked);","lastModifiedDate":"2022-10-03"},{"lineNumber":163,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":164,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":165,"author":{"gitId":"pwjj2000"},"content":"    /**","lastModifiedDate":"2022-10-06"},{"lineNumber":166,"author":{"gitId":"pwjj2000"},"content":"     * Returns true if both appointments have the same reason, date, time and status.","lastModifiedDate":"2022-10-06"},{"lineNumber":167,"author":{"gitId":"pwjj2000"},"content":"     * This defines a weaker notion of equality between two appointments.","lastModifiedDate":"2022-10-06"},{"lineNumber":168,"author":{"gitId":"pwjj2000"},"content":"     */","lastModifiedDate":"2022-10-06"},{"lineNumber":169,"author":{"gitId":"pwjj2000"},"content":"    public boolean isSameAppointment(Appointment appointment) {","lastModifiedDate":"2022-10-06"},{"lineNumber":170,"author":{"gitId":"pwjj2000"},"content":"        return appointment.reason.equals(reason)","lastModifiedDate":"2022-10-06"},{"lineNumber":171,"author":{"gitId":"pwjj2000"},"content":"                \u0026\u0026 appointment.dateTime.equals(dateTime)","lastModifiedDate":"2022-10-06"},{"lineNumber":172,"author":{"gitId":"pwjj2000"},"content":"                \u0026\u0026 (appointment.isMarked \u003d\u003d isMarked);","lastModifiedDate":"2022-10-06"},{"lineNumber":173,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":174,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-01"}],"authorContributionMap":{"NicholasTYD":24,"JovonLim":115,"pwjj2000":35}},{"path":"src/main/java/seedu/address/model/person/Email.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s email in the address book.","lastModifiedDate":"2018-02-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Email {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private static final String SPECIAL_CHARACTERS \u003d \"+_.-\";","lastModifiedDate":"2021-07-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \"","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"and adhere to the following constraints:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \"","lastModifiedDate":"2018-02-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \"). The local-part may not start or end with any special \"","lastModifiedDate":"2021-07-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"characters.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. The domain name is made up of domain labels \"","lastModifiedDate":"2021-07-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"separated by periods.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"The domain name must:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"    - end with a domain label at least 2 characters long\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"    - have each domain label start and end with alphanumeric characters\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"    - have each domain label consist of alphanumeric characters, separated only by hyphens, if any.\";","lastModifiedDate":"2021-07-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // alphanumeric and special characters","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String ALPHANUMERIC_NO_UNDERSCORE \u003d \"[^\\\\W_]+\"; // alphanumeric characters except underscore","lastModifiedDate":"2021-07-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^\" + ALPHANUMERIC_NO_UNDERSCORE + \"([\" + SPECIAL_CHARACTERS + \"]\"","lastModifiedDate":"2021-07-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_PART_REGEX \u003d ALPHANUMERIC_NO_UNDERSCORE","lastModifiedDate":"2021-07-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + \"(-\" + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_LAST_PART_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"){2,}$\"; // At least two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"\\\\.)*\" + DOMAIN_LAST_PART_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\" + DOMAIN_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"WingKei67"},"content":"    /**","lastModifiedDate":"2022-10-04"},{"lineNumber":37,"author":{"gitId":"WingKei67"},"content":"     * Constructs an {@code Email}.","lastModifiedDate":"2022-10-04"},{"lineNumber":38,"author":{"gitId":"WingKei67"},"content":"     *","lastModifiedDate":"2022-10-04"},{"lineNumber":39,"author":{"gitId":"WingKei67"},"content":"     */","lastModifiedDate":"2022-10-04"},{"lineNumber":40,"author":{"gitId":"WingKei67"},"content":"    public Email() {","lastModifiedDate":"2022-10-04"},{"lineNumber":41,"author":{"gitId":"WingKei67"},"content":"        value \u003d \"\";","lastModifiedDate":"2022-10-04"},{"lineNumber":42,"author":{"gitId":"WingKei67"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":43,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Constructs an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * @param email A valid email address.","lastModifiedDate":"2017-05-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public Email(String email) {","lastModifiedDate":"2017-05-30"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        value \u003d email;","lastModifiedDate":"2018-08-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Returns if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static boolean isValidEmail(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                || (other instanceof Email // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Email) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"WingKei67":8,"-":71}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"import java.util.List;","lastModifiedDate":"2022-10-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"    private final List\u003cAppointment\u003e listOfAppointments;","lastModifiedDate":"2022-10-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"    public Person(Name name, Phone phone, Email email, Address address, List\u003cAppointment\u003e listOfAppointments,","lastModifiedDate":"2022-10-01"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"                  Set\u003cTag\u003e tags) {","lastModifiedDate":"2022-10-01"},{"lineNumber":33,"author":{"gitId":"WingKei67"},"content":"        requireAllNonNull(name, phone, email, address, listOfAppointments);","lastModifiedDate":"2022-10-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"        this.listOfAppointments \u003d listOfAppointments;","lastModifiedDate":"2022-10-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":58,"author":{"gitId":"JovonLim"},"content":"    public List\u003cAppointment\u003e getAppointments() {","lastModifiedDate":"2022-10-01"},{"lineNumber":59,"author":{"gitId":"JovonLim"},"content":"        return listOfAppointments;","lastModifiedDate":"2022-10-01"},{"lineNumber":60,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":61,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":62,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":63,"author":{"gitId":"guanzhou03"},"content":"    public Appointment cancelAppointment(int apptIndex) {","lastModifiedDate":"2022-10-01"},{"lineNumber":64,"author":{"gitId":"guanzhou03"},"content":"        return listOfAppointments.remove(apptIndex);","lastModifiedDate":"2022-10-01"},{"lineNumber":65,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":66,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name.","lastModifiedDate":"2020-12-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());","lastModifiedDate":"2020-12-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":88,"author":{"gitId":"JovonLim"},"content":"    public String getAppointmentsString() {","lastModifiedDate":"2022-10-01"},{"lineNumber":89,"author":{"gitId":"JovonLim"},"content":"        StringBuilder str \u003d new StringBuilder(\"Appointments:\\n\");","lastModifiedDate":"2022-10-01"},{"lineNumber":90,"author":{"gitId":"JovonLim"},"content":"        for (int i \u003d 0; i \u003c listOfAppointments.size(); i++) {","lastModifiedDate":"2022-10-01"},{"lineNumber":91,"author":{"gitId":"JovonLim"},"content":"            str.append(i + 1).append(\": \").append(listOfAppointments.get(i)).append(\"\\n\");","lastModifiedDate":"2022-10-01"},{"lineNumber":92,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":93,"author":{"gitId":"JovonLim"},"content":"        return str.toString();","lastModifiedDate":"2022-10-01"},{"lineNumber":94,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":95,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())","lastModifiedDate":"2018-08-14"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())","lastModifiedDate":"2018-08-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())","lastModifiedDate":"2018-08-14"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())","lastModifiedDate":"2018-08-14"},{"lineNumber":115,"author":{"gitId":"JovonLim"},"content":"                \u0026\u0026 otherPerson.getAppointments().equals(getAppointments())","lastModifiedDate":"2022-10-01"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags());","lastModifiedDate":"2018-08-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);","lastModifiedDate":"2016-08-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        builder.append(getName())","lastModifiedDate":"2018-01-10"},{"lineNumber":129,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                .append(getPhone())","lastModifiedDate":"2018-01-10"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                .append(getEmail())","lastModifiedDate":"2018-01-10"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":134,"author":{"gitId":"JovonLim"},"content":"                .append(getAddress())","lastModifiedDate":"2022-10-01"},{"lineNumber":135,"author":{"gitId":"JovonLim"},"content":"                .append(\"; Appointments: \")","lastModifiedDate":"2022-10-01"},{"lineNumber":136,"author":{"gitId":"JovonLim"},"content":"                .append(getAppointments());","lastModifiedDate":"2022-10-01"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();","lastModifiedDate":"2020-12-11"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {","lastModifiedDate":"2020-12-11"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");","lastModifiedDate":"2020-12-11"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);","lastModifiedDate":"2020-12-11"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-11"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"JovonLim":22,"WingKei67":1,"-":119,"guanzhou03":4}},{"path":"src/main/java/seedu/address/model/person/UniqueAppointmentList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pwjj2000"},"content":"package seedu.address.model.person;","lastModifiedDate":"2022-10-06"},{"lineNumber":2,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":3,"author":{"gitId":"pwjj2000"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-06"},{"lineNumber":4,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2022-10-06"},{"lineNumber":5,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":6,"author":{"gitId":"pwjj2000"},"content":"import java.util.Comparator;","lastModifiedDate":"2022-10-06"},{"lineNumber":7,"author":{"gitId":"pwjj2000"},"content":"import java.util.Iterator;","lastModifiedDate":"2022-10-06"},{"lineNumber":8,"author":{"gitId":"pwjj2000"},"content":"import java.util.List;","lastModifiedDate":"2022-10-06"},{"lineNumber":9,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":10,"author":{"gitId":"pwjj2000"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2022-10-06"},{"lineNumber":11,"author":{"gitId":"pwjj2000"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-10-06"},{"lineNumber":12,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.person.exceptions.AppointmentNotFoundException;","lastModifiedDate":"2022-10-06"},{"lineNumber":13,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.person.exceptions.DuplicateAppointmentException;","lastModifiedDate":"2022-10-06"},{"lineNumber":14,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":15,"author":{"gitId":"pwjj2000"},"content":"/**","lastModifiedDate":"2022-10-06"},{"lineNumber":16,"author":{"gitId":"pwjj2000"},"content":" * A list of appointments that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2022-10-06"},{"lineNumber":17,"author":{"gitId":"pwjj2000"},"content":" * An appointment is considered unique by comparing using {@code Appointment#equals(Object)}.","lastModifiedDate":"2022-10-06"},{"lineNumber":18,"author":{"gitId":"pwjj2000"},"content":" *","lastModifiedDate":"2022-10-06"},{"lineNumber":19,"author":{"gitId":"pwjj2000"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2022-10-06"},{"lineNumber":20,"author":{"gitId":"pwjj2000"},"content":" *","lastModifiedDate":"2022-10-06"},{"lineNumber":21,"author":{"gitId":"pwjj2000"},"content":" */","lastModifiedDate":"2022-10-06"},{"lineNumber":22,"author":{"gitId":"pwjj2000"},"content":"public class UniqueAppointmentList implements Iterable\u003cAppointment\u003e {","lastModifiedDate":"2022-10-06"},{"lineNumber":23,"author":{"gitId":"pwjj2000"},"content":"    private final ObservableList\u003cAppointment\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2022-10-06"},{"lineNumber":24,"author":{"gitId":"pwjj2000"},"content":"    private final ObservableList\u003cAppointment\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2022-10-06"},{"lineNumber":25,"author":{"gitId":"pwjj2000"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2022-10-06"},{"lineNumber":26,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":27,"author":{"gitId":"pwjj2000"},"content":"    /**","lastModifiedDate":"2022-10-06"},{"lineNumber":28,"author":{"gitId":"pwjj2000"},"content":"     * Returns true if the list contains an equivalent appointment as the given argument.","lastModifiedDate":"2022-10-06"},{"lineNumber":29,"author":{"gitId":"pwjj2000"},"content":"     */","lastModifiedDate":"2022-10-06"},{"lineNumber":30,"author":{"gitId":"pwjj2000"},"content":"    public boolean contains(Appointment toCheck) {","lastModifiedDate":"2022-10-06"},{"lineNumber":31,"author":{"gitId":"pwjj2000"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2022-10-06"},{"lineNumber":32,"author":{"gitId":"pwjj2000"},"content":"        return internalList.stream().anyMatch(toCheck::equals);","lastModifiedDate":"2022-10-06"},{"lineNumber":33,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":34,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":35,"author":{"gitId":"pwjj2000"},"content":"    /**","lastModifiedDate":"2022-10-06"},{"lineNumber":36,"author":{"gitId":"pwjj2000"},"content":"     * Adds an appointment to the list.","lastModifiedDate":"2022-10-06"},{"lineNumber":37,"author":{"gitId":"pwjj2000"},"content":"     * The appointment must not already exist in the list.","lastModifiedDate":"2022-10-06"},{"lineNumber":38,"author":{"gitId":"pwjj2000"},"content":"     */","lastModifiedDate":"2022-10-06"},{"lineNumber":39,"author":{"gitId":"pwjj2000"},"content":"    public void add(Appointment toAdd) {","lastModifiedDate":"2022-10-06"},{"lineNumber":40,"author":{"gitId":"pwjj2000"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2022-10-06"},{"lineNumber":41,"author":{"gitId":"pwjj2000"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2022-10-06"},{"lineNumber":42,"author":{"gitId":"pwjj2000"},"content":"            throw new DuplicateAppointmentException();","lastModifiedDate":"2022-10-06"},{"lineNumber":43,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":44,"author":{"gitId":"pwjj2000"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2022-10-06"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"        sortList();","lastModifiedDate":"2022-10-09"},{"lineNumber":46,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":47,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":48,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":49,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":50,"author":{"gitId":"pwjj2000"},"content":"    /**","lastModifiedDate":"2022-10-06"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"     * Removes the equivalent appointment from the list.","lastModifiedDate":"2022-10-09"},{"lineNumber":52,"author":{"gitId":"JovonLim"},"content":"     * The appointment must exist in the list.","lastModifiedDate":"2022-10-09"},{"lineNumber":53,"author":{"gitId":"pwjj2000"},"content":"     */","lastModifiedDate":"2022-10-06"},{"lineNumber":54,"author":{"gitId":"pwjj2000"},"content":"    public void remove(Appointment toRemove) {","lastModifiedDate":"2022-10-06"},{"lineNumber":55,"author":{"gitId":"pwjj2000"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2022-10-06"},{"lineNumber":56,"author":{"gitId":"pwjj2000"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2022-10-06"},{"lineNumber":57,"author":{"gitId":"pwjj2000"},"content":"            throw new AppointmentNotFoundException();","lastModifiedDate":"2022-10-06"},{"lineNumber":58,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":59,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":60,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":61,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-09"},{"lineNumber":62,"author":{"gitId":"JovonLim"},"content":"     * Removes all the equivalent appointments from the list.","lastModifiedDate":"2022-10-09"},{"lineNumber":63,"author":{"gitId":"JovonLim"},"content":"     * The appointments must exist in the list.","lastModifiedDate":"2022-10-09"},{"lineNumber":64,"author":{"gitId":"JovonLim"},"content":"     *","lastModifiedDate":"2022-10-09"},{"lineNumber":65,"author":{"gitId":"JovonLim"},"content":"     * @param toRemove List of appointments to remove.","lastModifiedDate":"2022-10-09"},{"lineNumber":66,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-09"},{"lineNumber":67,"author":{"gitId":"JovonLim"},"content":"    public void removeAppointments(List\u003cAppointment\u003e toRemove) {","lastModifiedDate":"2022-10-09"},{"lineNumber":68,"author":{"gitId":"JovonLim"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2022-10-09"},{"lineNumber":69,"author":{"gitId":"JovonLim"},"content":"        for (Appointment appointment : toRemove) {","lastModifiedDate":"2022-10-09"},{"lineNumber":70,"author":{"gitId":"JovonLim"},"content":"            if (!internalList.remove(appointment)) {","lastModifiedDate":"2022-10-09"},{"lineNumber":71,"author":{"gitId":"JovonLim"},"content":"                throw new AppointmentNotFoundException();","lastModifiedDate":"2022-10-09"},{"lineNumber":72,"author":{"gitId":"JovonLim"},"content":"            }","lastModifiedDate":"2022-10-09"},{"lineNumber":73,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-09"},{"lineNumber":74,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":75,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":76,"author":{"gitId":"pwjj2000"},"content":"    public void setAppointments(UniqueAppointmentList replacement) {","lastModifiedDate":"2022-10-06"},{"lineNumber":77,"author":{"gitId":"pwjj2000"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2022-10-06"},{"lineNumber":78,"author":{"gitId":"pwjj2000"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2022-10-06"},{"lineNumber":79,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":80,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":81,"author":{"gitId":"pwjj2000"},"content":"    /**","lastModifiedDate":"2022-10-06"},{"lineNumber":82,"author":{"gitId":"JovonLim"},"content":"     * Replaces the contents of this list with {@code appointments}.","lastModifiedDate":"2022-10-09"},{"lineNumber":83,"author":{"gitId":"JovonLim"},"content":"     * {@code appointments} must not contain duplicate appointments.","lastModifiedDate":"2022-10-09"},{"lineNumber":84,"author":{"gitId":"pwjj2000"},"content":"     */","lastModifiedDate":"2022-10-06"},{"lineNumber":85,"author":{"gitId":"pwjj2000"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2022-10-06"},{"lineNumber":86,"author":{"gitId":"pwjj2000"},"content":"        requireAllNonNull(appointments);","lastModifiedDate":"2022-10-06"},{"lineNumber":87,"author":{"gitId":"pwjj2000"},"content":"        if (!appointmentsAreUnique(appointments)) {","lastModifiedDate":"2022-10-06"},{"lineNumber":88,"author":{"gitId":"pwjj2000"},"content":"            throw new DuplicateAppointmentException();","lastModifiedDate":"2022-10-06"},{"lineNumber":89,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":90,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":91,"author":{"gitId":"pwjj2000"},"content":"        internalList.setAll(appointments);","lastModifiedDate":"2022-10-06"},{"lineNumber":92,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":93,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":94,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-09"},{"lineNumber":95,"author":{"gitId":"JovonLim"},"content":"     * Replaces the appointment {@code target} in the list with {@code editedAppointment}.","lastModifiedDate":"2022-10-09"},{"lineNumber":96,"author":{"gitId":"JovonLim"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2022-10-09"},{"lineNumber":97,"author":{"gitId":"JovonLim"},"content":"     * The appointment of {@code editedAppointment} must not be the same as another existing appointment","lastModifiedDate":"2022-10-09"},{"lineNumber":98,"author":{"gitId":"JovonLim"},"content":"     * in the list.","lastModifiedDate":"2022-10-09"},{"lineNumber":99,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-09"},{"lineNumber":100,"author":{"gitId":"JovonLim"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2022-10-09"},{"lineNumber":101,"author":{"gitId":"JovonLim"},"content":"        requireAllNonNull(target, editedAppointment);","lastModifiedDate":"2022-10-09"},{"lineNumber":102,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":103,"author":{"gitId":"JovonLim"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2022-10-09"},{"lineNumber":104,"author":{"gitId":"JovonLim"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2022-10-09"},{"lineNumber":105,"author":{"gitId":"JovonLim"},"content":"            throw new AppointmentNotFoundException();","lastModifiedDate":"2022-10-09"},{"lineNumber":106,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-09"},{"lineNumber":107,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":108,"author":{"gitId":"JovonLim"},"content":"        if (!target.isSameAppointment(editedAppointment) \u0026\u0026 contains(editedAppointment)) {","lastModifiedDate":"2022-10-09"},{"lineNumber":109,"author":{"gitId":"JovonLim"},"content":"            throw new DuplicateAppointmentException();","lastModifiedDate":"2022-10-09"},{"lineNumber":110,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-09"},{"lineNumber":111,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":112,"author":{"gitId":"JovonLim"},"content":"        internalList.set(index, editedAppointment);","lastModifiedDate":"2022-10-09"},{"lineNumber":113,"author":{"gitId":"JovonLim"},"content":"        sortList();","lastModifiedDate":"2022-10-09"},{"lineNumber":114,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":115,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":116,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-09"},{"lineNumber":117,"author":{"gitId":"JovonLim"},"content":"     * Refreshes the given appointments {@code appointments},","lastModifiedDate":"2022-10-09"},{"lineNumber":118,"author":{"gitId":"JovonLim"},"content":"     * forcing the app to visually show any updated changes back to the user.","lastModifiedDate":"2022-10-09"},{"lineNumber":119,"author":{"gitId":"JovonLim"},"content":"     *","lastModifiedDate":"2022-10-09"},{"lineNumber":120,"author":{"gitId":"JovonLim"},"content":"     * @param appointments The given list of appointments.","lastModifiedDate":"2022-10-09"},{"lineNumber":121,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-09"},{"lineNumber":122,"author":{"gitId":"JovonLim"},"content":"    public void refreshAppointments(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2022-10-09"},{"lineNumber":123,"author":{"gitId":"JovonLim"},"content":"        for (Appointment appointment : appointments) {","lastModifiedDate":"2022-10-09"},{"lineNumber":124,"author":{"gitId":"JovonLim"},"content":"            setAppointment(appointment, appointment);","lastModifiedDate":"2022-10-09"},{"lineNumber":125,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-09"},{"lineNumber":126,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":127,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":128,"author":{"gitId":"JovonLim"},"content":"    private void sortList() {","lastModifiedDate":"2022-10-09"},{"lineNumber":129,"author":{"gitId":"JovonLim"},"content":"        internalList.sort(Comparator.comparing(Appointment::getDateTime));","lastModifiedDate":"2022-10-09"},{"lineNumber":130,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":131,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":132,"author":{"gitId":"pwjj2000"},"content":"    /**","lastModifiedDate":"2022-10-06"},{"lineNumber":133,"author":{"gitId":"pwjj2000"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2022-10-06"},{"lineNumber":134,"author":{"gitId":"pwjj2000"},"content":"     */","lastModifiedDate":"2022-10-06"},{"lineNumber":135,"author":{"gitId":"pwjj2000"},"content":"    public ObservableList\u003cAppointment\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2022-10-06"},{"lineNumber":136,"author":{"gitId":"pwjj2000"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2022-10-06"},{"lineNumber":137,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":138,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":139,"author":{"gitId":"pwjj2000"},"content":"    @Override","lastModifiedDate":"2022-10-06"},{"lineNumber":140,"author":{"gitId":"pwjj2000"},"content":"    public Iterator\u003cAppointment\u003e iterator() {","lastModifiedDate":"2022-10-06"},{"lineNumber":141,"author":{"gitId":"pwjj2000"},"content":"        return internalList.iterator();","lastModifiedDate":"2022-10-06"},{"lineNumber":142,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":143,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":144,"author":{"gitId":"pwjj2000"},"content":"    @Override","lastModifiedDate":"2022-10-06"},{"lineNumber":145,"author":{"gitId":"pwjj2000"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-06"},{"lineNumber":146,"author":{"gitId":"pwjj2000"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-06"},{"lineNumber":147,"author":{"gitId":"pwjj2000"},"content":"                || (other instanceof UniqueAppointmentList // instanceof handles nulls","lastModifiedDate":"2022-10-06"},{"lineNumber":148,"author":{"gitId":"pwjj2000"},"content":"                \u0026\u0026 internalList.equals(((UniqueAppointmentList) other).internalList));","lastModifiedDate":"2022-10-06"},{"lineNumber":149,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":150,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":151,"author":{"gitId":"pwjj2000"},"content":"    @Override","lastModifiedDate":"2022-10-06"},{"lineNumber":152,"author":{"gitId":"pwjj2000"},"content":"    public int hashCode() {","lastModifiedDate":"2022-10-06"},{"lineNumber":153,"author":{"gitId":"pwjj2000"},"content":"        return internalList.hashCode();","lastModifiedDate":"2022-10-06"},{"lineNumber":154,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":155,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":156,"author":{"gitId":"pwjj2000"},"content":"    /**","lastModifiedDate":"2022-10-06"},{"lineNumber":157,"author":{"gitId":"pwjj2000"},"content":"     * Returns true if {@code appointments} contains only unique appointments.","lastModifiedDate":"2022-10-06"},{"lineNumber":158,"author":{"gitId":"pwjj2000"},"content":"     */","lastModifiedDate":"2022-10-06"},{"lineNumber":159,"author":{"gitId":"pwjj2000"},"content":"    private boolean appointmentsAreUnique(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2022-10-06"},{"lineNumber":160,"author":{"gitId":"pwjj2000"},"content":"        for (int i \u003d 0; i \u003c appointments.size() - 1; i++) {","lastModifiedDate":"2022-10-06"},{"lineNumber":161,"author":{"gitId":"pwjj2000"},"content":"            for (int j \u003d i + 1; j \u003c appointments.size(); j++) {","lastModifiedDate":"2022-10-06"},{"lineNumber":162,"author":{"gitId":"pwjj2000"},"content":"                if (appointments.get(i).equals(appointments.get(j))) {","lastModifiedDate":"2022-10-06"},{"lineNumber":163,"author":{"gitId":"pwjj2000"},"content":"                    return false;","lastModifiedDate":"2022-10-06"},{"lineNumber":164,"author":{"gitId":"pwjj2000"},"content":"                }","lastModifiedDate":"2022-10-06"},{"lineNumber":165,"author":{"gitId":"pwjj2000"},"content":"            }","lastModifiedDate":"2022-10-06"},{"lineNumber":166,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":167,"author":{"gitId":"pwjj2000"},"content":"        return true;","lastModifiedDate":"2022-10-06"},{"lineNumber":168,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":169,"author":{"gitId":"pwjj2000"},"content":"}","lastModifiedDate":"2022-10-06"}],"authorContributionMap":{"JovonLim":58,"pwjj2000":111}},{"path":"src/main/java/seedu/address/model/person/exceptions/AppointmentNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pwjj2000"},"content":"package seedu.address.model.person.exceptions;","lastModifiedDate":"2022-10-06"},{"lineNumber":2,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":3,"author":{"gitId":"pwjj2000"},"content":"/**","lastModifiedDate":"2022-10-06"},{"lineNumber":4,"author":{"gitId":"pwjj2000"},"content":" * Signals that the operation is unable to find the specified person.","lastModifiedDate":"2022-10-06"},{"lineNumber":5,"author":{"gitId":"pwjj2000"},"content":" */","lastModifiedDate":"2022-10-06"},{"lineNumber":6,"author":{"gitId":"pwjj2000"},"content":"public class AppointmentNotFoundException extends RuntimeException {","lastModifiedDate":"2022-10-06"},{"lineNumber":7,"author":{"gitId":"pwjj2000"},"content":"}","lastModifiedDate":"2022-10-06"}],"authorContributionMap":{"pwjj2000":7}},{"path":"src/main/java/seedu/address/model/person/exceptions/DuplicateAppointmentException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pwjj2000"},"content":"package seedu.address.model.person.exceptions;","lastModifiedDate":"2022-10-06"},{"lineNumber":2,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":3,"author":{"gitId":"pwjj2000"},"content":"/**","lastModifiedDate":"2022-10-06"},{"lineNumber":4,"author":{"gitId":"pwjj2000"},"content":" * Signals that the operation will result in duplicate Appointments","lastModifiedDate":"2022-10-06"},{"lineNumber":5,"author":{"gitId":"pwjj2000"},"content":" * (Appointments are considered duplicates if they have the same date, time, reason, patient).","lastModifiedDate":"2022-10-06"},{"lineNumber":6,"author":{"gitId":"pwjj2000"},"content":" */","lastModifiedDate":"2022-10-06"},{"lineNumber":7,"author":{"gitId":"pwjj2000"},"content":"public class DuplicateAppointmentException extends RuntimeException {","lastModifiedDate":"2022-10-06"},{"lineNumber":8,"author":{"gitId":"pwjj2000"},"content":"    public DuplicateAppointmentException() {","lastModifiedDate":"2022-10-06"},{"lineNumber":9,"author":{"gitId":"pwjj2000"},"content":"        super(\"Operation would result in duplicate appointments\");","lastModifiedDate":"2022-10-06"},{"lineNumber":10,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":11,"author":{"gitId":"pwjj2000"},"content":"}","lastModifiedDate":"2022-10-06"}],"authorContributionMap":{"pwjj2000":11}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;","lastModifiedDate":"2016-12-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-01"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2016-12-20"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2016-12-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2016-12-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2016-12-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {","lastModifiedDate":"2016-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return new Person[] {","lastModifiedDate":"2016-12-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new ArrayList\u003c\u003e(),","lastModifiedDate":"2022-10-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                getTagSet(\"friends\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new ArrayList\u003c\u003e(),","lastModifiedDate":"2022-10-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\", \"friends\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new ArrayList\u003c\u003e(),","lastModifiedDate":"2022-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                getTagSet(\"neighbours\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new ArrayList\u003c\u003e(),","lastModifiedDate":"2022-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                getTagSet(\"family\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new ArrayList\u003c\u003e(),","lastModifiedDate":"2022-10-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                getTagSet(\"classmates\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new ArrayList\u003c\u003e(),","lastModifiedDate":"2022-10-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\"))","lastModifiedDate":"2017-03-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {","lastModifiedDate":"2016-12-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();","lastModifiedDate":"2017-04-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {","lastModifiedDate":"2016-12-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);","lastModifiedDate":"2017-04-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {","lastModifiedDate":"2017-05-30"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                .map(Tag::new)","lastModifiedDate":"2018-01-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"JovonLim":7,"-":54}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedAppointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.storage;","lastModifiedDate":"2022-10-01"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2022-10-01"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2022-10-01"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2022-10-01"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"/**","lastModifiedDate":"2022-10-01"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":" * Jackson-friendly version of {@link Appointment}.","lastModifiedDate":"2022-10-01"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":" */","lastModifiedDate":"2022-10-01"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"public class JsonAdaptedAppointment {","lastModifiedDate":"2022-10-01"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"    private final String reason;","lastModifiedDate":"2022-10-01"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"    private final String dateTime;","lastModifiedDate":"2022-10-01"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"    private final boolean isMarked;","lastModifiedDate":"2022-10-02"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"     * Converts a given {@code Appointment} into this class for Jackson use.","lastModifiedDate":"2022-10-01"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"    @JsonCreator","lastModifiedDate":"2022-10-01"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"    public JsonAdaptedAppointment(@JsonProperty(\"reason\") String reason,","lastModifiedDate":"2022-10-02"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"                                  @JsonProperty(\"dateTime\") String dateTime,","lastModifiedDate":"2022-10-02"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"                                  @JsonProperty(\"isMarked\") boolean isMarked) {","lastModifiedDate":"2022-10-02"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"        this.reason \u003d reason;","lastModifiedDate":"2022-10-01"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2022-10-01"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"        this.isMarked \u003d isMarked;","lastModifiedDate":"2022-10-02"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"     * Converts a given {@code Appointment} into this class for Jackson use.","lastModifiedDate":"2022-10-01"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"    public JsonAdaptedAppointment(Appointment source) {","lastModifiedDate":"2022-10-01"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"        this.reason \u003d source.getReason();","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"        this.dateTime \u003d source.getDateTime().format(Appointment.STORAGE_FORMATTER);","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"        this.isMarked \u003d source.isMarked();","lastModifiedDate":"2022-10-02"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"     * Converts this Jackson-friendly adapted appointment object into the model\u0027s {@code Appointment} object.","lastModifiedDate":"2022-10-01"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"     *","lastModifiedDate":"2022-10-01"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted appointment.","lastModifiedDate":"2022-10-01"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"    public Appointment toModelType() throws IllegalValueException {","lastModifiedDate":"2022-10-01"},{"lineNumber":46,"author":{"gitId":"JovonLim"},"content":"        if (!Appointment.isValidReason(reason)) {","lastModifiedDate":"2022-10-01"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"            throw new IllegalValueException(Appointment.REASON_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-01"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"        if (!Appointment.isValidDateTime(dateTime)) {","lastModifiedDate":"2022-10-01"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"            throw new IllegalValueException(Appointment.DATE_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-01"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":52,"author":{"gitId":"NicholasTYD"},"content":"        return new Appointment(reason, dateTime, isMarked);","lastModifiedDate":"2022-10-02"},{"lineNumber":53,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-01"}],"authorContributionMap":{"NicholasTYD":7,"JovonLim":47}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {","lastModifiedDate":"2018-12-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final String address;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"    private final List\u003cJsonAdaptedAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"            @JsonProperty(\"appointments\") List\u003cJsonAdaptedAppointment\u003e appointments,","lastModifiedDate":"2022-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"        if (appointments !\u003d null) {","lastModifiedDate":"2022-10-01"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"            this.appointments.addAll(appointments);","lastModifiedDate":"2022-10-01"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"JovonLim"},"content":"        appointments.addAll(source.getAppointments().stream()","lastModifiedDate":"2022-10-01"},{"lineNumber":64,"author":{"gitId":"JovonLim"},"content":"                .map(JsonAdaptedAppointment::new)","lastModifiedDate":"2022-10-01"},{"lineNumber":65,"author":{"gitId":"JovonLim"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2022-10-01"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"JovonLim"},"content":"        final List\u003cAppointment\u003e modelAppointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-01"},{"lineNumber":83,"author":{"gitId":"JovonLim"},"content":"        for (JsonAdaptedAppointment appointment : appointments) {","lastModifiedDate":"2022-10-01"},{"lineNumber":84,"author":{"gitId":"JovonLim"},"content":"            modelAppointments.add(appointment.toModelType());","lastModifiedDate":"2022-10-01"},{"lineNumber":85,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":86,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2018-08-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":120,"author":{"gitId":"pwjj2000"},"content":"        Person person \u003d new Person(modelName, modelPhone, modelEmail, modelAddress, modelAppointments, modelTags);","lastModifiedDate":"2022-10-06"},{"lineNumber":121,"author":{"gitId":"pwjj2000"},"content":"        for (Appointment appointment : modelAppointments) {","lastModifiedDate":"2022-10-06"},{"lineNumber":122,"author":{"gitId":"pwjj2000"},"content":"            appointment.setPatient(person);","lastModifiedDate":"2022-10-06"},{"lineNumber":123,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":124,"author":{"gitId":"pwjj2000"},"content":"        return person;","lastModifiedDate":"2022-10-06"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"JovonLim":14,"-":108,"pwjj2000":5}},{"path":"src/main/java/seedu/address/storage/JsonSerializableAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to JSON format.","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@JsonRootName(value \u003d \"addressbook\")","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"class JsonSerializableAddressBook {","lastModifiedDate":"2018-12-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonSerializableAddressBook} with the given persons.","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.persons.addAll(persons);","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}.","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Converts this address book into the model\u0027s {@code AddressBook} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            Person person \u003d jsonAdaptedPerson.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            if (addressBook.hasPerson(person)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"pwjj2000"},"content":"            List\u003cAppointment\u003e appointments \u003d person.getAppointments();","lastModifiedDate":"2022-10-06"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            addressBook.addPerson(person);","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"pwjj2000"},"content":"            for (Appointment appointment : appointments) {","lastModifiedDate":"2022-10-06"},{"lineNumber":59,"author":{"gitId":"pwjj2000"},"content":"                appointment.setPatient(person);","lastModifiedDate":"2022-10-06"},{"lineNumber":60,"author":{"gitId":"pwjj2000"},"content":"                addressBook.addAppointment(appointment);","lastModifiedDate":"2022-10-06"},{"lineNumber":61,"author":{"gitId":"pwjj2000"},"content":"            }","lastModifiedDate":"2022-10-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"-":60,"pwjj2000":6}},{"path":"src/main/java/seedu/address/ui/AppointmentCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pwjj2000"},"content":"package seedu.address.ui;","lastModifiedDate":"2022-10-06"},{"lineNumber":2,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":3,"author":{"gitId":"pwjj2000"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-10-06"},{"lineNumber":4,"author":{"gitId":"pwjj2000"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2022-10-06"},{"lineNumber":5,"author":{"gitId":"pwjj2000"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2022-10-06"},{"lineNumber":6,"author":{"gitId":"pwjj2000"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2022-10-06"},{"lineNumber":7,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-06"},{"lineNumber":8,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":9,"author":{"gitId":"pwjj2000"},"content":"/**","lastModifiedDate":"2022-10-06"},{"lineNumber":10,"author":{"gitId":"pwjj2000"},"content":" * A UI component that displays information of an {@code Appointment}.","lastModifiedDate":"2022-10-06"},{"lineNumber":11,"author":{"gitId":"pwjj2000"},"content":" */","lastModifiedDate":"2022-10-06"},{"lineNumber":12,"author":{"gitId":"pwjj2000"},"content":"public class AppointmentCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2022-10-06"},{"lineNumber":13,"author":{"gitId":"pwjj2000"},"content":"    private static final String FXML \u003d \"AppointmentListCard.fxml\";","lastModifiedDate":"2022-10-06"},{"lineNumber":14,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":15,"author":{"gitId":"pwjj2000"},"content":"    public final Appointment appointment;","lastModifiedDate":"2022-10-06"},{"lineNumber":16,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":17,"author":{"gitId":"pwjj2000"},"content":"    @FXML","lastModifiedDate":"2022-10-06"},{"lineNumber":18,"author":{"gitId":"pwjj2000"},"content":"    private HBox cardPane;","lastModifiedDate":"2022-10-06"},{"lineNumber":19,"author":{"gitId":"pwjj2000"},"content":"    @FXML","lastModifiedDate":"2022-10-06"},{"lineNumber":20,"author":{"gitId":"pwjj2000"},"content":"    private Label id;","lastModifiedDate":"2022-10-06"},{"lineNumber":21,"author":{"gitId":"pwjj2000"},"content":"    @FXML","lastModifiedDate":"2022-10-06"},{"lineNumber":22,"author":{"gitId":"pwjj2000"},"content":"    private Label patientName;","lastModifiedDate":"2022-10-06"},{"lineNumber":23,"author":{"gitId":"pwjj2000"},"content":"    @FXML","lastModifiedDate":"2022-10-06"},{"lineNumber":24,"author":{"gitId":"pwjj2000"},"content":"    private Label reason;","lastModifiedDate":"2022-10-06"},{"lineNumber":25,"author":{"gitId":"pwjj2000"},"content":"    @FXML","lastModifiedDate":"2022-10-06"},{"lineNumber":26,"author":{"gitId":"pwjj2000"},"content":"    private Label dateTime;","lastModifiedDate":"2022-10-06"},{"lineNumber":27,"author":{"gitId":"pwjj2000"},"content":"    @FXML","lastModifiedDate":"2022-10-06"},{"lineNumber":28,"author":{"gitId":"pwjj2000"},"content":"    private Label status;","lastModifiedDate":"2022-10-06"},{"lineNumber":29,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":30,"author":{"gitId":"pwjj2000"},"content":"    /**","lastModifiedDate":"2022-10-06"},{"lineNumber":31,"author":{"gitId":"pwjj2000"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2022-10-06"},{"lineNumber":32,"author":{"gitId":"pwjj2000"},"content":"     */","lastModifiedDate":"2022-10-06"},{"lineNumber":33,"author":{"gitId":"pwjj2000"},"content":"    public AppointmentCard(Appointment appointment, int displayedIndex) {","lastModifiedDate":"2022-10-06"},{"lineNumber":34,"author":{"gitId":"pwjj2000"},"content":"        super(FXML);","lastModifiedDate":"2022-10-06"},{"lineNumber":35,"author":{"gitId":"pwjj2000"},"content":"        this.appointment \u003d appointment;","lastModifiedDate":"2022-10-06"},{"lineNumber":36,"author":{"gitId":"pwjj2000"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2022-10-06"},{"lineNumber":37,"author":{"gitId":"pwjj2000"},"content":"        patientName.setText(appointment.getPatientName());","lastModifiedDate":"2022-10-06"},{"lineNumber":38,"author":{"gitId":"pwjj2000"},"content":"        reason.setText(appointment.getReason());","lastModifiedDate":"2022-10-06"},{"lineNumber":39,"author":{"gitId":"pwjj2000"},"content":"        dateTime.setText(appointment.getFormattedDateTime());","lastModifiedDate":"2022-10-06"},{"lineNumber":40,"author":{"gitId":"pwjj2000"},"content":"        status.setText(appointment.getStatus());","lastModifiedDate":"2022-10-06"},{"lineNumber":41,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":42,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":43,"author":{"gitId":"pwjj2000"},"content":"    @Override","lastModifiedDate":"2022-10-06"},{"lineNumber":44,"author":{"gitId":"pwjj2000"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-06"},{"lineNumber":45,"author":{"gitId":"pwjj2000"},"content":"        // short circuit if same object","lastModifiedDate":"2022-10-06"},{"lineNumber":46,"author":{"gitId":"pwjj2000"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-06"},{"lineNumber":47,"author":{"gitId":"pwjj2000"},"content":"            return true;","lastModifiedDate":"2022-10-06"},{"lineNumber":48,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":49,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":50,"author":{"gitId":"pwjj2000"},"content":"        // instanceof handles nulls","lastModifiedDate":"2022-10-06"},{"lineNumber":51,"author":{"gitId":"pwjj2000"},"content":"        if (!(other instanceof AppointmentCard)) {","lastModifiedDate":"2022-10-06"},{"lineNumber":52,"author":{"gitId":"pwjj2000"},"content":"            return false;","lastModifiedDate":"2022-10-06"},{"lineNumber":53,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":54,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":55,"author":{"gitId":"pwjj2000"},"content":"        // state check","lastModifiedDate":"2022-10-06"},{"lineNumber":56,"author":{"gitId":"pwjj2000"},"content":"        AppointmentCard card \u003d (AppointmentCard) other;","lastModifiedDate":"2022-10-06"},{"lineNumber":57,"author":{"gitId":"pwjj2000"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2022-10-06"},{"lineNumber":58,"author":{"gitId":"pwjj2000"},"content":"                \u0026\u0026 appointment.equals(card.appointment);","lastModifiedDate":"2022-10-06"},{"lineNumber":59,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":60,"author":{"gitId":"pwjj2000"},"content":"}","lastModifiedDate":"2022-10-06"}],"authorContributionMap":{"pwjj2000":60}},{"path":"src/main/java/seedu/address/ui/AppointmentListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pwjj2000"},"content":"package seedu.address.ui;","lastModifiedDate":"2022-10-06"},{"lineNumber":2,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":3,"author":{"gitId":"pwjj2000"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2022-10-06"},{"lineNumber":4,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":5,"author":{"gitId":"pwjj2000"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2022-10-06"},{"lineNumber":6,"author":{"gitId":"pwjj2000"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2022-10-06"},{"lineNumber":7,"author":{"gitId":"pwjj2000"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2022-10-06"},{"lineNumber":8,"author":{"gitId":"pwjj2000"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2022-10-06"},{"lineNumber":9,"author":{"gitId":"pwjj2000"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2022-10-06"},{"lineNumber":10,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2022-10-06"},{"lineNumber":11,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-06"},{"lineNumber":12,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":13,"author":{"gitId":"pwjj2000"},"content":"/**","lastModifiedDate":"2022-10-06"},{"lineNumber":14,"author":{"gitId":"pwjj2000"},"content":" * Panel containing the list of appointments.","lastModifiedDate":"2022-10-06"},{"lineNumber":15,"author":{"gitId":"pwjj2000"},"content":" */","lastModifiedDate":"2022-10-06"},{"lineNumber":16,"author":{"gitId":"pwjj2000"},"content":"public class AppointmentListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2022-10-06"},{"lineNumber":17,"author":{"gitId":"pwjj2000"},"content":"    private static final String FXML \u003d \"AppointmentListPanel.fxml\";","lastModifiedDate":"2022-10-06"},{"lineNumber":18,"author":{"gitId":"pwjj2000"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(AppointmentListPanel.class);","lastModifiedDate":"2022-10-06"},{"lineNumber":19,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":20,"author":{"gitId":"pwjj2000"},"content":"    @FXML","lastModifiedDate":"2022-10-06"},{"lineNumber":21,"author":{"gitId":"pwjj2000"},"content":"    private ListView\u003cAppointment\u003e appointmentListView;","lastModifiedDate":"2022-10-06"},{"lineNumber":22,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":23,"author":{"gitId":"pwjj2000"},"content":"    /**","lastModifiedDate":"2022-10-06"},{"lineNumber":24,"author":{"gitId":"pwjj2000"},"content":"     * Creates a {@code AppointmentListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2022-10-06"},{"lineNumber":25,"author":{"gitId":"pwjj2000"},"content":"     */","lastModifiedDate":"2022-10-06"},{"lineNumber":26,"author":{"gitId":"pwjj2000"},"content":"    public AppointmentListPanel(ObservableList\u003cAppointment\u003e appointmentList) {","lastModifiedDate":"2022-10-06"},{"lineNumber":27,"author":{"gitId":"pwjj2000"},"content":"        super(FXML);","lastModifiedDate":"2022-10-06"},{"lineNumber":28,"author":{"gitId":"pwjj2000"},"content":"        appointmentListView.setItems(appointmentList);","lastModifiedDate":"2022-10-06"},{"lineNumber":29,"author":{"gitId":"pwjj2000"},"content":"        appointmentListView.setCellFactory(listView -\u003e new AppointmentListPanel.AppointmentListViewCell());","lastModifiedDate":"2022-10-06"},{"lineNumber":30,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":31,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":32,"author":{"gitId":"pwjj2000"},"content":"    /**","lastModifiedDate":"2022-10-06"},{"lineNumber":33,"author":{"gitId":"pwjj2000"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Appointment} using a {@code AppointmentCard}.","lastModifiedDate":"2022-10-06"},{"lineNumber":34,"author":{"gitId":"pwjj2000"},"content":"     */","lastModifiedDate":"2022-10-06"},{"lineNumber":35,"author":{"gitId":"pwjj2000"},"content":"    class AppointmentListViewCell extends ListCell\u003cAppointment\u003e {","lastModifiedDate":"2022-10-06"},{"lineNumber":36,"author":{"gitId":"pwjj2000"},"content":"        @Override","lastModifiedDate":"2022-10-06"},{"lineNumber":37,"author":{"gitId":"pwjj2000"},"content":"        protected void updateItem(Appointment appointment, boolean empty) {","lastModifiedDate":"2022-10-06"},{"lineNumber":38,"author":{"gitId":"pwjj2000"},"content":"            super.updateItem(appointment, empty);","lastModifiedDate":"2022-10-06"},{"lineNumber":39,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":40,"author":{"gitId":"pwjj2000"},"content":"            if (empty || appointment \u003d\u003d null) {","lastModifiedDate":"2022-10-06"},{"lineNumber":41,"author":{"gitId":"pwjj2000"},"content":"                setGraphic(null);","lastModifiedDate":"2022-10-06"},{"lineNumber":42,"author":{"gitId":"pwjj2000"},"content":"                setText(null);","lastModifiedDate":"2022-10-06"},{"lineNumber":43,"author":{"gitId":"pwjj2000"},"content":"            } else {","lastModifiedDate":"2022-10-06"},{"lineNumber":44,"author":{"gitId":"pwjj2000"},"content":"                setGraphic(new AppointmentCard(appointment, getIndex() + 1).getRoot());","lastModifiedDate":"2022-10-06"},{"lineNumber":45,"author":{"gitId":"pwjj2000"},"content":"            }","lastModifiedDate":"2022-10-06"},{"lineNumber":46,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":47,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":48,"author":{"gitId":"pwjj2000"},"content":"}","lastModifiedDate":"2022-10-06"}],"authorContributionMap":{"pwjj2000":48}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2016-09-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-06-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"pwjj2000"},"content":"    private AppointmentListPanel appointmentListPanel;","lastModifiedDate":"2022-10-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"pwjj2000"},"content":"    @FXML","lastModifiedDate":"2022-10-06"},{"lineNumber":49,"author":{"gitId":"pwjj2000"},"content":"    private StackPane appointmentListPanelPlaceholder;","lastModifiedDate":"2022-10-06"},{"lineNumber":50,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":120,"author":{"gitId":"pwjj2000"},"content":"        appointmentListPanel \u003d new AppointmentListPanel(logic.getFilteredAppointmentList());","lastModifiedDate":"2022-10-06"},{"lineNumber":121,"author":{"gitId":"pwjj2000"},"content":"        appointmentListPanelPlaceholder.getChildren().add(appointmentListPanel.getRoot());","lastModifiedDate":"2022-10-06"},{"lineNumber":122,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());","lastModifiedDate":"2019-01-25"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2019-01-25"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {","lastModifiedDate":"2016-08-25"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        return personListPanel;","lastModifiedDate":"2018-08-14"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-25"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":178,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":179,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":180,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)","lastModifiedDate":"2018-12-09"},{"lineNumber":181,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":189,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":193,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":203,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"-":196,"pwjj2000":7}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;","lastModifiedDate":"2019-01-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-01-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"pwjj2000"},"content":" * A UI component that displays information of a {@code Person}.","lastModifiedDate":"2022-10-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";","lastModifiedDate":"2016-09-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public final Person person;","lastModifiedDate":"2018-01-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label phone;","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label address;","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label email;","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"    @FXML","lastModifiedDate":"2022-10-01"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"    private Label appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private FlowPane tags;","lastModifiedDate":"2016-12-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2020-05-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2018-01-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.person \u003d person;","lastModifiedDate":"2017-07-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);","lastModifiedDate":"2017-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":58,"author":{"gitId":"WingKei67"},"content":"        address.setText(person.getAddress().value);","lastModifiedDate":"2022-10-04"},{"lineNumber":59,"author":{"gitId":"JovonLim"},"content":"        appointment.setText(person.getAppointmentsString());","lastModifiedDate":"2022-10-01"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        person.getTags().stream()","lastModifiedDate":"2019-01-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2019-01-02"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));","lastModifiedDate":"2019-01-02"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-07-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-07-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-07-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-07-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-07-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {","lastModifiedDate":"2017-07-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-07-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-07-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;","lastModifiedDate":"2017-07-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2017-07-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);","lastModifiedDate":"2017-07-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"JovonLim":5,"WingKei67":1,"-":75,"pwjj2000":1}},{"path":"src/main/resources/view/AppointmentListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pwjj2000"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":2,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":3,"author":{"gitId":"pwjj2000"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":4,"author":{"gitId":"pwjj2000"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":5,"author":{"gitId":"pwjj2000"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":6,"author":{"gitId":"pwjj2000"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":7,"author":{"gitId":"pwjj2000"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":8,"author":{"gitId":"pwjj2000"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":9,"author":{"gitId":"pwjj2000"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":10,"author":{"gitId":"pwjj2000"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":11,"author":{"gitId":"pwjj2000"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":12,"author":{"gitId":"pwjj2000"},"content":"\u003c?import javafx.scene.text.TextFlow?\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":13,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":14,"author":{"gitId":"pwjj2000"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/null\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":15,"author":{"gitId":"pwjj2000"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":16,"author":{"gitId":"pwjj2000"},"content":"        \u003ccolumnConstraints\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":17,"author":{"gitId":"pwjj2000"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":18,"author":{"gitId":"pwjj2000"},"content":"        \u003c/columnConstraints\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":19,"author":{"gitId":"pwjj2000"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":20,"author":{"gitId":"pwjj2000"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":21,"author":{"gitId":"pwjj2000"},"content":"                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":22,"author":{"gitId":"pwjj2000"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":23,"author":{"gitId":"pwjj2000"},"content":"            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":24,"author":{"gitId":"pwjj2000"},"content":"                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":25,"author":{"gitId":"pwjj2000"},"content":"                    \u003cminWidth\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":26,"author":{"gitId":"pwjj2000"},"content":"                        \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":27,"author":{"gitId":"pwjj2000"},"content":"                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":28,"author":{"gitId":"pwjj2000"},"content":"                    \u003c/minWidth\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":29,"author":{"gitId":"pwjj2000"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":30,"author":{"gitId":"pwjj2000"},"content":"                \u003cLabel fx:id\u003d\"patientName\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":31,"author":{"gitId":"pwjj2000"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":32,"author":{"gitId":"pwjj2000"},"content":"            \u003cLabel fx:id\u003d\"reason\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$reason\" /\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":33,"author":{"gitId":"pwjj2000"},"content":"            \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$status\" /\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":34,"author":{"gitId":"pwjj2000"},"content":"            \u003cLabel fx:id\u003d\"dateTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":35,"author":{"gitId":"pwjj2000"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":36,"author":{"gitId":"pwjj2000"},"content":"        \u003crowConstraints\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":37,"author":{"gitId":"pwjj2000"},"content":"            \u003cRowConstraints /\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":38,"author":{"gitId":"pwjj2000"},"content":"        \u003c/rowConstraints\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":39,"author":{"gitId":"pwjj2000"},"content":"    \u003c/GridPane\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":40,"author":{"gitId":"pwjj2000"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2022-10-06"}],"authorContributionMap":{"pwjj2000":40}},{"path":"src/main/resources/view/AppointmentListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pwjj2000"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":2,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":3,"author":{"gitId":"pwjj2000"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":4,"author":{"gitId":"pwjj2000"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":5,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":6,"author":{"gitId":"pwjj2000"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":7,"author":{"gitId":"pwjj2000"},"content":"    \u003cListView fx:id\u003d\"appointmentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":8,"author":{"gitId":"pwjj2000"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2022-10-06"}],"authorContributionMap":{"pwjj2000":8}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"pwjj2000"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2017-11-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e","lastModifiedDate":"2018-12-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e","lastModifiedDate":"2016-08-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2017-06-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\"","lastModifiedDate":"2017-05-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":50,"author":{"gitId":"pwjj2000"},"content":"        \u003cSplitPane dividerPositions\u003d\"0.5\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"          \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2019-01-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2017-06-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"          \u003c/VBox\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":58,"author":{"gitId":"pwjj2000"},"content":"          \u003cVBox fx:id\u003d\"appointmentList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":59,"author":{"gitId":"pwjj2000"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":60,"author":{"gitId":"pwjj2000"},"content":"              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":61,"author":{"gitId":"pwjj2000"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":62,"author":{"gitId":"pwjj2000"},"content":"            \u003cStackPane fx:id\u003d\"appointmentListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":63,"author":{"gitId":"pwjj2000"},"content":"          \u003c/VBox\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":64,"author":{"gitId":"pwjj2000"},"content":"        \u003c/SplitPane\u003e","lastModifiedDate":"2022-10-06"},{"lineNumber":65,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"-":61,"pwjj2000":10}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"\u003c?import javafx.scene.text.TextFlow?\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/null\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"         \u003cTextFlow maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"10.0\" prefWidth\u003d\"130.0\"\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"            \u003cchildren\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"               \u003cLabel fx:id\u003d\"appointment\" maxWidth\u003d\"750.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$appointment\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"            \u003c/children\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"         \u003c/TextFlow\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"      \u003crowConstraints\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"         \u003cRowConstraints /\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"      \u003c/rowConstraints\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"JovonLim":14,"-":32}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2017-01-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";","lastModifiedDate":"2017-06-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-06-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":67,"author":{"gitId":"pwjj2000"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD + \" patients\";","lastModifiedDate":"2022-10-06"},{"lineNumber":68,"author":{"gitId":"pwjj2000"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS_PATIENTS, model);","lastModifiedDate":"2022-10-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // Execute add command","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":92,"author":{"gitId":"pwjj2000"},"content":"    public void getFilteredPatientList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2022-10-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":94,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":95,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":96,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":97,"author":{"gitId":"pwjj2000"},"content":"    public void getFilteredAppointmentList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2022-10-08"},{"lineNumber":98,"author":{"gitId":"pwjj2000"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredAppointmentList().remove(0));","lastModifiedDate":"2022-10-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-05-31"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {","lastModifiedDate":"2018-12-09"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2018-12-09"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-12-09"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":167,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"-":159,"pwjj2000":8}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"import java.util.List;","lastModifiedDate":"2022-10-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-05-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-05-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class AddCommandTest {","lastModifiedDate":"2017-05-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);","lastModifiedDate":"2019-01-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);","lastModifiedDate":"2017-05-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2019-05-03"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":118,"author":{"gitId":"pwjj2000"},"content":"        @Override","lastModifiedDate":"2022-10-06"},{"lineNumber":119,"author":{"gitId":"pwjj2000"},"content":"        public void addAppointment(Appointment appointment) {","lastModifiedDate":"2022-10-06"},{"lineNumber":120,"author":{"gitId":"pwjj2000"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-06"},{"lineNumber":121,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":122,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2018-11-27"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-12"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2018-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":143,"author":{"gitId":"pwjj2000"},"content":"        @Override","lastModifiedDate":"2022-10-06"},{"lineNumber":144,"author":{"gitId":"pwjj2000"},"content":"        public void deleteAppointment(Appointment target) {","lastModifiedDate":"2022-10-06"},{"lineNumber":145,"author":{"gitId":"pwjj2000"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-06"},{"lineNumber":146,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":147,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":148,"author":{"gitId":"JovonLim"},"content":"        @Override","lastModifiedDate":"2022-10-09"},{"lineNumber":149,"author":{"gitId":"JovonLim"},"content":"        public void deleteAppointments(List\u003cAppointment\u003e appointmentList) {","lastModifiedDate":"2022-10-09"},{"lineNumber":150,"author":{"gitId":"JovonLim"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-09"},{"lineNumber":151,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-09"},{"lineNumber":152,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":153,"author":{"gitId":"JovonLim"},"content":"        @Override","lastModifiedDate":"2022-10-09"},{"lineNumber":154,"author":{"gitId":"JovonLim"},"content":"        public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2022-10-09"},{"lineNumber":155,"author":{"gitId":"JovonLim"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-09"},{"lineNumber":156,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-09"},{"lineNumber":157,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":158,"author":{"gitId":"JovonLim"},"content":"        @Override","lastModifiedDate":"2022-10-09"},{"lineNumber":159,"author":{"gitId":"JovonLim"},"content":"        public void refreshAppointment(Appointment target) {","lastModifiedDate":"2022-10-09"},{"lineNumber":160,"author":{"gitId":"JovonLim"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-09"},{"lineNumber":161,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-09"},{"lineNumber":162,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":163,"author":{"gitId":"JovonLim"},"content":"        @Override","lastModifiedDate":"2022-10-09"},{"lineNumber":164,"author":{"gitId":"JovonLim"},"content":"        public void refreshAppointments(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2022-10-09"},{"lineNumber":165,"author":{"gitId":"JovonLim"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-09"},{"lineNumber":166,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-09"},{"lineNumber":167,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":173,"author":{"gitId":"NicholasTYD"},"content":"        @Override","lastModifiedDate":"2022-10-04"},{"lineNumber":174,"author":{"gitId":"NicholasTYD"},"content":"        public void refreshPerson(Person target) {","lastModifiedDate":"2022-10-04"},{"lineNumber":175,"author":{"gitId":"NicholasTYD"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-04"},{"lineNumber":176,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-04"},{"lineNumber":177,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":183,"author":{"gitId":"pwjj2000"},"content":"        @Override","lastModifiedDate":"2022-10-06"},{"lineNumber":184,"author":{"gitId":"pwjj2000"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {","lastModifiedDate":"2022-10-06"},{"lineNumber":185,"author":{"gitId":"pwjj2000"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-06"},{"lineNumber":186,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":187,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":192,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":193,"author":{"gitId":"pwjj2000"},"content":"        @Override","lastModifiedDate":"2022-10-06"},{"lineNumber":194,"author":{"gitId":"pwjj2000"},"content":"        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {","lastModifiedDate":"2022-10-06"},{"lineNumber":195,"author":{"gitId":"pwjj2000"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2022-10-06"},{"lineNumber":196,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":200,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":201,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2018-08-07"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2018-08-07"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2018-08-07"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":218,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":219,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2017-05-12"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":226,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-08"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":232,"author":{"gitId":"-"},"content":"            personsAdded.add(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-04"},{"lineNumber":237,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2017-05-04"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":241,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"NicholasTYD":5,"JovonLim":21,"-":194,"pwjj2000":21}},{"path":"src/test/java/seedu/address/logic/commands/BookCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-01"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-10-01"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-01"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-10-01"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-01"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-01"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-01"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-01"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-01"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-10-01"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-10-01"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-01"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2022-10-01"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"public class BookCommandTest {","lastModifiedDate":"2022-10-01"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-01"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"    private final Appointment appointment \u003d new Appointment(\"Sore Throat\",","lastModifiedDate":"2022-10-01"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"            \"2022-12-10 16:30\", false);","lastModifiedDate":"2022-10-02"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-01"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"    public void execute_validIndexBooking_success() {","lastModifiedDate":"2022-10-01"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"        Person personToBookFor \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2022-10-01"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"        Person editedPerson \u003d new PersonBuilder(personToBookFor).withAppointment(appointment).build();","lastModifiedDate":"2022-10-01"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"        BookCommand bookCommand \u003d new BookCommand(INDEX_FIRST_PERSON, appointment);","lastModifiedDate":"2022-10-01"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"        String expectedMessage \u003d String.format(BookCommand.MESSAGE_BOOK_APPOINTMENT_SUCCESS, editedPerson);","lastModifiedDate":"2022-10-01"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-01"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"        expectedModel.setPerson(personToBookFor, editedPerson);","lastModifiedDate":"2022-10-01"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"        expectedModel.addAppointment(appointment);","lastModifiedDate":"2022-10-09"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"        assertCommandSuccess(bookCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-01"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-01"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2022-10-01"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2022-10-01"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"        BookCommand bookCommand \u003d new BookCommand(outOfBoundIndex, appointment);","lastModifiedDate":"2022-10-01"},{"lineNumber":46,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"        assertCommandFailure(bookCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-01"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-01"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"    public void execute_invalidAppointmentBooking_throwsCommandException() {","lastModifiedDate":"2022-10-01"},{"lineNumber":52,"author":{"gitId":"JovonLim"},"content":"        Person personToBookFor \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2022-10-01"},{"lineNumber":53,"author":{"gitId":"JovonLim"},"content":"        Person editedPerson \u003d new PersonBuilder(personToBookFor).withAppointment(appointment).build();","lastModifiedDate":"2022-10-01"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"        model.setPerson(personToBookFor, editedPerson);","lastModifiedDate":"2022-10-01"},{"lineNumber":55,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":56,"author":{"gitId":"JovonLim"},"content":"        BookCommand bookCommand \u003d new BookCommand(INDEX_FIRST_PERSON, appointment);","lastModifiedDate":"2022-10-01"},{"lineNumber":57,"author":{"gitId":"JovonLim"},"content":"        assertCommandFailure(bookCommand, model, BookCommand.MESSAGE_DUPLICATE_APPOINTMENT);","lastModifiedDate":"2022-10-01"},{"lineNumber":58,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":59,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-01"}],"authorContributionMap":{"NicholasTYD":1,"JovonLim":58}},{"path":"src/test/java/seedu/address/logic/commands/CancelCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"guanzhou03"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-04"},{"lineNumber":2,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":3,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-10-04"},{"lineNumber":4,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-04"},{"lineNumber":5,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-10-04"},{"lineNumber":6,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2022-10-04"},{"lineNumber":7,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-04"},{"lineNumber":8,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":9,"author":{"gitId":"guanzhou03"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-04"},{"lineNumber":10,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":11,"author":{"gitId":"guanzhou03"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-04"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-04"},{"lineNumber":14,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-04"},{"lineNumber":15,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-04"},{"lineNumber":16,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-10-04"},{"lineNumber":17,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-10-04"},{"lineNumber":18,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-04"},{"lineNumber":19,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2022-10-04"},{"lineNumber":20,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":21,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":22,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":23,"author":{"gitId":"guanzhou03"},"content":"/**","lastModifiedDate":"2022-10-04"},{"lineNumber":24,"author":{"gitId":"guanzhou03"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2022-10-04"},{"lineNumber":25,"author":{"gitId":"guanzhou03"},"content":" * {@code DeleteCommand}.","lastModifiedDate":"2022-10-04"},{"lineNumber":26,"author":{"gitId":"guanzhou03"},"content":" */","lastModifiedDate":"2022-10-04"},{"lineNumber":27,"author":{"gitId":"guanzhou03"},"content":"public class CancelCommandTest {","lastModifiedDate":"2022-10-04"},{"lineNumber":28,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":29,"author":{"gitId":"guanzhou03"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-04"},{"lineNumber":30,"author":{"gitId":"guanzhou03"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":31,"author":{"gitId":"guanzhou03"},"content":"    public void execute_validIndexCancel_success() {","lastModifiedDate":"2022-10-04"},{"lineNumber":32,"author":{"gitId":"guanzhou03"},"content":"        Person personWithAppt \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2022-10-04"},{"lineNumber":33,"author":{"gitId":"guanzhou03"},"content":"        Person editedPerson \u003d new PersonBuilder(personWithAppt).withAppointmentList(new ArrayList\u003c\u003e()).build();","lastModifiedDate":"2022-10-04"},{"lineNumber":34,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":35,"author":{"gitId":"guanzhou03"},"content":"        String expectedCancelMessage \u003d CancelCommand.MESSAGE_CANCEL_APPOINTMENT_SUCCESS + personWithAppt.getName();","lastModifiedDate":"2022-10-04"},{"lineNumber":36,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":37,"author":{"gitId":"guanzhou03"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-04"},{"lineNumber":38,"author":{"gitId":"guanzhou03"},"content":"        expectedModel.setPerson(personWithAppt, editedPerson);","lastModifiedDate":"2022-10-04"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"        expectedModel.deleteAppointments(personWithAppt.getAppointments());","lastModifiedDate":"2022-10-09"},{"lineNumber":40,"author":{"gitId":"guanzhou03"},"content":"        CancelCommand cancelCommand \u003d new CancelCommand(INDEX_SECOND_PERSON, Index.fromOneBased(1));","lastModifiedDate":"2022-10-04"},{"lineNumber":41,"author":{"gitId":"guanzhou03"},"content":"        assertCommandSuccess(cancelCommand, model, expectedCancelMessage, expectedModel);","lastModifiedDate":"2022-10-04"},{"lineNumber":42,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":43,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":44,"author":{"gitId":"guanzhou03"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":45,"author":{"gitId":"guanzhou03"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2022-10-04"},{"lineNumber":46,"author":{"gitId":"guanzhou03"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2022-10-04"},{"lineNumber":47,"author":{"gitId":"guanzhou03"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2022-10-04"},{"lineNumber":48,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":49,"author":{"gitId":"guanzhou03"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-04"},{"lineNumber":50,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":51,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":52,"author":{"gitId":"guanzhou03"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":53,"author":{"gitId":"guanzhou03"},"content":"    public void execute_invalidAppointmentCancelling_throwsCommandException() {","lastModifiedDate":"2022-10-04"},{"lineNumber":54,"author":{"gitId":"guanzhou03"},"content":"        Person personWithoutAppt \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2022-10-04"},{"lineNumber":55,"author":{"gitId":"guanzhou03"},"content":"        Person editedPerson \u003d new PersonBuilder(personWithoutAppt).withAppointmentList(new ArrayList\u003c\u003e()).build();","lastModifiedDate":"2022-10-04"},{"lineNumber":56,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":57,"author":{"gitId":"guanzhou03"},"content":"        model.setPerson(personWithoutAppt, editedPerson);","lastModifiedDate":"2022-10-04"},{"lineNumber":58,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":59,"author":{"gitId":"guanzhou03"},"content":"        CancelCommand cancelCommand \u003d new CancelCommand(INDEX_FIRST_PERSON, Index.fromOneBased(1));","lastModifiedDate":"2022-10-04"},{"lineNumber":60,"author":{"gitId":"guanzhou03"},"content":"        assertCommandFailure(cancelCommand, model, Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-04"},{"lineNumber":61,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":62,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":63,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":64,"author":{"gitId":"guanzhou03"},"content":"}","lastModifiedDate":"2022-10-04"}],"authorContributionMap":{"JovonLim":1,"guanzhou03":63}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-10-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REASON;","lastModifiedDate":"2022-10-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2018-01-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-07-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-07-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";","lastModifiedDate":"2017-07-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";","lastModifiedDate":"2017-07-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"    public static final String VALID_REASON_AMY \u003d \"Sore Throat\";","lastModifiedDate":"2022-10-08"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"    public static final String VALID_DATE_AMY \u003d \"2019-12-10 16:30\";","lastModifiedDate":"2022-10-08"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"    public static final String VALID_REASON_BOB \u003d \"Ear Infection\";","lastModifiedDate":"2022-10-08"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"    public static final String VALID_DATE_BOB \u003d \"2019-12-20 16:30\";","lastModifiedDate":"2022-10-08"},{"lineNumber":46,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":57,"author":{"gitId":"JovonLim"},"content":"    public static final String REASON_DESC_AMY \u003d \" \" + PREFIX_REASON + VALID_REASON_AMY;","lastModifiedDate":"2022-10-08"},{"lineNumber":58,"author":{"gitId":"JovonLim"},"content":"    public static final String DATE_DESC_AMY \u003d \" \" + PREFIX_DATE + VALID_DATE_AMY;","lastModifiedDate":"2022-10-08"},{"lineNumber":59,"author":{"gitId":"JovonLim"},"content":"    public static final String REASON_DESC_BOB \u003d \" \" + PREFIX_REASON + VALID_REASON_BOB;","lastModifiedDate":"2022-10-08"},{"lineNumber":60,"author":{"gitId":"JovonLim"},"content":"    public static final String DATE_DESC_BOB \u003d \" \" + PREFIX_DATE + VALID_DATE_BOB;","lastModifiedDate":"2022-10-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses","lastModifiedDate":"2017-07-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2017-07-05"},{"lineNumber":67,"author":{"gitId":"JovonLim"},"content":"    public static final String INVALID_REASON_DESC \u003d \" \" + PREFIX_REASON + \"\";","lastModifiedDate":"2022-10-08"},{"lineNumber":68,"author":{"gitId":"JovonLim"},"content":"    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"2022-15-12 16:30\";","lastModifiedDate":"2022-10-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":73,"author":{"gitId":"JovonLim"},"content":"    public static final EditPatientCommand.EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2022-10-08"},{"lineNumber":74,"author":{"gitId":"JovonLim"},"content":"    public static final EditPatientCommand.EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2022-10-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2019-01-25"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2018-01-10"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());","lastModifiedDate":"2017-06-05"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2018-01-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2018-01-31"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-20"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2017-07-20"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":141,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"JovonLim":15,"-":126}},{"path":"src/test/java/seedu/address/logic/commands/EditAppointmentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-08"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-10-08"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-08"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2022-10-08"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-08"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-10-08"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2022-10-08"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2022-10-08"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-08"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-08"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-08"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-08"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditAppointmentCommand.EditAppointmentDescriptor;","lastModifiedDate":"2022-10-08"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2022-10-08"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-08"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-10-08"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-10-08"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-08"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-08"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"import seedu.address.testutil.EditAppointmentDescriptorBuilder;","lastModifiedDate":"2022-10-08"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2022-10-08"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"public class EditAppointmentCommandTest {","lastModifiedDate":"2022-10-08"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-08"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2022-10-08"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"        Appointment appointment \u003d new Appointment(\"Sore Throat\", \"2019-10-10 16:30\", true);","lastModifiedDate":"2022-10-08"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"        Person person \u003d model.getFilteredPersonList().get(INDEX_THIRD_PERSON.getZeroBased());","lastModifiedDate":"2022-10-09"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"        appointment.setPatient(person);","lastModifiedDate":"2022-10-09"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder(appointment).build();","lastModifiedDate":"2022-10-08"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentCommand editAppointmentCommand \u003d new EditAppointmentCommand(INDEX_THIRD_PERSON,","lastModifiedDate":"2022-10-08"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"                INDEX_FIRST_APPOINTMENT, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"        String expectedMessage \u003d String.format(EditAppointmentCommand.MESSAGE_EDIT_APPOINTMENT_SUCCESS,","lastModifiedDate":"2022-10-08"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"                person.getName(), appointment);","lastModifiedDate":"2022-10-08"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2022-10-08"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"        Person expectedPerson \u003d new PersonBuilder(expectedModel.getFilteredPersonList().get(2)).build();","lastModifiedDate":"2022-10-08"},{"lineNumber":46,"author":{"gitId":"JovonLim"},"content":"        expectedPerson.getAppointments().set(0, appointment);","lastModifiedDate":"2022-10-08"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"        expectedModel.setPerson(expectedModel.getFilteredPersonList().get(2), expectedPerson);","lastModifiedDate":"2022-10-08"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"        expectedModel.setAppointment(expectedModel.getFilteredAppointmentList().get(0), appointment);","lastModifiedDate":"2022-10-09"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"        assertCommandSuccess(editAppointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-08"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":52,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":53,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"    public void execute_oneFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2022-10-08"},{"lineNumber":55,"author":{"gitId":"JovonLim"},"content":"        Appointment appointment \u003d new Appointment(\"Sore Throat\", \"2010-12-31 23:45\", true);","lastModifiedDate":"2022-10-08"},{"lineNumber":56,"author":{"gitId":"JovonLim"},"content":"        Person person \u003d model.getFilteredPersonList().get(INDEX_THIRD_PERSON.getZeroBased());","lastModifiedDate":"2022-10-09"},{"lineNumber":57,"author":{"gitId":"JovonLim"},"content":"        appointment.setPatient(person);","lastModifiedDate":"2022-10-09"},{"lineNumber":58,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":59,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder().withReason(\"Sore Throat\").build();","lastModifiedDate":"2022-10-08"},{"lineNumber":60,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentCommand editAppointmentCommand \u003d new EditAppointmentCommand(INDEX_THIRD_PERSON,","lastModifiedDate":"2022-10-08"},{"lineNumber":61,"author":{"gitId":"JovonLim"},"content":"                INDEX_FIRST_APPOINTMENT, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":62,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":63,"author":{"gitId":"JovonLim"},"content":"        String expectedMessage \u003d String.format(EditAppointmentCommand.MESSAGE_EDIT_APPOINTMENT_SUCCESS,","lastModifiedDate":"2022-10-08"},{"lineNumber":64,"author":{"gitId":"JovonLim"},"content":"                person.getName(), appointment);","lastModifiedDate":"2022-10-08"},{"lineNumber":65,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":66,"author":{"gitId":"JovonLim"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2022-10-08"},{"lineNumber":67,"author":{"gitId":"JovonLim"},"content":"        Person expectedPerson \u003d new PersonBuilder(expectedModel.getFilteredPersonList().get(2)).build();","lastModifiedDate":"2022-10-08"},{"lineNumber":68,"author":{"gitId":"JovonLim"},"content":"        expectedPerson.getAppointments().set(0, appointment);","lastModifiedDate":"2022-10-08"},{"lineNumber":69,"author":{"gitId":"JovonLim"},"content":"        expectedModel.setPerson(expectedModel.getFilteredPersonList().get(2), expectedPerson);","lastModifiedDate":"2022-10-08"},{"lineNumber":70,"author":{"gitId":"JovonLim"},"content":"        expectedModel.setAppointment(expectedModel.getFilteredAppointmentList().get(0), appointment);","lastModifiedDate":"2022-10-09"},{"lineNumber":71,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":72,"author":{"gitId":"JovonLim"},"content":"        assertCommandSuccess(editAppointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-08"},{"lineNumber":73,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":74,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":75,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":76,"author":{"gitId":"JovonLim"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2022-10-08"},{"lineNumber":77,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentCommand editAppointmentCommand \u003d new EditAppointmentCommand(INDEX_THIRD_PERSON,","lastModifiedDate":"2022-10-08"},{"lineNumber":78,"author":{"gitId":"JovonLim"},"content":"                INDEX_FIRST_APPOINTMENT, new EditAppointmentDescriptor());","lastModifiedDate":"2022-10-08"},{"lineNumber":79,"author":{"gitId":"JovonLim"},"content":"        Person person \u003d model.getFilteredPersonList().get(INDEX_THIRD_PERSON.getZeroBased());","lastModifiedDate":"2022-10-08"},{"lineNumber":80,"author":{"gitId":"JovonLim"},"content":"        Appointment appointment \u003d person.getAppointments().get(0);","lastModifiedDate":"2022-10-08"},{"lineNumber":81,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":82,"author":{"gitId":"JovonLim"},"content":"        String expectedMessage \u003d String.format(EditAppointmentCommand.MESSAGE_EDIT_APPOINTMENT_SUCCESS,","lastModifiedDate":"2022-10-08"},{"lineNumber":83,"author":{"gitId":"JovonLim"},"content":"                person.getName(), appointment);","lastModifiedDate":"2022-10-08"},{"lineNumber":84,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":85,"author":{"gitId":"JovonLim"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2022-10-08"},{"lineNumber":86,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":87,"author":{"gitId":"JovonLim"},"content":"        assertCommandSuccess(editAppointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-08"},{"lineNumber":88,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":89,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":90,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":91,"author":{"gitId":"JovonLim"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2022-10-08"},{"lineNumber":92,"author":{"gitId":"JovonLim"},"content":"        showPersonAtIndex(model, INDEX_THIRD_PERSON);","lastModifiedDate":"2022-10-08"},{"lineNumber":93,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":94,"author":{"gitId":"JovonLim"},"content":"        Appointment appointment \u003d new Appointment(\"Sore Throat\", \"2010-12-31 23:45\", true);","lastModifiedDate":"2022-10-08"},{"lineNumber":95,"author":{"gitId":"JovonLim"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2022-10-08"},{"lineNumber":96,"author":{"gitId":"JovonLim"},"content":"        appointment.setPatient(personInFilteredList);","lastModifiedDate":"2022-10-09"},{"lineNumber":97,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":98,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder().withReason(\"Sore Throat\").build();","lastModifiedDate":"2022-10-08"},{"lineNumber":99,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentCommand editAppointmentCommand \u003d new EditAppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2022-10-08"},{"lineNumber":100,"author":{"gitId":"JovonLim"},"content":"                INDEX_FIRST_APPOINTMENT, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":101,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":102,"author":{"gitId":"JovonLim"},"content":"        String expectedMessage \u003d String.format(EditAppointmentCommand.MESSAGE_EDIT_APPOINTMENT_SUCCESS,","lastModifiedDate":"2022-10-08"},{"lineNumber":103,"author":{"gitId":"JovonLim"},"content":"                personInFilteredList.getName(), appointment);","lastModifiedDate":"2022-10-08"},{"lineNumber":104,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":105,"author":{"gitId":"JovonLim"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2022-10-08"},{"lineNumber":106,"author":{"gitId":"JovonLim"},"content":"        Person expectedPerson \u003d new PersonBuilder(expectedModel.getFilteredPersonList().get(2)).build();","lastModifiedDate":"2022-10-08"},{"lineNumber":107,"author":{"gitId":"JovonLim"},"content":"        expectedPerson.getAppointments().set(0, appointment);","lastModifiedDate":"2022-10-08"},{"lineNumber":108,"author":{"gitId":"JovonLim"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), expectedPerson);","lastModifiedDate":"2022-10-08"},{"lineNumber":109,"author":{"gitId":"JovonLim"},"content":"        expectedModel.setAppointment(expectedModel.getFilteredAppointmentList().get(0), appointment);","lastModifiedDate":"2022-10-09"},{"lineNumber":110,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":111,"author":{"gitId":"JovonLim"},"content":"        assertCommandSuccess(editAppointmentCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-08"},{"lineNumber":112,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":113,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":114,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":115,"author":{"gitId":"JovonLim"},"content":"    public void execute_duplicateAppointmentTimeUnfilteredList_failure() {","lastModifiedDate":"2022-10-08"},{"lineNumber":116,"author":{"gitId":"JovonLim"},"content":"        Appointment appointment \u003d new Appointment(\"Cough\", \"2019-12-10 16:30\", true);","lastModifiedDate":"2022-10-08"},{"lineNumber":117,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder(appointment).build();","lastModifiedDate":"2022-10-08"},{"lineNumber":118,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentCommand editAppointmentCommand \u003d new EditAppointmentCommand(INDEX_THIRD_PERSON,","lastModifiedDate":"2022-10-08"},{"lineNumber":119,"author":{"gitId":"JovonLim"},"content":"                INDEX_FIRST_APPOINTMENT, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":120,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":121,"author":{"gitId":"JovonLim"},"content":"        assertCommandFailure(editAppointmentCommand, model, EditAppointmentCommand.MESSAGE_DUPLICATE_APPOINTMENT);","lastModifiedDate":"2022-10-08"},{"lineNumber":122,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":123,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":124,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":125,"author":{"gitId":"JovonLim"},"content":"    public void execute_duplicatePersonFilteredList_failure() {","lastModifiedDate":"2022-10-08"},{"lineNumber":126,"author":{"gitId":"JovonLim"},"content":"        showPersonAtIndex(model, INDEX_THIRD_PERSON);","lastModifiedDate":"2022-10-08"},{"lineNumber":127,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":128,"author":{"gitId":"JovonLim"},"content":"        Appointment appointment \u003d new Appointment(\"Cough\", \"2019-12-10 16:30\", true);","lastModifiedDate":"2022-10-08"},{"lineNumber":129,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder(appointment).build();","lastModifiedDate":"2022-10-08"},{"lineNumber":130,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentCommand editAppointmentCommand \u003d new EditAppointmentCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2022-10-08"},{"lineNumber":131,"author":{"gitId":"JovonLim"},"content":"                INDEX_FIRST_APPOINTMENT, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":132,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":133,"author":{"gitId":"JovonLim"},"content":"        assertCommandFailure(editAppointmentCommand, model, EditAppointmentCommand.MESSAGE_DUPLICATE_APPOINTMENT);","lastModifiedDate":"2022-10-08"},{"lineNumber":134,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":135,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":136,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":137,"author":{"gitId":"JovonLim"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2022-10-08"},{"lineNumber":138,"author":{"gitId":"JovonLim"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2022-10-08"},{"lineNumber":139,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder().withReason(\"Cough\").build();","lastModifiedDate":"2022-10-08"},{"lineNumber":140,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentCommand editAppointmentCommand \u003d new EditAppointmentCommand(outOfBoundIndex,","lastModifiedDate":"2022-10-08"},{"lineNumber":141,"author":{"gitId":"JovonLim"},"content":"                INDEX_FIRST_APPOINTMENT, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":142,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":143,"author":{"gitId":"JovonLim"},"content":"        assertCommandFailure(editAppointmentCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-08"},{"lineNumber":144,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":145,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":146,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":147,"author":{"gitId":"JovonLim"},"content":"    public void execute_invalidAppointmentIndexUnfilteredList_failure() {","lastModifiedDate":"2022-10-08"},{"lineNumber":148,"author":{"gitId":"JovonLim"},"content":"        Person person \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2022-10-08"},{"lineNumber":149,"author":{"gitId":"JovonLim"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(person.getAppointments().size() + 1);","lastModifiedDate":"2022-10-08"},{"lineNumber":150,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder().withReason(\"Cough\").build();","lastModifiedDate":"2022-10-08"},{"lineNumber":151,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentCommand editAppointmentCommand \u003d new EditAppointmentCommand(INDEX_SECOND_PERSON,","lastModifiedDate":"2022-10-08"},{"lineNumber":152,"author":{"gitId":"JovonLim"},"content":"                outOfBoundIndex, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":153,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":154,"author":{"gitId":"JovonLim"},"content":"        assertCommandFailure(editAppointmentCommand, model, Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-08"},{"lineNumber":155,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":156,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-08"}],"authorContributionMap":{"JovonLim":156}},{"path":"src/test/java/seedu/address/logic/commands/EditPatientCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2018-01-31"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-05-04"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditPatientCommand.EditPersonDescriptor;","lastModifiedDate":"2022-10-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-05-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-04"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditPatientCommand.","lastModifiedDate":"2022-10-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"public class EditPatientCommandTest {","lastModifiedDate":"2022-10-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"        String expectedMessage \u003d String.format(EditPatientCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2022-10-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"        assertCommandSuccess(editPatientCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":62,"author":{"gitId":"JovonLim"},"content":"        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(indexLastPerson, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":64,"author":{"gitId":"JovonLim"},"content":"        String expectedMessage \u003d String.format(EditPatientCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2022-10-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":69,"author":{"gitId":"JovonLim"},"content":"        assertCommandSuccess(editPatientCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":74,"author":{"gitId":"JovonLim"},"content":"        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());","lastModifiedDate":"2022-10-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":77,"author":{"gitId":"JovonLim"},"content":"        String expectedMessage \u003d String.format(EditPatientCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2022-10-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":81,"author":{"gitId":"JovonLim"},"content":"        assertCommandSuccess(editPatientCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":90,"author":{"gitId":"JovonLim"},"content":"        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2022-10-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":93,"author":{"gitId":"JovonLim"},"content":"        String expectedMessage \u003d String.format(EditPatientCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2022-10-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":98,"author":{"gitId":"JovonLim"},"content":"        assertCommandSuccess(editPatientCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":105,"author":{"gitId":"JovonLim"},"content":"        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(INDEX_SECOND_PERSON, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":107,"author":{"gitId":"JovonLim"},"content":"        assertCommandFailure(editPatientCommand, model, EditPatientCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2022-10-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book","lastModifiedDate":"2017-05-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":116,"author":{"gitId":"JovonLim"},"content":"        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2022-10-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":119,"author":{"gitId":"JovonLim"},"content":"        assertCommandFailure(editPatientCommand, model, EditPatientCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2022-10-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-05-18"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-22"},{"lineNumber":126,"author":{"gitId":"JovonLim"},"content":"        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":128,"author":{"gitId":"JovonLim"},"content":"        assertCommandFailure(editPatientCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * but smaller than size of address book","lastModifiedDate":"2017-05-18"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-18"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-05-18"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":142,"author":{"gitId":"JovonLim"},"content":"        EditPatientCommand editPatientCommand \u003d new EditPatientCommand(outOfBoundIndex,","lastModifiedDate":"2022-10-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":145,"author":{"gitId":"JovonLim"},"content":"        assertCommandFailure(editPatientCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":150,"author":{"gitId":"JovonLim"},"content":"        final EditPatientCommand standardCommand \u003d new EditPatientCommand(INDEX_FIRST_PERSON, DESC_AMY);","lastModifiedDate":"2022-10-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-08"},{"lineNumber":154,"author":{"gitId":"JovonLim"},"content":"        EditPatientCommand commandWithSameValues \u003d new EditPatientCommand(INDEX_FIRST_PERSON, copyDescriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-05-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":167,"author":{"gitId":"JovonLim"},"content":"        assertFalse(standardCommand.equals(new EditPatientCommand(INDEX_SECOND_PERSON, DESC_AMY)));","lastModifiedDate":"2022-10-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":170,"author":{"gitId":"JovonLim"},"content":"        assertFalse(standardCommand.equals(new EditPatientCommand(INDEX_FIRST_PERSON, DESC_BOB)));","lastModifiedDate":"2022-10-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":173,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"JovonLim":27,"-":146}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditPatientCommand.EditPersonDescriptor;","lastModifiedDate":"2022-10-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorTest {","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));","lastModifiedDate":"2017-05-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"JovonLim":1,"-":57}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2018-01-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2018-01-31"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand.","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class ListCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"pwjj2000"},"content":"    public void execute_patientListIsNotFiltered_showsSameList() {","lastModifiedDate":"2022-10-08"},{"lineNumber":31,"author":{"gitId":"pwjj2000"},"content":"        assertCommandSuccess(","lastModifiedDate":"2022-10-06"},{"lineNumber":32,"author":{"gitId":"pwjj2000"},"content":"                new ListCommand(\"patients\"), model, ListCommand.MESSAGE_SUCCESS_PATIENTS, expectedModel);","lastModifiedDate":"2022-10-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"pwjj2000"},"content":"    public void execute_patientListIsFiltered_showsEverything() {","lastModifiedDate":"2022-10-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":38,"author":{"gitId":"pwjj2000"},"content":"        assertCommandSuccess(","lastModifiedDate":"2022-10-06"},{"lineNumber":39,"author":{"gitId":"pwjj2000"},"content":"                new ListCommand(\"patients\"), model, ListCommand.MESSAGE_SUCCESS_PATIENTS, expectedModel);","lastModifiedDate":"2022-10-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":42,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":43,"author":{"gitId":"pwjj2000"},"content":"    public void execute_appointmentListIsNotFiltered_showsSameList() {","lastModifiedDate":"2022-10-08"},{"lineNumber":44,"author":{"gitId":"pwjj2000"},"content":"        assertCommandSuccess(","lastModifiedDate":"2022-10-08"},{"lineNumber":45,"author":{"gitId":"pwjj2000"},"content":"                new ListCommand(\"appts\"), model, ListCommand.MESSAGE_SUCCESS_APPOINTMENTS, expectedModel);","lastModifiedDate":"2022-10-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"-":36,"pwjj2000":11}},{"path":"src/test/java/seedu/address/logic/commands/MarkCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-02"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-10-02"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-02"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-02"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-10-02"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_APPOINTMENT;","lastModifiedDate":"2022-10-02"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2022-10-02"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-02"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-02"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-02"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-02"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-10-02"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-10-02"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-02"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-02"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2022-10-02"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"class MarkCommandTest {","lastModifiedDate":"2022-10-02"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"    private final Model typicalModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-02"},{"lineNumber":28,"author":{"gitId":"NicholasTYD"},"content":"    public void execute_markUnmarkedAppointment_success() {","lastModifiedDate":"2022-10-02"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"        Index targetPersonIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"        Index targetAppointmentIndex \u003d INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"        AddressBook testAddressBook \u003d new AddressBook();","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"        Model testModel \u003d new ModelManager(testAddressBook, new UserPrefs());","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"        Appointment unmarkedAppointment \u003d new Appointment(\"Fever\", \"2019-12-31 23:45\", false);","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"        Person unmarkedPerson \u003d new PersonBuilder().withAppointment(unmarkedAppointment).build();","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"        unmarkedAppointment.setPatient(unmarkedPerson);","lastModifiedDate":"2022-10-09"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"        testModel.addPerson(unmarkedPerson);","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"        testModel.addAppointment(unmarkedAppointment);","lastModifiedDate":"2022-10-09"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"        Person personToMarkFor \u003d testModel.getFilteredPersonList().get(targetPersonIndex.getZeroBased());","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"        Appointment markedAppointment \u003d new Appointment(\"Fever\", \"2019-12-31 23:45\", true);","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"        Person markedPerson \u003d new PersonBuilder().withAppointment(markedAppointment).build();","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"        markedAppointment.setPatient(markedPerson);","lastModifiedDate":"2022-10-09"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"NicholasTYD"},"content":"        MarkCommand markCommand \u003d new MarkCommand(targetPersonIndex, targetAppointmentIndex);","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"        String expectedMessage \u003d String.format(MarkCommand.MESSAGE_MARK_PERSON_SUCCESS,","lastModifiedDate":"2022-10-02"},{"lineNumber":49,"author":{"gitId":"NicholasTYD"},"content":"                targetAppointmentIndex.getOneBased(),","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"NicholasTYD"},"content":"                markedPerson.getName());","lastModifiedDate":"2022-10-02"},{"lineNumber":51,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":52,"author":{"gitId":"NicholasTYD"},"content":"        ModelManager expectedModel \u003d new ModelManager(testModel.getAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"NicholasTYD"},"content":"        expectedModel.setPerson(personToMarkFor, markedPerson);","lastModifiedDate":"2022-10-02"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"        expectedModel.setAppointment(unmarkedAppointment, markedAppointment);","lastModifiedDate":"2022-10-09"},{"lineNumber":55,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":56,"author":{"gitId":"NicholasTYD"},"content":"        assertCommandSuccess(markCommand, testModel, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":58,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":59,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-02"},{"lineNumber":60,"author":{"gitId":"NicholasTYD"},"content":"    public void execute_markAlreadyMarkedAppointment_throwsCommandException() {","lastModifiedDate":"2022-10-02"},{"lineNumber":61,"author":{"gitId":"NicholasTYD"},"content":"        Index targetPersonIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2022-10-03"},{"lineNumber":62,"author":{"gitId":"NicholasTYD"},"content":"        Index targetAppointmentIndex \u003d INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-03"},{"lineNumber":63,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":64,"author":{"gitId":"NicholasTYD"},"content":"        MarkCommand markCommand \u003d new MarkCommand(targetPersonIndex, targetAppointmentIndex);","lastModifiedDate":"2022-10-03"},{"lineNumber":65,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":66,"author":{"gitId":"NicholasTYD"},"content":"        assertCommandFailure(markCommand, typicalModel, MarkCommand.MESSAGE_ALREADY_MARKED);","lastModifiedDate":"2022-10-03"},{"lineNumber":67,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":68,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":69,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-02"},{"lineNumber":70,"author":{"gitId":"NicholasTYD"},"content":"    public void execute_markNonExistentAppointment_throwsCommandException() {","lastModifiedDate":"2022-10-02"},{"lineNumber":71,"author":{"gitId":"NicholasTYD"},"content":"        Index targetPersonIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-10-03"},{"lineNumber":72,"author":{"gitId":"NicholasTYD"},"content":"        Index targetAppointmentIndex \u003d INDEX_THIRD_APPOINTMENT;","lastModifiedDate":"2022-10-03"},{"lineNumber":73,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":74,"author":{"gitId":"NicholasTYD"},"content":"        MarkCommand markCommand \u003d new MarkCommand(targetPersonIndex, targetAppointmentIndex);","lastModifiedDate":"2022-10-03"},{"lineNumber":75,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":76,"author":{"gitId":"NicholasTYD"},"content":"        assertCommandFailure(markCommand, typicalModel, Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-03"},{"lineNumber":77,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":78,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-02"}],"authorContributionMap":{"NicholasTYD":74,"JovonLim":4}},{"path":"src/test/java/seedu/address/logic/commands/UnmarkCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-03"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_APPOINTMENT;","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"class UnmarkCommandTest {","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"    private final Model typicalModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"NicholasTYD"},"content":"    void execute_unmarkMarkedAppointment_success() {","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"        Index targetPersonIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"        Index targetAppointmentIndex \u003d INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"        AddressBook testAddressBook \u003d new AddressBook();","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"        Model testModel \u003d new ModelManager(testAddressBook, new UserPrefs());","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"        Appointment markedAppointment \u003d new Appointment(\"Cough\", \"2010-12-22 12:45\", true);","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"        Person markedPerson \u003d new PersonBuilder().withAppointment(markedAppointment).build();","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"        markedAppointment.setPatient(markedPerson);","lastModifiedDate":"2022-10-09"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"        testModel.addPerson(markedPerson);","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"        testModel.addAppointment(markedAppointment);","lastModifiedDate":"2022-10-09"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"        Person personToUnmarkFor \u003d testModel.getFilteredPersonList().get(targetPersonIndex.getZeroBased());","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"        Appointment unmarkedAppointment \u003d new Appointment(\"Cough\", \"2010-12-22 12:45\", false);","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"        Person unmarkedPerson \u003d new PersonBuilder().withAppointment(unmarkedAppointment).build();","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"        unmarkedAppointment.setPatient(unmarkedPerson);","lastModifiedDate":"2022-10-09"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"NicholasTYD"},"content":"        UnmarkCommand unmarkCommand \u003d new UnmarkCommand(targetPersonIndex, targetAppointmentIndex);","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"        String expectedMessage \u003d String.format(UnmarkCommand.MESSAGE_UNMARK_PERSON_SUCCESS,","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"NicholasTYD"},"content":"                targetAppointmentIndex.getOneBased(),","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"NicholasTYD"},"content":"                unmarkedPerson.getName());","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"NicholasTYD"},"content":"        ModelManager expectedModel \u003d new ModelManager(testModel.getAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"NicholasTYD"},"content":"        expectedModel.setPerson(personToUnmarkFor, unmarkedPerson);","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"        expectedModel.setAppointment(markedAppointment, unmarkedAppointment);","lastModifiedDate":"2022-10-09"},{"lineNumber":55,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"NicholasTYD"},"content":"        assertCommandSuccess(unmarkCommand, testModel, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":59,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-03"},{"lineNumber":60,"author":{"gitId":"NicholasTYD"},"content":"    void execute_unmarkAlreadyUnmarkedAppointment_throwsCommandException() {","lastModifiedDate":"2022-10-03"},{"lineNumber":61,"author":{"gitId":"NicholasTYD"},"content":"        Index targetPersonIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2022-10-03"},{"lineNumber":62,"author":{"gitId":"NicholasTYD"},"content":"        Index targetAppointmentIndex \u003d INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-03"},{"lineNumber":63,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":64,"author":{"gitId":"NicholasTYD"},"content":"        UnmarkCommand unmarkCommand \u003d new UnmarkCommand(targetPersonIndex, targetAppointmentIndex);","lastModifiedDate":"2022-10-03"},{"lineNumber":65,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":66,"author":{"gitId":"NicholasTYD"},"content":"        assertCommandFailure(unmarkCommand, typicalModel, UnmarkCommand.MESSAGE_ALREADY_UNMARKED);","lastModifiedDate":"2022-10-03"},{"lineNumber":67,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":68,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":69,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-03"},{"lineNumber":70,"author":{"gitId":"NicholasTYD"},"content":"    public void execute_unmarkNonExistentAppointment_throwsCommandException() {","lastModifiedDate":"2022-10-03"},{"lineNumber":71,"author":{"gitId":"NicholasTYD"},"content":"        UnmarkCommand unmarkCommand \u003d new UnmarkCommand(INDEX_FIRST_PERSON, INDEX_THIRD_APPOINTMENT);","lastModifiedDate":"2022-10-03"},{"lineNumber":72,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":73,"author":{"gitId":"NicholasTYD"},"content":"        assertCommandFailure(unmarkCommand, typicalModel, Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-03"},{"lineNumber":74,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":75,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"NicholasTYD":71,"JovonLim":4}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2017-12-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2017-12-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2022-10-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2022-10-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-06-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-06-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-06-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-06-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-06-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-06-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();","lastModifiedDate":"2017-06-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2018-07-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // whitespace only preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY","lastModifiedDate":"2017-12-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2018-07-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-07-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));","lastModifiedDate":"2017-12-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // zero tags","lastModifiedDate":"2017-06-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2018-07-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,","lastModifiedDate":"2017-12-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                new AddCommand(expectedPerson));","lastModifiedDate":"2017-12-23"},{"lineNumber":83,"author":{"gitId":"WingKei67"},"content":"        // no email","lastModifiedDate":"2022-10-06"},{"lineNumber":84,"author":{"gitId":"WingKei67"},"content":"        Person expectedPerson3 \u003d new PersonBuilder(AMY).withEmail(\"\").withTags().build();","lastModifiedDate":"2022-10-06"},{"lineNumber":85,"author":{"gitId":"WingKei67"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY,","lastModifiedDate":"2022-10-06"},{"lineNumber":86,"author":{"gitId":"WingKei67"},"content":"                new AddCommand(expectedPerson3));","lastModifiedDate":"2022-10-06"},{"lineNumber":87,"author":{"gitId":"WingKei67"},"content":"        // no address","lastModifiedDate":"2022-10-06"},{"lineNumber":88,"author":{"gitId":"WingKei67"},"content":"        Person expectedPerson4 \u003d new PersonBuilder(BOB).withAddress(\"\").withTags().build();","lastModifiedDate":"2022-10-06"},{"lineNumber":89,"author":{"gitId":"WingKei67"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB,","lastModifiedDate":"2022-10-06"},{"lineNumber":90,"author":{"gitId":"WingKei67"},"content":"                new AddCommand(expectedPerson4));","lastModifiedDate":"2022-10-06"},{"lineNumber":91,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-06-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // missing name prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // missing phone prefix","lastModifiedDate":"2022-10-06"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2022-10-06"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2017-06-15"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2017-06-15"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2017-06-15"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2017-12-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        // invalid tag","lastModifiedDate":"2017-06-15"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-06-15"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,","lastModifiedDate":"2017-12-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        // non-empty preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2017-12-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-12-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":142,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"WingKei67":9,"-":133}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_APPOINTMENT;","lastModifiedDate":"2022-10-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-06-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.BookCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":20,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.logic.commands.CancelCommand;","lastModifiedDate":"2022-10-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditAppointmentCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditAppointmentCommand.EditAppointmentDescriptor;","lastModifiedDate":"2022-10-08"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditPatientCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditPatientCommand.EditPersonDescriptor;","lastModifiedDate":"2022-10-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.commands.MarkCommand;","lastModifiedDate":"2022-10-09"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.commands.UnmarkCommand;","lastModifiedDate":"2022-10-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"import seedu.address.testutil.AppointmentUtil;","lastModifiedDate":"2022-10-08"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"import seedu.address.testutil.EditAppointmentDescriptorBuilder;","lastModifiedDate":"2022-10-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {","lastModifiedDate":"2017-07-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();","lastModifiedDate":"2017-07-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"    public void parseCommand_add() throws ParseException {","lastModifiedDate":"2022-10-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"JovonLim"},"content":"    public void parseCommand_clear() throws ParseException {","lastModifiedDate":"2022-10-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2022-10-09"},{"lineNumber":61,"author":{"gitId":"JovonLim"},"content":"    public void parseCommand_mark() throws ParseException {","lastModifiedDate":"2022-10-09"},{"lineNumber":62,"author":{"gitId":"NicholasTYD"},"content":"        MarkCommand command \u003d (MarkCommand) parser.parseCommand(","lastModifiedDate":"2022-10-09"},{"lineNumber":63,"author":{"gitId":"NicholasTYD"},"content":"                MarkCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()","lastModifiedDate":"2022-10-09"},{"lineNumber":64,"author":{"gitId":"NicholasTYD"},"content":"                        + \" \" + INDEX_SECOND_APPOINTMENT.getOneBased());","lastModifiedDate":"2022-10-09"},{"lineNumber":65,"author":{"gitId":"NicholasTYD"},"content":"        assertEquals(new MarkCommand(INDEX_FIRST_PERSON, INDEX_SECOND_APPOINTMENT), command);","lastModifiedDate":"2022-10-09"},{"lineNumber":66,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":67,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":68,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-09"},{"lineNumber":69,"author":{"gitId":"JovonLim"},"content":"    public void parseCommand_unmark() throws ParseException {","lastModifiedDate":"2022-10-09"},{"lineNumber":70,"author":{"gitId":"NicholasTYD"},"content":"        UnmarkCommand command \u003d (UnmarkCommand) parser.parseCommand(","lastModifiedDate":"2022-10-09"},{"lineNumber":71,"author":{"gitId":"NicholasTYD"},"content":"                UnmarkCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()","lastModifiedDate":"2022-10-09"},{"lineNumber":72,"author":{"gitId":"NicholasTYD"},"content":"                        + \" \" + INDEX_SECOND_APPOINTMENT.getOneBased());","lastModifiedDate":"2022-10-09"},{"lineNumber":73,"author":{"gitId":"NicholasTYD"},"content":"        assertEquals(new UnmarkCommand(INDEX_FIRST_PERSON, INDEX_SECOND_APPOINTMENT), command);","lastModifiedDate":"2022-10-09"},{"lineNumber":74,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":75,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":76,"author":{"gitId":"guanzhou03"},"content":"    @Test","lastModifiedDate":"2022-10-09"},{"lineNumber":77,"author":{"gitId":"guanzhou03"},"content":"    public void parseCommand_cancel() throws Exception {","lastModifiedDate":"2022-10-09"},{"lineNumber":78,"author":{"gitId":"guanzhou03"},"content":"        CancelCommand command \u003d (CancelCommand) parser.parseCommand(CancelCommand.COMMAND_WORD","lastModifiedDate":"2022-10-09"},{"lineNumber":79,"author":{"gitId":"guanzhou03"},"content":"                + \" \" + INDEX_FIRST_PERSON.getOneBased() + \" \" + INDEX_SECOND_APPOINTMENT.getOneBased());","lastModifiedDate":"2022-10-09"},{"lineNumber":80,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":81,"author":{"gitId":"guanzhou03"},"content":"        assertEquals(new CancelCommand(INDEX_FIRST_PERSON, INDEX_SECOND_APPOINTMENT), command);","lastModifiedDate":"2022-10-09"},{"lineNumber":82,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":83,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"JovonLim"},"content":"    public void parseCommand_delete() throws ParseException {","lastModifiedDate":"2022-10-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"JovonLim"},"content":"    public void parseCommand_book() throws ParseException {","lastModifiedDate":"2022-10-09"},{"lineNumber":93,"author":{"gitId":"JovonLim"},"content":"        Appointment appointment \u003d new Appointment(\"Cough\", \"2022-12-16 17:30\", false);","lastModifiedDate":"2022-10-08"},{"lineNumber":94,"author":{"gitId":"JovonLim"},"content":"        String str \u003d AppointmentUtil.getBookCommand(appointment);","lastModifiedDate":"2022-10-09"},{"lineNumber":95,"author":{"gitId":"JovonLim"},"content":"        BookCommand command \u003d (BookCommand) parser.parseCommand(str);","lastModifiedDate":"2022-10-09"},{"lineNumber":96,"author":{"gitId":"JovonLim"},"content":"        assertEquals(new BookCommand(INDEX_FIRST_PERSON, appointment), command);","lastModifiedDate":"2022-10-08"},{"lineNumber":97,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":98,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":99,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":100,"author":{"gitId":"JovonLim"},"content":"    public void parseCommand_editPatient() throws ParseException {","lastModifiedDate":"2022-10-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();","lastModifiedDate":"2017-06-27"},{"lineNumber":103,"author":{"gitId":"JovonLim"},"content":"        EditPatientCommand command \u003d (EditPatientCommand) parser.parseCommand(EditPatientCommand.COMMAND_WORD","lastModifiedDate":"2022-10-08"},{"lineNumber":104,"author":{"gitId":"JovonLim"},"content":"                + \" \" + EditPatientCommand.DESCRIPTOR_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()","lastModifiedDate":"2022-10-08"},{"lineNumber":105,"author":{"gitId":"JovonLim"},"content":"                + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2022-10-08"},{"lineNumber":106,"author":{"gitId":"JovonLim"},"content":"        assertEquals(new EditPatientCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2022-10-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":110,"author":{"gitId":"JovonLim"},"content":"    public void parseCommand_editAppointment() throws ParseException {","lastModifiedDate":"2022-10-09"},{"lineNumber":111,"author":{"gitId":"JovonLim"},"content":"        Appointment appointment \u003d new Appointment(\"Cough\", \"2022-12-16 17:30\", false);","lastModifiedDate":"2022-10-08"},{"lineNumber":112,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder(appointment).build();","lastModifiedDate":"2022-10-08"},{"lineNumber":113,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentCommand command \u003d (EditAppointmentCommand)","lastModifiedDate":"2022-10-08"},{"lineNumber":114,"author":{"gitId":"JovonLim"},"content":"                parser.parseCommand(EditAppointmentCommand.COMMAND_WORD","lastModifiedDate":"2022-10-08"},{"lineNumber":115,"author":{"gitId":"JovonLim"},"content":"                + \" \" + EditAppointmentCommand.DESCRIPTOR_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()","lastModifiedDate":"2022-10-08"},{"lineNumber":116,"author":{"gitId":"JovonLim"},"content":"                + \" \" + INDEX_FIRST_APPOINTMENT.getOneBased()","lastModifiedDate":"2022-10-08"},{"lineNumber":117,"author":{"gitId":"JovonLim"},"content":"                + \" \" + AppointmentUtil.getEditAppointmentDescriptorDetails(descriptor));","lastModifiedDate":"2022-10-08"},{"lineNumber":118,"author":{"gitId":"JovonLim"},"content":"        assertEquals(new EditAppointmentCommand(INDEX_FIRST_PERSON, INDEX_FIRST_APPOINTMENT, descriptor), command);","lastModifiedDate":"2022-10-08"},{"lineNumber":119,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":120,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":122,"author":{"gitId":"JovonLim"},"content":"    public void parseCommand_exit() throws ParseException {","lastModifiedDate":"2022-10-09"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":128,"author":{"gitId":"JovonLim"},"content":"    public void parseCommand_find() throws ParseException {","lastModifiedDate":"2022-10-09"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2017-06-27"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2017-06-12"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":136,"author":{"gitId":"JovonLim"},"content":"    public void parseCommand_help() throws ParseException {","lastModifiedDate":"2022-10-09"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":142,"author":{"gitId":"JovonLim"},"content":"    public void parseCommand_list() throws ParseException {","lastModifiedDate":"2022-10-09"},{"lineNumber":143,"author":{"gitId":"pwjj2000"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" patients\") instanceof ListCommand);","lastModifiedDate":"2022-10-06"},{"lineNumber":144,"author":{"gitId":"pwjj2000"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" appts\") instanceof ListCommand);","lastModifiedDate":"2022-10-06"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":147,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-09"},{"lineNumber":148,"author":{"gitId":"NicholasTYD"},"content":"    public void parseCommand_exitCommandCaseInsensitive_success() throws ParseException {","lastModifiedDate":"2022-10-09"},{"lineNumber":149,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD.toLowerCase()) instanceof ExitCommand);","lastModifiedDate":"2022-10-09"},{"lineNumber":150,"author":{"gitId":"NicholasTYD"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD.toUpperCase()) instanceof ExitCommand);","lastModifiedDate":"2022-10-09"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-10-09"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":163,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"NicholasTYD":22,"JovonLim":42,"-":90,"guanzhou03":7,"pwjj2000":2}},{"path":"src/test/java/seedu/address/logic/parser/BookCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-01"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-01"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-10-01"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-10-01"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-10-01"},{"lineNumber":7,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2022-10-06"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-01"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.BookCommand;","lastModifiedDate":"2022-10-01"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"public class BookCommandParserTest {","lastModifiedDate":"2022-10-01"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"    private final BookCommandParser parser \u003d new BookCommandParser();","lastModifiedDate":"2022-10-01"},{"lineNumber":16,"author":{"gitId":"pwjj2000"},"content":"    private final Appointment appointment \u003d","lastModifiedDate":"2022-10-06"},{"lineNumber":17,"author":{"gitId":"pwjj2000"},"content":"            new Appointment(\"Sore Throat\", \"2022-12-10 16:30\", false);","lastModifiedDate":"2022-10-06"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-01"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"    public void parse_validArgs_returnsBookCommand() {","lastModifiedDate":"2022-10-01"},{"lineNumber":21,"author":{"gitId":"pwjj2000"},"content":"        appointment.setPatient(ALICE);","lastModifiedDate":"2022-10-06"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"        assertParseSuccess(parser, \"1 r/Sore Throat d/2022-12-10 16:30\",","lastModifiedDate":"2022-10-01"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"                new BookCommand(INDEX_FIRST_PERSON, appointment));","lastModifiedDate":"2022-10-01"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-01"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"    public void parse_validArgs_returnsBookCommand1() {","lastModifiedDate":"2022-10-01"},{"lineNumber":28,"author":{"gitId":"pwjj2000"},"content":"        appointment.setPatient(ALICE);","lastModifiedDate":"2022-10-06"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"        assertParseSuccess(parser, \"1 r/Sore Throat d/16:30 2022-12-10\",","lastModifiedDate":"2022-10-01"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"                new BookCommand(INDEX_FIRST_PERSON, appointment));","lastModifiedDate":"2022-10-01"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-01"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2022-10-01"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"        assertParseFailure(parser, \"a r/Sore Throat d/2022-12-10 16:30\",","lastModifiedDate":"2022-10-01"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, BookCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-01"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-01"}],"authorContributionMap":{"JovonLim":33,"pwjj2000":5}},{"path":"src/test/java/seedu/address/logic/parser/EditAppointmentCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-08"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-08"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_AMY;","lastModifiedDate":"2022-10-08"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_BOB;","lastModifiedDate":"2022-10-08"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;","lastModifiedDate":"2022-10-08"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_REASON_DESC;","lastModifiedDate":"2022-10-08"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REASON_DESC_AMY;","lastModifiedDate":"2022-10-08"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.REASON_DESC_BOB;","lastModifiedDate":"2022-10-08"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_AMY;","lastModifiedDate":"2022-10-08"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_BOB;","lastModifiedDate":"2022-10-08"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REASON_AMY;","lastModifiedDate":"2022-10-08"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REASON_BOB;","lastModifiedDate":"2022-10-08"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-10-08"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-10-08"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-08"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2022-10-08"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-08"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-08"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-08"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditAppointmentCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditAppointmentCommand.EditAppointmentDescriptor;","lastModifiedDate":"2022-10-08"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-08"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"import seedu.address.testutil.EditAppointmentDescriptorBuilder;","lastModifiedDate":"2022-10-08"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"public class EditAppointmentCommandParserTest {","lastModifiedDate":"2022-10-08"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2022-10-08"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditAppointmentCommand.MESSAGE_USAGE);","lastModifiedDate":"2022-10-08"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"    private final EditAppointmentCommandParser parser \u003d new EditAppointmentCommandParser();","lastModifiedDate":"2022-10-08"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2022-10-08"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"        // no index specified","lastModifiedDate":"2022-10-08"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"        assertParseFailure(parser, VALID_REASON_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-10-08"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"        // no field specified","lastModifiedDate":"2022-10-08"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"        assertParseFailure(parser, \"1 1\", EditAppointmentCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2022-10-08"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"        // no index and no field specified","lastModifiedDate":"2022-10-08"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-10-08"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":46,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2022-10-08"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"        // negative index","lastModifiedDate":"2022-10-08"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"        assertParseFailure(parser, \"-5 1\" + REASON_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-10-08"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":52,"author":{"gitId":"JovonLim"},"content":"        // zero index","lastModifiedDate":"2022-10-08"},{"lineNumber":53,"author":{"gitId":"JovonLim"},"content":"        assertParseFailure(parser, \"0 0\" + REASON_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-10-08"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":55,"author":{"gitId":"JovonLim"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2022-10-08"},{"lineNumber":56,"author":{"gitId":"JovonLim"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-10-08"},{"lineNumber":57,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":58,"author":{"gitId":"JovonLim"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2022-10-08"},{"lineNumber":59,"author":{"gitId":"JovonLim"},"content":"        assertParseFailure(parser, \"1 1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2022-10-08"},{"lineNumber":60,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":61,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":62,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":63,"author":{"gitId":"JovonLim"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2022-10-08"},{"lineNumber":64,"author":{"gitId":"JovonLim"},"content":"        //invalid reason","lastModifiedDate":"2022-10-08"},{"lineNumber":65,"author":{"gitId":"JovonLim"},"content":"        assertParseFailure(parser, \"1 1\" + INVALID_REASON_DESC, Appointment.REASON_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-08"},{"lineNumber":66,"author":{"gitId":"JovonLim"},"content":"        // invalid date","lastModifiedDate":"2022-10-08"},{"lineNumber":67,"author":{"gitId":"JovonLim"},"content":"        assertParseFailure(parser, \"1 1\" + INVALID_DATE_DESC, Appointment.DATE_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-08"},{"lineNumber":68,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":69,"author":{"gitId":"JovonLim"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2022-10-08"},{"lineNumber":70,"author":{"gitId":"JovonLim"},"content":"        assertParseFailure(parser, \"1 1\" + INVALID_REASON_DESC + INVALID_DATE_DESC,","lastModifiedDate":"2022-10-08"},{"lineNumber":71,"author":{"gitId":"JovonLim"},"content":"                Appointment.REASON_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-08"},{"lineNumber":72,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":73,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":74,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":75,"author":{"gitId":"JovonLim"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2022-10-08"},{"lineNumber":76,"author":{"gitId":"JovonLim"},"content":"        Index patientIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2022-10-08"},{"lineNumber":77,"author":{"gitId":"JovonLim"},"content":"        Index appointmentIndex \u003d INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-08"},{"lineNumber":78,"author":{"gitId":"JovonLim"},"content":"        String userInput \u003d patientIndex.getOneBased() + \" \" + appointmentIndex.getOneBased()","lastModifiedDate":"2022-10-08"},{"lineNumber":79,"author":{"gitId":"JovonLim"},"content":"                + REASON_DESC_AMY + DATE_DESC_AMY;","lastModifiedDate":"2022-10-08"},{"lineNumber":80,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":81,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder().withReason(VALID_REASON_AMY)","lastModifiedDate":"2022-10-08"},{"lineNumber":82,"author":{"gitId":"JovonLim"},"content":"                .withDateTime(LocalDateTime.parse(VALID_DATE_AMY, Appointment.DATE_FORMATTER)).build();","lastModifiedDate":"2022-10-08"},{"lineNumber":83,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentCommand expectedCommand \u003d new EditAppointmentCommand(patientIndex, appointmentIndex, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":84,"author":{"gitId":"JovonLim"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-10-08"},{"lineNumber":85,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":86,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":87,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":88,"author":{"gitId":"JovonLim"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2022-10-08"},{"lineNumber":89,"author":{"gitId":"JovonLim"},"content":"        Index patientIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2022-10-08"},{"lineNumber":90,"author":{"gitId":"JovonLim"},"content":"        Index appointmentIndex \u003d INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-08"},{"lineNumber":91,"author":{"gitId":"JovonLim"},"content":"        String userInput \u003d patientIndex.getOneBased() + \" \" + appointmentIndex.getOneBased() + REASON_DESC_AMY;","lastModifiedDate":"2022-10-08"},{"lineNumber":92,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":93,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder()","lastModifiedDate":"2022-10-08"},{"lineNumber":94,"author":{"gitId":"JovonLim"},"content":"                .withReason(VALID_REASON_AMY).build();","lastModifiedDate":"2022-10-08"},{"lineNumber":95,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentCommand expectedCommand \u003d new EditAppointmentCommand(patientIndex, appointmentIndex, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":96,"author":{"gitId":"JovonLim"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-10-08"},{"lineNumber":97,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":98,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":99,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":100,"author":{"gitId":"JovonLim"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2022-10-08"},{"lineNumber":101,"author":{"gitId":"JovonLim"},"content":"        Index patientIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2022-10-08"},{"lineNumber":102,"author":{"gitId":"JovonLim"},"content":"        Index appointmentIndex \u003d INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-08"},{"lineNumber":103,"author":{"gitId":"JovonLim"},"content":"        String userInput \u003d patientIndex.getOneBased() + \" \" + appointmentIndex.getOneBased()","lastModifiedDate":"2022-10-08"},{"lineNumber":104,"author":{"gitId":"JovonLim"},"content":"                + REASON_DESC_AMY + DATE_DESC_AMY + REASON_DESC_BOB + DATE_DESC_BOB;","lastModifiedDate":"2022-10-08"},{"lineNumber":105,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":106,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder().withReason(VALID_REASON_BOB)","lastModifiedDate":"2022-10-08"},{"lineNumber":107,"author":{"gitId":"JovonLim"},"content":"                .withDateTime(LocalDateTime.parse(VALID_DATE_BOB, Appointment.DATE_FORMATTER)).build();","lastModifiedDate":"2022-10-08"},{"lineNumber":108,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentCommand expectedCommand \u003d new EditAppointmentCommand(patientIndex, appointmentIndex, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":109,"author":{"gitId":"JovonLim"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-10-08"},{"lineNumber":110,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":111,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":112,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":113,"author":{"gitId":"JovonLim"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2022-10-08"},{"lineNumber":114,"author":{"gitId":"JovonLim"},"content":"        Index patientIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2022-10-08"},{"lineNumber":115,"author":{"gitId":"JovonLim"},"content":"        Index appointmentIndex \u003d INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-08"},{"lineNumber":116,"author":{"gitId":"JovonLim"},"content":"        String userInput \u003d patientIndex.getOneBased() + \" \" + appointmentIndex.getOneBased()","lastModifiedDate":"2022-10-08"},{"lineNumber":117,"author":{"gitId":"JovonLim"},"content":"                + INVALID_REASON_DESC + REASON_DESC_BOB;","lastModifiedDate":"2022-10-08"},{"lineNumber":118,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":119,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentDescriptor descriptor \u003d new EditAppointmentDescriptorBuilder().withReason(VALID_REASON_BOB)","lastModifiedDate":"2022-10-08"},{"lineNumber":120,"author":{"gitId":"JovonLim"},"content":"                .build();","lastModifiedDate":"2022-10-08"},{"lineNumber":121,"author":{"gitId":"JovonLim"},"content":"        EditAppointmentCommand expectedCommand \u003d new EditAppointmentCommand(patientIndex, appointmentIndex, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":122,"author":{"gitId":"JovonLim"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2022-10-08"},{"lineNumber":123,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":124,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-08"}],"authorContributionMap":{"JovonLim":124}},{"path":"src/test/java/seedu/address/logic/parser/EditPatientCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-05-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditPatientCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditPatientCommand.EditPersonDescriptor;","lastModifiedDate":"2022-10-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-05-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-05-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-05-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-05-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"JovonLim"},"content":"public class EditPatientCommandParserTest {","lastModifiedDate":"2022-10-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPatientCommand.MESSAGE_USAGE);","lastModifiedDate":"2022-10-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"JovonLim"},"content":"    private EditPatientCommandParser parser \u003d new EditPatientCommandParser();","lastModifiedDate":"2022-10-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // no index specified","lastModifiedDate":"2017-05-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":61,"author":{"gitId":"JovonLim"},"content":"        assertParseFailure(parser, \"1\", EditPatientCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2022-10-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // no index and no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-06-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // negative index","lastModifiedDate":"2017-05-04"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // zero index","lastModifiedDate":"2017-06-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2018-09-22"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2018-09-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2018-09-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address","lastModifiedDate":"2018-09-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag","lastModifiedDate":"2018-09-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email","lastModifiedDate":"2017-05-04"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone","lastModifiedDate":"2017-05-04"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2017-05-04"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,","lastModifiedDate":"2017-05-04"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error","lastModifiedDate":"2017-05-04"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2017-05-04"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,","lastModifiedDate":"2017-07-06"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND","lastModifiedDate":"2017-06-06"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;","lastModifiedDate":"2017-06-06"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":117,"author":{"gitId":"JovonLim"},"content":"        EditPatientCommand expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":129,"author":{"gitId":"JovonLim"},"content":"        EditPatientCommand expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // name","lastModifiedDate":"2017-05-04"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":140,"author":{"gitId":"JovonLim"},"content":"        EditPatientCommand expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // phone","lastModifiedDate":"2017-05-04"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":146,"author":{"gitId":"JovonLim"},"content":"        expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        // email","lastModifiedDate":"2017-05-04"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":152,"author":{"gitId":"JovonLim"},"content":"        expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // address","lastModifiedDate":"2017-05-04"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":158,"author":{"gitId":"JovonLim"},"content":"        expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        // tags","lastModifiedDate":"2017-05-04"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;","lastModifiedDate":"2017-05-25"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":164,"author":{"gitId":"JovonLim"},"content":"        expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2017-08-15"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2017-05-25"},{"lineNumber":172,"author":{"gitId":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND","lastModifiedDate":"2017-05-25"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;","lastModifiedDate":"2017-05-25"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":176,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2017-05-04"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2017-05-04"},{"lineNumber":178,"author":{"gitId":"JovonLim"},"content":"        EditPatientCommand expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        // no other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":189,"author":{"gitId":"JovonLim"},"content":"        EditPatientCommand expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        // other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-05-25"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":196,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":197,"author":{"gitId":"JovonLim"},"content":"        expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;","lastModifiedDate":"2017-05-25"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();","lastModifiedDate":"2017-05-04"},{"lineNumber":207,"author":{"gitId":"JovonLim"},"content":"        EditPatientCommand expectedCommand \u003d new EditPatientCommand(targetIndex, descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":211,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"JovonLim":17,"-":194}},{"path":"src/test/java/seedu/address/logic/parser/ListCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pwjj2000"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-08"},{"lineNumber":2,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":3,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-08"},{"lineNumber":4,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-10-08"},{"lineNumber":5,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-10-08"},{"lineNumber":6,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":7,"author":{"gitId":"pwjj2000"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-08"},{"lineNumber":8,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":9,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":10,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":11,"author":{"gitId":"pwjj2000"},"content":"public class ListCommandParserTest {","lastModifiedDate":"2022-10-08"},{"lineNumber":12,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":13,"author":{"gitId":"pwjj2000"},"content":"    private final ListCommandParser parser \u003d new ListCommandParser();","lastModifiedDate":"2022-10-08"},{"lineNumber":14,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":15,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":16,"author":{"gitId":"pwjj2000"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2022-10-08"},{"lineNumber":17,"author":{"gitId":"pwjj2000"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-08"},{"lineNumber":18,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":19,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":20,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":21,"author":{"gitId":"pwjj2000"},"content":"    public void parse_validArgs_returnsListCommand() {","lastModifiedDate":"2022-10-08"},{"lineNumber":22,"author":{"gitId":"pwjj2000"},"content":"        ListCommand expectedListPatientsCommand \u003d","lastModifiedDate":"2022-10-08"},{"lineNumber":23,"author":{"gitId":"pwjj2000"},"content":"                new ListCommand(\"patients\");","lastModifiedDate":"2022-10-08"},{"lineNumber":24,"author":{"gitId":"pwjj2000"},"content":"        assertParseSuccess(parser, \"patients\", expectedListPatientsCommand);","lastModifiedDate":"2022-10-08"},{"lineNumber":25,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":26,"author":{"gitId":"pwjj2000"},"content":"        ListCommand expectedListAppointmentsCommand \u003d","lastModifiedDate":"2022-10-08"},{"lineNumber":27,"author":{"gitId":"pwjj2000"},"content":"                new ListCommand(\"appts\");","lastModifiedDate":"2022-10-08"},{"lineNumber":28,"author":{"gitId":"pwjj2000"},"content":"        assertParseSuccess(parser, \"appts\", expectedListAppointmentsCommand);","lastModifiedDate":"2022-10-08"},{"lineNumber":29,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":30,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":31,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":32,"author":{"gitId":"pwjj2000"},"content":"    public void parse_invalidArgs_returnsListCommand() {","lastModifiedDate":"2022-10-08"},{"lineNumber":33,"author":{"gitId":"pwjj2000"},"content":"        assertParseFailure(parser, \"wrong\",","lastModifiedDate":"2022-10-08"},{"lineNumber":34,"author":{"gitId":"pwjj2000"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-08"},{"lineNumber":35,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":36,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":37,"author":{"gitId":"pwjj2000"},"content":"}","lastModifiedDate":"2022-10-08"}],"authorContributionMap":{"pwjj2000":37}},{"path":"src/test/java/seedu/address/logic/parser/MarkCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-04"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-04"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-10-04"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-10-04"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-04"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-10-04"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_APPOINTMENT;","lastModifiedDate":"2022-10-04"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2022-10-04"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-04"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.commands.MarkCommand;","lastModifiedDate":"2022-10-04"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"class MarkCommandParserTest {","lastModifiedDate":"2022-10-04"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"    private final MarkCommandParser parser \u003d new MarkCommandParser();","lastModifiedDate":"2022-10-04"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"    private final String parseExceptionInvalidCommandMessage \u003d","lastModifiedDate":"2022-10-04"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkCommand.MESSAGE_USAGE);","lastModifiedDate":"2022-10-04"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_validArgs1_returnsMarkCommand() {","lastModifiedDate":"2022-10-04"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"        assertParseSuccess(parser, \"1 1\", new MarkCommand(INDEX_FIRST_PERSON, INDEX_FIRST_APPOINTMENT));","lastModifiedDate":"2022-10-04"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_validArgs2_returnsMarkCommand() {","lastModifiedDate":"2022-10-04"},{"lineNumber":28,"author":{"gitId":"NicholasTYD"},"content":"        assertParseSuccess(parser, \"  3  2  \", new MarkCommand(INDEX_THIRD_PERSON, INDEX_SECOND_APPOINTMENT));","lastModifiedDate":"2022-10-04"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_noArgs_throwsParseException() {","lastModifiedDate":"2022-10-04"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"        assertParseFailure(parser, \"\", parseExceptionInvalidCommandMessage);","lastModifiedDate":"2022-10-04"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_insufficientArgs_throwsParseException() {","lastModifiedDate":"2022-10-04"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"        assertParseFailure(parser, \"2\", parseExceptionInvalidCommandMessage);","lastModifiedDate":"2022-10-09"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":40,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2022-10-04"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"        assertParseFailure(parser, \"a\", parseExceptionInvalidCommandMessage);","lastModifiedDate":"2022-10-04"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":45,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":47,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_tooManyArgs_throwsParseException() {","lastModifiedDate":"2022-10-04"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"        assertParseFailure(parser, \"1 2 3 4 5\", parseExceptionInvalidCommandMessage);","lastModifiedDate":"2022-10-04"},{"lineNumber":49,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":50,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-04"}],"authorContributionMap":{"NicholasTYD":50}},{"path":"src/test/java/seedu/address/logic/parser/UnmarkCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-04"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-04"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-10-04"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-10-04"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-04"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-10-04"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_APPOINTMENT;","lastModifiedDate":"2022-10-04"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2022-10-04"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-04"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.commands.UnmarkCommand;","lastModifiedDate":"2022-10-04"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"class UnmarkCommandParserTest {","lastModifiedDate":"2022-10-04"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"    private final UnmarkCommandParser parser \u003d new UnmarkCommandParser();","lastModifiedDate":"2022-10-04"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"    private final String parseExceptionInvalidCommandMessage \u003d","lastModifiedDate":"2022-10-04"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnmarkCommand.MESSAGE_USAGE);","lastModifiedDate":"2022-10-04"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_validArgs1_returnsMarkCommand() {","lastModifiedDate":"2022-10-04"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"        assertParseSuccess(parser, \"1 1\", new UnmarkCommand(INDEX_FIRST_PERSON, INDEX_FIRST_APPOINTMENT));","lastModifiedDate":"2022-10-04"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_validArgs2_returnsMarkCommand() {","lastModifiedDate":"2022-10-04"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"        assertParseSuccess(parser, \"  3  2  \", new UnmarkCommand(INDEX_THIRD_PERSON, INDEX_SECOND_APPOINTMENT));","lastModifiedDate":"2022-10-04"},{"lineNumber":28,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_noArgs_throwsParseException() {","lastModifiedDate":"2022-10-04"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"        assertParseFailure(parser, \"\", parseExceptionInvalidCommandMessage);","lastModifiedDate":"2022-10-04"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_insufficientArgs_throwsParseException() {","lastModifiedDate":"2022-10-04"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"        assertParseFailure(parser, \"2\", parseExceptionInvalidCommandMessage);","lastModifiedDate":"2022-10-09"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":40,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2022-10-04"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"        assertParseFailure(parser, \"a\", parseExceptionInvalidCommandMessage);","lastModifiedDate":"2022-10-04"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":45,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_tooManyArgs_throwsParseException() {","lastModifiedDate":"2022-10-04"},{"lineNumber":47,"author":{"gitId":"NicholasTYD"},"content":"        assertParseFailure(parser, \"1 2 3 4 5\", parseExceptionInvalidCommandMessage);","lastModifiedDate":"2022-10-04"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":49,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-04"}],"authorContributionMap":{"NicholasTYD":49}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-12-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-04-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":12,"author":{"gitId":"pwjj2000"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":22,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2018-08-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class AddressBookTest {","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2016-12-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"pwjj2000"},"content":"        List\u003cAppointment\u003e newAppointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-06"},{"lineNumber":55,"author":{"gitId":"pwjj2000"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newAppointments);","lastModifiedDate":"2022-10-06"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2019-03-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints.","lastModifiedDate":"2018-03-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {","lastModifiedDate":"2016-12-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();","lastModifiedDate":"2018-01-10"},{"lineNumber":94,"author":{"gitId":"pwjj2000"},"content":"        private final ObservableList\u003cAppointment\u003e appointments \u003d FXCollections.observableArrayList();","lastModifiedDate":"2022-10-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":96,"author":{"gitId":"pwjj2000"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003cAppointment\u003e appointments) {","lastModifiedDate":"2022-10-06"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);","lastModifiedDate":"2016-12-24"},{"lineNumber":98,"author":{"gitId":"pwjj2000"},"content":"            this.appointments.setAll(appointments);","lastModifiedDate":"2022-10-06"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            return persons;","lastModifiedDate":"2016-12-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":105,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":106,"author":{"gitId":"pwjj2000"},"content":"        @Override","lastModifiedDate":"2022-10-06"},{"lineNumber":107,"author":{"gitId":"pwjj2000"},"content":"        public ObservableList\u003cAppointment\u003e getAppointmentList() {","lastModifiedDate":"2022-10-06"},{"lineNumber":108,"author":{"gitId":"pwjj2000"},"content":"            return appointments;","lastModifiedDate":"2022-10-06"},{"lineNumber":109,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"-":100,"pwjj2000":12}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2017-05-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2017-07-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;","lastModifiedDate":"2017-05-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2018-12-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":96,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":97,"author":{"gitId":"pwjj2000"},"content":"    public void getFilteredAppointmentList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2022-10-08"},{"lineNumber":98,"author":{"gitId":"pwjj2000"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredAppointmentList().remove(0));","lastModifiedDate":"2022-10-08"},{"lineNumber":99,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":100,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();","lastModifiedDate":"2017-07-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2018-08-06"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2017-05-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-19"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2017-06-12"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2018-08-09"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));","lastModifiedDate":"2018-11-27"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"-":132,"pwjj2000":5}},{"path":"src/test/java/seedu/address/model/person/AppointmentTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pwjj2000"},"content":"package seedu.address.model.person;","lastModifiedDate":"2022-10-08"},{"lineNumber":2,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":3,"author":{"gitId":"pwjj2000"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-08"},{"lineNumber":4,"author":{"gitId":"pwjj2000"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-08"},{"lineNumber":5,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-08"},{"lineNumber":6,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":7,"author":{"gitId":"pwjj2000"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-08"},{"lineNumber":8,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-09"},{"lineNumber":10,"author":{"gitId":"pwjj2000"},"content":"public class AppointmentTest {","lastModifiedDate":"2022-10-08"},{"lineNumber":11,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":12,"author":{"gitId":"pwjj2000"},"content":"    public void constructor_nullReason_throwsNullPointerException() {","lastModifiedDate":"2022-10-08"},{"lineNumber":13,"author":{"gitId":"pwjj2000"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Appointment(null, \"2022-09-09 16:00\", false));","lastModifiedDate":"2022-10-08"},{"lineNumber":14,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":15,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":16,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":17,"author":{"gitId":"pwjj2000"},"content":"    public void constructor_nullDateTime_throwsNullPointerException() {","lastModifiedDate":"2022-10-08"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Appointment(\"nose pain\", (String) null, false));","lastModifiedDate":"2022-10-09"},{"lineNumber":19,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":20,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":21,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":22,"author":{"gitId":"pwjj2000"},"content":"    public void isValidAppointment() {","lastModifiedDate":"2022-10-08"},{"lineNumber":23,"author":{"gitId":"pwjj2000"},"content":"        // invalid appointments","lastModifiedDate":"2022-10-08"},{"lineNumber":24,"author":{"gitId":"pwjj2000"},"content":"        assertFalse(Appointment.isValidReason(\"\")); // empty string for reason","lastModifiedDate":"2022-10-08"},{"lineNumber":25,"author":{"gitId":"pwjj2000"},"content":"        assertFalse(Appointment.isValidDateTime(\"\")); // empty string for date and time","lastModifiedDate":"2022-10-08"},{"lineNumber":26,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":27,"author":{"gitId":"pwjj2000"},"content":"        // valid appointments","lastModifiedDate":"2022-10-08"},{"lineNumber":28,"author":{"gitId":"pwjj2000"},"content":"        assertTrue(Appointment.isValidReason(\"ear pain\"));","lastModifiedDate":"2022-10-08"},{"lineNumber":29,"author":{"gitId":"pwjj2000"},"content":"        assertTrue(Appointment.isValidDateTime(\"2022-09-08 00:00\")); // follows date/time format","lastModifiedDate":"2022-10-08"},{"lineNumber":30,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":31,"author":{"gitId":"pwjj2000"},"content":"}","lastModifiedDate":"2022-10-08"}],"authorContributionMap":{"JovonLim":2,"pwjj2000":29}},{"path":"src/test/java/seedu/address/model/person/UniqueAppointmentListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pwjj2000"},"content":"package seedu.address.model.person;","lastModifiedDate":"2022-10-08"},{"lineNumber":2,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":3,"author":{"gitId":"pwjj2000"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2022-10-08"},{"lineNumber":4,"author":{"gitId":"pwjj2000"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-08"},{"lineNumber":5,"author":{"gitId":"pwjj2000"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-08"},{"lineNumber":6,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2022-10-08"},{"lineNumber":7,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.testutil.TypicalAppointments.APPOINTMENT_BENSON;","lastModifiedDate":"2022-10-08"},{"lineNumber":8,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.testutil.TypicalAppointments.APPOINTMENT_CARL;","lastModifiedDate":"2022-10-08"},{"lineNumber":9,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":10,"author":{"gitId":"pwjj2000"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-08"},{"lineNumber":11,"author":{"gitId":"pwjj2000"},"content":"import java.util.Collections;","lastModifiedDate":"2022-10-08"},{"lineNumber":12,"author":{"gitId":"pwjj2000"},"content":"import java.util.List;","lastModifiedDate":"2022-10-08"},{"lineNumber":13,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":14,"author":{"gitId":"pwjj2000"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-08"},{"lineNumber":15,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":16,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.person.exceptions.AppointmentNotFoundException;","lastModifiedDate":"2022-10-08"},{"lineNumber":17,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.person.exceptions.DuplicateAppointmentException;","lastModifiedDate":"2022-10-08"},{"lineNumber":18,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":19,"author":{"gitId":"pwjj2000"},"content":"public class UniqueAppointmentListTest {","lastModifiedDate":"2022-10-08"},{"lineNumber":20,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":21,"author":{"gitId":"pwjj2000"},"content":"    private final UniqueAppointmentList uniqueAppointmentList \u003d new UniqueAppointmentList();","lastModifiedDate":"2022-10-08"},{"lineNumber":22,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":23,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":24,"author":{"gitId":"pwjj2000"},"content":"    public void contains_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2022-10-08"},{"lineNumber":25,"author":{"gitId":"pwjj2000"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueAppointmentList.contains(null));","lastModifiedDate":"2022-10-08"},{"lineNumber":26,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":27,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":28,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":29,"author":{"gitId":"pwjj2000"},"content":"    public void contains_appointmentNotInList_returnsFalse() {","lastModifiedDate":"2022-10-08"},{"lineNumber":30,"author":{"gitId":"pwjj2000"},"content":"        assertFalse(uniqueAppointmentList.contains(APPOINTMENT_BENSON));","lastModifiedDate":"2022-10-08"},{"lineNumber":31,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":32,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":33,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":34,"author":{"gitId":"pwjj2000"},"content":"    public void contains_appointmentInList_returnsTrue() {","lastModifiedDate":"2022-10-08"},{"lineNumber":35,"author":{"gitId":"pwjj2000"},"content":"        uniqueAppointmentList.add(APPOINTMENT_BENSON);","lastModifiedDate":"2022-10-08"},{"lineNumber":36,"author":{"gitId":"pwjj2000"},"content":"        assertTrue(uniqueAppointmentList.contains(APPOINTMENT_BENSON));","lastModifiedDate":"2022-10-08"},{"lineNumber":37,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":38,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":39,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":40,"author":{"gitId":"pwjj2000"},"content":"    public void add_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2022-10-08"},{"lineNumber":41,"author":{"gitId":"pwjj2000"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueAppointmentList.add(null));","lastModifiedDate":"2022-10-08"},{"lineNumber":42,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":43,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":44,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":45,"author":{"gitId":"pwjj2000"},"content":"    public void add_duplicateAppointment_throwsDuplicateAppointmentException() {","lastModifiedDate":"2022-10-08"},{"lineNumber":46,"author":{"gitId":"pwjj2000"},"content":"        uniqueAppointmentList.add(APPOINTMENT_BENSON);","lastModifiedDate":"2022-10-08"},{"lineNumber":47,"author":{"gitId":"pwjj2000"},"content":"        assertThrows(DuplicateAppointmentException.class, () -\u003e uniqueAppointmentList.add(APPOINTMENT_BENSON));","lastModifiedDate":"2022-10-08"},{"lineNumber":48,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":49,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":50,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":51,"author":{"gitId":"pwjj2000"},"content":"    public void remove_nullAppointment_throwsNullPointerException() {","lastModifiedDate":"2022-10-08"},{"lineNumber":52,"author":{"gitId":"pwjj2000"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueAppointmentList.remove(null));","lastModifiedDate":"2022-10-08"},{"lineNumber":53,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":54,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":55,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":56,"author":{"gitId":"pwjj2000"},"content":"    public void remove_appointmentDoesNotExist_throwsAppointmentNotFoundException() {","lastModifiedDate":"2022-10-08"},{"lineNumber":57,"author":{"gitId":"pwjj2000"},"content":"        assertThrows(AppointmentNotFoundException.class, () -\u003e uniqueAppointmentList.remove(APPOINTMENT_BENSON));","lastModifiedDate":"2022-10-08"},{"lineNumber":58,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":59,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":60,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":61,"author":{"gitId":"pwjj2000"},"content":"    public void remove_existingAppointment_removesAppointment() {","lastModifiedDate":"2022-10-08"},{"lineNumber":62,"author":{"gitId":"pwjj2000"},"content":"        uniqueAppointmentList.add(APPOINTMENT_BENSON);","lastModifiedDate":"2022-10-08"},{"lineNumber":63,"author":{"gitId":"pwjj2000"},"content":"        uniqueAppointmentList.remove(APPOINTMENT_BENSON);","lastModifiedDate":"2022-10-08"},{"lineNumber":64,"author":{"gitId":"pwjj2000"},"content":"        UniqueAppointmentList expectedUniqueAppointmentList \u003d new UniqueAppointmentList();","lastModifiedDate":"2022-10-08"},{"lineNumber":65,"author":{"gitId":"pwjj2000"},"content":"        assertEquals(expectedUniqueAppointmentList, uniqueAppointmentList);","lastModifiedDate":"2022-10-08"},{"lineNumber":66,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":67,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":68,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":69,"author":{"gitId":"pwjj2000"},"content":"    public void setAppointments_nullUniqueAppointmentList_throwsNullPointerException() {","lastModifiedDate":"2022-10-08"},{"lineNumber":70,"author":{"gitId":"pwjj2000"},"content":"        assertThrows(NullPointerException.class, () -\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":71,"author":{"gitId":"pwjj2000"},"content":"                uniqueAppointmentList.setAppointments((UniqueAppointmentList) null));","lastModifiedDate":"2022-10-08"},{"lineNumber":72,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":73,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":74,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":75,"author":{"gitId":"pwjj2000"},"content":"    public void setPersons_uniqueAppointmentList_replacesOwnListWithProvidedUniqueAppointmentList() {","lastModifiedDate":"2022-10-08"},{"lineNumber":76,"author":{"gitId":"pwjj2000"},"content":"        uniqueAppointmentList.add(APPOINTMENT_BENSON);","lastModifiedDate":"2022-10-08"},{"lineNumber":77,"author":{"gitId":"pwjj2000"},"content":"        UniqueAppointmentList expectedUniqueAppointmentList \u003d new UniqueAppointmentList();","lastModifiedDate":"2022-10-08"},{"lineNumber":78,"author":{"gitId":"pwjj2000"},"content":"        expectedUniqueAppointmentList.add(APPOINTMENT_CARL);","lastModifiedDate":"2022-10-08"},{"lineNumber":79,"author":{"gitId":"pwjj2000"},"content":"        uniqueAppointmentList.setAppointments(expectedUniqueAppointmentList);","lastModifiedDate":"2022-10-08"},{"lineNumber":80,"author":{"gitId":"pwjj2000"},"content":"        assertEquals(expectedUniqueAppointmentList, uniqueAppointmentList);","lastModifiedDate":"2022-10-08"},{"lineNumber":81,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":82,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":83,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":84,"author":{"gitId":"pwjj2000"},"content":"    public void setAppointments_nullList_throwsNullPointerException() {","lastModifiedDate":"2022-10-08"},{"lineNumber":85,"author":{"gitId":"pwjj2000"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueAppointmentList.setAppointments((List\u003cAppointment\u003e) null));","lastModifiedDate":"2022-10-08"},{"lineNumber":86,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":87,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":88,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":89,"author":{"gitId":"pwjj2000"},"content":"    public void setAppointments_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2022-10-08"},{"lineNumber":90,"author":{"gitId":"pwjj2000"},"content":"        uniqueAppointmentList.add(APPOINTMENT_BENSON);","lastModifiedDate":"2022-10-08"},{"lineNumber":91,"author":{"gitId":"pwjj2000"},"content":"        List\u003cAppointment\u003e appointmentList \u003d Collections.singletonList(APPOINTMENT_CARL);","lastModifiedDate":"2022-10-08"},{"lineNumber":92,"author":{"gitId":"pwjj2000"},"content":"        uniqueAppointmentList.setAppointments(appointmentList);","lastModifiedDate":"2022-10-08"},{"lineNumber":93,"author":{"gitId":"pwjj2000"},"content":"        UniqueAppointmentList expectedUniqueAppointmentList \u003d new UniqueAppointmentList();","lastModifiedDate":"2022-10-08"},{"lineNumber":94,"author":{"gitId":"pwjj2000"},"content":"        expectedUniqueAppointmentList.add(APPOINTMENT_CARL);","lastModifiedDate":"2022-10-08"},{"lineNumber":95,"author":{"gitId":"pwjj2000"},"content":"        assertEquals(expectedUniqueAppointmentList, uniqueAppointmentList);","lastModifiedDate":"2022-10-08"},{"lineNumber":96,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":97,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":98,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":99,"author":{"gitId":"pwjj2000"},"content":"    public void setAppointments_listWithDuplicateAppointments_throwsDuplicateAppointmentException() {","lastModifiedDate":"2022-10-08"},{"lineNumber":100,"author":{"gitId":"pwjj2000"},"content":"        List\u003cAppointment\u003e listWithDuplicateAppointments \u003d Arrays.asList(APPOINTMENT_CARL, APPOINTMENT_CARL);","lastModifiedDate":"2022-10-08"},{"lineNumber":101,"author":{"gitId":"pwjj2000"},"content":"        assertThrows(DuplicateAppointmentException.class, () -\u003e","lastModifiedDate":"2022-10-08"},{"lineNumber":102,"author":{"gitId":"pwjj2000"},"content":"                uniqueAppointmentList.setAppointments(listWithDuplicateAppointments));","lastModifiedDate":"2022-10-08"},{"lineNumber":103,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":104,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":105,"author":{"gitId":"pwjj2000"},"content":"    @Test","lastModifiedDate":"2022-10-08"},{"lineNumber":106,"author":{"gitId":"pwjj2000"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2022-10-08"},{"lineNumber":107,"author":{"gitId":"pwjj2000"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2022-10-08"},{"lineNumber":108,"author":{"gitId":"pwjj2000"},"content":"                -\u003e uniqueAppointmentList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2022-10-08"},{"lineNumber":109,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":110,"author":{"gitId":"pwjj2000"},"content":"}","lastModifiedDate":"2022-10-08"}],"authorContributionMap":{"pwjj2000":110}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"    private static final String INVALID_REASON \u003d \"\";","lastModifiedDate":"2022-10-01"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"    private static final String INVALID_DATE \u003d \"2019-14-10 25:30\";","lastModifiedDate":"2022-10-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"    private static final List\u003cJsonAdaptedAppointment\u003e VALID_APPOINTMENTS \u003d BENSON.getAppointments().stream()","lastModifiedDate":"2022-10-01"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"            .map(JsonAdaptedAppointment::new)","lastModifiedDate":"2022-10-01"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2022-10-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_APPOINTMENTS,","lastModifiedDate":"2022-10-01"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"                        VALID_TAGS);","lastModifiedDate":"2022-10-01"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"JovonLim"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2022-10-01"},{"lineNumber":58,"author":{"gitId":"JovonLim"},"content":"                VALID_APPOINTMENTS, VALID_TAGS);","lastModifiedDate":"2022-10-01"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"JovonLim"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_APPOINTMENTS,","lastModifiedDate":"2022-10-01"},{"lineNumber":67,"author":{"gitId":"JovonLim"},"content":"                        VALID_TAGS);","lastModifiedDate":"2022-10-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"JovonLim"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2022-10-01"},{"lineNumber":75,"author":{"gitId":"JovonLim"},"content":"                VALID_APPOINTMENTS, VALID_TAGS);","lastModifiedDate":"2022-10-01"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"JovonLim"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_APPOINTMENTS,","lastModifiedDate":"2022-10-01"},{"lineNumber":84,"author":{"gitId":"JovonLim"},"content":"                        VALID_TAGS);","lastModifiedDate":"2022-10-01"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"JovonLim"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,","lastModifiedDate":"2022-10-01"},{"lineNumber":92,"author":{"gitId":"JovonLim"},"content":"                VALID_APPOINTMENTS, VALID_TAGS);","lastModifiedDate":"2022-10-01"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"JovonLim"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_APPOINTMENTS,","lastModifiedDate":"2022-10-01"},{"lineNumber":101,"author":{"gitId":"JovonLim"},"content":"                        VALID_TAGS);","lastModifiedDate":"2022-10-01"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"JovonLim"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,","lastModifiedDate":"2022-10-01"},{"lineNumber":109,"author":{"gitId":"JovonLim"},"content":"                VALID_APPOINTMENTS, VALID_TAGS);","lastModifiedDate":"2022-10-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2018-08-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":119,"author":{"gitId":"JovonLim"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_APPOINTMENTS,","lastModifiedDate":"2022-10-01"},{"lineNumber":120,"author":{"gitId":"JovonLim"},"content":"                        invalidTags);","lastModifiedDate":"2022-10-01"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":124,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-01"},{"lineNumber":125,"author":{"gitId":"JovonLim"},"content":"    public void toModelType_invalidReason_throwsIllegalValueException() {","lastModifiedDate":"2022-10-01"},{"lineNumber":126,"author":{"gitId":"JovonLim"},"content":"        List\u003cJsonAdaptedAppointment\u003e invalidAppointments \u003d new ArrayList\u003c\u003e(VALID_APPOINTMENTS);","lastModifiedDate":"2022-10-01"},{"lineNumber":127,"author":{"gitId":"NicholasTYD"},"content":"        invalidAppointments.add(new JsonAdaptedAppointment(INVALID_REASON, \"2019-12-16 16:30\", false));","lastModifiedDate":"2022-10-02"},{"lineNumber":128,"author":{"gitId":"JovonLim"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2022-10-01"},{"lineNumber":129,"author":{"gitId":"JovonLim"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidAppointments,","lastModifiedDate":"2022-10-01"},{"lineNumber":130,"author":{"gitId":"JovonLim"},"content":"                        VALID_TAGS);","lastModifiedDate":"2022-10-01"},{"lineNumber":131,"author":{"gitId":"JovonLim"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2022-10-01"},{"lineNumber":132,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":133,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":134,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-01"},{"lineNumber":135,"author":{"gitId":"JovonLim"},"content":"    public void toModelType_invalidDate_throwsIllegalValueException() {","lastModifiedDate":"2022-10-01"},{"lineNumber":136,"author":{"gitId":"JovonLim"},"content":"        List\u003cJsonAdaptedAppointment\u003e invalidAppointments \u003d new ArrayList\u003c\u003e(VALID_APPOINTMENTS);","lastModifiedDate":"2022-10-01"},{"lineNumber":137,"author":{"gitId":"NicholasTYD"},"content":"        invalidAppointments.add(new JsonAdaptedAppointment(\"Sore Throat\", INVALID_DATE, false));","lastModifiedDate":"2022-10-02"},{"lineNumber":138,"author":{"gitId":"JovonLim"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2022-10-01"},{"lineNumber":139,"author":{"gitId":"JovonLim"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidAppointments,","lastModifiedDate":"2022-10-01"},{"lineNumber":140,"author":{"gitId":"JovonLim"},"content":"                        VALID_TAGS);","lastModifiedDate":"2022-10-01"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2022-10-01"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":144,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"NicholasTYD":2,"JovonLim":38,"-":104}},{"path":"src/test/java/seedu/address/testutil/AppointmentUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.testutil;","lastModifiedDate":"2022-10-08"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-10-08"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REASON;","lastModifiedDate":"2022-10-08"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-10-08"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.BookCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditAppointmentCommand.EditAppointmentDescriptor;","lastModifiedDate":"2022-10-08"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-08"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"/**","lastModifiedDate":"2022-10-08"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":" * A utility class for Appointment.","lastModifiedDate":"2022-10-08"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":" */","lastModifiedDate":"2022-10-08"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"public class AppointmentUtil {","lastModifiedDate":"2022-10-08"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"    public static String getBookCommand(Appointment appointment) {","lastModifiedDate":"2022-10-08"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"        return BookCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()","lastModifiedDate":"2022-10-08"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"                + \" \" + getAppointmentDetails(appointment);","lastModifiedDate":"2022-10-08"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-08"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"     * Returns the part of command string for the given {@code appointment}\u0027s details.","lastModifiedDate":"2022-10-08"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-08"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"    public static String getAppointmentDetails(Appointment appointment) {","lastModifiedDate":"2022-10-08"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"        return PREFIX_REASON + \" \" + appointment.getReason() + \" \" + PREFIX_DATE","lastModifiedDate":"2022-10-08"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"                + \" \" + appointment.getDateTime().format(Appointment.DATE_FORMATTER);","lastModifiedDate":"2022-10-08"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-08"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"     * Returns the part of command string for the given {@code EditAppointmentDescriptor}\u0027s details.","lastModifiedDate":"2022-10-08"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-08"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"    public static String getEditAppointmentDescriptorDetails(EditAppointmentDescriptor descriptor) {","lastModifiedDate":"2022-10-08"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2022-10-08"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"        descriptor.getReason().ifPresent(reason -\u003e sb.append(PREFIX_REASON).append(reason).append(\" \"));","lastModifiedDate":"2022-10-08"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"        descriptor.getDateTime().ifPresent(dateTime -\u003e sb.append(PREFIX_DATE)","lastModifiedDate":"2022-10-08"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"                .append(dateTime.format(Appointment.DATE_FORMATTER)).append(\" \"));","lastModifiedDate":"2022-10-08"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"        return sb.toString();","lastModifiedDate":"2022-10-08"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-08"}],"authorContributionMap":{"JovonLim":40}},{"path":"src/test/java/seedu/address/testutil/EditAppointmentDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.testutil;","lastModifiedDate":"2022-10-08"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-08"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditAppointmentCommand;","lastModifiedDate":"2022-10-08"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditAppointmentCommand.EditAppointmentDescriptor;","lastModifiedDate":"2022-10-08"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-08"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"/**","lastModifiedDate":"2022-10-08"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":" * A utility class to help with building EditAppointmentDescriptor objects.","lastModifiedDate":"2022-10-08"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":" */","lastModifiedDate":"2022-10-08"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"public class EditAppointmentDescriptorBuilder {","lastModifiedDate":"2022-10-08"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"    private EditAppointmentDescriptor descriptor;","lastModifiedDate":"2022-10-08"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"    public EditAppointmentDescriptorBuilder() {","lastModifiedDate":"2022-10-08"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"        descriptor \u003d new EditAppointmentDescriptor();","lastModifiedDate":"2022-10-08"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"    public EditAppointmentDescriptorBuilder(EditAppointmentDescriptor descriptor) {","lastModifiedDate":"2022-10-08"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"        this.descriptor \u003d new EditAppointmentDescriptor(descriptor);","lastModifiedDate":"2022-10-08"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-08"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":"     * Returns an {@code EditAppointmentDescriptor} with fields containing {@code appointment}\u0027s details","lastModifiedDate":"2022-10-08"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-08"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"    public EditAppointmentDescriptorBuilder(Appointment appointment) {","lastModifiedDate":"2022-10-08"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"        descriptor \u003d new EditAppointmentDescriptor();","lastModifiedDate":"2022-10-08"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"        descriptor.setReason(appointment.getReason());","lastModifiedDate":"2022-10-08"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"        descriptor.setDateTime(appointment.getDateTime());","lastModifiedDate":"2022-10-08"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-08"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"     * Sets the reason of the {@code EditAppointmentDescriptor} that we are building.","lastModifiedDate":"2022-10-08"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-08"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"    public EditAppointmentDescriptorBuilder withReason(String reason) {","lastModifiedDate":"2022-10-08"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"        descriptor.setReason(reason);","lastModifiedDate":"2022-10-08"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"        return this;","lastModifiedDate":"2022-10-08"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-08"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"     * Sets the dateTime of the {@code EditAppointmentDescriptor} that we are building.","lastModifiedDate":"2022-10-08"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-08"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"    public EditAppointmentDescriptorBuilder withDateTime(LocalDateTime dateTime) {","lastModifiedDate":"2022-10-08"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"        descriptor.setDateTime(dateTime);","lastModifiedDate":"2022-10-08"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"        return this;","lastModifiedDate":"2022-10-08"},{"lineNumber":46,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-08"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"    public EditAppointmentCommand.EditAppointmentDescriptor build() {","lastModifiedDate":"2022-10-08"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"        return descriptor;","lastModifiedDate":"2022-10-08"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-08"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-08"}],"authorContributionMap":{"JovonLim":51}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-12-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-12-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-12-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditPatientCommand.EditPersonDescriptor;","lastModifiedDate":"2022-10-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-12-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-12-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-12-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-12-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-12-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        descriptor.setAddress(person.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        descriptor.setTags(person.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2017-12-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2017-12-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2017-12-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));","lastModifiedDate":"2017-12-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}","lastModifiedDate":"2017-07-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());","lastModifiedDate":"2017-12-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);","lastModifiedDate":"2017-12-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {","lastModifiedDate":"2017-05-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"JovonLim":1,"-":86}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-01"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"import java.util.List;","lastModifiedDate":"2022-10-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-01-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-01-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-04-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-01-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-04-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Address address;","lastModifiedDate":"2017-12-20"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"    private List\u003cAppointment\u003e listOfAppointments;","lastModifiedDate":"2022-10-02"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-12-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"        listOfAppointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2017-12-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();","lastModifiedDate":"2017-12-20"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"        listOfAppointments \u003d new ArrayList\u003c\u003e(personToCopy.getAppointments());","lastModifiedDate":"2022-10-01"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());","lastModifiedDate":"2017-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":78,"author":{"gitId":"WingKei67"},"content":"        this.address \u003d address.isEmpty() ? new Address() : new Address(address);","lastModifiedDate":"2022-10-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"WingKei67"},"content":"        this.email \u003d email.isEmpty() ? new Email() : new Email(email);","lastModifiedDate":"2022-10-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":98,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":99,"author":{"gitId":"JovonLim"},"content":"     * Adds the {@code Appointment} of the {@code Person} that we are building.","lastModifiedDate":"2022-10-01"},{"lineNumber":100,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":101,"author":{"gitId":"JovonLim"},"content":"    public PersonBuilder withAppointment(Appointment appointment) {","lastModifiedDate":"2022-10-01"},{"lineNumber":102,"author":{"gitId":"JovonLim"},"content":"        this.listOfAppointments.add(appointment);","lastModifiedDate":"2022-10-01"},{"lineNumber":103,"author":{"gitId":"JovonLim"},"content":"        return this;","lastModifiedDate":"2022-10-01"},{"lineNumber":104,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":105,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":106,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-02"},{"lineNumber":107,"author":{"gitId":"NicholasTYD"},"content":"     * Sets the List of {@code Appointment} of the {@code Person} that we are building.","lastModifiedDate":"2022-10-02"},{"lineNumber":108,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-02"},{"lineNumber":109,"author":{"gitId":"NicholasTYD"},"content":"    public PersonBuilder withAppointmentList(List\u003cAppointment\u003e listOfAppointments) {","lastModifiedDate":"2022-10-02"},{"lineNumber":110,"author":{"gitId":"NicholasTYD"},"content":"        this.listOfAppointments \u003d listOfAppointments;","lastModifiedDate":"2022-10-02"},{"lineNumber":111,"author":{"gitId":"NicholasTYD"},"content":"        return this;","lastModifiedDate":"2022-10-02"},{"lineNumber":112,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":113,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":114,"author":{"gitId":"pwjj2000"},"content":"    /**","lastModifiedDate":"2022-10-06"},{"lineNumber":115,"author":{"gitId":"pwjj2000"},"content":"     * Builds a {@code Person} object based on the info we have.","lastModifiedDate":"2022-10-06"},{"lineNumber":116,"author":{"gitId":"pwjj2000"},"content":"     *","lastModifiedDate":"2022-10-06"},{"lineNumber":117,"author":{"gitId":"pwjj2000"},"content":"     * @return A {@code Person}","lastModifiedDate":"2022-10-06"},{"lineNumber":118,"author":{"gitId":"pwjj2000"},"content":"     */","lastModifiedDate":"2022-10-06"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public Person build() {","lastModifiedDate":"2017-04-05"},{"lineNumber":120,"author":{"gitId":"pwjj2000"},"content":"        Person person \u003d new Person(name, phone, email, address, listOfAppointments, tags);","lastModifiedDate":"2022-10-06"},{"lineNumber":121,"author":{"gitId":"pwjj2000"},"content":"        for (Appointment appointment : listOfAppointments) {","lastModifiedDate":"2022-10-06"},{"lineNumber":122,"author":{"gitId":"pwjj2000"},"content":"            appointment.setPatient(person);","lastModifiedDate":"2022-10-06"},{"lineNumber":123,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":124,"author":{"gitId":"pwjj2000"},"content":"        return person;","lastModifiedDate":"2022-10-06"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"NicholasTYD":9,"JovonLim":13,"WingKei67":2,"-":93,"pwjj2000":10}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-04-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-03-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-03-29"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.EditPatientCommand.EditPersonDescriptor;","lastModifiedDate":"2022-10-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-03-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class for Person.","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonUtil {","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}.","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);","lastModifiedDate":"2017-03-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2017-04-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");","lastModifiedDate":"2017-06-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        person.getTags().stream().forEach(","lastModifiedDate":"2017-05-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")","lastModifiedDate":"2017-05-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2017-05-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details.","lastModifiedDate":"2018-03-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {","lastModifiedDate":"2018-03-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();","lastModifiedDate":"2018-03-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                sb.append(PREFIX_TAG);","lastModifiedDate":"2018-03-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2018-03-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-03-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"JovonLim":1,"-":61}},{"path":"src/test/java/seedu/address/testutil/TypicalAppointments.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pwjj2000"},"content":"package seedu.address.testutil;","lastModifiedDate":"2022-10-06"},{"lineNumber":2,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":3,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2022-10-06"},{"lineNumber":4,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;","lastModifiedDate":"2022-10-06"},{"lineNumber":5,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":6,"author":{"gitId":"pwjj2000"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-06"},{"lineNumber":7,"author":{"gitId":"pwjj2000"},"content":"import java.util.Arrays;","lastModifiedDate":"2022-10-06"},{"lineNumber":8,"author":{"gitId":"pwjj2000"},"content":"import java.util.List;","lastModifiedDate":"2022-10-06"},{"lineNumber":9,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":10,"author":{"gitId":"pwjj2000"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-06"},{"lineNumber":11,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":12,"author":{"gitId":"pwjj2000"},"content":"/**","lastModifiedDate":"2022-10-06"},{"lineNumber":13,"author":{"gitId":"pwjj2000"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2022-10-06"},{"lineNumber":14,"author":{"gitId":"pwjj2000"},"content":" */","lastModifiedDate":"2022-10-06"},{"lineNumber":15,"author":{"gitId":"pwjj2000"},"content":"public class TypicalAppointments {","lastModifiedDate":"2022-10-06"},{"lineNumber":16,"author":{"gitId":"pwjj2000"},"content":"    public static final Appointment APPOINTMENT_BENSON \u003d","lastModifiedDate":"2022-10-06"},{"lineNumber":17,"author":{"gitId":"pwjj2000"},"content":"            new Appointment(\"Sore Throat\", \"2019-12-10 16:30\", false);","lastModifiedDate":"2022-10-06"},{"lineNumber":18,"author":{"gitId":"pwjj2000"},"content":"    public static final Appointment APPOINTMENT_CARL \u003d","lastModifiedDate":"2022-10-06"},{"lineNumber":19,"author":{"gitId":"pwjj2000"},"content":"            new Appointment(\"Cough\", \"2010-12-31 23:45\", true);","lastModifiedDate":"2022-10-06"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"    public static final Appointment SECOND_APPOINTMENT_CARL \u003d","lastModifiedDate":"2022-10-09"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"            new Appointment(\"Sore Throat\", \"2019-12-10 16:30\", true);","lastModifiedDate":"2022-10-09"},{"lineNumber":22,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":23,"author":{"gitId":"pwjj2000"},"content":"    public static List\u003cAppointment\u003e getTypicalAppointments() {","lastModifiedDate":"2022-10-06"},{"lineNumber":24,"author":{"gitId":"pwjj2000"},"content":"        APPOINTMENT_BENSON.setPatient(BENSON);","lastModifiedDate":"2022-10-06"},{"lineNumber":25,"author":{"gitId":"pwjj2000"},"content":"        APPOINTMENT_CARL.setPatient(CARL);","lastModifiedDate":"2022-10-06"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"        SECOND_APPOINTMENT_CARL.setPatient(CARL);","lastModifiedDate":"2022-10-09"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(APPOINTMENT_CARL, APPOINTMENT_BENSON, SECOND_APPOINTMENT_CARL));","lastModifiedDate":"2022-10-09"},{"lineNumber":28,"author":{"gitId":"pwjj2000"},"content":"    }","lastModifiedDate":"2022-10-06"},{"lineNumber":29,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-10-06"},{"lineNumber":30,"author":{"gitId":"pwjj2000"},"content":"}","lastModifiedDate":"2022-10-06"}],"authorContributionMap":{"JovonLim":4,"pwjj2000":26}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-08-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);","lastModifiedDate":"2017-08-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);","lastModifiedDate":"2017-08-05"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"    public static final Index INDEX_FIRST_APPOINTMENT \u003d Index.fromOneBased(1);","lastModifiedDate":"2022-10-02"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"    public static final Index INDEX_SECOND_APPOINTMENT \u003d Index.fromOneBased(2);","lastModifiedDate":"2022-10-02"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"    public static final Index INDEX_THIRD_APPOINTMENT \u003d Index.fromOneBased(3);","lastModifiedDate":"2022-10-02"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-05"}],"authorContributionMap":{"NicholasTYD":3,"-":12}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-08-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-08-22"},{"lineNumber":13,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.testutil.TypicalAppointments.APPOINTMENT_BENSON;","lastModifiedDate":"2022-10-06"},{"lineNumber":14,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.testutil.TypicalAppointments.APPOINTMENT_CARL;","lastModifiedDate":"2022-10-06"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.testutil.TypicalAppointments.SECOND_APPOINTMENT_CARL;","lastModifiedDate":"2022-10-09"},{"lineNumber":16,"author":{"gitId":"pwjj2000"},"content":"import static seedu.address.testutil.TypicalAppointments.getTypicalAppointments;","lastModifiedDate":"2022-10-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2018-01-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            .withPhone(\"94351253\")","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .withTags(\"friends\").build();","lastModifiedDate":"2016-09-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2018-01-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")","lastModifiedDate":"2017-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")","lastModifiedDate":"2017-04-05"},{"lineNumber":38,"author":{"gitId":"pwjj2000"},"content":"            .withAppointment(APPOINTMENT_BENSON)","lastModifiedDate":"2022-10-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();","lastModifiedDate":"2016-09-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")","lastModifiedDate":"2018-01-10"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\")","lastModifiedDate":"2022-10-02"},{"lineNumber":42,"author":{"gitId":"pwjj2000"},"content":"            .withAppointment(APPOINTMENT_CARL)","lastModifiedDate":"2022-10-06"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"            .withAppointment(SECOND_APPOINTMENT_CARL)","lastModifiedDate":"2022-10-09"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"            .build();","lastModifiedDate":"2022-10-02"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")","lastModifiedDate":"2018-01-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();","lastModifiedDate":"2018-03-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")","lastModifiedDate":"2018-01-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")","lastModifiedDate":"2018-01-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")","lastModifiedDate":"2018-01-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")","lastModifiedDate":"2018-01-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")","lastModifiedDate":"2018-01-10"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2018-01-10"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2018-01-10"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)","lastModifiedDate":"2017-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            .build();","lastModifiedDate":"2017-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation","lastModifiedDate":"2017-07-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2017-08-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2017-08-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2017-08-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2018-01-10"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            ab.addPerson(person);","lastModifiedDate":"2017-08-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":79,"author":{"gitId":"pwjj2000"},"content":"        for (Appointment appointment : getTypicalAppointments()) {","lastModifiedDate":"2022-10-06"},{"lineNumber":80,"author":{"gitId":"pwjj2000"},"content":"            ab.addAppointment(appointment);","lastModifiedDate":"2022-10-06"},{"lineNumber":81,"author":{"gitId":"pwjj2000"},"content":"        }","lastModifiedDate":"2022-10-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {","lastModifiedDate":"2018-01-10"},{"lineNumber":86,"author":{"gitId":"JovonLim"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(new PersonBuilder(ALICE).build(),","lastModifiedDate":"2022-10-01"},{"lineNumber":87,"author":{"gitId":"JovonLim"},"content":"                new PersonBuilder(BENSON).build(),","lastModifiedDate":"2022-10-01"},{"lineNumber":88,"author":{"gitId":"JovonLim"},"content":"                new PersonBuilder(CARL).build(),","lastModifiedDate":"2022-10-01"},{"lineNumber":89,"author":{"gitId":"JovonLim"},"content":"                new PersonBuilder(DANIEL).build(),","lastModifiedDate":"2022-10-01"},{"lineNumber":90,"author":{"gitId":"JovonLim"},"content":"                new PersonBuilder(ELLE).build(),","lastModifiedDate":"2022-10-01"},{"lineNumber":91,"author":{"gitId":"JovonLim"},"content":"                new PersonBuilder(FIONA).build(),","lastModifiedDate":"2022-10-01"},{"lineNumber":92,"author":{"gitId":"JovonLim"},"content":"                new PersonBuilder(GEORGE).build()));","lastModifiedDate":"2022-10-01"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"NicholasTYD":2,"JovonLim":10,"-":74,"pwjj2000":8}}]
