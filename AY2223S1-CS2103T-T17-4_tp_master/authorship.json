[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"guanzhou03"},"content":"[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2223S1-CS2103T-T17-4/tp/actions)","lastModifiedDate":"2022-09-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"guanzhou03"},"content":"* **idENTify** is a desktop application targeted at admin staff working at an ENT department. ","lastModifiedDate":"2022-09-27"},{"lineNumber":6,"author":{"gitId":"guanzhou03"},"content":"Patients often have chronic conditions and our product will make it easier for the staff to keep track of these patients,","lastModifiedDate":"2022-09-27"},{"lineNumber":7,"author":{"gitId":"guanzhou03"},"content":"such as their appointment dates, the severity of their condition, their diagnosis, and allow admin staff to filter different types of patients. \u003cbr\u003e","lastModifiedDate":"2022-09-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  Example usages:","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"guanzhou03"},"content":"  * allows staff to check for upcoming appointments easily.","lastModifiedDate":"2022-09-27"},{"lineNumber":10,"author":{"gitId":"guanzhou03"},"content":"  * as a tracking tool for staff to easily find information and identify a patient.","lastModifiedDate":"2022-09-27"},{"lineNumber":11,"author":{"gitId":"guanzhou03"},"content":"  ","lastModifiedDate":"2022-09-27"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":"* For the detailed documentation of this project, see **[our project documentation](https://docs.google.com/document/d/1eVVKl_EY8rYMw-LWZk-CzaibCmX1WDeAZGJ3qqkGgoQ/edit)**.","lastModifiedDate":"2022-09-27"},{"lineNumber":14,"author":{"gitId":"guanzhou03"},"content":"* This project is based on the AddressBook-Level3 project created by the  [SE-EDU initiative](https://se-education.org#https://se-education.org/#contributing).","lastModifiedDate":"2022-09-27"}],"authorContributionMap":{"guanzhou03":10,"-":4}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`","lastModifiedDate":"2020-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"### Chen Guanzhou","lastModifiedDate":"2022-09-20"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":"\u003cimg src\u003d\"images/guanzhou03.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-09-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"guanzhou03"},"content":"[[github](https://github.com/guanzhou03)]","lastModifiedDate":"2022-09-20"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"[[portfolio](team/guanzhou03.md)]","lastModifiedDate":"2022-09-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"guanzhou03"},"content":"* Role: Team Lead","lastModifiedDate":"2022-09-20"},{"lineNumber":19,"author":{"gitId":"guanzhou03"},"content":"* Responsibilities: In charge of Model","lastModifiedDate":"2022-09-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"pwjj2000"},"content":"### Perry Wong Jun Jie","lastModifiedDate":"2022-09-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"pwjj2000"},"content":"\u003cimg src\u003d\"images/pwjj2000.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-09-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"pwjj2000"},"content":"[[github](https://github.com/pwjj2000)]","lastModifiedDate":"2022-09-20"},{"lineNumber":26,"author":{"gitId":"pwjj2000"},"content":"[[portfolio](team/pwjj2000.md)]","lastModifiedDate":"2022-09-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"pwjj2000"},"content":"* Role: Developer","lastModifiedDate":"2022-09-27"},{"lineNumber":29,"author":{"gitId":"pwjj2000"},"content":"* Responsibilities: Documentation and Testing","lastModifiedDate":"2022-09-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"### Lim Hong Wei, Jovon","lastModifiedDate":"2022-09-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"\u003cimg src\u003d\"images/jovonlim.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-09-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"[[github](http://github.com/jovonlim)] [[portfolio](team/jovonlim.md)]","lastModifiedDate":"2022-09-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"* Responsibilities: Storage","lastModifiedDate":"2022-09-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"NicholasTYD"},"content":"### Nicholas Tan","lastModifiedDate":"2022-09-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"\u003cimg src\u003d\"images/nicholastyd.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-09-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"[[github](https://github.com/NicholasTYD)]","lastModifiedDate":"2022-09-20"},{"lineNumber":45,"author":{"gitId":"NicholasTYD"},"content":"[[portfolio](team/nicholastyd.md)]","lastModifiedDate":"2022-09-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"* Responsibilities: UI","lastModifiedDate":"2022-09-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"WingKei67"},"content":"### Zhao Yao","lastModifiedDate":"2022-09-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"WingKei67"},"content":"\u003cimg src\u003d\"images/wingkei67.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2022-09-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"WingKei67"},"content":"[[github](http://github.com/wingkei67)]","lastModifiedDate":"2022-09-20"},{"lineNumber":55,"author":{"gitId":"WingKei67"},"content":"[[portfolio](team/wingkei67.md)]","lastModifiedDate":"2022-09-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"WingKei67"},"content":"* Responsibilities: Logic","lastModifiedDate":"2022-09-20"}],"authorContributionMap":{"NicholasTYD":6,"JovonLim":4,"WingKei67":5,"-":32,"guanzhou03":5,"pwjj2000":6}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* {list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well}","lastModifiedDate":"2021-07-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2021-07-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-07-31"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":83,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":84,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":85,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"**API** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2021-07-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `AddCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to add a person).","lastModifiedDate":"2021-07-31"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2021-07-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2021-07-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-07-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique tag, instead of each `Person` needing their own `Tag` objects.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/BetterModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"* can save both address book data and user preference data in json format, and read them back into corresponding objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/CommitActivityDiagram.png\" width\u003d\"250\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":247,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":248,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":249,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":250,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"pwjj2000"},"content":"**Target User Profile:**","lastModifiedDate":"2022-09-27"},{"lineNumber":259,"author":{"gitId":"pwjj2000"},"content":"* Tech savvy admin staff in Ear, Nose, Throat (ENT) department","lastModifiedDate":"2022-09-27"},{"lineNumber":260,"author":{"gitId":"pwjj2000"},"content":"* Has a need to manage a significant number of contacts","lastModifiedDate":"2022-09-27"},{"lineNumber":261,"author":{"gitId":"pwjj2000"},"content":"* Prefer desktop apps over other types","lastModifiedDate":"2022-09-27"},{"lineNumber":262,"author":{"gitId":"pwjj2000"},"content":"* Can type fast","lastModifiedDate":"2022-09-27"},{"lineNumber":263,"author":{"gitId":"pwjj2000"},"content":"* Prefer typing to mouse interactions","lastModifiedDate":"2022-09-27"},{"lineNumber":264,"author":{"gitId":"pwjj2000"},"content":"* Is reasonably comfortable using Command-Line Interface (CLI) apps","lastModifiedDate":"2022-09-27"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"pwjj2000"},"content":"**Value proposition:**","lastModifiedDate":"2022-09-27"},{"lineNumber":267,"author":{"gitId":"pwjj2000"},"content":"* ENT doctors treat patients who often have chronic conditions and our product will make it easier for the staff to keep track of these patients, such as their appointment dates, the severity of their condition, their diagnosis, etc","lastModifiedDate":"2022-09-27"},{"lineNumber":268,"author":{"gitId":"pwjj2000"},"content":"* ENT department offers a lot of services including head \u0026 neck surgery, voice clinic, and otology / skull base, etc; therefore, they need this app to filter different types of patients","lastModifiedDate":"2022-09-27"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"| Priority | As a …​                                    | I want to …​                   | So that I can…​                                                        |","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"JovonLim"},"content":"| `* * *`  | starting user                              | view a help screen             | understand how this application works                                  |","lastModifiedDate":"2022-09-27"},{"lineNumber":278,"author":{"gitId":"JovonLim"},"content":"| `* * *`  | user                                       | search idENTify                | find specific patients and information faster                          |","lastModifiedDate":"2022-09-27"},{"lineNumber":279,"author":{"gitId":"JovonLim"},"content":"| `* * *`  | user                                       | add a contact of the patient   | keep track of the patient\u0027s contact details                            |","lastModifiedDate":"2022-09-27"},{"lineNumber":280,"author":{"gitId":"JovonLim"},"content":"| `* * *`  | user                                       | delete a contact of the patient| remove the patient from my contacts when no longer needed              |","lastModifiedDate":"2022-09-27"},{"lineNumber":281,"author":{"gitId":"JovonLim"},"content":"| `* * *`  | user                                       | book an appointment for the patient | schedule the patient to meet the doctor                           |","lastModifiedDate":"2022-09-27"},{"lineNumber":282,"author":{"gitId":"JovonLim"},"content":"| `* * *`  | user                                       | cancel an appointment for the patient | ensure that the appointment schedule is updated and accurate    |","lastModifiedDate":"2022-09-27"},{"lineNumber":283,"author":{"gitId":"JovonLim"},"content":"| `* * *`  | user                                       | save the data of my contacts when I exit the app  | not lose the contacts when I open the app again     |","lastModifiedDate":"2022-09-27"},{"lineNumber":284,"author":{"gitId":"JovonLim"},"content":"| `* * *`  | user                                       | mark an appointment as done    |  know that the patient has already visited                             |","lastModifiedDate":"2022-09-28"},{"lineNumber":285,"author":{"gitId":"JovonLim"},"content":"| `* *`    | clumsy user                         | unmark an appointment as done  | change my appointment state without deleting and adding the appointment again |","lastModifiedDate":"2022-09-28"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"guanzhou03"},"content":"(For all use cases below, the **System** is the `idENTify` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2022-09-27"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"guanzhou03"},"content":"**Use Case: UC01 - Add a Patient** ","lastModifiedDate":"2022-09-27"},{"lineNumber":294,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":295,"author":{"gitId":"guanzhou03"},"content":"**Guarantees**: A patient contact is added into idENTify.","lastModifiedDate":"2022-09-27"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"guanzhou03"},"content":"1. User adds the patient by entering the command and the patient details.","lastModifiedDate":"2022-09-27"},{"lineNumber":300,"author":{"gitId":"guanzhou03"},"content":"2. idENTify adds the patient.","lastModifiedDate":"2022-09-27"},{"lineNumber":301,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":302,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":303,"author":{"gitId":"guanzhou03"},"content":"    Use case ends","lastModifiedDate":"2022-09-27"},{"lineNumber":304,"author":{"gitId":"-"},"content":"    ","lastModifiedDate":"2020-05-23"},{"lineNumber":305,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":306,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":307,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":308,"author":{"gitId":"guanzhou03"},"content":"* 1a. idENTify detects an error in the entered data.","lastModifiedDate":"2022-09-27"},{"lineNumber":309,"author":{"gitId":"guanzhou03"},"content":"  - 1a1. idENTify shows an error message.","lastModifiedDate":"2022-09-27"},{"lineNumber":310,"author":{"gitId":"guanzhou03"},"content":"  - 1a2. User enters new data.","lastModifiedDate":"2022-09-27"},{"lineNumber":311,"author":{"gitId":"guanzhou03"},"content":"  - Steps 1a1-1a2 are repeated until the data entered are correct.","lastModifiedDate":"2022-09-27"},{"lineNumber":312,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":313,"author":{"gitId":"guanzhou03"},"content":"  Use case resumes at step 2.","lastModifiedDate":"2022-09-27"},{"lineNumber":314,"author":{"gitId":"guanzhou03"},"content":"  ","lastModifiedDate":"2022-09-27"},{"lineNumber":315,"author":{"gitId":"guanzhou03"},"content":"**Use Case: UC02 - Show a list of patients**","lastModifiedDate":"2022-09-27"},{"lineNumber":316,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":317,"author":{"gitId":"guanzhou03"},"content":"**Guarantees**: A list of patients’ contact is shown.","lastModifiedDate":"2022-09-27"},{"lineNumber":318,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":319,"author":{"gitId":"guanzhou03"},"content":"**MSS**","lastModifiedDate":"2022-09-27"},{"lineNumber":320,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":321,"author":{"gitId":"guanzhou03"},"content":"1. User requests to list patients","lastModifiedDate":"2022-09-27"},{"lineNumber":322,"author":{"gitId":"guanzhou03"},"content":"2. idENTify shows a list of patients.","lastModifiedDate":"2022-09-27"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":324,"author":{"gitId":"guanzhou03"},"content":"    Use case ends","lastModifiedDate":"2022-09-27"},{"lineNumber":325,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":326,"author":{"gitId":"guanzhou03"},"content":"**Extensions**","lastModifiedDate":"2022-09-27"},{"lineNumber":327,"author":{"gitId":"guanzhou03"},"content":"- 2a. The list is empty.","lastModifiedDate":"2022-09-27"},{"lineNumber":328,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":329,"author":{"gitId":"guanzhou03"},"content":" ","lastModifiedDate":"2022-09-27"},{"lineNumber":330,"author":{"gitId":"guanzhou03"},"content":"     Use case ends","lastModifiedDate":"2022-09-27"},{"lineNumber":331,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":332,"author":{"gitId":"guanzhou03"},"content":"**Use Case: UC03 - Show a list of appointments**","lastModifiedDate":"2022-09-27"},{"lineNumber":333,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":334,"author":{"gitId":"guanzhou03"},"content":"**Guarantees**: A list of appointments is shown.","lastModifiedDate":"2022-09-27"},{"lineNumber":335,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":336,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":337,"author":{"gitId":"guanzhou03"},"content":"1. User requests to list appointments","lastModifiedDate":"2022-09-27"},{"lineNumber":338,"author":{"gitId":"guanzhou03"},"content":"2. idENTify shows a list of appointments","lastModifiedDate":"2022-09-27"},{"lineNumber":339,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":340,"author":{"gitId":"guanzhou03"},"content":"   Use case ends","lastModifiedDate":"2022-09-27"},{"lineNumber":341,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":342,"author":{"gitId":"guanzhou03"},"content":"**Extensions**","lastModifiedDate":"2022-09-27"},{"lineNumber":343,"author":{"gitId":"guanzhou03"},"content":"- 2a. The list is empty.","lastModifiedDate":"2022-09-27"},{"lineNumber":344,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":345,"author":{"gitId":"guanzhou03"},"content":"    Use case ends","lastModifiedDate":"2022-09-27"},{"lineNumber":346,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":347,"author":{"gitId":"guanzhou03"},"content":"**Use Case: UC04 - Delete a patient**","lastModifiedDate":"2022-09-27"},{"lineNumber":348,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":349,"author":{"gitId":"guanzhou03"},"content":"**Guarantees**: The patient will be deleted from the patient list only if the data entered are correct.","lastModifiedDate":"2022-09-27"},{"lineNumber":350,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":351,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2022-09-27"},{"lineNumber":352,"author":{"gitId":"JovonLim"},"content":"1. User gets the \u003cins\u003elist of patients(UC02)\u003cins\u003e.","lastModifiedDate":"2022-09-28"},{"lineNumber":353,"author":{"gitId":"guanzhou03"},"content":"2. User requests to delete a specific patient in the list.","lastModifiedDate":"2022-09-27"},{"lineNumber":354,"author":{"gitId":"guanzhou03"},"content":"3. idENTify deletes the patient.","lastModifiedDate":"2022-09-27"},{"lineNumber":355,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":356,"author":{"gitId":"guanzhou03"},"content":"    Use case ends","lastModifiedDate":"2022-09-27"},{"lineNumber":357,"author":{"gitId":"guanzhou03"},"content":"    ","lastModifiedDate":"2022-09-27"},{"lineNumber":358,"author":{"gitId":"NicholasTYD"},"content":"**Use Case: UC05 - find a patient**","lastModifiedDate":"2022-09-27"},{"lineNumber":359,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":360,"author":{"gitId":"NicholasTYD"},"content":"**Guarantees:**  A list of patients that matches the given query if applicable.","lastModifiedDate":"2022-09-27"},{"lineNumber":361,"author":{"gitId":"NicholasTYD"},"content":"1.  User requests to find a patient.","lastModifiedDate":"2022-09-27"},{"lineNumber":362,"author":{"gitId":"NicholasTYD"},"content":"2.  idENTify shows a list of patients that matches the given query.","lastModifiedDate":"2022-09-27"},{"lineNumber":363,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":364,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":366,"author":{"gitId":"-"},"content":"    ","lastModifiedDate":"2020-05-23"},{"lineNumber":367,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":368,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":369,"author":{"gitId":"NicholasTYD"},"content":"- 2a. The list is empty.","lastModifiedDate":"2022-09-27"},{"lineNumber":370,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":372,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":373,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":374,"author":{"gitId":"NicholasTYD"},"content":"**Use Case: UC06 -  Book an appointment**","lastModifiedDate":"2022-09-27"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":376,"author":{"gitId":"NicholasTYD"},"content":"**Guarantees:** An appointment is booked for the patient only if the data entered are correct.","lastModifiedDate":"2022-09-27"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":378,"author":{"gitId":"NicholasTYD"},"content":"**MSS**","lastModifiedDate":"2022-09-27"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":380,"author":{"gitId":"JovonLim"},"content":"1.  User gets the \u003cins\u003elist of patients(UC02)\u003cins\u003e.","lastModifiedDate":"2022-09-28"},{"lineNumber":381,"author":{"gitId":"NicholasTYD"},"content":"2.  User requests to book an appointment for a specified patient.","lastModifiedDate":"2022-09-27"},{"lineNumber":382,"author":{"gitId":"NicholasTYD"},"content":"3.  idENTify shows that an appointment has been booked for that patient.","lastModifiedDate":"2022-09-27"},{"lineNumber":383,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":384,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":385,"author":{"gitId":"NicholasTYD"},"content":"    Use case ends.","lastModifiedDate":"2022-09-27"},{"lineNumber":386,"author":{"gitId":"NicholasTYD"},"content":"    ","lastModifiedDate":"2022-09-27"},{"lineNumber":387,"author":{"gitId":"NicholasTYD"},"content":"**Extensions**  ","lastModifiedDate":"2022-09-27"},{"lineNumber":388,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":389,"author":{"gitId":"NicholasTYD"},"content":"* 2a.  idENTify detects an error in the entered data.","lastModifiedDate":"2022-09-27"},{"lineNumber":390,"author":{"gitId":"NicholasTYD"},"content":"  - 2a1. idENTify shows an error message.","lastModifiedDate":"2022-09-27"},{"lineNumber":391,"author":{"gitId":"NicholasTYD"},"content":"  - 2a2. User enters new data.","lastModifiedDate":"2022-09-27"},{"lineNumber":392,"author":{"gitId":"NicholasTYD"},"content":"  - Steps 2a1-2a2 are repeated until the data entered are correct.","lastModifiedDate":"2022-09-27"},{"lineNumber":393,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":394,"author":{"gitId":"NicholasTYD"},"content":"  Use case resumes at step 3.","lastModifiedDate":"2022-09-27"},{"lineNumber":395,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":396,"author":{"gitId":"NicholasTYD"},"content":"**Use Case: UC07 - cancel an appointment**","lastModifiedDate":"2022-09-27"},{"lineNumber":397,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":398,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":399,"author":{"gitId":"NicholasTYD"},"content":"**Guarantees:** The appointment will be deleted from the appointment list only if the data entered are correct.","lastModifiedDate":"2022-09-27"},{"lineNumber":400,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":401,"author":{"gitId":"NicholasTYD"},"content":"**MSS**","lastModifiedDate":"2022-09-27"},{"lineNumber":402,"author":{"gitId":"JovonLim"},"content":"1.  User gets the \u003cins\u003elist of appointments(UC03)\u003cins\u003e.","lastModifiedDate":"2022-09-28"},{"lineNumber":403,"author":{"gitId":"NicholasTYD"},"content":"2.  User requests to cancel a specific appointment in the list.","lastModifiedDate":"2022-09-27"},{"lineNumber":404,"author":{"gitId":"NicholasTYD"},"content":"3.  idENTify shows that the appointment has been cancelled.","lastModifiedDate":"2022-09-27"},{"lineNumber":405,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":406,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2022-09-27"},{"lineNumber":407,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":408,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2022-09-27"},{"lineNumber":409,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":410,"author":{"gitId":"NicholasTYD"},"content":"* 2a. idENTify detects an error in the entered data.","lastModifiedDate":"2022-09-27"},{"lineNumber":411,"author":{"gitId":"NicholasTYD"},"content":"  - 2a1. idENTify shows an error message.","lastModifiedDate":"2022-09-27"},{"lineNumber":412,"author":{"gitId":"NicholasTYD"},"content":"  - 2a2. User enters new data.","lastModifiedDate":"2022-09-27"},{"lineNumber":413,"author":{"gitId":"NicholasTYD"},"content":"  - Steps 2a1-2a2 are repeated until the data entered are correct.","lastModifiedDate":"2022-09-27"},{"lineNumber":414,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":415,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":416,"author":{"gitId":"NicholasTYD"},"content":"  Use case resumes at step 3.","lastModifiedDate":"2022-09-27"},{"lineNumber":417,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":418,"author":{"gitId":"NicholasTYD"},"content":"**Use Case: UC08 - mark an appointment**","lastModifiedDate":"2022-09-27"},{"lineNumber":419,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":420,"author":{"gitId":"NicholasTYD"},"content":"**Guarantees:** The appointment will be marked as done only if the data entered are correct.","lastModifiedDate":"2022-09-27"},{"lineNumber":421,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":422,"author":{"gitId":"NicholasTYD"},"content":"**MSS**","lastModifiedDate":"2022-09-27"},{"lineNumber":423,"author":{"gitId":"JovonLim"},"content":"1.  User gets the \u003cins\u003elist of appointments(UC03)\u003cins\u003e.","lastModifiedDate":"2022-09-28"},{"lineNumber":424,"author":{"gitId":"NicholasTYD"},"content":"2.  User requests to mark a specified appointment for a specified patient.","lastModifiedDate":"2022-09-27"},{"lineNumber":425,"author":{"gitId":"NicholasTYD"},"content":"3.  idENTify marks the selected appointment.","lastModifiedDate":"2022-09-27"},{"lineNumber":426,"author":{"gitId":"NicholasTYD"},"content":"    Use case ends.","lastModifiedDate":"2022-09-27"},{"lineNumber":427,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":428,"author":{"gitId":"NicholasTYD"},"content":"**Extensions**","lastModifiedDate":"2022-09-27"},{"lineNumber":429,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":430,"author":{"gitId":"NicholasTYD"},"content":"* 2a. idENTify detects an error in the entered data.","lastModifiedDate":"2022-09-27"},{"lineNumber":431,"author":{"gitId":"NicholasTYD"},"content":"  - 2a1. idENTify shows an error message.","lastModifiedDate":"2022-09-27"},{"lineNumber":432,"author":{"gitId":"NicholasTYD"},"content":"  - 2a2. User enters new data.","lastModifiedDate":"2022-09-27"},{"lineNumber":433,"author":{"gitId":"NicholasTYD"},"content":"  - Steps 2a1-2a2 are repeated until the data entered are correct.","lastModifiedDate":"2022-09-27"},{"lineNumber":434,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":435,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":436,"author":{"gitId":"NicholasTYD"},"content":"  Use case resumes at step 3.","lastModifiedDate":"2022-09-27"},{"lineNumber":437,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":438,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":439,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":440,"author":{"gitId":"WingKei67"},"content":"1. Should work on Windows, Linux, OS-X Operating System (OS) as long as it has Java 11.","lastModifiedDate":"2022-09-27"},{"lineNumber":441,"author":{"gitId":"-"},"content":"2. Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":442,"author":{"gitId":"WingKei67"},"content":"3. A user with above average typing speed for regular English text should be able to accomplish most of the tasks ","lastModifiedDate":"2022-09-27"},{"lineNumber":443,"author":{"gitId":"WingKei67"},"content":"   faster using commands than using the mouse.","lastModifiedDate":"2022-09-27"},{"lineNumber":444,"author":{"gitId":"WingKei67"},"content":"4. Should not be used with offensive language.","lastModifiedDate":"2022-09-27"},{"lineNumber":445,"author":{"gitId":"WingKei67"},"content":"5. Expected to adhere to a schedule that delivers a feature set every one month.","lastModifiedDate":"2022-09-27"},{"lineNumber":446,"author":{"gitId":"WingKei67"},"content":"6. Should respond to each command at most 1 second long.","lastModifiedDate":"2022-09-27"},{"lineNumber":447,"author":{"gitId":"WingKei67"},"content":"7. Not required to make calls to contacts.","lastModifiedDate":"2022-09-27"},{"lineNumber":448,"author":{"gitId":"WingKei67"},"content":"8. Should be able to store data locally in a human editable text file.","lastModifiedDate":"2022-09-27"},{"lineNumber":449,"author":{"gitId":"WingKei67"},"content":"9. Should not use Database Management System to store data.","lastModifiedDate":"2022-09-27"},{"lineNumber":450,"author":{"gitId":"WingKei67"},"content":"10. Product should be a result of evolving the given code base.","lastModifiedDate":"2022-09-27"},{"lineNumber":451,"author":{"gitId":"WingKei67"},"content":"11. Should be for a single user.","lastModifiedDate":"2022-09-27"},{"lineNumber":452,"author":{"gitId":"WingKei67"},"content":"12. Should be able to be used at any time (even beyond this semester)","lastModifiedDate":"2022-09-27"},{"lineNumber":453,"author":{"gitId":"WingKei67"},"content":"13. Should not exceed 100MB in size.","lastModifiedDate":"2022-09-27"},{"lineNumber":454,"author":{"gitId":"WingKei67"},"content":"14. Should not require external software to run.","lastModifiedDate":"2022-09-27"},{"lineNumber":455,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":456,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":457,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":458,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":459,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":460,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":461,"author":{"gitId":"WingKei67"},"content":"* **Regular English text**: Basic text that is keyed in by a user. Not code or not system admin commands.","lastModifiedDate":"2022-09-27"},{"lineNumber":462,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":463,"author":{"gitId":"WingKei67"},"content":"* **Operating System (OS)**: The low-level software that supports a computer\u0027s basic functions, common ones include ","lastModifiedDate":"2022-09-27"},{"lineNumber":464,"author":{"gitId":"WingKei67"},"content":"  Windows, macOS, Linux.","lastModifiedDate":"2022-09-27"},{"lineNumber":465,"author":{"gitId":"WingKei67"},"content":"* **Search string**: The text that a user uses to find a specific patient (such as a part of the patient’s name).","lastModifiedDate":"2022-09-27"},{"lineNumber":466,"author":{"gitId":"WingKei67"},"content":"* **Command-Line Interface (CLI)**: A text-based user interface (UI) used to run programs, manage computer files and ","lastModifiedDate":"2022-09-27"},{"lineNumber":467,"author":{"gitId":"WingKei67"},"content":"  interact with the computer.","lastModifiedDate":"2022-09-27"},{"lineNumber":468,"author":{"gitId":"WingKei67"},"content":"* **Graphical User Interface (GUI)**: A graphics-based operating system interface that uses icons, menus and a mouse ","lastModifiedDate":"2022-09-27"},{"lineNumber":469,"author":{"gitId":"WingKei67"},"content":"  (to click on the icon or pull down the menus) to manage interaction with the system.","lastModifiedDate":"2022-09-27"},{"lineNumber":470,"author":{"gitId":"WingKei67"},"content":"* **Main Success Scenario**: Describes the most straightforward interaction for a given use case, which assumes that nothing goes wrong.","lastModifiedDate":"2022-09-27"},{"lineNumber":471,"author":{"gitId":"WingKei67"},"content":"* **Actor**: A role played by a user. An actor can be a human or another system. Actors are not part of the system; they reside outside the system.","lastModifiedDate":"2022-09-27"},{"lineNumber":472,"author":{"gitId":"WingKei67"},"content":"* **Backward compatible**: Refers to a hardware or software system that can use the interface of an older version of the same product.","lastModifiedDate":"2022-09-27"},{"lineNumber":473,"author":{"gitId":"WingKei67"},"content":"* **Store data locally**: Allow the required data to be stored in a file in the user’s computer.","lastModifiedDate":"2022-09-27"},{"lineNumber":474,"author":{"gitId":"WingKei67"},"content":"* **Database Management Systems (DBMS)**: Software systems used to store, retrieve, and run queries on data. A DBMS serves as an interface between an end-user and a database, allowing users to create, read, update, and delete data in the database.","lastModifiedDate":"2022-09-27"},{"lineNumber":475,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":476,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":477,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":478,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":479,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":480,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":481,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":482,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":483,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":484,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":485,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":486,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":487,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":488,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":489,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":490,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":491,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":492,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":493,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":494,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":495,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":496,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":497,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":498,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":499,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":500,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":501,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":502,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":503,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":504,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":505,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":506,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":507,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":508,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":509,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":510,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":511,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":512,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":513,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":514,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":515,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":516,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":517,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":518,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":519,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":520,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":521,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":522,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":523,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":524,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":525,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":526,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":527,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":528,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"NicholasTYD":55,"JovonLim":13,"WingKei67":30,"-":369,"pwjj2000":10,"guanzhou03":51}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"IdENTify is a **desktop app for managing contacts, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, idENTify can get your contact management tasks done faster than traditional GUI apps.","lastModifiedDate":"2022-09-20"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc.","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken.","lastModifiedDate":"2021-02-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-02-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-02-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"### Viewing help : `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"Shows a message explaning how to access the help page.","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"Format: `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"### Adding a person: `add`","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"Adds a patient into idENTify.","lastModifiedDate":"2022-09-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"WingKei67"},"content":"Format: `Format: add n/NAME p/PHONE_NUMBER a/ADDRESS [e/EMAIL] [t/TAG]…​`","lastModifiedDate":"2022-09-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"A person can have any number of tags (including 0)","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"WingKei67"},"content":"* `add n/John Doe p/98765432 a/John street, block 123, #01-01`","lastModifiedDate":"2022-09-20"},{"lineNumber":58,"author":{"gitId":"WingKei67"},"content":"* `add n/Betsy Crowe p/88888888 a/Newgate Prison t/e`","lastModifiedDate":"2022-09-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"pwjj2000"},"content":"### Listing all patients/appointments : `list`","lastModifiedDate":"2022-09-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"pwjj2000"},"content":"Shows a list of all patients or appointments, depending on the parameter given.","lastModifiedDate":"2022-09-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"pwjj2000"},"content":"Format:","lastModifiedDate":"2022-09-20"},{"lineNumber":65,"author":{"gitId":"pwjj2000"},"content":"* `list patients`","lastModifiedDate":"2022-09-20"},{"lineNumber":66,"author":{"gitId":"pwjj2000"},"content":"* `list appts`","lastModifiedDate":"2022-09-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"### Editing a person : `edit`","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"NicholasTYD"},"content":"Edits an existing person into idENTify.","lastModifiedDate":"2022-09-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative.","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"* You can remove all the person’s tags by typing `t/` without","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    specifying any tags after it.","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"*  `edit 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags.","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"### Locating persons by name: `find`","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"Finds persons whose names contain any of the given keywords.","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"* The search is case-insensitive. e.g `hans` will match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"* Only the name is searched.","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search).","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"* `find John` returns `john` and `John Doe`","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"* `find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"### Deleting a person : `delete`","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"NicholasTYD"},"content":"Deletes the specified person from idENTify.","lastModifiedDate":"2022-09-20"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"Format: `delete INDEX`","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"* Deletes the person at the specified `INDEX`.","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"* The index refers to the index number shown in the displayed person list.","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"NicholasTYD"},"content":"* `list` followed by `delete 2` deletes the 2nd person in idENTify.","lastModifiedDate":"2022-09-20"},{"lineNumber":116,"author":{"gitId":"-"},"content":"* `find Betsy` followed by `delete 1` deletes the 1st person in the results of the `find` command.","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"JovonLim"},"content":"### Add an appointment:  `book`","lastModifiedDate":"2022-09-20"},{"lineNumber":119,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":120,"author":{"gitId":"JovonLim"},"content":"Books an appointment for the specified patient at INDEX with a given REASON and DATE.","lastModifiedDate":"2022-09-20"},{"lineNumber":121,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":122,"author":{"gitId":"JovonLim"},"content":"Format: `book INDEX r/REASON d/DATE`","lastModifiedDate":"2022-09-20"},{"lineNumber":123,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":124,"author":{"gitId":"JovonLim"},"content":"* The index refers to the index number shown in the displayed appointment list.","lastModifiedDate":"2022-09-20"},{"lineNumber":125,"author":{"gitId":"JovonLim"},"content":"* The index must be a positive integer 1, 2, 3, …​","lastModifiedDate":"2022-09-20"},{"lineNumber":126,"author":{"gitId":"JovonLim"},"content":"* Dates should be inputted in a YYYY-MM-DDTHH:MM format.","lastModifiedDate":"2022-09-20"},{"lineNumber":127,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":128,"author":{"gitId":"JovonLim"},"content":"Examples:","lastModifiedDate":"2022-09-20"},{"lineNumber":129,"author":{"gitId":"JovonLim"},"content":"* `Book 2 r/Ear Infection d/2022-12-31T18:00`","lastModifiedDate":"2022-09-20"},{"lineNumber":130,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":131,"author":{"gitId":"NicholasTYD"},"content":"### Mark an appointment as completed:  `mark`","lastModifiedDate":"2022-09-27"},{"lineNumber":132,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":133,"author":{"gitId":"NicholasTYD"},"content":"Marks a specified appointment `APPOINTMENT_INDEX` for a specified patient at `PATIENT_INDEX` as completed.","lastModifiedDate":"2022-10-02"},{"lineNumber":134,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":135,"author":{"gitId":"NicholasTYD"},"content":"Format: `mark PATIENT_INDEX APPOINTMENT_INDEX`","lastModifiedDate":"2022-10-02"},{"lineNumber":136,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":137,"author":{"gitId":"NicholasTYD"},"content":"* `PATIENT_INDEX` refers to the index number of the patient shown in the displayed patient list.","lastModifiedDate":"2022-10-02"},{"lineNumber":138,"author":{"gitId":"NicholasTYD"},"content":"* `APPOINTMENT_INDEX` refers to the index number of the appointment to be marked for the desired patient.","lastModifiedDate":"2022-10-02"},{"lineNumber":139,"author":{"gitId":"NicholasTYD"},"content":"* Values of `PATIENT_INDEX` and `APPOINTMENT_INDEX` **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2022-10-02"},{"lineNumber":140,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":141,"author":{"gitId":"NicholasTYD"},"content":"Examples:","lastModifiedDate":"2022-09-27"},{"lineNumber":142,"author":{"gitId":"NicholasTYD"},"content":"* `mark 3 1`","lastModifiedDate":"2022-09-27"},{"lineNumber":143,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":144,"author":{"gitId":"NicholasTYD"},"content":"### Unmark an appointment as incomplete:  `unmark`","lastModifiedDate":"2022-10-04"},{"lineNumber":145,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":146,"author":{"gitId":"NicholasTYD"},"content":"Unmarks a specified appointment `APPOINTMENT_INDEX` for a specified patient at `PATIENT_INDEX` as incomplete.","lastModifiedDate":"2022-10-04"},{"lineNumber":147,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":148,"author":{"gitId":"NicholasTYD"},"content":"Format: `unmark PATIENT_INDEX APPOINTMENT_INDEX`","lastModifiedDate":"2022-10-04"},{"lineNumber":149,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":150,"author":{"gitId":"NicholasTYD"},"content":"* `PATIENT_INDEX` refers to the index number of the patient shown in the displayed patient list.","lastModifiedDate":"2022-10-04"},{"lineNumber":151,"author":{"gitId":"NicholasTYD"},"content":"* `APPOINTMENT_INDEX` refers to the index number of the appointment to be unmarked for the desired patient.","lastModifiedDate":"2022-10-04"},{"lineNumber":152,"author":{"gitId":"NicholasTYD"},"content":"* Values of `PATIENT_INDEX` and `APPOINTMENT_INDEX` **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2022-10-04"},{"lineNumber":153,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":154,"author":{"gitId":"NicholasTYD"},"content":"Examples:","lastModifiedDate":"2022-10-04"},{"lineNumber":155,"author":{"gitId":"NicholasTYD"},"content":"* `unmark 4 2`","lastModifiedDate":"2022-10-04"},{"lineNumber":156,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":157,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"NicholasTYD"},"content":"Clears all entries from idENTify.","lastModifiedDate":"2022-09-20"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"Format: `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"guanzhou03"},"content":"### Cancel","lastModifiedDate":"2022-09-20"},{"lineNumber":170,"author":{"gitId":"guanzhou03"},"content":"Cancels a specified appointment from the specified patient’s appointment list. \u003cbr\u003e","lastModifiedDate":"2022-09-20"},{"lineNumber":171,"author":{"gitId":"guanzhou03"},"content":"Format: ```cancel PATIENT_INDEX APPOINTMENT_INDEX```","lastModifiedDate":"2022-09-20"},{"lineNumber":172,"author":{"gitId":"NicholasTYD"},"content":"- Deletes the appointment with `APPOINTMENT_INDEX` for the patient at the specified `PATIENT_INDEX`.","lastModifiedDate":"2022-09-27"},{"lineNumber":173,"author":{"gitId":"guanzhou03"},"content":"- The index refers to the index number shown in the displayed appointment list.","lastModifiedDate":"2022-09-20"},{"lineNumber":174,"author":{"gitId":"guanzhou03"},"content":"- The indexes must be a positive integer 1, 2, 3, …​","lastModifiedDate":"2022-09-20"},{"lineNumber":175,"author":{"gitId":"-"},"content":"### Saving the data","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"AddressBook data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"### Editing the data file","lastModifiedDate":"2021-02-04"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":181,"author":{"gitId":"NicholasTYD"},"content":"IdENTify data are saved as a JSON file `[JAR file location]/data/addressbook.json`. Advanced users are welcome to update data directly by editing that data file.","lastModifiedDate":"2022-09-20"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":183,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2021-02-04"},{"lineNumber":184,"author":{"gitId":"NicholasTYD"},"content":"If your changes to the data file makes its format invalid, idENTify will discard all data and start with an empty data file at the next run.","lastModifiedDate":"2022-09-20"},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":187,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"Action | Format, Examples","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"--------|------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"WingKei67"},"content":"**Add** | `add n/NAME p/PHONE_NUMBER a/ADDRESS [e/EMAIL] [t/TAG]…​` \u003cbr\u003e e.g., `add n/James Ho p/22224444 a/123, Clementi Rd, 1234665`","lastModifiedDate":"2022-09-20"},{"lineNumber":194,"author":{"gitId":"-"},"content":"**Clear** | `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"JovonLim"},"content":"**Book** | `book INDEX r/REASON d/DATE`\u003cbr\u003e e.g., `book 2 r/EarInfection d/2022-12-31T18:00`","lastModifiedDate":"2022-09-20"},{"lineNumber":198,"author":{"gitId":"JovonLim"},"content":"**Cancel** | `cancel PATIENT_INDEX APPOINTMENT_INDEX` \u003cbr\u003e e.g., `cancel 3 2`","lastModifiedDate":"2022-09-20"},{"lineNumber":199,"author":{"gitId":"JovonLim"},"content":"**List** | `list patients` \u003cbr\u003e `list appointments`","lastModifiedDate":"2022-09-20"},{"lineNumber":200,"author":{"gitId":"-"},"content":"**Help** | `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"JovonLim"},"content":"**Exit** | `exit`","lastModifiedDate":"2022-09-20"}],"authorContributionMap":{"NicholasTYD":35,"WingKei67":4,"JovonLim":17,"-":135,"pwjj2000":5,"guanzhou03":5}},{"path":"docs/team/guanzhou03.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"guanzhou03"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":2,"author":{"gitId":"guanzhou03"},"content":"layout: page","lastModifiedDate":"2022-09-20"},{"lineNumber":3,"author":{"gitId":"guanzhou03"},"content":"title: Chen Guanzhou\u0027s Project Portfolio Page","lastModifiedDate":"2022-09-20"},{"lineNumber":4,"author":{"gitId":"guanzhou03"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":5,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":6,"author":{"gitId":"guanzhou03"},"content":"## Project: idENTify","lastModifiedDate":"2022-09-20"},{"lineNumber":7,"author":{"gitId":"guanzhou03"},"content":"### Overview","lastModifiedDate":"2022-09-20"},{"lineNumber":8,"author":{"gitId":"guanzhou03"},"content":"idENTify - ENT doctors treat patients who often have chronic conditions and our product will make it easier for the staff to keep track of these patients, such as their appointment dates, the severity of their condition, their diagnosis, and allow admin staff to filter different types of patients","lastModifiedDate":"2022-09-20"},{"lineNumber":9,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":10,"author":{"gitId":"guanzhou03"},"content":"### Summary of Contributions","lastModifiedDate":"2022-09-20"},{"lineNumber":11,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"* to be added","lastModifiedDate":"2022-09-20"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":14,"author":{"gitId":"guanzhou03"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2022-09-20"}],"authorContributionMap":{"guanzhou03":14}},{"path":"docs/team/johndoe.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"guanzhou03"},"content":"title: Chen Guanzhou\u0027s Project Portfolio Page","lastModifiedDate":"2022-09-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"guanzhou03"},"content":"### Project: idENTify","lastModifiedDate":"2022-09-20"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"* **New Feature**:","lastModifiedDate":"2022-09-20"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":"* **Code contributed**: [RepoSense link](https://github.com/AY2223S1-CS2103T-T17-4/tp)","lastModifiedDate":"2022-09-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"* **Project management**:","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"guanzhou03"},"content":"* **Contributions to the UG**:","lastModifiedDate":"2022-09-20"},{"lineNumber":17,"author":{"gitId":"guanzhou03"},"content":"* **Contributions to the DG**:","lastModifiedDate":"2022-09-20"},{"lineNumber":18,"author":{"gitId":"guanzhou03"},"content":"* **Contributions to team-based tasks**:","lastModifiedDate":"2022-09-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"guanzhou03"},"content":"* **Review/mentoring contributions**:","lastModifiedDate":"2022-09-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"* **Documentation**:","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* **Community**:","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"* **Tools**:","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"guanzhou03"},"content":"* **Contributions beyond the project team**:","lastModifiedDate":"2022-09-20"}],"authorContributionMap":{"-":15,"guanzhou03":9}},{"path":"docs/team/jovonlim.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"layout: page","lastModifiedDate":"2022-09-20"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"title: Jovon\u0027s Project Portfolio Page","lastModifiedDate":"2022-09-20"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"### Project: idENTify","lastModifiedDate":"2022-09-20"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"Overview:","lastModifiedDate":"2022-09-20"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"ENT doctors treat patients who often have chronic conditions and our product will make it easier","lastModifiedDate":"2022-09-20"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"for the staff to keep track of these patients, such as their appointment dates, the severity of their condition,","lastModifiedDate":"2022-09-20"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"their diagnosis, and allow admin staff to filter different types of patients.","lastModifiedDate":"2022-09-20"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-09-20"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"Code contributed: [RepoSense link](https://github.com/JovonLim/tp)","lastModifiedDate":"2022-09-20"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"Enhancements implemented:","lastModifiedDate":"2022-09-20"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"Contributions to the UG:","lastModifiedDate":"2022-09-20"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"Contributions to the DG:","lastModifiedDate":"2022-09-20"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"Contributions to team-based tasks:","lastModifiedDate":"2022-09-20"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"Review/mentoring contributions:","lastModifiedDate":"2022-09-20"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"Contributions beyond the project team:","lastModifiedDate":"2022-09-20"}],"authorContributionMap":{"JovonLim":25}},{"path":"docs/team/nicholastyd.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"layout: page","lastModifiedDate":"2022-09-20"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"title: Nicholas Tan\u0027s Project Portfolio Page","lastModifiedDate":"2022-09-20"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"## Project: idENTify","lastModifiedDate":"2022-09-20"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"### Overview","lastModifiedDate":"2022-09-20"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"idENTify - ENT doctors treat patients who often have chronic conditions and our product will make it easier for the staff to keep track of these patients, such as their appointment dates, the severity of their condition, their diagnosis, and allow admin staff to filter different types of patients","lastModifiedDate":"2022-09-20"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"### Summary of Contributions","lastModifiedDate":"2022-09-20"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-09-27"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"Code contributed: [RepoSense link](https://github.com/NicholasTYD/tp)","lastModifiedDate":"2022-09-27"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"Enhancements implemented:","lastModifiedDate":"2022-09-27"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"Contributions to the UG:","lastModifiedDate":"2022-09-27"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"Contributions to the DG:","lastModifiedDate":"2022-09-27"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"Contributions to team-based tasks:","lastModifiedDate":"2022-09-27"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"Review/mentoring contributions:","lastModifiedDate":"2022-09-27"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-09-27"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"Contributions beyond the project team:","lastModifiedDate":"2022-09-27"}],"authorContributionMap":{"NicholasTYD":26}},{"path":"docs/team/pwjj2000.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"pwjj2000"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":2,"author":{"gitId":"pwjj2000"},"content":"layout: page","lastModifiedDate":"2022-09-20"},{"lineNumber":3,"author":{"gitId":"pwjj2000"},"content":"title: Perry Wong\u0027s Project Portfolio Page","lastModifiedDate":"2022-09-27"},{"lineNumber":4,"author":{"gitId":"pwjj2000"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":5,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":6,"author":{"gitId":"pwjj2000"},"content":"### Project: idENTify","lastModifiedDate":"2022-09-27"},{"lineNumber":7,"author":{"gitId":"pwjj2000"},"content":"Overview:","lastModifiedDate":"2022-09-27"},{"lineNumber":8,"author":{"gitId":"pwjj2000"},"content":"ENT doctors treat patients who often have chronic conditions and our product will make it easier","lastModifiedDate":"2022-09-27"},{"lineNumber":9,"author":{"gitId":"pwjj2000"},"content":"for the staff to keep track of these patients, such as their appointment dates, the severity of their condition,","lastModifiedDate":"2022-09-27"},{"lineNumber":10,"author":{"gitId":"pwjj2000"},"content":"their diagnosis, and allow admin staff to filter different types of patients.","lastModifiedDate":"2022-09-27"},{"lineNumber":11,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":12,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":13,"author":{"gitId":"pwjj2000"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-09-20"},{"lineNumber":14,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":15,"author":{"gitId":"pwjj2000"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":16,"author":{"gitId":"pwjj2000"},"content":"* **New Feature**: ","lastModifiedDate":"2022-09-27"},{"lineNumber":17,"author":{"gitId":"pwjj2000"},"content":"  * to be added soon","lastModifiedDate":"2022-09-27"},{"lineNumber":18,"author":{"gitId":"pwjj2000"},"content":"* **Code contributed**: [RepoSense link](https://github.com/pwjj2000/tp)","lastModifiedDate":"2022-09-27"},{"lineNumber":19,"author":{"gitId":"pwjj2000"},"content":"  * to be added soon","lastModifiedDate":"2022-09-27"},{"lineNumber":20,"author":{"gitId":"pwjj2000"},"content":"* **Enhancements implemented**:","lastModifiedDate":"2022-09-27"},{"lineNumber":21,"author":{"gitId":"pwjj2000"},"content":"  * to be added soon","lastModifiedDate":"2022-09-27"},{"lineNumber":22,"author":{"gitId":"pwjj2000"},"content":"* **Contributions to the UG**:","lastModifiedDate":"2022-09-27"},{"lineNumber":23,"author":{"gitId":"pwjj2000"},"content":"  * to be added soon","lastModifiedDate":"2022-09-27"},{"lineNumber":24,"author":{"gitId":"pwjj2000"},"content":"* **Contributions to the DG**:","lastModifiedDate":"2022-09-27"},{"lineNumber":25,"author":{"gitId":"pwjj2000"},"content":"  * to be added soon","lastModifiedDate":"2022-09-27"},{"lineNumber":26,"author":{"gitId":"pwjj2000"},"content":"* **Contributions to team-based tasks**:","lastModifiedDate":"2022-09-27"},{"lineNumber":27,"author":{"gitId":"pwjj2000"},"content":"* * to be added soon","lastModifiedDate":"2022-09-27"},{"lineNumber":28,"author":{"gitId":"pwjj2000"},"content":"* **Review/mentoring contributions**:","lastModifiedDate":"2022-09-27"},{"lineNumber":29,"author":{"gitId":"pwjj2000"},"content":"* * to be added soon","lastModifiedDate":"2022-09-27"},{"lineNumber":30,"author":{"gitId":"pwjj2000"},"content":"* **Contributions beyond the project team**:","lastModifiedDate":"2022-09-27"},{"lineNumber":31,"author":{"gitId":"pwjj2000"},"content":"*   * to be added soon","lastModifiedDate":"2022-09-27"}],"authorContributionMap":{"pwjj2000":31}},{"path":"docs/team/wingkei67.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"WingKei67"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":2,"author":{"gitId":"WingKei67"},"content":"layout: page","lastModifiedDate":"2022-09-20"},{"lineNumber":3,"author":{"gitId":"WingKei67"},"content":"title: Zhao Yao\u0027s Project Portfolio Page ","lastModifiedDate":"2022-09-20"},{"lineNumber":4,"author":{"gitId":"WingKei67"},"content":"---","lastModifiedDate":"2022-09-20"},{"lineNumber":5,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":6,"author":{"gitId":"WingKei67"},"content":"### Project: AddressBook Level 3","lastModifiedDate":"2022-09-20"},{"lineNumber":7,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":8,"author":{"gitId":"WingKei67"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2022-09-20"},{"lineNumber":9,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":10,"author":{"gitId":"WingKei67"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2022-09-20"},{"lineNumber":11,"author":{"gitId":"WingKei67"},"content":"","lastModifiedDate":"2022-09-20"},{"lineNumber":12,"author":{"gitId":"WingKei67"},"content":"* **New Feature**: ","lastModifiedDate":"2022-09-20"},{"lineNumber":13,"author":{"gitId":"WingKei67"},"content":"* **Code contributed**: [RepoSense link](https://github.com/AY2223S1-CS2103T-T17-4/tp)","lastModifiedDate":"2022-09-20"},{"lineNumber":14,"author":{"gitId":"WingKei67"},"content":"* **Project management**:","lastModifiedDate":"2022-09-20"},{"lineNumber":15,"author":{"gitId":"WingKei67"},"content":"* **Contributions to the README**:","lastModifiedDate":"2022-09-27"},{"lineNumber":16,"author":{"gitId":"WingKei67"},"content":"* - Update UI mock image.","lastModifiedDate":"2022-09-27"},{"lineNumber":17,"author":{"gitId":"WingKei67"},"content":"* **Contributions to the UG**:","lastModifiedDate":"2022-09-20"},{"lineNumber":18,"author":{"gitId":"WingKei67"},"content":"* - Add the part about add function to the UG","lastModifiedDate":"2022-09-27"},{"lineNumber":19,"author":{"gitId":"WingKei67"},"content":"* - Reviewed teammates\u0027 pull requests and resolved conflicts","lastModifiedDate":"2022-09-27"},{"lineNumber":20,"author":{"gitId":"WingKei67"},"content":"* **Contributions to the DG**:","lastModifiedDate":"2022-09-20"},{"lineNumber":21,"author":{"gitId":"WingKei67"},"content":"* **Contributions to team-based tasks**:","lastModifiedDate":"2022-09-20"},{"lineNumber":22,"author":{"gitId":"WingKei67"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2022-09-20"},{"lineNumber":23,"author":{"gitId":"WingKei67"},"content":"* **Review/mentoring contributions**:","lastModifiedDate":"2022-09-20"},{"lineNumber":24,"author":{"gitId":"WingKei67"},"content":"* - Reviewed teammates\u0027 pull requests and resolved conflicts","lastModifiedDate":"2022-09-27"},{"lineNumber":25,"author":{"gitId":"WingKei67"},"content":"* **Documentation**:","lastModifiedDate":"2022-09-20"},{"lineNumber":26,"author":{"gitId":"WingKei67"},"content":"* **Community**:","lastModifiedDate":"2022-09-20"},{"lineNumber":27,"author":{"gitId":"WingKei67"},"content":"* **Tools**:","lastModifiedDate":"2022-09-20"},{"lineNumber":28,"author":{"gitId":"WingKei67"},"content":"* **Contributions beyond the project team**:","lastModifiedDate":"2022-09-20"}],"authorContributionMap":{"WingKei67":28}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"    public static final String MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX \u003d","lastModifiedDate":"2022-10-04"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":"            \"The appointment index provided is invalid\";","lastModifiedDate":"2022-10-04"},{"lineNumber":14,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"-":13,"guanzhou03":4}},{"path":"src/main/java/seedu/address/logic/commands/BookCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-01"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-01"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-10-01"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REASON;","lastModifiedDate":"2022-10-01"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"import java.util.Comparator;","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"import java.util.List;","lastModifiedDate":"2022-10-01"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"import java.util.Set;","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-01"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-01"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-01"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-01"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-01"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"/**","lastModifiedDate":"2022-10-01"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":" * Books an appointment for the given patient.","lastModifiedDate":"2022-10-01"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":" */","lastModifiedDate":"2022-10-01"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"public class BookCommand extends Command {","lastModifiedDate":"2022-10-01"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"    public static final String COMMAND_WORD \u003d \"book\";","lastModifiedDate":"2022-10-01"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Books an appointment for the patient. \"","lastModifiedDate":"2022-10-01"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2022-10-01"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"            + PREFIX_REASON + \"REASON \"","lastModifiedDate":"2022-10-01"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"            + PREFIX_DATE + \"DATE \"","lastModifiedDate":"2022-10-01"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"            + \"Example: \" + COMMAND_WORD + \" 3\"","lastModifiedDate":"2022-10-01"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"            + PREFIX_REASON + \"sore throat \"","lastModifiedDate":"2022-10-01"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"            + PREFIX_DATE + \"2022-10-12 16:30\";","lastModifiedDate":"2022-10-01"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"    public static final String MESSAGE_BOOK_APPOINTMENT_SUCCESS \u003d \"Booked Appointment for Person: %1$s\";","lastModifiedDate":"2022-10-01"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"This person already booked an appointment at this time\";","lastModifiedDate":"2022-10-01"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"    private final Appointment appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"    private final Index targetIndex;","lastModifiedDate":"2022-10-01"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":46,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"     * Creates a BookCommand with the given index and appointment.","lastModifiedDate":"2022-10-01"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"     *","lastModifiedDate":"2022-10-01"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"     * @param targetIndex The given index to retrieve the patient.","lastModifiedDate":"2022-10-01"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"     * @param appointment The given appointment to book for the patient.","lastModifiedDate":"2022-10-01"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":52,"author":{"gitId":"JovonLim"},"content":"    public BookCommand(Index targetIndex, Appointment appointment) {","lastModifiedDate":"2022-10-01"},{"lineNumber":53,"author":{"gitId":"JovonLim"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2022-10-01"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2022-10-01"},{"lineNumber":55,"author":{"gitId":"JovonLim"},"content":"        this.appointment \u003d appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":56,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":57,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":58,"author":{"gitId":"JovonLim"},"content":"    @Override","lastModifiedDate":"2022-10-01"},{"lineNumber":59,"author":{"gitId":"JovonLim"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-01"},{"lineNumber":60,"author":{"gitId":"JovonLim"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-01"},{"lineNumber":61,"author":{"gitId":"JovonLim"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2022-10-01"},{"lineNumber":62,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":63,"author":{"gitId":"JovonLim"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2022-10-01"},{"lineNumber":64,"author":{"gitId":"JovonLim"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-01"},{"lineNumber":65,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":66,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":67,"author":{"gitId":"JovonLim"},"content":"        Person personToBookFor \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2022-10-01"},{"lineNumber":68,"author":{"gitId":"JovonLim"},"content":"        PersonBookDescriptor personBookDescriptor \u003d new PersonBookDescriptor(personToBookFor);","lastModifiedDate":"2022-10-03"},{"lineNumber":69,"author":{"gitId":"JovonLim"},"content":"        personBookDescriptor.bookAppointment(appointment);","lastModifiedDate":"2022-10-03"},{"lineNumber":70,"author":{"gitId":"JovonLim"},"content":"        Person personWithBooking \u003d personBookDescriptor.createPersonWithBooking();","lastModifiedDate":"2022-10-03"},{"lineNumber":71,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":72,"author":{"gitId":"JovonLim"},"content":"        model.setPerson(personToBookFor, personWithBooking);","lastModifiedDate":"2022-10-03"},{"lineNumber":73,"author":{"gitId":"JovonLim"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2022-10-03"},{"lineNumber":74,"author":{"gitId":"JovonLim"},"content":"        return new CommandResult(String.format(MESSAGE_BOOK_APPOINTMENT_SUCCESS, personWithBooking));","lastModifiedDate":"2022-10-03"},{"lineNumber":75,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":76,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":77,"author":{"gitId":"JovonLim"},"content":"    @Override","lastModifiedDate":"2022-10-01"},{"lineNumber":78,"author":{"gitId":"JovonLim"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-01"},{"lineNumber":79,"author":{"gitId":"JovonLim"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2022-10-01"},{"lineNumber":80,"author":{"gitId":"JovonLim"},"content":"                || (other instanceof BookCommand // instanceof handles nulls","lastModifiedDate":"2022-10-01"},{"lineNumber":81,"author":{"gitId":"JovonLim"},"content":"                \u0026\u0026 targetIndex.equals(((BookCommand) other).targetIndex)","lastModifiedDate":"2022-10-01"},{"lineNumber":82,"author":{"gitId":"JovonLim"},"content":"                \u0026\u0026 appointment.equals(((BookCommand) other).appointment)); // state check","lastModifiedDate":"2022-10-01"},{"lineNumber":83,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":84,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":85,"author":{"gitId":"JovonLim"},"content":"    private static class PersonBookDescriptor {","lastModifiedDate":"2022-10-03"},{"lineNumber":86,"author":{"gitId":"JovonLim"},"content":"        private final Name name;","lastModifiedDate":"2022-10-03"},{"lineNumber":87,"author":{"gitId":"JovonLim"},"content":"        private final Phone phone;","lastModifiedDate":"2022-10-03"},{"lineNumber":88,"author":{"gitId":"JovonLim"},"content":"        private final Email email;","lastModifiedDate":"2022-10-03"},{"lineNumber":89,"author":{"gitId":"JovonLim"},"content":"        private final Address address;","lastModifiedDate":"2022-10-03"},{"lineNumber":90,"author":{"gitId":"JovonLim"},"content":"        private final List\u003cAppointment\u003e appointments;","lastModifiedDate":"2022-10-03"},{"lineNumber":91,"author":{"gitId":"JovonLim"},"content":"        private final Set\u003cTag\u003e tags;","lastModifiedDate":"2022-10-03"},{"lineNumber":92,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":93,"author":{"gitId":"JovonLim"},"content":"        private PersonBookDescriptor(Person toCopy) {","lastModifiedDate":"2022-10-03"},{"lineNumber":94,"author":{"gitId":"JovonLim"},"content":"            name \u003d toCopy.getName();","lastModifiedDate":"2022-10-03"},{"lineNumber":95,"author":{"gitId":"JovonLim"},"content":"            phone \u003d toCopy.getPhone();","lastModifiedDate":"2022-10-03"},{"lineNumber":96,"author":{"gitId":"JovonLim"},"content":"            email \u003d toCopy.getEmail();","lastModifiedDate":"2022-10-03"},{"lineNumber":97,"author":{"gitId":"JovonLim"},"content":"            address \u003d toCopy.getAddress();","lastModifiedDate":"2022-10-03"},{"lineNumber":98,"author":{"gitId":"JovonLim"},"content":"            appointments \u003d new ArrayList\u003c\u003e(toCopy.getAppointments());","lastModifiedDate":"2022-10-03"},{"lineNumber":99,"author":{"gitId":"JovonLim"},"content":"            tags \u003d toCopy.getTags();","lastModifiedDate":"2022-10-03"},{"lineNumber":100,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":101,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":102,"author":{"gitId":"JovonLim"},"content":"        private boolean hasSameAppointment(Appointment appointment) {","lastModifiedDate":"2022-10-03"},{"lineNumber":103,"author":{"gitId":"JovonLim"},"content":"            return appointments.stream().anyMatch(x -\u003e x.isSameTime(appointment));","lastModifiedDate":"2022-10-03"},{"lineNumber":104,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":105,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":106,"author":{"gitId":"JovonLim"},"content":"        private void bookAppointment(Appointment appointment) throws CommandException {","lastModifiedDate":"2022-10-03"},{"lineNumber":107,"author":{"gitId":"JovonLim"},"content":"            if (hasSameAppointment(appointment)) {","lastModifiedDate":"2022-10-03"},{"lineNumber":108,"author":{"gitId":"JovonLim"},"content":"                throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);","lastModifiedDate":"2022-10-03"},{"lineNumber":109,"author":{"gitId":"JovonLim"},"content":"            }","lastModifiedDate":"2022-10-03"},{"lineNumber":110,"author":{"gitId":"JovonLim"},"content":"            appointments.add(appointment);","lastModifiedDate":"2022-10-03"},{"lineNumber":111,"author":{"gitId":"JovonLim"},"content":"            appointments.sort(Comparator.comparing(Appointment::getDateTime));","lastModifiedDate":"2022-10-03"},{"lineNumber":112,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":113,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":114,"author":{"gitId":"JovonLim"},"content":"        private Person createPersonWithBooking() {","lastModifiedDate":"2022-10-03"},{"lineNumber":115,"author":{"gitId":"JovonLim"},"content":"            return new Person(name, phone, email, address, appointments, tags);","lastModifiedDate":"2022-10-03"},{"lineNumber":116,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-03"},{"lineNumber":117,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":118,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-01"}],"authorContributionMap":{"JovonLim":118}},{"path":"src/main/java/seedu/address/logic/commands/CancelCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"guanzhou03"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-01"},{"lineNumber":2,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":3,"author":{"gitId":"guanzhou03"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-04"},{"lineNumber":4,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":5,"author":{"gitId":"guanzhou03"},"content":"import java.util.List;","lastModifiedDate":"2022-10-04"},{"lineNumber":6,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":7,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-01"},{"lineNumber":8,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-01"},{"lineNumber":9,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-01"},{"lineNumber":10,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-01"},{"lineNumber":11,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-01"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":14,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":15,"author":{"gitId":"guanzhou03"},"content":"/**","lastModifiedDate":"2022-10-01"},{"lineNumber":16,"author":{"gitId":"guanzhou03"},"content":" * A class that encapsulates the functionality of cancelling a patient\u0027s appointment.","lastModifiedDate":"2022-10-01"},{"lineNumber":17,"author":{"gitId":"guanzhou03"},"content":" */","lastModifiedDate":"2022-10-01"},{"lineNumber":18,"author":{"gitId":"guanzhou03"},"content":"public class CancelCommand extends Command {","lastModifiedDate":"2022-10-01"},{"lineNumber":19,"author":{"gitId":"guanzhou03"},"content":"    public static final String COMMAND_WORD \u003d \"cancel\";","lastModifiedDate":"2022-10-01"},{"lineNumber":20,"author":{"gitId":"guanzhou03"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Cancels an appointment for the patient. \"","lastModifiedDate":"2022-10-01"},{"lineNumber":21,"author":{"gitId":"guanzhou03"},"content":"            + \"Parameters: patientIndex (must be a positive integer)\\n\"","lastModifiedDate":"2022-10-01"},{"lineNumber":22,"author":{"gitId":"guanzhou03"},"content":"            + \"apptIndex (must be a valid appointment index)\"","lastModifiedDate":"2022-10-01"},{"lineNumber":23,"author":{"gitId":"guanzhou03"},"content":"            + \"Example: \" + COMMAND_WORD + \" 3\"","lastModifiedDate":"2022-10-01"},{"lineNumber":24,"author":{"gitId":"guanzhou03"},"content":"            + \" 2\";","lastModifiedDate":"2022-10-01"},{"lineNumber":25,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":26,"author":{"gitId":"guanzhou03"},"content":"    public static final String MESSAGE_CANCEL_APPOINTMENT_SUCCESS \u003d \"Cancelled appointment for: \";","lastModifiedDate":"2022-10-04"},{"lineNumber":27,"author":{"gitId":"guanzhou03"},"content":"    private final Index patientIndex;","lastModifiedDate":"2022-10-01"},{"lineNumber":28,"author":{"gitId":"guanzhou03"},"content":"    private final Index apptIndex;","lastModifiedDate":"2022-10-01"},{"lineNumber":29,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":30,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":31,"author":{"gitId":"guanzhou03"},"content":"     * Creates a cancel command that specifies the patient and appointment index.","lastModifiedDate":"2022-10-01"},{"lineNumber":32,"author":{"gitId":"guanzhou03"},"content":"     * @param patientIndex The index of the patient that we want to cancel the appointment.","lastModifiedDate":"2022-10-01"},{"lineNumber":33,"author":{"gitId":"guanzhou03"},"content":"     * @param apptIndex The index of the appointment we want to cancel for that particular patient.","lastModifiedDate":"2022-10-01"},{"lineNumber":34,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":35,"author":{"gitId":"guanzhou03"},"content":"    public CancelCommand(Index patientIndex, Index apptIndex) {","lastModifiedDate":"2022-10-01"},{"lineNumber":36,"author":{"gitId":"guanzhou03"},"content":"        this.patientIndex \u003d patientIndex;","lastModifiedDate":"2022-10-01"},{"lineNumber":37,"author":{"gitId":"guanzhou03"},"content":"        this.apptIndex \u003d apptIndex;","lastModifiedDate":"2022-10-01"},{"lineNumber":38,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":39,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":40,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":41,"author":{"gitId":"guanzhou03"},"content":"     * Removes the appointment in the specified index for the specified patient.","lastModifiedDate":"2022-10-01"},{"lineNumber":42,"author":{"gitId":"guanzhou03"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2022-10-01"},{"lineNumber":43,"author":{"gitId":"guanzhou03"},"content":"     * @return Feedback to the user in the form of a success message.","lastModifiedDate":"2022-10-01"},{"lineNumber":44,"author":{"gitId":"guanzhou03"},"content":"     * @throws CommandException If the input index is out of valid range.","lastModifiedDate":"2022-10-01"},{"lineNumber":45,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":46,"author":{"gitId":"guanzhou03"},"content":"    @Override","lastModifiedDate":"2022-10-01"},{"lineNumber":47,"author":{"gitId":"guanzhou03"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-01"},{"lineNumber":48,"author":{"gitId":"guanzhou03"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-01"},{"lineNumber":49,"author":{"gitId":"guanzhou03"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2022-10-01"},{"lineNumber":50,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":51,"author":{"gitId":"guanzhou03"},"content":"        if (patientIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2022-10-01"},{"lineNumber":52,"author":{"gitId":"guanzhou03"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-01"},{"lineNumber":53,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":54,"author":{"gitId":"guanzhou03"},"content":"        Person patientToCancelAppt \u003d lastShownList.get(patientIndex.getZeroBased());","lastModifiedDate":"2022-10-01"},{"lineNumber":55,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":56,"author":{"gitId":"guanzhou03"},"content":"        if (patientToCancelAppt.getAppointments().size() \u003c\u003d apptIndex.getZeroBased()) {","lastModifiedDate":"2022-10-01"},{"lineNumber":57,"author":{"gitId":"guanzhou03"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-01"},{"lineNumber":58,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":59,"author":{"gitId":"guanzhou03"},"content":"        Appointment cancelledAppt \u003d patientToCancelAppt.cancelAppointment(apptIndex.getZeroBased());","lastModifiedDate":"2022-10-01"},{"lineNumber":60,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":61,"author":{"gitId":"guanzhou03"},"content":"        return new CommandResult(MESSAGE_CANCEL_APPOINTMENT_SUCCESS + patientToCancelAppt.getName());","lastModifiedDate":"2022-10-04"},{"lineNumber":62,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":63,"author":{"gitId":"guanzhou03"},"content":"}","lastModifiedDate":"2022-10-01"}],"authorContributionMap":{"guanzhou03":63}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-12-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-01-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-01-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-12-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2016-12-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2016-12-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2016-12-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2016-12-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2016-12-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book.","lastModifiedDate":"2016-12-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \"","lastModifiedDate":"2016-12-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \"","lastModifiedDate":"2018-04-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";","lastModifiedDate":"2016-12-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2016-12-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit","lastModifiedDate":"2017-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2016-12-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2017-08-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2018-01-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2016-12-26"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":102,"author":{"gitId":"JovonLim"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, personToEdit.getAppointments(),","lastModifiedDate":"2022-10-01"},{"lineNumber":103,"author":{"gitId":"JovonLim"},"content":"                updatedTags);","lastModifiedDate":"2022-10-01"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;","lastModifiedDate":"2017-05-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2017-05-25"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2016-12-26"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2016-12-26"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2016-12-26"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private Address address;","lastModifiedDate":"2017-06-21"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-06-21"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}","lastModifiedDate":"2016-12-26"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":138,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":139,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":140,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2016-12-26"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2018-01-15"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2018-01-11"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":150,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":151,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);","lastModifiedDate":"2018-08-14"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2017-06-21"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            this.address \u003d address;","lastModifiedDate":"2017-06-21"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2016-12-26"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2017-06-21"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":189,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2018-01-11"},{"lineNumber":190,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":191,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-06-21"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2018-01-11"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":197,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2018-01-11"},{"lineNumber":198,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2018-01-11"},{"lineNumber":199,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2018-01-11"},{"lineNumber":200,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2018-01-11"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2017-05-05"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":209,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2017-05-05"},{"lineNumber":214,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2017-05-05"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2017-05-05"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2017-06-21"},{"lineNumber":221,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())","lastModifiedDate":"2017-06-21"},{"lineNumber":222,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())","lastModifiedDate":"2017-06-21"},{"lineNumber":223,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())","lastModifiedDate":"2017-06-21"},{"lineNumber":224,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":227,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"JovonLim":2,"-":225}},{"path":"src/main/java/seedu/address/logic/commands/MarkCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-02"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-02"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-02"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-02"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-02"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"/**","lastModifiedDate":"2022-10-02"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":" * Marks an appointment for the given patient as complete.","lastModifiedDate":"2022-10-02"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":" */","lastModifiedDate":"2022-10-02"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"public class MarkCommand extends SelectAppointmentCommand {","lastModifiedDate":"2022-10-02"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"    public static final String COMMAND_WORD \u003d \"mark\";","lastModifiedDate":"2022-10-02"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Marks the appointment of the person identified \"","lastModifiedDate":"2022-10-02"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"            + \"by the index numbers used in the displayed person and their corresponding appointment list. \"","lastModifiedDate":"2022-10-02"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2022-10-02"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"            + \"Parameters: INDEX_OF_PERSON (must be a positive integer) \"","lastModifiedDate":"2022-10-02"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"            + \"INDEX_OF_APPOINTMENT (must be a positive integer)\";","lastModifiedDate":"2022-10-02"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"    public static final String MESSAGE_MARK_PERSON_SUCCESS \u003d \"Marked appointment %1$s for Person: %2$s\";","lastModifiedDate":"2022-10-02"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"    public static final String MESSAGE_ALREADY_MARKED \u003d \"This appointment is already marked.\";","lastModifiedDate":"2022-10-02"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-02"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"     * Creates a mark command containing the index of a person and the index of an appointment.","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"     * @param indexOfPerson Index of the person in the filtered person list to mark.","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"     * @param indexOfAppointment Index of the appointment of the specified person to mark.","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-02"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"    public MarkCommand(Index indexOfPerson, Index indexOfAppointment) {","lastModifiedDate":"2022-10-02"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"        super(indexOfPerson, indexOfAppointment);","lastModifiedDate":"2022-10-02"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"    @Override","lastModifiedDate":"2022-10-02"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-02"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"        Appointment appointmentToMark \u003d getTargetAppointment(model);","lastModifiedDate":"2022-10-02"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"        if (appointmentToMark.isMarked()) {","lastModifiedDate":"2022-10-02"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"            throw new CommandException(MESSAGE_ALREADY_MARKED);","lastModifiedDate":"2022-10-02"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-02"},{"lineNumber":40,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"        appointmentToMark.mark();","lastModifiedDate":"2022-10-02"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"        return new CommandResult(String.format(MESSAGE_MARK_PERSON_SUCCESS,","lastModifiedDate":"2022-10-02"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"                indexOfAppointment.getOneBased(),","lastModifiedDate":"2022-10-02"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"                getTargetPerson(model).getName()));","lastModifiedDate":"2022-10-02"},{"lineNumber":45,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":47,"author":{"gitId":"NicholasTYD"},"content":"    @Override","lastModifiedDate":"2022-10-04"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-04"},{"lineNumber":49,"author":{"gitId":"NicholasTYD"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-04"},{"lineNumber":50,"author":{"gitId":"NicholasTYD"},"content":"            return true;","lastModifiedDate":"2022-10-04"},{"lineNumber":51,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-04"},{"lineNumber":52,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":53,"author":{"gitId":"NicholasTYD"},"content":"        if (!(other instanceof MarkCommand)) {","lastModifiedDate":"2022-10-04"},{"lineNumber":54,"author":{"gitId":"NicholasTYD"},"content":"            return false;","lastModifiedDate":"2022-10-04"},{"lineNumber":55,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-04"},{"lineNumber":56,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":57,"author":{"gitId":"NicholasTYD"},"content":"        MarkCommand otherCommand \u003d (MarkCommand) other;","lastModifiedDate":"2022-10-04"},{"lineNumber":58,"author":{"gitId":"NicholasTYD"},"content":"        return hasSameIndexOfPerson(otherCommand) \u0026\u0026 hasSameIndexOfAppointment(otherCommand);","lastModifiedDate":"2022-10-04"},{"lineNumber":59,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":60,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-02"}],"authorContributionMap":{"NicholasTYD":60}},{"path":"src/main/java/seedu/address/logic/commands/SelectAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-02"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-02"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import java.util.List;","lastModifiedDate":"2022-10-02"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-02"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-02"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-02"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-02"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-02"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-02"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"/**","lastModifiedDate":"2022-10-02"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":" * A class of commands that involve selecting an appointment only with no additional arguments.","lastModifiedDate":"2022-10-02"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":" */","lastModifiedDate":"2022-10-02"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"public abstract class SelectAppointmentCommand extends Command {","lastModifiedDate":"2022-10-02"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"    protected final Index indexOfPerson;","lastModifiedDate":"2022-10-02"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"    protected final Index indexOfAppointment;","lastModifiedDate":"2022-10-02"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"     * Creates command that selects an appointment according to the index of a person and the index of the appointment.","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"     * @param indexOfPerson Index of the person in the filtered person list.","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"     * @param indexOfAppointment Index of the appointment of the specified person.","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"    public SelectAppointmentCommand(Index indexOfPerson, Index indexOfAppointment) {","lastModifiedDate":"2022-10-02"},{"lineNumber":28,"author":{"gitId":"NicholasTYD"},"content":"        requireNonNull(indexOfPerson);","lastModifiedDate":"2022-10-02"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"        requireNonNull(indexOfAppointment);","lastModifiedDate":"2022-10-02"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"        this.indexOfPerson \u003d indexOfPerson;","lastModifiedDate":"2022-10-02"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"        this.indexOfAppointment \u003d indexOfAppointment;","lastModifiedDate":"2022-10-02"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"    protected Appointment getTargetAppointment(Model model) throws CommandException {","lastModifiedDate":"2022-10-02"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"        Person targetPerson \u003d getTargetPerson(model);","lastModifiedDate":"2022-10-02"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"        List\u003cAppointment\u003e targetAppointmentList \u003d targetPerson.getAppointments();","lastModifiedDate":"2022-10-02"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"        if (indexOfAppointment.getZeroBased() \u003e\u003d targetAppointmentList.size()) {","lastModifiedDate":"2022-10-02"},{"lineNumber":40,"author":{"gitId":"NicholasTYD"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-02"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-02"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"        Appointment targetAppointment \u003d targetAppointmentList.get(indexOfAppointment.getZeroBased());","lastModifiedDate":"2022-10-02"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"        return targetAppointment;","lastModifiedDate":"2022-10-02"},{"lineNumber":45,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":47,"author":{"gitId":"NicholasTYD"},"content":"    protected Person getTargetPerson(Model model) throws CommandException {","lastModifiedDate":"2022-10-02"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"        requireNonNull(model);","lastModifiedDate":"2022-10-02"},{"lineNumber":49,"author":{"gitId":"NicholasTYD"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2022-10-02"},{"lineNumber":50,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":51,"author":{"gitId":"NicholasTYD"},"content":"        if (indexOfPerson.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2022-10-02"},{"lineNumber":52,"author":{"gitId":"NicholasTYD"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-02"},{"lineNumber":53,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-02"},{"lineNumber":54,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":55,"author":{"gitId":"NicholasTYD"},"content":"        Person targetPerson \u003d lastShownList.get(indexOfPerson.getZeroBased());","lastModifiedDate":"2022-10-02"},{"lineNumber":56,"author":{"gitId":"NicholasTYD"},"content":"        return targetPerson;","lastModifiedDate":"2022-10-02"},{"lineNumber":57,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":58,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":59,"author":{"gitId":"NicholasTYD"},"content":"    protected boolean hasSameIndexOfPerson(SelectAppointmentCommand other) {","lastModifiedDate":"2022-10-04"},{"lineNumber":60,"author":{"gitId":"NicholasTYD"},"content":"        return indexOfPerson.equals(other.indexOfPerson);","lastModifiedDate":"2022-10-04"},{"lineNumber":61,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":62,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":63,"author":{"gitId":"NicholasTYD"},"content":"    protected boolean hasSameIndexOfAppointment(SelectAppointmentCommand other) {","lastModifiedDate":"2022-10-04"},{"lineNumber":64,"author":{"gitId":"NicholasTYD"},"content":"        return indexOfAppointment.equals(other.indexOfAppointment);","lastModifiedDate":"2022-10-04"},{"lineNumber":65,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":66,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-02"}],"authorContributionMap":{"NicholasTYD":66}},{"path":"src/main/java/seedu/address/logic/commands/UnmarkCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-02"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-02"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2022-10-02"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-02"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-02"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"/**","lastModifiedDate":"2022-10-02"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":" * Unmarks an appointment for the given patient as incomplete.","lastModifiedDate":"2022-10-02"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":" */","lastModifiedDate":"2022-10-02"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"public class UnmarkCommand extends SelectAppointmentCommand {","lastModifiedDate":"2022-10-02"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"    public static final String COMMAND_WORD \u003d \"unmark\";","lastModifiedDate":"2022-10-02"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Unmarks the appointment of the person identified \"","lastModifiedDate":"2022-10-02"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"            + \"by the index numbers used in the displayed person and their corresponding appointment list. \"","lastModifiedDate":"2022-10-02"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2022-10-02"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"            + \"Parameters: INDEX_OF_PERSON (must be a positive integer) \"","lastModifiedDate":"2022-10-02"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"            + \"INDEX_OF_APPOINTMENT (must be a positive integer)\";","lastModifiedDate":"2022-10-02"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"    public static final String MESSAGE_UNMARK_PERSON_SUCCESS \u003d \"Unmarked appointment %1$s for Person: %2$s\";","lastModifiedDate":"2022-10-02"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"    public static final String MESSAGE_ALREADY_UNMARKED \u003d \"This appointment is already unmarked.\";","lastModifiedDate":"2022-10-02"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-02"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"     * Creates an unmark command containing the index of a person and the index of an appointment.","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"     *","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"     * @param indexOfPerson Index of the person in the filtered person list to unmark.","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"     * @param indexOfAppointment Index of the appointment of the specified person to unmark.","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-02"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"    public UnmarkCommand(Index indexOfPerson, Index indexOfAppointment) {","lastModifiedDate":"2022-10-02"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"        super(indexOfPerson, indexOfAppointment);","lastModifiedDate":"2022-10-02"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"    @Override","lastModifiedDate":"2022-10-02"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2022-10-02"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"        Appointment appointmentToUnmark \u003d getTargetAppointment(model);","lastModifiedDate":"2022-10-02"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"        if (!appointmentToUnmark.isMarked()) {","lastModifiedDate":"2022-10-02"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"            throw new CommandException(MESSAGE_ALREADY_UNMARKED);","lastModifiedDate":"2022-10-02"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-02"},{"lineNumber":40,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"        appointmentToUnmark.unmark();","lastModifiedDate":"2022-10-02"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"        return new CommandResult(String.format(MESSAGE_UNMARK_PERSON_SUCCESS,","lastModifiedDate":"2022-10-02"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"                indexOfAppointment.getOneBased(),","lastModifiedDate":"2022-10-02"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"                getTargetPerson(model).getName()));","lastModifiedDate":"2022-10-02"},{"lineNumber":45,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":47,"author":{"gitId":"NicholasTYD"},"content":"    @Override","lastModifiedDate":"2022-10-04"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-04"},{"lineNumber":49,"author":{"gitId":"NicholasTYD"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-04"},{"lineNumber":50,"author":{"gitId":"NicholasTYD"},"content":"            return true;","lastModifiedDate":"2022-10-04"},{"lineNumber":51,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-04"},{"lineNumber":52,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":53,"author":{"gitId":"NicholasTYD"},"content":"        if (!(other instanceof UnmarkCommand)) {","lastModifiedDate":"2022-10-04"},{"lineNumber":54,"author":{"gitId":"NicholasTYD"},"content":"            return false;","lastModifiedDate":"2022-10-04"},{"lineNumber":55,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-04"},{"lineNumber":56,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":57,"author":{"gitId":"NicholasTYD"},"content":"        UnmarkCommand otherCommand \u003d (UnmarkCommand) other;","lastModifiedDate":"2022-10-04"},{"lineNumber":58,"author":{"gitId":"NicholasTYD"},"content":"        return hasSameIndexOfPerson(otherCommand) \u0026\u0026 hasSameIndexOfAppointment(otherCommand);","lastModifiedDate":"2022-10-04"},{"lineNumber":59,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":60,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-02"}],"authorContributionMap":{"NicholasTYD":60}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-02-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-03-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-03-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-03-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-03-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-03-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-17"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2017-02-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);","lastModifiedDate":"2017-06-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)","lastModifiedDate":"2017-12-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2017-03-17"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"        Person person \u003d new Person(name, phone, email, address, new ArrayList\u003c\u003e(), tagList);","lastModifiedDate":"2022-10-01"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return new AddCommand(person);","lastModifiedDate":"2017-03-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"JovonLim":2,"-":59}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.BookCommand;","lastModifiedDate":"2022-10-01"},{"lineNumber":11,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.logic.commands.CancelCommand;","lastModifiedDate":"2022-10-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2017-01-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.commands.MarkCommand;","lastModifiedDate":"2022-10-02"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.commands.UnmarkCommand;","lastModifiedDate":"2022-10-02"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"JovonLim"},"content":"        case BookCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-01"},{"lineNumber":67,"author":{"gitId":"JovonLim"},"content":"            return new BookCommandParser().parse(arguments);","lastModifiedDate":"2022-10-01"},{"lineNumber":68,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":69,"author":{"gitId":"guanzhou03"},"content":"        case CancelCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-01"},{"lineNumber":70,"author":{"gitId":"guanzhou03"},"content":"            return new CancelCommandParser().parse(arguments);","lastModifiedDate":"2022-10-01"},{"lineNumber":71,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":72,"author":{"gitId":"NicholasTYD"},"content":"        case MarkCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-02"},{"lineNumber":73,"author":{"gitId":"NicholasTYD"},"content":"            return new MarkCommandParser().parse(arguments);","lastModifiedDate":"2022-10-02"},{"lineNumber":74,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":75,"author":{"gitId":"NicholasTYD"},"content":"        case UnmarkCommand.COMMAND_WORD:","lastModifiedDate":"2022-10-02"},{"lineNumber":76,"author":{"gitId":"NicholasTYD"},"content":"            return new UnmarkCommandParser().parse(arguments);","lastModifiedDate":"2022-10-02"},{"lineNumber":77,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"NicholasTYD":8,"JovonLim":4,"-":76,"guanzhou03":4}},{"path":"src/main/java/seedu/address/logic/parser/BookCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-01"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-01"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-01"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2022-10-01"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REASON;","lastModifiedDate":"2022-10-01"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-01"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.BookCommand;","lastModifiedDate":"2022-10-01"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-01"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"/**","lastModifiedDate":"2022-10-01"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":" * Parses input arguments and creates a new BookCommand object.","lastModifiedDate":"2022-10-01"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":" */","lastModifiedDate":"2022-10-01"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"public class BookCommandParser implements Parser\u003cBookCommand\u003e {","lastModifiedDate":"2022-10-01"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"    @Override","lastModifiedDate":"2022-10-01"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"    public BookCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-01"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"        requireNonNull(args);","lastModifiedDate":"2022-10-01"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_REASON, PREFIX_DATE);","lastModifiedDate":"2022-10-01"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"        Index index;","lastModifiedDate":"2022-10-01"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":"        try {","lastModifiedDate":"2022-10-01"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2022-10-01"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2022-10-01"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, BookCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2022-10-01"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"        Appointment appointment \u003d ParserUtil.parseAppointment(argMultimap.getValue(PREFIX_REASON).get(),","lastModifiedDate":"2022-10-01"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"                argMultimap.getValue(PREFIX_DATE).get());","lastModifiedDate":"2022-10-01"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"        return new BookCommand(index, appointment);","lastModifiedDate":"2022-10-01"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-01"}],"authorContributionMap":{"JovonLim":34}},{"path":"src/main/java/seedu/address/logic/parser/CancelCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"guanzhou03"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-01"},{"lineNumber":2,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":3,"author":{"gitId":"guanzhou03"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-04"},{"lineNumber":4,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX;","lastModifiedDate":"2022-10-04"},{"lineNumber":5,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":6,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-01"},{"lineNumber":7,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.logic.commands.CancelCommand;","lastModifiedDate":"2022-10-01"},{"lineNumber":8,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-01"},{"lineNumber":9,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":10,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":11,"author":{"gitId":"guanzhou03"},"content":"/**","lastModifiedDate":"2022-10-04"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":" * A class that encapsulates parsing of the input for cancel commands.","lastModifiedDate":"2022-10-04"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":" */","lastModifiedDate":"2022-10-04"},{"lineNumber":14,"author":{"gitId":"guanzhou03"},"content":"public class CancelCommandParser implements Parser\u003cCancelCommand\u003e {","lastModifiedDate":"2022-10-01"},{"lineNumber":15,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":16,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-10-04"},{"lineNumber":17,"author":{"gitId":"guanzhou03"},"content":"     * Reads the user input and generates the specified cancel command.","lastModifiedDate":"2022-10-04"},{"lineNumber":18,"author":{"gitId":"guanzhou03"},"content":"     * @param userInput Input string from user without the command word.","lastModifiedDate":"2022-10-04"},{"lineNumber":19,"author":{"gitId":"guanzhou03"},"content":"     * @return The specified cancel command to execute.","lastModifiedDate":"2022-10-04"},{"lineNumber":20,"author":{"gitId":"guanzhou03"},"content":"     * @throws ParseException If the input is not in the correct format.","lastModifiedDate":"2022-10-04"},{"lineNumber":21,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-10-04"},{"lineNumber":22,"author":{"gitId":"guanzhou03"},"content":"    @Override","lastModifiedDate":"2022-10-01"},{"lineNumber":23,"author":{"gitId":"guanzhou03"},"content":"    public CancelCommand parse(String userInput) throws ParseException {","lastModifiedDate":"2022-10-01"},{"lineNumber":24,"author":{"gitId":"guanzhou03"},"content":"        requireNonNull(userInput);","lastModifiedDate":"2022-10-01"},{"lineNumber":25,"author":{"gitId":"guanzhou03"},"content":"        String trimmedIndices \u003d userInput.trim();","lastModifiedDate":"2022-10-01"},{"lineNumber":26,"author":{"gitId":"guanzhou03"},"content":"        String[] patientAndApptIndex \u003d trimmedIndices.split(\" \");","lastModifiedDate":"2022-10-01"},{"lineNumber":27,"author":{"gitId":"guanzhou03"},"content":"        if (patientAndApptIndex.length !\u003d 2) {","lastModifiedDate":"2022-10-04"},{"lineNumber":28,"author":{"gitId":"guanzhou03"},"content":"            throw new ParseException(MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-04"},{"lineNumber":29,"author":{"gitId":"guanzhou03"},"content":"        }","lastModifiedDate":"2022-10-04"},{"lineNumber":30,"author":{"gitId":"guanzhou03"},"content":"        Index patientIndex \u003d ParserUtil.parseIndex(patientAndApptIndex[0]);","lastModifiedDate":"2022-10-01"},{"lineNumber":31,"author":{"gitId":"guanzhou03"},"content":"        Index apptIndex \u003d ParserUtil.parseIndex(patientAndApptIndex[1]);","lastModifiedDate":"2022-10-01"},{"lineNumber":32,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":33,"author":{"gitId":"guanzhou03"},"content":"        return new CancelCommand(patientIndex, apptIndex);","lastModifiedDate":"2022-10-01"},{"lineNumber":34,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":35,"author":{"gitId":"guanzhou03"},"content":"}","lastModifiedDate":"2022-10-01"},{"lineNumber":36,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"}],"authorContributionMap":{"guanzhou03":36}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"    public static final Prefix PREFIX_REASON \u003d new Prefix(\"r/\");","lastModifiedDate":"2022-10-01"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");","lastModifiedDate":"2022-10-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"JovonLim":2,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/MarkCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-02"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-02"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import java.util.List;","lastModifiedDate":"2022-10-02"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-02"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.commands.MarkCommand;","lastModifiedDate":"2022-10-02"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-02"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"/**","lastModifiedDate":"2022-10-02"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":" * Parses input arguments and creates a new MarkCommand object","lastModifiedDate":"2022-10-02"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":" */","lastModifiedDate":"2022-10-02"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"public class MarkCommandParser extends SelectAppointmentCommandParser\u003cMarkCommand\u003e {","lastModifiedDate":"2022-10-02"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"    @Override","lastModifiedDate":"2022-10-02"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"    public MarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-02"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"        try {","lastModifiedDate":"2022-10-02"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"            List\u003cIndex\u003e personAndAppointmentIndexes \u003d super.getPersonAndAppointmentIndexes(args);","lastModifiedDate":"2022-10-02"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"            Index indexOfPerson \u003d personAndAppointmentIndexes.get(0);","lastModifiedDate":"2022-10-02"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"            Index indexOfAppointment \u003d personAndAppointmentIndexes.get(1);","lastModifiedDate":"2022-10-02"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"            return new MarkCommand(indexOfPerson, indexOfAppointment);","lastModifiedDate":"2022-10-02"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2022-10-02"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2022-10-02"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-02"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-02"}],"authorContributionMap":{"NicholasTYD":27}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"import java.util.List;","lastModifiedDate":"2022-10-02"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-02-11"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-02-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-02-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-02-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-02-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"    public static final String MESSAGE_UNEXPECTED_INDEX_COUNT \u003d \"The amount of indexes parsed is not as expected.\";","lastModifiedDate":"2022-10-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-02"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"     * Parses a string of {@code oneBasedIndex}es seperated by spaces into a list of {@code Index} of exactly size","lastModifiedDate":"2022-10-02"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"     * {@code parseCount} and returns it. Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-10-02"},{"lineNumber":45,"author":{"gitId":"NicholasTYD"},"content":"     *","lastModifiedDate":"2022-10-02"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"     * @param parseCount The exact amount of indexes to parse.","lastModifiedDate":"2022-10-02"},{"lineNumber":47,"author":{"gitId":"NicholasTYD"},"content":"     * @throws ParseException if the specified indexes is invalid (not non-zero unsigned integer), or if the amount of","lastModifiedDate":"2022-10-02"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"     *     indexes is not exactly {@code parseCount}","lastModifiedDate":"2022-10-02"},{"lineNumber":49,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-02"},{"lineNumber":50,"author":{"gitId":"NicholasTYD"},"content":"    public static List\u003cIndex\u003e parseIndexes(String oneBasedIndexes, int parseCount) throws ParseException {","lastModifiedDate":"2022-10-02"},{"lineNumber":51,"author":{"gitId":"NicholasTYD"},"content":"        String indexSeparator \u003d \"\\\\s+\";","lastModifiedDate":"2022-10-04"},{"lineNumber":52,"author":{"gitId":"NicholasTYD"},"content":"        String trimmedIndexes \u003d oneBasedIndexes.trim();","lastModifiedDate":"2022-10-02"},{"lineNumber":53,"author":{"gitId":"NicholasTYD"},"content":"        String[] indexes \u003d trimmedIndexes.split(indexSeparator);","lastModifiedDate":"2022-10-02"},{"lineNumber":54,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":55,"author":{"gitId":"NicholasTYD"},"content":"        if (indexes.length !\u003d parseCount) {","lastModifiedDate":"2022-10-04"},{"lineNumber":56,"author":{"gitId":"NicholasTYD"},"content":"            throw new ParseException(MESSAGE_UNEXPECTED_INDEX_COUNT);","lastModifiedDate":"2022-10-04"},{"lineNumber":57,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-04"},{"lineNumber":58,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":59,"author":{"gitId":"NicholasTYD"},"content":"        List\u003cIndex\u003e indexList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-02"},{"lineNumber":60,"author":{"gitId":"NicholasTYD"},"content":"        for (String index : indexes) {","lastModifiedDate":"2022-10-02"},{"lineNumber":61,"author":{"gitId":"NicholasTYD"},"content":"            indexList.add(parseIndex(index));","lastModifiedDate":"2022-10-02"},{"lineNumber":62,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-02"},{"lineNumber":63,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":64,"author":{"gitId":"NicholasTYD"},"content":"        return indexList;","lastModifiedDate":"2022-10-02"},{"lineNumber":65,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":66,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":142,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":143,"author":{"gitId":"JovonLim"},"content":"     * Parses a {@code String reason} and {@code String dateTime} into a {@code Appointment}.","lastModifiedDate":"2022-10-01"},{"lineNumber":144,"author":{"gitId":"JovonLim"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2022-10-01"},{"lineNumber":145,"author":{"gitId":"JovonLim"},"content":"     *","lastModifiedDate":"2022-10-01"},{"lineNumber":146,"author":{"gitId":"JovonLim"},"content":"     * @throws ParseException if the given {@code reason} or {@code dateTime} is invalid.","lastModifiedDate":"2022-10-01"},{"lineNumber":147,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":148,"author":{"gitId":"NicholasTYD"},"content":"    public static Appointment parseAppointment(String reason, String dateTime) throws ParseException {","lastModifiedDate":"2022-10-02"},{"lineNumber":149,"author":{"gitId":"JovonLim"},"content":"        requireNonNull(dateTime);","lastModifiedDate":"2022-10-01"},{"lineNumber":150,"author":{"gitId":"JovonLim"},"content":"        requireNonNull(reason);","lastModifiedDate":"2022-10-01"},{"lineNumber":151,"author":{"gitId":"JovonLim"},"content":"        String trimmedReason \u003d reason.trim();","lastModifiedDate":"2022-10-01"},{"lineNumber":152,"author":{"gitId":"JovonLim"},"content":"        String trimmedDateTime \u003d dateTime.trim();","lastModifiedDate":"2022-10-01"},{"lineNumber":153,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":154,"author":{"gitId":"JovonLim"},"content":"        if (!Appointment.isValidReason(trimmedReason)) {","lastModifiedDate":"2022-10-01"},{"lineNumber":155,"author":{"gitId":"JovonLim"},"content":"            throw new ParseException(Appointment.REASON_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-01"},{"lineNumber":156,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":157,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":158,"author":{"gitId":"JovonLim"},"content":"        if (!Appointment.isValidDateTime(dateTime)) {","lastModifiedDate":"2022-10-01"},{"lineNumber":159,"author":{"gitId":"JovonLim"},"content":"            throw new ParseException(Appointment.DATE_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-01"},{"lineNumber":160,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":161,"author":{"gitId":"NicholasTYD"},"content":"        return new Appointment(trimmedReason, trimmedDateTime, false);","lastModifiedDate":"2022-10-02"},{"lineNumber":162,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":163,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":166,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":175,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"NicholasTYD":30,"JovonLim":21,"-":124}},{"path":"src/main/java/seedu/address/logic/parser/SelectAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-02"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2022-10-02"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import java.util.List;","lastModifiedDate":"2022-10-02"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-02"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.commands.SelectAppointmentCommand;","lastModifiedDate":"2022-10-02"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-02"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"/**","lastModifiedDate":"2022-10-02"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":" * Parses input arguments and creates a new SelectAppointmentCommand object. Used for commands that involve selecting","lastModifiedDate":"2022-10-02"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":" * an appointment only with no additional arguments.","lastModifiedDate":"2022-10-02"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":" */","lastModifiedDate":"2022-10-02"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"public abstract class SelectAppointmentCommandParser\u003cT extends SelectAppointmentCommand\u003e implements Parser\u003cT\u003e {","lastModifiedDate":"2022-10-02"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-02"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"     * Gets the index of the person with the appointment and the index of the appointment itself.","lastModifiedDate":"2022-10-02"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"     *","lastModifiedDate":"2022-10-02"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"     * @param args The string to be parsed.","lastModifiedDate":"2022-10-02"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"     * @return A list of 2 indexes, denoting the index of the person with the appointment and the index of the","lastModifiedDate":"2022-10-02"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"     *     appointment itself respectively.","lastModifiedDate":"2022-10-02"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"     * @throws ParseException If there is not exactly 2 indexes found or if there is any invalid indexes.","lastModifiedDate":"2022-10-02"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-02"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"    protected List\u003cIndex\u003e getPersonAndAppointmentIndexes(String args) throws ParseException {","lastModifiedDate":"2022-10-02"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"        requireNonNull(args);","lastModifiedDate":"2022-10-02"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"        List\u003cIndex\u003e indexList;","lastModifiedDate":"2022-10-02"},{"lineNumber":28,"author":{"gitId":"NicholasTYD"},"content":"        int expectedIndexCount \u003d 2;","lastModifiedDate":"2022-10-02"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"        indexList \u003d ParserUtil.parseIndexes(args, expectedIndexCount);","lastModifiedDate":"2022-10-02"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"        return indexList;","lastModifiedDate":"2022-10-02"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-02"}],"authorContributionMap":{"NicholasTYD":33}},{"path":"src/main/java/seedu/address/logic/parser/UnmarkCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-02"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-02"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import java.util.List;","lastModifiedDate":"2022-10-02"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-02"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.commands.UnmarkCommand;","lastModifiedDate":"2022-10-02"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2022-10-02"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"/**","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":" * Parses input arguments and creates a new UnmarkCommand object","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":" */","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"public class UnmarkCommandParser extends SelectAppointmentCommandParser\u003cUnmarkCommand\u003e {","lastModifiedDate":"2022-10-02"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"    @Override","lastModifiedDate":"2022-10-02"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"    public UnmarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2022-10-02"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"        try {","lastModifiedDate":"2022-10-02"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"            List\u003cIndex\u003e personAndAppointmentIndexes \u003d super.getPersonAndAppointmentIndexes(args);","lastModifiedDate":"2022-10-02"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"            Index indexOfPerson \u003d personAndAppointmentIndexes.get(0);","lastModifiedDate":"2022-10-02"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"            Index indexOfAppointment \u003d personAndAppointmentIndexes.get(1);","lastModifiedDate":"2022-10-02"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"            return new UnmarkCommand(indexOfPerson, indexOfAppointment);","lastModifiedDate":"2022-10-02"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2022-10-02"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnmarkCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2022-10-02"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"        }","lastModifiedDate":"2022-10-02"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-02"}],"authorContributionMap":{"NicholasTYD":27}},{"path":"src/main/java/seedu/address/model/person/Appointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.model.person;","lastModifiedDate":"2022-10-01"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2022-10-01"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2022-10-01"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2022-10-01"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"import java.time.format.DateTimeFormatterBuilder;","lastModifiedDate":"2022-10-01"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2022-10-01"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"/**","lastModifiedDate":"2022-10-01"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":" * Represents the patient\u0027s appointments\u0027 details.","lastModifiedDate":"2022-10-01"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":" */","lastModifiedDate":"2022-10-01"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"public class Appointment {","lastModifiedDate":"2022-10-01"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"    public static final String REASON_MESSAGE_CONSTRAINTS \u003d \"Reason should not be empty\";","lastModifiedDate":"2022-10-01"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"    public static final String DATE_MESSAGE_CONSTRAINTS \u003d \"Date should contain YYYY-MM-DD and HH:MM values\";","lastModifiedDate":"2022-10-01"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"    public static final DateTimeFormatter DATE_FORMATTER \u003d","lastModifiedDate":"2022-10-01"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"            new DateTimeFormatterBuilder().appendOptional(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"))","lastModifiedDate":"2022-10-01"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"                    .appendOptional(DateTimeFormatter.ofPattern(\"HH:mm yyyy-MM-dd\")).toFormatter();","lastModifiedDate":"2022-10-01"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"    public static final DateTimeFormatter STORAGE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2022-10-01"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"    private final String reason;","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":"    private final LocalDateTime dateTime;","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"    private boolean isMarked;","lastModifiedDate":"2022-10-02"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"    private final DateTimeFormatter stringFormatter \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\");","lastModifiedDate":"2022-10-01"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"     * Creates an appointment object with the given reason, time, and status.","lastModifiedDate":"2022-10-02"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"     *","lastModifiedDate":"2022-10-01"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"     * @param reason The given reason for appointment.","lastModifiedDate":"2022-10-01"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"     * @param dateTime The given time to book the appointment.","lastModifiedDate":"2022-10-01"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"     * @param isMarked Status of the appointment.","lastModifiedDate":"2022-10-02"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"    public Appointment(String reason, String dateTime, boolean isMarked) {","lastModifiedDate":"2022-10-02"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"        checkArgument(isValidReason(reason), REASON_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-01"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"        checkArgument(isValidDateTime(dateTime), DATE_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-01"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"        this.reason \u003d reason;","lastModifiedDate":"2022-10-01"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"        String str \u003d String.join(\" \", dateTime.split(\"\\\\s+\", 2));","lastModifiedDate":"2022-10-01"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"        this.dateTime \u003d LocalDateTime.parse(str, DATE_FORMATTER);","lastModifiedDate":"2022-10-01"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"        this.isMarked \u003d isMarked;","lastModifiedDate":"2022-10-02"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":46,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"     * Checks whether the given appointment has the same time.","lastModifiedDate":"2022-10-01"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"     *","lastModifiedDate":"2022-10-01"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"     * @param other The given appointment.","lastModifiedDate":"2022-10-01"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"     * @return The result of the equals test.","lastModifiedDate":"2022-10-01"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":52,"author":{"gitId":"JovonLim"},"content":"    public boolean isSameTime(Appointment other) {","lastModifiedDate":"2022-10-01"},{"lineNumber":53,"author":{"gitId":"JovonLim"},"content":"        return other.dateTime.equals(dateTime);","lastModifiedDate":"2022-10-01"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":55,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":56,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":57,"author":{"gitId":"JovonLim"},"content":"     * Checks whether the given string is a valid reason.","lastModifiedDate":"2022-10-01"},{"lineNumber":58,"author":{"gitId":"JovonLim"},"content":"     *","lastModifiedDate":"2022-10-01"},{"lineNumber":59,"author":{"gitId":"JovonLim"},"content":"     * @param test The string to test.","lastModifiedDate":"2022-10-01"},{"lineNumber":60,"author":{"gitId":"JovonLim"},"content":"     * @return The result of the equals test.","lastModifiedDate":"2022-10-01"},{"lineNumber":61,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":62,"author":{"gitId":"JovonLim"},"content":"    public static boolean isValidReason(String test) {","lastModifiedDate":"2022-10-01"},{"lineNumber":63,"author":{"gitId":"JovonLim"},"content":"        return !test.equals(\"\");","lastModifiedDate":"2022-10-01"},{"lineNumber":64,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":65,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":66,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":67,"author":{"gitId":"JovonLim"},"content":"     * Checks whether the given string is a valid DateTime.","lastModifiedDate":"2022-10-01"},{"lineNumber":68,"author":{"gitId":"JovonLim"},"content":"     *","lastModifiedDate":"2022-10-01"},{"lineNumber":69,"author":{"gitId":"JovonLim"},"content":"     * @param test The string to test.","lastModifiedDate":"2022-10-01"},{"lineNumber":70,"author":{"gitId":"JovonLim"},"content":"     * @return The result of the LocalDateTime parse test.","lastModifiedDate":"2022-10-01"},{"lineNumber":71,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":72,"author":{"gitId":"JovonLim"},"content":"    public static boolean isValidDateTime(String test) {","lastModifiedDate":"2022-10-01"},{"lineNumber":73,"author":{"gitId":"JovonLim"},"content":"        try {","lastModifiedDate":"2022-10-01"},{"lineNumber":74,"author":{"gitId":"JovonLim"},"content":"            String str \u003d String.join(\" \", test.split(\"\\\\s+\", 2));","lastModifiedDate":"2022-10-01"},{"lineNumber":75,"author":{"gitId":"JovonLim"},"content":"            LocalDateTime.parse(str, DATE_FORMATTER);","lastModifiedDate":"2022-10-01"},{"lineNumber":76,"author":{"gitId":"JovonLim"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2022-10-01"},{"lineNumber":77,"author":{"gitId":"JovonLim"},"content":"            return false;","lastModifiedDate":"2022-10-01"},{"lineNumber":78,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":79,"author":{"gitId":"JovonLim"},"content":"        return true;","lastModifiedDate":"2022-10-01"},{"lineNumber":80,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":81,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":82,"author":{"gitId":"JovonLim"},"content":"    public LocalDateTime getDateTime() {","lastModifiedDate":"2022-10-03"},{"lineNumber":83,"author":{"gitId":"JovonLim"},"content":"        return dateTime;","lastModifiedDate":"2022-10-03"},{"lineNumber":84,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":85,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":86,"author":{"gitId":"JovonLim"},"content":"    public String getReason() {","lastModifiedDate":"2022-10-03"},{"lineNumber":87,"author":{"gitId":"JovonLim"},"content":"        return reason;","lastModifiedDate":"2022-10-03"},{"lineNumber":88,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":89,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":90,"author":{"gitId":"NicholasTYD"},"content":"    public boolean isMarked() {","lastModifiedDate":"2022-10-02"},{"lineNumber":91,"author":{"gitId":"NicholasTYD"},"content":"        return isMarked;","lastModifiedDate":"2022-10-02"},{"lineNumber":92,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":93,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":94,"author":{"gitId":"NicholasTYD"},"content":"    public void mark() {","lastModifiedDate":"2022-10-02"},{"lineNumber":95,"author":{"gitId":"NicholasTYD"},"content":"        this.isMarked \u003d true;","lastModifiedDate":"2022-10-02"},{"lineNumber":96,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":97,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":98,"author":{"gitId":"NicholasTYD"},"content":"    public void unmark() {","lastModifiedDate":"2022-10-02"},{"lineNumber":99,"author":{"gitId":"NicholasTYD"},"content":"        this.isMarked \u003d false;","lastModifiedDate":"2022-10-02"},{"lineNumber":100,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":101,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":102,"author":{"gitId":"JovonLim"},"content":"    @Override","lastModifiedDate":"2022-10-01"},{"lineNumber":103,"author":{"gitId":"JovonLim"},"content":"    public String toString() {","lastModifiedDate":"2022-10-01"},{"lineNumber":104,"author":{"gitId":"NicholasTYD"},"content":"        String statusIcon \u003d \"[\" + getStateIcon() + \"]\";","lastModifiedDate":"2022-10-02"},{"lineNumber":105,"author":{"gitId":"NicholasTYD"},"content":"        return statusIcon + \" \" + dateTime.format(stringFormatter) + \" for \" + reason;","lastModifiedDate":"2022-10-02"},{"lineNumber":106,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":107,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":108,"author":{"gitId":"NicholasTYD"},"content":"    private String getStateIcon() {","lastModifiedDate":"2022-10-02"},{"lineNumber":109,"author":{"gitId":"NicholasTYD"},"content":"        String markedIcon \u003d \"✅\";","lastModifiedDate":"2022-10-02"},{"lineNumber":110,"author":{"gitId":"NicholasTYD"},"content":"        String unmarkedIcon \u003d \"❌\";","lastModifiedDate":"2022-10-02"},{"lineNumber":111,"author":{"gitId":"NicholasTYD"},"content":"        return isMarked ? markedIcon : unmarkedIcon;","lastModifiedDate":"2022-10-02"},{"lineNumber":112,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":113,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":114,"author":{"gitId":"JovonLim"},"content":"    @Override","lastModifiedDate":"2022-10-01"},{"lineNumber":115,"author":{"gitId":"JovonLim"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2022-10-01"},{"lineNumber":116,"author":{"gitId":"JovonLim"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2022-10-01"},{"lineNumber":117,"author":{"gitId":"JovonLim"},"content":"            return true;","lastModifiedDate":"2022-10-01"},{"lineNumber":118,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":119,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":120,"author":{"gitId":"JovonLim"},"content":"        if (!(other instanceof Appointment)) {","lastModifiedDate":"2022-10-01"},{"lineNumber":121,"author":{"gitId":"JovonLim"},"content":"            return false;","lastModifiedDate":"2022-10-01"},{"lineNumber":122,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":123,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":124,"author":{"gitId":"JovonLim"},"content":"        Appointment otherAppointment \u003d (Appointment) other;","lastModifiedDate":"2022-10-01"},{"lineNumber":125,"author":{"gitId":"NicholasTYD"},"content":"        return otherAppointment.reason.equals(reason)","lastModifiedDate":"2022-10-03"},{"lineNumber":126,"author":{"gitId":"NicholasTYD"},"content":"                \u0026\u0026 otherAppointment.dateTime.equals(dateTime)","lastModifiedDate":"2022-10-03"},{"lineNumber":127,"author":{"gitId":"NicholasTYD"},"content":"                \u0026\u0026 (otherAppointment.isMarked \u003d\u003d isMarked);","lastModifiedDate":"2022-10-03"},{"lineNumber":128,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":129,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-01"}],"authorContributionMap":{"NicholasTYD":28,"JovonLim":101}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"import java.util.List;","lastModifiedDate":"2022-10-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"    private final List\u003cAppointment\u003e listOfAppointments;","lastModifiedDate":"2022-10-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"    public Person(Name name, Phone phone, Email email, Address address, List\u003cAppointment\u003e listOfAppointments,","lastModifiedDate":"2022-10-01"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"                  Set\u003cTag\u003e tags) {","lastModifiedDate":"2022-10-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);","lastModifiedDate":"2017-05-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"        this.listOfAppointments \u003d listOfAppointments;","lastModifiedDate":"2022-10-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":58,"author":{"gitId":"JovonLim"},"content":"    public List\u003cAppointment\u003e getAppointments() {","lastModifiedDate":"2022-10-01"},{"lineNumber":59,"author":{"gitId":"JovonLim"},"content":"        return listOfAppointments;","lastModifiedDate":"2022-10-01"},{"lineNumber":60,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":61,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":62,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":63,"author":{"gitId":"guanzhou03"},"content":"    public Appointment cancelAppointment(int apptIndex) {","lastModifiedDate":"2022-10-01"},{"lineNumber":64,"author":{"gitId":"guanzhou03"},"content":"        return listOfAppointments.remove(apptIndex);","lastModifiedDate":"2022-10-01"},{"lineNumber":65,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":66,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name.","lastModifiedDate":"2020-12-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());","lastModifiedDate":"2020-12-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":88,"author":{"gitId":"JovonLim"},"content":"    public String getAppointmentsString() {","lastModifiedDate":"2022-10-01"},{"lineNumber":89,"author":{"gitId":"JovonLim"},"content":"        StringBuilder str \u003d new StringBuilder(\"Appointments:\\n\");","lastModifiedDate":"2022-10-01"},{"lineNumber":90,"author":{"gitId":"JovonLim"},"content":"        for (int i \u003d 0; i \u003c listOfAppointments.size(); i++) {","lastModifiedDate":"2022-10-01"},{"lineNumber":91,"author":{"gitId":"JovonLim"},"content":"            str.append(i + 1).append(\": \").append(listOfAppointments.get(i)).append(\"\\n\");","lastModifiedDate":"2022-10-01"},{"lineNumber":92,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":93,"author":{"gitId":"JovonLim"},"content":"        return str.toString();","lastModifiedDate":"2022-10-01"},{"lineNumber":94,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":95,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())","lastModifiedDate":"2018-08-14"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())","lastModifiedDate":"2018-08-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())","lastModifiedDate":"2018-08-14"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())","lastModifiedDate":"2018-08-14"},{"lineNumber":115,"author":{"gitId":"JovonLim"},"content":"                \u0026\u0026 otherPerson.getAppointments().equals(getAppointments())","lastModifiedDate":"2022-10-01"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags());","lastModifiedDate":"2018-08-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);","lastModifiedDate":"2016-08-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        builder.append(getName())","lastModifiedDate":"2018-01-10"},{"lineNumber":129,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                .append(getPhone())","lastModifiedDate":"2018-01-10"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                .append(getEmail())","lastModifiedDate":"2018-01-10"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":134,"author":{"gitId":"JovonLim"},"content":"                .append(getAddress())","lastModifiedDate":"2022-10-01"},{"lineNumber":135,"author":{"gitId":"JovonLim"},"content":"                .append(\"; Appointments: \")","lastModifiedDate":"2022-10-01"},{"lineNumber":136,"author":{"gitId":"JovonLim"},"content":"                .append(getAppointments());","lastModifiedDate":"2022-10-01"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();","lastModifiedDate":"2020-12-11"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {","lastModifiedDate":"2020-12-11"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");","lastModifiedDate":"2020-12-11"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);","lastModifiedDate":"2020-12-11"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-11"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"JovonLim":22,"-":120,"guanzhou03":4}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;","lastModifiedDate":"2016-12-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-01"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2016-12-20"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2016-12-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2016-12-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2016-12-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {","lastModifiedDate":"2016-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return new Person[] {","lastModifiedDate":"2016-12-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new ArrayList\u003c\u003e(),","lastModifiedDate":"2022-10-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                getTagSet(\"friends\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new ArrayList\u003c\u003e(),","lastModifiedDate":"2022-10-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\", \"friends\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new ArrayList\u003c\u003e(),","lastModifiedDate":"2022-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                getTagSet(\"neighbours\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new ArrayList\u003c\u003e(),","lastModifiedDate":"2022-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                getTagSet(\"family\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new ArrayList\u003c\u003e(),","lastModifiedDate":"2022-10-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                getTagSet(\"classmates\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new ArrayList\u003c\u003e(),","lastModifiedDate":"2022-10-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\"))","lastModifiedDate":"2017-03-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {","lastModifiedDate":"2016-12-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();","lastModifiedDate":"2017-04-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {","lastModifiedDate":"2016-12-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);","lastModifiedDate":"2017-04-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {","lastModifiedDate":"2017-05-30"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                .map(Tag::new)","lastModifiedDate":"2018-01-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"JovonLim":7,"-":54}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedAppointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.storage;","lastModifiedDate":"2022-10-01"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2022-10-01"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2022-10-01"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2022-10-01"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"/**","lastModifiedDate":"2022-10-01"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":" * Jackson-friendly version of {@link Appointment}.","lastModifiedDate":"2022-10-01"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":" */","lastModifiedDate":"2022-10-01"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"public class JsonAdaptedAppointment {","lastModifiedDate":"2022-10-01"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"    private final String reason;","lastModifiedDate":"2022-10-01"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"    private final String dateTime;","lastModifiedDate":"2022-10-01"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"    private final boolean isMarked;","lastModifiedDate":"2022-10-02"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"     * Converts a given {@code Appointment} into this class for Jackson use.","lastModifiedDate":"2022-10-01"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"    @JsonCreator","lastModifiedDate":"2022-10-01"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"    public JsonAdaptedAppointment(@JsonProperty(\"reason\") String reason,","lastModifiedDate":"2022-10-02"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"                                  @JsonProperty(\"dateTime\") String dateTime,","lastModifiedDate":"2022-10-02"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"                                  @JsonProperty(\"isMarked\") boolean isMarked) {","lastModifiedDate":"2022-10-02"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"        this.reason \u003d reason;","lastModifiedDate":"2022-10-01"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2022-10-01"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"        this.isMarked \u003d isMarked;","lastModifiedDate":"2022-10-02"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"     * Converts a given {@code Appointment} into this class for Jackson use.","lastModifiedDate":"2022-10-01"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"    public JsonAdaptedAppointment(Appointment source) {","lastModifiedDate":"2022-10-01"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"        this.reason \u003d source.getReason();","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"        this.dateTime \u003d source.getDateTime().format(Appointment.STORAGE_FORMATTER);","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"        this.isMarked \u003d source.isMarked();","lastModifiedDate":"2022-10-02"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"     * Converts this Jackson-friendly adapted appointment object into the model\u0027s {@code Appointment} object.","lastModifiedDate":"2022-10-01"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"     *","lastModifiedDate":"2022-10-01"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted appointment.","lastModifiedDate":"2022-10-01"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"    public Appointment toModelType() throws IllegalValueException {","lastModifiedDate":"2022-10-01"},{"lineNumber":46,"author":{"gitId":"JovonLim"},"content":"        if (!Appointment.isValidReason(reason)) {","lastModifiedDate":"2022-10-01"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"            throw new IllegalValueException(Appointment.REASON_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-01"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"        if (!Appointment.isValidDateTime(dateTime)) {","lastModifiedDate":"2022-10-01"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"            throw new IllegalValueException(Appointment.DATE_MESSAGE_CONSTRAINTS);","lastModifiedDate":"2022-10-01"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":52,"author":{"gitId":"NicholasTYD"},"content":"        return new Appointment(reason, dateTime, isMarked);","lastModifiedDate":"2022-10-02"},{"lineNumber":53,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-01"}],"authorContributionMap":{"NicholasTYD":7,"JovonLim":47}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {","lastModifiedDate":"2018-12-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final String address;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"    private final List\u003cJsonAdaptedAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"            @JsonProperty(\"appointments\") List\u003cJsonAdaptedAppointment\u003e appointments,","lastModifiedDate":"2022-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"        if (appointments !\u003d null) {","lastModifiedDate":"2022-10-01"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"            this.appointments.addAll(appointments);","lastModifiedDate":"2022-10-01"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"JovonLim"},"content":"        appointments.addAll(source.getAppointments().stream()","lastModifiedDate":"2022-10-01"},{"lineNumber":64,"author":{"gitId":"JovonLim"},"content":"                .map(JsonAdaptedAppointment::new)","lastModifiedDate":"2022-10-01"},{"lineNumber":65,"author":{"gitId":"JovonLim"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2022-10-01"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"JovonLim"},"content":"        final List\u003cAppointment\u003e modelAppointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-01"},{"lineNumber":83,"author":{"gitId":"JovonLim"},"content":"        for (JsonAdaptedAppointment appointment : appointments) {","lastModifiedDate":"2022-10-01"},{"lineNumber":84,"author":{"gitId":"JovonLim"},"content":"            modelAppointments.add(appointment.toModelType());","lastModifiedDate":"2022-10-01"},{"lineNumber":85,"author":{"gitId":"JovonLim"},"content":"        }","lastModifiedDate":"2022-10-01"},{"lineNumber":86,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2018-08-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":120,"author":{"gitId":"JovonLim"},"content":"        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelAppointments, modelTags);","lastModifiedDate":"2022-10-01"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"JovonLim":15,"-":108}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;","lastModifiedDate":"2019-01-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-01-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";","lastModifiedDate":"2016-09-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public final Person person;","lastModifiedDate":"2018-01-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label phone;","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label address;","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label email;","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"    @FXML","lastModifiedDate":"2022-10-01"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"    private Label appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private FlowPane tags;","lastModifiedDate":"2016-12-18"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2020-05-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2018-01-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.person \u003d person;","lastModifiedDate":"2017-07-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);","lastModifiedDate":"2017-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        address.setText(person.getAddress().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":59,"author":{"gitId":"JovonLim"},"content":"        appointment.setText(person.getAppointmentsString());","lastModifiedDate":"2022-10-01"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        person.getTags().stream()","lastModifiedDate":"2019-01-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2019-01-02"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));","lastModifiedDate":"2019-01-02"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-07-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-07-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-07-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-07-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-07-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {","lastModifiedDate":"2017-07-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-07-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-07-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;","lastModifiedDate":"2017-07-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2017-07-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);","lastModifiedDate":"2017-07-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"JovonLim":5,"-":77}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"\u003c?import javafx.scene.text.TextFlow?\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/null\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"         \u003cTextFlow maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"10.0\" prefWidth\u003d\"130.0\"\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"            \u003cchildren\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"               \u003cLabel fx:id\u003d\"appointment\" maxWidth\u003d\"750.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$appointment\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"            \u003c/children\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"         \u003c/TextFlow\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"      \u003crowConstraints\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"         \u003cRowConstraints /\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"      \u003c/rowConstraints\u003e","lastModifiedDate":"2022-10-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"JovonLim":14,"-":32}},{"path":"src/test/java/seedu/address/logic/commands/BookCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-01"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-10-01"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-01"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-10-01"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-01"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-01"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-01"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-01"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-01"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-10-01"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-10-01"},{"lineNumber":15,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-01"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2022-10-01"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"public class BookCommandTest {","lastModifiedDate":"2022-10-01"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-01"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"    private final Appointment appointment \u003d new Appointment(\"Sore Throat\",","lastModifiedDate":"2022-10-01"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"            \"2022-12-10 16:30\", false);","lastModifiedDate":"2022-10-02"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-01"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"    public void execute_validIndexBooking_success() {","lastModifiedDate":"2022-10-01"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"        Person personToBookFor \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2022-10-01"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"        Person editedPerson \u003d new PersonBuilder(personToBookFor).withAppointment(appointment).build();","lastModifiedDate":"2022-10-01"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"        BookCommand bookCommand \u003d new BookCommand(INDEX_FIRST_PERSON, appointment);","lastModifiedDate":"2022-10-01"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"        String expectedMessage \u003d String.format(BookCommand.MESSAGE_BOOK_APPOINTMENT_SUCCESS, editedPerson);","lastModifiedDate":"2022-10-01"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-01"},{"lineNumber":36,"author":{"gitId":"JovonLim"},"content":"        expectedModel.setPerson(personToBookFor, editedPerson);","lastModifiedDate":"2022-10-01"},{"lineNumber":37,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":38,"author":{"gitId":"JovonLim"},"content":"        assertCommandSuccess(bookCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-01"},{"lineNumber":39,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":40,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":41,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-01"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2022-10-01"},{"lineNumber":43,"author":{"gitId":"JovonLim"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2022-10-01"},{"lineNumber":44,"author":{"gitId":"JovonLim"},"content":"        BookCommand bookCommand \u003d new BookCommand(outOfBoundIndex, appointment);","lastModifiedDate":"2022-10-01"},{"lineNumber":45,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":46,"author":{"gitId":"JovonLim"},"content":"        assertCommandFailure(bookCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-01"},{"lineNumber":47,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":48,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-01"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"    public void execute_invalidAppointmentBooking_throwsCommandException() {","lastModifiedDate":"2022-10-01"},{"lineNumber":51,"author":{"gitId":"JovonLim"},"content":"        Person personToBookFor \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2022-10-01"},{"lineNumber":52,"author":{"gitId":"JovonLim"},"content":"        Person editedPerson \u003d new PersonBuilder(personToBookFor).withAppointment(appointment).build();","lastModifiedDate":"2022-10-01"},{"lineNumber":53,"author":{"gitId":"JovonLim"},"content":"        model.setPerson(personToBookFor, editedPerson);","lastModifiedDate":"2022-10-01"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":55,"author":{"gitId":"JovonLim"},"content":"        BookCommand bookCommand \u003d new BookCommand(INDEX_FIRST_PERSON, appointment);","lastModifiedDate":"2022-10-01"},{"lineNumber":56,"author":{"gitId":"JovonLim"},"content":"        assertCommandFailure(bookCommand, model, BookCommand.MESSAGE_DUPLICATE_APPOINTMENT);","lastModifiedDate":"2022-10-01"},{"lineNumber":57,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":58,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-01"}],"authorContributionMap":{"NicholasTYD":1,"JovonLim":57}},{"path":"src/test/java/seedu/address/logic/commands/CancelCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"guanzhou03"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-04"},{"lineNumber":2,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":3,"author":{"gitId":"guanzhou03"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2022-10-04"},{"lineNumber":4,"author":{"gitId":"guanzhou03"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2022-10-04"},{"lineNumber":5,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-10-04"},{"lineNumber":6,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-04"},{"lineNumber":7,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2022-10-04"},{"lineNumber":8,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-10-04"},{"lineNumber":9,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2022-10-04"},{"lineNumber":10,"author":{"gitId":"guanzhou03"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-04"},{"lineNumber":11,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":12,"author":{"gitId":"guanzhou03"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-04"},{"lineNumber":13,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":14,"author":{"gitId":"guanzhou03"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-04"},{"lineNumber":15,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":16,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-04"},{"lineNumber":17,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-04"},{"lineNumber":18,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-04"},{"lineNumber":19,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-10-04"},{"lineNumber":20,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-10-04"},{"lineNumber":21,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-04"},{"lineNumber":22,"author":{"gitId":"guanzhou03"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2022-10-04"},{"lineNumber":23,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":24,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":25,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":26,"author":{"gitId":"guanzhou03"},"content":"/**","lastModifiedDate":"2022-10-04"},{"lineNumber":27,"author":{"gitId":"guanzhou03"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2022-10-04"},{"lineNumber":28,"author":{"gitId":"guanzhou03"},"content":" * {@code DeleteCommand}.","lastModifiedDate":"2022-10-04"},{"lineNumber":29,"author":{"gitId":"guanzhou03"},"content":" */","lastModifiedDate":"2022-10-04"},{"lineNumber":30,"author":{"gitId":"guanzhou03"},"content":"public class CancelCommandTest {","lastModifiedDate":"2022-10-04"},{"lineNumber":31,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":32,"author":{"gitId":"guanzhou03"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-04"},{"lineNumber":33,"author":{"gitId":"guanzhou03"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":34,"author":{"gitId":"guanzhou03"},"content":"    public void execute_validIndexCancel_success() {","lastModifiedDate":"2022-10-04"},{"lineNumber":35,"author":{"gitId":"guanzhou03"},"content":"        Person personWithAppt \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2022-10-04"},{"lineNumber":36,"author":{"gitId":"guanzhou03"},"content":"        Person editedPerson \u003d new PersonBuilder(personWithAppt).withAppointmentList(new ArrayList\u003c\u003e()).build();","lastModifiedDate":"2022-10-04"},{"lineNumber":37,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":38,"author":{"gitId":"guanzhou03"},"content":"        String expectedCancelMessage \u003d CancelCommand.MESSAGE_CANCEL_APPOINTMENT_SUCCESS + personWithAppt.getName();","lastModifiedDate":"2022-10-04"},{"lineNumber":39,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":40,"author":{"gitId":"guanzhou03"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-04"},{"lineNumber":41,"author":{"gitId":"guanzhou03"},"content":"        expectedModel.setPerson(personWithAppt, editedPerson);","lastModifiedDate":"2022-10-04"},{"lineNumber":42,"author":{"gitId":"guanzhou03"},"content":"        CancelCommand cancelCommand \u003d new CancelCommand(INDEX_SECOND_PERSON, Index.fromOneBased(1));","lastModifiedDate":"2022-10-04"},{"lineNumber":43,"author":{"gitId":"guanzhou03"},"content":"        assertCommandSuccess(cancelCommand, model, expectedCancelMessage, expectedModel);","lastModifiedDate":"2022-10-04"},{"lineNumber":44,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":45,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":46,"author":{"gitId":"guanzhou03"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":47,"author":{"gitId":"guanzhou03"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2022-10-04"},{"lineNumber":48,"author":{"gitId":"guanzhou03"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2022-10-04"},{"lineNumber":49,"author":{"gitId":"guanzhou03"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2022-10-04"},{"lineNumber":50,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":51,"author":{"gitId":"guanzhou03"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-04"},{"lineNumber":52,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":53,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":54,"author":{"gitId":"guanzhou03"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":55,"author":{"gitId":"guanzhou03"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2022-10-04"},{"lineNumber":56,"author":{"gitId":"guanzhou03"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2022-10-04"},{"lineNumber":57,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":58,"author":{"gitId":"guanzhou03"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2022-10-04"},{"lineNumber":59,"author":{"gitId":"guanzhou03"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2022-10-04"},{"lineNumber":60,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":61,"author":{"gitId":"guanzhou03"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);","lastModifiedDate":"2022-10-04"},{"lineNumber":62,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":63,"author":{"gitId":"guanzhou03"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-04"},{"lineNumber":64,"author":{"gitId":"guanzhou03"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2022-10-04"},{"lineNumber":65,"author":{"gitId":"guanzhou03"},"content":"        showNoPerson(expectedModel);","lastModifiedDate":"2022-10-04"},{"lineNumber":66,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":67,"author":{"gitId":"guanzhou03"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-04"},{"lineNumber":68,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":69,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":70,"author":{"gitId":"guanzhou03"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":71,"author":{"gitId":"guanzhou03"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2022-10-04"},{"lineNumber":72,"author":{"gitId":"guanzhou03"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2022-10-04"},{"lineNumber":73,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":74,"author":{"gitId":"guanzhou03"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2022-10-04"},{"lineNumber":75,"author":{"gitId":"guanzhou03"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2022-10-04"},{"lineNumber":76,"author":{"gitId":"guanzhou03"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2022-10-04"},{"lineNumber":77,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":78,"author":{"gitId":"guanzhou03"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2022-10-04"},{"lineNumber":79,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":80,"author":{"gitId":"guanzhou03"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-04"},{"lineNumber":81,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":82,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":83,"author":{"gitId":"guanzhou03"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":84,"author":{"gitId":"guanzhou03"},"content":"    public void equals() {","lastModifiedDate":"2022-10-04"},{"lineNumber":85,"author":{"gitId":"guanzhou03"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2022-10-04"},{"lineNumber":86,"author":{"gitId":"guanzhou03"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2022-10-04"},{"lineNumber":87,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":88,"author":{"gitId":"guanzhou03"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2022-10-04"},{"lineNumber":89,"author":{"gitId":"guanzhou03"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2022-10-04"},{"lineNumber":90,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":91,"author":{"gitId":"guanzhou03"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2022-10-04"},{"lineNumber":92,"author":{"gitId":"guanzhou03"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2022-10-04"},{"lineNumber":93,"author":{"gitId":"guanzhou03"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2022-10-04"},{"lineNumber":94,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":95,"author":{"gitId":"guanzhou03"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2022-10-04"},{"lineNumber":96,"author":{"gitId":"guanzhou03"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2022-10-04"},{"lineNumber":97,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":98,"author":{"gitId":"guanzhou03"},"content":"        // null -\u003e returns false","lastModifiedDate":"2022-10-04"},{"lineNumber":99,"author":{"gitId":"guanzhou03"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2022-10-04"},{"lineNumber":100,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":101,"author":{"gitId":"guanzhou03"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2022-10-04"},{"lineNumber":102,"author":{"gitId":"guanzhou03"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2022-10-04"},{"lineNumber":103,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":104,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":105,"author":{"gitId":"guanzhou03"},"content":"    /**","lastModifiedDate":"2022-10-04"},{"lineNumber":106,"author":{"gitId":"guanzhou03"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2022-10-04"},{"lineNumber":107,"author":{"gitId":"guanzhou03"},"content":"     */","lastModifiedDate":"2022-10-04"},{"lineNumber":108,"author":{"gitId":"guanzhou03"},"content":"    private void showNoPerson(Model model) {","lastModifiedDate":"2022-10-04"},{"lineNumber":109,"author":{"gitId":"guanzhou03"},"content":"        model.updateFilteredPersonList(p -\u003e false);","lastModifiedDate":"2022-10-04"},{"lineNumber":110,"author":{"gitId":"guanzhou03"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":111,"author":{"gitId":"guanzhou03"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());","lastModifiedDate":"2022-10-04"},{"lineNumber":112,"author":{"gitId":"guanzhou03"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":113,"author":{"gitId":"guanzhou03"},"content":"}","lastModifiedDate":"2022-10-04"}],"authorContributionMap":{"guanzhou03":113}},{"path":"src/test/java/seedu/address/logic/commands/MarkCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-02"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-10-02"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-02"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-02"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-10-02"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_APPOINTMENT;","lastModifiedDate":"2022-10-02"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2022-10-02"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-02"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-02"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-02"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-02"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-10-02"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-10-02"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-02"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-02"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2022-10-02"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"class MarkCommandTest {","lastModifiedDate":"2022-10-02"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"    private final Model typicalModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-02"},{"lineNumber":28,"author":{"gitId":"NicholasTYD"},"content":"    public void execute_markUnmarkedAppointment_success() {","lastModifiedDate":"2022-10-02"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"        Index targetPersonIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"        Index targetAppointmentIndex \u003d INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"        AddressBook testAddressBook \u003d new AddressBook();","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"        Model testModel \u003d new ModelManager(testAddressBook, new UserPrefs());","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"        Appointment unmarkedAppointment \u003d new Appointment(\"Fever\", \"2019-12-31 23:45\", false);","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"        Person unmarkedPerson \u003d new PersonBuilder().withAppointment(unmarkedAppointment).build();","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"        testModel.addPerson(unmarkedPerson);","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"        Person personToMarkFor \u003d testModel.getFilteredPersonList().get(targetPersonIndex.getZeroBased());","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"        Appointment markedAppointment \u003d new Appointment(\"Fever\", \"2019-12-31 23:45\", true);","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"        Person markedPerson \u003d new PersonBuilder().withAppointment(markedAppointment).build();","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"        MarkCommand markCommand \u003d new MarkCommand(targetPersonIndex, targetAppointmentIndex);","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"NicholasTYD"},"content":"        String expectedMessage \u003d String.format(MarkCommand.MESSAGE_MARK_PERSON_SUCCESS,","lastModifiedDate":"2022-10-02"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"                targetAppointmentIndex.getOneBased(),","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"NicholasTYD"},"content":"                markedPerson.getName());","lastModifiedDate":"2022-10-02"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":49,"author":{"gitId":"NicholasTYD"},"content":"        ModelManager expectedModel \u003d new ModelManager(testModel.getAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"NicholasTYD"},"content":"        expectedModel.setPerson(personToMarkFor, markedPerson);","lastModifiedDate":"2022-10-02"},{"lineNumber":51,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":52,"author":{"gitId":"NicholasTYD"},"content":"        assertCommandSuccess(markCommand, testModel, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":54,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":55,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-02"},{"lineNumber":56,"author":{"gitId":"NicholasTYD"},"content":"    public void execute_markAlreadyMarkedAppointment_throwsCommandException() {","lastModifiedDate":"2022-10-02"},{"lineNumber":57,"author":{"gitId":"NicholasTYD"},"content":"        Index targetPersonIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"NicholasTYD"},"content":"        Index targetAppointmentIndex \u003d INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-03"},{"lineNumber":59,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":60,"author":{"gitId":"NicholasTYD"},"content":"        MarkCommand markCommand \u003d new MarkCommand(targetPersonIndex, targetAppointmentIndex);","lastModifiedDate":"2022-10-03"},{"lineNumber":61,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":62,"author":{"gitId":"NicholasTYD"},"content":"        assertCommandFailure(markCommand, typicalModel, MarkCommand.MESSAGE_ALREADY_MARKED);","lastModifiedDate":"2022-10-03"},{"lineNumber":63,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":64,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":65,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-02"},{"lineNumber":66,"author":{"gitId":"NicholasTYD"},"content":"    public void execute_markNonExistentAppointment_throwsCommandException() {","lastModifiedDate":"2022-10-02"},{"lineNumber":67,"author":{"gitId":"NicholasTYD"},"content":"        Index targetPersonIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-10-03"},{"lineNumber":68,"author":{"gitId":"NicholasTYD"},"content":"        Index targetAppointmentIndex \u003d INDEX_THIRD_APPOINTMENT;","lastModifiedDate":"2022-10-03"},{"lineNumber":69,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":70,"author":{"gitId":"NicholasTYD"},"content":"        MarkCommand markCommand \u003d new MarkCommand(targetPersonIndex, targetAppointmentIndex);","lastModifiedDate":"2022-10-03"},{"lineNumber":71,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":72,"author":{"gitId":"NicholasTYD"},"content":"        assertCommandFailure(markCommand, typicalModel, Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-03"},{"lineNumber":73,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":74,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-02"}],"authorContributionMap":{"NicholasTYD":74}},{"path":"src/test/java/seedu/address/logic/commands/UnmarkCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2022-10-03"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2022-10-03"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2022-10-03"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-03"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-10-03"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2022-10-03"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_APPOINTMENT;","lastModifiedDate":"2022-10-03"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2022-10-03"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-03"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2022-10-03"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2022-10-03"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2022-10-03"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2022-10-03"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2022-10-03"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2022-10-03"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-03"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2022-10-03"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2022-10-03"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"class UnmarkCommandTest {","lastModifiedDate":"2022-10-03"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"    private final Model typicalModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-03"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-03"},{"lineNumber":28,"author":{"gitId":"NicholasTYD"},"content":"    void execute_unmarkMarkedAppointment_success() {","lastModifiedDate":"2022-10-03"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"        Index targetPersonIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2022-10-03"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"        Index targetAppointmentIndex \u003d INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-03"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"        AddressBook testAddressBook \u003d new AddressBook();","lastModifiedDate":"2022-10-03"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"        Model testModel \u003d new ModelManager(testAddressBook, new UserPrefs());","lastModifiedDate":"2022-10-03"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"        Appointment markedAppointment \u003d new Appointment(\"Cough\", \"2010-12-22 12:45\", true);","lastModifiedDate":"2022-10-03"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"        Person markedPerson \u003d new PersonBuilder().withAppointment(markedAppointment).build();","lastModifiedDate":"2022-10-03"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"        testModel.addPerson(markedPerson);","lastModifiedDate":"2022-10-03"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"        Person personToUnmarkFor \u003d testModel.getFilteredPersonList().get(targetPersonIndex.getZeroBased());","lastModifiedDate":"2022-10-03"},{"lineNumber":40,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"        Appointment unmarkedAppointment \u003d new Appointment(\"Cough\", \"2010-12-22 12:45\", false);","lastModifiedDate":"2022-10-03"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"        Person unmarkedPerson \u003d new PersonBuilder().withAppointment(unmarkedAppointment).build();","lastModifiedDate":"2022-10-03"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"        UnmarkCommand unmarkCommand \u003d new UnmarkCommand(targetPersonIndex, targetAppointmentIndex);","lastModifiedDate":"2022-10-03"},{"lineNumber":45,"author":{"gitId":"NicholasTYD"},"content":"        String expectedMessage \u003d String.format(UnmarkCommand.MESSAGE_UNMARK_PERSON_SUCCESS,","lastModifiedDate":"2022-10-03"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"                targetAppointmentIndex.getOneBased(),","lastModifiedDate":"2022-10-03"},{"lineNumber":47,"author":{"gitId":"NicholasTYD"},"content":"                unmarkedPerson.getName());","lastModifiedDate":"2022-10-03"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":49,"author":{"gitId":"NicholasTYD"},"content":"        ModelManager expectedModel \u003d new ModelManager(testModel.getAddressBook(), new UserPrefs());","lastModifiedDate":"2022-10-03"},{"lineNumber":50,"author":{"gitId":"NicholasTYD"},"content":"        expectedModel.setPerson(personToUnmarkFor, unmarkedPerson);","lastModifiedDate":"2022-10-03"},{"lineNumber":51,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":52,"author":{"gitId":"NicholasTYD"},"content":"        assertCommandSuccess(unmarkCommand, testModel, expectedMessage, expectedModel);","lastModifiedDate":"2022-10-03"},{"lineNumber":53,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":54,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":55,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-03"},{"lineNumber":56,"author":{"gitId":"NicholasTYD"},"content":"    void execute_unmarkAlreadyUnmarkedAppointment_throwsCommandException() {","lastModifiedDate":"2022-10-03"},{"lineNumber":57,"author":{"gitId":"NicholasTYD"},"content":"        Index targetPersonIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2022-10-03"},{"lineNumber":58,"author":{"gitId":"NicholasTYD"},"content":"        Index targetAppointmentIndex \u003d INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-03"},{"lineNumber":59,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":60,"author":{"gitId":"NicholasTYD"},"content":"        UnmarkCommand unmarkCommand \u003d new UnmarkCommand(targetPersonIndex, targetAppointmentIndex);","lastModifiedDate":"2022-10-03"},{"lineNumber":61,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":62,"author":{"gitId":"NicholasTYD"},"content":"        assertCommandFailure(unmarkCommand, typicalModel, UnmarkCommand.MESSAGE_ALREADY_UNMARKED);","lastModifiedDate":"2022-10-03"},{"lineNumber":63,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":64,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":65,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-03"},{"lineNumber":66,"author":{"gitId":"NicholasTYD"},"content":"    public void execute_unmarkNonExistentAppointment_throwsCommandException() {","lastModifiedDate":"2022-10-03"},{"lineNumber":67,"author":{"gitId":"NicholasTYD"},"content":"        UnmarkCommand unmarkCommand \u003d new UnmarkCommand(INDEX_FIRST_PERSON, INDEX_THIRD_APPOINTMENT);","lastModifiedDate":"2022-10-03"},{"lineNumber":68,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-03"},{"lineNumber":69,"author":{"gitId":"NicholasTYD"},"content":"        assertCommandFailure(unmarkCommand, typicalModel, Messages.MESSAGE_INVALID_APPOINTMENT_DISPLAYED_INDEX);","lastModifiedDate":"2022-10-03"},{"lineNumber":70,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-03"},{"lineNumber":71,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-03"}],"authorContributionMap":{"NicholasTYD":71}},{"path":"src/test/java/seedu/address/logic/parser/BookCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"JovonLim"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-01"},{"lineNumber":2,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-01"},{"lineNumber":4,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-10-01"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-10-01"},{"lineNumber":6,"author":{"gitId":"JovonLim"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-10-01"},{"lineNumber":7,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":8,"author":{"gitId":"JovonLim"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-01"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":10,"author":{"gitId":"JovonLim"},"content":"import seedu.address.logic.commands.BookCommand;","lastModifiedDate":"2022-10-01"},{"lineNumber":11,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":12,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":13,"author":{"gitId":"JovonLim"},"content":"public class BookCommandParserTest {","lastModifiedDate":"2022-10-01"},{"lineNumber":14,"author":{"gitId":"JovonLim"},"content":"    private final BookCommandParser parser \u003d new BookCommandParser();","lastModifiedDate":"2022-10-01"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"    private final Appointment appointment \u003d new Appointment(\"Sore Throat\", \"2022-12-10 16:30\", false);","lastModifiedDate":"2022-10-02"},{"lineNumber":16,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":17,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-01"},{"lineNumber":18,"author":{"gitId":"JovonLim"},"content":"    public void parse_validArgs_returnsBookCommand() {","lastModifiedDate":"2022-10-01"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"        assertParseSuccess(parser, \"1 r/Sore Throat d/2022-12-10 16:30\",","lastModifiedDate":"2022-10-01"},{"lineNumber":20,"author":{"gitId":"JovonLim"},"content":"                new BookCommand(INDEX_FIRST_PERSON, appointment));","lastModifiedDate":"2022-10-01"},{"lineNumber":21,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":22,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":23,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-01"},{"lineNumber":24,"author":{"gitId":"JovonLim"},"content":"    public void parse_validArgs_returnsBookCommand1() {","lastModifiedDate":"2022-10-01"},{"lineNumber":25,"author":{"gitId":"JovonLim"},"content":"        assertParseSuccess(parser, \"1 r/Sore Throat d/16:30 2022-12-10\",","lastModifiedDate":"2022-10-01"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"                new BookCommand(INDEX_FIRST_PERSON, appointment));","lastModifiedDate":"2022-10-01"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":28,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":29,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-01"},{"lineNumber":30,"author":{"gitId":"JovonLim"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2022-10-01"},{"lineNumber":31,"author":{"gitId":"JovonLim"},"content":"        assertParseFailure(parser, \"a r/Sore Throat d/2022-12-10 16:30\",","lastModifiedDate":"2022-10-01"},{"lineNumber":32,"author":{"gitId":"JovonLim"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, BookCommand.MESSAGE_USAGE));","lastModifiedDate":"2022-10-01"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"}","lastModifiedDate":"2022-10-01"}],"authorContributionMap":{"NicholasTYD":1,"JovonLim":33}},{"path":"src/test/java/seedu/address/logic/parser/MarkCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-04"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-04"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-10-04"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-10-04"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-04"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-10-04"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_APPOINTMENT;","lastModifiedDate":"2022-10-04"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2022-10-04"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-04"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.commands.MarkCommand;","lastModifiedDate":"2022-10-04"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"class MarkCommandParserTest {","lastModifiedDate":"2022-10-04"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"    private final MarkCommandParser parser \u003d new MarkCommandParser();","lastModifiedDate":"2022-10-04"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"    private final String parseExceptionInvalidCommandMessage \u003d","lastModifiedDate":"2022-10-04"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkCommand.MESSAGE_USAGE);","lastModifiedDate":"2022-10-04"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_validArgs1_returnsMarkCommand() {","lastModifiedDate":"2022-10-04"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"        assertParseSuccess(parser, \"1 1\", new MarkCommand(INDEX_FIRST_PERSON, INDEX_FIRST_APPOINTMENT));","lastModifiedDate":"2022-10-04"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_validArgs2_returnsMarkCommand() {","lastModifiedDate":"2022-10-04"},{"lineNumber":28,"author":{"gitId":"NicholasTYD"},"content":"        assertParseSuccess(parser, \"  3  2  \", new MarkCommand(INDEX_THIRD_PERSON, INDEX_SECOND_APPOINTMENT));","lastModifiedDate":"2022-10-04"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_noArgs_throwsParseException() {","lastModifiedDate":"2022-10-04"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"        assertParseFailure(parser, \"\", parseExceptionInvalidCommandMessage);","lastModifiedDate":"2022-10-04"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_insufficientArgs_throwsParseException() {","lastModifiedDate":"2022-10-04"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"        assertParseFailure(parser, \"\", parseExceptionInvalidCommandMessage);","lastModifiedDate":"2022-10-04"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":40,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2022-10-04"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"        assertParseFailure(parser, \"a\", parseExceptionInvalidCommandMessage);","lastModifiedDate":"2022-10-04"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":45,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":47,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_tooManyArgs_throwsParseException() {","lastModifiedDate":"2022-10-04"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"        assertParseFailure(parser, \"1 2 3 4 5\", parseExceptionInvalidCommandMessage);","lastModifiedDate":"2022-10-04"},{"lineNumber":49,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":50,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-04"}],"authorContributionMap":{"NicholasTYD":50}},{"path":"src/test/java/seedu/address/logic/parser/UnmarkCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"NicholasTYD"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2022-10-04"},{"lineNumber":2,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":3,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2022-10-04"},{"lineNumber":4,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2022-10-04"},{"lineNumber":5,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2022-10-04"},{"lineNumber":6,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPOINTMENT;","lastModifiedDate":"2022-10-04"},{"lineNumber":7,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2022-10-04"},{"lineNumber":8,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_APPOINTMENT;","lastModifiedDate":"2022-10-04"},{"lineNumber":9,"author":{"gitId":"NicholasTYD"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2022-10-04"},{"lineNumber":10,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":11,"author":{"gitId":"NicholasTYD"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2022-10-04"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"import seedu.address.logic.commands.UnmarkCommand;","lastModifiedDate":"2022-10-04"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":15,"author":{"gitId":"NicholasTYD"},"content":"class UnmarkCommandParserTest {","lastModifiedDate":"2022-10-04"},{"lineNumber":16,"author":{"gitId":"NicholasTYD"},"content":"    private final UnmarkCommandParser parser \u003d new UnmarkCommandParser();","lastModifiedDate":"2022-10-04"},{"lineNumber":17,"author":{"gitId":"NicholasTYD"},"content":"    private final String parseExceptionInvalidCommandMessage \u003d","lastModifiedDate":"2022-10-04"},{"lineNumber":18,"author":{"gitId":"NicholasTYD"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnmarkCommand.MESSAGE_USAGE);","lastModifiedDate":"2022-10-04"},{"lineNumber":19,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":20,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":21,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_validArgs1_returnsMarkCommand() {","lastModifiedDate":"2022-10-04"},{"lineNumber":22,"author":{"gitId":"NicholasTYD"},"content":"        assertParseSuccess(parser, \"1 1\", new UnmarkCommand(INDEX_FIRST_PERSON, INDEX_FIRST_APPOINTMENT));","lastModifiedDate":"2022-10-04"},{"lineNumber":23,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":24,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":25,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":26,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_validArgs2_returnsMarkCommand() {","lastModifiedDate":"2022-10-04"},{"lineNumber":27,"author":{"gitId":"NicholasTYD"},"content":"        assertParseSuccess(parser, \"  3  2  \", new UnmarkCommand(INDEX_THIRD_PERSON, INDEX_SECOND_APPOINTMENT));","lastModifiedDate":"2022-10-04"},{"lineNumber":28,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":29,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":30,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_noArgs_throwsParseException() {","lastModifiedDate":"2022-10-04"},{"lineNumber":32,"author":{"gitId":"NicholasTYD"},"content":"        assertParseFailure(parser, \"\", parseExceptionInvalidCommandMessage);","lastModifiedDate":"2022-10-04"},{"lineNumber":33,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":35,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":36,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_insufficientArgs_throwsParseException() {","lastModifiedDate":"2022-10-04"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"        assertParseFailure(parser, \"\", parseExceptionInvalidCommandMessage);","lastModifiedDate":"2022-10-04"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":40,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":41,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2022-10-04"},{"lineNumber":42,"author":{"gitId":"NicholasTYD"},"content":"        assertParseFailure(parser, \"a\", parseExceptionInvalidCommandMessage);","lastModifiedDate":"2022-10-04"},{"lineNumber":43,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":44,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-04"},{"lineNumber":45,"author":{"gitId":"NicholasTYD"},"content":"    @Test","lastModifiedDate":"2022-10-04"},{"lineNumber":46,"author":{"gitId":"NicholasTYD"},"content":"    public void parse_tooManyArgs_throwsParseException() {","lastModifiedDate":"2022-10-04"},{"lineNumber":47,"author":{"gitId":"NicholasTYD"},"content":"        assertParseFailure(parser, \"1 2 3 4 5\", parseExceptionInvalidCommandMessage);","lastModifiedDate":"2022-10-04"},{"lineNumber":48,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-04"},{"lineNumber":49,"author":{"gitId":"NicholasTYD"},"content":"}","lastModifiedDate":"2022-10-04"}],"authorContributionMap":{"NicholasTYD":49}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"JovonLim"},"content":"    private static final String INVALID_REASON \u003d \"\";","lastModifiedDate":"2022-10-01"},{"lineNumber":27,"author":{"gitId":"JovonLim"},"content":"    private static final String INVALID_DATE \u003d \"2019-14-10 25:30\";","lastModifiedDate":"2022-10-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"JovonLim"},"content":"    private static final List\u003cJsonAdaptedAppointment\u003e VALID_APPOINTMENTS \u003d BENSON.getAppointments().stream()","lastModifiedDate":"2022-10-01"},{"lineNumber":34,"author":{"gitId":"JovonLim"},"content":"            .map(JsonAdaptedAppointment::new)","lastModifiedDate":"2022-10-01"},{"lineNumber":35,"author":{"gitId":"JovonLim"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2022-10-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"JovonLim"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_APPOINTMENTS,","lastModifiedDate":"2022-10-01"},{"lineNumber":50,"author":{"gitId":"JovonLim"},"content":"                        VALID_TAGS);","lastModifiedDate":"2022-10-01"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"JovonLim"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2022-10-01"},{"lineNumber":58,"author":{"gitId":"JovonLim"},"content":"                VALID_APPOINTMENTS, VALID_TAGS);","lastModifiedDate":"2022-10-01"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"JovonLim"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_APPOINTMENTS,","lastModifiedDate":"2022-10-01"},{"lineNumber":67,"author":{"gitId":"JovonLim"},"content":"                        VALID_TAGS);","lastModifiedDate":"2022-10-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"JovonLim"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2022-10-01"},{"lineNumber":75,"author":{"gitId":"JovonLim"},"content":"                VALID_APPOINTMENTS, VALID_TAGS);","lastModifiedDate":"2022-10-01"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"JovonLim"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_APPOINTMENTS,","lastModifiedDate":"2022-10-01"},{"lineNumber":84,"author":{"gitId":"JovonLim"},"content":"                        VALID_TAGS);","lastModifiedDate":"2022-10-01"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"JovonLim"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,","lastModifiedDate":"2022-10-01"},{"lineNumber":92,"author":{"gitId":"JovonLim"},"content":"                VALID_APPOINTMENTS, VALID_TAGS);","lastModifiedDate":"2022-10-01"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"JovonLim"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_APPOINTMENTS,","lastModifiedDate":"2022-10-01"},{"lineNumber":101,"author":{"gitId":"JovonLim"},"content":"                        VALID_TAGS);","lastModifiedDate":"2022-10-01"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"JovonLim"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,","lastModifiedDate":"2022-10-01"},{"lineNumber":109,"author":{"gitId":"JovonLim"},"content":"                VALID_APPOINTMENTS, VALID_TAGS);","lastModifiedDate":"2022-10-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2018-08-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":119,"author":{"gitId":"JovonLim"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_APPOINTMENTS,","lastModifiedDate":"2022-10-01"},{"lineNumber":120,"author":{"gitId":"JovonLim"},"content":"                        invalidTags);","lastModifiedDate":"2022-10-01"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":124,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-01"},{"lineNumber":125,"author":{"gitId":"JovonLim"},"content":"    public void toModelType_invalidReason_throwsIllegalValueException() {","lastModifiedDate":"2022-10-01"},{"lineNumber":126,"author":{"gitId":"JovonLim"},"content":"        List\u003cJsonAdaptedAppointment\u003e invalidAppointments \u003d new ArrayList\u003c\u003e(VALID_APPOINTMENTS);","lastModifiedDate":"2022-10-01"},{"lineNumber":127,"author":{"gitId":"NicholasTYD"},"content":"        invalidAppointments.add(new JsonAdaptedAppointment(INVALID_REASON, \"2019-12-16 16:30\", false));","lastModifiedDate":"2022-10-02"},{"lineNumber":128,"author":{"gitId":"JovonLim"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2022-10-01"},{"lineNumber":129,"author":{"gitId":"JovonLim"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidAppointments,","lastModifiedDate":"2022-10-01"},{"lineNumber":130,"author":{"gitId":"JovonLim"},"content":"                        VALID_TAGS);","lastModifiedDate":"2022-10-01"},{"lineNumber":131,"author":{"gitId":"JovonLim"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2022-10-01"},{"lineNumber":132,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":133,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":134,"author":{"gitId":"JovonLim"},"content":"    @Test","lastModifiedDate":"2022-10-01"},{"lineNumber":135,"author":{"gitId":"JovonLim"},"content":"    public void toModelType_invalidDate_throwsIllegalValueException() {","lastModifiedDate":"2022-10-01"},{"lineNumber":136,"author":{"gitId":"JovonLim"},"content":"        List\u003cJsonAdaptedAppointment\u003e invalidAppointments \u003d new ArrayList\u003c\u003e(VALID_APPOINTMENTS);","lastModifiedDate":"2022-10-01"},{"lineNumber":137,"author":{"gitId":"NicholasTYD"},"content":"        invalidAppointments.add(new JsonAdaptedAppointment(\"Sore Throat\", INVALID_DATE, false));","lastModifiedDate":"2022-10-02"},{"lineNumber":138,"author":{"gitId":"JovonLim"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2022-10-01"},{"lineNumber":139,"author":{"gitId":"JovonLim"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidAppointments,","lastModifiedDate":"2022-10-01"},{"lineNumber":140,"author":{"gitId":"JovonLim"},"content":"                        VALID_TAGS);","lastModifiedDate":"2022-10-01"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2022-10-01"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":144,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"NicholasTYD":2,"JovonLim":38,"-":104}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"JovonLim"},"content":"import java.util.ArrayList;","lastModifiedDate":"2022-10-01"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":5,"author":{"gitId":"JovonLim"},"content":"import java.util.List;","lastModifiedDate":"2022-10-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-01-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-01-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-04-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-01-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-04-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Address address;","lastModifiedDate":"2017-12-20"},{"lineNumber":31,"author":{"gitId":"NicholasTYD"},"content":"    private List\u003cAppointment\u003e listOfAppointments;","lastModifiedDate":"2022-10-02"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-12-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":42,"author":{"gitId":"JovonLim"},"content":"        listOfAppointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2022-10-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2017-12-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();","lastModifiedDate":"2017-12-20"},{"lineNumber":54,"author":{"gitId":"JovonLim"},"content":"        listOfAppointments \u003d new ArrayList\u003c\u003e(personToCopy.getAppointments());","lastModifiedDate":"2022-10-01"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());","lastModifiedDate":"2017-12-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2017-12-20"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":98,"author":{"gitId":"JovonLim"},"content":"    /**","lastModifiedDate":"2022-10-01"},{"lineNumber":99,"author":{"gitId":"JovonLim"},"content":"     * Adds the {@code Appointment} of the {@code Person} that we are building.","lastModifiedDate":"2022-10-01"},{"lineNumber":100,"author":{"gitId":"JovonLim"},"content":"     */","lastModifiedDate":"2022-10-01"},{"lineNumber":101,"author":{"gitId":"JovonLim"},"content":"    public PersonBuilder withAppointment(Appointment appointment) {","lastModifiedDate":"2022-10-01"},{"lineNumber":102,"author":{"gitId":"JovonLim"},"content":"        this.listOfAppointments.add(appointment);","lastModifiedDate":"2022-10-01"},{"lineNumber":103,"author":{"gitId":"JovonLim"},"content":"        return this;","lastModifiedDate":"2022-10-01"},{"lineNumber":104,"author":{"gitId":"JovonLim"},"content":"    }","lastModifiedDate":"2022-10-01"},{"lineNumber":105,"author":{"gitId":"JovonLim"},"content":"","lastModifiedDate":"2022-10-01"},{"lineNumber":106,"author":{"gitId":"NicholasTYD"},"content":"    /**","lastModifiedDate":"2022-10-02"},{"lineNumber":107,"author":{"gitId":"NicholasTYD"},"content":"     * Sets the List of {@code Appointment} of the {@code Person} that we are building.","lastModifiedDate":"2022-10-02"},{"lineNumber":108,"author":{"gitId":"NicholasTYD"},"content":"     */","lastModifiedDate":"2022-10-02"},{"lineNumber":109,"author":{"gitId":"NicholasTYD"},"content":"    public PersonBuilder withAppointmentList(List\u003cAppointment\u003e listOfAppointments) {","lastModifiedDate":"2022-10-02"},{"lineNumber":110,"author":{"gitId":"NicholasTYD"},"content":"        this.listOfAppointments \u003d listOfAppointments;","lastModifiedDate":"2022-10-02"},{"lineNumber":111,"author":{"gitId":"NicholasTYD"},"content":"        return this;","lastModifiedDate":"2022-10-02"},{"lineNumber":112,"author":{"gitId":"NicholasTYD"},"content":"    }","lastModifiedDate":"2022-10-02"},{"lineNumber":113,"author":{"gitId":"NicholasTYD"},"content":"","lastModifiedDate":"2022-10-02"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public Person build() {","lastModifiedDate":"2017-04-05"},{"lineNumber":115,"author":{"gitId":"JovonLim"},"content":"        return new Person(name, phone, email, address, listOfAppointments, tags);","lastModifiedDate":"2022-10-01"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":118,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"NicholasTYD":9,"JovonLim":14,"-":95}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-08-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);","lastModifiedDate":"2017-08-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);","lastModifiedDate":"2017-08-05"},{"lineNumber":12,"author":{"gitId":"NicholasTYD"},"content":"    public static final Index INDEX_FIRST_APPOINTMENT \u003d Index.fromOneBased(1);","lastModifiedDate":"2022-10-02"},{"lineNumber":13,"author":{"gitId":"NicholasTYD"},"content":"    public static final Index INDEX_SECOND_APPOINTMENT \u003d Index.fromOneBased(2);","lastModifiedDate":"2022-10-02"},{"lineNumber":14,"author":{"gitId":"NicholasTYD"},"content":"    public static final Index INDEX_THIRD_APPOINTMENT \u003d Index.fromOneBased(3);","lastModifiedDate":"2022-10-02"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-05"}],"authorContributionMap":{"NicholasTYD":3,"-":12}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-08-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-08-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"JovonLim"},"content":"import seedu.address.model.person.Appointment;","lastModifiedDate":"2022-10-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2018-01-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")","lastModifiedDate":"2017-04-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            .withPhone(\"94351253\")","lastModifiedDate":"2018-04-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            .withTags(\"friends\").build();","lastModifiedDate":"2016-09-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2018-01-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")","lastModifiedDate":"2017-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")","lastModifiedDate":"2017-04-05"},{"lineNumber":34,"author":{"gitId":"NicholasTYD"},"content":"            .withAppointment(new Appointment(\"Sore Throat\", \"2019-12-10 16:30\", false))","lastModifiedDate":"2022-10-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();","lastModifiedDate":"2016-09-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")","lastModifiedDate":"2018-01-10"},{"lineNumber":37,"author":{"gitId":"NicholasTYD"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\")","lastModifiedDate":"2022-10-02"},{"lineNumber":38,"author":{"gitId":"NicholasTYD"},"content":"            .withAppointment(new Appointment(\"Cough\", \"2010-12-31 23:45\", true))","lastModifiedDate":"2022-10-02"},{"lineNumber":39,"author":{"gitId":"NicholasTYD"},"content":"            .build();","lastModifiedDate":"2022-10-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")","lastModifiedDate":"2018-01-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();","lastModifiedDate":"2018-03-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")","lastModifiedDate":"2018-01-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")","lastModifiedDate":"2018-01-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")","lastModifiedDate":"2018-01-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")","lastModifiedDate":"2018-01-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")","lastModifiedDate":"2018-01-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2018-01-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2018-01-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)","lastModifiedDate":"2017-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            .build();","lastModifiedDate":"2017-09-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation","lastModifiedDate":"2017-07-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2017-08-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2017-08-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2017-08-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2018-01-10"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            ab.addPerson(person);","lastModifiedDate":"2017-08-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {","lastModifiedDate":"2018-01-10"},{"lineNumber":78,"author":{"gitId":"JovonLim"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(new PersonBuilder(ALICE).build(),","lastModifiedDate":"2022-10-01"},{"lineNumber":79,"author":{"gitId":"JovonLim"},"content":"                new PersonBuilder(BENSON).build(),","lastModifiedDate":"2022-10-01"},{"lineNumber":80,"author":{"gitId":"JovonLim"},"content":"                new PersonBuilder(CARL).build(),","lastModifiedDate":"2022-10-01"},{"lineNumber":81,"author":{"gitId":"JovonLim"},"content":"                new PersonBuilder(DANIEL).build(),","lastModifiedDate":"2022-10-01"},{"lineNumber":82,"author":{"gitId":"JovonLim"},"content":"                new PersonBuilder(ELLE).build(),","lastModifiedDate":"2022-10-01"},{"lineNumber":83,"author":{"gitId":"JovonLim"},"content":"                new PersonBuilder(FIONA).build(),","lastModifiedDate":"2022-10-01"},{"lineNumber":84,"author":{"gitId":"JovonLim"},"content":"                new PersonBuilder(GEORGE).build()));","lastModifiedDate":"2022-10-01"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"NicholasTYD":4,"JovonLim":8,"-":74}}]
